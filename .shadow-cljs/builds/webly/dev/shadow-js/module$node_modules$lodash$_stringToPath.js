["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/lodash/_stringToPath.js"],"~:js","shadow$provide.module$node_modules$lodash$_stringToPath=function(global,require,module,exports){var rePropName=/[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g,reEscapeChar=/\\\\(\\\\)?/g;global=require(\"module$node_modules$lodash$_memoizeCapped\")(function(string){var result=[];46===string.charCodeAt(0)&&result.push(\"\");string.replace(rePropName,function(match,number,quote,subString){result.push(quote?subString.replace(reEscapeChar,\"$1\"):number||match)});\nreturn result});module.exports=global}","~:source","shadow$provide[\"module$node_modules$lodash$_stringToPath\"] = function(global,require,module,exports) {\nvar memoizeCapped = require('./_memoizeCapped');\n\n/** Used to match property names within property paths. */\nvar rePropName = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g;\n\n/** Used to match backslashes in property paths. */\nvar reEscapeChar = /\\\\(\\\\)?/g;\n\n/**\n * Converts `string` to a property path array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the property path array.\n */\nvar stringToPath = memoizeCapped(function(string) {\n  var result = [];\n  if (string.charCodeAt(0) === 46 /* . */) {\n    result.push('');\n  }\n  string.replace(rePropName, function(match, number, quote, subString) {\n    result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));\n  });\n  return result;\n});\n\nmodule.exports = stringToPath;\n\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$lodash$_memoizeCapped"]],"~:properties",["^5",[]],"~:compiled-at",1621210442077,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$lodash$_stringToPath.js\",\n\"lineCount\":2,\n\"mappings\":\"AAAAA,cAAA,CAAA,wCAAA,CAA6D,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAIrG,IAAIC,WAAa,kGAAjB,CAGIC,aAAe,UASfC,OAAAA,CAfgBL,OAAAM,CAAQ,2CAARA,CAeD,CAAc,QAAQ,CAACC,MAAD,CAAS,CAChD,IAAIC,OAAS,EACgB,GAA7B,GAAID,MAAOE,CAAAA,UAAP,CAAkB,CAAlB,CAAJ,EACED,MAAOE,CAAAA,IAAP,CAAY,EAAZ,CAEFH,OAAOI,CAAAA,OAAP,CAAeR,UAAf,CAA2B,QAAQ,CAACS,KAAD,CAAQC,MAAR,CAAgBC,KAAhB,CAAuBC,SAAvB,CAAkC,CACnEP,MAAOE,CAAAA,IAAP,CAAYI,KAAA,CAAQC,SAAUJ,CAAAA,OAAV,CAAkBP,YAAlB,CAAgC,IAAhC,CAAR,CAAiDS,MAAjD,EAA2DD,KAAvE,CADmE,CAArE,CAGA;MAAOJ,OARyC,CAA/B,CAWnBP,OAAOC,CAAAA,OAAP,CAAiBG,MA3BoF;\",\n\"sources\":[\"node_modules/lodash/_stringToPath.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$lodash$_stringToPath\\\"] = function(global,require,module,exports) {\\nvar memoizeCapped = require('./_memoizeCapped');\\n\\n/** Used to match property names within property paths. */\\nvar rePropName = /[^.[\\\\]]+|\\\\[(?:(-?\\\\d+(?:\\\\.\\\\d+)?)|([\\\"'])((?:(?!\\\\2)[^\\\\\\\\]|\\\\\\\\.)*?)\\\\2)\\\\]|(?=(?:\\\\.|\\\\[\\\\])(?:\\\\.|\\\\[\\\\]|$))/g;\\n\\n/** Used to match backslashes in property paths. */\\nvar reEscapeChar = /\\\\\\\\(\\\\\\\\)?/g;\\n\\n/**\\n * Converts `string` to a property path array.\\n *\\n * @private\\n * @param {string} string The string to convert.\\n * @returns {Array} Returns the property path array.\\n */\\nvar stringToPath = memoizeCapped(function(string) {\\n  var result = [];\\n  if (string.charCodeAt(0) === 46 /* . */) {\\n    result.push('');\\n  }\\n  string.replace(rePropName, function(match, number, quote, subString) {\\n    result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));\\n  });\\n  return result;\\n});\\n\\nmodule.exports = stringToPath;\\n\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"rePropName\",\"reEscapeChar\",\"stringToPath\",\"memoizeCapped\",\"string\",\"result\",\"charCodeAt\",\"push\",\"replace\",\"match\",\"number\",\"quote\",\"subString\"]\n}\n"]