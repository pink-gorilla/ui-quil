["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/lodash/_baseTrim.js"],"~:js","shadow$provide.module$node_modules$lodash$_baseTrim=function(global,require,module,exports){var trimmedEndIndex=require(\"module$node_modules$lodash$_trimmedEndIndex\"),reTrimStart=/^\\s+/;module.exports=function(string){return string?string.slice(0,trimmedEndIndex(string)+1).replace(reTrimStart,\"\"):string}}","~:source","shadow$provide[\"module$node_modules$lodash$_baseTrim\"] = function(global,require,module,exports) {\nvar trimmedEndIndex = require('./_trimmedEndIndex');\n\n/** Used to match leading whitespace. */\nvar reTrimStart = /^\\s+/;\n\n/**\n * The base implementation of `_.trim`.\n *\n * @private\n * @param {string} string The string to trim.\n * @returns {string} Returns the trimmed string.\n */\nfunction baseTrim(string) {\n  return string\n    ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, '')\n    : string;\n}\n\nmodule.exports = baseTrim;\n\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$lodash$_trimmedEndIndex","~$shadow.js"]],"~:properties",["^5",[]],"~:compiled-at",1621210442099,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$lodash$_baseTrim.js\",\n\"lineCount\":1,\n\"mappings\":\"AAAAA,cAAA,CAAA,oCAAA,CAAyD,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CACjG,IAAIC,gBAAkBH,OAAA,CAAQ,6CAAR,CAAtB,CAGII,YAAc,MAelBH,OAAOC,CAAAA,OAAP,CANAG,QAAiB,CAACC,MAAD,CAAS,CACxB,MAAOA,OAAA,CACHA,MAAOC,CAAAA,KAAP,CAAa,CAAb,CAAgBJ,eAAA,CAAgBG,MAAhB,CAAhB,CAA0C,CAA1C,CAA6CE,CAAAA,OAA7C,CAAqDJ,WAArD,CAAkE,EAAlE,CADG,CAEHE,MAHoB,CAbuE;\",\n\"sources\":[\"node_modules/lodash/_baseTrim.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$lodash$_baseTrim\\\"] = function(global,require,module,exports) {\\nvar trimmedEndIndex = require('./_trimmedEndIndex');\\n\\n/** Used to match leading whitespace. */\\nvar reTrimStart = /^\\\\s+/;\\n\\n/**\\n * The base implementation of `_.trim`.\\n *\\n * @private\\n * @param {string} string The string to trim.\\n * @returns {string} Returns the trimmed string.\\n */\\nfunction baseTrim(string) {\\n  return string\\n    ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, '')\\n    : string;\\n}\\n\\nmodule.exports = baseTrim;\\n\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"trimmedEndIndex\",\"reTrimStart\",\"baseTrim\",\"string\",\"slice\",\"replace\"]\n}\n"]