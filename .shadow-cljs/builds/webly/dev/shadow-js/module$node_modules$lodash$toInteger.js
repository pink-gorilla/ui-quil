["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/lodash/toInteger.js"],"~:js","shadow$provide.module$node_modules$lodash$toInteger=function(global,require,module,exports){var toFinite=require(\"module$node_modules$lodash$toFinite\");module.exports=function(value){value=toFinite(value);var remainder=value%1;return value===value?remainder?value-remainder:value:0}}","~:source","shadow$provide[\"module$node_modules$lodash$toInteger\"] = function(global,require,module,exports) {\nvar toFinite = require('./toFinite');\n\n/**\n * Converts `value` to an integer.\n *\n * **Note:** This method is loosely based on\n * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {number} Returns the converted integer.\n * @example\n *\n * _.toInteger(3.2);\n * // => 3\n *\n * _.toInteger(Number.MIN_VALUE);\n * // => 0\n *\n * _.toInteger(Infinity);\n * // => 1.7976931348623157e+308\n *\n * _.toInteger('3.2');\n * // => 3\n */\nfunction toInteger(value) {\n  var result = toFinite(value),\n      remainder = result % 1;\n\n  return result === result ? (remainder ? result - remainder : result) : 0;\n}\n\nmodule.exports = toInteger;\n\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$lodash$toFinite"]],"~:properties",["^5",[]],"~:compiled-at",1621210442100,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$lodash$toInteger.js\",\n\"lineCount\":1,\n\"mappings\":\"AAAAA,cAAA,CAAA,oCAAA,CAAyD,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CACjG,IAAIC,SAAWH,OAAA,CAAQ,qCAAR,CAmCfC,OAAOC,CAAAA,OAAP,CAPAE,QAAkB,CAACC,KAAD,CAAQ,CACpBC,KAAAA,CAASH,QAAA,CAASE,KAAT,CAAb,KACIE,UAAYD,KAAZC,CAAqB,CAEzB,OAAOD,MAAA,GAAWA,KAAX,CAAqBC,SAAA,CAAYD,KAAZ,CAAqBC,SAArB,CAAiCD,KAAtD,CAAgE,CAJ/C,CA7BuE;\",\n\"sources\":[\"node_modules/lodash/toInteger.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$lodash$toInteger\\\"] = function(global,require,module,exports) {\\nvar toFinite = require('./toFinite');\\n\\n/**\\n * Converts `value` to an integer.\\n *\\n * **Note:** This method is loosely based on\\n * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).\\n *\\n * @static\\n * @memberOf _\\n * @since 4.0.0\\n * @category Lang\\n * @param {*} value The value to convert.\\n * @returns {number} Returns the converted integer.\\n * @example\\n *\\n * _.toInteger(3.2);\\n * // => 3\\n *\\n * _.toInteger(Number.MIN_VALUE);\\n * // => 0\\n *\\n * _.toInteger(Infinity);\\n * // => 1.7976931348623157e+308\\n *\\n * _.toInteger('3.2');\\n * // => 3\\n */\\nfunction toInteger(value) {\\n  var result = toFinite(value),\\n      remainder = result % 1;\\n\\n  return result === result ? (remainder ? result - remainder : result) : 0;\\n}\\n\\nmodule.exports = toInteger;\\n\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"toFinite\",\"toInteger\",\"value\",\"result\",\"remainder\"]\n}\n"]