["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/lodash/findIndex.js"],"~:js","shadow$provide.module$node_modules$lodash$findIndex=function(global,require,module,exports){var baseFindIndex=require(\"module$node_modules$lodash$_baseFindIndex\"),baseIteratee=require(\"module$node_modules$lodash$_baseIteratee\"),toInteger=require(\"module$node_modules$lodash$toInteger\"),nativeMax=Math.max;module.exports=function(array,predicate,fromIndex){var length=null==array?0:array.length;if(!length)return-1;fromIndex=null==fromIndex?0:toInteger(fromIndex);0>fromIndex&&(fromIndex=nativeMax(length+\nfromIndex,0));return baseFindIndex(array,baseIteratee(predicate,3),fromIndex)}}","~:source","shadow$provide[\"module$node_modules$lodash$findIndex\"] = function(global,require,module,exports) {\nvar baseFindIndex = require('./_baseFindIndex'),\n    baseIteratee = require('./_baseIteratee'),\n    toInteger = require('./toInteger');\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max;\n\n/**\n * This method is like `_.find` except that it returns the index of the first\n * element `predicate` returns truthy for instead of the element itself.\n *\n * @static\n * @memberOf _\n * @since 1.1.0\n * @category Array\n * @param {Array} array The array to inspect.\n * @param {Function} [predicate=_.identity] The function invoked per iteration.\n * @param {number} [fromIndex=0] The index to search from.\n * @returns {number} Returns the index of the found element, else `-1`.\n * @example\n *\n * var users = [\n *   { 'user': 'barney',  'active': false },\n *   { 'user': 'fred',    'active': false },\n *   { 'user': 'pebbles', 'active': true }\n * ];\n *\n * _.findIndex(users, function(o) { return o.user == 'barney'; });\n * // => 0\n *\n * // The `_.matches` iteratee shorthand.\n * _.findIndex(users, { 'user': 'fred', 'active': false });\n * // => 1\n *\n * // The `_.matchesProperty` iteratee shorthand.\n * _.findIndex(users, ['active', false]);\n * // => 0\n *\n * // The `_.property` iteratee shorthand.\n * _.findIndex(users, 'active');\n * // => 2\n */\nfunction findIndex(array, predicate, fromIndex) {\n  var length = array == null ? 0 : array.length;\n  if (!length) {\n    return -1;\n  }\n  var index = fromIndex == null ? 0 : toInteger(fromIndex);\n  if (index < 0) {\n    index = nativeMax(length + index, 0);\n  }\n  return baseFindIndex(array, baseIteratee(predicate, 3), index);\n}\n\nmodule.exports = findIndex;\n\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$lodash$_baseFindIndex","~$shadow.js","~$module$node_modules$lodash$toInteger","~$module$node_modules$lodash$_baseIteratee"]],"~:properties",["^5",[]],"~:compiled-at",1621210442100,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$lodash$findIndex.js\",\n\"lineCount\":2,\n\"mappings\":\"AAAAA,cAAA,CAAA,oCAAA,CAAyD,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAAA,IAC7FC,cAAgBH,OAAA,CAAQ,2CAAR,CAD6E,CAE7FI,aAAeJ,OAAA,CAAQ,0CAAR,CAF8E,CAG7FK,UAAYL,OAAA,CAAQ,sCAAR,CAHiF,CAM7FM,UAAYC,IAAKC,CAAAA,GAiDrBP,OAAOC,CAAAA,OAAP,CAZAO,QAAkB,CAACC,KAAD,CAAQC,SAAR,CAAmBC,SAAnB,CAA8B,CAC9C,IAAIC,OAAkB,IAAT,EAAAH,KAAA,CAAgB,CAAhB,CAAoBA,KAAMG,CAAAA,MACvC,IAAI,CAACA,MAAL,CACE,MAAO,EAELC,UAAAA,CAAqB,IAAb,EAAAF,SAAA,CAAoB,CAApB,CAAwBP,SAAA,CAAUO,SAAV,CACxB,EAAZ,CAAIE,SAAJ,GACEA,SADF,CACUR,SAAA,CAAUO,MAAV;AAAmBC,SAAnB,CAA0B,CAA1B,CADV,CAGA,OAAOX,cAAA,CAAcO,KAAd,CAAqBN,YAAA,CAAaO,SAAb,CAAwB,CAAxB,CAArB,CAAiDG,SAAjD,CATuC,CA3CiD;\",\n\"sources\":[\"node_modules/lodash/findIndex.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$lodash$findIndex\\\"] = function(global,require,module,exports) {\\nvar baseFindIndex = require('./_baseFindIndex'),\\n    baseIteratee = require('./_baseIteratee'),\\n    toInteger = require('./toInteger');\\n\\n/* Built-in method references for those with the same name as other `lodash` methods. */\\nvar nativeMax = Math.max;\\n\\n/**\\n * This method is like `_.find` except that it returns the index of the first\\n * element `predicate` returns truthy for instead of the element itself.\\n *\\n * @static\\n * @memberOf _\\n * @since 1.1.0\\n * @category Array\\n * @param {Array} array The array to inspect.\\n * @param {Function} [predicate=_.identity] The function invoked per iteration.\\n * @param {number} [fromIndex=0] The index to search from.\\n * @returns {number} Returns the index of the found element, else `-1`.\\n * @example\\n *\\n * var users = [\\n *   { 'user': 'barney',  'active': false },\\n *   { 'user': 'fred',    'active': false },\\n *   { 'user': 'pebbles', 'active': true }\\n * ];\\n *\\n * _.findIndex(users, function(o) { return o.user == 'barney'; });\\n * // => 0\\n *\\n * // The `_.matches` iteratee shorthand.\\n * _.findIndex(users, { 'user': 'fred', 'active': false });\\n * // => 1\\n *\\n * // The `_.matchesProperty` iteratee shorthand.\\n * _.findIndex(users, ['active', false]);\\n * // => 0\\n *\\n * // The `_.property` iteratee shorthand.\\n * _.findIndex(users, 'active');\\n * // => 2\\n */\\nfunction findIndex(array, predicate, fromIndex) {\\n  var length = array == null ? 0 : array.length;\\n  if (!length) {\\n    return -1;\\n  }\\n  var index = fromIndex == null ? 0 : toInteger(fromIndex);\\n  if (index < 0) {\\n    index = nativeMax(length + index, 0);\\n  }\\n  return baseFindIndex(array, baseIteratee(predicate, 3), index);\\n}\\n\\nmodule.exports = findIndex;\\n\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"baseFindIndex\",\"baseIteratee\",\"toInteger\",\"nativeMax\",\"Math\",\"max\",\"findIndex\",\"array\",\"predicate\",\"fromIndex\",\"length\",\"index\"]\n}\n"]