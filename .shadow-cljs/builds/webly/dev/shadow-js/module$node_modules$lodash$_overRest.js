["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/lodash/_overRest.js"],"~:js","shadow$provide.module$node_modules$lodash$_overRest=function(global,require,module,exports){var apply=require(\"module$node_modules$lodash$_apply\"),nativeMax=Math.max;module.exports=function(func,start,transform){start=nativeMax(void 0===start?func.length-1:start,0);return function(){for(var args=arguments,index=-1,length=nativeMax(args.length-start,0),array=Array(length);++index<length;)array[index]=args[start+index];index=-1;for(length=Array(start+1);++index<start;)length[index]=args[index];length[start]=\ntransform(array);return apply(func,this,length)}}}","~:source","shadow$provide[\"module$node_modules$lodash$_overRest\"] = function(global,require,module,exports) {\nvar apply = require('./_apply');\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max;\n\n/**\n * A specialized version of `baseRest` which transforms the rest array.\n *\n * @private\n * @param {Function} func The function to apply a rest parameter to.\n * @param {number} [start=func.length-1] The start position of the rest parameter.\n * @param {Function} transform The rest array transform.\n * @returns {Function} Returns the new function.\n */\nfunction overRest(func, start, transform) {\n  start = nativeMax(start === undefined ? (func.length - 1) : start, 0);\n  return function() {\n    var args = arguments,\n        index = -1,\n        length = nativeMax(args.length - start, 0),\n        array = Array(length);\n\n    while (++index < length) {\n      array[index] = args[start + index];\n    }\n    index = -1;\n    var otherArgs = Array(start + 1);\n    while (++index < start) {\n      otherArgs[index] = args[index];\n    }\n    otherArgs[start] = transform(array);\n    return apply(func, this, otherArgs);\n  };\n}\n\nmodule.exports = overRest;\n\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$lodash$_apply","~$shadow.js"]],"~:properties",["^5",[]],"~:compiled-at",1621210442087,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$lodash$_overRest.js\",\n\"lineCount\":2,\n\"mappings\":\"AAAAA,cAAA,CAAA,oCAAA,CAAyD,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CACjG,IAAIC,MAAQH,OAAA,CAAQ,mCAAR,CAAZ,CAGII,UAAYC,IAAKC,CAAAA,GAgCrBL,OAAOC,CAAAA,OAAP,CArBAK,QAAiB,CAACC,IAAD,CAAOC,KAAP,CAAcC,SAAd,CAAyB,CACxCD,KAAA,CAAQL,SAAA,CAAoBO,IAAAA,EAAV,GAAAF,KAAA,CAAuBD,IAAKI,CAAAA,MAA5B,CAAqC,CAArC,CAA0CH,KAApD,CAA2D,CAA3D,CACR,OAAO,SAAQ,EAAG,CAMhB,IANgB,IACZI,KAAOC,SADK,CAEZC,MAAQ,EAFI,CAGZH,OAASR,SAAA,CAAUS,IAAKD,CAAAA,MAAf,CAAwBH,KAAxB,CAA+B,CAA/B,CAHG,CAIZO,MAAQC,KAAA,CAAML,MAAN,CAEZ,CAAO,EAAEG,KAAT,CAAiBH,MAAjB,CAAA,CACEI,KAAA,CAAMD,KAAN,CAAA,CAAeF,IAAA,CAAKJ,KAAL,CAAaM,KAAb,CAEjBA,MAAA,CAAQ,EAER,KADIG,MACJ,CADgBD,KAAA,CAAMR,KAAN,CAAc,CAAd,CAChB,CAAO,EAAEM,KAAT,CAAiBN,KAAjB,CAAA,CACES,MAAA,CAAUH,KAAV,CAAA,CAAmBF,IAAA,CAAKE,KAAL,CAErBG,OAAA,CAAUT,KAAV,CAAA;AAAmBC,SAAA,CAAUM,KAAV,CACnB,OAAOb,MAAA,CAAMK,IAAN,CAAY,IAAZ,CAAkBU,MAAlB,CAfS,CAFsB,CAfuD;\",\n\"sources\":[\"node_modules/lodash/_overRest.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$lodash$_overRest\\\"] = function(global,require,module,exports) {\\nvar apply = require('./_apply');\\n\\n/* Built-in method references for those with the same name as other `lodash` methods. */\\nvar nativeMax = Math.max;\\n\\n/**\\n * A specialized version of `baseRest` which transforms the rest array.\\n *\\n * @private\\n * @param {Function} func The function to apply a rest parameter to.\\n * @param {number} [start=func.length-1] The start position of the rest parameter.\\n * @param {Function} transform The rest array transform.\\n * @returns {Function} Returns the new function.\\n */\\nfunction overRest(func, start, transform) {\\n  start = nativeMax(start === undefined ? (func.length - 1) : start, 0);\\n  return function() {\\n    var args = arguments,\\n        index = -1,\\n        length = nativeMax(args.length - start, 0),\\n        array = Array(length);\\n\\n    while (++index < length) {\\n      array[index] = args[start + index];\\n    }\\n    index = -1;\\n    var otherArgs = Array(start + 1);\\n    while (++index < start) {\\n      otherArgs[index] = args[index];\\n    }\\n    otherArgs[start] = transform(array);\\n    return apply(func, this, otherArgs);\\n  };\\n}\\n\\nmodule.exports = overRest;\\n\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"apply\",\"nativeMax\",\"Math\",\"max\",\"overRest\",\"func\",\"start\",\"transform\",\"undefined\",\"length\",\"args\",\"arguments\",\"index\",\"array\",\"Array\",\"otherArgs\"]\n}\n"]