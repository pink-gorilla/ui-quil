["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/cose-base/cose-base.js"],"~:js","shadow$provide.module$node_modules$cose_base$cose_base=function(global,require,module$jscomp$0,exports$jscomp$0){(function(root,factory){\"object\"===typeof exports$jscomp$0&&\"object\"===typeof module$jscomp$0?module$jscomp$0.exports=factory(require(\"module$node_modules$layout_base$layout_base\")):\"function\"===typeof define&&define.amd?define([\"layout-base\"],factory):\"object\"===typeof exports$jscomp$0?exports$jscomp$0.coseBase=factory(require(\"module$node_modules$layout_base$layout_base\")):root.coseBase=\nfactory(root.layoutBase)})(this,function(__WEBPACK_EXTERNAL_MODULE_0__){return function(modules){function __webpack_require__(moduleId){if(installedModules[moduleId])return installedModules[moduleId].exports;var module=installedModules[moduleId]={i:moduleId,l:!1,exports:{}};modules[moduleId].call(module.exports,module,module.exports,__webpack_require__);module.l=!0;return module.exports}var installedModules={};__webpack_require__.m=modules;__webpack_require__.c=installedModules;__webpack_require__.i=\nfunction(value){return value};__webpack_require__.d=function(exports,name,getter){__webpack_require__.o(exports,name)||Object.defineProperty(exports,name,{configurable:!1,enumerable:!0,get:getter})};__webpack_require__.n=function(module){var getter=module&&module.__esModule?function(){return module[\"default\"]}:function(){return module};__webpack_require__.d(getter,\"a\",getter);return getter};__webpack_require__.o=function(object,property){return Object.prototype.hasOwnProperty.call(object,property)};\n__webpack_require__.p=\"\";return __webpack_require__(__webpack_require__.s=7)}([function(module,exports){module.exports=__WEBPACK_EXTERNAL_MODULE_0__},function(module,exports,__webpack_require__){function CoSEConstants(){}exports=__webpack_require__(0).FDLayoutConstants;for(var prop in exports)CoSEConstants[prop]=exports[prop];CoSEConstants.DEFAULT_USE_MULTI_LEVEL_SCALING=!1;CoSEConstants.DEFAULT_RADIAL_SEPARATION=exports.DEFAULT_EDGE_LENGTH;CoSEConstants.DEFAULT_COMPONENT_SEPERATION=60;CoSEConstants.TILE=\n!0;CoSEConstants.TILING_PADDING_VERTICAL=10;CoSEConstants.TILING_PADDING_HORIZONTAL=10;CoSEConstants.TREE_REDUCTION_ON_INCREMENTAL=!1;module.exports=CoSEConstants},function(module,exports,__webpack_require__){function CoSEEdge(source,target,vEdge){FDLayoutEdge.call(this,source,target,vEdge)}var FDLayoutEdge=__webpack_require__(0).FDLayoutEdge;CoSEEdge.prototype=Object.create(FDLayoutEdge.prototype);for(var prop in FDLayoutEdge)CoSEEdge[prop]=FDLayoutEdge[prop];module.exports=CoSEEdge},function(module,\nexports,__webpack_require__){function CoSEGraph(parent,graphMgr,vGraph){LGraph.call(this,parent,graphMgr,vGraph)}var LGraph=__webpack_require__(0).LGraph;CoSEGraph.prototype=Object.create(LGraph.prototype);for(var prop in LGraph)CoSEGraph[prop]=LGraph[prop];module.exports=CoSEGraph},function(module,exports,__webpack_require__){function CoSEGraphManager(layout){LGraphManager.call(this,layout)}var LGraphManager=__webpack_require__(0).LGraphManager;CoSEGraphManager.prototype=Object.create(LGraphManager.prototype);\nfor(var prop in LGraphManager)CoSEGraphManager[prop]=LGraphManager[prop];module.exports=CoSEGraphManager},function(module,exports,__webpack_require__){function CoSENode(gm,loc,size,vNode){FDLayoutNode.call(this,gm,loc,size,vNode)}var FDLayoutNode=__webpack_require__(0).FDLayoutNode,IMath=__webpack_require__(0).IMath;CoSENode.prototype=Object.create(FDLayoutNode.prototype);for(var prop in FDLayoutNode)CoSENode[prop]=FDLayoutNode[prop];CoSENode.prototype.move=function(){var layout=this.graphManager.getLayout();\nthis.displacementX=layout.coolingFactor*(this.springForceX+this.repulsionForceX+this.gravitationForceX)/this.noOfChildren;this.displacementY=layout.coolingFactor*(this.springForceY+this.repulsionForceY+this.gravitationForceY)/this.noOfChildren;Math.abs(this.displacementX)>layout.coolingFactor*layout.maxNodeDisplacement&&(this.displacementX=layout.coolingFactor*layout.maxNodeDisplacement*IMath.sign(this.displacementX));Math.abs(this.displacementY)>layout.coolingFactor*layout.maxNodeDisplacement&&(this.displacementY=\nlayout.coolingFactor*layout.maxNodeDisplacement*IMath.sign(this.displacementY));null==this.child?this.moveBy(this.displacementX,this.displacementY):0==this.child.getNodes().length?this.moveBy(this.displacementX,this.displacementY):this.propogateDisplacementToChildren(this.displacementX,this.displacementY);layout.totalDisplacement+=Math.abs(this.displacementX)+Math.abs(this.displacementY);this.displacementY=this.displacementX=this.gravitationForceY=this.gravitationForceX=this.repulsionForceY=this.repulsionForceX=\nthis.springForceY=this.springForceX=0};CoSENode.prototype.propogateDisplacementToChildren=function(dX,dY){for(var nodes=this.getChild().getNodes(),node,i=0;i<nodes.length;i++)node=nodes[i],null==node.getChild()?(node.moveBy(dX,dY),node.displacementX+=dX,node.displacementY+=dY):node.propogateDisplacementToChildren(dX,dY)};CoSENode.prototype.setPred1=function(pred1){this.pred1=pred1};CoSENode.prototype.getPred1=function(){return pred1};CoSENode.prototype.getPred2=function(){return pred2};CoSENode.prototype.setNext=\nfunction(next){this.next=next};CoSENode.prototype.getNext=function(){return next};CoSENode.prototype.setProcessed=function(processed){this.processed=processed};CoSENode.prototype.isProcessed=function(){return processed};module.exports=CoSENode},function(module,exports,__webpack_require__){function CoSELayout(){FDLayout.call(this);this.toBeTiled={}}var FDLayout=__webpack_require__(0).FDLayout,CoSEGraphManager=__webpack_require__(4),CoSEGraph=__webpack_require__(3),CoSENode=__webpack_require__(5),CoSEEdge=\n__webpack_require__(2),CoSEConstants=__webpack_require__(1),FDLayoutConstants=__webpack_require__(0).FDLayoutConstants,LayoutConstants=__webpack_require__(0).LayoutConstants,Point=__webpack_require__(0).Point,PointD=__webpack_require__(0).PointD,Layout=__webpack_require__(0).Layout,Integer=__webpack_require__(0).Integer,IGeometry=__webpack_require__(0).IGeometry,LGraph=__webpack_require__(0).LGraph,Transform=__webpack_require__(0).Transform;CoSELayout.prototype=Object.create(FDLayout.prototype);for(var prop in FDLayout)CoSELayout[prop]=\nFDLayout[prop];CoSELayout.prototype.newGraphManager=function(){var gm=new CoSEGraphManager(this);return this.graphManager=gm};CoSELayout.prototype.newGraph=function(vGraph){return new CoSEGraph(null,this.graphManager,vGraph)};CoSELayout.prototype.newNode=function(vNode){return new CoSENode(this.graphManager,vNode)};CoSELayout.prototype.newEdge=function(vEdge){return new CoSEEdge(null,null,vEdge)};CoSELayout.prototype.initParameters=function(){FDLayout.prototype.initParameters.call(this,arguments);\nthis.isSubLayout||(this.idealEdgeLength=10>CoSEConstants.DEFAULT_EDGE_LENGTH?10:CoSEConstants.DEFAULT_EDGE_LENGTH,this.useSmartIdealEdgeLengthCalculation=CoSEConstants.DEFAULT_USE_SMART_IDEAL_EDGE_LENGTH_CALCULATION,this.springConstant=FDLayoutConstants.DEFAULT_SPRING_STRENGTH,this.repulsionConstant=FDLayoutConstants.DEFAULT_REPULSION_STRENGTH,this.gravityConstant=FDLayoutConstants.DEFAULT_GRAVITY_STRENGTH,this.compoundGravityConstant=FDLayoutConstants.DEFAULT_COMPOUND_GRAVITY_STRENGTH,this.gravityRangeFactor=\nFDLayoutConstants.DEFAULT_GRAVITY_RANGE_FACTOR,this.compoundGravityRangeFactor=FDLayoutConstants.DEFAULT_COMPOUND_GRAVITY_RANGE_FACTOR,this.prunedNodesAll=[],this.afterGrowthIterations=this.growTreeIterations=0,this.isGrowthFinished=this.isTreeGrowing=!1,this.coolingCycle=0,this.maxCoolingCycle=this.maxIterations/FDLayoutConstants.CONVERGENCE_CHECK_PERIOD,this.finalTemperature=FDLayoutConstants.CONVERGENCE_CHECK_PERIOD/this.maxIterations,this.coolingAdjuster=1)};CoSELayout.prototype.layout=function(){LayoutConstants.DEFAULT_CREATE_BENDS_AS_NEEDED&&\n(this.createBendpoints(),this.graphManager.resetAllEdges());this.level=0;return this.classicLayout()};CoSELayout.prototype.classicLayout=function(){this.nodesWithGravity=this.calculateNodesToApplyGravitationTo();this.graphManager.setAllNodesToApplyGravitation(this.nodesWithGravity);this.calcNoOfChildrenForAllNodes();this.graphManager.calcLowestCommonAncestors();this.graphManager.calcInclusionTreeDepths();this.graphManager.getRoot().calcEstimatedSize();this.calcIdealEdgeLengths();if(this.incremental)CoSEConstants.TREE_REDUCTION_ON_INCREMENTAL&&\n(this.reduceTrees(),this.graphManager.resetAllNodesToApplyGravitation(),allNodes=new Set(this.getAllNodes()),forest=this.nodesWithGravity.filter(function(x){return allNodes.has(x)}),this.graphManager.setAllNodesToApplyGravitation(forest));else{var forest=this.getFlatForest();if(0<forest.length)this.positionNodesRadially(forest);else{this.reduceTrees();this.graphManager.resetAllNodesToApplyGravitation();var allNodes=new Set(this.getAllNodes());forest=this.nodesWithGravity.filter(function(x){return allNodes.has(x)});\nthis.graphManager.setAllNodesToApplyGravitation(forest);this.positionNodesRandomly()}}this.initSpringEmbedder();this.runSpringEmbedder();return!0};CoSELayout.prototype.tick=function(){this.totalIterations++;if(this.totalIterations===this.maxIterations&&!this.isTreeGrowing&&!this.isGrowthFinished)if(0<this.prunedNodesAll.length)this.isTreeGrowing=!0;else return!0;if(0==this.totalIterations%FDLayoutConstants.CONVERGENCE_CHECK_PERIOD&&!this.isTreeGrowing&&!this.isGrowthFinished){if(this.isConverged())if(0<\nthis.prunedNodesAll.length)this.isTreeGrowing=!0;else return!0;this.coolingCycle++;0==this.layoutQuality?this.coolingAdjuster=this.coolingCycle:1==this.layoutQuality&&(this.coolingAdjuster=this.coolingCycle/3);this.coolingFactor=Math.max(this.initialCoolingFactor-Math.pow(this.coolingCycle,Math.log(100*(this.initialCoolingFactor-this.finalTemperature))/Math.log(this.maxCoolingCycle))/100*this.coolingAdjuster,this.finalTemperature);this.animationPeriod=Math.ceil(this.initialAnimationPeriod*Math.sqrt(this.coolingFactor))}if(this.isTreeGrowing){if(0==\nthis.growTreeIterations%10)if(0<this.prunedNodesAll.length){this.graphManager.updateBounds();this.updateGrid();this.growTree(this.prunedNodesAll);this.graphManager.resetAllNodesToApplyGravitation();var allNodes=new Set(this.getAllNodes()),intersection=this.nodesWithGravity.filter(function(x){return allNodes.has(x)});this.graphManager.setAllNodesToApplyGravitation(intersection);this.graphManager.updateBounds();this.updateGrid();this.coolingFactor=FDLayoutConstants.DEFAULT_COOLING_FACTOR_INCREMENTAL}else this.isTreeGrowing=\n!1,this.isGrowthFinished=!0;this.growTreeIterations++}if(this.isGrowthFinished){if(this.isConverged())return!0;0==this.afterGrowthIterations%10&&(this.graphManager.updateBounds(),this.updateGrid());this.coolingFactor=(100-this.afterGrowthIterations)/100*FDLayoutConstants.DEFAULT_COOLING_FACTOR_INCREMENTAL;this.afterGrowthIterations++}intersection=!this.isTreeGrowing&&!this.isGrowthFinished;var forceToNodeSurroundingUpdate=1==this.growTreeIterations%10&&this.isTreeGrowing||1==this.afterGrowthIterations%\n10&&this.isGrowthFinished;this.totalDisplacement=0;this.graphManager.updateBounds();this.calcSpringForces();this.calcRepulsionForces(intersection,forceToNodeSurroundingUpdate);this.calcGravitationalForces();this.moveNodes();this.animate();return!1};CoSELayout.prototype.getPositionsData=function(){for(var allNodes=this.graphManager.getAllNodes(),pData={},i=0;i<allNodes.length;i++){var rect=allNodes[i].rect,id=allNodes[i].id;pData[id]={id,x:rect.getCenterX(),y:rect.getCenterY(),w:rect.width,h:rect.height}}return pData};\nCoSELayout.prototype.runSpringEmbedder=function(){this.animationPeriod=this.initialAnimationPeriod=25;var layoutEnded=!1;if(\"during\"===FDLayoutConstants.ANIMATE)this.emit(\"layoutstarted\");else{for(;!layoutEnded;)layoutEnded=this.tick();this.graphManager.updateBounds()}};CoSELayout.prototype.calculateNodesToApplyGravitationTo=function(){var nodeList=[],graphs=this.graphManager.getGraphs(),size=graphs.length,i;for(i=0;i<size;i++){var graph=graphs[i];graph.updateConnected();graph.isConnected||(nodeList=\nnodeList.concat(graph.getNodes()))}return nodeList};CoSELayout.prototype.createBendpoints=function(){var edges=[];edges=edges.concat(this.graphManager.getAllEdges());var visited=new Set,i;for(i=0;i<edges.length;i++){var edge$jscomp$0=edges[i];if(!visited.has(edge$jscomp$0)){var source=edge$jscomp$0.getSource(),target=edge$jscomp$0.getTarget();if(source==target)edge$jscomp$0.getBendpoints().push(new PointD),edge$jscomp$0.getBendpoints().push(new PointD),this.createDummyNodesForBendpoints(edge$jscomp$0),\nvisited.add(edge$jscomp$0);else if(edge$jscomp$0=[],edge$jscomp$0=edge$jscomp$0.concat(source.getEdgeListToNode(target)),edge$jscomp$0=edge$jscomp$0.concat(target.getEdgeListToNode(source)),!visited.has(edge$jscomp$0[0])){if(1<edge$jscomp$0.length)for(source=0;source<edge$jscomp$0.length;source++)target=edge$jscomp$0[source],target.getBendpoints().push(new PointD),this.createDummyNodesForBendpoints(target);edge$jscomp$0.forEach(function(edge){visited.add(edge)})}}if(visited.size==edges.length)break}};\nCoSELayout.prototype.positionNodesRadially=function(forest){for(var currentStartingPoint=new Point(0,0),numberOfColumns=Math.ceil(Math.sqrt(forest.length)),height=0,currentY=0,currentX=0,point=new PointD(0,0),i=0;i<forest.length;i++){0==i%numberOfColumns&&(currentX=0,currentY=height,0!=i&&(currentY+=CoSEConstants.DEFAULT_COMPONENT_SEPERATION),height=0);point=forest[i];var centerNode=Layout.findCenterOfTree(point);currentStartingPoint.x=currentX;currentStartingPoint.y=currentY;point=CoSELayout.radialLayout(point,\ncenterNode,currentStartingPoint);point.y>height&&(height=Math.floor(point.y));currentX=Math.floor(point.x+CoSEConstants.DEFAULT_COMPONENT_SEPERATION)}this.transform(new PointD(LayoutConstants.WORLD_CENTER_X-point.x/2,LayoutConstants.WORLD_CENTER_Y-point.y/2))};CoSELayout.radialLayout=function(tree,centerNode,startingPoint){var radialSep=Math.max(this.maxDiagonalInTree(tree),CoSEConstants.DEFAULT_RADIAL_SEPARATION);CoSELayout.branchRadialLayout(centerNode,null,0,359,0,radialSep);radialSep=LGraph.calculateBounds(tree);\ncenterNode=new Transform;centerNode.setDeviceOrgX(radialSep.getMinX());centerNode.setDeviceOrgY(radialSep.getMinY());centerNode.setWorldOrgX(startingPoint.x);centerNode.setWorldOrgY(startingPoint.y);for(startingPoint=0;startingPoint<tree.length;startingPoint++)tree[startingPoint].transform(centerNode);tree=new PointD(radialSep.getMaxX(),radialSep.getMaxY());return centerNode.inverseTransformPoint(tree)};CoSELayout.branchRadialLayout=function(node,parentOfNode,startAngle,endAngle,distance,radialSeparation){var halfInterval=\n(endAngle-startAngle+1)/2;0>halfInterval&&(halfInterval+=180);halfInterval=(halfInterval+startAngle)%360*IGeometry.TWO_PI/360;node.setCenter(distance*Math.cos(halfInterval),distance*Math.sin(halfInterval));halfInterval=[];halfInterval=halfInterval.concat(node.getEdges());var childCount=halfInterval.length;null!=parentOfNode&&childCount--;var branchCount=0,incEdgesCount=halfInterval.length,startIndex;for(startIndex=node.getEdgesBetween(parentOfNode);1<startIndex.length;){var temp=startIndex[0];startIndex.splice(0,\n1);temp=halfInterval.indexOf(temp);0<=temp&&halfInterval.splice(temp,1);incEdgesCount--;childCount--}startIndex=null!=parentOfNode?(halfInterval.indexOf(startIndex[0])+1)%incEdgesCount:0;for(endAngle=Math.abs(endAngle-startAngle)/childCount;branchCount!=childCount;startIndex=++startIndex%incEdgesCount)if(temp=halfInterval[startIndex].getOtherEnd(node),temp!=parentOfNode){var childStartAngle=(startAngle+branchCount*endAngle)%360;CoSELayout.branchRadialLayout(temp,node,childStartAngle,(childStartAngle+\nendAngle)%360,distance+radialSeparation,radialSeparation);branchCount++}};CoSELayout.maxDiagonalInTree=function(tree){for(var maxDiagonal=Integer.MIN_VALUE,i=0;i<tree.length;i++){var diagonal=tree[i].getDiagonal();diagonal>maxDiagonal&&(maxDiagonal=diagonal)}return maxDiagonal};CoSELayout.prototype.calcRepulsionRange=function(){return 2*(this.level+1)*this.idealEdgeLength};CoSELayout.prototype.groupZeroDegreeMembers=function(){var self=this,tempMemberGroups={};this.memberGroups={};this.idToDummyNode=\n{};for(var zeroDegree=[],allNodes=this.graphManager.getAllNodes(),i=0;i<allNodes.length;i++){var node$jscomp$0=allNodes[i],parent$jscomp$0=node$jscomp$0.getParent();0!==this.getNodeDegreeWithChildren(node$jscomp$0)||void 0!=parent$jscomp$0.id&&this.getToBeTiled(parent$jscomp$0)||zeroDegree.push(node$jscomp$0)}for(i=0;i<zeroDegree.length;i++)node$jscomp$0=zeroDegree[i],allNodes=node$jscomp$0.getParent().id,\"undefined\"===typeof tempMemberGroups[allNodes]&&(tempMemberGroups[allNodes]=[]),tempMemberGroups[allNodes]=\ntempMemberGroups[allNodes].concat(node$jscomp$0);Object.keys(tempMemberGroups).forEach(function(p_id){if(1<tempMemberGroups[p_id].length){var dummyCompoundId=\"DummyCompound_\"+p_id;self.memberGroups[dummyCompoundId]=tempMemberGroups[p_id];var parent=tempMemberGroups[p_id][0].getParent(),dummyCompound=new CoSENode(self.graphManager);dummyCompound.id=dummyCompoundId;dummyCompound.paddingLeft=parent.paddingLeft||0;dummyCompound.paddingRight=parent.paddingRight||0;dummyCompound.paddingBottom=parent.paddingBottom||\n0;dummyCompound.paddingTop=parent.paddingTop||0;self.idToDummyNode[dummyCompoundId]=dummyCompound;dummyCompoundId=self.getGraphManager().add(self.newGraph(),dummyCompound);parent=parent.getChild();parent.add(dummyCompound);for(dummyCompound=0;dummyCompound<tempMemberGroups[p_id].length;dummyCompound++){var node=tempMemberGroups[p_id][dummyCompound];parent.remove(node);dummyCompoundId.add(node)}}})};CoSELayout.prototype.clearCompounds=function(){var childGraphMap={},idToNode={};this.performDFSOnCompounds();\nfor(var i=0;i<this.compoundOrder.length;i++)idToNode[this.compoundOrder[i].id]=this.compoundOrder[i],childGraphMap[this.compoundOrder[i].id]=[].concat(this.compoundOrder[i].getChild().getNodes()),this.graphManager.remove(this.compoundOrder[i].getChild()),this.compoundOrder[i].child=null;this.graphManager.resetAllNodes();this.tileCompoundMembers(childGraphMap,idToNode)};CoSELayout.prototype.clearZeroDegreeMembers=function(){var self=this,tiledZeroDegreePack=this.tiledZeroDegreePack=[];Object.keys(this.memberGroups).forEach(function(id){var compoundNode=\nself.idToDummyNode[id];tiledZeroDegreePack[id]=self.tileNodes(self.memberGroups[id],compoundNode.paddingLeft+compoundNode.paddingRight);compoundNode.rect.width=tiledZeroDegreePack[id].width;compoundNode.rect.height=tiledZeroDegreePack[id].height})};CoSELayout.prototype.repopulateCompounds=function(){for(var i=this.compoundOrder.length-1;0<=i;i--){var lCompoundNode=this.compoundOrder[i];this.adjustLocations(this.tiledMemberPack[lCompoundNode.id],lCompoundNode.rect.x,lCompoundNode.rect.y,lCompoundNode.paddingLeft,\nlCompoundNode.paddingTop)}};CoSELayout.prototype.repopulateZeroDegreeMembers=function(){var self=this,tiledPack=this.tiledZeroDegreePack;Object.keys(tiledPack).forEach(function(id){var compoundNode=self.idToDummyNode[id];self.adjustLocations(tiledPack[id],compoundNode.rect.x,compoundNode.rect.y,compoundNode.paddingLeft,compoundNode.paddingTop)})};CoSELayout.prototype.getToBeTiled=function(node){var id=node.id;if(null!=this.toBeTiled[id])return this.toBeTiled[id];node=node.getChild();if(null==node)return this.toBeTiled[id]=\n!1;node=node.getNodes();for(var i=0;i<node.length;i++){var theChild=node[i];if(0<this.getNodeDegree(theChild))return this.toBeTiled[id]=!1;if(null==theChild.getChild())this.toBeTiled[theChild.id]=!1;else if(!this.getToBeTiled(theChild))return this.toBeTiled[id]=!1}return this.toBeTiled[id]=!0};CoSELayout.prototype.getNodeDegree=function(node){node=node.getEdges();for(var degree=0,i=0;i<node.length;i++){var edge=node[i];edge.getSource().id!==edge.getTarget().id&&(degree+=1)}return degree};CoSELayout.prototype.getNodeDegreeWithChildren=\nfunction(node){var degree=this.getNodeDegree(node);if(null==node.getChild())return degree;node=node.getChild().getNodes();for(var i=0;i<node.length;i++)degree+=this.getNodeDegreeWithChildren(node[i]);return degree};CoSELayout.prototype.performDFSOnCompounds=function(){this.compoundOrder=[];this.fillCompexOrderByDFS(this.graphManager.getRoot().getNodes())};CoSELayout.prototype.fillCompexOrderByDFS=function(children){for(var i=0;i<children.length;i++){var child=children[i];null!=child.getChild()&&this.fillCompexOrderByDFS(child.getChild().getNodes());\nthis.getToBeTiled(child)&&this.compoundOrder.push(child)}};CoSELayout.prototype.adjustLocations=function(organization,x,y,compoundHorizontalMargin,compoundVerticalMargin){y+=compoundVerticalMargin;compoundHorizontalMargin=x+compoundHorizontalMargin;for(compoundVerticalMargin=0;compoundVerticalMargin<organization.rows.length;compoundVerticalMargin++){var row=organization.rows[compoundVerticalMargin];x=compoundHorizontalMargin;for(var maxHeight=0,j=0;j<row.length;j++){var lnode=row[j];lnode.rect.x=\nx;lnode.rect.y=y;x+=lnode.rect.width+organization.horizontalPadding;lnode.rect.height>maxHeight&&(maxHeight=lnode.rect.height)}y+=maxHeight+organization.verticalPadding}};CoSELayout.prototype.tileCompoundMembers=function(childGraphMap,idToNode){var self=this;this.tiledMemberPack=[];Object.keys(childGraphMap).forEach(function(id){var compoundNode=idToNode[id];self.tiledMemberPack[id]=self.tileNodes(childGraphMap[id],compoundNode.paddingLeft+compoundNode.paddingRight);compoundNode.rect.width=self.tiledMemberPack[id].width;\ncompoundNode.rect.height=self.tiledMemberPack[id].height})};CoSELayout.prototype.tileNodes=function(nodes,minWidth){var organization={rows:[],rowWidth:[],rowHeight:[],width:0,height:minWidth,verticalPadding:CoSEConstants.TILING_PADDING_VERTICAL,horizontalPadding:CoSEConstants.TILING_PADDING_HORIZONTAL};nodes.sort(function(n1,n2){return n1.rect.width*n1.rect.height>n2.rect.width*n2.rect.height?-1:n1.rect.width*n1.rect.height<n2.rect.width*n2.rect.height?1:0});for(var i=0;i<nodes.length;i++){var lNode=\nnodes[i];0==organization.rows.length?this.insertNodeToRow(organization,lNode,0,minWidth):this.canAddHorizontal(organization,lNode.rect.width,lNode.rect.height)?this.insertNodeToRow(organization,lNode,this.getShortestRowIndex(organization),minWidth):this.insertNodeToRow(organization,lNode,organization.rows.length,minWidth);this.shiftToLastRow(organization)}return organization};CoSELayout.prototype.insertNodeToRow=function(organization,node,rowIndex,minWidth){rowIndex==organization.rows.length&&(organization.rows.push([]),\norganization.rowWidth.push(minWidth),organization.rowHeight.push(0));minWidth=organization.rowWidth[rowIndex]+node.rect.width;0<organization.rows[rowIndex].length&&(minWidth+=organization.horizontalPadding);organization.rowWidth[rowIndex]=minWidth;organization.width<minWidth&&(organization.width=minWidth);minWidth=node.rect.height;0<rowIndex&&(minWidth+=organization.verticalPadding);var extraHeight=0;minWidth>organization.rowHeight[rowIndex]&&(extraHeight=organization.rowHeight[rowIndex],organization.rowHeight[rowIndex]=\nminWidth,extraHeight=organization.rowHeight[rowIndex]-extraHeight);organization.height+=extraHeight;organization.rows[rowIndex].push(node)};CoSELayout.prototype.getShortestRowIndex=function(organization){for(var r=-1,min=Number.MAX_VALUE,i=0;i<organization.rows.length;i++)organization.rowWidth[i]<min&&(r=i,min=organization.rowWidth[i]);return r};CoSELayout.prototype.getLongestRowIndex=function(organization){for(var r=-1,max=Number.MIN_VALUE,i=0;i<organization.rows.length;i++)organization.rowWidth[i]>\nmax&&(r=i,max=organization.rowWidth[i]);return r};CoSELayout.prototype.canAddHorizontal=function(organization,extraWidth,extraHeight){var sri=this.getShortestRowIndex(organization);if(0>sri)return!0;var min=organization.rowWidth[sri];if(min+organization.horizontalPadding+extraWidth<=organization.width)return!0;var hDiff=0;organization.rowHeight[sri]<extraHeight&&0<sri&&(hDiff=extraHeight+organization.verticalPadding-organization.rowHeight[sri]);sri=organization.width-min>=extraWidth+organization.horizontalPadding?\n(organization.height+hDiff)/(min+extraWidth+organization.horizontalPadding):(organization.height+hDiff)/organization.width;hDiff=extraHeight+organization.verticalPadding;organization=organization.width<extraWidth?(organization.height+hDiff)/extraWidth:(organization.height+hDiff)/organization.width;1>organization&&(organization=1/organization);1>sri&&(sri=1/sri);return sri<organization};CoSELayout.prototype.shiftToLastRow=function(organization){var longest=this.getLongestRowIndex(organization),last=\norganization.rowWidth.length-1,row=organization.rows[longest],node=row[row.length-1],diff=node.width+organization.horizontalPadding;if(organization.width-organization.rowWidth[last]>diff&&longest!=last){row.splice(-1,1);organization.rows[last].push(node);organization.rowWidth[longest]-=diff;organization.rowWidth[last]+=diff;organization.width=organization.rowWidth[instance.getLongestRowIndex(organization)];diff=Number.MIN_VALUE;for(var i=0;i<row.length;i++)row[i].height>diff&&(diff=row[i].height);\n0<longest&&(diff+=organization.verticalPadding);row=organization.rowHeight[longest]+organization.rowHeight[last];organization.rowHeight[longest]=diff;organization.rowHeight[last]<node.height+organization.verticalPadding&&(organization.rowHeight[last]=node.height+organization.verticalPadding);organization.height+=organization.rowHeight[longest]+organization.rowHeight[last]-row;this.shiftToLastRow(organization)}};CoSELayout.prototype.tilingPreLayout=function(){CoSEConstants.TILE&&(this.groupZeroDegreeMembers(),\nthis.clearCompounds(),this.clearZeroDegreeMembers())};CoSELayout.prototype.tilingPostLayout=function(){CoSEConstants.TILE&&(this.repopulateZeroDegreeMembers(),this.repopulateCompounds())};CoSELayout.prototype.reduceTrees=function(){for(var prunedNodesAll=[],containsLeaf=!0,node;containsLeaf;){var allNodes=this.graphManager.getAllNodes(),prunedNodesInStepTemp=[];containsLeaf=!1;for(var i=0;i<allNodes.length;i++)node=allNodes[i],1!=node.getEdges().length||node.getEdges()[0].isInterGraph||null!=node.getChild()||\n(prunedNodesInStepTemp.push([node,node.getEdges()[0],node.getOwner()]),containsLeaf=!0);if(1==containsLeaf){node=[];for(allNodes=0;allNodes<prunedNodesInStepTemp.length;allNodes++)1==prunedNodesInStepTemp[allNodes][0].getEdges().length&&(node.push(prunedNodesInStepTemp[allNodes]),prunedNodesInStepTemp[allNodes][0].getOwner().remove(prunedNodesInStepTemp[allNodes][0]));prunedNodesAll.push(node);this.graphManager.resetAllNodes();this.graphManager.resetAllEdges()}}this.prunedNodesAll=prunedNodesAll};\nCoSELayout.prototype.growTree=function(prunedNodesAll){for(var prunedNodesInStep=prunedNodesAll[prunedNodesAll.length-1],nodeData,i=0;i<prunedNodesInStep.length;i++)nodeData=prunedNodesInStep[i],this.findPlaceforPrunedNode(nodeData),nodeData[2].add(nodeData[0]),nodeData[2].add(nodeData[1],nodeData[1].source,nodeData[1].target);prunedNodesAll.splice(prunedNodesAll.length-1,1);this.graphManager.resetAllNodes();this.graphManager.resetAllEdges()};CoSELayout.prototype.findPlaceforPrunedNode=function(nodeData){var gridForPrunedNode,\nprunedNode=nodeData[0];nodeData=prunedNode==nodeData[1].source?nodeData[1].target:nodeData[1].source;var startGridX=nodeData.startX,finishGridX=nodeData.finishX,startGridY=nodeData.startY,finishGridY=nodeData.finishY,controlRegions=[0,0,0,0];if(0<startGridY)for(var i=startGridX;i<=finishGridX;i++)controlRegions[0]+=this.grid[i][startGridY-1].length+this.grid[i][startGridY].length-1;if(finishGridX<this.grid.length-1)for(i=startGridY;i<=finishGridY;i++)controlRegions[1]+=this.grid[finishGridX+1][i].length+\nthis.grid[finishGridX][i].length-1;if(finishGridY<this.grid[0].length-1)for(i=startGridX;i<=finishGridX;i++)controlRegions[2]+=this.grid[i][finishGridY+1].length+this.grid[i][finishGridY].length-1;if(0<startGridX)for(i=startGridY;i<=finishGridY;i++)controlRegions[3]+=this.grid[startGridX-1][i].length+this.grid[startGridX][i].length-1;startGridX=Integer.MAX_VALUE;for(finishGridX=0;finishGridX<controlRegions.length;finishGridX++)if(controlRegions[finishGridX]<startGridX){startGridX=controlRegions[finishGridX];\nvar minCount=1;var minIndex=finishGridX}else controlRegions[finishGridX]==startGridX&&minCount++;3==minCount&&0==startGridX?0==controlRegions[0]&&0==controlRegions[1]&&0==controlRegions[2]?gridForPrunedNode=1:0==controlRegions[0]&&0==controlRegions[1]&&0==controlRegions[3]?gridForPrunedNode=0:0==controlRegions[0]&&0==controlRegions[2]&&0==controlRegions[3]?gridForPrunedNode=3:0==controlRegions[1]&&0==controlRegions[2]&&0==controlRegions[3]&&(gridForPrunedNode=2):2==minCount&&0==startGridX?(gridForPrunedNode=\nMath.floor(2*Math.random()),gridForPrunedNode=0==controlRegions[0]&&0==controlRegions[1]?0==gridForPrunedNode?0:1:0==controlRegions[0]&&0==controlRegions[2]?0==gridForPrunedNode?0:2:0==controlRegions[0]&&0==controlRegions[3]?0==gridForPrunedNode?0:3:0==controlRegions[1]&&0==controlRegions[2]?0==gridForPrunedNode?1:2:0==controlRegions[1]&&0==controlRegions[3]?0==gridForPrunedNode?1:3:0==gridForPrunedNode?2:3):gridForPrunedNode=4==minCount&&0==startGridX?Math.floor(4*Math.random()):minIndex;0==gridForPrunedNode?\nprunedNode.setCenter(nodeData.getCenterX(),nodeData.getCenterY()-nodeData.getHeight()/2-FDLayoutConstants.DEFAULT_EDGE_LENGTH-prunedNode.getHeight()/2):1==gridForPrunedNode?prunedNode.setCenter(nodeData.getCenterX()+nodeData.getWidth()/2+FDLayoutConstants.DEFAULT_EDGE_LENGTH+prunedNode.getWidth()/2,nodeData.getCenterY()):2==gridForPrunedNode?prunedNode.setCenter(nodeData.getCenterX(),nodeData.getCenterY()+nodeData.getHeight()/2+FDLayoutConstants.DEFAULT_EDGE_LENGTH+prunedNode.getHeight()/2):prunedNode.setCenter(nodeData.getCenterX()-\nnodeData.getWidth()/2-FDLayoutConstants.DEFAULT_EDGE_LENGTH-prunedNode.getWidth()/2,nodeData.getCenterY())};module.exports=CoSELayout},function(module,exports,__webpack_require__){exports={};exports.layoutBase=__webpack_require__(0);exports.CoSEConstants=__webpack_require__(1);exports.CoSEEdge=__webpack_require__(2);exports.CoSEGraph=__webpack_require__(3);exports.CoSEGraphManager=__webpack_require__(4);exports.CoSELayout=__webpack_require__(6);exports.CoSENode=__webpack_require__(5);module.exports=\nexports}])})}","~:source","shadow$provide[\"module$node_modules$cose_base$cose_base\"] = function(global,require,module,exports) {\n(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"layout-base\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"layout-base\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"coseBase\"] = factory(require(\"layout-base\"));\n\telse\n\t\troot[\"coseBase\"] = factory(root[\"layoutBase\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_0__) {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// identity function for calling harmony imports with the correct context\n/******/ \t__webpack_require__.i = function(value) { return value; };\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 7);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports) {\n\nmodule.exports = __WEBPACK_EXTERNAL_MODULE_0__;\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar FDLayoutConstants = __webpack_require__(0).FDLayoutConstants;\n\nfunction CoSEConstants() {}\n\n//CoSEConstants inherits static props in FDLayoutConstants\nfor (var prop in FDLayoutConstants) {\n  CoSEConstants[prop] = FDLayoutConstants[prop];\n}\n\nCoSEConstants.DEFAULT_USE_MULTI_LEVEL_SCALING = false;\nCoSEConstants.DEFAULT_RADIAL_SEPARATION = FDLayoutConstants.DEFAULT_EDGE_LENGTH;\nCoSEConstants.DEFAULT_COMPONENT_SEPERATION = 60;\nCoSEConstants.TILE = true;\nCoSEConstants.TILING_PADDING_VERTICAL = 10;\nCoSEConstants.TILING_PADDING_HORIZONTAL = 10;\nCoSEConstants.TREE_REDUCTION_ON_INCREMENTAL = false; // make this true when cose is used incrementally as a part of other non-incremental layout\n\nmodule.exports = CoSEConstants;\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar FDLayoutEdge = __webpack_require__(0).FDLayoutEdge;\n\nfunction CoSEEdge(source, target, vEdge) {\n  FDLayoutEdge.call(this, source, target, vEdge);\n}\n\nCoSEEdge.prototype = Object.create(FDLayoutEdge.prototype);\nfor (var prop in FDLayoutEdge) {\n  CoSEEdge[prop] = FDLayoutEdge[prop];\n}\n\nmodule.exports = CoSEEdge;\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar LGraph = __webpack_require__(0).LGraph;\n\nfunction CoSEGraph(parent, graphMgr, vGraph) {\n  LGraph.call(this, parent, graphMgr, vGraph);\n}\n\nCoSEGraph.prototype = Object.create(LGraph.prototype);\nfor (var prop in LGraph) {\n  CoSEGraph[prop] = LGraph[prop];\n}\n\nmodule.exports = CoSEGraph;\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar LGraphManager = __webpack_require__(0).LGraphManager;\n\nfunction CoSEGraphManager(layout) {\n  LGraphManager.call(this, layout);\n}\n\nCoSEGraphManager.prototype = Object.create(LGraphManager.prototype);\nfor (var prop in LGraphManager) {\n  CoSEGraphManager[prop] = LGraphManager[prop];\n}\n\nmodule.exports = CoSEGraphManager;\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar FDLayoutNode = __webpack_require__(0).FDLayoutNode;\nvar IMath = __webpack_require__(0).IMath;\n\nfunction CoSENode(gm, loc, size, vNode) {\n  FDLayoutNode.call(this, gm, loc, size, vNode);\n}\n\nCoSENode.prototype = Object.create(FDLayoutNode.prototype);\nfor (var prop in FDLayoutNode) {\n  CoSENode[prop] = FDLayoutNode[prop];\n}\n\nCoSENode.prototype.move = function () {\n  var layout = this.graphManager.getLayout();\n  this.displacementX = layout.coolingFactor * (this.springForceX + this.repulsionForceX + this.gravitationForceX) / this.noOfChildren;\n  this.displacementY = layout.coolingFactor * (this.springForceY + this.repulsionForceY + this.gravitationForceY) / this.noOfChildren;\n\n  if (Math.abs(this.displacementX) > layout.coolingFactor * layout.maxNodeDisplacement) {\n    this.displacementX = layout.coolingFactor * layout.maxNodeDisplacement * IMath.sign(this.displacementX);\n  }\n\n  if (Math.abs(this.displacementY) > layout.coolingFactor * layout.maxNodeDisplacement) {\n    this.displacementY = layout.coolingFactor * layout.maxNodeDisplacement * IMath.sign(this.displacementY);\n  }\n\n  // a simple node, just move it\n  if (this.child == null) {\n    this.moveBy(this.displacementX, this.displacementY);\n  }\n  // an empty compound node, again just move it\n  else if (this.child.getNodes().length == 0) {\n      this.moveBy(this.displacementX, this.displacementY);\n    }\n    // non-empty compound node, propogate movement to children as well\n    else {\n        this.propogateDisplacementToChildren(this.displacementX, this.displacementY);\n      }\n\n  layout.totalDisplacement += Math.abs(this.displacementX) + Math.abs(this.displacementY);\n\n  this.springForceX = 0;\n  this.springForceY = 0;\n  this.repulsionForceX = 0;\n  this.repulsionForceY = 0;\n  this.gravitationForceX = 0;\n  this.gravitationForceY = 0;\n  this.displacementX = 0;\n  this.displacementY = 0;\n};\n\nCoSENode.prototype.propogateDisplacementToChildren = function (dX, dY) {\n  var nodes = this.getChild().getNodes();\n  var node;\n  for (var i = 0; i < nodes.length; i++) {\n    node = nodes[i];\n    if (node.getChild() == null) {\n      node.moveBy(dX, dY);\n      node.displacementX += dX;\n      node.displacementY += dY;\n    } else {\n      node.propogateDisplacementToChildren(dX, dY);\n    }\n  }\n};\n\nCoSENode.prototype.setPred1 = function (pred1) {\n  this.pred1 = pred1;\n};\n\nCoSENode.prototype.getPred1 = function () {\n  return pred1;\n};\n\nCoSENode.prototype.getPred2 = function () {\n  return pred2;\n};\n\nCoSENode.prototype.setNext = function (next) {\n  this.next = next;\n};\n\nCoSENode.prototype.getNext = function () {\n  return next;\n};\n\nCoSENode.prototype.setProcessed = function (processed) {\n  this.processed = processed;\n};\n\nCoSENode.prototype.isProcessed = function () {\n  return processed;\n};\n\nmodule.exports = CoSENode;\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar FDLayout = __webpack_require__(0).FDLayout;\nvar CoSEGraphManager = __webpack_require__(4);\nvar CoSEGraph = __webpack_require__(3);\nvar CoSENode = __webpack_require__(5);\nvar CoSEEdge = __webpack_require__(2);\nvar CoSEConstants = __webpack_require__(1);\nvar FDLayoutConstants = __webpack_require__(0).FDLayoutConstants;\nvar LayoutConstants = __webpack_require__(0).LayoutConstants;\nvar Point = __webpack_require__(0).Point;\nvar PointD = __webpack_require__(0).PointD;\nvar Layout = __webpack_require__(0).Layout;\nvar Integer = __webpack_require__(0).Integer;\nvar IGeometry = __webpack_require__(0).IGeometry;\nvar LGraph = __webpack_require__(0).LGraph;\nvar Transform = __webpack_require__(0).Transform;\n\nfunction CoSELayout() {\n  FDLayout.call(this);\n\n  this.toBeTiled = {}; // Memorize if a node is to be tiled or is tiled\n}\n\nCoSELayout.prototype = Object.create(FDLayout.prototype);\n\nfor (var prop in FDLayout) {\n  CoSELayout[prop] = FDLayout[prop];\n}\n\nCoSELayout.prototype.newGraphManager = function () {\n  var gm = new CoSEGraphManager(this);\n  this.graphManager = gm;\n  return gm;\n};\n\nCoSELayout.prototype.newGraph = function (vGraph) {\n  return new CoSEGraph(null, this.graphManager, vGraph);\n};\n\nCoSELayout.prototype.newNode = function (vNode) {\n  return new CoSENode(this.graphManager, vNode);\n};\n\nCoSELayout.prototype.newEdge = function (vEdge) {\n  return new CoSEEdge(null, null, vEdge);\n};\n\nCoSELayout.prototype.initParameters = function () {\n  FDLayout.prototype.initParameters.call(this, arguments);\n  if (!this.isSubLayout) {\n    if (CoSEConstants.DEFAULT_EDGE_LENGTH < 10) {\n      this.idealEdgeLength = 10;\n    } else {\n      this.idealEdgeLength = CoSEConstants.DEFAULT_EDGE_LENGTH;\n    }\n\n    this.useSmartIdealEdgeLengthCalculation = CoSEConstants.DEFAULT_USE_SMART_IDEAL_EDGE_LENGTH_CALCULATION;\n    this.springConstant = FDLayoutConstants.DEFAULT_SPRING_STRENGTH;\n    this.repulsionConstant = FDLayoutConstants.DEFAULT_REPULSION_STRENGTH;\n    this.gravityConstant = FDLayoutConstants.DEFAULT_GRAVITY_STRENGTH;\n    this.compoundGravityConstant = FDLayoutConstants.DEFAULT_COMPOUND_GRAVITY_STRENGTH;\n    this.gravityRangeFactor = FDLayoutConstants.DEFAULT_GRAVITY_RANGE_FACTOR;\n    this.compoundGravityRangeFactor = FDLayoutConstants.DEFAULT_COMPOUND_GRAVITY_RANGE_FACTOR;\n\n    // variables for tree reduction support\n    this.prunedNodesAll = [];\n    this.growTreeIterations = 0;\n    this.afterGrowthIterations = 0;\n    this.isTreeGrowing = false;\n    this.isGrowthFinished = false;\n\n    // variables for cooling\n    this.coolingCycle = 0;\n    this.maxCoolingCycle = this.maxIterations / FDLayoutConstants.CONVERGENCE_CHECK_PERIOD;\n    this.finalTemperature = FDLayoutConstants.CONVERGENCE_CHECK_PERIOD / this.maxIterations;\n    this.coolingAdjuster = 1;\n  }\n};\n\nCoSELayout.prototype.layout = function () {\n  var createBendsAsNeeded = LayoutConstants.DEFAULT_CREATE_BENDS_AS_NEEDED;\n  if (createBendsAsNeeded) {\n    this.createBendpoints();\n    this.graphManager.resetAllEdges();\n  }\n\n  this.level = 0;\n  return this.classicLayout();\n};\n\nCoSELayout.prototype.classicLayout = function () {\n  this.nodesWithGravity = this.calculateNodesToApplyGravitationTo();\n  this.graphManager.setAllNodesToApplyGravitation(this.nodesWithGravity);\n  this.calcNoOfChildrenForAllNodes();\n  this.graphManager.calcLowestCommonAncestors();\n  this.graphManager.calcInclusionTreeDepths();\n  this.graphManager.getRoot().calcEstimatedSize();\n  this.calcIdealEdgeLengths();\n\n  if (!this.incremental) {\n    var forest = this.getFlatForest();\n\n    // The graph associated with this layout is flat and a forest\n    if (forest.length > 0) {\n      this.positionNodesRadially(forest);\n    }\n    // The graph associated with this layout is not flat or a forest\n    else {\n        // Reduce the trees when incremental mode is not enabled and graph is not a forest \n        this.reduceTrees();\n        // Update nodes that gravity will be applied\n        this.graphManager.resetAllNodesToApplyGravitation();\n        var allNodes = new Set(this.getAllNodes());\n        var intersection = this.nodesWithGravity.filter(function (x) {\n          return allNodes.has(x);\n        });\n        this.graphManager.setAllNodesToApplyGravitation(intersection);\n\n        this.positionNodesRandomly();\n      }\n  } else {\n    if (CoSEConstants.TREE_REDUCTION_ON_INCREMENTAL) {\n      // Reduce the trees in incremental mode if only this constant is set to true \n      this.reduceTrees();\n      // Update nodes that gravity will be applied\n      this.graphManager.resetAllNodesToApplyGravitation();\n      var allNodes = new Set(this.getAllNodes());\n      var intersection = this.nodesWithGravity.filter(function (x) {\n        return allNodes.has(x);\n      });\n      this.graphManager.setAllNodesToApplyGravitation(intersection);\n    }\n  }\n\n  this.initSpringEmbedder();\n  this.runSpringEmbedder();\n\n  return true;\n};\n\nCoSELayout.prototype.tick = function () {\n  this.totalIterations++;\n\n  if (this.totalIterations === this.maxIterations && !this.isTreeGrowing && !this.isGrowthFinished) {\n    if (this.prunedNodesAll.length > 0) {\n      this.isTreeGrowing = true;\n    } else {\n      return true;\n    }\n  }\n\n  if (this.totalIterations % FDLayoutConstants.CONVERGENCE_CHECK_PERIOD == 0 && !this.isTreeGrowing && !this.isGrowthFinished) {\n    if (this.isConverged()) {\n      if (this.prunedNodesAll.length > 0) {\n        this.isTreeGrowing = true;\n      } else {\n        return true;\n      }\n    }\n\n    this.coolingCycle++;\n\n    if (this.layoutQuality == 0) {\n      // quality - \"draft\"\n      this.coolingAdjuster = this.coolingCycle;\n    } else if (this.layoutQuality == 1) {\n      // quality - \"default\"\n      this.coolingAdjuster = this.coolingCycle / 3;\n    }\n\n    // cooling schedule is based on http://www.btluke.com/simanf1.html -> cooling schedule 3\n    this.coolingFactor = Math.max(this.initialCoolingFactor - Math.pow(this.coolingCycle, Math.log(100 * (this.initialCoolingFactor - this.finalTemperature)) / Math.log(this.maxCoolingCycle)) / 100 * this.coolingAdjuster, this.finalTemperature);\n    this.animationPeriod = Math.ceil(this.initialAnimationPeriod * Math.sqrt(this.coolingFactor));\n  }\n  // Operations while tree is growing again \n  if (this.isTreeGrowing) {\n    if (this.growTreeIterations % 10 == 0) {\n      if (this.prunedNodesAll.length > 0) {\n        this.graphManager.updateBounds();\n        this.updateGrid();\n        this.growTree(this.prunedNodesAll);\n        // Update nodes that gravity will be applied\n        this.graphManager.resetAllNodesToApplyGravitation();\n        var allNodes = new Set(this.getAllNodes());\n        var intersection = this.nodesWithGravity.filter(function (x) {\n          return allNodes.has(x);\n        });\n        this.graphManager.setAllNodesToApplyGravitation(intersection);\n\n        this.graphManager.updateBounds();\n        this.updateGrid();\n        this.coolingFactor = FDLayoutConstants.DEFAULT_COOLING_FACTOR_INCREMENTAL;\n      } else {\n        this.isTreeGrowing = false;\n        this.isGrowthFinished = true;\n      }\n    }\n    this.growTreeIterations++;\n  }\n  // Operations after growth is finished\n  if (this.isGrowthFinished) {\n    if (this.isConverged()) {\n      return true;\n    }\n    if (this.afterGrowthIterations % 10 == 0) {\n      this.graphManager.updateBounds();\n      this.updateGrid();\n    }\n    this.coolingFactor = FDLayoutConstants.DEFAULT_COOLING_FACTOR_INCREMENTAL * ((100 - this.afterGrowthIterations) / 100);\n    this.afterGrowthIterations++;\n  }\n\n  var gridUpdateAllowed = !this.isTreeGrowing && !this.isGrowthFinished;\n  var forceToNodeSurroundingUpdate = this.growTreeIterations % 10 == 1 && this.isTreeGrowing || this.afterGrowthIterations % 10 == 1 && this.isGrowthFinished;\n\n  this.totalDisplacement = 0;\n  this.graphManager.updateBounds();\n  this.calcSpringForces();\n  this.calcRepulsionForces(gridUpdateAllowed, forceToNodeSurroundingUpdate);\n  this.calcGravitationalForces();\n  this.moveNodes();\n  this.animate();\n\n  return false; // Layout is not ended yet return false\n};\n\nCoSELayout.prototype.getPositionsData = function () {\n  var allNodes = this.graphManager.getAllNodes();\n  var pData = {};\n  for (var i = 0; i < allNodes.length; i++) {\n    var rect = allNodes[i].rect;\n    var id = allNodes[i].id;\n    pData[id] = {\n      id: id,\n      x: rect.getCenterX(),\n      y: rect.getCenterY(),\n      w: rect.width,\n      h: rect.height\n    };\n  }\n\n  return pData;\n};\n\nCoSELayout.prototype.runSpringEmbedder = function () {\n  this.initialAnimationPeriod = 25;\n  this.animationPeriod = this.initialAnimationPeriod;\n  var layoutEnded = false;\n\n  // If aminate option is 'during' signal that layout is supposed to start iterating\n  if (FDLayoutConstants.ANIMATE === 'during') {\n    this.emit('layoutstarted');\n  } else {\n    // If aminate option is 'during' tick() function will be called on index.js\n    while (!layoutEnded) {\n      layoutEnded = this.tick();\n    }\n\n    this.graphManager.updateBounds();\n  }\n};\n\nCoSELayout.prototype.calculateNodesToApplyGravitationTo = function () {\n  var nodeList = [];\n  var graph;\n\n  var graphs = this.graphManager.getGraphs();\n  var size = graphs.length;\n  var i;\n  for (i = 0; i < size; i++) {\n    graph = graphs[i];\n\n    graph.updateConnected();\n\n    if (!graph.isConnected) {\n      nodeList = nodeList.concat(graph.getNodes());\n    }\n  }\n\n  return nodeList;\n};\n\nCoSELayout.prototype.createBendpoints = function () {\n  var edges = [];\n  edges = edges.concat(this.graphManager.getAllEdges());\n  var visited = new Set();\n  var i;\n  for (i = 0; i < edges.length; i++) {\n    var edge = edges[i];\n\n    if (!visited.has(edge)) {\n      var source = edge.getSource();\n      var target = edge.getTarget();\n\n      if (source == target) {\n        edge.getBendpoints().push(new PointD());\n        edge.getBendpoints().push(new PointD());\n        this.createDummyNodesForBendpoints(edge);\n        visited.add(edge);\n      } else {\n        var edgeList = [];\n\n        edgeList = edgeList.concat(source.getEdgeListToNode(target));\n        edgeList = edgeList.concat(target.getEdgeListToNode(source));\n\n        if (!visited.has(edgeList[0])) {\n          if (edgeList.length > 1) {\n            var k;\n            for (k = 0; k < edgeList.length; k++) {\n              var multiEdge = edgeList[k];\n              multiEdge.getBendpoints().push(new PointD());\n              this.createDummyNodesForBendpoints(multiEdge);\n            }\n          }\n          edgeList.forEach(function (edge) {\n            visited.add(edge);\n          });\n        }\n      }\n    }\n\n    if (visited.size == edges.length) {\n      break;\n    }\n  }\n};\n\nCoSELayout.prototype.positionNodesRadially = function (forest) {\n  // We tile the trees to a grid row by row; first tree starts at (0,0)\n  var currentStartingPoint = new Point(0, 0);\n  var numberOfColumns = Math.ceil(Math.sqrt(forest.length));\n  var height = 0;\n  var currentY = 0;\n  var currentX = 0;\n  var point = new PointD(0, 0);\n\n  for (var i = 0; i < forest.length; i++) {\n    if (i % numberOfColumns == 0) {\n      // Start of a new row, make the x coordinate 0, increment the\n      // y coordinate with the max height of the previous row\n      currentX = 0;\n      currentY = height;\n\n      if (i != 0) {\n        currentY += CoSEConstants.DEFAULT_COMPONENT_SEPERATION;\n      }\n\n      height = 0;\n    }\n\n    var tree = forest[i];\n\n    // Find the center of the tree\n    var centerNode = Layout.findCenterOfTree(tree);\n\n    // Set the staring point of the next tree\n    currentStartingPoint.x = currentX;\n    currentStartingPoint.y = currentY;\n\n    // Do a radial layout starting with the center\n    point = CoSELayout.radialLayout(tree, centerNode, currentStartingPoint);\n\n    if (point.y > height) {\n      height = Math.floor(point.y);\n    }\n\n    currentX = Math.floor(point.x + CoSEConstants.DEFAULT_COMPONENT_SEPERATION);\n  }\n\n  this.transform(new PointD(LayoutConstants.WORLD_CENTER_X - point.x / 2, LayoutConstants.WORLD_CENTER_Y - point.y / 2));\n};\n\nCoSELayout.radialLayout = function (tree, centerNode, startingPoint) {\n  var radialSep = Math.max(this.maxDiagonalInTree(tree), CoSEConstants.DEFAULT_RADIAL_SEPARATION);\n  CoSELayout.branchRadialLayout(centerNode, null, 0, 359, 0, radialSep);\n  var bounds = LGraph.calculateBounds(tree);\n\n  var transform = new Transform();\n  transform.setDeviceOrgX(bounds.getMinX());\n  transform.setDeviceOrgY(bounds.getMinY());\n  transform.setWorldOrgX(startingPoint.x);\n  transform.setWorldOrgY(startingPoint.y);\n\n  for (var i = 0; i < tree.length; i++) {\n    var node = tree[i];\n    node.transform(transform);\n  }\n\n  var bottomRight = new PointD(bounds.getMaxX(), bounds.getMaxY());\n\n  return transform.inverseTransformPoint(bottomRight);\n};\n\nCoSELayout.branchRadialLayout = function (node, parentOfNode, startAngle, endAngle, distance, radialSeparation) {\n  // First, position this node by finding its angle.\n  var halfInterval = (endAngle - startAngle + 1) / 2;\n\n  if (halfInterval < 0) {\n    halfInterval += 180;\n  }\n\n  var nodeAngle = (halfInterval + startAngle) % 360;\n  var teta = nodeAngle * IGeometry.TWO_PI / 360;\n\n  // Make polar to java cordinate conversion.\n  var cos_teta = Math.cos(teta);\n  var x_ = distance * Math.cos(teta);\n  var y_ = distance * Math.sin(teta);\n\n  node.setCenter(x_, y_);\n\n  // Traverse all neighbors of this node and recursively call this\n  // function.\n  var neighborEdges = [];\n  neighborEdges = neighborEdges.concat(node.getEdges());\n  var childCount = neighborEdges.length;\n\n  if (parentOfNode != null) {\n    childCount--;\n  }\n\n  var branchCount = 0;\n\n  var incEdgesCount = neighborEdges.length;\n  var startIndex;\n\n  var edges = node.getEdgesBetween(parentOfNode);\n\n  // If there are multiple edges, prune them until there remains only one\n  // edge.\n  while (edges.length > 1) {\n    //neighborEdges.remove(edges.remove(0));\n    var temp = edges[0];\n    edges.splice(0, 1);\n    var index = neighborEdges.indexOf(temp);\n    if (index >= 0) {\n      neighborEdges.splice(index, 1);\n    }\n    incEdgesCount--;\n    childCount--;\n  }\n\n  if (parentOfNode != null) {\n    //assert edges.length == 1;\n    startIndex = (neighborEdges.indexOf(edges[0]) + 1) % incEdgesCount;\n  } else {\n    startIndex = 0;\n  }\n\n  var stepAngle = Math.abs(endAngle - startAngle) / childCount;\n\n  for (var i = startIndex; branchCount != childCount; i = ++i % incEdgesCount) {\n    var currentNeighbor = neighborEdges[i].getOtherEnd(node);\n\n    // Don't back traverse to root node in current tree.\n    if (currentNeighbor == parentOfNode) {\n      continue;\n    }\n\n    var childStartAngle = (startAngle + branchCount * stepAngle) % 360;\n    var childEndAngle = (childStartAngle + stepAngle) % 360;\n\n    CoSELayout.branchRadialLayout(currentNeighbor, node, childStartAngle, childEndAngle, distance + radialSeparation, radialSeparation);\n\n    branchCount++;\n  }\n};\n\nCoSELayout.maxDiagonalInTree = function (tree) {\n  var maxDiagonal = Integer.MIN_VALUE;\n\n  for (var i = 0; i < tree.length; i++) {\n    var node = tree[i];\n    var diagonal = node.getDiagonal();\n\n    if (diagonal > maxDiagonal) {\n      maxDiagonal = diagonal;\n    }\n  }\n\n  return maxDiagonal;\n};\n\nCoSELayout.prototype.calcRepulsionRange = function () {\n  // formula is 2 x (level + 1) x idealEdgeLength\n  return 2 * (this.level + 1) * this.idealEdgeLength;\n};\n\n// Tiling methods\n\n// Group zero degree members whose parents are not to be tiled, create dummy parents where needed and fill memberGroups by their dummp parent id's\nCoSELayout.prototype.groupZeroDegreeMembers = function () {\n  var self = this;\n  // array of [parent_id x oneDegreeNode_id]\n  var tempMemberGroups = {}; // A temporary map of parent node and its zero degree members\n  this.memberGroups = {}; // A map of dummy parent node and its zero degree members whose parents are not to be tiled\n  this.idToDummyNode = {}; // A map of id to dummy node \n\n  var zeroDegree = []; // List of zero degree nodes whose parents are not to be tiled\n  var allNodes = this.graphManager.getAllNodes();\n\n  // Fill zero degree list\n  for (var i = 0; i < allNodes.length; i++) {\n    var node = allNodes[i];\n    var parent = node.getParent();\n    // If a node has zero degree and its parent is not to be tiled if exists add that node to zeroDegres list\n    if (this.getNodeDegreeWithChildren(node) === 0 && (parent.id == undefined || !this.getToBeTiled(parent))) {\n      zeroDegree.push(node);\n    }\n  }\n\n  // Create a map of parent node and its zero degree members\n  for (var i = 0; i < zeroDegree.length; i++) {\n    var node = zeroDegree[i]; // Zero degree node itself\n    var p_id = node.getParent().id; // Parent id\n\n    if (typeof tempMemberGroups[p_id] === \"undefined\") tempMemberGroups[p_id] = [];\n\n    tempMemberGroups[p_id] = tempMemberGroups[p_id].concat(node); // Push node to the list belongs to its parent in tempMemberGroups\n  }\n\n  // If there are at least two nodes at a level, create a dummy compound for them\n  Object.keys(tempMemberGroups).forEach(function (p_id) {\n    if (tempMemberGroups[p_id].length > 1) {\n      var dummyCompoundId = \"DummyCompound_\" + p_id; // The id of dummy compound which will be created soon\n      self.memberGroups[dummyCompoundId] = tempMemberGroups[p_id]; // Add dummy compound to memberGroups\n\n      var parent = tempMemberGroups[p_id][0].getParent(); // The parent of zero degree nodes will be the parent of new dummy compound\n\n      // Create a dummy compound with calculated id\n      var dummyCompound = new CoSENode(self.graphManager);\n      dummyCompound.id = dummyCompoundId;\n      dummyCompound.paddingLeft = parent.paddingLeft || 0;\n      dummyCompound.paddingRight = parent.paddingRight || 0;\n      dummyCompound.paddingBottom = parent.paddingBottom || 0;\n      dummyCompound.paddingTop = parent.paddingTop || 0;\n\n      self.idToDummyNode[dummyCompoundId] = dummyCompound;\n\n      var dummyParentGraph = self.getGraphManager().add(self.newGraph(), dummyCompound);\n      var parentGraph = parent.getChild();\n\n      // Add dummy compound to parent the graph\n      parentGraph.add(dummyCompound);\n\n      // For each zero degree node in this level remove it from its parent graph and add it to the graph of dummy parent\n      for (var i = 0; i < tempMemberGroups[p_id].length; i++) {\n        var node = tempMemberGroups[p_id][i];\n\n        parentGraph.remove(node);\n        dummyParentGraph.add(node);\n      }\n    }\n  });\n};\n\nCoSELayout.prototype.clearCompounds = function () {\n  var childGraphMap = {};\n  var idToNode = {};\n\n  // Get compound ordering by finding the inner one first\n  this.performDFSOnCompounds();\n\n  for (var i = 0; i < this.compoundOrder.length; i++) {\n\n    idToNode[this.compoundOrder[i].id] = this.compoundOrder[i];\n    childGraphMap[this.compoundOrder[i].id] = [].concat(this.compoundOrder[i].getChild().getNodes());\n\n    // Remove children of compounds\n    this.graphManager.remove(this.compoundOrder[i].getChild());\n    this.compoundOrder[i].child = null;\n  }\n\n  this.graphManager.resetAllNodes();\n\n  // Tile the removed children\n  this.tileCompoundMembers(childGraphMap, idToNode);\n};\n\nCoSELayout.prototype.clearZeroDegreeMembers = function () {\n  var self = this;\n  var tiledZeroDegreePack = this.tiledZeroDegreePack = [];\n\n  Object.keys(this.memberGroups).forEach(function (id) {\n    var compoundNode = self.idToDummyNode[id]; // Get the dummy compound\n\n    tiledZeroDegreePack[id] = self.tileNodes(self.memberGroups[id], compoundNode.paddingLeft + compoundNode.paddingRight);\n\n    // Set the width and height of the dummy compound as calculated\n    compoundNode.rect.width = tiledZeroDegreePack[id].width;\n    compoundNode.rect.height = tiledZeroDegreePack[id].height;\n  });\n};\n\nCoSELayout.prototype.repopulateCompounds = function () {\n  for (var i = this.compoundOrder.length - 1; i >= 0; i--) {\n    var lCompoundNode = this.compoundOrder[i];\n    var id = lCompoundNode.id;\n    var horizontalMargin = lCompoundNode.paddingLeft;\n    var verticalMargin = lCompoundNode.paddingTop;\n\n    this.adjustLocations(this.tiledMemberPack[id], lCompoundNode.rect.x, lCompoundNode.rect.y, horizontalMargin, verticalMargin);\n  }\n};\n\nCoSELayout.prototype.repopulateZeroDegreeMembers = function () {\n  var self = this;\n  var tiledPack = this.tiledZeroDegreePack;\n\n  Object.keys(tiledPack).forEach(function (id) {\n    var compoundNode = self.idToDummyNode[id]; // Get the dummy compound by its id\n    var horizontalMargin = compoundNode.paddingLeft;\n    var verticalMargin = compoundNode.paddingTop;\n\n    // Adjust the positions of nodes wrt its compound\n    self.adjustLocations(tiledPack[id], compoundNode.rect.x, compoundNode.rect.y, horizontalMargin, verticalMargin);\n  });\n};\n\nCoSELayout.prototype.getToBeTiled = function (node) {\n  var id = node.id;\n  //firstly check the previous results\n  if (this.toBeTiled[id] != null) {\n    return this.toBeTiled[id];\n  }\n\n  //only compound nodes are to be tiled\n  var childGraph = node.getChild();\n  if (childGraph == null) {\n    this.toBeTiled[id] = false;\n    return false;\n  }\n\n  var children = childGraph.getNodes(); // Get the children nodes\n\n  //a compound node is not to be tiled if all of its compound children are not to be tiled\n  for (var i = 0; i < children.length; i++) {\n    var theChild = children[i];\n\n    if (this.getNodeDegree(theChild) > 0) {\n      this.toBeTiled[id] = false;\n      return false;\n    }\n\n    //pass the children not having the compound structure\n    if (theChild.getChild() == null) {\n      this.toBeTiled[theChild.id] = false;\n      continue;\n    }\n\n    if (!this.getToBeTiled(theChild)) {\n      this.toBeTiled[id] = false;\n      return false;\n    }\n  }\n  this.toBeTiled[id] = true;\n  return true;\n};\n\n// Get degree of a node depending of its edges and independent of its children\nCoSELayout.prototype.getNodeDegree = function (node) {\n  var id = node.id;\n  var edges = node.getEdges();\n  var degree = 0;\n\n  // For the edges connected\n  for (var i = 0; i < edges.length; i++) {\n    var edge = edges[i];\n    if (edge.getSource().id !== edge.getTarget().id) {\n      degree = degree + 1;\n    }\n  }\n  return degree;\n};\n\n// Get degree of a node with its children\nCoSELayout.prototype.getNodeDegreeWithChildren = function (node) {\n  var degree = this.getNodeDegree(node);\n  if (node.getChild() == null) {\n    return degree;\n  }\n  var children = node.getChild().getNodes();\n  for (var i = 0; i < children.length; i++) {\n    var child = children[i];\n    degree += this.getNodeDegreeWithChildren(child);\n  }\n  return degree;\n};\n\nCoSELayout.prototype.performDFSOnCompounds = function () {\n  this.compoundOrder = [];\n  this.fillCompexOrderByDFS(this.graphManager.getRoot().getNodes());\n};\n\nCoSELayout.prototype.fillCompexOrderByDFS = function (children) {\n  for (var i = 0; i < children.length; i++) {\n    var child = children[i];\n    if (child.getChild() != null) {\n      this.fillCompexOrderByDFS(child.getChild().getNodes());\n    }\n    if (this.getToBeTiled(child)) {\n      this.compoundOrder.push(child);\n    }\n  }\n};\n\n/**\n* This method places each zero degree member wrt given (x,y) coordinates (top left).\n*/\nCoSELayout.prototype.adjustLocations = function (organization, x, y, compoundHorizontalMargin, compoundVerticalMargin) {\n  x += compoundHorizontalMargin;\n  y += compoundVerticalMargin;\n\n  var left = x;\n\n  for (var i = 0; i < organization.rows.length; i++) {\n    var row = organization.rows[i];\n    x = left;\n    var maxHeight = 0;\n\n    for (var j = 0; j < row.length; j++) {\n      var lnode = row[j];\n\n      lnode.rect.x = x; // + lnode.rect.width / 2;\n      lnode.rect.y = y; // + lnode.rect.height / 2;\n\n      x += lnode.rect.width + organization.horizontalPadding;\n\n      if (lnode.rect.height > maxHeight) maxHeight = lnode.rect.height;\n    }\n\n    y += maxHeight + organization.verticalPadding;\n  }\n};\n\nCoSELayout.prototype.tileCompoundMembers = function (childGraphMap, idToNode) {\n  var self = this;\n  this.tiledMemberPack = [];\n\n  Object.keys(childGraphMap).forEach(function (id) {\n    // Get the compound node\n    var compoundNode = idToNode[id];\n\n    self.tiledMemberPack[id] = self.tileNodes(childGraphMap[id], compoundNode.paddingLeft + compoundNode.paddingRight);\n\n    compoundNode.rect.width = self.tiledMemberPack[id].width;\n    compoundNode.rect.height = self.tiledMemberPack[id].height;\n  });\n};\n\nCoSELayout.prototype.tileNodes = function (nodes, minWidth) {\n  var verticalPadding = CoSEConstants.TILING_PADDING_VERTICAL;\n  var horizontalPadding = CoSEConstants.TILING_PADDING_HORIZONTAL;\n  var organization = {\n    rows: [],\n    rowWidth: [],\n    rowHeight: [],\n    width: 0,\n    height: minWidth, // assume minHeight equals to minWidth\n    verticalPadding: verticalPadding,\n    horizontalPadding: horizontalPadding\n  };\n\n  // Sort the nodes in ascending order of their areas\n  nodes.sort(function (n1, n2) {\n    if (n1.rect.width * n1.rect.height > n2.rect.width * n2.rect.height) return -1;\n    if (n1.rect.width * n1.rect.height < n2.rect.width * n2.rect.height) return 1;\n    return 0;\n  });\n\n  // Create the organization -> tile members\n  for (var i = 0; i < nodes.length; i++) {\n    var lNode = nodes[i];\n\n    if (organization.rows.length == 0) {\n      this.insertNodeToRow(organization, lNode, 0, minWidth);\n    } else if (this.canAddHorizontal(organization, lNode.rect.width, lNode.rect.height)) {\n      this.insertNodeToRow(organization, lNode, this.getShortestRowIndex(organization), minWidth);\n    } else {\n      this.insertNodeToRow(organization, lNode, organization.rows.length, minWidth);\n    }\n\n    this.shiftToLastRow(organization);\n  }\n\n  return organization;\n};\n\nCoSELayout.prototype.insertNodeToRow = function (organization, node, rowIndex, minWidth) {\n  var minCompoundSize = minWidth;\n\n  // Add new row if needed\n  if (rowIndex == organization.rows.length) {\n    var secondDimension = [];\n\n    organization.rows.push(secondDimension);\n    organization.rowWidth.push(minCompoundSize);\n    organization.rowHeight.push(0);\n  }\n\n  // Update row width\n  var w = organization.rowWidth[rowIndex] + node.rect.width;\n\n  if (organization.rows[rowIndex].length > 0) {\n    w += organization.horizontalPadding;\n  }\n\n  organization.rowWidth[rowIndex] = w;\n  // Update compound width\n  if (organization.width < w) {\n    organization.width = w;\n  }\n\n  // Update height\n  var h = node.rect.height;\n  if (rowIndex > 0) h += organization.verticalPadding;\n\n  var extraHeight = 0;\n  if (h > organization.rowHeight[rowIndex]) {\n    extraHeight = organization.rowHeight[rowIndex];\n    organization.rowHeight[rowIndex] = h;\n    extraHeight = organization.rowHeight[rowIndex] - extraHeight;\n  }\n\n  organization.height += extraHeight;\n\n  // Insert node\n  organization.rows[rowIndex].push(node);\n};\n\n//Scans the rows of an organization and returns the one with the min width\nCoSELayout.prototype.getShortestRowIndex = function (organization) {\n  var r = -1;\n  var min = Number.MAX_VALUE;\n\n  for (var i = 0; i < organization.rows.length; i++) {\n    if (organization.rowWidth[i] < min) {\n      r = i;\n      min = organization.rowWidth[i];\n    }\n  }\n  return r;\n};\n\n//Scans the rows of an organization and returns the one with the max width\nCoSELayout.prototype.getLongestRowIndex = function (organization) {\n  var r = -1;\n  var max = Number.MIN_VALUE;\n\n  for (var i = 0; i < organization.rows.length; i++) {\n\n    if (organization.rowWidth[i] > max) {\n      r = i;\n      max = organization.rowWidth[i];\n    }\n  }\n\n  return r;\n};\n\n/**\n* This method checks whether adding extra width to the organization violates\n* the aspect ratio(1) or not.\n*/\nCoSELayout.prototype.canAddHorizontal = function (organization, extraWidth, extraHeight) {\n\n  var sri = this.getShortestRowIndex(organization);\n\n  if (sri < 0) {\n    return true;\n  }\n\n  var min = organization.rowWidth[sri];\n\n  if (min + organization.horizontalPadding + extraWidth <= organization.width) return true;\n\n  var hDiff = 0;\n\n  // Adding to an existing row\n  if (organization.rowHeight[sri] < extraHeight) {\n    if (sri > 0) hDiff = extraHeight + organization.verticalPadding - organization.rowHeight[sri];\n  }\n\n  var add_to_row_ratio;\n  if (organization.width - min >= extraWidth + organization.horizontalPadding) {\n    add_to_row_ratio = (organization.height + hDiff) / (min + extraWidth + organization.horizontalPadding);\n  } else {\n    add_to_row_ratio = (organization.height + hDiff) / organization.width;\n  }\n\n  // Adding a new row for this node\n  hDiff = extraHeight + organization.verticalPadding;\n  var add_new_row_ratio;\n  if (organization.width < extraWidth) {\n    add_new_row_ratio = (organization.height + hDiff) / extraWidth;\n  } else {\n    add_new_row_ratio = (organization.height + hDiff) / organization.width;\n  }\n\n  if (add_new_row_ratio < 1) add_new_row_ratio = 1 / add_new_row_ratio;\n\n  if (add_to_row_ratio < 1) add_to_row_ratio = 1 / add_to_row_ratio;\n\n  return add_to_row_ratio < add_new_row_ratio;\n};\n\n//If moving the last node from the longest row and adding it to the last\n//row makes the bounding box smaller, do it.\nCoSELayout.prototype.shiftToLastRow = function (organization) {\n  var longest = this.getLongestRowIndex(organization);\n  var last = organization.rowWidth.length - 1;\n  var row = organization.rows[longest];\n  var node = row[row.length - 1];\n\n  var diff = node.width + organization.horizontalPadding;\n\n  // Check if there is enough space on the last row\n  if (organization.width - organization.rowWidth[last] > diff && longest != last) {\n    // Remove the last element of the longest row\n    row.splice(-1, 1);\n\n    // Push it to the last row\n    organization.rows[last].push(node);\n\n    organization.rowWidth[longest] = organization.rowWidth[longest] - diff;\n    organization.rowWidth[last] = organization.rowWidth[last] + diff;\n    organization.width = organization.rowWidth[instance.getLongestRowIndex(organization)];\n\n    // Update heights of the organization\n    var maxHeight = Number.MIN_VALUE;\n    for (var i = 0; i < row.length; i++) {\n      if (row[i].height > maxHeight) maxHeight = row[i].height;\n    }\n    if (longest > 0) maxHeight += organization.verticalPadding;\n\n    var prevTotal = organization.rowHeight[longest] + organization.rowHeight[last];\n\n    organization.rowHeight[longest] = maxHeight;\n    if (organization.rowHeight[last] < node.height + organization.verticalPadding) organization.rowHeight[last] = node.height + organization.verticalPadding;\n\n    var finalTotal = organization.rowHeight[longest] + organization.rowHeight[last];\n    organization.height += finalTotal - prevTotal;\n\n    this.shiftToLastRow(organization);\n  }\n};\n\nCoSELayout.prototype.tilingPreLayout = function () {\n  if (CoSEConstants.TILE) {\n    // Find zero degree nodes and create a compound for each level\n    this.groupZeroDegreeMembers();\n    // Tile and clear children of each compound\n    this.clearCompounds();\n    // Separately tile and clear zero degree nodes for each level\n    this.clearZeroDegreeMembers();\n  }\n};\n\nCoSELayout.prototype.tilingPostLayout = function () {\n  if (CoSEConstants.TILE) {\n    this.repopulateZeroDegreeMembers();\n    this.repopulateCompounds();\n  }\n};\n\n// -----------------------------------------------------------------------------\n// Section: Tree Reduction methods\n// -----------------------------------------------------------------------------\n// Reduce trees \nCoSELayout.prototype.reduceTrees = function () {\n  var prunedNodesAll = [];\n  var containsLeaf = true;\n  var node;\n\n  while (containsLeaf) {\n    var allNodes = this.graphManager.getAllNodes();\n    var prunedNodesInStepTemp = [];\n    containsLeaf = false;\n\n    for (var i = 0; i < allNodes.length; i++) {\n      node = allNodes[i];\n      if (node.getEdges().length == 1 && !node.getEdges()[0].isInterGraph && node.getChild() == null) {\n        prunedNodesInStepTemp.push([node, node.getEdges()[0], node.getOwner()]);\n        containsLeaf = true;\n      }\n    }\n    if (containsLeaf == true) {\n      var prunedNodesInStep = [];\n      for (var j = 0; j < prunedNodesInStepTemp.length; j++) {\n        if (prunedNodesInStepTemp[j][0].getEdges().length == 1) {\n          prunedNodesInStep.push(prunedNodesInStepTemp[j]);\n          prunedNodesInStepTemp[j][0].getOwner().remove(prunedNodesInStepTemp[j][0]);\n        }\n      }\n      prunedNodesAll.push(prunedNodesInStep);\n      this.graphManager.resetAllNodes();\n      this.graphManager.resetAllEdges();\n    }\n  }\n  this.prunedNodesAll = prunedNodesAll;\n};\n\n// Grow tree one step \nCoSELayout.prototype.growTree = function (prunedNodesAll) {\n  var lengthOfPrunedNodesInStep = prunedNodesAll.length;\n  var prunedNodesInStep = prunedNodesAll[lengthOfPrunedNodesInStep - 1];\n\n  var nodeData;\n  for (var i = 0; i < prunedNodesInStep.length; i++) {\n    nodeData = prunedNodesInStep[i];\n\n    this.findPlaceforPrunedNode(nodeData);\n\n    nodeData[2].add(nodeData[0]);\n    nodeData[2].add(nodeData[1], nodeData[1].source, nodeData[1].target);\n  }\n\n  prunedNodesAll.splice(prunedNodesAll.length - 1, 1);\n  this.graphManager.resetAllNodes();\n  this.graphManager.resetAllEdges();\n};\n\n// Find an appropriate position to replace pruned node, this method can be improved\nCoSELayout.prototype.findPlaceforPrunedNode = function (nodeData) {\n\n  var gridForPrunedNode;\n  var nodeToConnect;\n  var prunedNode = nodeData[0];\n  if (prunedNode == nodeData[1].source) {\n    nodeToConnect = nodeData[1].target;\n  } else {\n    nodeToConnect = nodeData[1].source;\n  }\n  var startGridX = nodeToConnect.startX;\n  var finishGridX = nodeToConnect.finishX;\n  var startGridY = nodeToConnect.startY;\n  var finishGridY = nodeToConnect.finishY;\n\n  var upNodeCount = 0;\n  var downNodeCount = 0;\n  var rightNodeCount = 0;\n  var leftNodeCount = 0;\n  var controlRegions = [upNodeCount, rightNodeCount, downNodeCount, leftNodeCount];\n\n  if (startGridY > 0) {\n    for (var i = startGridX; i <= finishGridX; i++) {\n      controlRegions[0] += this.grid[i][startGridY - 1].length + this.grid[i][startGridY].length - 1;\n    }\n  }\n  if (finishGridX < this.grid.length - 1) {\n    for (var i = startGridY; i <= finishGridY; i++) {\n      controlRegions[1] += this.grid[finishGridX + 1][i].length + this.grid[finishGridX][i].length - 1;\n    }\n  }\n  if (finishGridY < this.grid[0].length - 1) {\n    for (var i = startGridX; i <= finishGridX; i++) {\n      controlRegions[2] += this.grid[i][finishGridY + 1].length + this.grid[i][finishGridY].length - 1;\n    }\n  }\n  if (startGridX > 0) {\n    for (var i = startGridY; i <= finishGridY; i++) {\n      controlRegions[3] += this.grid[startGridX - 1][i].length + this.grid[startGridX][i].length - 1;\n    }\n  }\n  var min = Integer.MAX_VALUE;\n  var minCount;\n  var minIndex;\n  for (var j = 0; j < controlRegions.length; j++) {\n    if (controlRegions[j] < min) {\n      min = controlRegions[j];\n      minCount = 1;\n      minIndex = j;\n    } else if (controlRegions[j] == min) {\n      minCount++;\n    }\n  }\n\n  if (minCount == 3 && min == 0) {\n    if (controlRegions[0] == 0 && controlRegions[1] == 0 && controlRegions[2] == 0) {\n      gridForPrunedNode = 1;\n    } else if (controlRegions[0] == 0 && controlRegions[1] == 0 && controlRegions[3] == 0) {\n      gridForPrunedNode = 0;\n    } else if (controlRegions[0] == 0 && controlRegions[2] == 0 && controlRegions[3] == 0) {\n      gridForPrunedNode = 3;\n    } else if (controlRegions[1] == 0 && controlRegions[2] == 0 && controlRegions[3] == 0) {\n      gridForPrunedNode = 2;\n    }\n  } else if (minCount == 2 && min == 0) {\n    var random = Math.floor(Math.random() * 2);\n    if (controlRegions[0] == 0 && controlRegions[1] == 0) {\n      ;\n      if (random == 0) {\n        gridForPrunedNode = 0;\n      } else {\n        gridForPrunedNode = 1;\n      }\n    } else if (controlRegions[0] == 0 && controlRegions[2] == 0) {\n      if (random == 0) {\n        gridForPrunedNode = 0;\n      } else {\n        gridForPrunedNode = 2;\n      }\n    } else if (controlRegions[0] == 0 && controlRegions[3] == 0) {\n      if (random == 0) {\n        gridForPrunedNode = 0;\n      } else {\n        gridForPrunedNode = 3;\n      }\n    } else if (controlRegions[1] == 0 && controlRegions[2] == 0) {\n      if (random == 0) {\n        gridForPrunedNode = 1;\n      } else {\n        gridForPrunedNode = 2;\n      }\n    } else if (controlRegions[1] == 0 && controlRegions[3] == 0) {\n      if (random == 0) {\n        gridForPrunedNode = 1;\n      } else {\n        gridForPrunedNode = 3;\n      }\n    } else {\n      if (random == 0) {\n        gridForPrunedNode = 2;\n      } else {\n        gridForPrunedNode = 3;\n      }\n    }\n  } else if (minCount == 4 && min == 0) {\n    var random = Math.floor(Math.random() * 4);\n    gridForPrunedNode = random;\n  } else {\n    gridForPrunedNode = minIndex;\n  }\n\n  if (gridForPrunedNode == 0) {\n    prunedNode.setCenter(nodeToConnect.getCenterX(), nodeToConnect.getCenterY() - nodeToConnect.getHeight() / 2 - FDLayoutConstants.DEFAULT_EDGE_LENGTH - prunedNode.getHeight() / 2);\n  } else if (gridForPrunedNode == 1) {\n    prunedNode.setCenter(nodeToConnect.getCenterX() + nodeToConnect.getWidth() / 2 + FDLayoutConstants.DEFAULT_EDGE_LENGTH + prunedNode.getWidth() / 2, nodeToConnect.getCenterY());\n  } else if (gridForPrunedNode == 2) {\n    prunedNode.setCenter(nodeToConnect.getCenterX(), nodeToConnect.getCenterY() + nodeToConnect.getHeight() / 2 + FDLayoutConstants.DEFAULT_EDGE_LENGTH + prunedNode.getHeight() / 2);\n  } else {\n    prunedNode.setCenter(nodeToConnect.getCenterX() - nodeToConnect.getWidth() / 2 - FDLayoutConstants.DEFAULT_EDGE_LENGTH - prunedNode.getWidth() / 2, nodeToConnect.getCenterY());\n  }\n};\n\nmodule.exports = CoSELayout;\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar coseBase = {};\n\ncoseBase.layoutBase = __webpack_require__(0);\ncoseBase.CoSEConstants = __webpack_require__(1);\ncoseBase.CoSEEdge = __webpack_require__(2);\ncoseBase.CoSEGraph = __webpack_require__(3);\ncoseBase.CoSEGraphManager = __webpack_require__(4);\ncoseBase.CoSELayout = __webpack_require__(6);\ncoseBase.CoSENode = __webpack_require__(5);\n\nmodule.exports = coseBase;\n\n/***/ })\n/******/ ]);\n});\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$layout_base$layout_base"]],"~:properties",["^5",["CoSEGraph","getPred2","d","rowWidth","isTreeGrowing","n","compoundGravityRangeFactor","repulsionConstant","idealEdgeLength","initParameters","prunedNodesAll","compoundGravityConstant","w","graphManager","CoSEGraphManager","repopulateZeroDegreeMembers","pred1","tick","s","width","compoundOrder","canAddHorizontal","CoSEEdge","clearCompounds","next","newGraph","getNext","verticalPadding","gravityRangeFactor","toBeTiled","prototype","height","memberGroups","adjustLocations","isProcessed","repulsionForceX","initialAnimationPeriod","CoSENode","animationPeriod","DEFAULT_USE_MULTI_LEVEL_SCALING","child","p","createBendpoints","gravitationForceX","shiftToLastRow","performDFSOnCompounds","growTree","newNode","x","newEdge","idToDummyNode","coolingFactor","gravityConstant","id","getNodeDegree","positionNodesRadially","maxCoolingCycle","getLongestRowIndex","springForceY","TREE_REDUCTION_ON_INCREMENTAL","tiledZeroDegreePack","classicLayout","growTreeIterations","setNext","getNodeDegreeWithChildren","processed","setPred1","rowHeight","level","configurable","CoSELayout","TILING_PADDING_VERTICAL","TILE","gravitationForceY","TILING_PADDING_HORIZONTAL","enumerable","getPositionsData","coolingAdjuster","reduceTrees","propogateDisplacementToChildren","getToBeTiled","layout","horizontalPadding","finalTemperature","layoutBase","insertNodeToRow","calculateNodesToApplyGravitationTo","repulsionForceY","DEFAULT_RADIAL_SEPARATION","CoSEConstants","tilingPostLayout","fillCompexOrderByDFS","move","i","nodesWithGravity","y","displacementX","radialLayout","isGrowthFinished","findPlaceforPrunedNode","getShortestRowIndex","branchRadialLayout","afterGrowthIterations","l","newGraphManager","coolingCycle","springForceX","useSmartIdealEdgeLengthCalculation","getPred1","tilingPreLayout","springConstant","displacementY","rows","h","setProcessed","tileNodes","repopulateCompounds","paddingLeft","m","get","clearZeroDegreeMembers","tileCompoundMembers","maxDiagonalInTree","calcRepulsionRange","o","c","groupZeroDegreeMembers","runSpringEmbedder","totalDisplacement","DEFAULT_COMPONENT_SEPERATION","paddingBottom","paddingRight","tiledMemberPack","paddingTop"]],"~:compiled-at",1621210441995,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$cose_base$cose_base.js\",\n\"lineCount\":59,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/cose-base/cose-base.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$cose_base$cose_base\\\"] = function(global,require,module,exports) {\\n(function webpackUniversalModuleDefinition(root, factory) {\\n\\tif(typeof exports === 'object' && typeof module === 'object')\\n\\t\\tmodule.exports = factory(require(\\\"layout-base\\\"));\\n\\telse if(typeof define === 'function' && define.amd)\\n\\t\\tdefine([\\\"layout-base\\\"], factory);\\n\\telse if(typeof exports === 'object')\\n\\t\\texports[\\\"coseBase\\\"] = factory(require(\\\"layout-base\\\"));\\n\\telse\\n\\t\\troot[\\\"coseBase\\\"] = factory(root[\\\"layoutBase\\\"]);\\n})(this, function(__WEBPACK_EXTERNAL_MODULE_0__) {\\nreturn /******/ (function(modules) { // webpackBootstrap\\n/******/ \\t// The module cache\\n/******/ \\tvar installedModules = {};\\n/******/\\n/******/ \\t// The require function\\n/******/ \\tfunction __webpack_require__(moduleId) {\\n/******/\\n/******/ \\t\\t// Check if module is in cache\\n/******/ \\t\\tif(installedModules[moduleId]) {\\n/******/ \\t\\t\\treturn installedModules[moduleId].exports;\\n/******/ \\t\\t}\\n/******/ \\t\\t// Create a new module (and put it into the cache)\\n/******/ \\t\\tvar module = installedModules[moduleId] = {\\n/******/ \\t\\t\\ti: moduleId,\\n/******/ \\t\\t\\tl: false,\\n/******/ \\t\\t\\texports: {}\\n/******/ \\t\\t};\\n/******/\\n/******/ \\t\\t// Execute the module function\\n/******/ \\t\\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\\n/******/\\n/******/ \\t\\t// Flag the module as loaded\\n/******/ \\t\\tmodule.l = true;\\n/******/\\n/******/ \\t\\t// Return the exports of the module\\n/******/ \\t\\treturn module.exports;\\n/******/ \\t}\\n/******/\\n/******/\\n/******/ \\t// expose the modules object (__webpack_modules__)\\n/******/ \\t__webpack_require__.m = modules;\\n/******/\\n/******/ \\t// expose the module cache\\n/******/ \\t__webpack_require__.c = installedModules;\\n/******/\\n/******/ \\t// identity function for calling harmony imports with the correct context\\n/******/ \\t__webpack_require__.i = function(value) { return value; };\\n/******/\\n/******/ \\t// define getter function for harmony exports\\n/******/ \\t__webpack_require__.d = function(exports, name, getter) {\\n/******/ \\t\\tif(!__webpack_require__.o(exports, name)) {\\n/******/ \\t\\t\\tObject.defineProperty(exports, name, {\\n/******/ \\t\\t\\t\\tconfigurable: false,\\n/******/ \\t\\t\\t\\tenumerable: true,\\n/******/ \\t\\t\\t\\tget: getter\\n/******/ \\t\\t\\t});\\n/******/ \\t\\t}\\n/******/ \\t};\\n/******/\\n/******/ \\t// getDefaultExport function for compatibility with non-harmony modules\\n/******/ \\t__webpack_require__.n = function(module) {\\n/******/ \\t\\tvar getter = module && module.__esModule ?\\n/******/ \\t\\t\\tfunction getDefault() { return module['default']; } :\\n/******/ \\t\\t\\tfunction getModuleExports() { return module; };\\n/******/ \\t\\t__webpack_require__.d(getter, 'a', getter);\\n/******/ \\t\\treturn getter;\\n/******/ \\t};\\n/******/\\n/******/ \\t// Object.prototype.hasOwnProperty.call\\n/******/ \\t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\\n/******/\\n/******/ \\t// __webpack_public_path__\\n/******/ \\t__webpack_require__.p = \\\"\\\";\\n/******/\\n/******/ \\t// Load entry module and return exports\\n/******/ \\treturn __webpack_require__(__webpack_require__.s = 7);\\n/******/ })\\n/************************************************************************/\\n/******/ ([\\n/* 0 */\\n/***/ (function(module, exports) {\\n\\nmodule.exports = __WEBPACK_EXTERNAL_MODULE_0__;\\n\\n/***/ }),\\n/* 1 */\\n/***/ (function(module, exports, __webpack_require__) {\\n\\n\\\"use strict\\\";\\n\\n\\nvar FDLayoutConstants = __webpack_require__(0).FDLayoutConstants;\\n\\nfunction CoSEConstants() {}\\n\\n//CoSEConstants inherits static props in FDLayoutConstants\\nfor (var prop in FDLayoutConstants) {\\n  CoSEConstants[prop] = FDLayoutConstants[prop];\\n}\\n\\nCoSEConstants.DEFAULT_USE_MULTI_LEVEL_SCALING = false;\\nCoSEConstants.DEFAULT_RADIAL_SEPARATION = FDLayoutConstants.DEFAULT_EDGE_LENGTH;\\nCoSEConstants.DEFAULT_COMPONENT_SEPERATION = 60;\\nCoSEConstants.TILE = true;\\nCoSEConstants.TILING_PADDING_VERTICAL = 10;\\nCoSEConstants.TILING_PADDING_HORIZONTAL = 10;\\nCoSEConstants.TREE_REDUCTION_ON_INCREMENTAL = false; // make this true when cose is used incrementally as a part of other non-incremental layout\\n\\nmodule.exports = CoSEConstants;\\n\\n/***/ }),\\n/* 2 */\\n/***/ (function(module, exports, __webpack_require__) {\\n\\n\\\"use strict\\\";\\n\\n\\nvar FDLayoutEdge = __webpack_require__(0).FDLayoutEdge;\\n\\nfunction CoSEEdge(source, target, vEdge) {\\n  FDLayoutEdge.call(this, source, target, vEdge);\\n}\\n\\nCoSEEdge.prototype = Object.create(FDLayoutEdge.prototype);\\nfor (var prop in FDLayoutEdge) {\\n  CoSEEdge[prop] = FDLayoutEdge[prop];\\n}\\n\\nmodule.exports = CoSEEdge;\\n\\n/***/ }),\\n/* 3 */\\n/***/ (function(module, exports, __webpack_require__) {\\n\\n\\\"use strict\\\";\\n\\n\\nvar LGraph = __webpack_require__(0).LGraph;\\n\\nfunction CoSEGraph(parent, graphMgr, vGraph) {\\n  LGraph.call(this, parent, graphMgr, vGraph);\\n}\\n\\nCoSEGraph.prototype = Object.create(LGraph.prototype);\\nfor (var prop in LGraph) {\\n  CoSEGraph[prop] = LGraph[prop];\\n}\\n\\nmodule.exports = CoSEGraph;\\n\\n/***/ }),\\n/* 4 */\\n/***/ (function(module, exports, __webpack_require__) {\\n\\n\\\"use strict\\\";\\n\\n\\nvar LGraphManager = __webpack_require__(0).LGraphManager;\\n\\nfunction CoSEGraphManager(layout) {\\n  LGraphManager.call(this, layout);\\n}\\n\\nCoSEGraphManager.prototype = Object.create(LGraphManager.prototype);\\nfor (var prop in LGraphManager) {\\n  CoSEGraphManager[prop] = LGraphManager[prop];\\n}\\n\\nmodule.exports = CoSEGraphManager;\\n\\n/***/ }),\\n/* 5 */\\n/***/ (function(module, exports, __webpack_require__) {\\n\\n\\\"use strict\\\";\\n\\n\\nvar FDLayoutNode = __webpack_require__(0).FDLayoutNode;\\nvar IMath = __webpack_require__(0).IMath;\\n\\nfunction CoSENode(gm, loc, size, vNode) {\\n  FDLayoutNode.call(this, gm, loc, size, vNode);\\n}\\n\\nCoSENode.prototype = Object.create(FDLayoutNode.prototype);\\nfor (var prop in FDLayoutNode) {\\n  CoSENode[prop] = FDLayoutNode[prop];\\n}\\n\\nCoSENode.prototype.move = function () {\\n  var layout = this.graphManager.getLayout();\\n  this.displacementX = layout.coolingFactor * (this.springForceX + this.repulsionForceX + this.gravitationForceX) / this.noOfChildren;\\n  this.displacementY = layout.coolingFactor * (this.springForceY + this.repulsionForceY + this.gravitationForceY) / this.noOfChildren;\\n\\n  if (Math.abs(this.displacementX) > layout.coolingFactor * layout.maxNodeDisplacement) {\\n    this.displacementX = layout.coolingFactor * layout.maxNodeDisplacement * IMath.sign(this.displacementX);\\n  }\\n\\n  if (Math.abs(this.displacementY) > layout.coolingFactor * layout.maxNodeDisplacement) {\\n    this.displacementY = layout.coolingFactor * layout.maxNodeDisplacement * IMath.sign(this.displacementY);\\n  }\\n\\n  // a simple node, just move it\\n  if (this.child == null) {\\n    this.moveBy(this.displacementX, this.displacementY);\\n  }\\n  // an empty compound node, again just move it\\n  else if (this.child.getNodes().length == 0) {\\n      this.moveBy(this.displacementX, this.displacementY);\\n    }\\n    // non-empty compound node, propogate movement to children as well\\n    else {\\n        this.propogateDisplacementToChildren(this.displacementX, this.displacementY);\\n      }\\n\\n  layout.totalDisplacement += Math.abs(this.displacementX) + Math.abs(this.displacementY);\\n\\n  this.springForceX = 0;\\n  this.springForceY = 0;\\n  this.repulsionForceX = 0;\\n  this.repulsionForceY = 0;\\n  this.gravitationForceX = 0;\\n  this.gravitationForceY = 0;\\n  this.displacementX = 0;\\n  this.displacementY = 0;\\n};\\n\\nCoSENode.prototype.propogateDisplacementToChildren = function (dX, dY) {\\n  var nodes = this.getChild().getNodes();\\n  var node;\\n  for (var i = 0; i < nodes.length; i++) {\\n    node = nodes[i];\\n    if (node.getChild() == null) {\\n      node.moveBy(dX, dY);\\n      node.displacementX += dX;\\n      node.displacementY += dY;\\n    } else {\\n      node.propogateDisplacementToChildren(dX, dY);\\n    }\\n  }\\n};\\n\\nCoSENode.prototype.setPred1 = function (pred1) {\\n  this.pred1 = pred1;\\n};\\n\\nCoSENode.prototype.getPred1 = function () {\\n  return pred1;\\n};\\n\\nCoSENode.prototype.getPred2 = function () {\\n  return pred2;\\n};\\n\\nCoSENode.prototype.setNext = function (next) {\\n  this.next = next;\\n};\\n\\nCoSENode.prototype.getNext = function () {\\n  return next;\\n};\\n\\nCoSENode.prototype.setProcessed = function (processed) {\\n  this.processed = processed;\\n};\\n\\nCoSENode.prototype.isProcessed = function () {\\n  return processed;\\n};\\n\\nmodule.exports = CoSENode;\\n\\n/***/ }),\\n/* 6 */\\n/***/ (function(module, exports, __webpack_require__) {\\n\\n\\\"use strict\\\";\\n\\n\\nvar FDLayout = __webpack_require__(0).FDLayout;\\nvar CoSEGraphManager = __webpack_require__(4);\\nvar CoSEGraph = __webpack_require__(3);\\nvar CoSENode = __webpack_require__(5);\\nvar CoSEEdge = __webpack_require__(2);\\nvar CoSEConstants = __webpack_require__(1);\\nvar FDLayoutConstants = __webpack_require__(0).FDLayoutConstants;\\nvar LayoutConstants = __webpack_require__(0).LayoutConstants;\\nvar Point = __webpack_require__(0).Point;\\nvar PointD = __webpack_require__(0).PointD;\\nvar Layout = __webpack_require__(0).Layout;\\nvar Integer = __webpack_require__(0).Integer;\\nvar IGeometry = __webpack_require__(0).IGeometry;\\nvar LGraph = __webpack_require__(0).LGraph;\\nvar Transform = __webpack_require__(0).Transform;\\n\\nfunction CoSELayout() {\\n  FDLayout.call(this);\\n\\n  this.toBeTiled = {}; // Memorize if a node is to be tiled or is tiled\\n}\\n\\nCoSELayout.prototype = Object.create(FDLayout.prototype);\\n\\nfor (var prop in FDLayout) {\\n  CoSELayout[prop] = FDLayout[prop];\\n}\\n\\nCoSELayout.prototype.newGraphManager = function () {\\n  var gm = new CoSEGraphManager(this);\\n  this.graphManager = gm;\\n  return gm;\\n};\\n\\nCoSELayout.prototype.newGraph = function (vGraph) {\\n  return new CoSEGraph(null, this.graphManager, vGraph);\\n};\\n\\nCoSELayout.prototype.newNode = function (vNode) {\\n  return new CoSENode(this.graphManager, vNode);\\n};\\n\\nCoSELayout.prototype.newEdge = function (vEdge) {\\n  return new CoSEEdge(null, null, vEdge);\\n};\\n\\nCoSELayout.prototype.initParameters = function () {\\n  FDLayout.prototype.initParameters.call(this, arguments);\\n  if (!this.isSubLayout) {\\n    if (CoSEConstants.DEFAULT_EDGE_LENGTH < 10) {\\n      this.idealEdgeLength = 10;\\n    } else {\\n      this.idealEdgeLength = CoSEConstants.DEFAULT_EDGE_LENGTH;\\n    }\\n\\n    this.useSmartIdealEdgeLengthCalculation = CoSEConstants.DEFAULT_USE_SMART_IDEAL_EDGE_LENGTH_CALCULATION;\\n    this.springConstant = FDLayoutConstants.DEFAULT_SPRING_STRENGTH;\\n    this.repulsionConstant = FDLayoutConstants.DEFAULT_REPULSION_STRENGTH;\\n    this.gravityConstant = FDLayoutConstants.DEFAULT_GRAVITY_STRENGTH;\\n    this.compoundGravityConstant = FDLayoutConstants.DEFAULT_COMPOUND_GRAVITY_STRENGTH;\\n    this.gravityRangeFactor = FDLayoutConstants.DEFAULT_GRAVITY_RANGE_FACTOR;\\n    this.compoundGravityRangeFactor = FDLayoutConstants.DEFAULT_COMPOUND_GRAVITY_RANGE_FACTOR;\\n\\n    // variables for tree reduction support\\n    this.prunedNodesAll = [];\\n    this.growTreeIterations = 0;\\n    this.afterGrowthIterations = 0;\\n    this.isTreeGrowing = false;\\n    this.isGrowthFinished = false;\\n\\n    // variables for cooling\\n    this.coolingCycle = 0;\\n    this.maxCoolingCycle = this.maxIterations / FDLayoutConstants.CONVERGENCE_CHECK_PERIOD;\\n    this.finalTemperature = FDLayoutConstants.CONVERGENCE_CHECK_PERIOD / this.maxIterations;\\n    this.coolingAdjuster = 1;\\n  }\\n};\\n\\nCoSELayout.prototype.layout = function () {\\n  var createBendsAsNeeded = LayoutConstants.DEFAULT_CREATE_BENDS_AS_NEEDED;\\n  if (createBendsAsNeeded) {\\n    this.createBendpoints();\\n    this.graphManager.resetAllEdges();\\n  }\\n\\n  this.level = 0;\\n  return this.classicLayout();\\n};\\n\\nCoSELayout.prototype.classicLayout = function () {\\n  this.nodesWithGravity = this.calculateNodesToApplyGravitationTo();\\n  this.graphManager.setAllNodesToApplyGravitation(this.nodesWithGravity);\\n  this.calcNoOfChildrenForAllNodes();\\n  this.graphManager.calcLowestCommonAncestors();\\n  this.graphManager.calcInclusionTreeDepths();\\n  this.graphManager.getRoot().calcEstimatedSize();\\n  this.calcIdealEdgeLengths();\\n\\n  if (!this.incremental) {\\n    var forest = this.getFlatForest();\\n\\n    // The graph associated with this layout is flat and a forest\\n    if (forest.length > 0) {\\n      this.positionNodesRadially(forest);\\n    }\\n    // The graph associated with this layout is not flat or a forest\\n    else {\\n        // Reduce the trees when incremental mode is not enabled and graph is not a forest \\n        this.reduceTrees();\\n        // Update nodes that gravity will be applied\\n        this.graphManager.resetAllNodesToApplyGravitation();\\n        var allNodes = new Set(this.getAllNodes());\\n        var intersection = this.nodesWithGravity.filter(function (x) {\\n          return allNodes.has(x);\\n        });\\n        this.graphManager.setAllNodesToApplyGravitation(intersection);\\n\\n        this.positionNodesRandomly();\\n      }\\n  } else {\\n    if (CoSEConstants.TREE_REDUCTION_ON_INCREMENTAL) {\\n      // Reduce the trees in incremental mode if only this constant is set to true \\n      this.reduceTrees();\\n      // Update nodes that gravity will be applied\\n      this.graphManager.resetAllNodesToApplyGravitation();\\n      var allNodes = new Set(this.getAllNodes());\\n      var intersection = this.nodesWithGravity.filter(function (x) {\\n        return allNodes.has(x);\\n      });\\n      this.graphManager.setAllNodesToApplyGravitation(intersection);\\n    }\\n  }\\n\\n  this.initSpringEmbedder();\\n  this.runSpringEmbedder();\\n\\n  return true;\\n};\\n\\nCoSELayout.prototype.tick = function () {\\n  this.totalIterations++;\\n\\n  if (this.totalIterations === this.maxIterations && !this.isTreeGrowing && !this.isGrowthFinished) {\\n    if (this.prunedNodesAll.length > 0) {\\n      this.isTreeGrowing = true;\\n    } else {\\n      return true;\\n    }\\n  }\\n\\n  if (this.totalIterations % FDLayoutConstants.CONVERGENCE_CHECK_PERIOD == 0 && !this.isTreeGrowing && !this.isGrowthFinished) {\\n    if (this.isConverged()) {\\n      if (this.prunedNodesAll.length > 0) {\\n        this.isTreeGrowing = true;\\n      } else {\\n        return true;\\n      }\\n    }\\n\\n    this.coolingCycle++;\\n\\n    if (this.layoutQuality == 0) {\\n      // quality - \\\"draft\\\"\\n      this.coolingAdjuster = this.coolingCycle;\\n    } else if (this.layoutQuality == 1) {\\n      // quality - \\\"default\\\"\\n      this.coolingAdjuster = this.coolingCycle / 3;\\n    }\\n\\n    // cooling schedule is based on http://www.btluke.com/simanf1.html -> cooling schedule 3\\n    this.coolingFactor = Math.max(this.initialCoolingFactor - Math.pow(this.coolingCycle, Math.log(100 * (this.initialCoolingFactor - this.finalTemperature)) / Math.log(this.maxCoolingCycle)) / 100 * this.coolingAdjuster, this.finalTemperature);\\n    this.animationPeriod = Math.ceil(this.initialAnimationPeriod * Math.sqrt(this.coolingFactor));\\n  }\\n  // Operations while tree is growing again \\n  if (this.isTreeGrowing) {\\n    if (this.growTreeIterations % 10 == 0) {\\n      if (this.prunedNodesAll.length > 0) {\\n        this.graphManager.updateBounds();\\n        this.updateGrid();\\n        this.growTree(this.prunedNodesAll);\\n        // Update nodes that gravity will be applied\\n        this.graphManager.resetAllNodesToApplyGravitation();\\n        var allNodes = new Set(this.getAllNodes());\\n        var intersection = this.nodesWithGravity.filter(function (x) {\\n          return allNodes.has(x);\\n        });\\n        this.graphManager.setAllNodesToApplyGravitation(intersection);\\n\\n        this.graphManager.updateBounds();\\n        this.updateGrid();\\n        this.coolingFactor = FDLayoutConstants.DEFAULT_COOLING_FACTOR_INCREMENTAL;\\n      } else {\\n        this.isTreeGrowing = false;\\n        this.isGrowthFinished = true;\\n      }\\n    }\\n    this.growTreeIterations++;\\n  }\\n  // Operations after growth is finished\\n  if (this.isGrowthFinished) {\\n    if (this.isConverged()) {\\n      return true;\\n    }\\n    if (this.afterGrowthIterations % 10 == 0) {\\n      this.graphManager.updateBounds();\\n      this.updateGrid();\\n    }\\n    this.coolingFactor = FDLayoutConstants.DEFAULT_COOLING_FACTOR_INCREMENTAL * ((100 - this.afterGrowthIterations) / 100);\\n    this.afterGrowthIterations++;\\n  }\\n\\n  var gridUpdateAllowed = !this.isTreeGrowing && !this.isGrowthFinished;\\n  var forceToNodeSurroundingUpdate = this.growTreeIterations % 10 == 1 && this.isTreeGrowing || this.afterGrowthIterations % 10 == 1 && this.isGrowthFinished;\\n\\n  this.totalDisplacement = 0;\\n  this.graphManager.updateBounds();\\n  this.calcSpringForces();\\n  this.calcRepulsionForces(gridUpdateAllowed, forceToNodeSurroundingUpdate);\\n  this.calcGravitationalForces();\\n  this.moveNodes();\\n  this.animate();\\n\\n  return false; // Layout is not ended yet return false\\n};\\n\\nCoSELayout.prototype.getPositionsData = function () {\\n  var allNodes = this.graphManager.getAllNodes();\\n  var pData = {};\\n  for (var i = 0; i < allNodes.length; i++) {\\n    var rect = allNodes[i].rect;\\n    var id = allNodes[i].id;\\n    pData[id] = {\\n      id: id,\\n      x: rect.getCenterX(),\\n      y: rect.getCenterY(),\\n      w: rect.width,\\n      h: rect.height\\n    };\\n  }\\n\\n  return pData;\\n};\\n\\nCoSELayout.prototype.runSpringEmbedder = function () {\\n  this.initialAnimationPeriod = 25;\\n  this.animationPeriod = this.initialAnimationPeriod;\\n  var layoutEnded = false;\\n\\n  // If aminate option is 'during' signal that layout is supposed to start iterating\\n  if (FDLayoutConstants.ANIMATE === 'during') {\\n    this.emit('layoutstarted');\\n  } else {\\n    // If aminate option is 'during' tick() function will be called on index.js\\n    while (!layoutEnded) {\\n      layoutEnded = this.tick();\\n    }\\n\\n    this.graphManager.updateBounds();\\n  }\\n};\\n\\nCoSELayout.prototype.calculateNodesToApplyGravitationTo = function () {\\n  var nodeList = [];\\n  var graph;\\n\\n  var graphs = this.graphManager.getGraphs();\\n  var size = graphs.length;\\n  var i;\\n  for (i = 0; i < size; i++) {\\n    graph = graphs[i];\\n\\n    graph.updateConnected();\\n\\n    if (!graph.isConnected) {\\n      nodeList = nodeList.concat(graph.getNodes());\\n    }\\n  }\\n\\n  return nodeList;\\n};\\n\\nCoSELayout.prototype.createBendpoints = function () {\\n  var edges = [];\\n  edges = edges.concat(this.graphManager.getAllEdges());\\n  var visited = new Set();\\n  var i;\\n  for (i = 0; i < edges.length; i++) {\\n    var edge = edges[i];\\n\\n    if (!visited.has(edge)) {\\n      var source = edge.getSource();\\n      var target = edge.getTarget();\\n\\n      if (source == target) {\\n        edge.getBendpoints().push(new PointD());\\n        edge.getBendpoints().push(new PointD());\\n        this.createDummyNodesForBendpoints(edge);\\n        visited.add(edge);\\n      } else {\\n        var edgeList = [];\\n\\n        edgeList = edgeList.concat(source.getEdgeListToNode(target));\\n        edgeList = edgeList.concat(target.getEdgeListToNode(source));\\n\\n        if (!visited.has(edgeList[0])) {\\n          if (edgeList.length > 1) {\\n            var k;\\n            for (k = 0; k < edgeList.length; k++) {\\n              var multiEdge = edgeList[k];\\n              multiEdge.getBendpoints().push(new PointD());\\n              this.createDummyNodesForBendpoints(multiEdge);\\n            }\\n          }\\n          edgeList.forEach(function (edge) {\\n            visited.add(edge);\\n          });\\n        }\\n      }\\n    }\\n\\n    if (visited.size == edges.length) {\\n      break;\\n    }\\n  }\\n};\\n\\nCoSELayout.prototype.positionNodesRadially = function (forest) {\\n  // We tile the trees to a grid row by row; first tree starts at (0,0)\\n  var currentStartingPoint = new Point(0, 0);\\n  var numberOfColumns = Math.ceil(Math.sqrt(forest.length));\\n  var height = 0;\\n  var currentY = 0;\\n  var currentX = 0;\\n  var point = new PointD(0, 0);\\n\\n  for (var i = 0; i < forest.length; i++) {\\n    if (i % numberOfColumns == 0) {\\n      // Start of a new row, make the x coordinate 0, increment the\\n      // y coordinate with the max height of the previous row\\n      currentX = 0;\\n      currentY = height;\\n\\n      if (i != 0) {\\n        currentY += CoSEConstants.DEFAULT_COMPONENT_SEPERATION;\\n      }\\n\\n      height = 0;\\n    }\\n\\n    var tree = forest[i];\\n\\n    // Find the center of the tree\\n    var centerNode = Layout.findCenterOfTree(tree);\\n\\n    // Set the staring point of the next tree\\n    currentStartingPoint.x = currentX;\\n    currentStartingPoint.y = currentY;\\n\\n    // Do a radial layout starting with the center\\n    point = CoSELayout.radialLayout(tree, centerNode, currentStartingPoint);\\n\\n    if (point.y > height) {\\n      height = Math.floor(point.y);\\n    }\\n\\n    currentX = Math.floor(point.x + CoSEConstants.DEFAULT_COMPONENT_SEPERATION);\\n  }\\n\\n  this.transform(new PointD(LayoutConstants.WORLD_CENTER_X - point.x / 2, LayoutConstants.WORLD_CENTER_Y - point.y / 2));\\n};\\n\\nCoSELayout.radialLayout = function (tree, centerNode, startingPoint) {\\n  var radialSep = Math.max(this.maxDiagonalInTree(tree), CoSEConstants.DEFAULT_RADIAL_SEPARATION);\\n  CoSELayout.branchRadialLayout(centerNode, null, 0, 359, 0, radialSep);\\n  var bounds = LGraph.calculateBounds(tree);\\n\\n  var transform = new Transform();\\n  transform.setDeviceOrgX(bounds.getMinX());\\n  transform.setDeviceOrgY(bounds.getMinY());\\n  transform.setWorldOrgX(startingPoint.x);\\n  transform.setWorldOrgY(startingPoint.y);\\n\\n  for (var i = 0; i < tree.length; i++) {\\n    var node = tree[i];\\n    node.transform(transform);\\n  }\\n\\n  var bottomRight = new PointD(bounds.getMaxX(), bounds.getMaxY());\\n\\n  return transform.inverseTransformPoint(bottomRight);\\n};\\n\\nCoSELayout.branchRadialLayout = function (node, parentOfNode, startAngle, endAngle, distance, radialSeparation) {\\n  // First, position this node by finding its angle.\\n  var halfInterval = (endAngle - startAngle + 1) / 2;\\n\\n  if (halfInterval < 0) {\\n    halfInterval += 180;\\n  }\\n\\n  var nodeAngle = (halfInterval + startAngle) % 360;\\n  var teta = nodeAngle * IGeometry.TWO_PI / 360;\\n\\n  // Make polar to java cordinate conversion.\\n  var cos_teta = Math.cos(teta);\\n  var x_ = distance * Math.cos(teta);\\n  var y_ = distance * Math.sin(teta);\\n\\n  node.setCenter(x_, y_);\\n\\n  // Traverse all neighbors of this node and recursively call this\\n  // function.\\n  var neighborEdges = [];\\n  neighborEdges = neighborEdges.concat(node.getEdges());\\n  var childCount = neighborEdges.length;\\n\\n  if (parentOfNode != null) {\\n    childCount--;\\n  }\\n\\n  var branchCount = 0;\\n\\n  var incEdgesCount = neighborEdges.length;\\n  var startIndex;\\n\\n  var edges = node.getEdgesBetween(parentOfNode);\\n\\n  // If there are multiple edges, prune them until there remains only one\\n  // edge.\\n  while (edges.length > 1) {\\n    //neighborEdges.remove(edges.remove(0));\\n    var temp = edges[0];\\n    edges.splice(0, 1);\\n    var index = neighborEdges.indexOf(temp);\\n    if (index >= 0) {\\n      neighborEdges.splice(index, 1);\\n    }\\n    incEdgesCount--;\\n    childCount--;\\n  }\\n\\n  if (parentOfNode != null) {\\n    //assert edges.length == 1;\\n    startIndex = (neighborEdges.indexOf(edges[0]) + 1) % incEdgesCount;\\n  } else {\\n    startIndex = 0;\\n  }\\n\\n  var stepAngle = Math.abs(endAngle - startAngle) / childCount;\\n\\n  for (var i = startIndex; branchCount != childCount; i = ++i % incEdgesCount) {\\n    var currentNeighbor = neighborEdges[i].getOtherEnd(node);\\n\\n    // Don't back traverse to root node in current tree.\\n    if (currentNeighbor == parentOfNode) {\\n      continue;\\n    }\\n\\n    var childStartAngle = (startAngle + branchCount * stepAngle) % 360;\\n    var childEndAngle = (childStartAngle + stepAngle) % 360;\\n\\n    CoSELayout.branchRadialLayout(currentNeighbor, node, childStartAngle, childEndAngle, distance + radialSeparation, radialSeparation);\\n\\n    branchCount++;\\n  }\\n};\\n\\nCoSELayout.maxDiagonalInTree = function (tree) {\\n  var maxDiagonal = Integer.MIN_VALUE;\\n\\n  for (var i = 0; i < tree.length; i++) {\\n    var node = tree[i];\\n    var diagonal = node.getDiagonal();\\n\\n    if (diagonal > maxDiagonal) {\\n      maxDiagonal = diagonal;\\n    }\\n  }\\n\\n  return maxDiagonal;\\n};\\n\\nCoSELayout.prototype.calcRepulsionRange = function () {\\n  // formula is 2 x (level + 1) x idealEdgeLength\\n  return 2 * (this.level + 1) * this.idealEdgeLength;\\n};\\n\\n// Tiling methods\\n\\n// Group zero degree members whose parents are not to be tiled, create dummy parents where needed and fill memberGroups by their dummp parent id's\\nCoSELayout.prototype.groupZeroDegreeMembers = function () {\\n  var self = this;\\n  // array of [parent_id x oneDegreeNode_id]\\n  var tempMemberGroups = {}; // A temporary map of parent node and its zero degree members\\n  this.memberGroups = {}; // A map of dummy parent node and its zero degree members whose parents are not to be tiled\\n  this.idToDummyNode = {}; // A map of id to dummy node \\n\\n  var zeroDegree = []; // List of zero degree nodes whose parents are not to be tiled\\n  var allNodes = this.graphManager.getAllNodes();\\n\\n  // Fill zero degree list\\n  for (var i = 0; i < allNodes.length; i++) {\\n    var node = allNodes[i];\\n    var parent = node.getParent();\\n    // If a node has zero degree and its parent is not to be tiled if exists add that node to zeroDegres list\\n    if (this.getNodeDegreeWithChildren(node) === 0 && (parent.id == undefined || !this.getToBeTiled(parent))) {\\n      zeroDegree.push(node);\\n    }\\n  }\\n\\n  // Create a map of parent node and its zero degree members\\n  for (var i = 0; i < zeroDegree.length; i++) {\\n    var node = zeroDegree[i]; // Zero degree node itself\\n    var p_id = node.getParent().id; // Parent id\\n\\n    if (typeof tempMemberGroups[p_id] === \\\"undefined\\\") tempMemberGroups[p_id] = [];\\n\\n    tempMemberGroups[p_id] = tempMemberGroups[p_id].concat(node); // Push node to the list belongs to its parent in tempMemberGroups\\n  }\\n\\n  // If there are at least two nodes at a level, create a dummy compound for them\\n  Object.keys(tempMemberGroups).forEach(function (p_id) {\\n    if (tempMemberGroups[p_id].length > 1) {\\n      var dummyCompoundId = \\\"DummyCompound_\\\" + p_id; // The id of dummy compound which will be created soon\\n      self.memberGroups[dummyCompoundId] = tempMemberGroups[p_id]; // Add dummy compound to memberGroups\\n\\n      var parent = tempMemberGroups[p_id][0].getParent(); // The parent of zero degree nodes will be the parent of new dummy compound\\n\\n      // Create a dummy compound with calculated id\\n      var dummyCompound = new CoSENode(self.graphManager);\\n      dummyCompound.id = dummyCompoundId;\\n      dummyCompound.paddingLeft = parent.paddingLeft || 0;\\n      dummyCompound.paddingRight = parent.paddingRight || 0;\\n      dummyCompound.paddingBottom = parent.paddingBottom || 0;\\n      dummyCompound.paddingTop = parent.paddingTop || 0;\\n\\n      self.idToDummyNode[dummyCompoundId] = dummyCompound;\\n\\n      var dummyParentGraph = self.getGraphManager().add(self.newGraph(), dummyCompound);\\n      var parentGraph = parent.getChild();\\n\\n      // Add dummy compound to parent the graph\\n      parentGraph.add(dummyCompound);\\n\\n      // For each zero degree node in this level remove it from its parent graph and add it to the graph of dummy parent\\n      for (var i = 0; i < tempMemberGroups[p_id].length; i++) {\\n        var node = tempMemberGroups[p_id][i];\\n\\n        parentGraph.remove(node);\\n        dummyParentGraph.add(node);\\n      }\\n    }\\n  });\\n};\\n\\nCoSELayout.prototype.clearCompounds = function () {\\n  var childGraphMap = {};\\n  var idToNode = {};\\n\\n  // Get compound ordering by finding the inner one first\\n  this.performDFSOnCompounds();\\n\\n  for (var i = 0; i < this.compoundOrder.length; i++) {\\n\\n    idToNode[this.compoundOrder[i].id] = this.compoundOrder[i];\\n    childGraphMap[this.compoundOrder[i].id] = [].concat(this.compoundOrder[i].getChild().getNodes());\\n\\n    // Remove children of compounds\\n    this.graphManager.remove(this.compoundOrder[i].getChild());\\n    this.compoundOrder[i].child = null;\\n  }\\n\\n  this.graphManager.resetAllNodes();\\n\\n  // Tile the removed children\\n  this.tileCompoundMembers(childGraphMap, idToNode);\\n};\\n\\nCoSELayout.prototype.clearZeroDegreeMembers = function () {\\n  var self = this;\\n  var tiledZeroDegreePack = this.tiledZeroDegreePack = [];\\n\\n  Object.keys(this.memberGroups).forEach(function (id) {\\n    var compoundNode = self.idToDummyNode[id]; // Get the dummy compound\\n\\n    tiledZeroDegreePack[id] = self.tileNodes(self.memberGroups[id], compoundNode.paddingLeft + compoundNode.paddingRight);\\n\\n    // Set the width and height of the dummy compound as calculated\\n    compoundNode.rect.width = tiledZeroDegreePack[id].width;\\n    compoundNode.rect.height = tiledZeroDegreePack[id].height;\\n  });\\n};\\n\\nCoSELayout.prototype.repopulateCompounds = function () {\\n  for (var i = this.compoundOrder.length - 1; i >= 0; i--) {\\n    var lCompoundNode = this.compoundOrder[i];\\n    var id = lCompoundNode.id;\\n    var horizontalMargin = lCompoundNode.paddingLeft;\\n    var verticalMargin = lCompoundNode.paddingTop;\\n\\n    this.adjustLocations(this.tiledMemberPack[id], lCompoundNode.rect.x, lCompoundNode.rect.y, horizontalMargin, verticalMargin);\\n  }\\n};\\n\\nCoSELayout.prototype.repopulateZeroDegreeMembers = function () {\\n  var self = this;\\n  var tiledPack = this.tiledZeroDegreePack;\\n\\n  Object.keys(tiledPack).forEach(function (id) {\\n    var compoundNode = self.idToDummyNode[id]; // Get the dummy compound by its id\\n    var horizontalMargin = compoundNode.paddingLeft;\\n    var verticalMargin = compoundNode.paddingTop;\\n\\n    // Adjust the positions of nodes wrt its compound\\n    self.adjustLocations(tiledPack[id], compoundNode.rect.x, compoundNode.rect.y, horizontalMargin, verticalMargin);\\n  });\\n};\\n\\nCoSELayout.prototype.getToBeTiled = function (node) {\\n  var id = node.id;\\n  //firstly check the previous results\\n  if (this.toBeTiled[id] != null) {\\n    return this.toBeTiled[id];\\n  }\\n\\n  //only compound nodes are to be tiled\\n  var childGraph = node.getChild();\\n  if (childGraph == null) {\\n    this.toBeTiled[id] = false;\\n    return false;\\n  }\\n\\n  var children = childGraph.getNodes(); // Get the children nodes\\n\\n  //a compound node is not to be tiled if all of its compound children are not to be tiled\\n  for (var i = 0; i < children.length; i++) {\\n    var theChild = children[i];\\n\\n    if (this.getNodeDegree(theChild) > 0) {\\n      this.toBeTiled[id] = false;\\n      return false;\\n    }\\n\\n    //pass the children not having the compound structure\\n    if (theChild.getChild() == null) {\\n      this.toBeTiled[theChild.id] = false;\\n      continue;\\n    }\\n\\n    if (!this.getToBeTiled(theChild)) {\\n      this.toBeTiled[id] = false;\\n      return false;\\n    }\\n  }\\n  this.toBeTiled[id] = true;\\n  return true;\\n};\\n\\n// Get degree of a node depending of its edges and independent of its children\\nCoSELayout.prototype.getNodeDegree = function (node) {\\n  var id = node.id;\\n  var edges = node.getEdges();\\n  var degree = 0;\\n\\n  // For the edges connected\\n  for (var i = 0; i < edges.length; i++) {\\n    var edge = edges[i];\\n    if (edge.getSource().id !== edge.getTarget().id) {\\n      degree = degree + 1;\\n    }\\n  }\\n  return degree;\\n};\\n\\n// Get degree of a node with its children\\nCoSELayout.prototype.getNodeDegreeWithChildren = function (node) {\\n  var degree = this.getNodeDegree(node);\\n  if (node.getChild() == null) {\\n    return degree;\\n  }\\n  var children = node.getChild().getNodes();\\n  for (var i = 0; i < children.length; i++) {\\n    var child = children[i];\\n    degree += this.getNodeDegreeWithChildren(child);\\n  }\\n  return degree;\\n};\\n\\nCoSELayout.prototype.performDFSOnCompounds = function () {\\n  this.compoundOrder = [];\\n  this.fillCompexOrderByDFS(this.graphManager.getRoot().getNodes());\\n};\\n\\nCoSELayout.prototype.fillCompexOrderByDFS = function (children) {\\n  for (var i = 0; i < children.length; i++) {\\n    var child = children[i];\\n    if (child.getChild() != null) {\\n      this.fillCompexOrderByDFS(child.getChild().getNodes());\\n    }\\n    if (this.getToBeTiled(child)) {\\n      this.compoundOrder.push(child);\\n    }\\n  }\\n};\\n\\n/**\\n* This method places each zero degree member wrt given (x,y) coordinates (top left).\\n*/\\nCoSELayout.prototype.adjustLocations = function (organization, x, y, compoundHorizontalMargin, compoundVerticalMargin) {\\n  x += compoundHorizontalMargin;\\n  y += compoundVerticalMargin;\\n\\n  var left = x;\\n\\n  for (var i = 0; i < organization.rows.length; i++) {\\n    var row = organization.rows[i];\\n    x = left;\\n    var maxHeight = 0;\\n\\n    for (var j = 0; j < row.length; j++) {\\n      var lnode = row[j];\\n\\n      lnode.rect.x = x; // + lnode.rect.width / 2;\\n      lnode.rect.y = y; // + lnode.rect.height / 2;\\n\\n      x += lnode.rect.width + organization.horizontalPadding;\\n\\n      if (lnode.rect.height > maxHeight) maxHeight = lnode.rect.height;\\n    }\\n\\n    y += maxHeight + organization.verticalPadding;\\n  }\\n};\\n\\nCoSELayout.prototype.tileCompoundMembers = function (childGraphMap, idToNode) {\\n  var self = this;\\n  this.tiledMemberPack = [];\\n\\n  Object.keys(childGraphMap).forEach(function (id) {\\n    // Get the compound node\\n    var compoundNode = idToNode[id];\\n\\n    self.tiledMemberPack[id] = self.tileNodes(childGraphMap[id], compoundNode.paddingLeft + compoundNode.paddingRight);\\n\\n    compoundNode.rect.width = self.tiledMemberPack[id].width;\\n    compoundNode.rect.height = self.tiledMemberPack[id].height;\\n  });\\n};\\n\\nCoSELayout.prototype.tileNodes = function (nodes, minWidth) {\\n  var verticalPadding = CoSEConstants.TILING_PADDING_VERTICAL;\\n  var horizontalPadding = CoSEConstants.TILING_PADDING_HORIZONTAL;\\n  var organization = {\\n    rows: [],\\n    rowWidth: [],\\n    rowHeight: [],\\n    width: 0,\\n    height: minWidth, // assume minHeight equals to minWidth\\n    verticalPadding: verticalPadding,\\n    horizontalPadding: horizontalPadding\\n  };\\n\\n  // Sort the nodes in ascending order of their areas\\n  nodes.sort(function (n1, n2) {\\n    if (n1.rect.width * n1.rect.height > n2.rect.width * n2.rect.height) return -1;\\n    if (n1.rect.width * n1.rect.height < n2.rect.width * n2.rect.height) return 1;\\n    return 0;\\n  });\\n\\n  // Create the organization -> tile members\\n  for (var i = 0; i < nodes.length; i++) {\\n    var lNode = nodes[i];\\n\\n    if (organization.rows.length == 0) {\\n      this.insertNodeToRow(organization, lNode, 0, minWidth);\\n    } else if (this.canAddHorizontal(organization, lNode.rect.width, lNode.rect.height)) {\\n      this.insertNodeToRow(organization, lNode, this.getShortestRowIndex(organization), minWidth);\\n    } else {\\n      this.insertNodeToRow(organization, lNode, organization.rows.length, minWidth);\\n    }\\n\\n    this.shiftToLastRow(organization);\\n  }\\n\\n  return organization;\\n};\\n\\nCoSELayout.prototype.insertNodeToRow = function (organization, node, rowIndex, minWidth) {\\n  var minCompoundSize = minWidth;\\n\\n  // Add new row if needed\\n  if (rowIndex == organization.rows.length) {\\n    var secondDimension = [];\\n\\n    organization.rows.push(secondDimension);\\n    organization.rowWidth.push(minCompoundSize);\\n    organization.rowHeight.push(0);\\n  }\\n\\n  // Update row width\\n  var w = organization.rowWidth[rowIndex] + node.rect.width;\\n\\n  if (organization.rows[rowIndex].length > 0) {\\n    w += organization.horizontalPadding;\\n  }\\n\\n  organization.rowWidth[rowIndex] = w;\\n  // Update compound width\\n  if (organization.width < w) {\\n    organization.width = w;\\n  }\\n\\n  // Update height\\n  var h = node.rect.height;\\n  if (rowIndex > 0) h += organization.verticalPadding;\\n\\n  var extraHeight = 0;\\n  if (h > organization.rowHeight[rowIndex]) {\\n    extraHeight = organization.rowHeight[rowIndex];\\n    organization.rowHeight[rowIndex] = h;\\n    extraHeight = organization.rowHeight[rowIndex] - extraHeight;\\n  }\\n\\n  organization.height += extraHeight;\\n\\n  // Insert node\\n  organization.rows[rowIndex].push(node);\\n};\\n\\n//Scans the rows of an organization and returns the one with the min width\\nCoSELayout.prototype.getShortestRowIndex = function (organization) {\\n  var r = -1;\\n  var min = Number.MAX_VALUE;\\n\\n  for (var i = 0; i < organization.rows.length; i++) {\\n    if (organization.rowWidth[i] < min) {\\n      r = i;\\n      min = organization.rowWidth[i];\\n    }\\n  }\\n  return r;\\n};\\n\\n//Scans the rows of an organization and returns the one with the max width\\nCoSELayout.prototype.getLongestRowIndex = function (organization) {\\n  var r = -1;\\n  var max = Number.MIN_VALUE;\\n\\n  for (var i = 0; i < organization.rows.length; i++) {\\n\\n    if (organization.rowWidth[i] > max) {\\n      r = i;\\n      max = organization.rowWidth[i];\\n    }\\n  }\\n\\n  return r;\\n};\\n\\n/**\\n* This method checks whether adding extra width to the organization violates\\n* the aspect ratio(1) or not.\\n*/\\nCoSELayout.prototype.canAddHorizontal = function (organization, extraWidth, extraHeight) {\\n\\n  var sri = this.getShortestRowIndex(organization);\\n\\n  if (sri < 0) {\\n    return true;\\n  }\\n\\n  var min = organization.rowWidth[sri];\\n\\n  if (min + organization.horizontalPadding + extraWidth <= organization.width) return true;\\n\\n  var hDiff = 0;\\n\\n  // Adding to an existing row\\n  if (organization.rowHeight[sri] < extraHeight) {\\n    if (sri > 0) hDiff = extraHeight + organization.verticalPadding - organization.rowHeight[sri];\\n  }\\n\\n  var add_to_row_ratio;\\n  if (organization.width - min >= extraWidth + organization.horizontalPadding) {\\n    add_to_row_ratio = (organization.height + hDiff) / (min + extraWidth + organization.horizontalPadding);\\n  } else {\\n    add_to_row_ratio = (organization.height + hDiff) / organization.width;\\n  }\\n\\n  // Adding a new row for this node\\n  hDiff = extraHeight + organization.verticalPadding;\\n  var add_new_row_ratio;\\n  if (organization.width < extraWidth) {\\n    add_new_row_ratio = (organization.height + hDiff) / extraWidth;\\n  } else {\\n    add_new_row_ratio = (organization.height + hDiff) / organization.width;\\n  }\\n\\n  if (add_new_row_ratio < 1) add_new_row_ratio = 1 / add_new_row_ratio;\\n\\n  if (add_to_row_ratio < 1) add_to_row_ratio = 1 / add_to_row_ratio;\\n\\n  return add_to_row_ratio < add_new_row_ratio;\\n};\\n\\n//If moving the last node from the longest row and adding it to the last\\n//row makes the bounding box smaller, do it.\\nCoSELayout.prototype.shiftToLastRow = function (organization) {\\n  var longest = this.getLongestRowIndex(organization);\\n  var last = organization.rowWidth.length - 1;\\n  var row = organization.rows[longest];\\n  var node = row[row.length - 1];\\n\\n  var diff = node.width + organization.horizontalPadding;\\n\\n  // Check if there is enough space on the last row\\n  if (organization.width - organization.rowWidth[last] > diff && longest != last) {\\n    // Remove the last element of the longest row\\n    row.splice(-1, 1);\\n\\n    // Push it to the last row\\n    organization.rows[last].push(node);\\n\\n    organization.rowWidth[longest] = organization.rowWidth[longest] - diff;\\n    organization.rowWidth[last] = organization.rowWidth[last] + diff;\\n    organization.width = organization.rowWidth[instance.getLongestRowIndex(organization)];\\n\\n    // Update heights of the organization\\n    var maxHeight = Number.MIN_VALUE;\\n    for (var i = 0; i < row.length; i++) {\\n      if (row[i].height > maxHeight) maxHeight = row[i].height;\\n    }\\n    if (longest > 0) maxHeight += organization.verticalPadding;\\n\\n    var prevTotal = organization.rowHeight[longest] + organization.rowHeight[last];\\n\\n    organization.rowHeight[longest] = maxHeight;\\n    if (organization.rowHeight[last] < node.height + organization.verticalPadding) organization.rowHeight[last] = node.height + organization.verticalPadding;\\n\\n    var finalTotal = organization.rowHeight[longest] + organization.rowHeight[last];\\n    organization.height += finalTotal - prevTotal;\\n\\n    this.shiftToLastRow(organization);\\n  }\\n};\\n\\nCoSELayout.prototype.tilingPreLayout = function () {\\n  if (CoSEConstants.TILE) {\\n    // Find zero degree nodes and create a compound for each level\\n    this.groupZeroDegreeMembers();\\n    // Tile and clear children of each compound\\n    this.clearCompounds();\\n    // Separately tile and clear zero degree nodes for each level\\n    this.clearZeroDegreeMembers();\\n  }\\n};\\n\\nCoSELayout.prototype.tilingPostLayout = function () {\\n  if (CoSEConstants.TILE) {\\n    this.repopulateZeroDegreeMembers();\\n    this.repopulateCompounds();\\n  }\\n};\\n\\n// -----------------------------------------------------------------------------\\n// Section: Tree Reduction methods\\n// -----------------------------------------------------------------------------\\n// Reduce trees \\nCoSELayout.prototype.reduceTrees = function () {\\n  var prunedNodesAll = [];\\n  var containsLeaf = true;\\n  var node;\\n\\n  while (containsLeaf) {\\n    var allNodes = this.graphManager.getAllNodes();\\n    var prunedNodesInStepTemp = [];\\n    containsLeaf = false;\\n\\n    for (var i = 0; i < allNodes.length; i++) {\\n      node = allNodes[i];\\n      if (node.getEdges().length == 1 && !node.getEdges()[0].isInterGraph && node.getChild() == null) {\\n        prunedNodesInStepTemp.push([node, node.getEdges()[0], node.getOwner()]);\\n        containsLeaf = true;\\n      }\\n    }\\n    if (containsLeaf == true) {\\n      var prunedNodesInStep = [];\\n      for (var j = 0; j < prunedNodesInStepTemp.length; j++) {\\n        if (prunedNodesInStepTemp[j][0].getEdges().length == 1) {\\n          prunedNodesInStep.push(prunedNodesInStepTemp[j]);\\n          prunedNodesInStepTemp[j][0].getOwner().remove(prunedNodesInStepTemp[j][0]);\\n        }\\n      }\\n      prunedNodesAll.push(prunedNodesInStep);\\n      this.graphManager.resetAllNodes();\\n      this.graphManager.resetAllEdges();\\n    }\\n  }\\n  this.prunedNodesAll = prunedNodesAll;\\n};\\n\\n// Grow tree one step \\nCoSELayout.prototype.growTree = function (prunedNodesAll) {\\n  var lengthOfPrunedNodesInStep = prunedNodesAll.length;\\n  var prunedNodesInStep = prunedNodesAll[lengthOfPrunedNodesInStep - 1];\\n\\n  var nodeData;\\n  for (var i = 0; i < prunedNodesInStep.length; i++) {\\n    nodeData = prunedNodesInStep[i];\\n\\n    this.findPlaceforPrunedNode(nodeData);\\n\\n    nodeData[2].add(nodeData[0]);\\n    nodeData[2].add(nodeData[1], nodeData[1].source, nodeData[1].target);\\n  }\\n\\n  prunedNodesAll.splice(prunedNodesAll.length - 1, 1);\\n  this.graphManager.resetAllNodes();\\n  this.graphManager.resetAllEdges();\\n};\\n\\n// Find an appropriate position to replace pruned node, this method can be improved\\nCoSELayout.prototype.findPlaceforPrunedNode = function (nodeData) {\\n\\n  var gridForPrunedNode;\\n  var nodeToConnect;\\n  var prunedNode = nodeData[0];\\n  if (prunedNode == nodeData[1].source) {\\n    nodeToConnect = nodeData[1].target;\\n  } else {\\n    nodeToConnect = nodeData[1].source;\\n  }\\n  var startGridX = nodeToConnect.startX;\\n  var finishGridX = nodeToConnect.finishX;\\n  var startGridY = nodeToConnect.startY;\\n  var finishGridY = nodeToConnect.finishY;\\n\\n  var upNodeCount = 0;\\n  var downNodeCount = 0;\\n  var rightNodeCount = 0;\\n  var leftNodeCount = 0;\\n  var controlRegions = [upNodeCount, rightNodeCount, downNodeCount, leftNodeCount];\\n\\n  if (startGridY > 0) {\\n    for (var i = startGridX; i <= finishGridX; i++) {\\n      controlRegions[0] += this.grid[i][startGridY - 1].length + this.grid[i][startGridY].length - 1;\\n    }\\n  }\\n  if (finishGridX < this.grid.length - 1) {\\n    for (var i = startGridY; i <= finishGridY; i++) {\\n      controlRegions[1] += this.grid[finishGridX + 1][i].length + this.grid[finishGridX][i].length - 1;\\n    }\\n  }\\n  if (finishGridY < this.grid[0].length - 1) {\\n    for (var i = startGridX; i <= finishGridX; i++) {\\n      controlRegions[2] += this.grid[i][finishGridY + 1].length + this.grid[i][finishGridY].length - 1;\\n    }\\n  }\\n  if (startGridX > 0) {\\n    for (var i = startGridY; i <= finishGridY; i++) {\\n      controlRegions[3] += this.grid[startGridX - 1][i].length + this.grid[startGridX][i].length - 1;\\n    }\\n  }\\n  var min = Integer.MAX_VALUE;\\n  var minCount;\\n  var minIndex;\\n  for (var j = 0; j < controlRegions.length; j++) {\\n    if (controlRegions[j] < min) {\\n      min = controlRegions[j];\\n      minCount = 1;\\n      minIndex = j;\\n    } else if (controlRegions[j] == min) {\\n      minCount++;\\n    }\\n  }\\n\\n  if (minCount == 3 && min == 0) {\\n    if (controlRegions[0] == 0 && controlRegions[1] == 0 && controlRegions[2] == 0) {\\n      gridForPrunedNode = 1;\\n    } else if (controlRegions[0] == 0 && controlRegions[1] == 0 && controlRegions[3] == 0) {\\n      gridForPrunedNode = 0;\\n    } else if (controlRegions[0] == 0 && controlRegions[2] == 0 && controlRegions[3] == 0) {\\n      gridForPrunedNode = 3;\\n    } else if (controlRegions[1] == 0 && controlRegions[2] == 0 && controlRegions[3] == 0) {\\n      gridForPrunedNode = 2;\\n    }\\n  } else if (minCount == 2 && min == 0) {\\n    var random = Math.floor(Math.random() * 2);\\n    if (controlRegions[0] == 0 && controlRegions[1] == 0) {\\n      ;\\n      if (random == 0) {\\n        gridForPrunedNode = 0;\\n      } else {\\n        gridForPrunedNode = 1;\\n      }\\n    } else if (controlRegions[0] == 0 && controlRegions[2] == 0) {\\n      if (random == 0) {\\n        gridForPrunedNode = 0;\\n      } else {\\n        gridForPrunedNode = 2;\\n      }\\n    } else if (controlRegions[0] == 0 && controlRegions[3] == 0) {\\n      if (random == 0) {\\n        gridForPrunedNode = 0;\\n      } else {\\n        gridForPrunedNode = 3;\\n      }\\n    } else if (controlRegions[1] == 0 && controlRegions[2] == 0) {\\n      if (random == 0) {\\n        gridForPrunedNode = 1;\\n      } else {\\n        gridForPrunedNode = 2;\\n      }\\n    } else if (controlRegions[1] == 0 && controlRegions[3] == 0) {\\n      if (random == 0) {\\n        gridForPrunedNode = 1;\\n      } else {\\n        gridForPrunedNode = 3;\\n      }\\n    } else {\\n      if (random == 0) {\\n        gridForPrunedNode = 2;\\n      } else {\\n        gridForPrunedNode = 3;\\n      }\\n    }\\n  } else if (minCount == 4 && min == 0) {\\n    var random = Math.floor(Math.random() * 4);\\n    gridForPrunedNode = random;\\n  } else {\\n    gridForPrunedNode = minIndex;\\n  }\\n\\n  if (gridForPrunedNode == 0) {\\n    prunedNode.setCenter(nodeToConnect.getCenterX(), nodeToConnect.getCenterY() - nodeToConnect.getHeight() / 2 - FDLayoutConstants.DEFAULT_EDGE_LENGTH - prunedNode.getHeight() / 2);\\n  } else if (gridForPrunedNode == 1) {\\n    prunedNode.setCenter(nodeToConnect.getCenterX() + nodeToConnect.getWidth() / 2 + FDLayoutConstants.DEFAULT_EDGE_LENGTH + prunedNode.getWidth() / 2, nodeToConnect.getCenterY());\\n  } else if (gridForPrunedNode == 2) {\\n    prunedNode.setCenter(nodeToConnect.getCenterX(), nodeToConnect.getCenterY() + nodeToConnect.getHeight() / 2 + FDLayoutConstants.DEFAULT_EDGE_LENGTH + prunedNode.getHeight() / 2);\\n  } else {\\n    prunedNode.setCenter(nodeToConnect.getCenterX() - nodeToConnect.getWidth() / 2 - FDLayoutConstants.DEFAULT_EDGE_LENGTH - prunedNode.getWidth() / 2, nodeToConnect.getCenterY());\\n  }\\n};\\n\\nmodule.exports = CoSELayout;\\n\\n/***/ }),\\n/* 7 */\\n/***/ (function(module, exports, __webpack_require__) {\\n\\n\\\"use strict\\\";\\n\\n\\nvar coseBase = {};\\n\\ncoseBase.layoutBase = __webpack_require__(0);\\ncoseBase.CoSEConstants = __webpack_require__(1);\\ncoseBase.CoSEEdge = __webpack_require__(2);\\ncoseBase.CoSEGraph = __webpack_require__(3);\\ncoseBase.CoSEGraphManager = __webpack_require__(4);\\ncoseBase.CoSELayout = __webpack_require__(6);\\ncoseBase.CoSENode = __webpack_require__(5);\\n\\nmodule.exports = coseBase;\\n\\n/***/ })\\n/******/ ]);\\n});\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"webpackUniversalModuleDefinition\",\"root\",\"factory\",\"define\",\"amd\",\"__WEBPACK_EXTERNAL_MODULE_0__\",\"modules\",\"__webpack_require__\",\"moduleId\",\"installedModules\",\"i\",\"l\",\"call\",\"m\",\"c\",\"__webpack_require__.i\",\"value\",\"d\",\"__webpack_require__.d\",\"name\",\"getter\",\"o\",\"Object\",\"defineProperty\",\"configurable\",\"enumerable\",\"get\",\"n\",\"__webpack_require__.n\",\"__esModule\",\"getDefault\",\"getModuleExports\",\"__webpack_require__.o\",\"object\",\"property\",\"prototype\",\"hasOwnProperty\",\"p\",\"s\",\"CoSEConstants\",\"FDLayoutConstants\",\"prop\",\"DEFAULT_USE_MULTI_LEVEL_SCALING\",\"DEFAULT_RADIAL_SEPARATION\",\"DEFAULT_EDGE_LENGTH\",\"DEFAULT_COMPONENT_SEPERATION\",\"TILE\",\"TILING_PADDING_VERTICAL\",\"TILING_PADDING_HORIZONTAL\",\"TREE_REDUCTION_ON_INCREMENTAL\",\"CoSEEdge\",\"source\",\"target\",\"vEdge\",\"FDLayoutEdge\",\"create\",\"CoSEGraph\",\"parent\",\"graphMgr\",\"vGraph\",\"LGraph\",\"CoSEGraphManager\",\"layout\",\"LGraphManager\",\"CoSENode\",\"gm\",\"loc\",\"size\",\"vNode\",\"FDLayoutNode\",\"IMath\",\"move\",\"CoSENode.prototype.move\",\"graphManager\",\"getLayout\",\"displacementX\",\"coolingFactor\",\"springForceX\",\"repulsionForceX\",\"gravitationForceX\",\"noOfChildren\",\"displacementY\",\"springForceY\",\"repulsionForceY\",\"gravitationForceY\",\"Math\",\"abs\",\"maxNodeDisplacement\",\"sign\",\"child\",\"moveBy\",\"getNodes\",\"length\",\"propogateDisplacementToChildren\",\"totalDisplacement\",\"CoSENode.prototype.propogateDisplacementToChildren\",\"dX\",\"dY\",\"nodes\",\"getChild\",\"node\",\"setPred1\",\"CoSENode.prototype.setPred1\",\"pred1\",\"getPred1\",\"CoSENode.prototype.getPred1\",\"getPred2\",\"CoSENode.prototype.getPred2\",\"pred2\",\"setNext\",\"CoSENode.prototype.setNext\",\"next\",\"getNext\",\"CoSENode.prototype.getNext\",\"setProcessed\",\"CoSENode.prototype.setProcessed\",\"processed\",\"isProcessed\",\"CoSENode.prototype.isProcessed\",\"CoSELayout\",\"FDLayout\",\"toBeTiled\",\"LayoutConstants\",\"Point\",\"PointD\",\"Layout\",\"Integer\",\"IGeometry\",\"Transform\",\"newGraphManager\",\"CoSELayout.prototype.newGraphManager\",\"newGraph\",\"CoSELayout.prototype.newGraph\",\"newNode\",\"CoSELayout.prototype.newNode\",\"newEdge\",\"CoSELayout.prototype.newEdge\",\"initParameters\",\"CoSELayout.prototype.initParameters\",\"arguments\",\"isSubLayout\",\"idealEdgeLength\",\"useSmartIdealEdgeLengthCalculation\",\"DEFAULT_USE_SMART_IDEAL_EDGE_LENGTH_CALCULATION\",\"springConstant\",\"DEFAULT_SPRING_STRENGTH\",\"repulsionConstant\",\"DEFAULT_REPULSION_STRENGTH\",\"gravityConstant\",\"DEFAULT_GRAVITY_STRENGTH\",\"compoundGravityConstant\",\"DEFAULT_COMPOUND_GRAVITY_STRENGTH\",\"gravityRangeFactor\",\"DEFAULT_GRAVITY_RANGE_FACTOR\",\"compoundGravityRangeFactor\",\"DEFAULT_COMPOUND_GRAVITY_RANGE_FACTOR\",\"prunedNodesAll\",\"afterGrowthIterations\",\"growTreeIterations\",\"isGrowthFinished\",\"isTreeGrowing\",\"coolingCycle\",\"maxCoolingCycle\",\"maxIterations\",\"CONVERGENCE_CHECK_PERIOD\",\"finalTemperature\",\"coolingAdjuster\",\"CoSELayout.prototype.layout\",\"DEFAULT_CREATE_BENDS_AS_NEEDED\",\"createBendpoints\",\"resetAllEdges\",\"level\",\"classicLayout\",\"CoSELayout.prototype.classicLayout\",\"nodesWithGravity\",\"calculateNodesToApplyGravitationTo\",\"setAllNodesToApplyGravitation\",\"calcNoOfChildrenForAllNodes\",\"calcLowestCommonAncestors\",\"calcInclusionTreeDepths\",\"getRoot\",\"calcEstimatedSize\",\"calcIdealEdgeLengths\",\"incremental\",\"reduceTrees\",\"resetAllNodesToApplyGravitation\",\"allNodes\",\"Set\",\"getAllNodes\",\"intersection\",\"filter\",\"x\",\"has\",\"forest\",\"getFlatForest\",\"positionNodesRadially\",\"positionNodesRandomly\",\"initSpringEmbedder\",\"runSpringEmbedder\",\"tick\",\"CoSELayout.prototype.tick\",\"totalIterations\",\"isConverged\",\"layoutQuality\",\"max\",\"initialCoolingFactor\",\"pow\",\"log\",\"animationPeriod\",\"ceil\",\"initialAnimationPeriod\",\"sqrt\",\"updateBounds\",\"updateGrid\",\"growTree\",\"DEFAULT_COOLING_FACTOR_INCREMENTAL\",\"gridUpdateAllowed\",\"forceToNodeSurroundingUpdate\",\"calcSpringForces\",\"calcRepulsionForces\",\"calcGravitationalForces\",\"moveNodes\",\"animate\",\"getPositionsData\",\"CoSELayout.prototype.getPositionsData\",\"pData\",\"rect\",\"id\",\"getCenterX\",\"y\",\"getCenterY\",\"w\",\"width\",\"h\",\"height\",\"CoSELayout.prototype.runSpringEmbedder\",\"layoutEnded\",\"ANIMATE\",\"emit\",\"CoSELayout.prototype.calculateNodesToApplyGravitationTo\",\"nodeList\",\"graphs\",\"getGraphs\",\"graph\",\"updateConnected\",\"isConnected\",\"concat\",\"CoSELayout.prototype.createBendpoints\",\"edges\",\"getAllEdges\",\"visited\",\"edge\",\"getSource\",\"getTarget\",\"getBendpoints\",\"push\",\"createDummyNodesForBendpoints\",\"add\",\"edgeList\",\"getEdgeListToNode\",\"k\",\"multiEdge\",\"forEach\",\"CoSELayout.prototype.positionNodesRadially\",\"currentStartingPoint\",\"numberOfColumns\",\"currentY\",\"currentX\",\"point\",\"tree\",\"centerNode\",\"findCenterOfTree\",\"radialLayout\",\"floor\",\"transform\",\"WORLD_CENTER_X\",\"WORLD_CENTER_Y\",\"CoSELayout.radialLayout\",\"startingPoint\",\"radialSep\",\"maxDiagonalInTree\",\"branchRadialLayout\",\"bounds\",\"calculateBounds\",\"setDeviceOrgX\",\"getMinX\",\"setDeviceOrgY\",\"getMinY\",\"setWorldOrgX\",\"setWorldOrgY\",\"bottomRight\",\"getMaxX\",\"getMaxY\",\"inverseTransformPoint\",\"CoSELayout.branchRadialLayout\",\"parentOfNode\",\"startAngle\",\"endAngle\",\"distance\",\"radialSeparation\",\"halfInterval\",\"teta\",\"TWO_PI\",\"setCenter\",\"cos\",\"sin\",\"neighborEdges\",\"getEdges\",\"childCount\",\"branchCount\",\"incEdgesCount\",\"startIndex\",\"getEdgesBetween\",\"temp\",\"splice\",\"index\",\"indexOf\",\"stepAngle\",\"currentNeighbor\",\"getOtherEnd\",\"childStartAngle\",\"CoSELayout.maxDiagonalInTree\",\"maxDiagonal\",\"MIN_VALUE\",\"diagonal\",\"getDiagonal\",\"calcRepulsionRange\",\"CoSELayout.prototype.calcRepulsionRange\",\"groupZeroDegreeMembers\",\"CoSELayout.prototype.groupZeroDegreeMembers\",\"self\",\"tempMemberGroups\",\"memberGroups\",\"idToDummyNode\",\"zeroDegree\",\"getParent\",\"getNodeDegreeWithChildren\",\"undefined\",\"getToBeTiled\",\"p_id\",\"keys\",\"dummyCompoundId\",\"dummyCompound\",\"paddingLeft\",\"paddingRight\",\"paddingBottom\",\"paddingTop\",\"dummyParentGraph\",\"getGraphManager\",\"parentGraph\",\"remove\",\"clearCompounds\",\"CoSELayout.prototype.clearCompounds\",\"childGraphMap\",\"idToNode\",\"performDFSOnCompounds\",\"compoundOrder\",\"resetAllNodes\",\"tileCompoundMembers\",\"clearZeroDegreeMembers\",\"CoSELayout.prototype.clearZeroDegreeMembers\",\"tiledZeroDegreePack\",\"compoundNode\",\"tileNodes\",\"repopulateCompounds\",\"CoSELayout.prototype.repopulateCompounds\",\"lCompoundNode\",\"adjustLocations\",\"tiledMemberPack\",\"repopulateZeroDegreeMembers\",\"CoSELayout.prototype.repopulateZeroDegreeMembers\",\"tiledPack\",\"CoSELayout.prototype.getToBeTiled\",\"childGraph\",\"children\",\"theChild\",\"getNodeDegree\",\"CoSELayout.prototype.getNodeDegree\",\"degree\",\"CoSELayout.prototype.getNodeDegreeWithChildren\",\"CoSELayout.prototype.performDFSOnCompounds\",\"fillCompexOrderByDFS\",\"CoSELayout.prototype.fillCompexOrderByDFS\",\"CoSELayout.prototype.adjustLocations\",\"organization\",\"compoundHorizontalMargin\",\"compoundVerticalMargin\",\"left\",\"rows\",\"row\",\"maxHeight\",\"j\",\"lnode\",\"horizontalPadding\",\"verticalPadding\",\"CoSELayout.prototype.tileCompoundMembers\",\"CoSELayout.prototype.tileNodes\",\"minWidth\",\"rowWidth\",\"rowHeight\",\"sort\",\"n1\",\"n2\",\"lNode\",\"insertNodeToRow\",\"canAddHorizontal\",\"getShortestRowIndex\",\"shiftToLastRow\",\"CoSELayout.prototype.insertNodeToRow\",\"rowIndex\",\"secondDimension\",\"extraHeight\",\"CoSELayout.prototype.getShortestRowIndex\",\"r\",\"min\",\"Number\",\"MAX_VALUE\",\"getLongestRowIndex\",\"CoSELayout.prototype.getLongestRowIndex\",\"CoSELayout.prototype.canAddHorizontal\",\"extraWidth\",\"sri\",\"hDiff\",\"add_to_row_ratio\",\"add_new_row_ratio\",\"CoSELayout.prototype.shiftToLastRow\",\"longest\",\"last\",\"diff\",\"instance\",\"prevTotal\",\"tilingPreLayout\",\"CoSELayout.prototype.tilingPreLayout\",\"tilingPostLayout\",\"CoSELayout.prototype.tilingPostLayout\",\"CoSELayout.prototype.reduceTrees\",\"containsLeaf\",\"prunedNodesInStepTemp\",\"isInterGraph\",\"getOwner\",\"prunedNodesInStep\",\"CoSELayout.prototype.growTree\",\"nodeData\",\"findPlaceforPrunedNode\",\"CoSELayout.prototype.findPlaceforPrunedNode\",\"gridForPrunedNode\",\"prunedNode\",\"nodeToConnect\",\"startGridX\",\"startX\",\"finishGridX\",\"finishX\",\"startGridY\",\"startY\",\"finishGridY\",\"finishY\",\"controlRegions\",\"upNodeCount\",\"rightNodeCount\",\"downNodeCount\",\"leftNodeCount\",\"grid\",\"minCount\",\"minIndex\",\"random\",\"getHeight\",\"getWidth\",\"coseBase\",\"layoutBase\"]\n}\n"]