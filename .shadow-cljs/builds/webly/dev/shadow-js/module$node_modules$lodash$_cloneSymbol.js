["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/lodash/_cloneSymbol.js"],"~:js","shadow$provide.module$node_modules$lodash$_cloneSymbol=function(global,require,module,exports){var symbolValueOf=(global=(global=require(\"module$node_modules$lodash$_Symbol\"))?global.prototype:void 0)?global.valueOf:void 0;module.exports=function(symbol){return symbolValueOf?Object(symbolValueOf.call(symbol)):{}}}","~:source","shadow$provide[\"module$node_modules$lodash$_cloneSymbol\"] = function(global,require,module,exports) {\nvar Symbol = require('./_Symbol');\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\n\n/**\n * Creates a clone of the `symbol` object.\n *\n * @private\n * @param {Object} symbol The symbol object to clone.\n * @returns {Object} Returns the cloned symbol object.\n */\nfunction cloneSymbol(symbol) {\n  return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};\n}\n\nmodule.exports = cloneSymbol;\n\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$lodash$_Symbol"]],"~:properties",["^5",[]],"~:compiled-at",1621210442061,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$lodash$_cloneSymbol.js\",\n\"lineCount\":1,\n\"mappings\":\"AAAAA,cAAA,CAAA,uCAAA,CAA4D,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAIpG,IACIC,cAAgB,CADhBC,MACgB,CADF,CAHdC,MAGc,CAHLL,OAAA,CAAQ,oCAAR,CAGK,EAASK,MAAOC,CAAAA,SAAhB,CAA4BC,IAAAA,EAC1B,EAAcH,MAAYI,CAAAA,OAA1B,CAAoCD,IAAAA,EAaxDN,OAAOC,CAAAA,OAAP,CAJAO,QAAoB,CAACC,MAAD,CAAS,CAC3B,MAAOP,cAAA,CAAgBQ,MAAA,CAAOR,aAAcS,CAAAA,IAAd,CAAmBF,MAAnB,CAAP,CAAhB,CAAqD,EADjC,CAduE;\",\n\"sources\":[\"node_modules/lodash/_cloneSymbol.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$lodash$_cloneSymbol\\\"] = function(global,require,module,exports) {\\nvar Symbol = require('./_Symbol');\\n\\n/** Used to convert symbols to primitives and strings. */\\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\\n\\n/**\\n * Creates a clone of the `symbol` object.\\n *\\n * @private\\n * @param {Object} symbol The symbol object to clone.\\n * @returns {Object} Returns the cloned symbol object.\\n */\\nfunction cloneSymbol(symbol) {\\n  return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};\\n}\\n\\nmodule.exports = cloneSymbol;\\n\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"symbolValueOf\",\"symbolProto\",\"Symbol\",\"prototype\",\"undefined\",\"valueOf\",\"cloneSymbol\",\"symbol\",\"Object\",\"call\"]\n}\n"]