["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/highlight_DOT_js/lib/languages/abnf.js"],"~:js","shadow$provide.module$node_modules$highlight_DOT_js$lib$languages$abnf=function(global,require,module,exports){function concat(...args){return args.map(x=>{x=x?\"string\"===typeof x?x:x.source:null;return x}).join(\"\")}module.exports=function(hljs){const commentMode=hljs.COMMENT(/;/,/$/);return{name:\"Augmented Backus-Naur Form\",illegal:/[!@#$^&',?+~`|:]/,keywords:\"ALPHA BIT CHAR CR CRLF CTL DIGIT DQUOTE HEXDIG HTAB LF LWSP OCTET SP VCHAR WSP\".split(\" \"),contains:[{className:\"attribute\",begin:concat(/^[a-zA-Z][a-zA-Z0-9-]*/,\n/(?=\\s*=)/)},commentMode,{className:\"symbol\",begin:/%b[0-1]+(-[0-1]+|(\\.[0-1]+)+){0,1}/},{className:\"symbol\",begin:/%d[0-9]+(-[0-9]+|(\\.[0-9]+)+){0,1}/},{className:\"symbol\",begin:/%x[0-9A-F]+(-[0-9A-F]+|(\\.[0-9A-F]+)+){0,1}/},{className:\"symbol\",begin:/%[si]/},hljs.QUOTE_STRING_MODE,hljs.NUMBER_MODE]}}}","~:source","shadow$provide[\"module$node_modules$highlight_DOT_js$lib$languages$abnf\"] = function(global,require,module,exports) {\n/**\n * @param {string} value\n * @returns {RegExp}\n * */\n\n/**\n * @param {RegExp | string } re\n * @returns {string}\n */\nfunction source(re) {\n  if (!re) return null;\n  if (typeof re === \"string\") return re;\n\n  return re.source;\n}\n\n/**\n * @param {...(RegExp | string) } args\n * @returns {string}\n */\nfunction concat(...args) {\n  const joined = args.map((x) => source(x)).join(\"\");\n  return joined;\n}\n\n/*\nLanguage: Augmented Backus-Naur Form\nAuthor: Alex McKibben <alex@nullscope.net>\nWebsite: https://tools.ietf.org/html/rfc5234\nAudit: 2020\n*/\n\n/** @type LanguageFn */\nfunction abnf(hljs) {\n  const regexes = {\n    ruleDeclaration: /^[a-zA-Z][a-zA-Z0-9-]*/,\n    unexpectedChars: /[!@#$^&',?+~`|:]/\n  };\n\n  const keywords = [\n    \"ALPHA\",\n    \"BIT\",\n    \"CHAR\",\n    \"CR\",\n    \"CRLF\",\n    \"CTL\",\n    \"DIGIT\",\n    \"DQUOTE\",\n    \"HEXDIG\",\n    \"HTAB\",\n    \"LF\",\n    \"LWSP\",\n    \"OCTET\",\n    \"SP\",\n    \"VCHAR\",\n    \"WSP\"\n  ];\n\n  const commentMode = hljs.COMMENT(/;/, /$/);\n\n  const terminalBinaryMode = {\n    className: \"symbol\",\n    begin: /%b[0-1]+(-[0-1]+|(\\.[0-1]+)+){0,1}/\n  };\n\n  const terminalDecimalMode = {\n    className: \"symbol\",\n    begin: /%d[0-9]+(-[0-9]+|(\\.[0-9]+)+){0,1}/\n  };\n\n  const terminalHexadecimalMode = {\n    className: \"symbol\",\n    begin: /%x[0-9A-F]+(-[0-9A-F]+|(\\.[0-9A-F]+)+){0,1}/\n  };\n\n  const caseSensitivityIndicatorMode = {\n    className: \"symbol\",\n    begin: /%[si]/\n  };\n\n  const ruleDeclarationMode = {\n    className: \"attribute\",\n    begin: concat(regexes.ruleDeclaration, /(?=\\s*=)/)\n  };\n\n  return {\n    name: 'Augmented Backus-Naur Form',\n    illegal: regexes.unexpectedChars,\n    keywords: keywords,\n    contains: [\n      ruleDeclarationMode,\n      commentMode,\n      terminalBinaryMode,\n      terminalDecimalMode,\n      terminalHexadecimalMode,\n      caseSensitivityIndicatorMode,\n      hljs.QUOTE_STRING_MODE,\n      hljs.NUMBER_MODE\n    ]\n  };\n}\n\nmodule.exports = abnf;\n\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js"]],"~:properties",["^5",["begin","className","contains","name","keywords","illegal"]],"~:compiled-at",1621210441135,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$highlight_DOT_js$lib$languages$abnf.js\",\n\"lineCount\":2,\n\"mappings\":\"AAAAA,cAAA,CAAA,uDAAA,CAA4E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAqBpHC,QAASA,OAAM,CAAC,GAAGC,IAAJ,CAAU,CAEvB,MADeA,KAAKC,CAAAA,GAAL,CAAUC,CAAD,EAAO,CAVH,CAAA,CAUUA,CAXtC,CACkB,QAAlB,GAAI,MAUkCA,EAVtC,CAUsCA,CAVtC,CAUsCA,CAR5BC,CAAAA,MAHV,CAAgB,IAWe,OAAA,EAAA,CAAhB,CAA2BC,CAAAA,IAA3BC,CAAgC,EAAhCA,CADQ,CAkFzBR,MAAOC,CAAAA,OAAP,CArEAQ,QAAa,CAACC,IAAD,CAAO,CAyBlB,MAAMC,YAAcD,IAAKE,CAAAA,OAAL,CAAa,GAAb,CAAkB,GAAlB,CA2BpB,OAAO,CACLC,KAAM,4BADD,CAELC,QAnDiBC,kBAiDZ,CAGLC,SAjDeA,gFAAAA,CAAAA,KAAAA,CAAAA,GAAAA,CA8CV,CAILC,SAAU,CATgBC,CAC1BC,UAAW,WADeD,CAE1BE,MAAOlB,MAAA,CA/CUmB,wBA+CV;AAAgC,UAAhC,CAFmBH,CAShB,CAERP,WAFQ,CA7BeW,CACzBH,UAAW,QADcG,CAEzBF,MAAO,oCAFkBE,CA6Bf,CAxBgBC,CAC1BJ,UAAW,QADeI,CAE1BH,MAAO,oCAFmBG,CAwBhB,CAnBoBC,CAC9BL,UAAW,QADmBK,CAE9BJ,MAAO,6CAFuBI,CAmBpB,CAdyBC,CACnCN,UAAW,QADwBM,CAEnCL,MAAO,OAF4BK,CAczB,CAORf,IAAKgB,CAAAA,iBAPG,CAQRhB,IAAKiB,CAAAA,WARG,CAJL,CApDW,CAlCgG;\",\n\"sources\":[\"node_modules/highlight_DOT_js/lib/languages/abnf.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$highlight_DOT_js$lib$languages$abnf\\\"] = function(global,require,module,exports) {\\n/**\\n * @param {string} value\\n * @returns {RegExp}\\n * */\\n\\n/**\\n * @param {RegExp | string } re\\n * @returns {string}\\n */\\nfunction source(re) {\\n  if (!re) return null;\\n  if (typeof re === \\\"string\\\") return re;\\n\\n  return re.source;\\n}\\n\\n/**\\n * @param {...(RegExp | string) } args\\n * @returns {string}\\n */\\nfunction concat(...args) {\\n  const joined = args.map((x) => source(x)).join(\\\"\\\");\\n  return joined;\\n}\\n\\n/*\\nLanguage: Augmented Backus-Naur Form\\nAuthor: Alex McKibben <alex@nullscope.net>\\nWebsite: https://tools.ietf.org/html/rfc5234\\nAudit: 2020\\n*/\\n\\n/** @type LanguageFn */\\nfunction abnf(hljs) {\\n  const regexes = {\\n    ruleDeclaration: /^[a-zA-Z][a-zA-Z0-9-]*/,\\n    unexpectedChars: /[!@#$^&',?+~`|:]/\\n  };\\n\\n  const keywords = [\\n    \\\"ALPHA\\\",\\n    \\\"BIT\\\",\\n    \\\"CHAR\\\",\\n    \\\"CR\\\",\\n    \\\"CRLF\\\",\\n    \\\"CTL\\\",\\n    \\\"DIGIT\\\",\\n    \\\"DQUOTE\\\",\\n    \\\"HEXDIG\\\",\\n    \\\"HTAB\\\",\\n    \\\"LF\\\",\\n    \\\"LWSP\\\",\\n    \\\"OCTET\\\",\\n    \\\"SP\\\",\\n    \\\"VCHAR\\\",\\n    \\\"WSP\\\"\\n  ];\\n\\n  const commentMode = hljs.COMMENT(/;/, /$/);\\n\\n  const terminalBinaryMode = {\\n    className: \\\"symbol\\\",\\n    begin: /%b[0-1]+(-[0-1]+|(\\\\.[0-1]+)+){0,1}/\\n  };\\n\\n  const terminalDecimalMode = {\\n    className: \\\"symbol\\\",\\n    begin: /%d[0-9]+(-[0-9]+|(\\\\.[0-9]+)+){0,1}/\\n  };\\n\\n  const terminalHexadecimalMode = {\\n    className: \\\"symbol\\\",\\n    begin: /%x[0-9A-F]+(-[0-9A-F]+|(\\\\.[0-9A-F]+)+){0,1}/\\n  };\\n\\n  const caseSensitivityIndicatorMode = {\\n    className: \\\"symbol\\\",\\n    begin: /%[si]/\\n  };\\n\\n  const ruleDeclarationMode = {\\n    className: \\\"attribute\\\",\\n    begin: concat(regexes.ruleDeclaration, /(?=\\\\s*=)/)\\n  };\\n\\n  return {\\n    name: 'Augmented Backus-Naur Form',\\n    illegal: regexes.unexpectedChars,\\n    keywords: keywords,\\n    contains: [\\n      ruleDeclarationMode,\\n      commentMode,\\n      terminalBinaryMode,\\n      terminalDecimalMode,\\n      terminalHexadecimalMode,\\n      caseSensitivityIndicatorMode,\\n      hljs.QUOTE_STRING_MODE,\\n      hljs.NUMBER_MODE\\n    ]\\n  };\\n}\\n\\nmodule.exports = abnf;\\n\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"concat\",\"args\",\"map\",\"x\",\"source\",\"join\",\"joined\",\"abnf\",\"hljs\",\"commentMode\",\"COMMENT\",\"name\",\"illegal\",\"unexpectedChars\",\"keywords\",\"contains\",\"ruleDeclarationMode\",\"className\",\"begin\",\"ruleDeclaration\",\"terminalBinaryMode\",\"terminalDecimalMode\",\"terminalHexadecimalMode\",\"caseSensitivityIndicatorMode\",\"QUOTE_STRING_MODE\",\"NUMBER_MODE\"]\n}\n"]