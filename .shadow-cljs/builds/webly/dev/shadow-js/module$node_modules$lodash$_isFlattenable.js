["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/lodash/_isFlattenable.js"],"~:js","shadow$provide.module$node_modules$lodash$_isFlattenable=function(global,require,module,exports){global=require(\"module$node_modules$lodash$_Symbol\");var isArguments=require(\"module$node_modules$lodash$isArguments\"),isArray=require(\"module$node_modules$lodash$isArray\"),spreadableSymbol=global?global.isConcatSpreadable:void 0;module.exports=function(value){return isArray(value)||isArguments(value)||!!(spreadableSymbol&&value&&value[spreadableSymbol])}}","~:source","shadow$provide[\"module$node_modules$lodash$_isFlattenable\"] = function(global,require,module,exports) {\nvar Symbol = require('./_Symbol'),\n    isArguments = require('./isArguments'),\n    isArray = require('./isArray');\n\n/** Built-in value references. */\nvar spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined;\n\n/**\n * Checks if `value` is a flattenable `arguments` object or array.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.\n */\nfunction isFlattenable(value) {\n  return isArray(value) || isArguments(value) ||\n    !!(spreadableSymbol && value && value[spreadableSymbol]);\n}\n\nmodule.exports = isFlattenable;\n\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$lodash$isArguments","~$shadow.js","~$module$node_modules$lodash$_Symbol","~$module$node_modules$lodash$isArray"]],"~:properties",["^5",[]],"~:compiled-at",1621210442086,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$lodash$_isFlattenable.js\",\n\"lineCount\":1,\n\"mappings\":\"AAAAA,cAAA,CAAA,yCAAA,CAA8D,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAClGC,MAAAA,CAASH,OAAA,CAAQ,oCAAR,CADyF,KAElGI,YAAcJ,OAAA,CAAQ,wCAAR,CAFoF,CAGlGK,QAAUL,OAAA,CAAQ,oCAAR,CAHwF,CAMlGM,iBAAmBH,MAAA,CAASA,MAAOI,CAAAA,kBAAhB,CAAqCC,IAAAA,EAc5DP,OAAOC,CAAAA,OAAP,CALAO,QAAsB,CAACC,KAAD,CAAQ,CAC5B,MAAOL,QAAA,CAAQK,KAAR,CAAP,EAAyBN,WAAA,CAAYM,KAAZ,CAAzB,EACE,CAAC,EAAEJ,gBAAF,EAAsBI,KAAtB,EAA+BA,KAAA,CAAMJ,gBAAN,CAA/B,CAFyB,CAfwE;\",\n\"sources\":[\"node_modules/lodash/_isFlattenable.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$lodash$_isFlattenable\\\"] = function(global,require,module,exports) {\\nvar Symbol = require('./_Symbol'),\\n    isArguments = require('./isArguments'),\\n    isArray = require('./isArray');\\n\\n/** Built-in value references. */\\nvar spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined;\\n\\n/**\\n * Checks if `value` is a flattenable `arguments` object or array.\\n *\\n * @private\\n * @param {*} value The value to check.\\n * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.\\n */\\nfunction isFlattenable(value) {\\n  return isArray(value) || isArguments(value) ||\\n    !!(spreadableSymbol && value && value[spreadableSymbol]);\\n}\\n\\nmodule.exports = isFlattenable;\\n\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Symbol\",\"isArguments\",\"isArray\",\"spreadableSymbol\",\"isConcatSpreadable\",\"undefined\",\"isFlattenable\",\"value\"]\n}\n"]