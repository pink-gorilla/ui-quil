["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/lodash/zipObject.js"],"~:js","shadow$provide.module$node_modules$lodash$zipObject=function(global,require,module,exports){var assignValue=require(\"module$node_modules$lodash$_assignValue\"),baseZipObject=require(\"module$node_modules$lodash$_baseZipObject\");module.exports=function(props,values){return baseZipObject(props||[],values||[],assignValue)}}","~:source","shadow$provide[\"module$node_modules$lodash$zipObject\"] = function(global,require,module,exports) {\nvar assignValue = require('./_assignValue'),\n    baseZipObject = require('./_baseZipObject');\n\n/**\n * This method is like `_.fromPairs` except that it accepts two arrays,\n * one of property identifiers and one of corresponding values.\n *\n * @static\n * @memberOf _\n * @since 0.4.0\n * @category Array\n * @param {Array} [props=[]] The property identifiers.\n * @param {Array} [values=[]] The property values.\n * @returns {Object} Returns the new object.\n * @example\n *\n * _.zipObject(['a', 'b'], [1, 2]);\n * // => { 'a': 1, 'b': 2 }\n */\nfunction zipObject(props, values) {\n  return baseZipObject(props || [], values || [], assignValue);\n}\n\nmodule.exports = zipObject;\n\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$lodash$_assignValue","~$module$node_modules$lodash$_baseZipObject"]],"~:properties",["^5",[]],"~:compiled-at",1621210442115,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$lodash$zipObject.js\",\n\"lineCount\":1,\n\"mappings\":\"AAAAA,cAAA,CAAA,oCAAA,CAAyD,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAAA,IAC7FC,YAAcH,OAAA,CAAQ,yCAAR,CAD+E,CAE7FI,cAAgBJ,OAAA,CAAQ,2CAAR,CAsBpBC,OAAOC,CAAAA,OAAP,CAJAG,QAAkB,CAACC,KAAD,CAAQC,MAAR,CAAgB,CAChC,MAAOH,cAAA,CAAcE,KAAd,EAAuB,EAAvB,CAA2BC,MAA3B,EAAqC,EAArC,CAAyCJ,WAAzC,CADyB,CApB+D;\",\n\"sources\":[\"node_modules/lodash/zipObject.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$lodash$zipObject\\\"] = function(global,require,module,exports) {\\nvar assignValue = require('./_assignValue'),\\n    baseZipObject = require('./_baseZipObject');\\n\\n/**\\n * This method is like `_.fromPairs` except that it accepts two arrays,\\n * one of property identifiers and one of corresponding values.\\n *\\n * @static\\n * @memberOf _\\n * @since 0.4.0\\n * @category Array\\n * @param {Array} [props=[]] The property identifiers.\\n * @param {Array} [values=[]] The property values.\\n * @returns {Object} Returns the new object.\\n * @example\\n *\\n * _.zipObject(['a', 'b'], [1, 2]);\\n * // => { 'a': 1, 'b': 2 }\\n */\\nfunction zipObject(props, values) {\\n  return baseZipObject(props || [], values || [], assignValue);\\n}\\n\\nmodule.exports = zipObject;\\n\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"assignValue\",\"baseZipObject\",\"zipObject\",\"props\",\"values\"]\n}\n"]