["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/highlight_DOT_js/lib/languages/cpp.js"],"~:js","shadow$provide.module$node_modules$highlight_DOT_js$lib$languages$cpp=function(global,require,module,exports){function concat(...args){return args.map(x=>{x=x?\"string\"===typeof x?x:x.source:null;return x}).join(\"\")}module.exports=function(hljs){const C_LINE_COMMENT_MODE=hljs.COMMENT(\"//\",\"$\",{contains:[{begin:/\\\\\\n/}]}),FUNCTION_TYPE_RE=\"(decltype\\\\(auto\\\\)|\"+concat(\"(\",\"[a-zA-Z_]\\\\w*::\",\")?\")+\"[a-zA-Z_]\\\\w*\"+concat(\"(\",\"\\x3c[^\\x3c\\x3e]+\\x3e\",\")?\")+\")\",CPP_PRIMITIVE_TYPES={className:\"keyword\",begin:\"\\\\b[a-z\\\\d_]*_t\\\\b\"},\nSTRINGS={className:\"string\",variants:[{begin:'(u8?|U|L)?\"',end:'\"',illegal:\"\\\\n\",contains:[hljs.BACKSLASH_ESCAPE]},{begin:\"(u8?|U|L)?'(\\\\\\\\(x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4,8}|[0-7]{3}|\\\\S)|.)\",end:\"'\",illegal:\".\"},hljs.END_SAME_AS_BEGIN({begin:/(?:u8?|U|L)?R\"([^()\\\\ ]{0,16})\\(/,end:/\\)([^()\\\\ ]{0,16})\"/})]},NUMBERS={className:\"number\",variants:[{begin:\"\\\\b(0b[01']+)\"},{begin:\"(-?)\\\\b([\\\\d']+(\\\\.[\\\\d']*)?|\\\\.[\\\\d']+)((ll|LL|l|L)(u|U)?|(u|U)(ll|LL|l|L)?|f|F|b|B)\"},{begin:\"(-?)(\\\\b0[xX][a-fA-F0-9']+|(\\\\b[\\\\d']+(\\\\.[\\\\d']*)?|\\\\.[\\\\d']+)([eE][-+]?[\\\\d']+)?)\"}],\nrelevance:0},PREPROCESSOR={className:\"meta\",begin:/#\\s*[a-z]+\\b/,end:/$/,keywords:{\"meta-keyword\":\"if else elif endif define undef warning error line pragma _Pragma ifdef ifndef include\"},contains:[{begin:/\\\\\\n/,relevance:0},hljs.inherit(STRINGS,{className:\"meta-string\"}),{className:\"meta-string\",begin:/<.*?>/},C_LINE_COMMENT_MODE,hljs.C_BLOCK_COMMENT_MODE]},TITLE_MODE={className:\"title\",begin:concat(\"(\",\"[a-zA-Z_]\\\\w*::\",\")?\")+hljs.IDENT_RE,relevance:0},FUNCTION_TITLE=concat(\"(\",\"[a-zA-Z_]\\\\w*::\",\n\")?\")+hljs.IDENT_RE+\"\\\\s*\\\\(\",CPP_KEYWORDS={keyword:\"int float while private char char8_t char16_t char32_t catch import module export virtual operator sizeof dynamic_cast|10 typedef const_cast|10 const for static_cast|10 union namespace unsigned long volatile static protected bool template mutable if public friend do goto auto void enum else break extern using asm case typeid wchar_t short reinterpret_cast|10 default double register explicit signed typename try this switch continue inline delete alignas alignof constexpr consteval constinit decltype concept co_await co_return co_yield requires noexcept static_assert thread_local restrict final override atomic_bool atomic_char atomic_schar atomic_uchar atomic_short atomic_ushort atomic_int atomic_uint atomic_long atomic_ulong atomic_llong atomic_ullong new throw return and and_eq bitand bitor compl not not_eq or or_eq xor xor_eq\",\nbuilt_in:\"_Bool _Complex _Imaginary\",_relevance_hints:\"asin atan2 atan calloc ceil cosh cos exit exp fabs floor fmod fprintf fputs free frexp auto_ptr deque list queue stack vector map set pair bitset multiset multimap unordered_set fscanf future isalnum isalpha iscntrl isdigit isgraph islower isprint ispunct isspace isupper isxdigit tolower toupper labs ldexp log10 log malloc realloc memchr memcmp memcpy memset modf pow printf putchar puts scanf sinh sin snprintf sprintf sqrt sscanf strcat strchr strcmp strcpy strcspn strlen strncat strncmp strncpy strpbrk strrchr strspn strstr tanh tan unordered_map unordered_multiset unordered_multimap priority_queue make_pair array shared_ptr abort terminate abs acos vfprintf vprintf vsprintf endl initializer_list unique_ptr complex imaginary std string wstring cin cout cerr clog stdin stdout stderr stringstream istringstream ostringstream\".split(\" \"),\nliteral:\"true false nullptr NULL\"},FUNCTION_DISPATCH={className:\"function.dispatch\",relevance:0,keywords:CPP_KEYWORDS,begin:concat(/\\b/,/(?!decltype)/,/(?!if)/,/(?!for)/,/(?!while)/,hljs.IDENT_RE,concat(\"(?\\x3d\",/\\s*\\(/,\")\"))},EXPRESSION_CONTAINS=[FUNCTION_DISPATCH,PREPROCESSOR,CPP_PRIMITIVE_TYPES,C_LINE_COMMENT_MODE,hljs.C_BLOCK_COMMENT_MODE,NUMBERS,STRINGS],EXPRESSION_CONTEXT={variants:[{begin:/=/,end:/;/},{begin:/\\(/,end:/\\)/},{beginKeywords:\"new throw return else\",end:/;/}],keywords:CPP_KEYWORDS,\ncontains:EXPRESSION_CONTAINS.concat([{begin:/\\(/,end:/\\)/,keywords:CPP_KEYWORDS,contains:EXPRESSION_CONTAINS.concat([\"self\"]),relevance:0}]),relevance:0};return{name:\"C++\",aliases:\"cc c++ h++ hpp hh hxx cxx\".split(\" \"),keywords:CPP_KEYWORDS,illegal:\"\\x3c/\",classNameAliases:{\"function.dispatch\":\"built_in\"},contains:[].concat(EXPRESSION_CONTEXT,{className:\"function\",begin:\"(\"+FUNCTION_TYPE_RE+\"[\\\\*\\x26\\\\s]+)+\"+FUNCTION_TITLE,returnBegin:!0,end:/[{;=]/,excludeEnd:!0,keywords:CPP_KEYWORDS,illegal:/[^\\w\\s\\*&:<>.]/,\ncontains:[{begin:\"decltype\\\\(auto\\\\)\",keywords:CPP_KEYWORDS,relevance:0},{begin:FUNCTION_TITLE,returnBegin:!0,contains:[TITLE_MODE],relevance:0},{begin:/::/,relevance:0},{begin:/:/,endsWithParent:!0,contains:[STRINGS,NUMBERS]},{className:\"params\",begin:/\\(/,end:/\\)/,keywords:CPP_KEYWORDS,relevance:0,contains:[C_LINE_COMMENT_MODE,hljs.C_BLOCK_COMMENT_MODE,STRINGS,NUMBERS,CPP_PRIMITIVE_TYPES,{begin:/\\(/,end:/\\)/,keywords:CPP_KEYWORDS,relevance:0,contains:[\"self\",C_LINE_COMMENT_MODE,hljs.C_BLOCK_COMMENT_MODE,\nSTRINGS,NUMBERS,CPP_PRIMITIVE_TYPES]}]},CPP_PRIMITIVE_TYPES,C_LINE_COMMENT_MODE,hljs.C_BLOCK_COMMENT_MODE,PREPROCESSOR]},FUNCTION_DISPATCH,EXPRESSION_CONTAINS,[PREPROCESSOR,{begin:\"\\\\b(deque|list|queue|priority_queue|pair|stack|vector|map|set|bitset|multiset|multimap|unordered_map|unordered_set|unordered_multiset|unordered_multimap|array)\\\\s*\\x3c\",end:\"\\x3e\",keywords:CPP_KEYWORDS,contains:[\"self\",CPP_PRIMITIVE_TYPES]},{begin:hljs.IDENT_RE+\"::\",keywords:CPP_KEYWORDS},{className:\"class\",beginKeywords:\"enum class struct union\",\nend:/[{;:<>=]/,contains:[{beginKeywords:\"final class struct\"},hljs.TITLE_MODE]}]),exports:{preprocessor:PREPROCESSOR,strings:STRINGS,keywords:CPP_KEYWORDS}}}}","~:source","shadow$provide[\"module$node_modules$highlight_DOT_js$lib$languages$cpp\"] = function(global,require,module,exports) {\n/**\n * @param {string} value\n * @returns {RegExp}\n * */\n\n/**\n * @param {RegExp | string } re\n * @returns {string}\n */\nfunction source(re) {\n  if (!re) return null;\n  if (typeof re === \"string\") return re;\n\n  return re.source;\n}\n\n/**\n * @param {RegExp | string } re\n * @returns {string}\n */\nfunction lookahead(re) {\n  return concat('(?=', re, ')');\n}\n\n/**\n * @param {RegExp | string } re\n * @returns {string}\n */\nfunction optional(re) {\n  return concat('(', re, ')?');\n}\n\n/**\n * @param {...(RegExp | string) } args\n * @returns {string}\n */\nfunction concat(...args) {\n  const joined = args.map((x) => source(x)).join(\"\");\n  return joined;\n}\n\n/*\nLanguage: C++\nCategory: common, system\nWebsite: https://isocpp.org\n*/\n\n/** @type LanguageFn */\nfunction cpp(hljs) {\n  // added for historic reasons because `hljs.C_LINE_COMMENT_MODE` does\n  // not include such support nor can we be sure all the grammars depending\n  // on it would desire this behavior\n  const C_LINE_COMMENT_MODE = hljs.COMMENT('//', '$', {\n    contains: [\n      {\n        begin: /\\\\\\n/\n      }\n    ]\n  });\n  const DECLTYPE_AUTO_RE = 'decltype\\\\(auto\\\\)';\n  const NAMESPACE_RE = '[a-zA-Z_]\\\\w*::';\n  const TEMPLATE_ARGUMENT_RE = '<[^<>]+>';\n  const FUNCTION_TYPE_RE = '(' +\n    DECLTYPE_AUTO_RE + '|' +\n    optional(NAMESPACE_RE) +\n    '[a-zA-Z_]\\\\w*' + optional(TEMPLATE_ARGUMENT_RE) +\n  ')';\n  const CPP_PRIMITIVE_TYPES = {\n    className: 'keyword',\n    begin: '\\\\b[a-z\\\\d_]*_t\\\\b'\n  };\n\n  // https://en.cppreference.com/w/cpp/language/escape\n  // \\\\ \\x \\xFF \\u2837 \\u00323747 \\374\n  const CHARACTER_ESCAPES = '\\\\\\\\(x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4,8}|[0-7]{3}|\\\\S)';\n  const STRINGS = {\n    className: 'string',\n    variants: [\n      {\n        begin: '(u8?|U|L)?\"',\n        end: '\"',\n        illegal: '\\\\n',\n        contains: [ hljs.BACKSLASH_ESCAPE ]\n      },\n      {\n        begin: '(u8?|U|L)?\\'(' + CHARACTER_ESCAPES + \"|.)\",\n        end: '\\'',\n        illegal: '.'\n      },\n      hljs.END_SAME_AS_BEGIN({\n        begin: /(?:u8?|U|L)?R\"([^()\\\\ ]{0,16})\\(/,\n        end: /\\)([^()\\\\ ]{0,16})\"/\n      })\n    ]\n  };\n\n  const NUMBERS = {\n    className: 'number',\n    variants: [\n      {\n        begin: '\\\\b(0b[01\\']+)'\n      },\n      {\n        begin: '(-?)\\\\b([\\\\d\\']+(\\\\.[\\\\d\\']*)?|\\\\.[\\\\d\\']+)((ll|LL|l|L)(u|U)?|(u|U)(ll|LL|l|L)?|f|F|b|B)'\n      },\n      {\n        begin: '(-?)(\\\\b0[xX][a-fA-F0-9\\']+|(\\\\b[\\\\d\\']+(\\\\.[\\\\d\\']*)?|\\\\.[\\\\d\\']+)([eE][-+]?[\\\\d\\']+)?)'\n      }\n    ],\n    relevance: 0\n  };\n\n  const PREPROCESSOR = {\n    className: 'meta',\n    begin: /#\\s*[a-z]+\\b/,\n    end: /$/,\n    keywords: {\n      'meta-keyword':\n        'if else elif endif define undef warning error line ' +\n        'pragma _Pragma ifdef ifndef include'\n    },\n    contains: [\n      {\n        begin: /\\\\\\n/,\n        relevance: 0\n      },\n      hljs.inherit(STRINGS, {\n        className: 'meta-string'\n      }),\n      {\n        className: 'meta-string',\n        begin: /<.*?>/\n      },\n      C_LINE_COMMENT_MODE,\n      hljs.C_BLOCK_COMMENT_MODE\n    ]\n  };\n\n  const TITLE_MODE = {\n    className: 'title',\n    begin: optional(NAMESPACE_RE) + hljs.IDENT_RE,\n    relevance: 0\n  };\n\n  const FUNCTION_TITLE = optional(NAMESPACE_RE) + hljs.IDENT_RE + '\\\\s*\\\\(';\n\n  const COMMON_CPP_HINTS = [\n    'asin',\n    'atan2',\n    'atan',\n    'calloc',\n    'ceil',\n    'cosh',\n    'cos',\n    'exit',\n    'exp',\n    'fabs',\n    'floor',\n    'fmod',\n    'fprintf',\n    'fputs',\n    'free',\n    'frexp',\n    'auto_ptr',\n    'deque',\n    'list',\n    'queue',\n    'stack',\n    'vector',\n    'map',\n    'set',\n    'pair',\n    'bitset',\n    'multiset',\n    'multimap',\n    'unordered_set',\n    'fscanf',\n    'future',\n    'isalnum',\n    'isalpha',\n    'iscntrl',\n    'isdigit',\n    'isgraph',\n    'islower',\n    'isprint',\n    'ispunct',\n    'isspace',\n    'isupper',\n    'isxdigit',\n    'tolower',\n    'toupper',\n    'labs',\n    'ldexp',\n    'log10',\n    'log',\n    'malloc',\n    'realloc',\n    'memchr',\n    'memcmp',\n    'memcpy',\n    'memset',\n    'modf',\n    'pow',\n    'printf',\n    'putchar',\n    'puts',\n    'scanf',\n    'sinh',\n    'sin',\n    'snprintf',\n    'sprintf',\n    'sqrt',\n    'sscanf',\n    'strcat',\n    'strchr',\n    'strcmp',\n    'strcpy',\n    'strcspn',\n    'strlen',\n    'strncat',\n    'strncmp',\n    'strncpy',\n    'strpbrk',\n    'strrchr',\n    'strspn',\n    'strstr',\n    'tanh',\n    'tan',\n    'unordered_map',\n    'unordered_multiset',\n    'unordered_multimap',\n    'priority_queue',\n    'make_pair',\n    'array',\n    'shared_ptr',\n    'abort',\n    'terminate',\n    'abs',\n    'acos',\n    'vfprintf',\n    'vprintf',\n    'vsprintf',\n    'endl',\n    'initializer_list',\n    'unique_ptr',\n    'complex',\n    'imaginary',\n    'std',\n    'string',\n    'wstring',\n    'cin',\n    'cout',\n    'cerr',\n    'clog',\n    'stdin',\n    'stdout',\n    'stderr',\n    'stringstream',\n    'istringstream',\n    'ostringstream'\n  ];\n\n  const CPP_KEYWORDS = {\n    keyword: 'int float while private char char8_t char16_t char32_t catch import module export virtual operator sizeof ' +\n      'dynamic_cast|10 typedef const_cast|10 const for static_cast|10 union namespace ' +\n      'unsigned long volatile static protected bool template mutable if public friend ' +\n      'do goto auto void enum else break extern using asm case typeid wchar_t ' +\n      'short reinterpret_cast|10 default double register explicit signed typename try this ' +\n      'switch continue inline delete alignas alignof constexpr consteval constinit decltype ' +\n      'concept co_await co_return co_yield requires ' +\n      'noexcept static_assert thread_local restrict final override ' +\n      'atomic_bool atomic_char atomic_schar ' +\n      'atomic_uchar atomic_short atomic_ushort atomic_int atomic_uint atomic_long atomic_ulong atomic_llong ' +\n      'atomic_ullong new throw return ' +\n      'and and_eq bitand bitor compl not not_eq or or_eq xor xor_eq',\n    built_in: '_Bool _Complex _Imaginary',\n    _relevance_hints: COMMON_CPP_HINTS,\n    literal: 'true false nullptr NULL'\n  };\n\n  const FUNCTION_DISPATCH = {\n    className: \"function.dispatch\",\n    relevance: 0,\n    keywords: CPP_KEYWORDS,\n    begin: concat(\n      /\\b/,\n      /(?!decltype)/,\n      /(?!if)/,\n      /(?!for)/,\n      /(?!while)/,\n      hljs.IDENT_RE,\n      lookahead(/\\s*\\(/))\n  };\n\n  const EXPRESSION_CONTAINS = [\n    FUNCTION_DISPATCH,\n    PREPROCESSOR,\n    CPP_PRIMITIVE_TYPES,\n    C_LINE_COMMENT_MODE,\n    hljs.C_BLOCK_COMMENT_MODE,\n    NUMBERS,\n    STRINGS\n  ];\n\n\n  const EXPRESSION_CONTEXT = {\n    // This mode covers expression context where we can't expect a function\n    // definition and shouldn't highlight anything that looks like one:\n    // `return some()`, `else if()`, `(x*sum(1, 2))`\n    variants: [\n      {\n        begin: /=/,\n        end: /;/\n      },\n      {\n        begin: /\\(/,\n        end: /\\)/\n      },\n      {\n        beginKeywords: 'new throw return else',\n        end: /;/\n      }\n    ],\n    keywords: CPP_KEYWORDS,\n    contains: EXPRESSION_CONTAINS.concat([\n      {\n        begin: /\\(/,\n        end: /\\)/,\n        keywords: CPP_KEYWORDS,\n        contains: EXPRESSION_CONTAINS.concat([ 'self' ]),\n        relevance: 0\n      }\n    ]),\n    relevance: 0\n  };\n\n  const FUNCTION_DECLARATION = {\n    className: 'function',\n    begin: '(' + FUNCTION_TYPE_RE + '[\\\\*&\\\\s]+)+' + FUNCTION_TITLE,\n    returnBegin: true,\n    end: /[{;=]/,\n    excludeEnd: true,\n    keywords: CPP_KEYWORDS,\n    illegal: /[^\\w\\s\\*&:<>.]/,\n    contains: [\n      { // to prevent it from being confused as the function title\n        begin: DECLTYPE_AUTO_RE,\n        keywords: CPP_KEYWORDS,\n        relevance: 0\n      },\n      {\n        begin: FUNCTION_TITLE,\n        returnBegin: true,\n        contains: [ TITLE_MODE ],\n        relevance: 0\n      },\n      // needed because we do not have look-behind on the below rule\n      // to prevent it from grabbing the final : in a :: pair\n      {\n        begin: /::/,\n        relevance: 0\n      },\n      // initializers\n      {\n        begin: /:/,\n        endsWithParent: true,\n        contains: [\n          STRINGS,\n          NUMBERS\n        ]\n      },\n      {\n        className: 'params',\n        begin: /\\(/,\n        end: /\\)/,\n        keywords: CPP_KEYWORDS,\n        relevance: 0,\n        contains: [\n          C_LINE_COMMENT_MODE,\n          hljs.C_BLOCK_COMMENT_MODE,\n          STRINGS,\n          NUMBERS,\n          CPP_PRIMITIVE_TYPES,\n          // Count matching parentheses.\n          {\n            begin: /\\(/,\n            end: /\\)/,\n            keywords: CPP_KEYWORDS,\n            relevance: 0,\n            contains: [\n              'self',\n              C_LINE_COMMENT_MODE,\n              hljs.C_BLOCK_COMMENT_MODE,\n              STRINGS,\n              NUMBERS,\n              CPP_PRIMITIVE_TYPES\n            ]\n          }\n        ]\n      },\n      CPP_PRIMITIVE_TYPES,\n      C_LINE_COMMENT_MODE,\n      hljs.C_BLOCK_COMMENT_MODE,\n      PREPROCESSOR\n    ]\n  };\n\n  return {\n    name: 'C++',\n    aliases: [\n      'cc',\n      'c++',\n      'h++',\n      'hpp',\n      'hh',\n      'hxx',\n      'cxx'\n    ],\n    keywords: CPP_KEYWORDS,\n    illegal: '</',\n    classNameAliases: {\n      \"function.dispatch\": \"built_in\"\n    },\n    contains: [].concat(\n      EXPRESSION_CONTEXT,\n      FUNCTION_DECLARATION,\n      FUNCTION_DISPATCH,\n      EXPRESSION_CONTAINS,\n      [\n        PREPROCESSOR,\n        { // containers: ie, `vector <int> rooms (9);`\n          begin: '\\\\b(deque|list|queue|priority_queue|pair|stack|vector|map|set|bitset|multiset|multimap|unordered_map|unordered_set|unordered_multiset|unordered_multimap|array)\\\\s*<',\n          end: '>',\n          keywords: CPP_KEYWORDS,\n          contains: [\n            'self',\n            CPP_PRIMITIVE_TYPES\n          ]\n        },\n        {\n          begin: hljs.IDENT_RE + '::',\n          keywords: CPP_KEYWORDS\n        },\n        {\n          className: 'class',\n          beginKeywords: 'enum class struct union',\n          end: /[{;:<>=]/,\n          contains: [\n            {\n              beginKeywords: \"final class struct\"\n            },\n            hljs.TITLE_MODE\n          ]\n        }\n      ]),\n    exports: {\n      preprocessor: PREPROCESSOR,\n      strings: STRINGS,\n      keywords: CPP_KEYWORDS\n    }\n  };\n}\n\nmodule.exports = cpp;\n\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js"]],"~:properties",["^5",["variants","begin","aliases","strings","className","contains","relevance","preprocessor","returnBegin","classNameAliases","name","built_in","keyword","keywords","_relevance_hints","beginKeywords","excludeEnd","illegal","endsWithParent","literal","end"]],"~:compiled-at",1621210441166,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$highlight_DOT_js$lib$languages$cpp.js\",\n\"lineCount\":10,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/highlight_DOT_js/lib/languages/cpp.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$highlight_DOT_js$lib$languages$cpp\\\"] = function(global,require,module,exports) {\\n/**\\n * @param {string} value\\n * @returns {RegExp}\\n * */\\n\\n/**\\n * @param {RegExp | string } re\\n * @returns {string}\\n */\\nfunction source(re) {\\n  if (!re) return null;\\n  if (typeof re === \\\"string\\\") return re;\\n\\n  return re.source;\\n}\\n\\n/**\\n * @param {RegExp | string } re\\n * @returns {string}\\n */\\nfunction lookahead(re) {\\n  return concat('(?=', re, ')');\\n}\\n\\n/**\\n * @param {RegExp | string } re\\n * @returns {string}\\n */\\nfunction optional(re) {\\n  return concat('(', re, ')?');\\n}\\n\\n/**\\n * @param {...(RegExp | string) } args\\n * @returns {string}\\n */\\nfunction concat(...args) {\\n  const joined = args.map((x) => source(x)).join(\\\"\\\");\\n  return joined;\\n}\\n\\n/*\\nLanguage: C++\\nCategory: common, system\\nWebsite: https://isocpp.org\\n*/\\n\\n/** @type LanguageFn */\\nfunction cpp(hljs) {\\n  // added for historic reasons because `hljs.C_LINE_COMMENT_MODE` does\\n  // not include such support nor can we be sure all the grammars depending\\n  // on it would desire this behavior\\n  const C_LINE_COMMENT_MODE = hljs.COMMENT('//', '$', {\\n    contains: [\\n      {\\n        begin: /\\\\\\\\\\\\n/\\n      }\\n    ]\\n  });\\n  const DECLTYPE_AUTO_RE = 'decltype\\\\\\\\(auto\\\\\\\\)';\\n  const NAMESPACE_RE = '[a-zA-Z_]\\\\\\\\w*::';\\n  const TEMPLATE_ARGUMENT_RE = '<[^<>]+>';\\n  const FUNCTION_TYPE_RE = '(' +\\n    DECLTYPE_AUTO_RE + '|' +\\n    optional(NAMESPACE_RE) +\\n    '[a-zA-Z_]\\\\\\\\w*' + optional(TEMPLATE_ARGUMENT_RE) +\\n  ')';\\n  const CPP_PRIMITIVE_TYPES = {\\n    className: 'keyword',\\n    begin: '\\\\\\\\b[a-z\\\\\\\\d_]*_t\\\\\\\\b'\\n  };\\n\\n  // https://en.cppreference.com/w/cpp/language/escape\\n  // \\\\\\\\ \\\\x \\\\xFF \\\\u2837 \\\\u00323747 \\\\374\\n  const CHARACTER_ESCAPES = '\\\\\\\\\\\\\\\\(x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4,8}|[0-7]{3}|\\\\\\\\S)';\\n  const STRINGS = {\\n    className: 'string',\\n    variants: [\\n      {\\n        begin: '(u8?|U|L)?\\\"',\\n        end: '\\\"',\\n        illegal: '\\\\\\\\n',\\n        contains: [ hljs.BACKSLASH_ESCAPE ]\\n      },\\n      {\\n        begin: '(u8?|U|L)?\\\\'(' + CHARACTER_ESCAPES + \\\"|.)\\\",\\n        end: '\\\\'',\\n        illegal: '.'\\n      },\\n      hljs.END_SAME_AS_BEGIN({\\n        begin: /(?:u8?|U|L)?R\\\"([^()\\\\\\\\ ]{0,16})\\\\(/,\\n        end: /\\\\)([^()\\\\\\\\ ]{0,16})\\\"/\\n      })\\n    ]\\n  };\\n\\n  const NUMBERS = {\\n    className: 'number',\\n    variants: [\\n      {\\n        begin: '\\\\\\\\b(0b[01\\\\']+)'\\n      },\\n      {\\n        begin: '(-?)\\\\\\\\b([\\\\\\\\d\\\\']+(\\\\\\\\.[\\\\\\\\d\\\\']*)?|\\\\\\\\.[\\\\\\\\d\\\\']+)((ll|LL|l|L)(u|U)?|(u|U)(ll|LL|l|L)?|f|F|b|B)'\\n      },\\n      {\\n        begin: '(-?)(\\\\\\\\b0[xX][a-fA-F0-9\\\\']+|(\\\\\\\\b[\\\\\\\\d\\\\']+(\\\\\\\\.[\\\\\\\\d\\\\']*)?|\\\\\\\\.[\\\\\\\\d\\\\']+)([eE][-+]?[\\\\\\\\d\\\\']+)?)'\\n      }\\n    ],\\n    relevance: 0\\n  };\\n\\n  const PREPROCESSOR = {\\n    className: 'meta',\\n    begin: /#\\\\s*[a-z]+\\\\b/,\\n    end: /$/,\\n    keywords: {\\n      'meta-keyword':\\n        'if else elif endif define undef warning error line ' +\\n        'pragma _Pragma ifdef ifndef include'\\n    },\\n    contains: [\\n      {\\n        begin: /\\\\\\\\\\\\n/,\\n        relevance: 0\\n      },\\n      hljs.inherit(STRINGS, {\\n        className: 'meta-string'\\n      }),\\n      {\\n        className: 'meta-string',\\n        begin: /<.*?>/\\n      },\\n      C_LINE_COMMENT_MODE,\\n      hljs.C_BLOCK_COMMENT_MODE\\n    ]\\n  };\\n\\n  const TITLE_MODE = {\\n    className: 'title',\\n    begin: optional(NAMESPACE_RE) + hljs.IDENT_RE,\\n    relevance: 0\\n  };\\n\\n  const FUNCTION_TITLE = optional(NAMESPACE_RE) + hljs.IDENT_RE + '\\\\\\\\s*\\\\\\\\(';\\n\\n  const COMMON_CPP_HINTS = [\\n    'asin',\\n    'atan2',\\n    'atan',\\n    'calloc',\\n    'ceil',\\n    'cosh',\\n    'cos',\\n    'exit',\\n    'exp',\\n    'fabs',\\n    'floor',\\n    'fmod',\\n    'fprintf',\\n    'fputs',\\n    'free',\\n    'frexp',\\n    'auto_ptr',\\n    'deque',\\n    'list',\\n    'queue',\\n    'stack',\\n    'vector',\\n    'map',\\n    'set',\\n    'pair',\\n    'bitset',\\n    'multiset',\\n    'multimap',\\n    'unordered_set',\\n    'fscanf',\\n    'future',\\n    'isalnum',\\n    'isalpha',\\n    'iscntrl',\\n    'isdigit',\\n    'isgraph',\\n    'islower',\\n    'isprint',\\n    'ispunct',\\n    'isspace',\\n    'isupper',\\n    'isxdigit',\\n    'tolower',\\n    'toupper',\\n    'labs',\\n    'ldexp',\\n    'log10',\\n    'log',\\n    'malloc',\\n    'realloc',\\n    'memchr',\\n    'memcmp',\\n    'memcpy',\\n    'memset',\\n    'modf',\\n    'pow',\\n    'printf',\\n    'putchar',\\n    'puts',\\n    'scanf',\\n    'sinh',\\n    'sin',\\n    'snprintf',\\n    'sprintf',\\n    'sqrt',\\n    'sscanf',\\n    'strcat',\\n    'strchr',\\n    'strcmp',\\n    'strcpy',\\n    'strcspn',\\n    'strlen',\\n    'strncat',\\n    'strncmp',\\n    'strncpy',\\n    'strpbrk',\\n    'strrchr',\\n    'strspn',\\n    'strstr',\\n    'tanh',\\n    'tan',\\n    'unordered_map',\\n    'unordered_multiset',\\n    'unordered_multimap',\\n    'priority_queue',\\n    'make_pair',\\n    'array',\\n    'shared_ptr',\\n    'abort',\\n    'terminate',\\n    'abs',\\n    'acos',\\n    'vfprintf',\\n    'vprintf',\\n    'vsprintf',\\n    'endl',\\n    'initializer_list',\\n    'unique_ptr',\\n    'complex',\\n    'imaginary',\\n    'std',\\n    'string',\\n    'wstring',\\n    'cin',\\n    'cout',\\n    'cerr',\\n    'clog',\\n    'stdin',\\n    'stdout',\\n    'stderr',\\n    'stringstream',\\n    'istringstream',\\n    'ostringstream'\\n  ];\\n\\n  const CPP_KEYWORDS = {\\n    keyword: 'int float while private char char8_t char16_t char32_t catch import module export virtual operator sizeof ' +\\n      'dynamic_cast|10 typedef const_cast|10 const for static_cast|10 union namespace ' +\\n      'unsigned long volatile static protected bool template mutable if public friend ' +\\n      'do goto auto void enum else break extern using asm case typeid wchar_t ' +\\n      'short reinterpret_cast|10 default double register explicit signed typename try this ' +\\n      'switch continue inline delete alignas alignof constexpr consteval constinit decltype ' +\\n      'concept co_await co_return co_yield requires ' +\\n      'noexcept static_assert thread_local restrict final override ' +\\n      'atomic_bool atomic_char atomic_schar ' +\\n      'atomic_uchar atomic_short atomic_ushort atomic_int atomic_uint atomic_long atomic_ulong atomic_llong ' +\\n      'atomic_ullong new throw return ' +\\n      'and and_eq bitand bitor compl not not_eq or or_eq xor xor_eq',\\n    built_in: '_Bool _Complex _Imaginary',\\n    _relevance_hints: COMMON_CPP_HINTS,\\n    literal: 'true false nullptr NULL'\\n  };\\n\\n  const FUNCTION_DISPATCH = {\\n    className: \\\"function.dispatch\\\",\\n    relevance: 0,\\n    keywords: CPP_KEYWORDS,\\n    begin: concat(\\n      /\\\\b/,\\n      /(?!decltype)/,\\n      /(?!if)/,\\n      /(?!for)/,\\n      /(?!while)/,\\n      hljs.IDENT_RE,\\n      lookahead(/\\\\s*\\\\(/))\\n  };\\n\\n  const EXPRESSION_CONTAINS = [\\n    FUNCTION_DISPATCH,\\n    PREPROCESSOR,\\n    CPP_PRIMITIVE_TYPES,\\n    C_LINE_COMMENT_MODE,\\n    hljs.C_BLOCK_COMMENT_MODE,\\n    NUMBERS,\\n    STRINGS\\n  ];\\n\\n\\n  const EXPRESSION_CONTEXT = {\\n    // This mode covers expression context where we can't expect a function\\n    // definition and shouldn't highlight anything that looks like one:\\n    // `return some()`, `else if()`, `(x*sum(1, 2))`\\n    variants: [\\n      {\\n        begin: /=/,\\n        end: /;/\\n      },\\n      {\\n        begin: /\\\\(/,\\n        end: /\\\\)/\\n      },\\n      {\\n        beginKeywords: 'new throw return else',\\n        end: /;/\\n      }\\n    ],\\n    keywords: CPP_KEYWORDS,\\n    contains: EXPRESSION_CONTAINS.concat([\\n      {\\n        begin: /\\\\(/,\\n        end: /\\\\)/,\\n        keywords: CPP_KEYWORDS,\\n        contains: EXPRESSION_CONTAINS.concat([ 'self' ]),\\n        relevance: 0\\n      }\\n    ]),\\n    relevance: 0\\n  };\\n\\n  const FUNCTION_DECLARATION = {\\n    className: 'function',\\n    begin: '(' + FUNCTION_TYPE_RE + '[\\\\\\\\*&\\\\\\\\s]+)+' + FUNCTION_TITLE,\\n    returnBegin: true,\\n    end: /[{;=]/,\\n    excludeEnd: true,\\n    keywords: CPP_KEYWORDS,\\n    illegal: /[^\\\\w\\\\s\\\\*&:<>.]/,\\n    contains: [\\n      { // to prevent it from being confused as the function title\\n        begin: DECLTYPE_AUTO_RE,\\n        keywords: CPP_KEYWORDS,\\n        relevance: 0\\n      },\\n      {\\n        begin: FUNCTION_TITLE,\\n        returnBegin: true,\\n        contains: [ TITLE_MODE ],\\n        relevance: 0\\n      },\\n      // needed because we do not have look-behind on the below rule\\n      // to prevent it from grabbing the final : in a :: pair\\n      {\\n        begin: /::/,\\n        relevance: 0\\n      },\\n      // initializers\\n      {\\n        begin: /:/,\\n        endsWithParent: true,\\n        contains: [\\n          STRINGS,\\n          NUMBERS\\n        ]\\n      },\\n      {\\n        className: 'params',\\n        begin: /\\\\(/,\\n        end: /\\\\)/,\\n        keywords: CPP_KEYWORDS,\\n        relevance: 0,\\n        contains: [\\n          C_LINE_COMMENT_MODE,\\n          hljs.C_BLOCK_COMMENT_MODE,\\n          STRINGS,\\n          NUMBERS,\\n          CPP_PRIMITIVE_TYPES,\\n          // Count matching parentheses.\\n          {\\n            begin: /\\\\(/,\\n            end: /\\\\)/,\\n            keywords: CPP_KEYWORDS,\\n            relevance: 0,\\n            contains: [\\n              'self',\\n              C_LINE_COMMENT_MODE,\\n              hljs.C_BLOCK_COMMENT_MODE,\\n              STRINGS,\\n              NUMBERS,\\n              CPP_PRIMITIVE_TYPES\\n            ]\\n          }\\n        ]\\n      },\\n      CPP_PRIMITIVE_TYPES,\\n      C_LINE_COMMENT_MODE,\\n      hljs.C_BLOCK_COMMENT_MODE,\\n      PREPROCESSOR\\n    ]\\n  };\\n\\n  return {\\n    name: 'C++',\\n    aliases: [\\n      'cc',\\n      'c++',\\n      'h++',\\n      'hpp',\\n      'hh',\\n      'hxx',\\n      'cxx'\\n    ],\\n    keywords: CPP_KEYWORDS,\\n    illegal: '</',\\n    classNameAliases: {\\n      \\\"function.dispatch\\\": \\\"built_in\\\"\\n    },\\n    contains: [].concat(\\n      EXPRESSION_CONTEXT,\\n      FUNCTION_DECLARATION,\\n      FUNCTION_DISPATCH,\\n      EXPRESSION_CONTAINS,\\n      [\\n        PREPROCESSOR,\\n        { // containers: ie, `vector <int> rooms (9);`\\n          begin: '\\\\\\\\b(deque|list|queue|priority_queue|pair|stack|vector|map|set|bitset|multiset|multimap|unordered_map|unordered_set|unordered_multiset|unordered_multimap|array)\\\\\\\\s*<',\\n          end: '>',\\n          keywords: CPP_KEYWORDS,\\n          contains: [\\n            'self',\\n            CPP_PRIMITIVE_TYPES\\n          ]\\n        },\\n        {\\n          begin: hljs.IDENT_RE + '::',\\n          keywords: CPP_KEYWORDS\\n        },\\n        {\\n          className: 'class',\\n          beginKeywords: 'enum class struct union',\\n          end: /[{;:<>=]/,\\n          contains: [\\n            {\\n              beginKeywords: \\\"final class struct\\\"\\n            },\\n            hljs.TITLE_MODE\\n          ]\\n        }\\n      ]),\\n    exports: {\\n      preprocessor: PREPROCESSOR,\\n      strings: STRINGS,\\n      keywords: CPP_KEYWORDS\\n    }\\n  };\\n}\\n\\nmodule.exports = cpp;\\n\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"concat\",\"args\",\"map\",\"x\",\"source\",\"join\",\"joined\",\"cpp\",\"hljs\",\"C_LINE_COMMENT_MODE\",\"COMMENT\",\"contains\",\"begin\",\"FUNCTION_TYPE_RE\",\"NAMESPACE_RE\",\"TEMPLATE_ARGUMENT_RE\",\"CPP_PRIMITIVE_TYPES\",\"className\",\"STRINGS\",\"variants\",\"end\",\"illegal\",\"BACKSLASH_ESCAPE\",\"END_SAME_AS_BEGIN\",\"NUMBERS\",\"relevance\",\"PREPROCESSOR\",\"keywords\",\"inherit\",\"C_BLOCK_COMMENT_MODE\",\"TITLE_MODE\",\"IDENT_RE\",\"FUNCTION_TITLE\",\"CPP_KEYWORDS\",\"keyword\",\"built_in\",\"_relevance_hints\",\"COMMON_CPP_HINTS\",\"literal\",\"FUNCTION_DISPATCH\",\"re\",\"EXPRESSION_CONTAINS\",\"EXPRESSION_CONTEXT\",\"beginKeywords\",\"name\",\"aliases\",\"classNameAliases\",\"FUNCTION_DECLARATION\",\"returnBegin\",\"excludeEnd\",\"DECLTYPE_AUTO_RE\",\"endsWithParent\",\"preprocessor\",\"strings\"]\n}\n"]