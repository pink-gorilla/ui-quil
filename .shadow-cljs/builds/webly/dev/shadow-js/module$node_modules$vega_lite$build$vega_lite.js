["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/vega-lite/build/vega-lite.js"],"~:js","shadow$provide.module$node_modules$vega_lite$build$vega_lite=function(global$jscomp$0,require,module$jscomp$0,exports$jscomp$0){var Buffer=require(\"module$node_modules$buffer$index\").Buffer;(function(global,factory){\"object\"===typeof exports$jscomp$0&&\"undefined\"!==typeof module$jscomp$0?factory(exports$jscomp$0):\"function\"===typeof define&&define.amd?define([\"exports\"],factory):(global=\"undefined\"!==typeof globalThis?globalThis:global||self,factory(global.vegaLite={}))})(this,function(exports){function accessor$jscomp$0(fn,\nfields,name){fn.fields=fields||[];fn.fname=name;return fn}function getter(path){return 1===path.length?get1(path[0]):getN(path)}function splitAccessPath(p){function push(){path.push(s+p.substring(i,j));s=\"\";i=j+1}const path=[],n=p.length;let q=null,b=0,s=\"\",i,j,c;p+=\"\";for(i=j=0;j<n;++j)if(c=p[j],\"\\\\\"===c)s+=p.substring(i,j),s+=p.substring(++j,++j),i=j;else if(c===q)push(),q=null,b=-1;else if(!q)if(i===b&&'\"'===c)i=j+1,q=c;else if(i===b&&\"'\"===c)i=j+1,q=c;else if(\".\"===c&&!b)j>i?push():i=j+1;else if(\"[\"===\nc)j>i&&push(),b=i=j+1;else if(\"]\"===c){if(!b)throw Error(\"Access path missing open bracket: \"+p);0<b&&push();b=0;i=j+1}if(b)throw Error(\"Access path missing closing bracket: \"+p);if(q)throw Error(\"Access path missing closing quote: \"+p);j>i&&(j++,push());return path}function log(method,level,input){level=[level].concat([].slice.call(input));console[method].apply(console,level)}function isObject(_){return _===Object(_)}function mergeConfig(...configs){return configs.reduce((out,source)=>{for(const key in source)\"signals\"===\nkey?out.signals=mergeNamed(out.signals,source.signals):writeConfig(out,key,source[key],\"legend\"===key?{layout:1}:\"style\"===key?!0:null);return out},{})}function writeConfig(output,key,value,recurse){if(\"__proto__\"!==key){var k;if(isObject(value)&&!isArray(value))for(k in output=isObject(output[key])?output[key]:output[key]={},value)recurse&&(!0===recurse||recurse[k])?writeConfig(output,k,value[k]):\"__proto__\"!==k&&(output[k]=value[k]);else output[key]=value}}function mergeNamed(a,b){function add(_){map[_.name]||\n(map[_.name]=1,out.push(_))}if(null==a)return b;const map={},out=[];b.forEach(add);a.forEach(add);return out}function array$jscomp$0(_){return null!=_?isArray(_)?_:[_]:[]}function isBoolean(_){return\"boolean\"===typeof _}function isNumber(_){return\"number\"===typeof _}function isString(_){return\"string\"===typeof _}function $(x){return isArray(x)?\"[\"+x.map($)+\"]\":isObject(x)||isString(x)?JSON.stringify(x).replace(\"\\u2028\",\"\\\\u2028\").replace(\"\\u2029\",\"\\\\u2029\"):x}function toSet(_){const s={},n=_.length;\nfor(let i=0;i<n;++i)s[_[i]]=!0;return s}function forEachLeaf(op,fn){if(op.not)forEachLeaf(op.not,fn);else if(op.and)for(const subop of op.and)forEachLeaf(subop,fn);else if(op.or)for(const subop of op.or)forEachLeaf(subop,fn);else fn(op)}function normalizeLogicalComposition(op,normalizer){return op.not?{not:normalizeLogicalComposition(op.not,normalizer)}:op.and?{and:op.and.map(o=>normalizeLogicalComposition(o,normalizer))}:op.or?{or:op.or.map(o=>normalizeLogicalComposition(o,normalizer))}:normalizer(op)}\nfunction pick(obj,props){const copy={};for(const prop of props)hop.call(obj,prop)&&(copy[prop]=obj[prop]);return copy}function omit(obj,props){obj=Object.assign({},obj);for(const prop of props)delete obj[prop];return obj}function hash(a){if(isNumber(a))return a;a=isString(a)?a:fastJsonStableStringify(a);if(250>a.length)return a;let h=0;for(let i=0;i<a.length;i++){const char=a.charCodeAt(i);h=(h<<5)-h+char;h&=h}return h}function isNullOrFalse(x){return!1===x||null===x}function contains(array,item){return-1<\narray.indexOf(item)}function some(arr,f){let i=0;for(const $jscomp$destructuring$var53 of arr.entries()){const [k,a]=$jscomp$destructuring$var53;if(f(a,k,i++))return!0}return!1}function every(arr,f){let i=0;for(const $jscomp$destructuring$var54 of arr.entries()){const [k,a]=$jscomp$destructuring$var54;if(!f(a,k,i++))return!1}return!0}function mergeDeep(dest,...src$jscomp$0){for(const s of src$jscomp$0){src$jscomp$0=dest;var src=null!==s&&void 0!==s?s:{};for(const property of keys$jscomp$0(src))writeConfig(src$jscomp$0,\nproperty,src[property],!0)}return dest}function unique(values,f){const results=[],u={};for(const val of values)values=f(val),values in u||(u[values]=1,results.push(val));return results}function setEqual(a,b){if(a.size!==b.size)return!1;for(const e of a)if(!b.has(e))return!1;return!0}function hasIntersection(a,b){for(const key of a)if(b.has(key))return!0;return!1}function prefixGenerator(a){const prefixes=new Set;for(const x of a){const wrappedWithAccessors=splitAccessPath(x).map((y,i)=>0===i?y:\"[\".concat(y,\n\"]\"));a=wrappedWithAccessors.map((_,i)=>wrappedWithAccessors.slice(0,i+1).join(\"\"));for(const y of a)prefixes.add(y)}return prefixes}function fieldIntersection(a,b){return void 0===a||void 0===b?!0:hasIntersection(prefixGenerator(a),prefixGenerator(b))}function isEmpty(obj){return 0===keys$jscomp$0(obj).length}function isBoolean$1(b){return!0===b||!1===b}function varName(s){const alphanumericS=s.replace(/\\W/g,\"_\");return(s.match(/^\\d+/)?\"_\":\"\")+alphanumericS}function logicalExpr(op,cb){return op.not?\n\"!(\"+logicalExpr(op.not,cb)+\")\":op.and?\"(\"+op.and.map(and=>logicalExpr(and,cb)).join(\") \\x26\\x26 (\")+\")\":op.or?\"(\"+op.or.map(or=>logicalExpr(or,cb)).join(\") || (\")+\")\":cb(op)}function deleteNestedProperty(obj,orderedProps){if(0===orderedProps.length)return!0;const prop=orderedProps.shift();prop in obj&&deleteNestedProperty(obj[prop],orderedProps)&&delete obj[prop];return isEmpty(obj)}function titleCase(s){return s.charAt(0).toUpperCase()+s.substr(1)}function accessPathWithDatum(path,datum){datum=\nvoid 0===datum?\"datum\":datum;path=splitAccessPath(path);const prefixes=[];for(let i=1;i<=path.length;i++){const prefix=\"[\".concat(path.slice(0,i).map($).join(\"][\"),\"]\");prefixes.push(\"\".concat(datum).concat(prefix))}return prefixes.join(\" \\x26\\x26 \")}function flatAccessWithDatum(path,datum){return\"\".concat(void 0===datum?\"datum\":datum,\"[\").concat($(splitAccessPath(path).join(\".\")),\"]\")}function escapePathAccess(string){return string.replace(/(\\[|\\]|\\.|'|\")/g,\"\\\\$1\")}function replacePathInField(path){return\"\".concat(splitAccessPath(path).map(escapePathAccess).join(\"\\\\.\"))}\nfunction replaceAll(string,find,replacement){return string.replace(new RegExp(find.replace(/[-/\\\\^$*+?.()|[\\]{}]/g,\"\\\\$\\x26\"),\"g\"),replacement)}function removePathFromField(path){return\"\".concat(splitAccessPath(path).join(\".\"))}function accessPathDepth(path){return path?splitAccessPath(path).length:0}function getFirstDefined(...args){for(const arg of args)if(void 0!==arg)return arg}function uniqueId(prefix){const id=++idCounter;return prefix?String(prefix)+id:id}function internalField(name){return isInternalField(name)?\nname:\"__\".concat(name)}function isInternalField(name){return 0===name.indexOf(\"__\")}function normalizeAngle(angle){if(void 0!==angle)return(angle%360+360)%360}function isNumeric(value){return isNumber(value)?!0:!isNaN(value)&&!isNaN(parseFloat(value))}function isConditionalAxisValue(v){return v&&v.condition}function isArgminDef(a){return!!a&&!!a.argmin}function isArgmaxDef(a){return!!a&&!!a.argmax}function isAggregateOp(a){return isString(a)&&!!AGGREGATE_OP_INDEX[a]}function isCountingAggregateOp(aggregate){return isString(aggregate)&&\ncontains(COUNTING_OPS,aggregate)}function getPositionChannelFromLatLong(channel){switch(channel){case \"latitude\":return\"y\";case \"latitude2\":return\"y2\";case \"longitude\":return\"x\";case \"longitude2\":return\"x2\"}}function isColorChannel(channel){return\"color\"===channel||\"fill\"===channel||\"stroke\"===channel}function isSecondaryRangeChannel(c){return getMainRangeChannel(c)!==c}function getMainRangeChannel(channel){switch(channel){case \"x2\":return\"x\";case \"y2\":return\"y\";case \"latitude2\":return\"latitude\";\ncase \"longitude2\":return\"longitude\";case \"theta2\":return\"theta\";case \"radius2\":return\"radius\"}return channel}function getVgPositionChannel(channel){if(channel in POLAR_POSITION_CHANNEL_INDEX)switch(channel){case \"theta\":return\"startAngle\";case \"theta2\":return\"endAngle\";case \"radius\":return\"outerRadius\";case \"radius2\":return\"innerRadius\"}return channel}function getSecondaryRangeChannel(channel){switch(channel){case \"x\":return\"x2\";case \"y\":return\"y2\";case \"latitude\":return\"latitude2\";case \"longitude\":return\"longitude2\";\ncase \"theta\":return\"theta2\";case \"radius\":return\"radius2\"}}function getSizeChannel(channel){switch(channel){case \"x\":case \"x2\":return\"width\";case \"y\":case \"y2\":return\"height\"}}function getOffsetChannel(channel){switch(channel){case \"x\":return\"xOffset\";case \"y\":return\"yOffset\";case \"x2\":return\"x2Offset\";case \"y2\":return\"y2Offset\";case \"theta\":return\"thetaOffset\";case \"radius\":return\"radiusOffset\";case \"theta2\":return\"theta2Offset\";case \"radius2\":return\"radius2Offset\"}}function getPositionScaleChannel(sizeType){return\"width\"===\nsizeType?\"x\":\"y\"}function getSupportedMark(channel){switch(channel){case \"color\":case \"fill\":case \"stroke\":case \"description\":case \"detail\":case \"key\":case \"tooltip\":case \"href\":case \"order\":case \"opacity\":case \"fillOpacity\":case \"strokeOpacity\":case \"strokeWidth\":case \"facet\":case \"row\":case \"column\":return ALL_MARKS;case \"x\":case \"y\":case \"latitude\":case \"longitude\":return ALL_MARKS_EXCEPT_GEOSHAPE;case \"x2\":case \"y2\":case \"latitude2\":case \"longitude2\":return{area:\"always\",bar:\"always\",image:\"always\",\nrect:\"always\",rule:\"always\",circle:\"binned\",point:\"binned\",square:\"binned\",tick:\"binned\",line:\"binned\",trail:\"binned\"};case \"size\":return{point:\"always\",tick:\"always\",rule:\"always\",circle:\"always\",square:\"always\",bar:\"always\",text:\"always\",line:\"always\",trail:\"always\"};case \"strokeDash\":return{line:\"always\",point:\"always\",tick:\"always\",rule:\"always\",circle:\"always\",square:\"always\",bar:\"always\",geoshape:\"always\"};case \"shape\":return{point:\"always\",geoshape:\"always\"};case \"text\":return{text:\"always\"};\ncase \"angle\":return{point:\"always\",square:\"always\",text:\"always\"};case \"url\":return{image:\"always\"};case \"theta\":return{text:\"always\",arc:\"always\"};case \"radius\":return{text:\"always\",arc:\"always\"};case \"theta2\":case \"radius2\":return{arc:\"always\"}}}function rangeType(channel){switch(channel){case \"facet\":case \"row\":case \"column\":case \"shape\":case \"strokeDash\":case \"text\":case \"tooltip\":case \"href\":case \"url\":case \"description\":return\"discrete\";case \"color\":case \"fill\":case \"stroke\":return\"flexible\"}}\nfunction binToString(bin){isBoolean(bin)&&(bin=normalizeBin(bin,void 0));return\"bin\"+keys$jscomp$0(bin).map(p=>isSelectionExtent(bin[p])?varName(\"_\".concat(p,\"_\").concat(entries(bin[p]))):varName(\"_\".concat(p,\"_\").concat(bin[p]))).join(\"\")}function isBinning(bin){return!0===bin||isObject(bin)&&!bin.binned}function isBinned(bin){return\"binned\"===bin||isObject(bin)&&!0===bin.binned}function isSelectionExtent(extent){return null===extent||void 0===extent?void 0:extent.selection}function autoMaxBins(channel){switch(channel){case \"row\":case \"column\":case \"size\":case \"color\":case \"fill\":case \"stroke\":case \"strokeWidth\":case \"opacity\":case \"fillOpacity\":case \"strokeOpacity\":case \"shape\":return 6;\ncase \"strokeDash\":return 4;default:return 10}}function _defineProperty(obj,key,value){key in obj?Object.defineProperty(obj,key,{value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value;return obj}function _classPrivateFieldSet(receiver,privateMap,value){privateMap=privateMap.get(receiver);if(!privateMap)throw new TypeError(\"attempted to set private field on non-instance\");if(privateMap.set)privateMap.set.call(receiver,value);else{if(!privateMap.writable)throw new TypeError(\"attempted to set read only private field\");\nprivateMap.value=value}return value}function invalidSpec(spec){return\"Invalid specification \".concat(JSON.stringify(spec),'. Make sure the specification includes at least one of the following properties: \"mark\", \"layer\", \"facet\", \"hconcat\", \"vconcat\", \"concat\", or \"repeat\".')}function containerSizeNonSingle(name){return\"\".concat(\"width\"==name?\"Width\":\"Height\",' \"container\" only works for single views and layered views.')}function containerSizeNotCompatibleWithAutosize(name){const fitDirection=\"width\"==\nname?\"x\":\"y\";return\"\".concat(\"width\"==name?\"Width\":\"Height\",' \"container\" only works well with autosize \"fit\" or \"fit-').concat(fitDirection,'\".')}function droppingFit(channel){return channel?'Dropping \"fit-'.concat(channel,'\" because spec has discrete ').concat(getSizeChannel(channel),\".\"):'Dropping \"fit\" because spec has discrete size.'}function unknownField(channel){return\"Unknown field for \".concat(channel,\". Cannot calculate view size.\")}function cannotProjectOnChannelWithoutField(channel){return'Cannot project a selection on encoding channel \"'.concat(channel,\n'\", which has no field.')}function cannotProjectAggregate(channel,aggregate){return'Cannot project a selection on encoding channel \"'.concat(channel,'\" as it uses an aggregate function (\"').concat(aggregate,'\").')}function selectionNotSupported(mark){return\"Selection not supported for \".concat(mark,\" yet.\")}function columnsNotSupportByRowCol(type){return'The \"columns\" property cannot be used when \"'.concat(type,'\" has nested row/column.')}function differentParse(field,local,ancestor){return'An ancestor parsed field \"'.concat(field,\n'\" as ').concat(ancestor,\" but a child wants to parse the field as \").concat(local,\".\")}function customFormatTypeNotAllowed(channel){return\"Config.customFormatTypes is not true, thus custom format type and format for channel \".concat(channel,\" are dropped.\")}function droppingColor(type,opt){const {fill,stroke}=opt;return\"Dropping color \".concat(type,\" as the plot also has \").concat(fill&&stroke?\"fill and stroke\":fill?\"fill\":\"stroke\",\".\")}function emptyFieldDef(fieldDef,channel){return\"Dropping \".concat(stringify(fieldDef),\n' from channel \"').concat(channel,'\" since it does not contain any data field, datum, value, or signal.')}function incompatibleChannel(channel,markOrFacet,when){return\"\".concat(channel,' dropped as it is incompatible with \"').concat(markOrFacet,'\"').concat(when?\" when \".concat(when):\"\",\".\")}function invalidEncodingChannel(channel){return\"\".concat(channel,\"-encoding is dropped as \").concat(channel,\" is not a valid encoding channel.\")}function discreteChannelCannotEncode(channel,type){return'Using discrete channel \"'.concat(channel,\n'\" to encode \"').concat(type,'\" field can be misleading as it does not encode ').concat(\"ordinal\"===type?\"order\":\"magnitude\",\".\")}function scalePropertyNotWorkWithScaleType(scaleType,propName,channel){return\"\".concat(channel,\"-scale's \\\"\").concat(propName,'\" is dropped as it does not work with ').concat(scaleType,\" scale.\")}function stepDropped(channel){return'The step for \"'.concat(channel,'\" is dropped because the ').concat(\"width\"===channel?\"x\":\"y\",\" is continuous.\")}function cannotStackRangedMark(channel){return'Cannot stack \"'.concat(channel,\n'\" if there is already \"').concat(channel,'2\".')}function invalidTimeUnit(unitName,value){return\"Invalid \".concat(unitName,\": \").concat(stringify(value),\".\")}function errorBand1DNotSupport(property){return\"1D error band does not support \".concat(property,\".\")}function channelRequiredForBinned(channel){return\"Channel \".concat(channel,' is required for \"binned\" bin.')}function warn(...args){current.warn(...args)}function isDateTime(o){if(o&&isObject(o))for(const part of TIMEUNIT_PARTS)if(part in o)return!0;\nreturn!1}function normalizeMonth(m){isNumeric(m)&&(m=+m);if(isNumber(m))return m-1;{var lowerM=m.toLowerCase();const monthIndex=MONTHS.indexOf(lowerM);if(-1!==monthIndex)return monthIndex;lowerM=lowerM.substr(0,3);lowerM=SHORT_MONTHS.indexOf(lowerM);if(-1!==lowerM)return lowerM;throw Error(invalidTimeUnit(\"month\",m));}}function normalizeDay(d){isNumeric(d)&&(d=+d);if(isNumber(d))return d%7;{var lowerD=d.toLowerCase();const dayIndex=DAYS.indexOf(lowerD);if(-1!==dayIndex)return dayIndex;lowerD=lowerD.substr(0,\n3);lowerD=SHORT_DAYS.indexOf(lowerD);if(-1!==lowerD)return lowerD;throw Error(invalidTimeUnit(\"day\",d));}}function dateTimeParts(d,normalize){const parts=[];normalize&&void 0!==d.day&&1<keys$jscomp$0(d).length&&(warn(\"Dropping day from datetime \".concat(stringify(d),\" as day cannot be combined with other units.\")),d=duplicate(d),delete d.day);void 0!==d.year?parts.push(d.year):parts.push(2012);if(void 0!==d.month){var month=normalize?normalizeMonth(d.month):d.month;parts.push(month)}else if(void 0!==\nd.quarter){if(normalize)if(month=d.quarter,isNumeric(month)&&(month=+month),isNumber(month))4<month&&warn(invalidTimeUnit(\"quarter\",month)),--month;else throw Error(invalidTimeUnit(\"quarter\",month));else month=d.quarter;parts.push(isNumber(month)?3*month:month+\"*3\")}else parts.push(0);void 0!==d.date?parts.push(d.date):void 0!==d.day?(normalize=normalize?normalizeDay(d.day):d.day,parts.push(isNumber(normalize)?normalize+1:normalize+\"+1\")):parts.push(1);for(const timeUnit of[\"hours\",\"minutes\",\"seconds\",\n\"milliseconds\"])normalize=d[timeUnit],parts.push(\"undefined\"===typeof normalize?0:normalize);return parts}function dateTimeToExpr(d){const string=dateTimeParts(d,!0).join(\", \");return d.utc?\"utc(\".concat(string,\")\"):\"datetime(\".concat(string,\")\")}function dateTimeToTimestamp(d){const parts=dateTimeParts(d,!0);return d.utc?+new Date(Date.UTC(...parts)):+new Date(...parts)}function getTimeUnitParts(timeUnit){const parts=[];for(const part of TIMEUNIT_PARTS)containsTimeUnit(timeUnit,part)&&parts.push(part);\nreturn parts}function containsTimeUnit(fullTimeUnit,timeUnit){const index=fullTimeUnit.indexOf(timeUnit);return 0>index||0<index&&\"seconds\"===timeUnit&&\"i\"===fullTimeUnit.charAt(index-1)||fullTimeUnit.length>index+3&&\"day\"===timeUnit&&\"o\"===fullTimeUnit.charAt(index+3)||0<index&&\"year\"===timeUnit&&\"f\"===fullTimeUnit.charAt(index-1)?!1:!0}function timeUnitSpecifierExpression(timeUnit){if(timeUnit)return timeUnit=getTimeUnitParts(timeUnit),\"timeUnitSpecifier(\".concat(fastJsonStableStringify(timeUnit),\n\", \").concat(fastJsonStableStringify(VEGALITE_TIMEFORMAT),\")\")}function normalizeTimeUnit(timeUnit){if(timeUnit){var params;isString(timeUnit)?params={unit:timeUnit}:isObject(timeUnit)&&(params=Object.assign({},timeUnit,timeUnit.unit?{unit:timeUnit.unit}:{}));params.unit.startsWith(\"utc\")&&(params.utc=!0,params.unit=params.unit.substr(3));return params}}function timeUnitToString(tu){var $jscomp$destructuring$var66=normalizeTimeUnit(tu);tu=Object.assign({},$jscomp$destructuring$var66);$jscomp$destructuring$var66=\n$jscomp$destructuring$var66.utc;const rest=(delete tu.utc,tu);return rest.unit?($jscomp$destructuring$var66?\"utc\":\"\")+keys$jscomp$0(rest).map(p=>varName(\"\".concat(\"unit\"===p?\"\":\"_\".concat(p,\"_\")).concat(rest[p]))).join(\"\"):($jscomp$destructuring$var66?\"utc\":\"\")+\"timeunit\"+keys$jscomp$0(rest).map(p=>varName(\"_\".concat(p,\"_\").concat(rest[p]))).join(\"\")}function isSignalRef(o){return o&&!!o.signal}function isVgRangeStep(range){return!!range.step}function isDataRefDomain(domain){return isArray(domain)?\n!1:\"field\"in domain&&\"data\"in domain}function isFieldEqualPredicate(predicate){return predicate&&!!predicate.field&&void 0!==predicate.equal}function isFieldLTPredicate(predicate){return predicate&&!!predicate.field&&void 0!==predicate.lt}function isFieldLTEPredicate(predicate){return predicate&&!!predicate.field&&void 0!==predicate.lte}function isFieldGTPredicate(predicate){return predicate&&!!predicate.field&&void 0!==predicate.gt}function isFieldGTEPredicate(predicate){return predicate&&!!predicate.field&&\nvoid 0!==predicate.gte}function isFieldRangePredicate(predicate){return predicate&&predicate.field&&(isArray(predicate.range)&&2===predicate.range.length||isSignalRef(predicate.range))?!0:!1}function isFieldOneOfPredicate(predicate){return predicate&&!!predicate.field&&(isArray(predicate.oneOf)||isArray(predicate.in))}function isFieldPredicate(predicate){return isFieldOneOfPredicate(predicate)||isFieldEqualPredicate(predicate)||isFieldRangePredicate(predicate)||isFieldLTPredicate(predicate)||isFieldGTPredicate(predicate)||\nisFieldLTEPredicate(predicate)||isFieldGTEPredicate(predicate)}function predicateValueExpr(v,timeUnit){return valueExpr(v,{timeUnit,wrapTime:!0})}function predicateValuesExpr(vals,timeUnit){return vals.map(v=>predicateValueExpr(v,timeUnit))}function fieldFilterExpression(predicate,useInRange){useInRange=void 0===useInRange?!0:useInRange;var _normalizeTimeUnit,{field}=predicate;const timeUnit=null===(_normalizeTimeUnit=normalizeTimeUnit(predicate.timeUnit))||void 0===_normalizeTimeUnit?void 0:_normalizeTimeUnit.unit;\nif(timeUnit){{({end:_normalizeTimeUnit}={end:!1});field=accessPathWithDatum(field);const utc=timeUnit.startsWith(\"utc\")?\"utc\":\"\";const dateExpr={};for(JSCompiler_temp of TIMEUNIT_PARTS)if(containsTimeUnit(timeUnit,JSCompiler_temp)){var lastTimeUnit=JSCompiler_temp;lastTimeUnit=\"quarter\"===lastTimeUnit?\"(\".concat(utc,\"quarter(\").concat(field,\")-1)\"):\"\".concat(utc).concat(lastTimeUnit,\"(\").concat(field,\")\");dateExpr[JSCompiler_temp]=lastTimeUnit;lastTimeUnit=JSCompiler_temp}_normalizeTimeUnit&&(dateExpr[lastTimeUnit]+=\n\"+1\");var JSCompiler_temp=dateExpr;_normalizeTimeUnit=dateTimeParts(JSCompiler_temp,!1).join(\", \");JSCompiler_temp=JSCompiler_temp.utc?\"utc(\".concat(_normalizeTimeUnit,\")\"):\"datetime(\".concat(_normalizeTimeUnit,\")\")}JSCompiler_temp=\"time(\"+JSCompiler_temp+\")\"}else JSCompiler_temp=vgField(predicate,{expr:\"datum\"});if(isFieldEqualPredicate(predicate))return JSCompiler_temp+\"\\x3d\\x3d\\x3d\"+predicateValueExpr(predicate.equal,timeUnit);if(isFieldLTPredicate(predicate))return useInRange=predicate.lt,\"\".concat(JSCompiler_temp,\n\"\\x3c\").concat(predicateValueExpr(useInRange,timeUnit));if(isFieldGTPredicate(predicate))return useInRange=predicate.gt,\"\".concat(JSCompiler_temp,\"\\x3e\").concat(predicateValueExpr(useInRange,timeUnit));if(isFieldLTEPredicate(predicate))return useInRange=predicate.lte,\"\".concat(JSCompiler_temp,\"\\x3c\\x3d\").concat(predicateValueExpr(useInRange,timeUnit));if(isFieldGTEPredicate(predicate))return useInRange=predicate.gte,\"\".concat(JSCompiler_temp,\"\\x3e\\x3d\").concat(predicateValueExpr(useInRange,timeUnit));\nif(isFieldOneOfPredicate(predicate))return\"indexof([\".concat(predicateValuesExpr(predicate.oneOf,timeUnit).join(\",\"),\"], \").concat(JSCompiler_temp,\") !\\x3d\\x3d -1\");if(predicate&&predicate.field&&void 0!==predicate.valid)return fieldValidPredicate(JSCompiler_temp,predicate.valid);if(isFieldRangePredicate(predicate)){({range:_normalizeTimeUnit}=predicate);predicate=isSignalRef(_normalizeTimeUnit)?{signal:\"\".concat(_normalizeTimeUnit.signal,\"[0]\")}:_normalizeTimeUnit[0];_normalizeTimeUnit=isSignalRef(_normalizeTimeUnit)?\n{signal:\"\".concat(_normalizeTimeUnit.signal,\"[1]\")}:_normalizeTimeUnit[1];if(null!==predicate&&null!==_normalizeTimeUnit&&useInRange)return\"inrange(\"+JSCompiler_temp+\", [\"+predicateValueExpr(predicate,timeUnit)+\", \"+predicateValueExpr(_normalizeTimeUnit,timeUnit)+\"])\";useInRange=[];null!==predicate&&useInRange.push(\"\".concat(JSCompiler_temp,\" \\x3e\\x3d \").concat(predicateValueExpr(predicate,timeUnit)));null!==_normalizeTimeUnit&&useInRange.push(\"\".concat(JSCompiler_temp,\" \\x3c\\x3d \").concat(predicateValueExpr(_normalizeTimeUnit,\ntimeUnit)));return 0<useInRange.length?useInRange.join(\" \\x26\\x26 \"):\"true\"}throw Error(\"Invalid field predicate: \".concat(JSON.stringify(predicate)));}function fieldValidPredicate(fieldExpr,valid){return void 0===valid||valid?\"isValid(\".concat(fieldExpr,\") \\x26\\x26 isFinite(+\").concat(fieldExpr,\")\"):\"!isValid(\".concat(fieldExpr,\") || !isFinite(+\").concat(fieldExpr,\")\")}function normalizePredicate(f){if(isFieldPredicate(f)&&f.timeUnit){var _normalizeTimeUnit2;return Object.assign({},f,{timeUnit:null===\n(_normalizeTimeUnit2=normalizeTimeUnit(f.timeUnit))||void 0===_normalizeTimeUnit2?void 0:_normalizeTimeUnit2.unit})}return f}function getFullName(type){if(type)switch(type=type.toLowerCase(),type){case \"q\":case \"quantitative\":return\"quantitative\";case \"t\":case \"temporal\":return\"temporal\";case \"o\":case \"ordinal\":return\"ordinal\";case \"n\":case \"nominal\":return\"nominal\";case \"geojson\":return\"geojson\"}}function isSelectionDomain(domain){return null===domain||void 0===domain?void 0:domain.selection}function scaleTypeSupportProperty(scaleType,\npropName){switch(propName){case \"type\":case \"domain\":case \"reverse\":case \"range\":return!0;case \"scheme\":case \"interpolate\":return!contains([\"point\",\"band\",\"identity\"],scaleType);case \"bins\":return!contains([\"point\",\"band\",\"identity\",\"ordinal\"],scaleType);case \"round\":return scaleType in CONTINUOUS_TO_CONTINUOUS_INDEX||\"band\"===scaleType||\"point\"===scaleType;case \"padding\":case \"rangeMin\":case \"rangeMax\":return scaleType in CONTINUOUS_TO_CONTINUOUS_INDEX||contains([\"point\",\"band\"],scaleType);case \"paddingOuter\":case \"align\":return contains([\"point\",\n\"band\"],scaleType);case \"paddingInner\":return\"band\"===scaleType;case \"domainMax\":case \"domainMid\":case \"domainMin\":case \"clamp\":return scaleType in CONTINUOUS_TO_CONTINUOUS_INDEX;case \"nice\":return scaleType in CONTINUOUS_TO_CONTINUOUS_INDEX||\"quantize\"===scaleType||\"threshold\"===scaleType;case \"exponent\":return\"pow\"===scaleType;case \"base\":return\"log\"===scaleType;case \"constant\":return\"symlog\"===scaleType;case \"zero\":return scaleType in CONTINUOUS_DOMAIN_INDEX&&!contains([\"log\",\"time\",\"utc\",\"threshold\",\n\"quantile\"],scaleType)}}function channelScalePropertyIncompatability(channel,propName){switch(propName){case \"interpolate\":case \"scheme\":case \"domainMid\":if(!isColorChannel(channel))return'Cannot use the scale property \"'.concat(channel,'\" with non-color channel.')}}function channelSupportScaleType(channel,scaleType){if(!SCALE_CHANNEL_INDEX[channel])return!1;switch(channel){case \"x\":case \"y\":case \"theta\":case \"radius\":return scaleType in CONTINUOUS_TO_CONTINUOUS_INDEX||contains([\"band\",\"point\"],scaleType);\ncase \"size\":case \"strokeWidth\":case \"opacity\":case \"fillOpacity\":case \"strokeOpacity\":case \"angle\":return scaleType in CONTINUOUS_TO_CONTINUOUS_INDEX||scaleType in CONTINUOUS_TO_DISCRETE_INDEX||contains([\"band\",\"point\",\"ordinal\"],scaleType);case \"color\":case \"fill\":case \"stroke\":return\"band\"!==scaleType;case \"strokeDash\":return\"ordinal\"===scaleType||scaleType in CONTINUOUS_TO_DISCRETE_INDEX;case \"shape\":return\"ordinal\"===scaleType}}function isExprRef(o){return o&&!!o.expr}function replaceExprRefInIndex(index){const props=\nkeys$jscomp$0(index||{}),newIndex={};for(const prop of props)newIndex[prop]=signalRefOrValue(index[prop]);return newIndex}function isPathMark(m){return contains([\"line\",\"area\",\"trail\"],m)}function isMarkDef(mark){return mark.type}function midPointRefWithPositionInvalidTest(params){const {channel,channelDef,markDef,scale,config}=params;params=midPoint(params);return isFieldDef(channelDef)&&!isCountingAggregateOp(channelDef.aggregate)&&scale&&scale.get(\"type\")in CONTINUOUS_TO_CONTINUOUS_INDEX&&!1===\nscale.get(\"zero\")?wrapPositionInvalidTest({fieldDef:channelDef,channel,markDef,ref:params,config}):params}function wrapPositionInvalidTest($jscomp$destructuring$var70){var {fieldDef,channel,markDef,ref,config}=$jscomp$destructuring$var70;if(isPathMark(markDef.type)||null===getMarkPropOrConfig(\"invalid\",markDef,config))return ref;{$jscomp$destructuring$var70=fieldInvalidPredicate(fieldDef,!0);const zeroValueRef=\"y\"===getMainRangeChannel(channel)?{field:{group:\"height\"}}:{value:0};$jscomp$destructuring$var70=\nObject.assign({},{test:$jscomp$destructuring$var70},zeroValueRef)}return[$jscomp$destructuring$var70,ref]}function fieldInvalidPredicate(field,invalid){invalid=void 0===invalid?!0:invalid;return fieldValidPredicate(isString(field)?field:vgField(field,{expr:\"datum\"}),!invalid)}function valueRefForFieldOrDatumDef(fieldDef,scaleName,opt,encode){const ref={};scaleName&&(ref.scale=scaleName);isDatumDef(fieldDef)?({datum:fieldDef}=fieldDef,isDateTime(fieldDef)?ref.signal=dateTimeToExpr(fieldDef):isSignalRef(fieldDef)?\nref.signal=fieldDef.signal:isExprRef(fieldDef)?ref.signal=fieldDef.expr:ref.value=fieldDef):ref.field=vgField(fieldDef,opt);if(encode){const {offset,band}=encode;offset&&(ref.offset=offset);band&&(ref.band=band)}return ref}function interpolatedSignalRef($jscomp$destructuring$var71){var {scaleName,fieldOrDatumDef,fieldOrDatumDef2,offset,startSuffix,band=.5}=$jscomp$destructuring$var71,expr=0<band&&1>band?\"datum\":void 0;$jscomp$destructuring$var71=vgField(fieldOrDatumDef,{expr,suffix:startSuffix});\nconst end=void 0!==fieldOrDatumDef2?vgField(fieldOrDatumDef2,{expr}):vgField(fieldOrDatumDef,{suffix:\"end\",expr});expr={};0===band||1===band?(expr.scale=scaleName,expr.field=0===band?$jscomp$destructuring$var71:end):($jscomp$destructuring$var71=\"\".concat(band,\" * \").concat($jscomp$destructuring$var71,\" + \").concat(1-band,\" * \").concat(end),expr.signal='scale(\"'.concat(scaleName,'\", ').concat($jscomp$destructuring$var71,\")\"));offset&&(expr.offset=offset);return expr}function midPoint($jscomp$destructuring$var72){var {channel,\nchannelDef,channel2Def,markDef,config,scaleName,scale,stack,offset,defaultRef,band}=$jscomp$destructuring$var72;if(channelDef){if(isFieldOrDatumDef(channelDef)){var _ref,_band2;if(isTypedFieldDef(channelDef)){var _band;band=null!==(_band=band)&&void 0!==_band?_band:getBand({channel,fieldDef:channelDef,fieldDef2:channel2Def,markDef,stack,config,isMidPoint:!0});const {bin,timeUnit,type}=channelDef;if(isBinning(bin)||band&&timeUnit&&\"temporal\"===type)return stack&&stack.impute?valueRefForFieldOrDatumDef(channelDef,\nscaleName,{binSuffix:\"mid\"},{offset}):band?interpolatedSignalRef({scaleName,fieldOrDatumDef:channelDef,band,offset}):valueRefForFieldOrDatumDef(channelDef,scaleName,binRequiresRange(channelDef,channel)?{binSuffix:\"range\"}:{},{offset});if(isBinned(bin)){if(isFieldDef(channel2Def))return interpolatedSignalRef({scaleName,fieldOrDatumDef:channelDef,fieldOrDatumDef2:channel2Def,band,offset});warn(channelRequiredForBinned(\"x\"===channel?\"x2\":\"y2\"))}}$jscomp$destructuring$var72=null===scale||void 0===scale?\nvoid 0:scale.get(\"type\");return valueRefForFieldOrDatumDef(channelDef,scaleName,$jscomp$destructuring$var72 in DISCRETE_DOMAIN_INDEX?{binSuffix:\"range\"}:{},{offset,band:\"band\"===$jscomp$destructuring$var72?null!==(_ref=null!==(_band2=band)&&void 0!==_band2?_band2:channelDef.band)&&void 0!==_ref?_ref:.5:void 0})}if(isValueDef(channelDef))return _ref=offset?{offset}:{},Object.assign({},widthHeightValueOrSignalRef(channel,channelDef.value),_ref)}\"function\"===typeof defaultRef&&(defaultRef=defaultRef());\nreturn defaultRef?Object.assign({},defaultRef,offset?{offset}:{}):defaultRef}function widthHeightValueOrSignalRef(channel,value){return contains([\"x\",\"x2\"],channel)&&\"width\"===value?{field:{group:\"width\"}}:contains([\"y\",\"y2\"],channel)&&\"height\"===value?{field:{group:\"height\"}}:signalOrValueRef(value)}function isCustomFormatType(formatType){return formatType&&\"number\"!==formatType&&\"time\"!==formatType}function customFormatExpr(formatType,field,format){return\"\".concat(formatType,\"(\").concat(field).concat(format?\n\", \".concat(JSON.stringify(format)):\"\",\")\")}function formatSignalRef($jscomp$destructuring$var73){var {fieldOrDatumDef,format,formatType,expr,normalizeStack,config}=$jscomp$destructuring$var73;if(isCustomFormatType(formatType))return formatCustomType({fieldOrDatumDef,format,formatType,expr,config});$jscomp$destructuring$var73=fieldToFormat(fieldOrDatumDef,expr,normalizeStack);if(isFieldOrDatumDefForTimeFormat(fieldOrDatumDef)){var _normalizeTimeUnit,_fieldOrDatumDef$scal;var timeUnit=isFieldDef(fieldOrDatumDef)?\nnull===(_normalizeTimeUnit=normalizeTimeUnit(fieldOrDatumDef.timeUnit))||void 0===_normalizeTimeUnit?void 0:_normalizeTimeUnit.unit:void 0,format$jscomp$0=format,rawTimeFormat=config.timeFormat;_normalizeTimeUnit=isScaleFieldDef(fieldOrDatumDef)&&(null===(_fieldOrDatumDef$scal=fieldOrDatumDef.scale)||void 0===_fieldOrDatumDef$scal?void 0:_fieldOrDatumDef$scal.type)===ScaleType.UTC;!timeUnit||format$jscomp$0?(format$jscomp$0=isString(format$jscomp$0)?format$jscomp$0:rawTimeFormat,$jscomp$destructuring$var73=\n\"\".concat(_normalizeTimeUnit?\"utc\":\"time\",\"Format(\").concat($jscomp$destructuring$var73,\", '\").concat(format$jscomp$0,\"')\")):timeUnit?(_fieldOrDatumDef$scal=timeUnitSpecifierExpression(timeUnit),timeUnit=_normalizeTimeUnit||timeUnit.startsWith(\"utc\"),$jscomp$destructuring$var73=\"\".concat(timeUnit?\"utc\":\"time\",\"Format(\").concat($jscomp$destructuring$var73,\", \").concat(_fieldOrDatumDef$scal,\")\")):$jscomp$destructuring$var73=void 0;return $jscomp$destructuring$var73?{signal:$jscomp$destructuring$var73}:\nvoid 0}format=numberFormat(channelDefType(fieldOrDatumDef),format,config);return isFieldDef(fieldOrDatumDef)&&isBinning(fieldOrDatumDef.bin)?(_fieldOrDatumDef$scal=vgField(fieldOrDatumDef,{expr,binSuffix:\"end\"}),{signal:binFormatExpression($jscomp$destructuring$var73,_fieldOrDatumDef$scal,format,formatType,config)}):format||\"quantitative\"===channelDefType(fieldOrDatumDef)?{signal:\"\".concat(formatExpr($jscomp$destructuring$var73,format))}:{signal:\"isValid(\".concat($jscomp$destructuring$var73,\") ? \").concat($jscomp$destructuring$var73,\n' : \"\"+').concat($jscomp$destructuring$var73)}}function fieldToFormat(fieldOrDatumDef,expr,normalizeStack){if(isFieldDef(fieldOrDatumDef))return normalizeStack?\"\".concat(vgField(fieldOrDatumDef,{expr,suffix:\"end\"}),\"-\").concat(vgField(fieldOrDatumDef,{expr,suffix:\"start\"})):vgField(fieldOrDatumDef,{expr});({datum:fieldOrDatumDef}=fieldOrDatumDef);fieldOrDatumDef=isDateTime(fieldOrDatumDef)?dateTimeToExpr(fieldOrDatumDef):\"\".concat(JSON.stringify(fieldOrDatumDef));return fieldOrDatumDef}function formatCustomType($jscomp$destructuring$var74){var {fieldOrDatumDef,\nformat,formatType,expr,normalizeStack,config,field}=$jscomp$destructuring$var74,_field;field=null!==(_field=field)&&void 0!==_field?_field:fieldToFormat(fieldOrDatumDef,expr,normalizeStack);return isFieldDef(fieldOrDatumDef)&&isBinning(fieldOrDatumDef.bin)?($jscomp$destructuring$var74=vgField(fieldOrDatumDef,{expr,binSuffix:\"end\"}),{signal:binFormatExpression(field,$jscomp$destructuring$var74,format,formatType,config)}):{signal:customFormatExpr(formatType,field,format)}}function guideFormat(fieldOrDatumDef,\ntype,format,formatType,config,omitTimeFormatConfig){if(!isCustomFormatType(formatType)){if(isFieldOrDatumDefForTimeFormat(fieldOrDatumDef)){var _normalizeTimeUnit2;fieldOrDatumDef=isFieldDef(fieldOrDatumDef)?null===(_normalizeTimeUnit2=normalizeTimeUnit(fieldOrDatumDef.timeUnit))||void 0===_normalizeTimeUnit2?void 0:_normalizeTimeUnit2.unit:void 0;format=format?format:fieldOrDatumDef?{signal:timeUnitSpecifierExpression(fieldOrDatumDef)}:omitTimeFormatConfig?void 0:config.timeFormat;return format}return numberFormat(type,\nformat,config)}}function guideFormatType(formatType,fieldOrDatumDef,scaleType){if(formatType&&(isSignalRef(formatType)||\"number\"===formatType||\"time\"===formatType))return formatType;if(isFieldOrDatumDefForTimeFormat(fieldOrDatumDef)&&\"time\"!==scaleType&&\"utc\"!==scaleType)return\"time\"}function numberFormat(type,specifiedFormat,config){if(isString(specifiedFormat))return specifiedFormat;if(\"quantitative\"===type)return config.numberFormat}function formatExpr(field,format){return\"format(\".concat(field,\n', \"').concat(format||\"\",'\")')}function binNumberFormatExpr(field,format,formatType,config){var _ref;return isCustomFormatType(formatType)?customFormatExpr(formatType,field,format):formatExpr(field,null!==(_ref=isString(format)?format:void 0)&&void 0!==_ref?_ref:config.numberFormat)}function binFormatExpression(startField,endField,format,formatType,config){const start=binNumberFormatExpr(startField,format,formatType,config);endField=binNumberFormatExpr(endField,format,formatType,config);return\"\".concat(fieldValidPredicate(startField,\n!1),' ? \"null\" : ').concat(start,' + \"').concat(\" – \",'\" + ').concat(endField)}function isSortField(sort){return!!sort&&(\"count\"===sort.op||!!sort.field)}function isSortArray(sort){return!!sort&&isArray(sort)}function isFacetMapping(f){return\"row\"in f||\"column\"in f}function toFieldDefBase(fieldDef){const {field,timeUnit,bin,aggregate}=fieldDef;return Object.assign({},timeUnit?{timeUnit}:{},bin?{bin}:{},aggregate?{aggregate}:{},{field})}function getBand($jscomp$destructuring$var75){var {channel,fieldDef,\nfieldDef2,markDef:mark,stack,config,isMidPoint}=$jscomp$destructuring$var75;if(isFieldOrDatumDef(fieldDef)&&void 0!==fieldDef.band)return fieldDef.band;if(isFieldDef(fieldDef)){const {timeUnit,bin}=fieldDef;if(timeUnit&&!fieldDef2)return isMidPoint?getMarkConfig(\"timeUnitBandPosition\",mark,config):contains([\"rect\",\"bar\",\"image\",\"arc\"],mark.type)?getMarkConfig(\"timeUnitBand\",mark,config):0;if(isBinning(bin))return contains([\"rect\",\"bar\",\"image\",\"arc\"],mark.type)&&!isMidPoint?1:.5}if((null===stack||\nvoid 0===stack?void 0:stack.fieldChannel)===channel&&isMidPoint)return.5}function hasBand(channel,fieldDef,fieldDef2,stack,markDef,config){return isBinning(fieldDef.bin)||fieldDef.timeUnit&&isTypedFieldDef(fieldDef)&&\"temporal\"===fieldDef.type?!!getBand({channel,fieldDef,fieldDef2,stack,markDef,config}):!1}function hasConditionalFieldDef(channelDef){channelDef=channelDef&&channelDef.condition;return!!channelDef&&!isArray(channelDef)&&isFieldDef(channelDef)}function hasConditionalFieldOrDatumDef(channelDef){channelDef=\nchannelDef&&channelDef.condition;return!!channelDef&&!isArray(channelDef)&&isFieldOrDatumDef(channelDef)}function isFieldDef(channelDef){return!!channelDef&&(!!channelDef.field||\"count\"===channelDef.aggregate)}function channelDefType(channelDef){return channelDef&&channelDef.type}function isDatumDef(channelDef){return!!channelDef&&\"datum\"in channelDef}function isContinuousFieldOrDatumDef(cd){return isTypedFieldDef(cd)&&!isDiscrete(cd)||isNumericDataDef(cd)}function isNumericDataDef(cd){return isDatumDef(cd)&&\nisNumber(cd.datum)}function isFieldOrDatumDef(channelDef){return isFieldDef(channelDef)||isDatumDef(channelDef)}function isTypedFieldDef(channelDef){return!!channelDef&&(\"field\"in channelDef||\"count\"===channelDef.aggregate)&&\"type\"in channelDef}function isValueDef(channelDef){return channelDef&&\"value\"in channelDef&&\"value\"in channelDef}function isScaleFieldDef(channelDef){return!!channelDef&&(\"scale\"in channelDef||\"sort\"in channelDef)}function isPositionFieldOrDatumDef(channelDef){return channelDef&&\n(\"axis\"in channelDef||\"stack\"in channelDef||\"impute\"in channelDef)}function isStringFieldOrDatumDef(channelDef){return!!channelDef&&(\"format\"in channelDef||\"formatType\"in channelDef)}function toStringFieldDef(fieldDef){return omit(fieldDef,[\"legend\",\"axis\",\"header\",\"scale\"])}function vgField(fieldDef,opt){opt=void 0===opt?{}:opt;let field=fieldDef.field;const prefix=opt.prefix;let suffix=opt.suffix,argAccessor=\"\";if(\"count\"===fieldDef.aggregate)field=internalField(\"count\");else{let fn;if(!opt.nofn)if(\"op\"in\nfieldDef)fn=fieldDef.op;else{const {bin,aggregate,timeUnit}=fieldDef;if(isBinning(bin)){var _opt$binSuffix,_opt$suffix;fn=binToString(bin);suffix=(null!==(_opt$binSuffix=opt.binSuffix)&&void 0!==_opt$binSuffix?_opt$binSuffix:\"\")+(null!==(_opt$suffix=opt.suffix)&&void 0!==_opt$suffix?_opt$suffix:\"\")}else if(aggregate)isArgmaxDef(aggregate)?(argAccessor='[\"'.concat(field,'\"]'),field=\"argmax_\".concat(aggregate.argmax)):isArgminDef(aggregate)?(argAccessor='[\"'.concat(field,'\"]'),field=\"argmin_\".concat(aggregate.argmin)):\nfn=String(aggregate);else if(timeUnit){var _opt$suffix2;fn=timeUnitToString(timeUnit);suffix=(!contains([\"range\",\"mid\"],opt.binSuffix)&&opt.binSuffix||\"\")+(null!==(_opt$suffix2=opt.suffix)&&void 0!==_opt$suffix2?_opt$suffix2:\"\")}}fn&&(field=field?\"\".concat(fn,\"_\").concat(field):fn)}suffix&&(field=\"\".concat(field,\"_\").concat(suffix));prefix&&(field=\"\".concat(prefix,\"_\").concat(field));return opt.forAs?removePathFromField(field):opt.expr?flatAccessWithDatum(field,opt.expr)+argAccessor:replacePathInField(field)+\nargAccessor}function isDiscrete(def){switch(def.type){case \"nominal\":case \"ordinal\":case \"geojson\":return!0;case \"quantitative\":return isFieldDef(def)&&!!def.bin;case \"temporal\":return!1}throw Error('Invalid field type \"'.concat(def.type,'\".'));}function verbalTitleFormatter(fieldDef,config){const {field,bin,timeUnit,aggregate}=fieldDef;if(\"count\"===aggregate)return config.countTitle;if(isBinning(bin))return\"\".concat(field,\" (binned)\");if(timeUnit){var _normalizeTimeUnit;if(fieldDef=null===(_normalizeTimeUnit=\nnormalizeTimeUnit(timeUnit))||void 0===_normalizeTimeUnit?void 0:_normalizeTimeUnit.unit)return\"\".concat(field,\" (\").concat(getTimeUnitParts(fieldDef).join(\"-\"),\")\")}else if(aggregate)return isArgmaxDef(aggregate)?\"\".concat(field,\" for max \").concat(aggregate.argmax):isArgminDef(aggregate)?\"\".concat(field,\" for min \").concat(aggregate.argmin):\"\".concat(titleCase(aggregate),\" of \").concat(field);return field}function title$jscomp$0(fieldOrDatumDef,config,$jscomp$destructuring$var76){var {allowDisabling,\nincludeDefault=!0}=$jscomp$destructuring$var76,_getGuide;$jscomp$destructuring$var76=null===(_getGuide=getGuide(fieldOrDatumDef))||void 0===_getGuide?void 0:_getGuide.title;if(!isFieldDef(fieldOrDatumDef))return $jscomp$destructuring$var76;config=includeDefault?titleFormatter(fieldOrDatumDef,config):void 0;if(allowDisabling)return getFirstDefined($jscomp$destructuring$var76,fieldOrDatumDef.title,config);var _ref;return null!==(_ref=null!==$jscomp$destructuring$var76&&void 0!==$jscomp$destructuring$var76?\n$jscomp$destructuring$var76:fieldOrDatumDef.title)&&void 0!==_ref?_ref:config}function getGuide(fieldDef){if(isPositionFieldOrDatumDef(fieldDef)&&fieldDef.axis)return fieldDef.axis;if(fieldDef&&\"legend\"in fieldDef&&fieldDef.legend)return fieldDef.legend;if(fieldDef&&\"header\"in fieldDef&&fieldDef.header)return fieldDef.header}function getFormatMixins(fieldDef){if(isStringFieldOrDatumDef(fieldDef)){const {format,formatType}=fieldDef;return{format,formatType}}{var _getGuide2;fieldDef=null!==(_getGuide2=\ngetGuide(fieldDef))&&void 0!==_getGuide2?_getGuide2:{};const {format,formatType}=fieldDef;return{format,formatType}}}function defaultType(fieldDef,channel){var _fieldDef$scale;switch(channel){case \"latitude\":case \"longitude\":return\"quantitative\";case \"row\":case \"column\":case \"facet\":case \"shape\":case \"strokeDash\":return\"nominal\";case \"order\":return\"ordinal\"}if(\"sort\"in fieldDef&&isArray(fieldDef.sort))return\"ordinal\";const {aggregate,bin,timeUnit}=fieldDef;if(timeUnit)return\"temporal\";if(bin||aggregate&&\n!isArgmaxDef(aggregate)&&!isArgminDef(aggregate))return\"quantitative\";if(isScaleFieldDef(fieldDef)&&(null===(_fieldDef$scale=fieldDef.scale)||void 0===_fieldDef$scale?0:_fieldDef$scale.type))switch(SCALE_CATEGORY_INDEX[fieldDef.scale.type]){case \"numeric\":case \"discretizing\":return\"quantitative\";case \"time\":return\"temporal\"}return\"nominal\"}function getFieldDef(channelDef){if(isFieldDef(channelDef))return channelDef;if(hasConditionalFieldDef(channelDef))return channelDef.condition}function getFieldOrDatumDef(channelDef){if(isFieldOrDatumDef(channelDef))return channelDef;\nif(hasConditionalFieldOrDatumDef(channelDef))return channelDef.condition}function initChannelDef(channelDef,channel,config,opt){opt=void 0===opt?{}:opt;return isString(channelDef)||isNumber(channelDef)||isBoolean(channelDef)?(config=isString(channelDef)?\"string\":isNumber(channelDef)?\"number\":\"boolean\",channel=\"Channel \".concat(channel,\" is a \").concat(config,\". Converted to {value: \").concat(stringify(channelDef),\"}.\"),warn(channel),{value:channelDef}):isFieldOrDatumDef(channelDef)?initFieldOrDatumDef(channelDef,\nchannel,config,opt):hasConditionalFieldOrDatumDef(channelDef)?Object.assign({},channelDef,{condition:initFieldOrDatumDef(channelDef.condition,channel,config,opt)}):channelDef}function initFieldOrDatumDef(fd,channel,config,opt){if(isStringFieldOrDatumDef(fd)){var $jscomp$destructuring$var78=Object.assign({},fd),formatType=fd.formatType;$jscomp$destructuring$var78=(delete $jscomp$destructuring$var78.format,delete $jscomp$destructuring$var78.formatType,$jscomp$destructuring$var78);if(isCustomFormatType(formatType)&&\n!config.customFormatTypes)return warn(customFormatTypeNotAllowed(channel)),initFieldOrDatumDef($jscomp$destructuring$var78,channel,config,opt)}else if((formatType=isPositionFieldOrDatumDef(fd)?\"axis\":fd&&\"legend\"in fd?\"legend\":fd&&\"header\"in fd?\"header\":null)&&fd[formatType]){var $jscomp$destructuring$var79=fd[formatType];$jscomp$destructuring$var78=Object.assign({},$jscomp$destructuring$var79);$jscomp$destructuring$var79=$jscomp$destructuring$var79.formatType;$jscomp$destructuring$var78=(delete $jscomp$destructuring$var78.format,\ndelete $jscomp$destructuring$var78.formatType,$jscomp$destructuring$var78);if(isCustomFormatType($jscomp$destructuring$var79)&&!config.customFormatTypes)return warn(customFormatTypeNotAllowed(channel)),initFieldOrDatumDef(Object.assign({},fd,{[formatType]:$jscomp$destructuring$var78}),channel,config,opt)}if(isFieldDef(fd))return initFieldDef(fd,channel,opt);channel=fd.type;channel||({datum:channel}=fd,channel=isNumber(channel)?\"quantitative\":isString(channel)?\"nominal\":isDateTime(channel)?\"temporal\":\nvoid 0,fd=Object.assign({},fd,{type:channel}));return fd}function initFieldDef(fd,channel,$jscomp$destructuring$var81){({compositeMark:$jscomp$destructuring$var81=!1}=void 0===$jscomp$destructuring$var81?{}:$jscomp$destructuring$var81);const {aggregate,timeUnit,bin,field}=fd;fd=Object.assign({},fd);$jscomp$destructuring$var81||!aggregate||isAggregateOp(aggregate)||isArgmaxDef(aggregate)||isArgminDef(aggregate)||(warn('Invalid aggregation operator \"'.concat(aggregate,'\".')),delete fd.aggregate);timeUnit&&\n(fd.timeUnit=normalizeTimeUnit(timeUnit));field&&(fd.field=\"\".concat(field));isBinning(bin)&&(fd.bin=normalizeBin(bin,channel));!isBinned(bin)||channel in POSITION_SCALE_CHANNEL_INDEX||warn(\"Channel \".concat(channel,' should not be used with \"binned\" bin.'));if(isTypedFieldDef(fd)){({type:$jscomp$destructuring$var81}=fd);var fullType=getFullName($jscomp$destructuring$var81);$jscomp$destructuring$var81!==fullType&&(fd.type=fullType);\"quantitative\"!==$jscomp$destructuring$var81&&isCountingAggregateOp(aggregate)&&\n($jscomp$destructuring$var81='Invalid field type \"'.concat($jscomp$destructuring$var81,'\" for aggregate: \"').concat(aggregate,'\", using \"quantitative\" instead.'),warn($jscomp$destructuring$var81),fd.type=\"quantitative\")}else isSecondaryRangeChannel(channel)||($jscomp$destructuring$var81=defaultType(fd,channel),fd.type=$jscomp$destructuring$var81);if(isTypedFieldDef(fd)){const {compatible,warning}=channelCompatibility(fd,channel)||{};!1===compatible&&warn(warning)}if(\"sort\"in fd&&isString(fd.sort)){({sort:channel}=\nfd);if(channel in SORT_BY_CHANNEL_INDEX)return Object.assign({},fd,{sort:{encoding:channel}});$jscomp$destructuring$var81=channel.substr(1);if(\"-\"===channel.charAt(0)&&$jscomp$destructuring$var81 in SORT_BY_CHANNEL_INDEX)return Object.assign({},fd,{sort:{encoding:$jscomp$destructuring$var81,order:\"descending\"}})}return fd&&\"header\"in fd&&({header:channel}=fd,fullType=channel,$jscomp$destructuring$var81=Object.assign({},fullType),fullType=fullType.orient,$jscomp$destructuring$var81=(delete $jscomp$destructuring$var81.orient,\n$jscomp$destructuring$var81),fullType)?Object.assign({},fd,{header:Object.assign({},$jscomp$destructuring$var81,{labelOrient:channel.labelOrient||fullType,titleOrient:channel.titleOrient||fullType})}):fd}function normalizeBin(bin,channel){return isBoolean(bin)?{maxbins:autoMaxBins(channel)}:\"binned\"===bin?{binned:!0}:bin.maxbins||bin.step?bin:Object.assign({},bin,{maxbins:autoMaxBins(channel)})}function channelCompatibility(fieldDef,channel){const type=fieldDef.type;if(\"geojson\"===type&&\"shape\"!==\nchannel)return{compatible:!1,warning:\"Channel \".concat(channel,\" should not be used with a geojson data.\")};switch(channel){case \"row\":case \"column\":case \"facet\":return isDiscrete(fieldDef)?COMPATIBLE:{compatible:!1,warning:\"\".concat(channel,\" encoding should be discrete (ordinal / nominal / binned).\")};case \"x\":case \"y\":case \"color\":case \"fill\":case \"stroke\":case \"text\":case \"detail\":case \"key\":case \"tooltip\":case \"href\":case \"url\":case \"angle\":case \"theta\":case \"radius\":case \"description\":return COMPATIBLE;\ncase \"longitude\":case \"longitude2\":case \"latitude\":case \"latitude2\":return\"quantitative\"!==type?{compatible:!1,warning:\"Channel \".concat(channel,\" should be used with a quantitative field only, not \").concat(fieldDef.type,\" field.\")}:COMPATIBLE;case \"opacity\":case \"fillOpacity\":case \"strokeOpacity\":case \"strokeWidth\":case \"size\":case \"theta2\":case \"radius2\":case \"x2\":case \"y2\":return\"nominal\"!==type||fieldDef.sort?COMPATIBLE:{compatible:!1,warning:\"Channel \".concat(channel,\" should not be used with an unsorted discrete field.\")};\ncase \"strokeDash\":return contains([\"ordinal\",\"nominal\"],fieldDef.type)?COMPATIBLE:{compatible:!1,warning:\"StrokeDash channel should be used with only discrete data.\"};case \"shape\":return contains([\"ordinal\",\"nominal\",\"geojson\"],fieldDef.type)?COMPATIBLE:{compatible:!1,warning:\"Shape channel should be used with only either discrete or geojson data.\"};case \"order\":return\"nominal\"!==fieldDef.type||\"sort\"in fieldDef?COMPATIBLE:{compatible:!1,warning:\"Channel order is inappropriate for nominal field, which has no inherent order.\"}}}\nfunction isFieldOrDatumDefForTimeFormat(fieldOrDatumDef){var {formatType}=getFormatMixins(fieldOrDatumDef),JSCompiler_temp;if(!(JSCompiler_temp=\"time\"===formatType)){if(formatType=!formatType)formatType=fieldOrDatumDef&&(\"temporal\"===fieldOrDatumDef.type||isFieldDef(fieldOrDatumDef)&&!!fieldOrDatumDef.timeUnit);JSCompiler_temp=formatType}return JSCompiler_temp}function valueExpr(v,$jscomp$destructuring$var84){var {timeUnit,type,wrapTime,undefinedIfExprNotRequired}=$jscomp$destructuring$var84;var _normalizeTimeUnit2=\n($jscomp$destructuring$var84=timeUnit&&(null===(_normalizeTimeUnit2=normalizeTimeUnit(timeUnit))||void 0===_normalizeTimeUnit2?void 0:_normalizeTimeUnit2.unit))||\"temporal\"===type;let expr;isExprRef(v)?expr=v.expr:isSignalRef(v)?expr=v.signal:isDateTime(v)?(_normalizeTimeUnit2=!0,expr=dateTimeToExpr(v)):(isString(v)||isNumber(v))&&_normalizeTimeUnit2&&(expr=\"datetime(\".concat(JSON.stringify(v),\")\"),LOCAL_SINGLE_TIMEUNIT_INDEX[$jscomp$destructuring$var84]&&(isNumber(v)&&1E4>v||isString(v)&&isNaN(Date.parse(v)))&&\n(expr=dateTimeToExpr({[$jscomp$destructuring$var84]:v})));return expr?wrapTime&&_normalizeTimeUnit2?\"time(\".concat(expr,\")\"):expr:undefinedIfExprNotRequired?void 0:JSON.stringify(v)}function valueArray(fieldOrDatumDef,values){const {type}=fieldOrDatumDef;return values.map(v=>{const expr=valueExpr(v,{timeUnit:isFieldDef(fieldOrDatumDef)?fieldOrDatumDef.timeUnit:void 0,type,undefinedIfExprNotRequired:!0});return void 0!==expr?{signal:expr}:v})}function binRequiresRange(fieldDef,channel){return isBinning(fieldDef.bin)?\n!!SCALE_CHANNEL_INDEX[channel]&&contains([\"ordinal\",\"nominal\"],fieldDef.type):(console.warn(\"Only call this method for binned field defs.\"),!1)}function extractTitleConfig(titleConfig){var $jscomp$destructuring$var86=Object.assign({},titleConfig),anchor=titleConfig.anchor;const frame=titleConfig.frame,offset=titleConfig.offset,orient=titleConfig.orient;var color=titleConfig.color,subtitleColor=titleConfig.subtitleColor,subtitleFont=titleConfig.subtitleFont;const subtitleFontSize=titleConfig.subtitleFontSize,\nsubtitleFontStyle=titleConfig.subtitleFontStyle,subtitleFontWeight=titleConfig.subtitleFontWeight,subtitleLineHeight=titleConfig.subtitleLineHeight;titleConfig=titleConfig.subtitlePadding;$jscomp$destructuring$var86=(delete $jscomp$destructuring$var86.anchor,delete $jscomp$destructuring$var86.frame,delete $jscomp$destructuring$var86.offset,delete $jscomp$destructuring$var86.orient,delete $jscomp$destructuring$var86.color,delete $jscomp$destructuring$var86.subtitleColor,delete $jscomp$destructuring$var86.subtitleFont,\ndelete $jscomp$destructuring$var86.subtitleFontSize,delete $jscomp$destructuring$var86.subtitleFontStyle,delete $jscomp$destructuring$var86.subtitleFontWeight,delete $jscomp$destructuring$var86.subtitleLineHeight,delete $jscomp$destructuring$var86.subtitlePadding,$jscomp$destructuring$var86);color=Object.assign({},$jscomp$destructuring$var86,color?{fill:color}:{});anchor=Object.assign({},anchor?{anchor}:{},frame?{frame}:{},offset?{offset}:{},orient?{orient}:{});subtitleColor=Object.assign({},subtitleColor?\n{subtitleColor}:{},subtitleFont?{subtitleFont}:{},subtitleFontSize?{subtitleFontSize}:{},subtitleFontStyle?{subtitleFontStyle}:{},subtitleFontWeight?{subtitleFontWeight}:{},subtitleLineHeight?{subtitleLineHeight}:{},titleConfig?{subtitlePadding:titleConfig}:{});subtitleFont=pick(color,[\"align\",\"baseline\",\"dx\",\"dy\",\"limit\"]);return{titleMarkConfig:color,subtitleMarkConfig:subtitleFont,nonMark:anchor,subtitle:subtitleColor}}function isText(v){return isString(v)||isArray(v)&&isString(v[0])}function signalOrValueRefWithCondition(val){const condition=\nisArray(val.condition)?val.condition.map(conditionalSignalRefOrValue):conditionalSignalRefOrValue(val.condition);return Object.assign({},signalRefOrValue(val),{condition})}function signalRefOrValue(value){if(isExprRef(value)){var $jscomp$destructuring$var88=Object.assign({},value);value=value.expr;$jscomp$destructuring$var88=(delete $jscomp$destructuring$var88.expr,$jscomp$destructuring$var88);return Object.assign({},{signal:value},$jscomp$destructuring$var88)}return value}function conditionalSignalRefOrValue(value){if(isExprRef(value)){var $jscomp$destructuring$var90=\nObject.assign({},value);value=value.expr;$jscomp$destructuring$var90=(delete $jscomp$destructuring$var90.expr,$jscomp$destructuring$var90);return Object.assign({},{signal:value},$jscomp$destructuring$var90)}return value}function signalOrValueRef(value){if(isExprRef(value)){var $jscomp$destructuring$var92=Object.assign({},value);value=value.expr;$jscomp$destructuring$var92=(delete $jscomp$destructuring$var92.expr,$jscomp$destructuring$var92);return Object.assign({},{signal:value},$jscomp$destructuring$var92)}return isSignalRef(value)?\nvalue:void 0!==value?{value}:void 0}function exprFromValueOrSignalRef(ref){return isSignalRef(ref)?ref.signal:$(ref.value)}function signalOrStringValue(v){return isSignalRef(v)?v.signal:null==v?null:$(v)}function getStyles(mark){var _mark$style;return[].concat(mark.type,null!==(_mark$style=mark.style)&&void 0!==_mark$style?_mark$style:[])}function getMarkPropOrConfig(channel,mark,config,opt){opt=void 0===opt?{}:opt;const {vgChannel,ignoreVgConfig}=opt;if(vgChannel&&void 0!==mark[vgChannel])return mark[vgChannel];\nif(void 0!==mark[channel])return mark[channel];if(!ignoreVgConfig||vgChannel&&vgChannel!==channel)return getMarkConfig(channel,mark,config,opt)}function getMarkConfig(channel,mark,config,$jscomp$destructuring$var93){({vgChannel:$jscomp$destructuring$var93}=void 0===$jscomp$destructuring$var93?{}:$jscomp$destructuring$var93);return getFirstDefined($jscomp$destructuring$var93?getMarkStyleConfig(channel,mark,config.style):void 0,getMarkStyleConfig(channel,mark,config.style),$jscomp$destructuring$var93?\nconfig[mark.type][$jscomp$destructuring$var93]:void 0,config[mark.type][channel],$jscomp$destructuring$var93?config.mark[$jscomp$destructuring$var93]:config.mark[channel])}function getMarkStyleConfig(prop,mark,styleConfigIndex){return getStyleConfig(prop,getStyles(mark),styleConfigIndex)}function getStyleConfig(p,styles,styleConfigIndex){styles=array$jscomp$0(styles);let value;for(const style of styles)(styles=styleConfigIndex[style])&&void 0!==styles[p]&&(value=styles[p]);return value}function sortParams(orderDef,\nfieldRefOption){return array$jscomp$0(orderDef).reduce((s,orderChannelDef)=>{var _orderChannelDef$sort;s.field.push(vgField(orderChannelDef,fieldRefOption));s.order.push(null!==(_orderChannelDef$sort=orderChannelDef.sort)&&void 0!==_orderChannelDef$sort?_orderChannelDef$sort:\"ascending\");return s},{field:[],order:[]})}function mergeTitleFieldDefs(f1,f2){const merged=[...f1];f2.forEach(fdToMerge=>{for(const fieldDef1 of merged)if(deepEqual(fieldDef1,fdToMerge))return;merged.push(fdToMerge)});return merged}\nfunction mergeTitle(title1,title2){return deepEqual(title1,title2)||!title2?title1:title1?[...array$jscomp$0(title1),...array$jscomp$0(title2)].join(\", \"):title2}function mergeTitleComponent(v1,v2){const v1Val=v1.value;v2=v2.value;if(null==v1Val||null===v2)return{explicit:v1.explicit,value:null};if((isText(v1Val)||isSignalRef(v1Val))&&(isText(v2)||isSignalRef(v2)))return{explicit:v1.explicit,value:mergeTitle(v1Val,v2)};if(isText(v1Val)||isSignalRef(v1Val))return{explicit:v1.explicit,value:v1Val};\nif(isText(v2)||isSignalRef(v2))return{explicit:v1.explicit,value:v2};if(!(isText(v1Val)||isSignalRef(v1Val)||isText(v2)||isSignalRef(v2)))return{explicit:v1.explicit,value:mergeTitleFieldDefs(v1Val,v2)};throw Error(\"It should never reach here\");}function isUnitSpec(spec){return\"mark\"in spec}function channelHasField(encoding,channel){return(encoding=encoding&&encoding[channel])?isArray(encoding)?some(encoding,fieldDef=>!!fieldDef.field):isFieldDef(encoding)||hasConditionalFieldDef(encoding):!1}function isAggregate(encoding){return some(CHANNELS,\nchannel=>channelHasField(encoding,channel)?(channel=encoding[channel],isArray(channel)?some(channel,fieldDef=>!!fieldDef.aggregate):(channel=getFieldDef(channel))&&!!channel.aggregate):!1)}function extractTransformsFromEncoding(oldEncoding,config){const groupby=[],bins=[],timeUnits=[],aggregate=[],encoding={};forEach(oldEncoding,(channelDef,channel)=>{if(isFieldDef(channelDef)){var $jscomp$destructuring$var95=Object.assign({},channelDef),field=channelDef.field;const aggOp=channelDef.aggregate,bin=\nchannelDef.bin,timeUnit=channelDef.timeUnit;$jscomp$destructuring$var95=(delete $jscomp$destructuring$var95.field,delete $jscomp$destructuring$var95.aggregate,delete $jscomp$destructuring$var95.bin,delete $jscomp$destructuring$var95.timeUnit,$jscomp$destructuring$var95);if(aggOp||timeUnit||bin){var guide=getGuide(channelDef);const isTitleDefined=guide&&guide.title;guide=vgField(channelDef,{forAs:!0});$jscomp$destructuring$var95=Object.assign({},isTitleDefined?[]:{title:title$jscomp$0(channelDef,config,\n{allowDisabling:!0})},$jscomp$destructuring$var95,{field:guide});if(aggOp){let op;isArgmaxDef(aggOp)?(op=\"argmax\",guide=vgField({op:\"argmax\",field:aggOp.argmax},{forAs:!0}),$jscomp$destructuring$var95.field=\"\".concat(guide,\".\").concat(field)):isArgminDef(aggOp)?(op=\"argmin\",guide=vgField({op:\"argmin\",field:aggOp.argmin},{forAs:!0}),$jscomp$destructuring$var95.field=\"\".concat(guide,\".\").concat(field)):\"boxplot\"!==aggOp&&\"errorbar\"!==aggOp&&\"errorband\"!==aggOp&&(op=aggOp);op&&(channelDef={op,as:guide},\nfield&&(channelDef.field=field),aggregate.push(channelDef))}else groupby.push(guide),isTypedFieldDef(channelDef)&&isBinning(bin)?(bins.push({bin,field,as:guide}),groupby.push(vgField(channelDef,{binSuffix:\"end\"})),binRequiresRange(channelDef,channel)&&groupby.push(vgField(channelDef,{binSuffix:\"range\"})),channel in POSITION_SCALE_CHANNEL_INDEX&&(encoding[channel+\"2\"]={field:guide+\"_end\"}),$jscomp$destructuring$var95.bin=\"binned\",isSecondaryRangeChannel(channel)||($jscomp$destructuring$var95.type=\n\"quantitative\")):timeUnit&&(timeUnits.push({timeUnit,field,as:guide}),(field=isTypedFieldDef(channelDef)&&\"temporal\"!==channelDef.type&&\"time\")&&(\"text\"===channel||\"tooltip\"===channel?$jscomp$destructuring$var95.formatType=field:NONPOSITION_CHANNEL_INDEX[channel]?$jscomp$destructuring$var95.legend=Object.assign({},{formatType:field},$jscomp$destructuring$var95.legend):channel in POSITION_SCALE_CHANNEL_INDEX&&($jscomp$destructuring$var95.axis=Object.assign({},{formatType:field},$jscomp$destructuring$var95.axis))));\nencoding[channel]=$jscomp$destructuring$var95}else groupby.push(field),encoding[channel]=oldEncoding[channel]}else encoding[channel]=oldEncoding[channel]});return{bins,timeUnits,aggregate,groupby,encoding}}function markChannelCompatible(encoding,channel,mark){mark=getSupportedMark(channel)[mark];return mark&&(\"binned\"!==mark||(mark=encoding[\"x2\"===channel?\"x\":\"y\"],isFieldDef(mark)&&isFieldDef(encoding[channel])&&isBinned(mark.bin)))?!0:!1}function initEncoding(encoding,mark,filled,config){return keys$jscomp$0(encoding).reduce((normalizedEncoding,\nchannel)=>{if(!CHANNEL_INDEX[channel])return warn(invalidEncodingChannel(channel)),normalizedEncoding;const channelDef=encoding[channel];\"angle\"!==channel||\"arc\"!==mark||encoding.theta||(warn(\"Arc marks uses theta channel rather than angle, replacing angle with theta.\"),channel=\"theta\");if(!markChannelCompatible(encoding,channel,mark))return warn(incompatibleChannel(channel,mark)),normalizedEncoding;if(\"size\"===channel&&\"line\"===mark){const fieldDef=getFieldDef(encoding[channel]);if(null===fieldDef||\nvoid 0===fieldDef?0:fieldDef.aggregate)return warn(\"Line marks cannot encode size with a non-groupby field. You may want to use trail marks instead.\"),normalizedEncoding}if(\"color\"===channel&&(filled?\"fill\"in encoding:\"stroke\"in encoding))return warn(droppingColor(\"encoding\",{fill:\"fill\"in encoding,stroke:\"stroke\"in encoding})),normalizedEncoding;if(\"detail\"===channel||\"order\"===channel&&!isArray(channelDef)&&!isValueDef(channelDef)||\"tooltip\"===channel&&isArray(channelDef))channelDef&&(normalizedEncoding[channel]=\narray$jscomp$0(channelDef).reduce((defs,fieldDef)=>{isFieldDef(fieldDef)?defs.push(initFieldDef(fieldDef,channel)):warn(emptyFieldDef(fieldDef,channel));return defs},[]));else{if(\"tooltip\"===channel&&null===channelDef)normalizedEncoding[channel]=null;else if(!(isFieldDef(channelDef)||isDatumDef(channelDef)||isValueDef(channelDef)||channelDef&&\"condition\"in channelDef||isSignalRef(channelDef)))return warn(emptyFieldDef(channelDef,channel)),normalizedEncoding;normalizedEncoding[channel]=initChannelDef(channelDef,\nchannel,config)}return normalizedEncoding},{})}function normalizeEncoding(encoding,config){const normalizedEncoding={};for(const channel of keys$jscomp$0(encoding)){const newChannelDef=initChannelDef(encoding[channel],channel,config,{compositeMark:!0});normalizedEncoding[channel]=newChannelDef}return normalizedEncoding}function fieldDefs(encoding){const arr=[];for(const channel of keys$jscomp$0(encoding))if(channelHasField(encoding,channel)){const channelDefArray=array$jscomp$0(encoding[channel]);\nfor(const def of channelDefArray)isFieldDef(def)?arr.push(def):hasConditionalFieldDef(def)&&arr.push(def.condition)}return arr}function forEach(mapping,f,thisArg){if(mapping)for(const channel of keys$jscomp$0(mapping)){const el=mapping[channel];if(isArray(el))for(const channelDef of el)f.call(thisArg,channelDef,channel);else f.call(thisArg,el,channel)}}function reduce(mapping,f,init,thisArg){return mapping?keys$jscomp$0(mapping).reduce((r,channel)=>{const map=mapping[channel];return isArray(map)?\nmap.reduce((r1,channelDef)=>f.call(thisArg,r1,channelDef,channel),r):f.call(thisArg,r,map,channel)},init):init}function pathGroupingFields(mark,encoding){return keys$jscomp$0(encoding).reduce((details,channel)=>{switch(channel){case \"x\":case \"y\":case \"href\":case \"description\":case \"url\":case \"x2\":case \"y2\":case \"theta\":case \"theta2\":case \"radius\":case \"radius2\":case \"latitude\":case \"longitude\":case \"latitude2\":case \"longitude2\":case \"text\":case \"shape\":case \"angle\":case \"tooltip\":return details;case \"order\":if(\"line\"===\nmark||\"trail\"===mark)return details;case \"detail\":case \"key\":channel=encoding[channel];if(isArray(channel)||isFieldDef(channel))for(var fieldDef of array$jscomp$0(channel))fieldDef.aggregate||details.push(vgField(fieldDef,{}));return details;case \"size\":if(\"trail\"===mark)return details;case \"color\":case \"fill\":case \"stroke\":case \"opacity\":case \"fillOpacity\":case \"strokeOpacity\":case \"strokeDash\":case \"strokeWidth\":return(fieldDef=getFieldDef(encoding[channel]))&&!fieldDef.aggregate&&details.push(vgField(fieldDef,\n{})),details}},[])}function getCompositeMarkTooltip(tooltipSummary,continuousAxisChannelDef,encodingWithoutContinuousAxis,withFieldName){withFieldName=void 0===withFieldName?!0:withFieldName;if(\"tooltip\"in encodingWithoutContinuousAxis)return{tooltip:encodingWithoutContinuousAxis.tooltip};tooltipSummary=tooltipSummary.map($jscomp$destructuring$var98=>{var {fieldPrefix,titlePrefix}=$jscomp$destructuring$var98;$jscomp$destructuring$var98=withFieldName?\" of \".concat(getTitle(continuousAxisChannelDef)):\n\"\";return{field:fieldPrefix+continuousAxisChannelDef.field,type:continuousAxisChannelDef.type,title:isSignalRef(titlePrefix)?{signal:titlePrefix+'\"'.concat(escape($jscomp$destructuring$var98),'\"')}:titlePrefix+$jscomp$destructuring$var98}});encodingWithoutContinuousAxis=fieldDefs(encodingWithoutContinuousAxis).map(toStringFieldDef);return{tooltip:[...tooltipSummary,...unique(encodingWithoutContinuousAxis,hash)]}}function getTitle(continuousAxisChannelDef){const {title,field}=continuousAxisChannelDef;\nreturn getFirstDefined(title,field)}function makeCompositeAggregatePartFactory(compositeMarkDef,continuousAxis,continuousAxisChannelDef,sharedEncoding,compositeMarkConfig){const {scale,axis}=continuousAxisChannelDef;return $jscomp$destructuring$var99=>{var {partName,mark,positionPrefix,endPositionPrefix,extraEncoding={}}=$jscomp$destructuring$var99;$jscomp$destructuring$var99=getTitle(continuousAxisChannelDef);return partLayerMixins(compositeMarkDef,partName,compositeMarkConfig,{mark,encoding:Object.assign({},\n{[continuousAxis]:Object.assign({},{field:positionPrefix+\"_\"+continuousAxisChannelDef.field,type:continuousAxisChannelDef.type},void 0!==$jscomp$destructuring$var99?{title:$jscomp$destructuring$var99}:{},void 0!==scale?{scale}:{},void 0!==axis?{axis}:{})},isString(endPositionPrefix)?{[continuousAxis+\"2\"]:{field:endPositionPrefix+\"_\"+continuousAxisChannelDef.field}}:{},sharedEncoding,extraEncoding)})}}function partLayerMixins(markDef,part,compositeMarkConfig,partBaseSpec){const {clip,color,opacity}=\nmarkDef,mark=markDef.type;return markDef[part]||void 0===markDef[part]&&compositeMarkConfig[part]?[Object.assign({},partBaseSpec,{mark:Object.assign({},compositeMarkConfig[part],clip?{clip}:{},color?{color}:{},opacity?{opacity}:{},isMarkDef(partBaseSpec.mark)?partBaseSpec.mark:{type:partBaseSpec.mark},{style:\"\".concat(mark,\"-\").concat(part)},isBoolean(markDef[part])?{}:markDef[part])})]:[]}function compositeMarkContinuousAxis(spec,orient,compositeMark){({encoding:spec}=spec);orient=\"vertical\"===orient?\n\"y\":\"x\";const continuousAxisChannelDef2=spec[orient+\"2\"],continuousAxisChannelDefError=spec[orient+\"Error\"],continuousAxisChannelDefError2=spec[orient+\"Error2\"];return{continuousAxisChannelDef:filterAggregateFromChannelDef(spec[orient],compositeMark),continuousAxisChannelDef2:filterAggregateFromChannelDef(continuousAxisChannelDef2,compositeMark),continuousAxisChannelDefError:filterAggregateFromChannelDef(continuousAxisChannelDefError,compositeMark),continuousAxisChannelDefError2:filterAggregateFromChannelDef(continuousAxisChannelDefError2,\ncompositeMark),continuousAxis:orient}}function filterAggregateFromChannelDef(continuousAxisChannelDef,compositeMark){if(continuousAxisChannelDef&&continuousAxisChannelDef.aggregate){var $jscomp$destructuring$var101=Object.assign({},continuousAxisChannelDef);continuousAxisChannelDef=continuousAxisChannelDef.aggregate;$jscomp$destructuring$var101=(delete $jscomp$destructuring$var101.aggregate,$jscomp$destructuring$var101);continuousAxisChannelDef!==compositeMark&&(compositeMark=\"Continuous axis should not have customized aggregation function \".concat(continuousAxisChannelDef,\n\"; \").concat(compositeMark,\" already agregates the axis.\"),warn(compositeMark));return $jscomp$destructuring$var101}return continuousAxisChannelDef}function compositeMarkOrient(spec,compositeMark){const {mark,encoding}=spec,{x,y}=encoding;if(isMarkDef(mark)&&mark.orient)return mark.orient;if(isContinuousFieldOrDatumDef(x)){if(isContinuousFieldOrDatumDef(y)){spec=isFieldDef(x)&&x.aggregate;const yAggregate=isFieldDef(y)&&y.aggregate;if(!spec&&yAggregate===compositeMark)return\"vertical\";if(yAggregate||\nspec!==compositeMark){if(spec===compositeMark&&yAggregate===compositeMark)throw Error(\"Both x and y cannot have aggregate\");return isFieldOrDatumDefForTimeFormat(y)&&!isFieldOrDatumDefForTimeFormat(x)?\"horizontal\":\"vertical\"}}return\"horizontal\"}if(isContinuousFieldOrDatumDef(y))return\"vertical\";throw Error(\"Need a valid continuous axis for \".concat(compositeMark,\"s\"));}function getBoxPlotType(extent){return isNumber(extent)?\"tukey\":extent}function normalizeBoxPlot(spec$jscomp$0,$jscomp$destructuring$var102){var {config}=\n$jscomp$destructuring$var102,_markDef$extent,$jscomp$destructuring$var103=spec$jscomp$0=Object.assign({},spec$jscomp$0,{encoding:normalizeEncoding(spec$jscomp$0.encoding,config)});$jscomp$destructuring$var102=Object.assign({},$jscomp$destructuring$var103);var mark=$jscomp$destructuring$var103.mark;$jscomp$destructuring$var103=$jscomp$destructuring$var103.selection;$jscomp$destructuring$var102=(delete $jscomp$destructuring$var102.mark,delete $jscomp$destructuring$var102.encoding,delete $jscomp$destructuring$var102.selection,\ndelete $jscomp$destructuring$var102.projection,$jscomp$destructuring$var102);mark=isMarkDef(mark)?mark:{type:mark};$jscomp$destructuring$var103&&warn(selectionNotSupported(\"boxplot\"));$jscomp$destructuring$var103=null!==(_markDef$extent=mark.extent)&&void 0!==_markDef$extent?_markDef$extent:config.boxplot.extent;var sizeValue=getMarkPropOrConfig(\"size\",mark,config);_markDef$extent=getBoxPlotType($jscomp$destructuring$var103);var JSCompiler_inline_result;{var spec=spec$jscomp$0;spec$jscomp$0=compositeMarkOrient(spec,\n\"boxplot\");const {continuousAxisChannelDef,continuousAxis}=compositeMarkContinuousAxis(spec,spec$jscomp$0,\"boxplot\");var continuousFieldName=continuousAxisChannelDef.field,boxPlotType=getBoxPlotType($jscomp$destructuring$var103),boxplotSpecificAggregate=[...boxParamsQuartiles(continuousFieldName),{op:\"median\",field:continuousFieldName,as:\"mid_box_\"+continuousFieldName},{op:\"min\",field:continuousFieldName,as:(\"min-max\"===boxPlotType?\"lower_whisker_\":\"min_\")+continuousFieldName},{op:\"max\",field:continuousFieldName,\nas:(\"min-max\"===boxPlotType?\"upper_whisker_\":\"max_\")+continuousFieldName}];continuousFieldName=\"min-max\"===boxPlotType||\"tukey\"===boxPlotType?[]:[{calculate:'datum[\"upper_box_'.concat(continuousFieldName,'\"] - datum[\"lower_box_').concat(continuousFieldName,'\"]'),as:\"iqr_\"+continuousFieldName},{calculate:'min(datum[\"upper_box_'.concat(continuousFieldName,'\"] + datum[\"iqr_').concat(continuousFieldName,'\"] * ').concat($jscomp$destructuring$var103,', datum[\"max_').concat(continuousFieldName,'\"])'),as:\"upper_whisker_\"+\ncontinuousFieldName},{calculate:'max(datum[\"lower_box_'.concat(continuousFieldName,'\"] - datum[\"iqr_').concat(continuousFieldName,'\"] * ').concat($jscomp$destructuring$var103,', datum[\"min_').concat(continuousFieldName,'\"])'),as:\"lower_whisker_\"+continuousFieldName}];spec=Object.assign({},spec.encoding);boxPlotType=(delete spec[continuousAxis],spec);spec=Object.assign({},boxPlotType);boxPlotType=boxPlotType.tooltip;spec=(delete spec.tooltip,spec);if(boxPlotType){var customTooltipWithoutAggregatedField$jscomp$0;\nif(isArray(boxPlotType)){for(var t of boxPlotType)t.aggregate?(JSCompiler_inline_result||(JSCompiler_inline_result=[]),JSCompiler_inline_result.push(t)):(customTooltipWithoutAggregatedField$jscomp$0||(customTooltipWithoutAggregatedField$jscomp$0=[]),customTooltipWithoutAggregatedField$jscomp$0.push(t));JSCompiler_inline_result&&(spec.tooltip=JSCompiler_inline_result)}else boxPlotType.aggregate?spec.tooltip=boxPlotType:customTooltipWithoutAggregatedField$jscomp$0=boxPlotType;isArray(customTooltipWithoutAggregatedField$jscomp$0)&&\n1===customTooltipWithoutAggregatedField$jscomp$0.length&&(customTooltipWithoutAggregatedField$jscomp$0=customTooltipWithoutAggregatedField$jscomp$0[0]);JSCompiler_inline_result={customTooltipWithoutAggregatedField:customTooltipWithoutAggregatedField$jscomp$0,filteredEncoding:spec}}else JSCompiler_inline_result={filteredEncoding:spec};const {customTooltipWithoutAggregatedField,filteredEncoding}=JSCompiler_inline_result,{bins,timeUnits,aggregate,groupby,encoding:encodingWithoutContinuousAxis}=extractTransformsFromEncoding(filteredEncoding,\nconfig);JSCompiler_inline_result=[...bins,...timeUnits,{aggregate:[...aggregate,...boxplotSpecificAggregate],groupby},...continuousFieldName];JSCompiler_inline_result={bins,timeUnits,transform:JSCompiler_inline_result,groupby,aggregate,continuousAxisChannelDef,continuousAxis,encodingWithoutContinuousAxis,ticksOrient:\"vertical\"===spec$jscomp$0?\"horizontal\":\"vertical\",boxOrient:spec$jscomp$0,customTooltipWithoutAggregatedField}}const {bins:bins$jscomp$0,timeUnits:timeUnits$jscomp$0,transform,continuousAxisChannelDef:continuousAxisChannelDef$jscomp$0,\ncontinuousAxis:continuousAxis$jscomp$0,groupby:groupby$jscomp$0,aggregate:aggregate$jscomp$0,encodingWithoutContinuousAxis:encodingWithoutContinuousAxis$jscomp$0,ticksOrient,boxOrient,customTooltipWithoutAggregatedField:customTooltipWithoutAggregatedField$jscomp$2}=JSCompiler_inline_result;customTooltipWithoutAggregatedField$jscomp$0=Object.assign({},encodingWithoutContinuousAxis$jscomp$0);JSCompiler_inline_result=encodingWithoutContinuousAxis$jscomp$0.color;boxplotSpecificAggregate=encodingWithoutContinuousAxis$jscomp$0.size;\ncustomTooltipWithoutAggregatedField$jscomp$0=(delete customTooltipWithoutAggregatedField$jscomp$0.color,delete customTooltipWithoutAggregatedField$jscomp$0.size,customTooltipWithoutAggregatedField$jscomp$0);t=makeCompositeAggregatePartFactory(mark,continuousAxis$jscomp$0,continuousAxisChannelDef$jscomp$0,customTooltipWithoutAggregatedField$jscomp$0,config.boxplot);spec$jscomp$0=makeCompositeAggregatePartFactory(mark,continuousAxis$jscomp$0,continuousAxisChannelDef$jscomp$0,encodingWithoutContinuousAxis$jscomp$0,\nconfig.boxplot);boxplotSpecificAggregate=makeCompositeAggregatePartFactory(mark,continuousAxis$jscomp$0,continuousAxisChannelDef$jscomp$0,Object.assign({},customTooltipWithoutAggregatedField$jscomp$0,boxplotSpecificAggregate?{size:boxplotSpecificAggregate}:{}),config.boxplot);continuousFieldName=getCompositeMarkTooltip([{fieldPrefix:\"min-max\"===_markDef$extent?\"upper_whisker_\":\"max_\",titlePrefix:\"Max\"},{fieldPrefix:\"upper_box_\",titlePrefix:\"Q3\"},{fieldPrefix:\"mid_box_\",titlePrefix:\"Median\"},{fieldPrefix:\"lower_box_\",\ntitlePrefix:\"Q1\"},{fieldPrefix:\"min-max\"===_markDef$extent?\"lower_whisker_\":\"min_\",titlePrefix:\"Min\"}],continuousAxisChannelDef$jscomp$0,encodingWithoutContinuousAxis$jscomp$0);spec={type:\"tick\",color:\"black\",opacity:1,orient:ticksOrient,invalid:null,aria:!1};boxPlotType=\"min-max\"===_markDef$extent?continuousFieldName:getCompositeMarkTooltip([{fieldPrefix:\"upper_whisker_\",titlePrefix:\"Upper Whisker\"},{fieldPrefix:\"lower_whisker_\",titlePrefix:\"Lower Whisker\"}],continuousAxisChannelDef$jscomp$0,encodingWithoutContinuousAxis$jscomp$0);\nt=[...t({partName:\"rule\",mark:{type:\"rule\",invalid:null,aria:!1},positionPrefix:\"lower_whisker\",endPositionPrefix:\"lower_box\",extraEncoding:boxPlotType}),...t({partName:\"rule\",mark:{type:\"rule\",invalid:null,aria:!1},positionPrefix:\"upper_box\",endPositionPrefix:\"upper_whisker\",extraEncoding:boxPlotType}),...t({partName:\"ticks\",mark:spec,positionPrefix:\"lower_whisker\",extraEncoding:boxPlotType}),...t({partName:\"ticks\",mark:spec,positionPrefix:\"upper_whisker\",extraEncoding:boxPlotType})];sizeValue=[...(\"tukey\"!==\n_markDef$extent?t:[]),...spec$jscomp$0({partName:\"box\",mark:Object.assign({},{type:\"bar\"},sizeValue?{size:sizeValue}:{},{orient:boxOrient,invalid:null,ariaRoleDescription:\"box\"}),positionPrefix:\"lower_box\",endPositionPrefix:\"upper_box\",extraEncoding:continuousFieldName}),...boxplotSpecificAggregate({partName:\"median\",mark:Object.assign({},{type:\"tick\",invalid:null},isObject(config.boxplot.median)&&config.boxplot.median.color?{color:config.boxplot.median.color}:{},sizeValue?{size:sizeValue}:{},{orient:ticksOrient,\naria:!1}),positionPrefix:\"mid_box\",extraEncoding:continuousFieldName})];if(\"min-max\"===_markDef$extent){var _outerSpec$transform;return Object.assign({},$jscomp$destructuring$var102,{transform:(null!==(_outerSpec$transform=$jscomp$destructuring$var102.transform)&&void 0!==_outerSpec$transform?_outerSpec$transform:[]).concat(transform),layer:sizeValue})}_outerSpec$transform='datum[\"lower_box_'.concat(continuousAxisChannelDef$jscomp$0.field,'\"]');_markDef$extent='datum[\"upper_box_'.concat(continuousAxisChannelDef$jscomp$0.field,\n'\"]');spec$jscomp$0=\"(\".concat(_markDef$extent,\" - \").concat(_outerSpec$transform,\")\");_outerSpec$transform=\"\".concat(_outerSpec$transform,\" - \").concat($jscomp$destructuring$var103,\" * \").concat(spec$jscomp$0);spec$jscomp$0=\"\".concat(_markDef$extent,\" + \").concat($jscomp$destructuring$var103,\" * \").concat(spec$jscomp$0);boxplotSpecificAggregate='datum[\"'.concat(continuousAxisChannelDef$jscomp$0.field,'\"]');$jscomp$destructuring$var103={joinaggregate:boxParamsQuartiles(continuousAxisChannelDef$jscomp$0.field),\ngroupby:groupby$jscomp$0};_markDef$extent={transform:[{filter:\"(\".concat(_outerSpec$transform,\" \\x3c\\x3d \").concat(boxplotSpecificAggregate,\") \\x26\\x26 (\").concat(boxplotSpecificAggregate,\" \\x3c\\x3d \").concat(spec$jscomp$0,\")\")},{aggregate:[{op:\"min\",field:continuousAxisChannelDef$jscomp$0.field,as:\"lower_whisker_\"+continuousAxisChannelDef$jscomp$0.field},{op:\"max\",field:continuousAxisChannelDef$jscomp$0.field,as:\"upper_whisker_\"+continuousAxisChannelDef$jscomp$0.field},{op:\"min\",field:\"lower_box_\"+\ncontinuousAxisChannelDef$jscomp$0.field,as:\"lower_box_\"+continuousAxisChannelDef$jscomp$0.field},{op:\"max\",field:\"upper_box_\"+continuousAxisChannelDef$jscomp$0.field,as:\"upper_box_\"+continuousAxisChannelDef$jscomp$0.field},...aggregate$jscomp$0],groupby:groupby$jscomp$0}],layer:t};customTooltipWithoutAggregatedField$jscomp$0=Object.assign({},customTooltipWithoutAggregatedField$jscomp$0);customTooltipWithoutAggregatedField$jscomp$0=(delete customTooltipWithoutAggregatedField$jscomp$0.tooltip,customTooltipWithoutAggregatedField$jscomp$0);\nconst {scale,axis}=continuousAxisChannelDef$jscomp$0;t=getTitle(continuousAxisChannelDef$jscomp$0);continuousFieldName=omit(axis,[\"title\"]);config=partLayerMixins(mark,\"outliers\",config.boxplot,{transform:[{filter:\"(\".concat(boxplotSpecificAggregate,\" \\x3c \").concat(_outerSpec$transform,\") || (\").concat(boxplotSpecificAggregate,\" \\x3e \").concat(spec$jscomp$0,\")\")}],mark:\"point\",encoding:Object.assign({},{[continuousAxis$jscomp$0]:Object.assign({},{field:continuousAxisChannelDef$jscomp$0.field,type:continuousAxisChannelDef$jscomp$0.type},\nvoid 0!==t?{title:t}:{},void 0!==scale?{scale}:{},isEmpty(continuousFieldName)?{}:{axis:continuousFieldName})},customTooltipWithoutAggregatedField$jscomp$0,JSCompiler_inline_result?{color:JSCompiler_inline_result}:{},customTooltipWithoutAggregatedField$jscomp$2?{tooltip:customTooltipWithoutAggregatedField$jscomp$2}:{})})[0];mark=[...bins$jscomp$0,...timeUnits$jscomp$0,$jscomp$destructuring$var103];config?config={transform:mark,layer:[config,_markDef$extent]}:(config=_markDef$extent,config.transform.unshift(...mark));\nreturn Object.assign({},$jscomp$destructuring$var102,{layer:[config,{transform,layer:sizeValue}]})}function boxParamsQuartiles(continousAxisField){return[{op:\"q1\",field:continousAxisField,as:\"lower_box_\"+continousAxisField},{op:\"q3\",field:continousAxisField,as:\"upper_box_\"+continousAxisField}]}function normalizeErrorBar(spec,$jscomp$destructuring$var112){({config:$jscomp$destructuring$var112}=$jscomp$destructuring$var112);spec=Object.assign({},spec,{encoding:normalizeEncoding(spec.encoding,$jscomp$destructuring$var112)});\nconst {transform,continuousAxisChannelDef,continuousAxis,encodingWithoutContinuousAxis,ticksOrient,markDef,outerSpec,tooltipEncoding}=errorBarParams(spec,\"errorbar\",$jscomp$destructuring$var112);delete encodingWithoutContinuousAxis.size;spec=makeCompositeAggregatePartFactory(markDef,continuousAxis,continuousAxisChannelDef,encodingWithoutContinuousAxis,$jscomp$destructuring$var112.errorbar);$jscomp$destructuring$var112=markDef.thickness;var size=markDef.size;size=Object.assign({},{type:\"tick\",orient:ticksOrient,\naria:!1},void 0!==$jscomp$destructuring$var112?{thickness:$jscomp$destructuring$var112}:{},void 0!==size?{size}:{});spec=[...spec({partName:\"ticks\",mark:size,positionPrefix:\"lower\",extraEncoding:tooltipEncoding}),...spec({partName:\"ticks\",mark:size,positionPrefix:\"upper\",extraEncoding:tooltipEncoding}),...spec({partName:\"rule\",mark:Object.assign({},{type:\"rule\",ariaRoleDescription:\"errorbar\"},void 0!==$jscomp$destructuring$var112?{size:$jscomp$destructuring$var112}:{}),positionPrefix:\"lower\",endPositionPrefix:\"upper\",\nextraEncoding:tooltipEncoding})];return Object.assign({},outerSpec,{transform},1<spec.length?{layer:spec}:Object.assign({},spec[0]))}function errorBarOrientAndInputType(spec,compositeMark){var {encoding}=spec;if(!(!isFieldOrDatumDef(encoding.x)&&!isFieldOrDatumDef(encoding.y)||isFieldOrDatumDef(encoding.x2)||isFieldOrDatumDef(encoding.y2)||isFieldOrDatumDef(encoding.xError)||isFieldOrDatumDef(encoding.xError2)||isFieldOrDatumDef(encoding.yError)||isFieldOrDatumDef(encoding.yError2)))return{orient:compositeMarkOrient(spec,\ncompositeMark),inputType:\"raw\"};var JSCompiler_inline_result=isFieldOrDatumDef(encoding.x2)||isFieldOrDatumDef(encoding.y2);var JSCompiler_inline_result$jscomp$0=isFieldOrDatumDef(encoding.xError)||isFieldOrDatumDef(encoding.xError2)||isFieldOrDatumDef(encoding.yError)||isFieldOrDatumDef(encoding.yError2);spec=encoding.x;const y=encoding.y;if(JSCompiler_inline_result){if(JSCompiler_inline_result$jscomp$0)throw Error(\"\".concat(compositeMark,\" cannot be both type aggregated-upper-lower and aggregated-error\"));\nJSCompiler_inline_result=encoding.x2;encoding=encoding.y2;if(isFieldOrDatumDef(JSCompiler_inline_result)&&isFieldOrDatumDef(encoding))throw Error(\"\".concat(compositeMark,\" cannot have both x2 and y2\"));if(isFieldOrDatumDef(JSCompiler_inline_result)){if(isContinuousFieldOrDatumDef(spec))return{orient:\"horizontal\",inputType:\"aggregated-upper-lower\"};throw Error(\"Both x and x2 have to be quantitative in \".concat(compositeMark));}if(isFieldOrDatumDef(encoding)){if(isContinuousFieldOrDatumDef(y))return{orient:\"vertical\",\ninputType:\"aggregated-upper-lower\"};throw Error(\"Both y and y2 have to be quantitative in \".concat(compositeMark));}}else{JSCompiler_inline_result=encoding.xError;JSCompiler_inline_result$jscomp$0=encoding.yError;const yError2=encoding.yError2;if(isFieldOrDatumDef(encoding.xError2)&&!isFieldOrDatumDef(JSCompiler_inline_result))throw Error(\"\".concat(compositeMark,\" cannot have xError2 without xError\"));if(isFieldOrDatumDef(yError2)&&!isFieldOrDatumDef(JSCompiler_inline_result$jscomp$0))throw Error(\"\".concat(compositeMark,\n\" cannot have yError2 without yError\"));if(isFieldOrDatumDef(JSCompiler_inline_result)&&isFieldOrDatumDef(JSCompiler_inline_result$jscomp$0))throw Error(\"\".concat(compositeMark,\" cannot have both xError and yError with both are quantiative\"));if(isFieldOrDatumDef(JSCompiler_inline_result)){if(isContinuousFieldOrDatumDef(spec))return{orient:\"horizontal\",inputType:\"aggregated-error\"};throw Error(\"All x, xError, and xError2 (if exist) have to be quantitative\");}if(isFieldOrDatumDef(JSCompiler_inline_result$jscomp$0)){if(isContinuousFieldOrDatumDef(y))return{orient:\"vertical\",\ninputType:\"aggregated-error\"};throw Error(\"All y, yError, and yError2 (if exist) have to be quantitative\");}}throw Error(\"No ranged axis\");}function errorBarParams(spec,compositeMark,config){var _outerSpec$transform,$jscomp$destructuring$var114=Object.assign({},spec),mark=spec.mark,encoding=spec.encoding,selection=spec.selection;$jscomp$destructuring$var114=(delete $jscomp$destructuring$var114.mark,delete $jscomp$destructuring$var114.encoding,delete $jscomp$destructuring$var114.selection,delete $jscomp$destructuring$var114.projection,\n$jscomp$destructuring$var114);mark=isMarkDef(mark)?mark:{type:mark};selection&&warn(selectionNotSupported(compositeMark));const {orient,inputType}=errorBarOrientAndInputType(spec,compositeMark),{continuousAxisChannelDef,continuousAxisChannelDef2,continuousAxisChannelDefError,continuousAxisChannelDefError2,continuousAxis}=compositeMarkContinuousAxis(spec,orient,compositeMark);selection=[];spec=[];var continuousFieldName=continuousAxisChannelDef.field,tooltipTitleWithFieldName$jscomp$0=!1;if(\"raw\"===\ninputType){var tooltipSummary=mark.center?mark.center:mark.extent?\"iqr\"===mark.extent?\"median\":\"mean\":config.errorbar.center;var extent=mark.extent?mark.extent:\"mean\"===tooltipSummary?\"stderr\":\"iqr\";\"median\"===tooltipSummary!==(\"iqr\"===extent)&&(selection=extent,selection=\"\".concat(tooltipSummary,\" is not usually used with \").concat(selection,\" for \").concat(compositeMark,\".\"),warn(selection));\"stderr\"===extent||\"stdev\"===extent?(selection=[{op:extent,field:continuousFieldName,as:\"extent_\"+continuousFieldName},\n{op:tooltipSummary,field:continuousFieldName,as:\"center_\"+continuousFieldName}],spec=[{calculate:'datum[\"center_'.concat(continuousFieldName,'\"] + datum[\"extent_').concat(continuousFieldName,'\"]'),as:\"upper_\"+continuousFieldName},{calculate:'datum[\"center_'.concat(continuousFieldName,'\"] - datum[\"extent_').concat(continuousFieldName,'\"]'),as:\"lower_\"+continuousFieldName}],continuousFieldName={fieldPrefix:\"center_\",titlePrefix:titleCase(tooltipSummary)},tooltipTitleWithFieldName$jscomp$0=extent,tooltipTitleWithFieldName$jscomp$0=\n{fieldPrefix:\"upper_\",titlePrefix:titleCase(tooltipSummary)+\" + \"+tooltipTitleWithFieldName$jscomp$0},compositeMark=extent,compositeMark=titleCase(tooltipSummary)+\" - \"+compositeMark,tooltipSummary=[continuousFieldName,tooltipTitleWithFieldName$jscomp$0,{fieldPrefix:\"lower_\",titlePrefix:compositeMark}],tooltipTitleWithFieldName$jscomp$0=!0):(\"ci\"===extent?(compositeMark=\"mean\",tooltipSummary=\"ci0\",extent=\"ci1\"):(compositeMark=\"median\",tooltipSummary=\"q1\",extent=\"q3\"),selection=[{op:tooltipSummary,\nfield:continuousFieldName,as:\"lower_\"+continuousFieldName},{op:extent,field:continuousFieldName,as:\"upper_\"+continuousFieldName},{op:compositeMark,field:continuousFieldName,as:\"center_\"+continuousFieldName}],tooltipSummary=[{fieldPrefix:\"upper_\",titlePrefix:title$jscomp$0({field:continuousFieldName,aggregate:extent,type:\"quantitative\"},config,{allowDisabling:!1})},{fieldPrefix:\"lower_\",titlePrefix:title$jscomp$0({field:continuousFieldName,aggregate:tooltipSummary,type:\"quantitative\"},config,{allowDisabling:!1})},\n{fieldPrefix:\"center_\",titlePrefix:title$jscomp$0({field:continuousFieldName,aggregate:compositeMark,type:\"quantitative\"},config,{allowDisabling:!1})}])}else{if(mark.center||mark.extent){compositeMark=mark.center;var extent$jscomp$0=mark.extent;compositeMark=\"\".concat(extent$jscomp$0?\"extent \":\"\").concat(extent$jscomp$0&&compositeMark?\"and \":\"\").concat(compositeMark?\"center \":\"\").concat(extent$jscomp$0&&compositeMark?\"are \":\"is \",\"not needed when data are aggregated.\");warn(compositeMark)}\"aggregated-upper-lower\"===\ninputType?(tooltipSummary=[],spec=[{calculate:'datum[\"'.concat(continuousAxisChannelDef2.field,'\"]'),as:\"upper_\"+continuousFieldName},{calculate:'datum[\"'.concat(continuousFieldName,'\"]'),as:\"lower_\"+continuousFieldName}]):\"aggregated-error\"===inputType&&(tooltipSummary=[{fieldPrefix:\"\",titlePrefix:continuousFieldName}],spec=[{calculate:'datum[\"'.concat(continuousFieldName,'\"] + datum[\"').concat(continuousAxisChannelDefError.field,'\"]'),as:\"upper_\"+continuousFieldName}],continuousAxisChannelDefError2?\nspec.push({calculate:'datum[\"'.concat(continuousFieldName,'\"] + datum[\"').concat(continuousAxisChannelDefError2.field,'\"]'),as:\"lower_\"+continuousFieldName}):spec.push({calculate:'datum[\"'.concat(continuousFieldName,'\"] - datum[\"').concat(continuousAxisChannelDefError.field,'\"]'),as:\"lower_\"+continuousFieldName}));for(extent of spec)tooltipSummary.push({fieldPrefix:extent.as.substring(0,6),titlePrefix:replaceAll(replaceAll(extent.calculate,'datum[\"',\"\"),'\"]',\"\")})}spec={postAggregateCalculates:spec,\nerrorBarSpecificAggregate:selection,tooltipSummary,tooltipTitleWithFieldName:tooltipTitleWithFieldName$jscomp$0};const {errorBarSpecificAggregate,postAggregateCalculates,tooltipSummary:tooltipSummary$jscomp$0,tooltipTitleWithFieldName}=spec;encoding=Object.assign({},encoding);spec=\"x\"===continuousAxis?\"x2\":\"y2\";selection=\"x\"===continuousAxis?\"xError\":\"yError\";continuousFieldName=\"x\"===continuousAxis?\"xError2\":\"yError2\";encoding=(delete encoding[continuousAxis],delete encoding[spec],delete encoding[selection],\ndelete encoding[continuousFieldName],encoding);const {bins,timeUnits,aggregate:oldAggregate,groupby:oldGroupBy,encoding:encodingWithoutContinuousAxis}=extractTransformsFromEncoding(encoding,config);config=[...oldAggregate,...errorBarSpecificAggregate];encoding=\"raw\"!==inputType?[]:oldGroupBy;spec=getCompositeMarkTooltip(tooltipSummary$jscomp$0,continuousAxisChannelDef,encodingWithoutContinuousAxis,tooltipTitleWithFieldName);return{transform:[...(null!==(_outerSpec$transform=$jscomp$destructuring$var114.transform)&&\nvoid 0!==_outerSpec$transform?_outerSpec$transform:[]),...bins,...timeUnits,...(0===config.length?[]:[{aggregate:config,groupby:encoding}]),...postAggregateCalculates],groupby:encoding,continuousAxisChannelDef,continuousAxis,encodingWithoutContinuousAxis,ticksOrient:\"vertical\"===orient?\"horizontal\":\"vertical\",markDef:mark,outerSpec:$jscomp$destructuring$var114,tooltipEncoding:spec}}function normalizeErrorBand(spec,$jscomp$destructuring$var121){({config:$jscomp$destructuring$var121}=$jscomp$destructuring$var121);\nspec=Object.assign({},spec,{encoding:normalizeEncoding(spec.encoding,$jscomp$destructuring$var121)});const {transform,continuousAxisChannelDef,continuousAxis,encodingWithoutContinuousAxis,markDef,outerSpec,tooltipEncoding}=errorBarParams(spec,\"errorband\",$jscomp$destructuring$var121);$jscomp$destructuring$var121=makeCompositeAggregatePartFactory(markDef,continuousAxis,continuousAxisChannelDef,encodingWithoutContinuousAxis,$jscomp$destructuring$var121.errorband);spec=void 0!==spec.encoding.x&&void 0!==\nspec.encoding.y;let bandMark={type:spec?\"area\":\"rect\"},bordersMark={type:spec?\"line\":\"rule\"};const interpolate=Object.assign({},markDef.interpolate?{interpolate:markDef.interpolate}:{},markDef.tension&&markDef.interpolate?{tension:markDef.tension}:{});spec?(bandMark=Object.assign({},bandMark,interpolate,{ariaRoleDescription:\"errorband\"}),bordersMark=Object.assign({},bordersMark,interpolate,{aria:!1})):markDef.interpolate?warn(errorBand1DNotSupport(\"interpolate\")):markDef.tension&&warn(errorBand1DNotSupport(\"tension\"));\nreturn Object.assign({},outerSpec,{transform,layer:[...$jscomp$destructuring$var121({partName:\"band\",mark:bandMark,positionPrefix:\"lower\",endPositionPrefix:\"upper\",extraEncoding:tooltipEncoding}),...$jscomp$destructuring$var121({partName:\"borders\",mark:bordersMark,positionPrefix:\"lower\",extraEncoding:tooltipEncoding}),...$jscomp$destructuring$var121({partName:\"borders\",mark:bordersMark,positionPrefix:\"upper\",extraEncoding:tooltipEncoding})]})}function add$jscomp$0(mark,run,parts){run=new CompositeMarkNormalizer(mark,\nrun);compositeMarkRegistry[mark]={normalizer:run,parts}}function assembleParameterSignals(params){const signals=[];for(const param of params||[]){var $jscomp$destructuring$var122=param,$jscomp$destructuring$var123=Object.assign({},$jscomp$destructuring$var122);params=$jscomp$destructuring$var122.expr;$jscomp$destructuring$var122=$jscomp$destructuring$var122.bind;$jscomp$destructuring$var123=(delete $jscomp$destructuring$var123.expr,delete $jscomp$destructuring$var123.bind,$jscomp$destructuring$var123);\n$jscomp$destructuring$var122&&params?(params=Object.assign({},$jscomp$destructuring$var123,{bind:$jscomp$destructuring$var122,init:params}),signals.push(params)):(params=Object.assign({},$jscomp$destructuring$var123,params?{update:params}:{},$jscomp$destructuring$var122?{bind:$jscomp$destructuring$var122}:{}),signals.push(params))}return signals}function isLegendBinding(bind){return!!bind&&(\"legend\"===bind||!!bind.legend)}function isLegendStreamBinding(bind){return isLegendBinding(bind)&&isObject(bind)}\nfunction extractTopLevelProperties(t,includeParams){const o={};for(const p of TOP_LEVEL_PROPERTIES)t&&void 0!==t[p]&&(o[p]=signalRefOrValue(t[p]));includeParams&&(o.params=t.params);return o}function isStep(size){return isObject(size)&&void 0!==size.step}function isFrameMixins(o){return o.view||o.width||o.height}function extractCompositionLayout(spec,specType,config){const layout={},{spacing:spacingConfig,columns}=config[specType];void 0!==spacingConfig&&(layout.spacing=spacingConfig);void 0!==columns&&\n(\"facet\"in spec&&!isFacetMapping(spec.facet)||\"concat\"in spec)&&(layout.columns=columns);\"vconcat\"in spec&&(layout.columns=1);for(const prop of COMPOSITION_LAYOUT_PROPERTIES)if(void 0!==spec[prop])if(\"spacing\"===prop){var _spacing$row,_spacing$column;specType=spec[prop];layout[prop]=isNumber(specType)?specType:{row:null!==(_spacing$row=specType.row)&&void 0!==_spacing$row?_spacing$row:spacingConfig,column:null!==(_spacing$column=specType.column)&&void 0!==_spacing$column?_spacing$column:spacingConfig}}else layout[prop]=\nspec[prop];return layout}function getViewConfigContinuousSize(viewConfig,channel){var _viewConfig$channel;return null!==(_viewConfig$channel=viewConfig[channel])&&void 0!==_viewConfig$channel?_viewConfig$channel:viewConfig[\"width\"===channel?\"continuousWidth\":\"continuousHeight\"]}function getViewConfigDiscreteStep(viewConfig,channel){viewConfig=getViewConfigDiscreteSize(viewConfig,channel);return isStep(viewConfig)?viewConfig.step:20}function getViewConfigDiscreteSize(viewConfig,channel){var _viewConfig$channel2;\nchannel=null!==(_viewConfig$channel2=viewConfig[channel])&&void 0!==_viewConfig$channel2?_viewConfig$channel2:viewConfig[\"width\"===channel?\"discreteWidth\":\"discreteHeight\"];return getFirstDefined(channel,{step:viewConfig.step})}function getAxisConfigInternal(axisConfig){var props=keys$jscomp$0(axisConfig||{});const axisConfigInternal={};for(const prop of props)props=axisConfig[prop],axisConfigInternal[prop]=isConditionalAxisValue(props)?signalOrValueRefWithCondition(props):signalRefOrValue(props);\nreturn axisConfigInternal}function initConfig(specifiedConfig){specifiedConfig=void 0===specifiedConfig?{}:specifiedConfig;var $jscomp$destructuring$var125=Object.assign({},specifiedConfig),color=specifiedConfig.color,font=specifiedConfig.font;specifiedConfig=specifiedConfig.fontSize;$jscomp$destructuring$var125=(delete $jscomp$destructuring$var125.color,delete $jscomp$destructuring$var125.font,delete $jscomp$destructuring$var125.fontSize,$jscomp$destructuring$var125);font=font?{text:{font},style:{\"guide-label\":{font},\n\"guide-title\":{font},\"group-title\":{font},\"group-subtitle\":{font}}}:{};color?(color=void 0===color?{}:color,color={signals:[{name:\"color\",value:isObject(color)?Object.assign({},DEFAULT_COLOR,color):DEFAULT_COLOR}],mark:{color:{signal:\"color.blue\"}},rule:{color:{signal:\"color.gray0\"}},text:{color:{signal:\"color.gray0\"}},style:{\"guide-label\":{fill:{signal:\"color.gray0\"}},\"guide-title\":{fill:{signal:\"color.gray0\"}},\"group-title\":{fill:{signal:\"color.gray0\"}},\"group-subtitle\":{fill:{signal:\"color.gray0\"}},\ncell:{stroke:{signal:\"color.gray8\"}}},axis:{domainColor:{signal:\"color.gray13\"},gridColor:{signal:\"color.gray8\"},tickColor:{signal:\"color.gray13\"}},range:{category:[{signal:\"color.blue\"},{signal:\"color.orange\"},{signal:\"color.red\"},{signal:\"color.teal\"},{signal:\"color.green\"},{signal:\"color.yellow\"},{signal:\"color.purple\"},{signal:\"color.pink\"},{signal:\"color.brown\"},{signal:\"color.grey8\"}]}}):color={};specifiedConfig=specifiedConfig?{signals:[{name:\"fontSize\",value:isObject(specifiedConfig)?Object.assign({},\nDEFAULT_FONT_SIZE,specifiedConfig):DEFAULT_FONT_SIZE}],text:{fontSize:{signal:\"fontSize.text\"}},style:{\"guide-label\":{fontSize:{signal:\"fontSize.guideLabel\"}},\"guide-title\":{fontSize:{signal:\"fontSize.guideTitle\"}},\"group-title\":{fontSize:{signal:\"fontSize.groupTitle\"}},\"group-subtitle\":{fontSize:{signal:\"fontSize.groupSubtitle\"}}}}:{};specifiedConfig=mergeConfig({},defaultConfig$1,font,color,specifiedConfig,$jscomp$destructuring$var125||{});$jscomp$destructuring$var125=omit(specifiedConfig,configPropsWithExpr);\nfor(var prop of[\"background\",\"lineBreak\",\"padding\"])specifiedConfig[prop]&&($jscomp$destructuring$var125[prop]=signalRefOrValue(specifiedConfig[prop]));for(var markConfigType of MARK_CONFIGS)specifiedConfig[markConfigType]&&($jscomp$destructuring$var125[markConfigType]=replaceExprRefInIndex(specifiedConfig[markConfigType]));for(var axisConfigType of AXIS_CONFIGS)specifiedConfig[axisConfigType]&&($jscomp$destructuring$var125[axisConfigType]=getAxisConfigInternal(specifiedConfig[axisConfigType]));for(const headerConfigType of HEADER_CONFIGS)specifiedConfig[headerConfigType]&&\n($jscomp$destructuring$var125[headerConfigType]=replaceExprRefInIndex(specifiedConfig[headerConfigType]));specifiedConfig.legend&&($jscomp$destructuring$var125.legend=replaceExprRefInIndex(specifiedConfig.legend));specifiedConfig.scale&&($jscomp$destructuring$var125.scale=replaceExprRefInIndex(specifiedConfig.scale));if(specifiedConfig.style){prop=specifiedConfig.style;markConfigType=keys$jscomp$0(prop);axisConfigType={};for(JSCompiler_inline_result of markConfigType)axisConfigType[JSCompiler_inline_result]=\ngetAxisConfigInternal(prop[JSCompiler_inline_result]);var JSCompiler_inline_result=axisConfigType;$jscomp$destructuring$var125.style=JSCompiler_inline_result}specifiedConfig.title&&($jscomp$destructuring$var125.title=replaceExprRefInIndex(specifiedConfig.title));specifiedConfig.view&&($jscomp$destructuring$var125.view=replaceExprRefInIndex(specifiedConfig.view));return $jscomp$destructuring$var125}function stripAndRedirectConfig(config){config=duplicate(config);for(var prop$jscomp$0 of VL_ONLY_CONFIG_PROPERTIES)delete config[prop$jscomp$0];\nif(config.axis)for(var prop$jscomp$1 in config.axis)isConditionalAxisValue(config.axis[prop$jscomp$1])&&delete config.axis[prop$jscomp$1];if(config.legend)for(var prop$jscomp$2 of VL_ONLY_LEGEND_CONFIG)delete config.legend[prop$jscomp$2];if(config.mark){for(var prop$jscomp$3 of VL_ONLY_MARK_CONFIG_PROPERTIES)delete config.mark[prop$jscomp$3];config.mark.tooltip&&isObject(config.mark.tooltip)&&delete config.mark.tooltip}config.params&&(config.signals=(config.signals||[]).concat(assembleParameterSignals(config.params)),\ndelete config.params);for(var markType of MARK_STYLES){for(const prop of VL_ONLY_MARK_CONFIG_PROPERTIES)delete config[markType][prop];if(prop$jscomp$0=VL_ONLY_ALL_MARK_SPECIFIC_CONFIG_PROPERTY_INDEX[markType])for(const prop of prop$jscomp$0)delete config[markType][prop];prop$jscomp$1=prop$jscomp$0=void 0;prop$jscomp$2=config;prop$jscomp$3=markType;var toProp=void 0,propConfig=prop$jscomp$2[prop$jscomp$3];\"view\"===prop$jscomp$3&&(toProp=\"cell\");propConfig=Object.assign({},propConfig,prop$jscomp$2.style[null!==\n(prop$jscomp$1=toProp)&&void 0!==prop$jscomp$1?prop$jscomp$1:prop$jscomp$3]);isEmpty(propConfig)||(prop$jscomp$2.style[null!==(prop$jscomp$0=toProp)&&void 0!==prop$jscomp$0?prop$jscomp$0:prop$jscomp$3]=propConfig);delete prop$jscomp$2[prop$jscomp$3]}for(const m of keys$jscomp$0(compositeMarkRegistry))delete config[m];{markType=config;const {titleMarkConfig,subtitleMarkConfig,subtitle}=extractTitleConfig(markType.title);isEmpty(titleMarkConfig)||(markType.style[\"group-title\"]=Object.assign({},markType.style[\"group-title\"],\ntitleMarkConfig));isEmpty(subtitleMarkConfig)||(markType.style[\"group-subtitle\"]=Object.assign({},markType.style[\"group-subtitle\"],subtitleMarkConfig));isEmpty(subtitle)?delete markType.title:markType.title=subtitle}for(const prop in config)isObject(config[prop])&&isEmpty(config[prop])&&delete config[prop];return isEmpty(config)?void 0:config}function potentialStackedChannel(encoding,x){const y=\"x\"===x?\"y\":\"radius\";var xDef=encoding[x];encoding=encoding[y];if(isFieldDef(xDef)&&isFieldDef(encoding))if(\"quantitative\"===\nchannelDefType(xDef)&&\"quantitative\"===channelDefType(encoding)){if(xDef.stack)return x;if(encoding.stack)return y;const xAggregate=isFieldDef(xDef)&&!!xDef.aggregate,yAggregate=isFieldDef(encoding)&&!!encoding.aggregate;if(xAggregate!==yAggregate)return xAggregate?x:y;var _xDef$scale,_yDef$scale;xDef=null===(_xDef$scale=xDef.scale)||void 0===_xDef$scale?void 0:_xDef$scale.type;_xDef$scale=null===(_yDef$scale=encoding.scale)||void 0===_yDef$scale?void 0:_yDef$scale.type;if(xDef&&\"linear\"!==xDef)return y;\nif(_xDef$scale&&\"linear\"!==_xDef$scale)return x}else{if(\"quantitative\"===channelDefType(xDef))return x;if(\"quantitative\"===channelDefType(encoding))return y}else{if(\"quantitative\"===channelDefType(xDef))return x;if(\"quantitative\"===channelDefType(encoding))return y}}function getDimensionChannel(channel){switch(channel){case \"x\":return\"y\";case \"y\":return\"x\";case \"theta\":return\"radius\";case \"radius\":return\"theta\"}}function stack$jscomp$1(m,encoding,opt){opt=void 0===opt?{}:opt;m=isMarkDef(m)?m.type:\nm;if(!STACKABLE_MARKS.has(m))return null;const fieldChannel=potentialStackedChannel(encoding,\"x\")||potentialStackedChannel(encoding,\"theta\");if(!fieldChannel)return null;const stackedFieldDef=encoding[fieldChannel];var stackedField=isFieldDef(stackedFieldDef)?vgField(stackedFieldDef,{}):void 0;let dimensionChannel=getDimensionChannel(fieldChannel),dimensionDef=encoding[dimensionChannel],dimensionField=isFieldDef(dimensionDef)?vgField(dimensionDef,{}):void 0;dimensionField===stackedField&&(dimensionChannel=\ndimensionDef=dimensionField=void 0);stackedField=NONPOSITION_CHANNELS.reduce((sc,channel)=>{if(\"tooltip\"!==channel&&channelHasField(encoding,channel)){var channelDef=encoding[channel];for(const cDef of array$jscomp$0(channelDef)){channelDef=getFieldDef(cDef);if(channelDef.aggregate)continue;const f=vgField(channelDef,{});f&&f===dimensionField||sc.push({channel,fieldDef:channelDef})}}return sc},[]);let offset;void 0!==stackedFieldDef.stack?offset=isBoolean(stackedFieldDef.stack)?stackedFieldDef.stack?\n\"zero\":null:stackedFieldDef.stack:0<stackedField.length&&STACK_BY_DEFAULT_MARKS.has(m)&&(offset=\"zero\");if(!(offset&&offset in STACK_OFFSET_INDEX)||isAggregate(encoding)&&0===stackedField.length)return null;if(stackedFieldDef.scale&&stackedFieldDef.scale.type&&stackedFieldDef.scale.type!==ScaleType.LINEAR){if(opt.disallowNonLinearStack)return null;warn(\"Cannot stack non-linear scale (\".concat(stackedFieldDef.scale.type,\").\"))}if(isFieldOrDatumDef(encoding[getSecondaryRangeChannel(fieldChannel)]))return void 0!==\nstackedFieldDef.stack&&warn(cannotStackRangedMark(fieldChannel)),null;isFieldDef(stackedFieldDef)&&stackedFieldDef.aggregate&&!contains(SUM_OPS,stackedFieldDef.aggregate)&&warn('Stacking is applied even though the aggregate function is non-summative (\"'.concat(stackedFieldDef.aggregate,'\").'));return{groupbyChannel:dimensionDef?dimensionChannel:void 0,groupbyField:dimensionField,fieldChannel,impute:null===stackedFieldDef.impute?!1:isPathMark(m),stackBy:stackedField,offset}}function getPointOverlay(markDef,\nmarkConfig,encoding){markConfig=void 0===markConfig?{}:markConfig;if(\"transparent\"===markDef.point)return{opacity:0};if(markDef.point)return isObject(markDef.point)?markDef.point:{};if(void 0!==markDef.point)return null;if(markConfig.point||encoding.shape)return isObject(markConfig.point)?markConfig.point:{}}function getLineOverlay(markDef,markConfig){markConfig=void 0===markConfig?{}:markConfig;if(markDef.line)return!0===markDef.line?{}:markDef.line;if(void 0!==markDef.line)return null;if(markConfig.line)return!0===\nmarkConfig.line?{}:markConfig.line}function replaceRepeaterInEncoding(encoding,repeater){return repeater?replaceRepeaterInMapping(encoding,repeater):encoding}function replaceRepeatInProp(prop,o,repeater){const val=o[prop];if(val&&!isString(val)&&\"repeat\"in val){if(val.repeat in repeater)return Object.assign({},o,{[prop]:repeater[val.repeat]});warn('Unknown repeated value \"'.concat(val.repeat,'\".'))}else return o}function replaceRepeaterInFieldDef(fieldDef,repeater){fieldDef=replaceRepeatInProp(\"field\",\nfieldDef,repeater);if(void 0!==fieldDef){if(null===fieldDef)return null;\"sort\"in fieldDef&&isSortField(fieldDef.sort)&&(repeater=replaceRepeatInProp(\"field\",fieldDef.sort,repeater),fieldDef=Object.assign({},fieldDef,repeater?{sort:repeater}:{}));return fieldDef}}function replaceRepeaterInFieldOrDatumDef(def,repeater){if(isFieldDef(def))return replaceRepeaterInFieldDef(def,repeater);repeater=replaceRepeatInProp(\"datum\",def,repeater);repeater===def||repeater.type||(repeater.type=\"nominal\");return repeater}\nfunction replaceRepeaterInChannelDef(channelDef,repeater){if(isFieldOrDatumDef(channelDef)){if(repeater=replaceRepeaterInFieldOrDatumDef(channelDef,repeater))return repeater;if(channelDef&&\"condition\"in channelDef)return{condition:channelDef.condition}}else{if(hasConditionalFieldOrDatumDef(channelDef)){if(repeater=replaceRepeaterInFieldOrDatumDef(channelDef.condition,repeater))return Object.assign({},channelDef,{condition:repeater});channelDef=Object.assign({},channelDef);return delete channelDef.condition,\nchannelDef}return channelDef}}function replaceRepeaterInMapping(mapping,repeater){const out={};for(const channel in mapping)if(hop.call(mapping,channel)){var channelDef=mapping[channel];isArray(channelDef)?out[channel]=channelDef.map(cd=>replaceRepeaterInChannelDef(cd,repeater)).filter(cd=>cd):(channelDef=replaceRepeaterInChannelDef(channelDef,repeater),void 0!==channelDef&&(out[channel]=channelDef))}return out}function mergeEncoding($jscomp$destructuring$var155){var {parentEncoding,encoding={},layer}=\n$jscomp$destructuring$var155;$jscomp$destructuring$var155={};if(parentEncoding){var channels=new Set([...keys$jscomp$0(parentEncoding),...keys$jscomp$0(encoding)]);for(const channel of channels){channels=encoding[channel];const parentChannelDef=parentEncoding[channel];if(isFieldOrDatumDef(channels))channels=Object.assign({},parentChannelDef,channels),$jscomp$destructuring$var155[channel]=channels;else if(hasConditionalFieldOrDatumDef(channels))$jscomp$destructuring$var155[channel]=Object.assign({},\nchannels,{condition:Object.assign({},parentChannelDef,channels.condition)});else if(channels||null===channels)$jscomp$destructuring$var155[channel]=channels;else if(layer||isValueDef(parentChannelDef)||isSignalRef(parentChannelDef)||isFieldOrDatumDef(parentChannelDef)||isArray(parentChannelDef))$jscomp$destructuring$var155[channel]=parentChannelDef}}else $jscomp$destructuring$var155=encoding;return!$jscomp$destructuring$var155||isEmpty($jscomp$destructuring$var155)?void 0:$jscomp$destructuring$var155}\nfunction mergeProjection(opt){const {parentProjection:parentProjection$jscomp$0,projection:projection$jscomp$0}=opt;if(parentProjection$jscomp$0&&projection$jscomp$0){{const {parentProjection,projection}={parentProjection:parentProjection$jscomp$0,projection:projection$jscomp$0};opt=\"Layer's shared projection \".concat(stringify(parentProjection),\" is overridden by a child projection \").concat(stringify(projection),\".\")}warn(opt)}return null!==projection$jscomp$0&&void 0!==projection$jscomp$0?projection$jscomp$0:\nparentProjection$jscomp$0}function normalize$jscomp$0(spec,config){void 0===config&&(config=initConfig(spec.config));var JSCompiler_inline_result=config;JSCompiler_inline_result=void 0===JSCompiler_inline_result?{}:JSCompiler_inline_result;JSCompiler_inline_result=normalizer.map(spec,{config:JSCompiler_inline_result});const {width:width$jscomp$0,height:height$jscomp$0}=spec;{let {width,height}={width:width$jscomp$0,height:height$jscomp$0,autosize:spec.autosize};spec=isUnitSpec(JSCompiler_inline_result)||\n\"layer\"in JSCompiler_inline_result;const autosizeDefault={};spec?\"container\"==width&&\"container\"==height?(autosizeDefault.type=\"fit\",autosizeDefault.contains=\"padding\"):\"container\"==width?(autosizeDefault.type=\"fit-x\",autosizeDefault.contains=\"padding\"):\"container\"==height&&(autosizeDefault.type=\"fit-y\",autosizeDefault.contains=\"padding\"):(\"container\"==width&&(warn(containerSizeNonSingle(\"width\")),width=void 0),\"container\"==height&&(warn(containerSizeNonSingle(\"height\")),height=void 0));config=Object.assign({},\n{type:\"pad\"},autosizeDefault,config?_normalizeAutoSize(config.autosize):{},_normalizeAutoSize(JSCompiler_inline_result.autosize));\"fit\"!==config.type||spec||(warn('Autosize \"fit\" only works for single views and layered views.'),config.type=\"pad\");\"container\"==width&&\"fit\"!=config.type&&\"fit-x\"!=config.type&&warn(containerSizeNotCompatibleWithAutosize(\"width\"));\"container\"==height&&\"fit\"!=config.type&&\"fit-y\"!=config.type&&warn(containerSizeNotCompatibleWithAutosize(\"height\"));spec=deepEqual(config,\n{type:\"pad\"})?void 0:config}return Object.assign({},JSCompiler_inline_result,spec?{autosize:spec}:{})}function _normalizeAutoSize(autosize){return isString(autosize)?{type:autosize}:null!==autosize&&void 0!==autosize?autosize:{}}function makeExplicit(value){return{explicit:!0,value}}function makeImplicit(value){return{explicit:!1,value}}function tieBreakByComparing(compare){return(v1,v2,property,propertyOf)=>{const diff=compare(v1.value,v2.value);return 0<diff?v1:0>diff?v2:defaultTieBreaker(v1,v2,\nproperty,propertyOf)}}function defaultTieBreaker(v1$jscomp$0,v2,property,propertyOf){if(v1$jscomp$0.explicit&&v2.explicit){var v1=v1$jscomp$0.value;v2=v2.value;property=\"Conflicting \".concat(propertyOf.toString(),' property \"').concat(property.toString(),'\" (').concat(stringify(v1),\" and \").concat(stringify(v2),\"). Using \").concat(stringify(v1),\".\");warn(property)}return v1$jscomp$0}function mergeValuesWithExplicit(v1,v2,property,propertyOf,tieBreaker){tieBreaker=void 0===tieBreaker?defaultTieBreaker:\ntieBreaker;return void 0===v1||void 0===v1.value?v2:v1.explicit&&!v2.explicit?v1:v2.explicit&&!v1.explicit?v2:deepEqual(v1.value,v2.value)?v1:tieBreaker(v1,v2,property,propertyOf)}function isNamedData(data){return\"name\"in data&&!(\"url\"in data)&&!(\"values\"in data)&&!isGenerator(data)}function isGenerator(data){return data&&(\"sequence\"in data||\"sphere\"in data||\"graticule\"in data)}function normalizeTransform(transform){return transform.map(t=>\"filter\"in t?{filter:normalizeLogicalComposition(t.filter,\nnormalizePredicate)}:t)}function eventSelector(selector,source,marks){DEFAULT_SOURCE=source||\"view\";MARKS=marks||DEFAULT_MARKS;return parseMerge(selector.trim()).map(parseSelector)}function find$jscomp$0(s,i,endChar,pushChar,popChar){const n=s.length;let count=0,c;for(;i<n;++i)if(c=s[i],count||c!==endChar)popChar&&0<=popChar.indexOf(c)?--count:pushChar&&0<=pushChar.indexOf(c)&&++count;else break;return i}function parseMerge(s){const output=[],n=s.length;let start=0,i=0;for(;i<n;)i=find$jscomp$0(s,\ni,\",\",\"[{\",\"]}\"),output.push(s.substring(start,i).trim()),start=++i;if(0===output.length)throw\"Empty event selector: \"+s;return output}function parseSelector(s){if(\"[\"===s[0]){var JSCompiler_temp=s;var n$jscomp$0=JSCompiler_temp.length;s=find$jscomp$0(JSCompiler_temp,1,\"]\",\"[\",\"]\");if(s===n$jscomp$0)throw\"Empty between selector: \"+JSCompiler_temp;n$jscomp$0=parseMerge(JSCompiler_temp.substring(1,s));if(2!==n$jscomp$0.length)throw\"Between selector must have two elements: \"+JSCompiler_temp;JSCompiler_temp=\nJSCompiler_temp.slice(s+1).trim();if(\"\\x3e\"!==JSCompiler_temp[0])throw\"Expected '\\x3e' after between selector: \"+JSCompiler_temp;n$jscomp$0=n$jscomp$0.map(parseSelector);JSCompiler_temp=parseSelector(JSCompiler_temp.slice(1).trim());JSCompiler_temp.between?JSCompiler_temp={between:n$jscomp$0,stream:JSCompiler_temp}:JSCompiler_temp.between=n$jscomp$0}else{{n$jscomp$0={source:DEFAULT_SOURCE};const source=[];let throttle=[0,0],markname=0,start=0,n=s.length,i=0,j;if(\"}\"===s[n-1]){i=s.lastIndexOf(\"{\");\nif(0<=i){try{throttle=parseThrottle(s.substring(i+1,n-1))}catch(e){throw\"Invalid throttle specification: \"+s;}s=s.slice(0,i).trim();n=s.length}else throw\"Unmatched right brace: \"+s;i=0}if(!n)throw s;\"@\"===s[0]&&(markname=++i);j=find$jscomp$0(s,i,\":\");j<n&&(source.push(s.substring(start,j).trim()),start=i=++j);i=find$jscomp$0(s,i,\"[\");if(i===n)source.push(s.substring(start,n).trim());else if(source.push(s.substring(start,i).trim()),JSCompiler_temp=[],start=++i,start===n)throw\"Unmatched left bracket: \"+\ns;for(;i<n;){i=find$jscomp$0(s,i,\"]\");if(i===n)throw\"Unmatched left bracket: \"+s;JSCompiler_temp.push(s.substring(start,i).trim());if(i<n-1&&\"[\"!==s[++i])throw\"Expected left bracket: \"+s;start=++i}if(!(n=source.length)||ILLEGAL.test(source[n-1]))throw\"Invalid event selector: \"+s;1<n?(n$jscomp$0.type=source[1],markname?n$jscomp$0.markname=source[0].slice(1):MARKS[source[0]]?n$jscomp$0.marktype=source[0]:n$jscomp$0.source=source[0]):n$jscomp$0.type=source[0];\"!\"===n$jscomp$0.type.slice(-1)&&(n$jscomp$0.consume=\n!0,n$jscomp$0.type=n$jscomp$0.type.slice(0,-1));null!=JSCompiler_temp&&(n$jscomp$0.filter=JSCompiler_temp);throttle[0]&&(n$jscomp$0.throttle=throttle[0]);throttle[1]&&(n$jscomp$0.debounce=throttle[1]);JSCompiler_temp=n$jscomp$0}}return JSCompiler_temp}function parseThrottle(s){const a=s.split(\",\");if(!s.length||2<a.length)throw s;return a.map(_=>{_=+_;if(_!==_)throw s;return _})}function wrapCondition(model,channelDef,vgChannel,refFn){var condition=!!channelDef&&\"condition\"in channelDef&&channelDef.condition;\nchannelDef=refFn(channelDef);return condition?(condition=array$jscomp$0(condition).map(c=>{const conditionValueRef=refFn(c);c=c.selection?parseSelectionPredicate(model,c.selection):expression$jscomp$0(model,c.test);return Object.assign({},{test:c},conditionValueRef)}),{[vgChannel]:[...condition,...(void 0!==channelDef?[channelDef]:[])]}):void 0!==channelDef?{[vgChannel]:channelDef}:{}}function text$jscomp$0(model,channel){channel=void 0===channel?\"text\":channel;return wrapCondition(model,model.encoding[channel],\nchannel,cDef=>textRef(cDef,model.config))}function textRef(channelDef,config,expr){expr=void 0===expr?\"datum\":expr;if(channelDef){if(isValueDef(channelDef))return signalOrValueRef(channelDef.value);if(isFieldOrDatumDef(channelDef)){const {format,formatType}=getFormatMixins(channelDef);return formatSignalRef({fieldOrDatumDef:channelDef,format,formatType,expr,config})}}}function tooltip(model,opt){opt=void 0===opt?{}:opt;const {encoding,markDef,config,stack}=model,channelDef=encoding.tooltip;if(isArray(channelDef))return{tooltip:tooltipRefForEncoding({tooltip:channelDef},\nstack,config,opt)};{const datum=opt.reactiveGeom?\"datum.datum\":\"datum\";return wrapCondition(model,channelDef,\"tooltip\",cDef=>{const tooltipRefFromChannelDef=textRef(cDef,config,datum);if(tooltipRefFromChannelDef)return tooltipRefFromChannelDef;if(null!==cDef){cDef=getMarkPropOrConfig(\"tooltip\",markDef,config);!0===cDef&&(cDef={content:\"encoding\"});if(isString(cDef))return{value:cDef};if(isObject(cDef))return isSignalRef(cDef)?cDef:\"encoding\"===cDef.content?tooltipRefForEncoding(encoding,stack,config,\nopt):{signal:datum}}})}}function tooltipData(encoding,stack,config,$jscomp$destructuring$var156){function add(fDef,channel){var _value,mainChannel=getMainRangeChannel(channel);fDef=isTypedFieldDef(fDef)?fDef:Object.assign({},fDef,{type:encoding[mainChannel].type});mainChannel=fDef.title||titleFormatter(fDef,config);mainChannel=array$jscomp$0(mainChannel).join(\", \");if(channel in POSITION_SCALE_CHANNEL_INDEX){const channel2=\"x\"===channel?\"x2\":\"y2\";var fieldDef2=getFieldDef(encoding[channel2]);if(isBinned(fDef.bin)&&\nfieldDef2){var value=vgField(fDef,{expr});fieldDef2=vgField(fieldDef2,{expr});const {format,formatType}=getFormatMixins(fDef);value=binFormatExpression(value,fieldDef2,format,formatType,config);toSkip[channel2]=!0}else if(stack&&stack.fieldChannel===channel&&\"normalize\"===stack.offset){const {format,formatType}=getFormatMixins(fDef);value=formatSignalRef({fieldOrDatumDef:fDef,format,formatType,expr,config,normalizeStack:!0}).signal}}value=null!==(_value=value)&&void 0!==_value?_value:textRef(fDef,\nconfig,expr).signal;tuples.push({channel,key:mainChannel,value})}({reactiveGeom:$jscomp$destructuring$var156}=void 0===$jscomp$destructuring$var156?{}:$jscomp$destructuring$var156);const toSkip={},expr=$jscomp$destructuring$var156?\"datum.datum\":\"datum\",tuples=[];forEach(encoding,(channelDef,channel)=>{isFieldDef(channelDef)?add(channelDef,channel):hasConditionalFieldDef(channelDef)&&add(channelDef.condition,channel)});$jscomp$destructuring$var156={};for(const $jscomp$destructuring$var157 of tuples){const {channel,\nkey,value}=$jscomp$destructuring$var157;toSkip[channel]||$jscomp$destructuring$var156[key]||($jscomp$destructuring$var156[key]=value)}return $jscomp$destructuring$var156}function tooltipRefForEncoding(encoding,stack,config,$jscomp$destructuring$var158){({reactiveGeom:$jscomp$destructuring$var158}=void 0===$jscomp$destructuring$var158?{}:$jscomp$destructuring$var158);encoding=tooltipData(encoding,stack,config,{reactiveGeom:$jscomp$destructuring$var158});encoding=entries(encoding).map($jscomp$destructuring$var159=>\n{var [key,value]=$jscomp$destructuring$var159;return'\"'.concat(key,'\": ').concat(value)});return 0<encoding.length?{signal:\"{\".concat(encoding.join(\", \"),\"}\")}:void 0}function description(model){const {encoding,markDef,config,stack}=model;var channelDef=encoding.description;if(channelDef)return wrapCondition(model,channelDef,\"description\",cDef=>textRef(cDef,model.config));channelDef=getMarkPropOrConfig(\"description\",markDef,config);if(null!=channelDef)return{description:signalOrValueRef(channelDef)};\nif(!1===config.aria)return{};channelDef=tooltipData(encoding,stack,config);if(!isEmpty(channelDef))return{description:{signal:entries(channelDef).map(($jscomp$destructuring$var160,index)=>{var [key,value]=$jscomp$destructuring$var160;return'\"'.concat(0<index?\"; \":\"\").concat(key,': \" + (').concat(value,\")\")}).join(\" + \")}}}function nonPosition(channel,model,opt){opt=void 0===opt?{}:opt;const {markDef,encoding,config}=model,{vgChannel}=opt;let {defaultRef,defaultValue}=opt;if(void 0===defaultRef){var _defaultValue;\ndefaultValue=null!==(_defaultValue=defaultValue)&&void 0!==_defaultValue?_defaultValue:getMarkPropOrConfig(channel,markDef,config,{vgChannel,ignoreVgConfig:!0});void 0!==defaultValue&&(defaultRef=signalOrValueRef(defaultValue))}return wrapCondition(model,encoding[channel],null!==vgChannel&&void 0!==vgChannel?vgChannel:channel,cDef=>midPoint({channel,channelDef:cDef,markDef,config,scaleName:model.scaleName(channel),scale:model.getScaleComponent(channel),stack:null,defaultRef}))}function color$jscomp$0(model,\nopt){opt=void 0===opt?{filled:void 0}:opt;var _opt$filled,_ref,_getMarkPropOrConfig,_getMarkPropOrConfig2;const {markDef,encoding,config}=model,{type:markType}=markDef;opt=null!==(_opt$filled=opt.filled)&&void 0!==_opt$filled?_opt$filled:getMarkPropOrConfig(\"filled\",markDef,config);_opt$filled=contains([\"bar\",\"point\",\"circle\",\"square\",\"geoshape\"],markType)?\"transparent\":void 0;_opt$filled=null!==(_ref=null!==(_getMarkPropOrConfig=getMarkPropOrConfig(!0===opt?\"color\":void 0,markDef,config,{vgChannel:\"fill\"}))&&\nvoid 0!==_getMarkPropOrConfig?_getMarkPropOrConfig:config.mark[!0===opt&&\"color\"])&&void 0!==_ref?_ref:_opt$filled;_ref=null!==(_getMarkPropOrConfig2=getMarkPropOrConfig(!1===opt?\"color\":void 0,markDef,config,{vgChannel:\"stroke\"}))&&void 0!==_getMarkPropOrConfig2?_getMarkPropOrConfig2:config.mark[!1===opt&&\"color\"];_getMarkPropOrConfig2=opt?\"fill\":\"stroke\";_getMarkPropOrConfig=Object.assign({},_opt$filled?{fill:signalOrValueRef(_opt$filled)}:{},_ref?{stroke:signalOrValueRef(_ref)}:{});markDef.color&&\n(opt?markDef.fill:markDef.stroke)&&warn(droppingColor(\"property\",{fill:\"fill\"in markDef,stroke:\"stroke\"in markDef}));return Object.assign({},_getMarkPropOrConfig,nonPosition(\"color\",model,{vgChannel:_getMarkPropOrConfig2,defaultValue:opt?_opt$filled:_ref}),nonPosition(\"fill\",model,{defaultValue:encoding.fill?_opt$filled:void 0}),nonPosition(\"stroke\",model,{defaultValue:encoding.stroke?_ref:void 0}))}function zindex(model){const {encoding,mark}=model,order=encoding.order;return!isPathMark(mark)&&isValueDef(order)?\nwrapCondition(model,order,\"zindex\",cd=>signalOrValueRef(cd.value)):{}}function getOffset(channel,markDef){channel=getOffsetChannel(channel);if(markDef=markDef[channel])return markDef}function pointPosition(channel$jscomp$0,model,$jscomp$destructuring$var161){var {defaultPos,vgChannel,isMidPoint:isMidPoint$jscomp$0}=$jscomp$destructuring$var161;const {encoding,markDef:markDef$jscomp$0,config:config$jscomp$0,stack:stack$jscomp$0}=model;$jscomp$destructuring$var161=encoding[channel$jscomp$0];const channel2Def=\nencoding[getSecondaryRangeChannel(channel$jscomp$0)],scaleName$jscomp$0=model.scaleName(channel$jscomp$0),scale=model.getScaleComponent(channel$jscomp$0),offset$jscomp$0=getOffset(channel$jscomp$0,markDef$jscomp$0),defaultRef=pointPositionDefaultRef({model,defaultPos,channel:channel$jscomp$0,scaleName:scaleName$jscomp$0,scale});if(!$jscomp$destructuring$var161&&channel$jscomp$0 in POSITION_SCALE_CHANNEL_INDEX&&(encoding.latitude||encoding.longitude))model={field:model.getName(channel$jscomp$0)};else a:{model=\n{channel:channel$jscomp$0,channelDef:$jscomp$destructuring$var161,channel2Def,markDef:markDef$jscomp$0,config:config$jscomp$0,isMidPoint:isMidPoint$jscomp$0,scaleName:scaleName$jscomp$0,scale,stack:stack$jscomp$0,offset:offset$jscomp$0,defaultRef};const {channel,channelDef,isMidPoint,scaleName,stack,offset,markDef,config}=model;if(isFieldOrDatumDef(channelDef)&&stack&&channel===stack.fieldChannel){if(isFieldDef(channelDef)&&(model=getBand({channel,fieldDef:channelDef,isMidPoint,markDef,stack,config}),\nvoid 0!==model)){model=interpolatedSignalRef({scaleName,fieldOrDatumDef:channelDef,startSuffix:\"start\",band:model,offset});break a}model=valueRefForFieldOrDatumDef(channelDef,scaleName,{suffix:\"end\"},{offset})}else model=midPointRefWithPositionInvalidTest(model)}return model?{[vgChannel||channel$jscomp$0]:model}:void 0}function pointPositionDefaultRef($jscomp$destructuring$var162){var {model,defaultPos,channel,scaleName,scale}=$jscomp$destructuring$var162;const {markDef,config}=model;return()=>{var mainChannel=\ngetMainRangeChannel(channel),vgChannel=getVgPositionChannel(channel);vgChannel=getMarkPropOrConfig(channel,markDef,config,{vgChannel});if(void 0!==vgChannel)return widthHeightValueOrSignalRef(channel,vgChannel);switch(defaultPos){case \"zeroOrMin\":case \"zeroOrMax\":if(scaleName&&(vgChannel=scale.get(\"type\"),!contains([ScaleType.LOG,ScaleType.TIME,ScaleType.UTC],vgChannel)&&scale.domainDefinitelyIncludesZero()))return{scale:scaleName,value:0};if(\"zeroOrMin\"===defaultPos)return\"y\"===mainChannel?{field:{group:\"height\"}}:\n{value:0};switch(mainChannel){case \"radius\":return{signal:\"min(\".concat(model.width.signal,\",\").concat(model.height.signal,\")/2\")};case \"theta\":return{signal:\"2*PI\"};case \"x\":return{field:{group:\"width\"}};case \"y\":return{value:0}}break;case \"mid\":return mainChannel=model[getSizeChannel(channel)],Object.assign({},mainChannel,{mult:.5})}}}function vgAlignedPositionChannel(channel,markDef,config,defaultAlign){defaultAlign=void 0===defaultAlign?\"middle\":defaultAlign;if(\"radius\"===channel||\"theta\"===channel)return getVgPositionChannel(channel);\nvar alignChannel=\"x\"===channel?\"align\":\"baseline\";markDef=getMarkPropOrConfig(alignChannel,markDef,config);isSignalRef(markDef)?(warn(\"The \".concat(alignChannel,\" for range marks cannot be an expression\")),alignChannel=void 0):alignChannel=markDef;return\"x\"===channel?ALIGNED_X_CHANNEL[alignChannel||(\"top\"===defaultAlign?\"left\":\"center\")]:BASELINED_Y_CHANNEL[alignChannel||defaultAlign]}function pointOrRangePosition(channel,model,$jscomp$destructuring$var163){var {defaultPos,defaultPos2,range}=$jscomp$destructuring$var163;\nreturn range?rangePosition(channel,model,{defaultPos,defaultPos2}):pointPosition(channel,model,{defaultPos})}function rangePosition(channel$jscomp$0,model,$jscomp$destructuring$var164){var {defaultPos,defaultPos2}=$jscomp$destructuring$var164;const {markDef:markDef$jscomp$0,config:config$jscomp$0}=model;var channel2=getSecondaryRangeChannel(channel$jscomp$0);$jscomp$destructuring$var164=getSizeChannel(channel$jscomp$0);{const {encoding,mark,markDef,stack,config}=model;var baseChannel=getMainRangeChannel(channel2);\nconst sizeChannel=getSizeChannel(channel2),vgChannel=getVgPositionChannel(channel2);var channelDef=encoding[baseChannel];const scaleName=model.scaleName(baseChannel),scale=model.getScaleComponent(baseChannel);baseChannel=channel2 in encoding||channel2 in markDef?getOffset(channel2,model.markDef):getOffset(baseChannel,model.markDef);if(channelDef||\"x2\"!==channel2&&\"y2\"!==channel2||!encoding.latitude&&!encoding.longitude){var {channel,channelDef:channelDef$jscomp$0,channel2Def,markDef:markDef$jscomp$1,\nconfig:config$jscomp$1,scaleName:scaleName$jscomp$0,scale:scale$jscomp$0,stack:stack$jscomp$0,offset,defaultRef}={channel:channel2,channelDef,channel2Def:encoding[channel2],markDef,config,scaleName,scale,stack,offset:baseChannel,defaultRef:void 0};channelDef=isFieldOrDatumDef(channelDef$jscomp$0)&&stack$jscomp$0&&channel.charAt(0)===stack$jscomp$0.fieldChannel.charAt(0)?valueRefForFieldOrDatumDef(channelDef$jscomp$0,scaleName$jscomp$0,{suffix:\"start\"},{offset}):midPointRefWithPositionInvalidTest({channel,\nchannelDef:channel2Def,scaleName:scaleName$jscomp$0,scale:scale$jscomp$0,stack:stack$jscomp$0,markDef:markDef$jscomp$1,config:config$jscomp$1,offset,defaultRef});channel2=void 0!==channelDef?{[vgChannel]:channelDef}:position2orSize(channel2,markDef)||position2orSize(channel2,{[channel2]:getMarkStyleConfig(channel2,markDef,config.style),[sizeChannel]:getMarkStyleConfig(sizeChannel,markDef,config.style)})||position2orSize(channel2,config[mark])||position2orSize(channel2,config.mark)||{[vgChannel]:pointPositionDefaultRef({model,\ndefaultPos:defaultPos2,channel:channel2,scaleName,scale})()}}else channel2={[vgChannel]:{field:model.getName(channel2)}}}$jscomp$destructuring$var164=channel2[$jscomp$destructuring$var164]?vgAlignedPositionChannel(channel$jscomp$0,markDef$jscomp$0,config$jscomp$0):getVgPositionChannel(channel$jscomp$0);return Object.assign({},pointPosition(channel$jscomp$0,model,{defaultPos,vgChannel:$jscomp$destructuring$var164}),channel2)}function position2orSize(channel,markDef){const sizeChannel=getSizeChannel(channel),\nvgChannel=getVgPositionChannel(channel);if(void 0!==markDef[vgChannel])return{[vgChannel]:widthHeightValueOrSignalRef(channel,markDef[vgChannel])};if(void 0!==markDef[channel])return{[vgChannel]:widthHeightValueOrSignalRef(channel,markDef[channel])};if(markDef[sizeChannel])return{[sizeChannel]:widthHeightValueOrSignalRef(channel,markDef[sizeChannel])}}function rectPosition(model,channel$jscomp$0,mark){var _ref,_encoding$sizeChannel;const {config:config$jscomp$0,encoding:encoding$jscomp$0,markDef:markDef$jscomp$0,\nstack:stack$jscomp$0}=model;var channel2=getSecondaryRangeChannel(channel$jscomp$0),sizeChannel=getSizeChannel(channel$jscomp$0),channelDef=encoding$jscomp$0[channel$jscomp$0];channel2=encoding$jscomp$0[channel2];var scale=model.getScaleComponent(channel$jscomp$0),scaleType=scale?scale.get(\"type\"):void 0,scaleName=model.scaleName(channel$jscomp$0);const orient=markDef$jscomp$0.orient;sizeChannel=null!==(_ref=null!==(_encoding$sizeChannel=encoding$jscomp$0[sizeChannel])&&void 0!==_encoding$sizeChannel?\n_encoding$sizeChannel:encoding$jscomp$0.size)&&void 0!==_ref?_ref:getMarkPropOrConfig(\"size\",markDef$jscomp$0,config$jscomp$0,{vgChannel:sizeChannel});_ref=\"bar\"===mark&&(\"x\"===channel$jscomp$0?\"vertical\"===orient:\"horizontal\"===orient);if(isFieldDef(channelDef)&&(isBinning(channelDef.bin)||isBinned(channelDef.bin)||channelDef.timeUnit&&!channel2)&&!sizeChannel&&!(scaleType in DISCRETE_DOMAIN_INDEX)){var _model$component$axes,_axis$get;mark=getBand({channel:channel$jscomp$0,fieldDef:channelDef,stack:stack$jscomp$0,\nmarkDef:markDef$jscomp$0,config:config$jscomp$0});model=null===(_model$component$axes=model.component.axes[channel$jscomp$0])||void 0===_model$component$axes?void 0:_model$component$axes[0];model=null!==(_axis$get=null===model||void 0===model?void 0:model.get(\"translate\"))&&void 0!==_axis$get?_axis$get:.5;a:{channel$jscomp$0={fieldDef:channelDef,fieldDef2:channel2,channel:channel$jscomp$0,markDef:markDef$jscomp$0,scaleName,band:mark,axisTranslate:model,spacing:channel$jscomp$0 in POSITION_SCALE_CHANNEL_INDEX?\ngetMarkPropOrConfig(\"binSpacing\",markDef$jscomp$0,config$jscomp$0):void 0,reverse:scale.get(\"reverse\"),config:config$jscomp$0};var {fieldDef,fieldDef2,channel,band,scaleName:scaleName$jscomp$0,markDef:markDef$jscomp$1,spacing=0,axisTranslate,reverse,config:config$jscomp$1}=channel$jscomp$0;channel$jscomp$0=getSecondaryRangeChannel(channel);channelDef=getVgPositionChannel(channel);model=getVgPositionChannel(channel$jscomp$0);mark=getOffset(channel,markDef$jscomp$1);if(isBinning(fieldDef.bin)||fieldDef.timeUnit)channel$jscomp$0=\n{[model]:rectBinRef({channel,fieldDef,scaleName:scaleName$jscomp$0,markDef:markDef$jscomp$1,band:(1-band)/2,offset:getBinSpacing(channel$jscomp$0,spacing,reverse,axisTranslate,mark),config:config$jscomp$1}),[channelDef]:rectBinRef({channel,fieldDef,scaleName:scaleName$jscomp$0,markDef:markDef$jscomp$1,band:1-(1-band)/2,offset:getBinSpacing(channel,spacing,reverse,axisTranslate,mark),config:config$jscomp$1})};else{if(isBinned(fieldDef.bin)){var startRef=valueRefForFieldOrDatumDef(fieldDef,scaleName$jscomp$0,\n{},{offset:getBinSpacing(channel$jscomp$0,spacing,reverse,axisTranslate,mark)});if(isFieldDef(fieldDef2)){channel$jscomp$0={[model]:startRef,[channelDef]:valueRefForFieldOrDatumDef(fieldDef2,scaleName$jscomp$0,{},{offset:getBinSpacing(channel,spacing,reverse,axisTranslate,mark)})};break a}if(isObject(fieldDef.bin)&&fieldDef.bin.step){channel$jscomp$0={[model]:startRef,[channelDef]:{signal:'scale(\"'.concat(scaleName$jscomp$0,'\", ').concat(vgField(fieldDef,{expr:\"datum\"}),\" + \").concat(fieldDef.bin.step,\n\")\"),offset:getBinSpacing(channel,spacing,reverse,axisTranslate,mark)}};break a}}warn(channelRequiredForBinned(channel$jscomp$0));channel$jscomp$0=void 0}}return channel$jscomp$0}if((isFieldOrDatumDef(channelDef)&&scaleType in DISCRETE_DOMAIN_INDEX||_ref)&&!channel2){{var _ref2;const {markDef,encoding,config,stack}=model;_model$component$axes=markDef.orient;scale=model.scaleName(channel$jscomp$0);scaleName=model.getScaleComponent(channel$jscomp$0);_axis$get=getSizeChannel(channel$jscomp$0);channel2=\ngetSecondaryRangeChannel(channel$jscomp$0);_model$component$axes=\"horizontal\"===_model$component$axes&&\"y\"===channel$jscomp$0||\"vertical\"===_model$component$axes&&\"x\"===channel$jscomp$0;_ref=getMarkPropOrConfig(_model$component$axes?\"size\":_axis$get,markDef,config,{vgChannel:_axis$get});if(encoding.size||void 0!==_ref)_model$component$axes?startRef=nonPosition(\"size\",model,{vgChannel:_axis$get,defaultValue:_ref}):warn('Cannot apply size to non-oriented mark \"'.concat(markDef.type,'\".'));_model$component$axes=\nnull!==(_ref2=isFieldOrDatumDef(channelDef)?getBand({channel:channel$jscomp$0,fieldDef:channelDef,markDef,stack,config}):void 0)&&void 0!==_ref2?_ref2:1;startRef||(scaleType=_axis$get,_ref2=scale,_ref=scaleName,startRef=config,_encoding$sizeChannel=_model$component$axes,_ref?(scaleType=_ref.get(\"type\"),\"point\"===scaleType||\"band\"===scaleType?void 0!==startRef[mark].discreteBandSize?mark={value:startRef[mark].discreteBandSize}:scaleType===ScaleType.POINT?(mark=_ref.get(\"range\"),mark=isVgRangeStep(mark)&&\nisNumber(mark.step)?{value:mark.step-2}:{value:18}):mark={scale:_ref2,band:_encoding$sizeChannel}:mark={value:startRef[mark].continuousBandSize}):(_ref2=getViewConfigDiscreteStep(startRef.view,scaleType),mark=getFirstDefined(startRef[mark].discreteBandSize,_ref2-2),mark=void 0!==mark?{value:mark}:void 0),startRef={[_axis$get]:mark});_ref=\"band\"!==(null===scaleName||void 0===scaleName?void 0:scaleName.get(\"type\"))||!(\"band\"in startRef[_axis$get]);mark=vgAlignedPositionChannel(channel$jscomp$0,markDef,\nconfig,_ref?\"middle\":\"top\");_ref2=getOffset(channel$jscomp$0,markDef);channel$jscomp$0=midPointRefWithPositionInvalidTest({channel:channel$jscomp$0,channelDef,markDef,config,scaleName:scale,scale:scaleName,stack,offset:_ref2,defaultRef:pointPositionDefaultRef({model,defaultPos:\"mid\",channel:channel$jscomp$0,scaleName:scale,scale:scaleName}),band:_ref?.5:(1-_model$component$axes)/2});_axis$get?channel$jscomp$0=Object.assign({},{[mark]:channel$jscomp$0},startRef):(channelDef=getVgPositionChannel(channel2),\nmodel=startRef[_axis$get],model=_ref2?Object.assign({},model,{offset:_ref2}):model,channel$jscomp$0={[mark]:channel$jscomp$0,[channelDef]:isArray(channel$jscomp$0)?[channel$jscomp$0[0],Object.assign({},channel$jscomp$0[1],{offset:model})]:Object.assign({},channel$jscomp$0,{offset:model})})}return channel$jscomp$0}return rangePosition(channel$jscomp$0,model,{defaultPos:\"zeroOrMax\",defaultPos2:\"zeroOrMin\"})}function getBinSpacing(channel,spacing,reverse,translate,offset){if(channel in POLAR_POSITION_CHANNEL_INDEX)return 0;\nchannel=\"x\"===channel||\"y2\"===channel?-spacing/2:spacing/2;if(isSignalRef(reverse)||isSignalRef(offset)||isSignalRef(translate))return reverse=signalOrStringValue(reverse),offset=signalOrStringValue(offset),translate=(translate=signalOrStringValue(translate))?\"\".concat(translate,\" + \"):\"\",reverse=reverse?\"(\".concat(reverse,\" ? -1 : 1) * \"):\"\",channel=offset?\"(\".concat(offset,\" + \").concat(channel,\")\"):channel,{signal:translate+reverse+channel};offset=offset||0;return translate+(reverse?-offset-channel:\n+offset+channel)}function rectBinRef($jscomp$destructuring$var167){var {channel,fieldDef,scaleName,markDef,band,offset,config}=$jscomp$destructuring$var167;$jscomp$destructuring$var167=interpolatedSignalRef({scaleName,fieldOrDatumDef:fieldDef,band,offset});return wrapPositionInvalidTest({fieldDef,channel,markDef,ref:$jscomp$destructuring$var167,config})}function baseEncodeEntry(model,ignore){const {fill,stroke}=\"include\"===ignore.color?color$jscomp$0(model):{};var JSCompiler_temp_const=Object,JSCompiler_temp_const$jscomp$0=\nJSCompiler_temp_const.assign;ignore=markDefProperties(model.markDef,ignore);var JSCompiler_temp_const$jscomp$1=wrapAllFieldsInvalid(model,\"fill\",fill),JSCompiler_temp_const$jscomp$2=wrapAllFieldsInvalid(model,\"stroke\",stroke),JSCompiler_temp_const$jscomp$3=nonPosition(\"opacity\",model),JSCompiler_temp_const$jscomp$4=nonPosition(\"fillOpacity\",model),JSCompiler_temp_const$jscomp$5=nonPosition(\"strokeOpacity\",model),JSCompiler_temp_const$jscomp$6=nonPosition(\"strokeWidth\",model),JSCompiler_temp_const$jscomp$7=\nnonPosition(\"strokeDash\",model),JSCompiler_temp_const$jscomp$8=zindex(model),JSCompiler_temp_const$jscomp$9=tooltip(model),JSCompiler_temp_const$jscomp$10=text$jscomp$0(model,\"href\");{const {markDef:markDef$jscomp$0,config:config$jscomp$0}=model,enableAria=getMarkPropOrConfig(\"aria\",markDef$jscomp$0,config$jscomp$0);if(!1===enableAria)model={};else{var JSCompiler_temp_const$jscomp$11=Object,JSCompiler_temp_const$jscomp$12=JSCompiler_temp_const$jscomp$11.assign;{const {mark,markDef,config}=model;if(!1===\nconfig.aria)var JSCompiler_inline_result={};else JSCompiler_inline_result=getMarkPropOrConfig(\"ariaRoleDescription\",markDef,config),JSCompiler_inline_result=null!=JSCompiler_inline_result?{ariaRoleDescription:{value:JSCompiler_inline_result}}:mark in VG_MARK_INDEX?{}:{ariaRoleDescription:{value:mark}}}model=JSCompiler_temp_const$jscomp$12.call(JSCompiler_temp_const$jscomp$11,{},enableAria?{aria:enableAria}:{},JSCompiler_inline_result,description(model))}}return JSCompiler_temp_const$jscomp$0.call(JSCompiler_temp_const,\n{},ignore,JSCompiler_temp_const$jscomp$1,JSCompiler_temp_const$jscomp$2,JSCompiler_temp_const$jscomp$3,JSCompiler_temp_const$jscomp$4,JSCompiler_temp_const$jscomp$5,JSCompiler_temp_const$jscomp$6,JSCompiler_temp_const$jscomp$7,JSCompiler_temp_const$jscomp$8,JSCompiler_temp_const$jscomp$9,JSCompiler_temp_const$jscomp$10,model)}function wrapAllFieldsInvalid(model,channel,valueRef){const {config,mark,markDef}=model;return\"hide\"===getMarkPropOrConfig(\"invalid\",markDef,config)&&valueRef&&!isPathMark(mark)&&\n(model=allFieldsInvalidPredicate(model,{invalid:!0,channels:SCALE_CHANNELS}))?{[channel]:[{test:model,value:null},...array$jscomp$0(valueRef)]}:valueRef?{[channel]:valueRef}:{}}function markDefProperties(mark,ignore){return VG_MARK_CONFIGS.reduce((m,prop)=>{ALWAYS_IGNORE.has(prop)||void 0===mark[prop]||\"ignore\"===ignore[prop]||(m[prop]=signalOrValueRef(mark[prop]));return m},{})}function allFieldsInvalidPredicate(model,$jscomp$destructuring$var168){var {invalid=!1,channels}=$jscomp$destructuring$var168;\n$jscomp$destructuring$var168=channels.reduce((aggregator,channel)=>{var scaleComponent=model.getScaleComponent(channel);scaleComponent&&(scaleComponent=scaleComponent.get(\"type\"),(channel=model.vgField(channel,{expr:\"datum\"}))&&scaleComponent in CONTINUOUS_DOMAIN_INDEX&&(aggregator[channel]=!0));return aggregator},{});$jscomp$destructuring$var168=keys$jscomp$0($jscomp$destructuring$var168);if(0<$jscomp$destructuring$var168.length){const op=invalid?\"||\":\"\\x26\\x26\";return $jscomp$destructuring$var168.map(field=>\nfieldInvalidPredicate(field,invalid)).join(\" \".concat(op,\" \"))}}function defined(model){const {config,markDef}=model;return getMarkPropOrConfig(\"invalid\",markDef,config)&&(model=allFieldsInvalidPredicate$1(model,{channels:POSITION_SCALE_CHANNELS}))?{defined:{signal:model}}:{}}function allFieldsInvalidPredicate$1(model,$jscomp$destructuring$var169){var {invalid=!1,channels}=$jscomp$destructuring$var169;$jscomp$destructuring$var169=channels.reduce((aggregator,channel)=>{var scaleComponent=model.getScaleComponent(channel);\nscaleComponent&&(scaleComponent=scaleComponent.get(\"type\"),(channel=model.vgField(channel,{expr:\"datum\"}))&&scaleComponent in CONTINUOUS_DOMAIN_INDEX&&(aggregator[channel]=!0));return aggregator},{});$jscomp$destructuring$var169=keys$jscomp$0($jscomp$destructuring$var169);if(0<$jscomp$destructuring$var169.length){const op=invalid?\"||\":\"\\x26\\x26\";return $jscomp$destructuring$var169.map(field=>fieldInvalidPredicate(field,invalid)).join(\" \".concat(op,\" \"))}}function valueIfDefined(prop,value){if(void 0!==\nvalue)return{[prop]:signalOrValueRef(value)}}function domain$1(model,channel){model=$(model.scaleName(channel));return\"domain(\".concat(model,\")\")}function isTopLevelLayer(model){var _model$parent$parent;return model.parent&&isLayerModel(model.parent)&&(null!==(_model$parent$parent=!model.parent.parent)&&void 0!==_model$parent$parent?_model$parent$parent:isTopLevelLayer(model.parent.parent))}function parseInteractiveLegend(model,channel,legendCmpt){var _model$fieldDef;const field=null===(_model$fieldDef=\nmodel.fieldDef(channel))||void 0===_model$fieldDef?void 0:_model$fieldDef.field;forEachSelection(model,selCmpt=>{var _selCmpt$project$hasF;const proj=null!==(_selCmpt$project$hasF=selCmpt.project.hasField[field])&&void 0!==_selCmpt$project$hasF?_selCmpt$project$hasF:selCmpt.project.hasChannel[channel];if(proj&&legendBindings.has(selCmpt)){var _legendCmpt$get;_selCmpt$project$hasF=null!==(_legendCmpt$get=legendCmpt.get(\"selections\"))&&void 0!==_legendCmpt$get?_legendCmpt$get:[];_selCmpt$project$hasF.push(selCmpt.name);\nlegendCmpt.set(\"selections\",_selCmpt$project$hasF,!1);proj.hasLegend=!0}})}function onDelta(model,selCmpt,proj,size,signals){var _scaleCmpt$get,name=selCmpt.name,anchor=name+\"_translate_anchor\";name+=\"_translate_delta\";var channel=proj.channel;const hasScales=scaleBindings.has(selCmpt);selCmpt=signals.filter(s=>s.name===proj.signals[hasScales?\"data\":\"visual\"])[0];size=model.getSizeSignalRef(size).signal;model=model.getScaleComponent(channel);signals=model.get(\"type\");const sign=hasScales&&\"x\"===channel?\n\"-\":\"\";anchor=\"\".concat(anchor,\".extent_\").concat(channel);channel=\"\".concat(sign).concat(name,\".\").concat(channel,\" / \")+(hasScales?\"\".concat(size):\"span(\".concat(anchor,\")\"));anchor=\"\".concat(hasScales?\"log\"===signals?\"panLog\":\"pow\"===signals?\"panPow\":\"panLinear\":\"panLinear\",\"(\").concat(anchor,\", \").concat(channel)+(hasScales&&\"pow\"===signals?\", \".concat(null!==(_scaleCmpt$get=model.get(\"exponent\"))&&void 0!==_scaleCmpt$get?_scaleCmpt$get:1):\"\")+\")\";selCmpt.on.push({events:{signal:name},update:hasScales?\nanchor:\"clampRange(\".concat(anchor,\", 0, \").concat(size,\")\")})}function onDelta$1(model,selCmpt,proj,size,signals){var _scaleCmpt$get,name=selCmpt.name;const channel=proj.channel,hasScales=scaleBindings.has(selCmpt);selCmpt=signals.filter(s=>s.name===proj.signals[hasScales?\"data\":\"visual\"])[0];size=model.getSizeSignalRef(size).signal;signals=model.getScaleComponent(channel);const scaleType=signals.get(\"type\"),base=hasScales?domain$1(model,channel):selCmpt.name;model=name+\"_zoom_delta\";name=\"\".concat(name).concat(\"_zoom_anchor\",\n\".\").concat(channel);name=\"\".concat(hasScales?\"log\"===scaleType?\"zoomLog\":\"pow\"===scaleType?\"zoomPow\":\"zoomLinear\":\"zoomLinear\",\"(\").concat(base,\", \").concat(name,\", \").concat(model)+(hasScales&&\"pow\"===scaleType?\", \".concat(null!==(_scaleCmpt$get=signals.get(\"exponent\"))&&void 0!==_scaleCmpt$get?_scaleCmpt$get:1):\"\")+\")\";selCmpt.on.push({events:{signal:model},update:hasScales?name:\"clampRange(\".concat(name,\", 0, \").concat(size,\")\")})}function forEachTransform(selCmpt,cb){for(const t of compilers)t.has(selCmpt)&&\ncb(t)}function assembleInit(init,isExpr,wrap){isExpr=void 0===isExpr?!0:isExpr;wrap=void 0===wrap?identity:wrap;return isArray(init)?(init=init.map(v=>assembleInit(v,isExpr,wrap)),isExpr?\"[\".concat(init.join(\", \"),\"]\"):init):isDateTime(init)?isExpr?wrap(dateTimeToExpr(init)):wrap(dateTimeToTimestamp(init)):isExpr?wrap(JSON.stringify(init)):init}function assembleUnitSelectionSignals(model,signals){forEachSelection(model,(selCmpt,selCompiler)=>{const name=selCmpt.name;let modifyExpr=selCompiler.modifyExpr(model,\nselCmpt);signals.push(...selCompiler.signals(model,selCmpt));forEachTransform(selCmpt,txCompiler=>{txCompiler.signals&&(signals=txCompiler.signals(model,selCmpt,signals));txCompiler.modifyExpr&&(modifyExpr=txCompiler.modifyExpr(model,selCmpt,modifyExpr))});signals.push({name:name+\"_modify\",on:[{events:{signal:selCmpt.name+\"_tuple\"},update:\"modify(\".concat($(selCmpt.name+\"_store\"),\", \").concat(modifyExpr,\")\")}]})});return cleanupEmptyOnArray(signals)}function assembleFacetSignals(model,signals){model.component.selection&&\nkeys$jscomp$0(model.component.selection).length&&(model=$(model.getName(\"cell\")),signals.unshift({name:\"facet\",value:{},on:[{events:eventSelector(\"mousemove\",\"scope\"),update:\"isTuple(facet) ? facet : group(\".concat(model,\").datum\")}]}));return cleanupEmptyOnArray(signals)}function assembleTopLevelSignals(model,signals){let hasSelections=!1;forEachSelection(model,(selCmpt,selCompiler)=>{const name=selCmpt.name,store=$(name+\"_store\");if(0===signals.filter(s=>s.name===name).length){const resolve=\"global\"===\nselCmpt.resolve?\"union\":selCmpt.resolve,isMulti=\"multi\"===selCmpt.type?\", true)\":\")\";signals.push({name:selCmpt.name,update:\"\".concat(\"vlSelectionResolve\",\"(\").concat(store,\", \").concat($(resolve)).concat(isMulti)})}hasSelections=!0;selCompiler.topLevelSignals&&(signals=selCompiler.topLevelSignals(model,selCmpt,signals));forEachTransform(selCmpt,txCompiler=>{txCompiler.topLevelSignals&&(signals=txCompiler.topLevelSignals(model,selCmpt,signals))})});hasSelections&&0===signals.filter(s=>\"unit\"===s.name).length&&\nsignals.unshift({name:\"unit\",value:{},on:[{events:\"mousemove\",update:\"isTuple(group()) ? group() : unit\"}]});return cleanupEmptyOnArray(signals)}function assembleUnitSelectionData(model,data){const dataCopy=[...data];forEachSelection(model,selCmpt=>{const init={name:selCmpt.name+\"_store\"};if(selCmpt.init){const fields=selCmpt.project.items.map(proj=>{proj=Object.assign({},proj);return delete proj.signals,proj}),insert=selCmpt.init.map(i=>assembleInit(i,!1));init.values=\"interval\"===selCmpt.type?[{unit:unitName(model,\n{escape:!1}),fields,values:insert}]:insert.map(i=>({unit:unitName(model,{escape:!1}),fields,values:i}))}dataCopy.filter(d=>d.name===selCmpt.name+\"_store\").length||dataCopy.push(init)});return dataCopy}function assembleUnitSelectionMarks(model,marks){forEachSelection(model,(selCmpt,selCompiler)=>{marks=selCompiler.marks?selCompiler.marks(model,selCmpt,marks):marks;forEachTransform(selCmpt,txCompiler=>{txCompiler.marks&&(marks=txCompiler.marks(model,selCmpt,marks))})});return marks}function assembleLayerSelectionMarks(model,\nmarks){for(const child of model.children)isUnitModel(child)&&(marks=assembleUnitSelectionMarks(child,marks));return marks}function cleanupEmptyOnArray(signals){return signals.map(s=>{s.on&&!s.on.length&&delete s.on;return s})}function channelSignals(model,selCmpt,proj,init){const channel=proj.channel,vname=proj.signals.visual;proj=proj.signals.data;const hasScales=scaleBindings.has(selCmpt),scaleName=$(model.scaleName(channel));var scale=model.getScaleComponent(channel);scale=scale?scale.get(\"type\"):\nvoid 0;const scaled=str=>\"scale(\".concat(scaleName,\", \").concat(str,\")\"),size=model.getSizeSignalRef(\"x\"===channel?\"width\":\"height\").signal,coord=\"\".concat(channel,\"(unit)\");model=events$jscomp$0(selCmpt,(def,evt)=>[...def,{events:evt.between[0],update:\"[\".concat(coord,\", \").concat(coord,\"]\")},{events:evt,update:\"[\".concat(vname,\"[0], clamp(\").concat(coord,\", 0, \").concat(size,\")]\")}]);model.push({events:{signal:selCmpt.name+\"_scale_trigger\"},update:scale in CONTINUOUS_DOMAIN_INDEX?\"[\".concat(scaled(\"\".concat(proj,\n\"[0]\")),\", \").concat(scaled(\"\".concat(proj,\"[1]\")),\"]\"):\"[0, 0]\"});return hasScales?[{name:proj,on:[]}]:[Object.assign({},{name:vname},init?{init:assembleInit(init,!0,scaled)}:{value:[]},{on:model}),Object.assign({},{name:proj},init?{init:assembleInit(init)}:{},{on:[{events:{signal:vname},update:\"\".concat(vname,\"[0] \\x3d\\x3d\\x3d \").concat(vname,\"[1] ? null : invert(\").concat(scaleName,\", \").concat(vname,\")\")}]})]}function events$jscomp$0(selCmpt,cb){return selCmpt.events.reduce((on,evt)=>evt.between?\ncb(on,evt):(warn(\"\".concat(evt,\" is not an ordered event stream for interval selections.\")),on),[])}function singleOrMultiSignals(model,selCmpt){const name=selCmpt.name;var fieldsSg=name+\"_tuple_fields\";const values=selCmpt.project.items.map(p=>{const fieldDef=model.fieldDef(p.channel);return fieldDef&&fieldDef.bin?\"[\".concat(\"(item().isVoronoi ? datum.datum : datum)\",\"[\").concat($(model.vgField(p.channel,{})),\"], \")+\"\".concat(\"(item().isVoronoi ? datum.datum : datum)\",\"[\").concat($(model.vgField(p.channel,\n{binSuffix:\"end\"})),\"]]\"):\"\".concat(\"(item().isVoronoi ? datum.datum : datum)\",\"[\").concat($(p.field),\"]\")}).join(\", \");fieldsSg=\"unit: \".concat(unitName(model),\", fields: \").concat(fieldsSg,\", values\");selCmpt=selCmpt.events;return[{name:name+\"_tuple\",on:selCmpt?[{events:selCmpt,update:\"datum \\x26\\x26 item().mark.marktype !\\x3d\\x3d 'group' ? {\".concat(fieldsSg,\": [\").concat(values,\"]} : null\"),force:!0}]:[]}]}function forEachSelection(model,cb){if(model=model.component.selection)for(const sel of vals$jscomp$0(model))if(!0===\ncb(sel,compilers$1[sel.type]))break}function unitName(model,$jscomp$destructuring$var181){({escape:$jscomp$destructuring$var181}=void 0===$jscomp$destructuring$var181?{escape:!0}:$jscomp$destructuring$var181);$jscomp$destructuring$var181=$jscomp$destructuring$var181?$(model.name):model.name;for(model=model.parent;model&&!isFacetModel(model);)model=model.parent;if(model){const {facet}=model;for(const channel of FACET_CHANNELS)facet[channel]&&($jscomp$destructuring$var181+=\" + '__facet_\".concat(channel,\n\"_' + (facet[\").concat($(model.vgField(channel)),\"])\"))}return $jscomp$destructuring$var181}function requiresSelectionId(model){let identifier=!1;forEachSelection(model,selCmpt=>{identifier=identifier||selCmpt.project.items.some(proj=>\"_vgsid_\"===proj.field)});return identifier}function ASTNode(type){this.type=type}function children$jscomp$0(node){switch(node.type){case \"ArrayExpression\":return node.elements;case \"BinaryExpression\":case \"LogicalExpression\":return[node.left,node.right];case \"CallExpression\":return[node.callee].concat(node.arguments);\ncase \"ConditionalExpression\":return[node.test,node.consequent,node.alternate];case \"MemberExpression\":return[node.object,node.property];case \"ObjectExpression\":return node.properties;case \"Property\":return[node.key,node.value];case \"UnaryExpression\":return[node.argument];default:return[]}}function assert(condition,message){if(!condition)throw Error(\"ASSERT: \"+message);}function isDecimalDigit(ch){return 48<=ch&&57>=ch}function isHexDigit(ch){return 0<=\"0123456789abcdefABCDEF\".indexOf(ch)}function isOctalDigit(ch){return 0<=\n\"01234567\".indexOf(ch)}function isLineTerminator(ch){return 10===ch||13===ch||8232===ch||8233===ch}function isIdentifierStart(ch){return 36===ch||95===ch||65<=ch&&90>=ch||97<=ch&&122>=ch||92===ch||128<=ch&&RegexNonAsciiIdentifierStart.test(String.fromCharCode(ch))}function isIdentifierPart(ch){return 36===ch||95===ch||65<=ch&&90>=ch||97<=ch&&122>=ch||48<=ch&&57>=ch||92===ch||128<=ch&&RegexNonAsciiIdentifierPart.test(String.fromCharCode(ch))}function skipComment(){for(;index$jscomp$0<length$jscomp$0;){const ch=\nsource$jscomp$0.charCodeAt(index$jscomp$0);if(32===ch||9===ch||11===ch||12===ch||160===ch||5760<=ch&&0<=[5760,6158,8192,8193,8194,8195,8196,8197,8198,8199,8200,8201,8202,8239,8287,12288,65279].indexOf(ch)||isLineTerminator(ch))++index$jscomp$0;else break}}function scanHexEscape(prefix){var code=0;var len=\"u\"===prefix?4:2;for(prefix=0;prefix<len;++prefix)if(index$jscomp$0<length$jscomp$0&&isHexDigit(source$jscomp$0[index$jscomp$0])){var ch=source$jscomp$0[index$jscomp$0++];code=16*code+\"0123456789abcdef\".indexOf(ch.toLowerCase())}else throwError({},\n\"Unexpected token %0\",\"ILLEGAL\");return String.fromCharCode(code)}function getEscapedIdentifier(){var ch=source$jscomp$0.charCodeAt(index$jscomp$0++);var id=String.fromCharCode(ch);92===ch&&(117!==source$jscomp$0.charCodeAt(index$jscomp$0)&&throwError({},\"Unexpected token %0\",\"ILLEGAL\"),++index$jscomp$0,(ch=scanHexEscape(\"u\"))&&\"\\\\\"!==ch&&isIdentifierStart(ch.charCodeAt(0))||throwError({},\"Unexpected token %0\",\"ILLEGAL\"),id=ch);for(;index$jscomp$0<length$jscomp$0;){ch=source$jscomp$0.charCodeAt(index$jscomp$0);\nif(!isIdentifierPart(ch))break;++index$jscomp$0;id+=String.fromCharCode(ch);92===ch&&(id=id.substr(0,id.length-1),117!==source$jscomp$0.charCodeAt(index$jscomp$0)&&throwError({},\"Unexpected token %0\",\"ILLEGAL\"),++index$jscomp$0,(ch=scanHexEscape(\"u\"))&&\"\\\\\"!==ch&&isIdentifierPart(ch.charCodeAt(0))||throwError({},\"Unexpected token %0\",\"ILLEGAL\"),id+=ch)}return id}function scanPunctuator(){var start=index$jscomp$0,code=source$jscomp$0.charCodeAt(index$jscomp$0),ch1=source$jscomp$0[index$jscomp$0];switch(code){case 46:case 40:case 41:case 59:case 44:case 123:case 125:case 91:case 93:case 58:case 63:case 126:return++index$jscomp$0,\n{type:7,value:String.fromCharCode(code),start,end:index$jscomp$0};default:var code2=source$jscomp$0.charCodeAt(index$jscomp$0+1);if(61===code2)switch(code){case 43:case 45:case 47:case 60:case 62:case 94:case 124:case 37:case 38:case 42:return index$jscomp$0+=2,{type:7,value:String.fromCharCode(code)+String.fromCharCode(code2),start,end:index$jscomp$0};case 33:case 61:return index$jscomp$0+=2,61===source$jscomp$0.charCodeAt(index$jscomp$0)&&++index$jscomp$0,{type:7,value:source$jscomp$0.slice(start,\nindex$jscomp$0),start,end:index$jscomp$0}}}code=source$jscomp$0.substr(index$jscomp$0,4);if(\"\\x3e\\x3e\\x3e\\x3d\"===code)return index$jscomp$0+=4,{type:7,value:code,start,end:index$jscomp$0};code=code.substr(0,3);if(\"\\x3e\\x3e\\x3e\"===code||\"\\x3c\\x3c\\x3d\"===code||\"\\x3e\\x3e\\x3d\"===code)return index$jscomp$0+=3,{type:7,value:code,start,end:index$jscomp$0};code=code.substr(0,2);if(ch1===code[1]&&0<=\"+-\\x3c\\x3e\\x26|\".indexOf(ch1)||\"\\x3d\\x3e\"===code)return index$jscomp$0+=2,{type:7,value:code,start,end:index$jscomp$0};\nif(0<=\"\\x3c\\x3e\\x3d!+-*%\\x26|^/\".indexOf(ch1))return++index$jscomp$0,{type:7,value:ch1,start,end:index$jscomp$0};throwError({},\"Unexpected token %0\",\"ILLEGAL\")}function scanNumericLiteral(){var ch=source$jscomp$0[index$jscomp$0];assert(isDecimalDigit(ch.charCodeAt(0))||\".\"===ch,\"Numeric literal must start with a decimal digit or a decimal point\");var start=index$jscomp$0;var number=\"\";if(\".\"!==ch){number=source$jscomp$0[index$jscomp$0++];ch=source$jscomp$0[index$jscomp$0];if(\"0\"===number){if(\"x\"===\nch||\"X\"===ch){++index$jscomp$0;for(number=\"\";index$jscomp$0<length$jscomp$0&&isHexDigit(source$jscomp$0[index$jscomp$0]);)number+=source$jscomp$0[index$jscomp$0++];0===number.length&&throwError({},\"Unexpected token %0\",\"ILLEGAL\");isIdentifierStart(source$jscomp$0.charCodeAt(index$jscomp$0))&&throwError({},\"Unexpected token %0\",\"ILLEGAL\");return start={type:6,value:parseInt(\"0x\"+number,16),start,end:index$jscomp$0}}if(isOctalDigit(ch)){for(number=\"0\"+source$jscomp$0[index$jscomp$0++];index$jscomp$0<\nlength$jscomp$0&&isOctalDigit(source$jscomp$0[index$jscomp$0]);)number+=source$jscomp$0[index$jscomp$0++];(isIdentifierStart(source$jscomp$0.charCodeAt(index$jscomp$0))||isDecimalDigit(source$jscomp$0.charCodeAt(index$jscomp$0)))&&throwError({},\"Unexpected token %0\",\"ILLEGAL\");return start={type:6,value:parseInt(number,8),octal:!0,start,end:index$jscomp$0}}ch&&isDecimalDigit(ch.charCodeAt(0))&&throwError({},\"Unexpected token %0\",\"ILLEGAL\")}for(;isDecimalDigit(source$jscomp$0.charCodeAt(index$jscomp$0));)number+=\nsource$jscomp$0[index$jscomp$0++];ch=source$jscomp$0[index$jscomp$0]}if(\".\"===ch){for(number+=source$jscomp$0[index$jscomp$0++];isDecimalDigit(source$jscomp$0.charCodeAt(index$jscomp$0));)number+=source$jscomp$0[index$jscomp$0++];ch=source$jscomp$0[index$jscomp$0]}if(\"e\"===ch||\"E\"===ch){number+=source$jscomp$0[index$jscomp$0++];ch=source$jscomp$0[index$jscomp$0];if(\"+\"===ch||\"-\"===ch)number+=source$jscomp$0[index$jscomp$0++];if(isDecimalDigit(source$jscomp$0.charCodeAt(index$jscomp$0)))for(;isDecimalDigit(source$jscomp$0.charCodeAt(index$jscomp$0));)number+=\nsource$jscomp$0[index$jscomp$0++];else throwError({},\"Unexpected token %0\",\"ILLEGAL\")}isIdentifierStart(source$jscomp$0.charCodeAt(index$jscomp$0))&&throwError({},\"Unexpected token %0\",\"ILLEGAL\");return{type:6,value:parseFloat(number),start,end:index$jscomp$0}}function testRegExp(pattern,flags){let tmp=pattern;0<=flags.indexOf(\"u\")&&(tmp=tmp.replace(/\\\\u\\{([0-9a-fA-F]+)\\}/g,($0,$1)=>{if(1114111>=parseInt($1,16))return\"x\";throwError({},\"Invalid regular expression\")}).replace(/[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g,\n\"x\"));try{new RegExp(tmp)}catch(e){throwError({},\"Invalid regular expression\")}try{return new RegExp(pattern,flags)}catch(exception){return null}}function advance(){skipComment();if(index$jscomp$0>=length$jscomp$0)return{type:2,start:index$jscomp$0,end:index$jscomp$0};var ch=source$jscomp$0.charCodeAt(index$jscomp$0);if(isIdentifierStart(ch)){ch=index$jscomp$0;if(92===source$jscomp$0.charCodeAt(index$jscomp$0))var id=getEscapedIdentifier();else a:{for(id=index$jscomp$0++;index$jscomp$0<length$jscomp$0;){var ch$jscomp$0=\nsource$jscomp$0.charCodeAt(index$jscomp$0);if(92===ch$jscomp$0){index$jscomp$0=id;id=getEscapedIdentifier();break a}if(isIdentifierPart(ch$jscomp$0))++index$jscomp$0;else break}id=source$jscomp$0.slice(id,index$jscomp$0)}return{type:1===id.length?3:keywords.hasOwnProperty(id)?4:\"null\"===id?5:\"true\"===id||\"false\"===id?1:3,value:id,start:ch,end:index$jscomp$0}}if(40===ch||41===ch||59===ch)return scanPunctuator();if(39===ch||34===ch){var str=\"\";ch$jscomp$0=!1;ch=source$jscomp$0[index$jscomp$0];assert(\"'\"===\nch||'\"'===ch,\"String literal must starts with a quote\");id=index$jscomp$0;for(++index$jscomp$0;index$jscomp$0<length$jscomp$0;){var ch$jscomp$1=source$jscomp$0[index$jscomp$0++];if(ch$jscomp$1===ch){ch=\"\";break}else if(\"\\\\\"===ch$jscomp$1)if((ch$jscomp$1=source$jscomp$0[index$jscomp$0++])&&isLineTerminator(ch$jscomp$1.charCodeAt(0)))\"\\r\"===ch$jscomp$1&&\"\\n\"===source$jscomp$0[index$jscomp$0]&&++index$jscomp$0;else switch(ch$jscomp$1){case \"u\":case \"x\":if(\"{\"===source$jscomp$0[index$jscomp$0]){++index$jscomp$0;\nvar code=source$jscomp$0[index$jscomp$0];ch$jscomp$1=0;for(\"}\"===code&&throwError({},\"Unexpected token %0\",\"ILLEGAL\");index$jscomp$0<length$jscomp$0;){code=source$jscomp$0[index$jscomp$0++];if(!isHexDigit(code))break;ch$jscomp$1=16*ch$jscomp$1+\"0123456789abcdef\".indexOf(code.toLowerCase())}(1114111<ch$jscomp$1||\"}\"!==code)&&throwError({},\"Unexpected token %0\",\"ILLEGAL\");ch$jscomp$1=65535>=ch$jscomp$1?String.fromCharCode(ch$jscomp$1):String.fromCharCode((ch$jscomp$1-65536>>10)+55296,(ch$jscomp$1-65536&\n1023)+56320);str+=ch$jscomp$1}else str+=scanHexEscape(ch$jscomp$1);break;case \"n\":str+=\"\\n\";break;case \"r\":str+=\"\\r\";break;case \"t\":str+=\"\\t\";break;case \"b\":str+=\"\\b\";break;case \"f\":str+=\"\\f\";break;case \"v\":str+=\"\\x0B\";break;default:isOctalDigit(ch$jscomp$1)?(code=\"01234567\".indexOf(ch$jscomp$1),0!==code&&(ch$jscomp$0=!0),index$jscomp$0<length$jscomp$0&&isOctalDigit(source$jscomp$0[index$jscomp$0])&&(ch$jscomp$0=!0,code=8*code+\"01234567\".indexOf(source$jscomp$0[index$jscomp$0++]),0<=\"0123\".indexOf(ch$jscomp$1)&&\nindex$jscomp$0<length$jscomp$0&&isOctalDigit(source$jscomp$0[index$jscomp$0])&&(code=8*code+\"01234567\".indexOf(source$jscomp$0[index$jscomp$0++]))),str+=String.fromCharCode(code)):str+=ch$jscomp$1}else if(isLineTerminator(ch$jscomp$1.charCodeAt(0)))break;else str+=ch$jscomp$1}\"\"!==ch&&throwError({},\"Unexpected token %0\",\"ILLEGAL\");return{type:8,value:str,octal:ch$jscomp$0,start:id,end:index$jscomp$0}}return 46===ch?isDecimalDigit(source$jscomp$0.charCodeAt(index$jscomp$0+1))?scanNumericLiteral():\nscanPunctuator():isDecimalDigit(ch)?scanNumericLiteral():scanPunctuator()}function lex(){const token=lookahead;index$jscomp$0=token.end;lookahead=advance();index$jscomp$0=token.end;return token}function peek(){const pos=index$jscomp$0;lookahead=advance();index$jscomp$0=pos}function finishBinaryExpression(operator,left,right){const node=new ASTNode(\"||\"===operator||\"\\x26\\x26\"===operator?\"LogicalExpression\":\"BinaryExpression\");node.operator=operator;node.left=left;node.right=right;return node}function finishIdentifier(name){const node=\nnew ASTNode(\"Identifier\");node.name=name;return node}function finishLiteral(token){const node=new ASTNode(\"Literal\");node.value=token.value;node.raw=source$jscomp$0.slice(token.start,token.end);token.regex&&(\"//\"===node.raw&&(node.raw=\"/(?:)/\"),node.regex=token.regex);return node}function finishMemberExpression(accessor,object,property){const node=new ASTNode(\"MemberExpression\");node.computed=\"[\"===accessor;node.object=object;node.property=property;node.computed||(property.member=!0);return node}\nfunction finishProperty(kind,key,value){const node=new ASTNode(\"Property\");node.key=key;node.value=value;node.kind=kind;return node}function throwError(token,messageFormat){var args=Array.prototype.slice.call(arguments,2),msg=messageFormat.replace(/%(\\d)/g,(whole,index)=>{assert(index<args.length,\"Message reference must be in range\");return args[index]});var error=Error(msg);error.index=index$jscomp$0;error.description=msg;throw error;}function throwUnexpected(token){2===token.type&&throwError(token,\n\"Unexpected end of input\");6===token.type&&throwError(token,\"Unexpected number\");8===token.type&&throwError(token,\"Unexpected string\");3===token.type&&throwError(token,\"Unexpected identifier\");4===token.type&&throwError(token,\"Unexpected reserved word\");throwError(token,\"Unexpected token %0\",token.value)}function expect(value){const token=lex();7===token.type&&token.value===value||throwUnexpected(token)}function match(value){return 7===lookahead.type&&lookahead.value===value}function parseObjectPropertyKey(){index$jscomp$0=\nlookahead.start;const token=lex();return 8===token.type||6===token.type?(token.octal&&throwError(token,\"Octal literals are not allowed in strict mode.\"),finishLiteral(token)):finishIdentifier(token.value)}function parsePrimaryExpression(){if(match(\"(\")){expect(\"(\");var type=parseExpression();expect(\")\");return type}if(match(\"[\")){type=[];index$jscomp$0=lookahead.start;for(expect(\"[\");!match(\"]\");)match(\",\")?(lex(),type.push(null)):(type.push(parseConditionalExpression()),match(\"]\")||expect(\",\"));\nlex();var JSCompiler_object_inline_value_6699=new ASTNode(\"ArrayExpression\");JSCompiler_object_inline_value_6699.elements=type;return type=JSCompiler_object_inline_value_6699}if(match(\"{\")){type=[];JSCompiler_object_inline_value_6699={};var JSCompiler_object_inline_literal_6700=String;index$jscomp$0=lookahead.start;for(expect(\"{\");!match(\"}\");){index$jscomp$0=lookahead.start;var JSCompiler_object_inline_value_6701=lookahead;if(3===JSCompiler_object_inline_value_6701.type){var JSCompiler_object_inline_literal_6702=\nparseObjectPropertyKey();expect(\":\");JSCompiler_object_inline_value_6701=parseConditionalExpression();JSCompiler_object_inline_value_6701=finishProperty(\"init\",JSCompiler_object_inline_literal_6702,JSCompiler_object_inline_value_6701)}else 2===JSCompiler_object_inline_value_6701.type||7===JSCompiler_object_inline_value_6701.type?(throwUnexpected(JSCompiler_object_inline_value_6701),JSCompiler_object_inline_value_6701=void 0):(JSCompiler_object_inline_literal_6702=parseObjectPropertyKey(),expect(\":\"),\nJSCompiler_object_inline_value_6701=parseConditionalExpression(),JSCompiler_object_inline_value_6701=finishProperty(\"init\",JSCompiler_object_inline_literal_6702,JSCompiler_object_inline_value_6701));JSCompiler_object_inline_literal_6702=\"Identifier\"===JSCompiler_object_inline_value_6701.key.type?JSCompiler_object_inline_value_6701.key.name:JSCompiler_object_inline_literal_6700(JSCompiler_object_inline_value_6701.key.value);JSCompiler_object_inline_literal_6702=\"$\"+JSCompiler_object_inline_literal_6702;\nObject.prototype.hasOwnProperty.call(JSCompiler_object_inline_value_6699,JSCompiler_object_inline_literal_6702)?throwError({},\"Duplicate data property in object literal not allowed in strict mode\"):JSCompiler_object_inline_value_6699[JSCompiler_object_inline_literal_6702]=!0;type.push(JSCompiler_object_inline_value_6701);match(\"}\")||expect(\",\")}expect(\"}\");JSCompiler_object_inline_value_6699=new ASTNode(\"ObjectExpression\");JSCompiler_object_inline_value_6699.properties=type;return type=JSCompiler_object_inline_value_6699}type=\nlookahead.type;index$jscomp$0=lookahead.start;if(3===type||legalKeywords[lookahead.value])JSCompiler_object_inline_value_6699=finishIdentifier(lex().value);else if(8===type||6===type)lookahead.octal&&throwError(lookahead,\"Octal literals are not allowed in strict mode.\"),JSCompiler_object_inline_value_6699=finishLiteral(lex());else{if(4===type)throw Error(\"Disabled.\");if(1===type)type=lex(),type.value=\"true\"===type.value,JSCompiler_object_inline_value_6699=finishLiteral(type);else if(5===type)type=\nlex(),type.value=null,JSCompiler_object_inline_value_6699=finishLiteral(type);else if(match(\"/\")||match(\"/\\x3d\")){var value;lookahead=null;skipComment();type=index$jscomp$0;JSCompiler_object_inline_value_6699=source$jscomp$0[index$jscomp$0];assert(\"/\"===JSCompiler_object_inline_value_6699,\"Regular expression literal must start with a slash\");JSCompiler_object_inline_literal_6700=source$jscomp$0[index$jscomp$0++];for(JSCompiler_object_inline_literal_6702=JSCompiler_object_inline_value_6701=!1;index$jscomp$0<\nlength$jscomp$0;)if(JSCompiler_object_inline_value_6699=source$jscomp$0[index$jscomp$0++],JSCompiler_object_inline_literal_6700+=JSCompiler_object_inline_value_6699,\"\\\\\"===JSCompiler_object_inline_value_6699)JSCompiler_object_inline_value_6699=source$jscomp$0[index$jscomp$0++],isLineTerminator(JSCompiler_object_inline_value_6699.charCodeAt(0))&&throwError({},\"Invalid regular expression: missing /\"),JSCompiler_object_inline_literal_6700+=JSCompiler_object_inline_value_6699;else if(isLineTerminator(JSCompiler_object_inline_value_6699.charCodeAt(0)))throwError({},\n\"Invalid regular expression: missing /\");else if(JSCompiler_object_inline_value_6701)\"]\"===JSCompiler_object_inline_value_6699&&(JSCompiler_object_inline_value_6701=!1);else if(\"/\"===JSCompiler_object_inline_value_6699){JSCompiler_object_inline_literal_6702=!0;break}else\"[\"===JSCompiler_object_inline_value_6699&&(JSCompiler_object_inline_value_6701=!0);JSCompiler_object_inline_literal_6702||throwError({},\"Invalid regular expression: missing /\");JSCompiler_object_inline_value_6699=JSCompiler_object_inline_literal_6700.substr(1,\nJSCompiler_object_inline_literal_6700.length-2);for(value=JSCompiler_object_inline_literal_6702=\"\";index$jscomp$0<length$jscomp$0;){JSCompiler_object_inline_value_6701=source$jscomp$0[index$jscomp$0];if(!isIdentifierPart(JSCompiler_object_inline_value_6701.charCodeAt(0)))break;++index$jscomp$0;\"\\\\\"===JSCompiler_object_inline_value_6701&&index$jscomp$0<length$jscomp$0?throwError({},\"Unexpected token %0\",\"ILLEGAL\"):(value+=JSCompiler_object_inline_value_6701,JSCompiler_object_inline_literal_6702+=JSCompiler_object_inline_value_6701)}0<=\nvalue.search(/[^gimuy]/g)&&throwError({},\"Invalid regular expression\",value);JSCompiler_object_inline_value_6701=value;value=testRegExp(JSCompiler_object_inline_value_6699,JSCompiler_object_inline_value_6701);JSCompiler_object_inline_value_6699=finishLiteral({literal:JSCompiler_object_inline_literal_6700+JSCompiler_object_inline_literal_6702,value,regex:{pattern:JSCompiler_object_inline_value_6699,flags:JSCompiler_object_inline_value_6701},start:type,end:index$jscomp$0});peek()}else throwUnexpected(lex())}return JSCompiler_object_inline_value_6699}\nfunction parsePostfixExpression(){var JSCompiler_inline_result;for(JSCompiler_inline_result=parsePrimaryExpression();;)if(match(\".\")){expect(\".\");index$jscomp$0=lookahead.start;var args=lex();3===args.type||4===args.type||1===args.type||5===args.type||throwUnexpected(args);args=finishIdentifier(args.value);JSCompiler_inline_result=finishMemberExpression(\".\",JSCompiler_inline_result,args)}else if(match(\"(\")){args=[];expect(\"(\");if(!match(\")\"))for(;index$jscomp$0<length$jscomp$0;){args.push(parseConditionalExpression());\nif(match(\")\"))break;expect(\",\")}expect(\")\");{const node=new ASTNode(\"CallExpression\");node.callee=JSCompiler_inline_result;node.arguments=args;JSCompiler_inline_result=node}}else if(match(\"[\"))expect(\"[\"),args=parseExpression(),expect(\"]\"),JSCompiler_inline_result=finishMemberExpression(\"[\",JSCompiler_inline_result,args);else break;if(7===lookahead.type&&(match(\"++\")||match(\"--\")))throw Error(\"Disabled.\");return JSCompiler_inline_result}function parseUnaryExpression(){if(7!==lookahead.type&&4!==lookahead.type)var expr=\nparsePostfixExpression();else{if(match(\"++\")||match(\"--\"))throw Error(\"Disabled.\");if(match(\"+\")||match(\"-\")||match(\"~\")||match(\"!\")){var token=lex();expr=parseUnaryExpression();{token=token.value;const node=new ASTNode(\"UnaryExpression\");node.operator=token;node.argument=expr;node.prefix=!0;expr=node}}else{if(4===lookahead.type&&\"delete\"===lookahead.value||4===lookahead.type&&\"void\"===lookahead.value||4===lookahead.type&&\"typeof\"===lookahead.value)throw Error(\"Disabled.\");expr=parsePostfixExpression()}}return expr}\nfunction binaryPrecedence(token){let prec=0;if(7!==token.type&&4!==token.type)return 0;switch(token.value){case \"||\":prec=1;break;case \"\\x26\\x26\":prec=2;break;case \"|\":prec=3;break;case \"^\":prec=4;break;case \"\\x26\":prec=5;break;case \"\\x3d\\x3d\":case \"!\\x3d\":case \"\\x3d\\x3d\\x3d\":case \"!\\x3d\\x3d\":prec=6;break;case \"\\x3c\":case \"\\x3e\":case \"\\x3c\\x3d\":case \"\\x3e\\x3d\":case \"instanceof\":case \"in\":prec=7;break;case \"\\x3c\\x3c\":case \"\\x3e\\x3e\":case \"\\x3e\\x3e\\x3e\":prec=8;break;case \"+\":case \"-\":prec=9;break;case \"*\":case \"/\":case \"%\":prec=\n11}return prec}function parseConditionalExpression(){var consequent=lookahead;var expr=parseUnaryExpression();var token=lookahead;var alternate=binaryPrecedence(token);if(0===alternate)var expr$jscomp$0=expr;else{token.prec=alternate;lex();consequent=[consequent,lookahead];var right=parseUnaryExpression();for(expr$jscomp$0=[expr,token,right];0<(alternate=binaryPrecedence(lookahead));){for(;2<expr$jscomp$0.length&&alternate<=expr$jscomp$0[expr$jscomp$0.length-2].prec;)right=expr$jscomp$0.pop(),token=\nexpr$jscomp$0.pop().value,expr=expr$jscomp$0.pop(),consequent.pop(),expr=finishBinaryExpression(token,expr,right),expr$jscomp$0.push(expr);token=lex();token.prec=alternate;expr$jscomp$0.push(token);consequent.push(lookahead);expr=parseUnaryExpression();expr$jscomp$0.push(expr)}alternate=expr$jscomp$0.length-1;expr=expr$jscomp$0[alternate];for(consequent.pop();1<alternate;)consequent.pop(),expr=finishBinaryExpression(expr$jscomp$0[alternate-1].value,expr$jscomp$0[alternate-2],expr),alternate-=2;expr$jscomp$0=\nexpr}match(\"?\")&&(lex(),consequent=parseConditionalExpression(),expect(\":\"),alternate=parseConditionalExpression(),expr=new ASTNode(\"ConditionalExpression\"),expr.test=expr$jscomp$0,expr.consequent=consequent,expr.alternate=alternate,expr$jscomp$0=expr);return expr$jscomp$0}function parseExpression(){const expr=parseConditionalExpression();if(match(\",\"))throw Error(\"Disabled.\");return expr}function parser(code){source$jscomp$0=code;index$jscomp$0=0;length$jscomp$0=source$jscomp$0.length;lookahead=\nnull;peek();code=parseExpression();if(2!==lookahead.type)throw Error(\"Unexpect token after expression.\");return code}function getName(node){const name=[];if(\"Identifier\"===node.type)return[node.name];if(\"Literal\"===node.type)return[node.value];\"MemberExpression\"===node.type&&(name.push(...getName(node.object)),name.push(...getName(node.property)));return name}function startsWithDatum(node){return\"MemberExpression\"===node.object.type?startsWithDatum(node.object):\"datum\"===node.object.name}function getDependentFields(expression){expression=\nparser(expression);const dependents=new Set;expression.visit(node=>{\"MemberExpression\"===node.type&&startsWithDatum(node)&&dependents.add(getName(node).slice(1).join(\".\"))});return dependents}function parseUnitSelection(model,selDefs){const selCmpts={},selectionConfig=model.config.selection;for(const name of keys$jscomp$0(null!==selDefs&&void 0!==selDefs?selDefs:{})){const selDef=duplicate(selDefs[name]);var $jscomp$destructuring$var183=Object.assign({},selectionConfig[selDef.type]);$jscomp$destructuring$var183=\n(delete $jscomp$destructuring$var183.fields,delete $jscomp$destructuring$var183.encodings,$jscomp$destructuring$var183);for(const key in $jscomp$destructuring$var183)if(!(\"encodings\"===key&&selDef.fields||\"fields\"===key&&selDef.encodings)&&(\"mark\"===key&&(selDef[key]=Object.assign({},$jscomp$destructuring$var183[key],selDef[key])),void 0===selDef[key]||!0===selDef[key])){var _cfg$key;selDef[key]=null!==(_cfg$key=$jscomp$destructuring$var183[key])&&void 0!==_cfg$key?_cfg$key:selDef[key]}$jscomp$destructuring$var183=\nvarName(name);const selCmpt=selCmpts[$jscomp$destructuring$var183]=Object.assign({},selDef,{name:$jscomp$destructuring$var183,events:isString(selDef.on)?eventSelector(selDef.on,\"scope\"):duplicate(selDef.on)});forEachTransform(selCmpt,txCompiler=>{txCompiler.has(selCmpt)&&txCompiler.parse&&txCompiler.parse(model,selCmpt,selDef,selDefs[name])})}return selCmpts}function parseSelectionPredicate(model,selections,dfnode,datum){datum=void 0===datum?\"datum\":datum;const stores=[];selections=logicalExpr(selections,\nfunction(name){var vname=varName(name);name=model.getSelectionComponent(vname,name);vname=$(vname+\"_store\");if(name.project.timeUnit){const child=null!==dfnode&&void 0!==dfnode?dfnode:model.component.data.raw,tunode=name.project.timeUnit.clone();child.parent?tunode.insertAsParentOf(child):child.parent=tunode}\"none\"!==name.empty&&stores.push(vname);return\"vlSelectionTest(\".concat(vname,\", \").concat(datum)+(\"global\"===name.resolve?\")\":\", \".concat($(name.resolve),\")\"))});return(stores.length?\"!(\"+stores.map(s=>\n\"length(data(\".concat(s,\"))\")).join(\" || \")+\") || \":\"\")+\"(\".concat(selections,\")\")}function parseSelectionBinExtent(selCmpt,extent){const encoding=extent.encoding;let field=extent.field;if(!encoding&&!field)field=selCmpt.project.items[0].field,1<selCmpt.project.items.length&&warn('A \"field\" or \"encoding\" must be specified when using a selection as a scale domain. '+'Using \"field\": '.concat($(field),\".\"));else if(encoding&&!field){const encodings=selCmpt.project.items.filter(p=>p.channel===encoding);\n!encodings.length||1<encodings.length?(field=selCmpt.project.items[0].field,warn((encodings.length?\"Multiple \":\"No \")+\"matching \".concat($(encoding),\" encoding found for selection \").concat($(extent.selection),\". \")+'Using \"field\": '.concat($(field),\".\"))):field=encodings[0].field}return\"\".concat(selCmpt.name,\"[\").concat($(field),\"]\")}function materializeSelections(model,main){forEachSelection(model,selCmpt=>{const selection=selCmpt.name,lookupName=model.getName(\"lookup_\".concat(selection));model.component.data.outputNodes[lookupName]=\nselCmpt.materialized=new OutputNode(new FilterNode(main,model,{selection}),lookupName,DataSourceType.Lookup,model.component.data.outputNodeRefCounts)})}function expression$jscomp$0(model,filterOp,node){return logicalExpr(filterOp,predicate=>isString(predicate)?predicate:(null===predicate||void 0===predicate?0:predicate.selection)?parseSelectionPredicate(model,predicate.selection,node):fieldFilterExpression(predicate))}function assembleTitle(title,config){if(title)return isArray(title)&&!isText(title)?\ntitle.map(fieldDef=>titleFormatter(fieldDef,config)).join(\", \"):title}function setAxisEncode(axis,part,vgProp,vgRef){var _axis$encode,_axis$encode$part,_axis$encode$part$upd;axis.encode=null!==(_axis$encode=axis.encode)&&void 0!==_axis$encode?_axis$encode:{};axis.encode[part]=null!==(_axis$encode$part=axis.encode[part])&&void 0!==_axis$encode$part?_axis$encode$part:{};axis.encode[part].update=null!==(_axis$encode$part$upd=axis.encode[part].update)&&void 0!==_axis$encode$part$upd?_axis$encode$part$upd:\n{};axis.encode[part].update[vgProp]=vgRef}function assembleAxis(axisCmpt,kind,config,opt){opt=void 0===opt?{header:!1}:opt;var $jscomp$destructuring$var184=axisCmpt.combine(),$jscomp$destructuring$var185=Object.assign({},$jscomp$destructuring$var184),disable=$jscomp$destructuring$var184.disable;const orient=$jscomp$destructuring$var184.orient,scale=$jscomp$destructuring$var184.scale,labelExpr=$jscomp$destructuring$var184.labelExpr,title=$jscomp$destructuring$var184.title;$jscomp$destructuring$var184=\n$jscomp$destructuring$var184.zindex;$jscomp$destructuring$var185=(delete $jscomp$destructuring$var185.disable,delete $jscomp$destructuring$var185.orient,delete $jscomp$destructuring$var185.scale,delete $jscomp$destructuring$var185.labelExpr,delete $jscomp$destructuring$var185.title,delete $jscomp$destructuring$var185.zindex,$jscomp$destructuring$var185);if(!disable){for(const prop in $jscomp$destructuring$var185){var propType=AXIS_PROPERTY_TYPE[prop];disable=$jscomp$destructuring$var185[prop];if(propType&&\npropType!==kind&&\"both\"!==propType)delete $jscomp$destructuring$var185[prop];else if(isConditionalAxisValue(disable)){propType=disable;disable=Object.assign({},propType);propType=propType.condition;disable=(delete disable.condition,disable);propType=array$jscomp$0(propType);const propIndex=CONDITIONAL_AXIS_PROP_INDEX[prop];if(propIndex){const {vgProp,part}=propIndex;disable=[...propType.map(c=>{var $jscomp$destructuring$var189=Object.assign({},c);c=c.test;$jscomp$destructuring$var189=(delete $jscomp$destructuring$var189.test,\n$jscomp$destructuring$var189);return Object.assign({},{test:expression$jscomp$0(null,c)},$jscomp$destructuring$var189)}),disable];setAxisEncode($jscomp$destructuring$var185,part,vgProp,disable);delete $jscomp$destructuring$var185[prop]}else null===propIndex&&(disable={signal:propType.map(c=>{var $jscomp$destructuring$var191=Object.assign({},c);c=c.test;$jscomp$destructuring$var191=(delete $jscomp$destructuring$var191.test,$jscomp$destructuring$var191);return\"\".concat(expression$jscomp$0(null,c),\" ? \").concat(exprFromValueOrSignalRef($jscomp$destructuring$var191),\n\" : \")}).join(\"\")+exprFromValueOrSignalRef(disable)},$jscomp$destructuring$var185[prop]=disable)}else if(isSignalRef(disable)&&(propType=CONDITIONAL_AXIS_PROP_INDEX[prop])){const {vgProp,part}=propType;setAxisEncode($jscomp$destructuring$var185,part,vgProp,disable);delete $jscomp$destructuring$var185[prop]}}if(\"grid\"===kind){if($jscomp$destructuring$var185.grid)return $jscomp$destructuring$var185.encode&&({grid:config}=$jscomp$destructuring$var185.encode,$jscomp$destructuring$var185.encode=Object.assign({},\nconfig?{grid:config}:{}),isEmpty($jscomp$destructuring$var185.encode)&&delete $jscomp$destructuring$var185.encode),Object.assign({},{scale,orient},$jscomp$destructuring$var185,{domain:!1,labels:!1,aria:!1,maxExtent:0,minExtent:0,ticks:!1,zindex:getFirstDefined($jscomp$destructuring$var184,0)})}else if(opt.header||!axisCmpt.mainExtracted){if(void 0!==labelExpr){var _axis$encode2,_axis$encode2$labels;kind=labelExpr;(null===(_axis$encode2=$jscomp$destructuring$var185.encode)||void 0===_axis$encode2?\n0:null===(_axis$encode2$labels=_axis$encode2.labels)||void 0===_axis$encode2$labels?0:_axis$encode2$labels.update)&&isSignalRef($jscomp$destructuring$var185.encode.labels.update.text)&&(kind=replaceAll(labelExpr,\"datum.label\",$jscomp$destructuring$var185.encode.labels.update.text.signal));setAxisEncode($jscomp$destructuring$var185,\"labels\",\"text\",{signal:kind})}null===$jscomp$destructuring$var185.labelAlign&&delete $jscomp$destructuring$var185.labelAlign;if($jscomp$destructuring$var185.encode){for(const part of AXIS_PARTS)axisCmpt.hasAxisPart(part)||\ndelete $jscomp$destructuring$var185.encode[part];isEmpty($jscomp$destructuring$var185.encode)&&delete $jscomp$destructuring$var185.encode}axisCmpt=assembleTitle(title,config);return Object.assign({},{scale,orient,grid:!1},axisCmpt?{title:axisCmpt}:{},$jscomp$destructuring$var185,!1===config.aria?{aria:!1}:{},{zindex:getFirstDefined($jscomp$destructuring$var184,0)})}}}function assembleAxisSignals(model){const {axes}=model.component,signals=[];for(const channel of POSITION_SCALE_CHANNELS)if(axes[channel])for(const axis of axes[channel])if(!axis.get(\"disable\")&&\n!axis.get(\"gridScale\")){const sizeType=\"x\"===channel?\"height\":\"width\",update=model.getSizeSignalRef(sizeType).signal;sizeType!==update&&signals.push({name:sizeType,update})}return signals}function assembleAxes(axisComponents,config){const {x=[],y=[]}=axisComponents;return[...x.map(a=>assembleAxis(a,\"grid\",config)),...y.map(a=>assembleAxis(a,\"grid\",config)),...x.map(a=>assembleAxis(a,\"main\",config)),...y.map(a=>assembleAxis(a,\"main\",config))].filter(a=>a)}function getAxisConfigFromConfigTypes(configTypes,\nconfig,channel,orient){return Object.assign.apply(null,[{},...configTypes.map(configType=>{if(\"axisOrient\"===configType){configType=\"x\"===channel?\"bottom\":\"left\";const orientConfig1=config[\"x\"===channel?\"axisBottom\":\"axisLeft\"]||{},orientConfig2=config[\"x\"===channel?\"axisTop\":\"axisRight\"]||{},props=new Set([...keys$jscomp$0(orientConfig1),...keys$jscomp$0(orientConfig2)]),conditionalOrientAxisConfig={};for(const prop of props.values())conditionalOrientAxisConfig[prop]={signal:\"\".concat(orient.signal,\n' \\x3d\\x3d\\x3d \"').concat(configType,'\" ? ').concat(signalOrStringValue(orientConfig1[prop]),\" : \").concat(signalOrStringValue(orientConfig2[prop]))};return conditionalOrientAxisConfig}return config[configType]})])}function getAxisConfigs(channel,scaleType,orient,config){var typeBasedConfigTypes=\"band\"===scaleType?[\"axisDiscrete\",\"axisBand\"]:\"point\"===scaleType?[\"axisDiscrete\",\"axisPoint\"]:scaleType in QUANTITATIVE_SCALES_INDEX?[\"axisQuantitative\"]:\"time\"===scaleType||\"utc\"===scaleType?[\"axisTemporal\"]:\n[];const axisChannel=\"x\"===channel?\"axisX\":\"axisY\";scaleType=isSignalRef(orient)?\"axisOrient\":\"axis\"+titleCase(orient);typeBasedConfigTypes=[...typeBasedConfigTypes,...typeBasedConfigTypes.map(c=>axisChannel+c.substr(4))];scaleType=[\"axis\",scaleType,axisChannel];return{vlOnlyAxisConfig:getAxisConfigFromConfigTypes(typeBasedConfigTypes,config,channel,orient),vgAxisConfig:getAxisConfigFromConfigTypes(scaleType,config,channel,orient),axisConfigStyle:getAxisConfigStyle([...scaleType,...typeBasedConfigTypes],\nconfig)}}function getAxisConfigStyle(axisConfigTypes,config){const toMerge=[{}];for(const configType of axisConfigTypes){var _config$configType;if(axisConfigTypes=null===(_config$configType=config[configType])||void 0===_config$configType?void 0:_config$configType.style){axisConfigTypes=array$jscomp$0(axisConfigTypes);for(const s of axisConfigTypes)toMerge.push(config.style[s])}}return Object.assign.apply(null,toMerge)}function getAxisConfig(property,styleConfigIndex,style,axisConfigs){axisConfigs=\nvoid 0===axisConfigs?{}:axisConfigs;styleConfigIndex=getStyleConfig(property,style,styleConfigIndex);if(void 0!==styleConfigIndex)return{configFrom:\"style\",configValue:styleConfigIndex};for(const configFrom of[\"vlOnlyAxisConfig\",\"vgAxisConfig\",\"axisConfigStyle\"]){var _axisConfigs$configFr;if(void 0!==(null===(_axisConfigs$configFr=axisConfigs[configFrom])||void 0===_axisConfigs$configFr?void 0:_axisConfigs$configFr[property]))return{configFrom,configValue:axisConfigs[configFrom][property]}}return{}}\nfunction getLabelAngle(fieldOrDatumDef,axis,channel,styleConfig,axisConfigs){const labelAngle=null===axis||void 0===axis?void 0:axis.labelAngle;if(void 0!==labelAngle)return isSignalRef(labelAngle)?labelAngle:normalizeAngle(labelAngle);({configValue:axis}=getAxisConfig(\"labelAngle\",styleConfig,null===axis||void 0===axis?void 0:axis.style,axisConfigs));if(void 0!==axis)return normalizeAngle(axis);if(\"x\"===channel&&contains([\"nominal\",\"ordinal\"],fieldOrDatumDef.type)&&(!isFieldDef(fieldOrDatumDef)||\n!fieldOrDatumDef.timeUnit))return 270}function normalizeAngleExpr(angle){return\"(((\".concat(angle.signal,\" % 360) + 360) % 360)\")}function defaultLabelBaseline(angle,orient,channel,alwaysIncludeMiddle){if(void 0!==angle)return\"x\"===channel?isSignalRef(angle)?(alwaysIncludeMiddle=normalizeAngleExpr(angle),orient=isSignalRef(orient)?\"(\".concat(orient.signal,' \\x3d\\x3d\\x3d \"top\")'):\"top\"===orient,{signal:\"(45 \\x3c \".concat(alwaysIncludeMiddle,\" \\x26\\x26 \").concat(alwaysIncludeMiddle,\" \\x3c 135) || (225 \\x3c \").concat(alwaysIncludeMiddle,\n\" \\x26\\x26 \").concat(alwaysIncludeMiddle,' \\x3c 315) ? \"middle\" :')+\"(\".concat(alwaysIncludeMiddle,\" \\x3c\\x3d 45 || 315 \\x3c\\x3d \").concat(alwaysIncludeMiddle,\") \\x3d\\x3d\\x3d \").concat(orient,' ? \"bottom\" : \"top\"')}):45<angle&&135>angle||225<angle&&315>angle?\"middle\":isSignalRef(orient)?(alwaysIncludeMiddle=45>=angle||315<=angle?\"\\x3d\\x3d\\x3d\":\"!\\x3d\\x3d\",{signal:\"\".concat(orient.signal,\" \").concat(alwaysIncludeMiddle,' \"top\" ? \"bottom\" : \"top\"')}):(45>=angle||315<=angle)===(\"top\"===orient)?\"bottom\":\n\"top\":isSignalRef(angle)?(angle=normalizeAngleExpr(angle),orient=isSignalRef(orient)?\"(\".concat(orient.signal,' \\x3d\\x3d\\x3d \"left\")'):\"left\"===orient,alwaysIncludeMiddle=alwaysIncludeMiddle?'\"middle\"':\"null\",{signal:\"\".concat(angle,\" \\x3c\\x3d 45 || 315 \\x3c\\x3d \").concat(angle,\" || (135 \\x3c\\x3d \").concat(angle,\" \\x26\\x26 \").concat(angle,\" \\x3c\\x3d 225) ? \").concat(alwaysIncludeMiddle,\" : (45 \\x3c\\x3d \").concat(angle,\" \\x26\\x26 \").concat(angle,\" \\x3c\\x3d 135) \\x3d\\x3d\\x3d \").concat(orient,' ? \"top\" : \"bottom\"')}):\n45>=angle||315<=angle||135<=angle&&225>=angle?alwaysIncludeMiddle?\"middle\":null:isSignalRef(orient)?(alwaysIncludeMiddle=45<=angle&&135>=angle?\"\\x3d\\x3d\\x3d\":\"!\\x3d\\x3d\",{signal:\"\".concat(orient.signal,\" \").concat(alwaysIncludeMiddle,' \"left\" ? \"top\" : \"bottom\"')}):(45<=angle&&135>=angle)===(\"left\"===orient)?\"top\":\"bottom\"}function defaultLabelAlign(angle,orient,channel){if(void 0!==angle){var startAngle=(channel=\"x\"===channel)?0:90,mainOrient=channel?\"bottom\":\"left\";return isSignalRef(angle)?(angle=\nnormalizeAngleExpr(angle),orient=isSignalRef(orient)?\"(\".concat(orient.signal,' \\x3d\\x3d\\x3d \"').concat(mainOrient,'\")'):orient===mainOrient,{signal:\"(\".concat(startAngle?\"(\"+angle+\" + 90)\":angle,\" % 180 \\x3d\\x3d\\x3d 0) ? \").concat(channel?null:'\"center\"',\" :\")+\"(\".concat(startAngle,\" \\x3c \").concat(angle,\" \\x26\\x26 \").concat(angle,\" \\x3c \").concat(180+startAngle,\") \\x3d\\x3d\\x3d \").concat(orient,' ? \"left\" : \"right\"')}):0===(angle+startAngle)%180?channel?null:\"center\":isSignalRef(orient)?(channel=\nstartAngle<angle&&angle<180+startAngle?\"\\x3d\\x3d\\x3d\":\"!\\x3d\\x3d\",orient=\"\".concat(orient.signal,\" \").concat(channel,' \"').concat(mainOrient,'\"'),{signal:\"\".concat(orient,' ? \"left\" : \"right\"')}):(startAngle<angle&&angle<180+startAngle)===(orient===mainOrient)?\"left\":\"right\"}}function getFieldDefTitle(model,channel){var channel2=\"x\"===channel?\"x2\":\"y2\";channel=model.fieldDef(channel);model=model.fieldDef(channel2);channel2=channel?channel.title:void 0;model=model?model.title:void 0;if(channel2&&model)return mergeTitle(channel2,\nmodel);if(channel2)return channel2;if(model)return model;if(void 0!==channel2)return channel2;if(void 0!==model)return model}function sortArrayIndexField(fieldDef,channel,opt){return vgField(fieldDef,Object.assign({},{prefix:channel,suffix:\"sort_index\"},null!==opt&&void 0!==opt?opt:{}))}function getHeaderChannel(channel,orient){return contains([\"top\",\"bottom\"],orient)?\"column\":contains([\"left\",\"right\"],orient)?\"row\":\"row\"===channel?\"row\":\"column\"}function getHeaderProperty(prop,header,config,channel){return getFirstDefined((header||\n{})[prop],(\"row\"===channel?config.headerRow:\"column\"===channel?config.headerColumn:config.headerFacet)[prop],config.header[prop])}function getHeaderProperties(properties,header,config,channel){const props={};for(const prop of properties)properties=getHeaderProperty(prop,header||{},config,channel),void 0!==properties&&(props[prop]=properties);return props}function defaultHeaderGuideAlign(headerChannel,angle,anchor){switch(void 0===anchor?\"middle\":anchor){case \"start\":return{align:\"left\"};case \"end\":return{align:\"right\"}}return(headerChannel=\ndefaultLabelAlign(angle,\"row\"===headerChannel?\"left\":\"top\",\"row\"===headerChannel?\"y\":\"x\"))?{align:headerChannel}:{}}function defaultHeaderGuideBaseline(angle,channel){return(angle=defaultLabelBaseline(angle,\"row\"===channel?\"left\":\"top\",\"row\"===channel?\"y\":\"x\",!0))?{baseline:angle}:{}}function assembleLabelTitle(facetFieldDef,channel,config){const {format,formatType,labelAngle,labelAnchor,labelOrient,labelExpr}=getHeaderProperties(\"format formatType labelAngle labelAnchor labelOrient labelExpr\".split(\" \"),\nfacetFieldDef.header,config,channel),titleTextExpr=formatSignalRef({fieldOrDatumDef:facetFieldDef,format,formatType,expr:\"parent\",config}).signal,headerChannel=getHeaderChannel(channel,labelOrient);return Object.assign({},{text:{signal:labelExpr?replaceAll(replaceAll(labelExpr,\"datum.label\",titleTextExpr),\"datum.value\",vgField(facetFieldDef,{expr:\"parent\"})):titleTextExpr}},\"row\"===channel?{orient:\"left\"}:{},{style:\"guide-label\",frame:\"group\"},defaultHeaderGuideBaseline(labelAngle,headerChannel),\ndefaultHeaderGuideAlign(headerChannel,labelAngle,labelAnchor),assembleHeaderProperties(config,facetFieldDef,channel,HEADER_LABEL_PROPERTIES,HEADER_LABEL_PROPERTIES_MAP))}function assembleHeaderProperties(config,facetFieldDef,channel,properties,propertiesMap){const props={};for(const prop of properties)propertiesMap[prop]&&(properties=getHeaderProperty(prop,null===facetFieldDef||void 0===facetFieldDef?void 0:facetFieldDef.header,config,channel),void 0!==properties&&(props[propertiesMap[prop]]=properties));\nreturn props}function assembleLayoutSignals(model){return[...sizeSignals(model,\"width\"),...sizeSignals(model,\"height\"),...sizeSignals(model,\"childWidth\"),...sizeSignals(model,\"childHeight\")]}function sizeSignals(model,sizeType){var channel=\"width\"===sizeType?\"x\":\"y\",size=model.component.layoutSize.get(sizeType);if(!size||\"merged\"===size)return[];sizeType=model.getSizeSignalRef(sizeType).signal;if(\"step\"===size){if(size=model.getScaleComponent(channel)){var type=size.get(\"type\");const range=size.get(\"range\");\nif(type in DISCRETE_DOMAIN_INDEX&&isVgRangeStep(range))return type=model.scaleName(channel),isFacetModel(model.parent)&&\"independent\"===model.parent.component.resolve.scale[channel]?[{name:type+\"_step\",value:range.step}]:[{name:type+\"_step\",value:range.step},{name:sizeType,update:sizeExpr(type,size,\"domain('\".concat(type,\"').length\"))}]}throw Error(\"layout size is step although width/height is not step.\");}return\"container\"==size?(channel=(size=sizeType.endsWith(\"width\"))?\"containerSize()[0]\":\"containerSize()[1]\",\nmodel=getViewConfigContinuousSize(model.config.view,size?\"width\":\"height\"),model=\"isFinite(\".concat(channel,\") ? \").concat(channel,\" : \").concat(model),[{name:sizeType,init:model,on:[{update:model,events:\"window:resize\"}]}]):[{name:sizeType,value:size}]}function sizeExpr(scaleName,scaleComponent,cardinality){const type=scaleComponent.get(\"type\"),padding=scaleComponent.get(\"padding\"),paddingOuter=getFirstDefined(scaleComponent.get(\"paddingOuter\"),padding);scaleComponent=scaleComponent.get(\"paddingInner\");\nscaleComponent=\"band\"===type?void 0!==scaleComponent?scaleComponent:padding:1;return\"bandspace(\".concat(cardinality,\", \").concat(signalOrStringValue(scaleComponent),\", \").concat(signalOrStringValue(paddingOuter),\") * \").concat(scaleName,\"_step\")}function getSizeTypeFromLayoutSizeType(layoutSizeType){return\"childWidth\"===layoutSizeType?\"width\":\"childHeight\"===layoutSizeType?\"height\":layoutSizeType}function guideEncodeEntry(encoding,model){return keys$jscomp$0(encoding).reduce((encode,channel)=>Object.assign({},\nencode,wrapCondition(model,encoding[channel],channel,def=>signalOrValueRef(def.value))),{})}function parseGuideResolve(resolve,channel){const guide=channel in POSITION_SCALE_CHANNEL_INDEX?\"axis\":\"legend\";return\"independent\"===resolve.scale[channel]?(\"shared\"===resolve[guide][channel]&&warn('Setting the scale to be independent for \"'.concat(channel,'\" means we also have to set the guide (axis or legend) to be independent.')),\"independent\"):resolve[guide][channel]||\"shared\"}function getMaxValue(channelDef){return getConditionValue(channelDef,\n(v,conditionalDef)=>Math.max(v,conditionalDef.value))}function getFirstConditionValue(channelDef){return getConditionValue(channelDef,(v,conditionalDef)=>getFirstDefined(v,conditionalDef.value))}function getConditionValue(channelDef,reducer){var JSCompiler_inline_result=channelDef&&channelDef.condition;if(JSCompiler_inline_result=!!JSCompiler_inline_result&&(isArray(JSCompiler_inline_result)||isValueDef(JSCompiler_inline_result)))return array$jscomp$0(channelDef.condition).reduce(reducer,channelDef.value);\nif(isValueDef(channelDef))return channelDef.value}function selectedCondition(model,legendCmpt,fieldDef){model=legendCmpt.get(\"selections\");if(null!==model&&void 0!==model&&model.length){var field=$(fieldDef.field);return model.map(name=>{const store=$(varName(name)+\"_store\");return\"(!length(data(\".concat(store,\")) || (\").concat(name,\"[\").concat(field,\"] \\x26\\x26 indexof(\").concat(name,\"[\").concat(field,\"], datum.value) \\x3e\\x3d 0))\")}).join(\" || \")}}function gradientLengthSignal(model,sizeType,min,\nmax){model=model.getSizeSignalRef(sizeType).signal;return{signal:\"clamp(\".concat(model,\", \").concat(min,\", \").concat(max,\")\")}}function parseLegend(model$jscomp$0){var JSCompiler_temp;if(isUnitModel(model$jscomp$0)){var {encoding:encoding$jscomp$0}=model$jscomp$0,legendComponent={};for(const channel of[\"color\",...LEGEND_SCALE_CHANNELS]){var def=getFieldOrDatumDef(encoding$jscomp$0[channel]);if(def&&model$jscomp$0.getScaleComponent(channel)&&(\"shape\"!==channel||!isFieldDef(def)||\"geojson\"!==def.type)){a:{var _legend$direction=\ndef=void 0,_ref3=void 0,_legend=void 0,_legend$encoding=void 0;var JSCompiler_inline_result=void 0;var model=model$jscomp$0,channel$jscomp$0=channel;let legend=model.legend(channel$jscomp$0);const {markDef,encoding,config}=model;var legendConfig=config.legend;b:{var JSCompiler_inline_result$jscomp$0=model;var channel$jscomp$1=channel$jscomp$0,scale=JSCompiler_inline_result$jscomp$0.scaleName(channel$jscomp$1);if(\"trail\"===JSCompiler_inline_result$jscomp$0.mark){if(\"color\"===channel$jscomp$1){JSCompiler_inline_result$jscomp$0=\n{stroke:scale};break b}if(\"size\"===channel$jscomp$1){JSCompiler_inline_result$jscomp$0={strokeWidth:scale};break b}}JSCompiler_inline_result$jscomp$0=\"color\"===channel$jscomp$1?JSCompiler_inline_result$jscomp$0.markDef.filled?{fill:scale}:{stroke:scale}:{[channel$jscomp$1]:scale}}JSCompiler_inline_result$jscomp$0=new LegendComponent({},JSCompiler_inline_result$jscomp$0);parseInteractiveLegend(model,channel$jscomp$0,JSCompiler_inline_result$jscomp$0);channel$jscomp$1=void 0!==legend?!legend:legendConfig.disable;\nJSCompiler_inline_result$jscomp$0.set(\"disable\",channel$jscomp$1,void 0!==legend);if(channel$jscomp$1){def=JSCompiler_inline_result$jscomp$0;break a}legend=legend||{};scale=model.getScaleComponent(channel$jscomp$0).get(\"type\");channel$jscomp$1=getFieldOrDatumDef(encoding[channel$jscomp$0]);var timeUnit=isFieldDef(channel$jscomp$1)?null===(JSCompiler_inline_result=normalizeTimeUnit(channel$jscomp$1.timeUnit))||void 0===JSCompiler_inline_result?void 0:JSCompiler_inline_result.unit:void 0;const orient=\nlegend.orient||config.legend.orient||\"right\";JSCompiler_inline_result={legend,channel:channel$jscomp$0,timeUnit,scaleType:scale};({legend:timeUnit}=JSCompiler_inline_result);timeUnit=timeUnit.type;b:{var {channel:channel$jscomp$2,timeUnit:timeUnit$jscomp$0,scaleType}=JSCompiler_inline_result;if(isColorChannel(channel$jscomp$2)){if(contains([\"quarter\",\"month\",\"day\"],timeUnit$jscomp$0)){JSCompiler_inline_result=\"symbol\";break b}if(scaleType in CONTINUOUS_TO_CONTINUOUS_INDEX){JSCompiler_inline_result=\n\"gradient\";break b}}JSCompiler_inline_result=\"symbol\"}JSCompiler_inline_result=getFirstDefined(timeUnit,JSCompiler_inline_result);var {legendConfig:legendConfig$jscomp$0,legendType,orient:orient$jscomp$0,legend:legend$jscomp$0}={legend,legendType:JSCompiler_inline_result,orient,legendConfig};if(null!==(_ref3=null!==(_legend$direction=legend$jscomp$0.direction)&&void 0!==_legend$direction?_legend$direction:legendConfig$jscomp$0[legendType?\"gradientDirection\":\"symbolDirection\"])&&void 0!==_ref3)_legend$direction=\n_ref3;else b:{switch(orient$jscomp$0){case \"top\":case \"bottom\":_legend$direction=\"horizontal\";break b;case \"left\":case \"right\":case \"none\":case void 0:break;default:_legend$direction=\"gradient\"===legendType?\"horizontal\":void 0;break b}_legend$direction=void 0}legendConfig={legend,channel:channel$jscomp$0,model,markDef,encoding,fieldOrDatumDef:channel$jscomp$1,legendConfig,config,scaleType:scale,orient,legendType:JSCompiler_inline_result,direction:_legend$direction};for(const property of LEGEND_COMPONENT_PROPERTIES)if(!(\"gradient\"===\nJSCompiler_inline_result&&property.startsWith(\"symbol\")||\"symbol\"===JSCompiler_inline_result&&property.startsWith(\"gradient\"))&&(_legend$direction=property in legendRules?legendRules[property](legendConfig):legend[property],void 0!==_legend$direction)){b:{_ref3=model.fieldDef(channel$jscomp$0);switch(property){case \"disable\":_ref3=void 0!==legend;break b;case \"values\":_ref3=!(null===legend||void 0===legend||!legend.values);break b;case \"title\":if(\"title\"===property&&_legend$direction===(null===_ref3||\nvoid 0===_ref3?void 0:_ref3.title)){_ref3=!0;break b}}_ref3=_legend$direction===(legend||{})[property]}(_ref3||void 0===config.legend[property])&&JSCompiler_inline_result$jscomp$0.set(property,_legend$direction,_ref3)}legendConfig=null!==(_legend$encoding=null===(_legend=legend)||void 0===_legend?void 0:_legend.encoding)&&void 0!==_legend$encoding?_legend$encoding:{};_legend=JSCompiler_inline_result$jscomp$0.get(\"selections\");_legend$encoding={};channel$jscomp$0={fieldOrDatumDef:channel$jscomp$1,\nmodel,channel:channel$jscomp$0,legendCmpt:JSCompiler_inline_result$jscomp$0,legendType:JSCompiler_inline_result};for(const part of\"labels legend title symbols gradient entries\".split(\" \"))_legend$direction=guideEncodeEntry(null!==(JSCompiler_temp=legendConfig[part])&&void 0!==JSCompiler_temp?JSCompiler_temp:{},model),_legend$direction=part in legendEncodeRules?legendEncodeRules[part](_legend$direction,channel$jscomp$0):_legend$direction,void 0===_legend$direction||isEmpty(_legend$direction)||(_legend$encoding[part]=\nObject.assign({},(null===_legend||void 0===_legend?0:_legend.length)&&isFieldDef(channel$jscomp$1)?{name:\"\".concat(varName(channel$jscomp$1.field),\"_legend_\").concat(part)}:{},(null===_legend||void 0===_legend?0:_legend.length)?{interactive:!!_legend}:{},{update:_legend$direction}));isEmpty(_legend$encoding)||JSCompiler_inline_result$jscomp$0.set(\"encode\",_legend$encoding,!(null===(def=legend)||void 0===def||!def.encoding));def=JSCompiler_inline_result$jscomp$0}legendComponent[channel]=def}}JSCompiler_temp=\nlegendComponent}else{{const {legends,resolve}=model$jscomp$0.component;for(encoding$jscomp$0 of model$jscomp$0.children){parseLegend(encoding$jscomp$0);for(legendComponent of keys$jscomp$0(encoding$jscomp$0.component.legends))resolve.legend[legendComponent]=parseGuideResolve(model$jscomp$0.component.resolve,legendComponent),\"shared\"===resolve.legend[legendComponent]&&(legends[legendComponent]=mergeLegendComponent(legends[legendComponent],encoding$jscomp$0.component.legends[legendComponent]),legends[legendComponent]||\n(resolve.legend[legendComponent]=\"independent\",delete legends[legendComponent]))}for(def of keys$jscomp$0(legends))for(model of model$jscomp$0.children)model.component.legends[def]&&\"shared\"===resolve.legend[def]&&delete model.component.legends[def];JSCompiler_temp=legends}}return model$jscomp$0.component.legends=JSCompiler_temp}function mergeLegendComponent(mergedLegend,childLegend){if(!mergedLegend)return childLegend.clone();var mergedOrient=mergedLegend.getWithExplicit(\"orient\");const childOrient=\nchildLegend.getWithExplicit(\"orient\");if(!mergedOrient.explicit||!childOrient.explicit||mergedOrient.value===childOrient.value){var typeMerged=!1;for(const prop of LEGEND_COMPONENT_PROPERTIES)mergedOrient=mergeValuesWithExplicit(mergedLegend.getWithExplicit(prop),childLegend.getWithExplicit(prop),prop,\"legend\",(v1,v2)=>{switch(prop){case \"symbolType\":return v1=\"circle\"===v2.value?v2:v1,v1;case \"title\":return mergeTitleComponent(v1,v2);case \"type\":return typeMerged=!0,makeImplicit(\"symbol\")}return defaultTieBreaker(v1,\nv2,prop,\"legend\")}),mergedLegend.setWithExplicit(prop,mergedOrient);if(typeMerged){var _mergedLegend$implici,_mergedLegend$implici2,_mergedLegend$explici,_mergedLegend$explici2;(null===(_mergedLegend$implici=mergedLegend.implicit)||void 0===_mergedLegend$implici?0:null===(_mergedLegend$implici2=_mergedLegend$implici.encode)||void 0===_mergedLegend$implici2?0:_mergedLegend$implici2.gradient)&&deleteNestedProperty(mergedLegend.implicit,[\"encode\",\"gradient\"]);(null===(_mergedLegend$explici=mergedLegend.explicit)||\nvoid 0===_mergedLegend$explici?0:null===(_mergedLegend$explici2=_mergedLegend$explici.encode)||void 0===_mergedLegend$explici2?0:_mergedLegend$explici2.gradient)&&deleteNestedProperty(mergedLegend.explicit,[\"encode\",\"gradient\"])}return mergedLegend}}function assembleLegends(model){const legendComponentIndex=model.component.legends,legendByDomain={};for(const channel of keys$jscomp$0(legendComponentIndex)){var scaleComponent=model.getScaleComponent(channel);scaleComponent=stringify(scaleComponent.get(\"domains\"));\nif(legendByDomain[scaleComponent])for(const mergedLegendComponent of legendByDomain[scaleComponent])mergeLegendComponent(mergedLegendComponent,legendComponentIndex[channel])||legendByDomain[scaleComponent].push(legendComponentIndex[channel]);else legendByDomain[scaleComponent]=[legendComponentIndex[channel].clone()]}return vals$jscomp$0(legendByDomain).flat().map(l=>{{var config=model.config,_legend$encode2,$jscomp$inline_4227=l.combine();l=Object.assign({},$jscomp$inline_4227);const disable=$jscomp$inline_4227.disable;\n$jscomp$inline_4227=$jscomp$inline_4227.labelExpr;l=(delete l.disable,delete l.labelExpr,delete l.selections,l);if(disable)var JSCompiler_inline_result=void 0;else{!1===config.aria&&void 0==l.aria&&(l.aria=!1);if(null===(_legend$encode2=l.encode)||void 0===_legend$encode2?0:_legend$encode2.symbols){config=l.encode.symbols.update;!config.fill||\"transparent\"===config.fill.value||config.stroke||l.stroke||(config.stroke={value:\"transparent\"});for(var property of LEGEND_SCALE_CHANNELS)l[property]&&delete config[property]}l.title||\ndelete l.title;if(void 0!==$jscomp$inline_4227){var _legend$encode3,_legend$encode3$label;property=$jscomp$inline_4227;(null===(_legend$encode3=l.encode)||void 0===_legend$encode3?0:null===(_legend$encode3$label=_legend$encode3.labels)||void 0===_legend$encode3$label?0:_legend$encode3$label.update)&&isSignalRef(l.encode.labels.update.text)&&(property=replaceAll($jscomp$inline_4227,\"datum.label\",l.encode.labels.update.text.signal));_legend$encode3=l;_legend$encode3$label={signal:property};var _legend$encode$part,\n_legend$encode$part$u;_legend$encode3.encode=null!==(JSCompiler_inline_result=_legend$encode3.encode)&&void 0!==JSCompiler_inline_result?JSCompiler_inline_result:{};_legend$encode3.encode.labels=null!==(_legend$encode$part=_legend$encode3.encode.labels)&&void 0!==_legend$encode$part?_legend$encode$part:{};_legend$encode3.encode.labels.update=null!==(_legend$encode$part$u=_legend$encode3.encode.labels.update)&&void 0!==_legend$encode$part$u?_legend$encode$part$u:{};_legend$encode3.encode.labels.update.text=\n_legend$encode3$label}JSCompiler_inline_result=l}}return JSCompiler_inline_result}).filter(l=>void 0!==l)}function assembleProjectionsForModelAndChildren(model){return model.children.reduce((projections,child)=>projections.concat(child.assembleProjections()),assembleProjectionForModel(model))}function assembleProjectionForModel(model){var component=model.component.projection;if(!component||component.merged)return[];const projection=component.combine(),{name}=projection;if(component.data){const size=\n{signal:\"[\".concat(component.size.map(ref=>ref.signal).join(\", \"),\"]\")};component=component.data.reduce((sources,data)=>{data=isSignalRef(data)?data.signal:\"data('\".concat(model.lookupDataSource(data),\"')\");contains(sources,data)||sources.push(data);return sources},[]);if(0>=component.length)throw Error(\"Projection's fit didn't find any data sources\");return[Object.assign({},{name,size,fit:{signal:1<component.length?\"[\".concat(component.join(\", \"),\"]\"):component[0]}},projection)]}return[Object.assign({},\n{name},{translate:{signal:\"[width / 2, height / 2]\"}},projection)]}function parseProjection(model){var JSCompiler_temp_const=model.component;if(isUnitModel(model))if(model.hasProjection){var _model$config$project;const proj=model.specifiedProjection;var fit=!(proj&&(null!=proj.scale||null!=proj.translate));const size=fit?[model.getSizeSignalRef(\"width\"),model.getSizeSignalRef(\"height\")]:void 0;if(fit){{fit=[];const {encoding}=model;for(JSCompiler_temp of[[\"longitude\",\"latitude\"],[\"longitude2\",\"latitude2\"]])(getFieldOrDatumDef(encoding[JSCompiler_temp[0]])||\ngetFieldOrDatumDef(encoding[JSCompiler_temp[1]]))&&fit.push({signal:model.getName(\"geojson_\".concat(fit.length))});model.channelHasField(\"shape\")&&\"geojson\"===model.typedFieldDef(\"shape\").type&&fit.push({signal:model.getName(\"geojson_\".concat(fit.length))});0===fit.length&&fit.push(model.requestDataName(DataSourceType.Main));var JSCompiler_temp=fit}}else JSCompiler_temp=void 0;model=new ProjectionComponent(model.projectionName(!0),Object.assign({},null!==(_model$config$project=model.config.projection)&&\nvoid 0!==_model$config$project?_model$config$project:{},null!==proj&&void 0!==proj?proj:{}),size,JSCompiler_temp)}else model=void 0;else model=parseNonUnitProjections(model);JSCompiler_temp_const.projection=model}function mergeIfNoConflict(first,second){const allPropertiesShared=every(PROJECTION_PROPERTIES,prop=>!hop.call(first.explicit,prop)&&!hop.call(second.explicit,prop)||hop.call(first.explicit,prop)&&hop.call(second.explicit,prop)&&stringify(first.get(prop))===stringify(second.get(prop))?!0:\n!1);if(stringify(first.size)===stringify(second.size)){if(allPropertiesShared)return first;if(stringify(first.explicit)===stringify({}))return second;if(stringify(second.explicit)===stringify({}))return first}return null}function parseNonUnitProjections(model){if(0!==model.children.length){var nonUnitProjection;for(var child$jscomp$0 of model.children)parseProjection(child$jscomp$0);child$jscomp$0=every(model.children,child=>{if(child=child.component.projection){if(nonUnitProjection)return(child=\nmergeIfNoConflict(nonUnitProjection,child))&&(nonUnitProjection=child),!!child;nonUnitProjection=child}return!0});if(nonUnitProjection&&child$jscomp$0){child$jscomp$0=model.projectionName(!0);const modelProjection=new ProjectionComponent(child$jscomp$0,nonUnitProjection.specifiedProjection,nonUnitProjection.size,duplicate(nonUnitProjection.data));for(const child of model.children)if(model=child.component.projection)model.isFit&&modelProjection.data.push(...child.component.projection.data),child.renameProjection(model.get(\"name\"),\nchild$jscomp$0),model.merged=!0;return modelProjection}}}function binKey(bin,field){return\"\".concat(binToString(bin),\"_\").concat(field)}function getBinSignalName(model,field,bin){var _normalizeBin;bin=null!==(_normalizeBin=normalizeBin(bin,void 0))&&void 0!==_normalizeBin?_normalizeBin:{};field=binKey(bin,field);return model.getName(\"\".concat(field,\"_bins\"))}function createBinComponent(t,bin,model){let as;as=\"as\"in t?isString(t.as)?[t.as,\"\".concat(t.as,\"_end\")]:[t.as[0],t.as[1]]:[vgField(t,{forAs:!0}),\nvgField(t,{binSuffix:\"end\",forAs:!0})];const normalizedBin=Object.assign({},normalizeBin(bin,void 0));bin=binKey(normalizedBin,t.field);var JSCompiler_inline_result={signal:model.getName(\"\".concat(bin,\"_bins\")),extentSignal:model.getName(\"\".concat(bin,\"_extent\"))};const {signal,extentSignal}=JSCompiler_inline_result;if(isSelectionExtent(normalizedBin.extent)){var span=normalizedBin.extent;JSCompiler_inline_result=span.selection;span=parseSelectionBinExtent(model.getSelectionComponent(varName(JSCompiler_inline_result),\nJSCompiler_inline_result),span);delete normalizedBin.extent}t=Object.assign({},{bin:normalizedBin,field:t.field,as:[as]},signal?{signal}:{},extentSignal?{extentSignal}:{},span?{span}:{});return{key:bin,binComponent:t}}function unquote(pattern){return\"'\"===pattern[0]&&\"'\"===pattern[pattern.length-1]||'\"'===pattern[0]&&'\"'===pattern[pattern.length-1]?pattern.slice(1,-1):pattern}function parseExpression$1(field,parse){field=accessPathWithDatum(field);if(\"number\"===parse)return\"toNumber(\".concat(field,\n\")\");if(\"boolean\"===parse)return\"toBoolean(\".concat(field,\")\");if(\"string\"===parse)return\"toString(\".concat(field,\")\");if(\"date\"===parse)return\"toDate(\".concat(field,\")\");if(\"flatten\"===parse)return field;if(0===parse.indexOf(\"date:\"))return parse=unquote(parse.slice(5,parse.length)),\"timeParse(\".concat(field,\",'\").concat(parse,\"')\");if(0===parse.indexOf(\"utc:\"))return parse=unquote(parse.slice(4,parse.length)),\"utcParse(\".concat(field,\",'\").concat(parse,\"')\");warn('Unrecognized parse \"'.concat(parse,\n'\".'));return null}function getImplicitFromFilterTransform(transform){const implicit={};forEachLeaf(transform.filter,filter=>{if(isFieldPredicate(filter)){let val=null;if(isFieldEqualPredicate(filter))val=signalRefOrValue(filter.equal);else if(isFieldLTEPredicate(filter))val=signalRefOrValue(filter.lte);else if(isFieldLTPredicate(filter))val=signalRefOrValue(filter.lt);else if(isFieldGTPredicate(filter))val=signalRefOrValue(filter.gt);else if(isFieldGTEPredicate(filter))val=signalRefOrValue(filter.gte);\nelse if(isFieldRangePredicate(filter))val=filter.range[0];else if(isFieldOneOfPredicate(filter)){var _filter$oneOf;val=(null!==(_filter$oneOf=filter.oneOf)&&void 0!==_filter$oneOf?_filter$oneOf:filter[\"in\"])[0]}val&&(isDateTime(val)?implicit[filter.field]=\"date\":isNumber(val)?implicit[filter.field]=\"number\":isString(val)&&(implicit[filter.field]=\"string\"));filter.timeUnit&&(implicit[filter.field]=\"date\")}});return implicit}function getImplicitFromEncoding(model){function add(fieldDef){if(isFieldOrDatumDefForTimeFormat(fieldDef))implicit[fieldDef.field]=\n\"date\";else{var JSCompiler_temp;if(JSCompiler_temp=\"quantitative\"===fieldDef.type)JSCompiler_temp=fieldDef.aggregate,JSCompiler_temp=isString(JSCompiler_temp)&&contains([\"min\",\"max\"],JSCompiler_temp);JSCompiler_temp?implicit[fieldDef.field]=\"number\":1<accessPathDepth(fieldDef.field)?fieldDef.field in implicit||(implicit[fieldDef.field]=\"flatten\"):isScaleFieldDef(fieldDef)&&isSortField(fieldDef.sort)&&1<accessPathDepth(fieldDef.sort.field)&&(fieldDef.sort.field in implicit||(implicit[fieldDef.sort.field]=\n\"flatten\"))}}const implicit={};(isUnitModel(model)||isFacetModel(model))&&model.forEachFieldDef((fieldDef,channel)=>{isTypedFieldDef(fieldDef)?add(fieldDef):(channel=getMainRangeChannel(channel),channel=model.fieldDef(channel),add(Object.assign({},fieldDef,{type:channel.type})))});if(isUnitModel(model)){const {mark,markDef,encoding}=model;if(isPathMark(mark)&&!model.encoding.order){const dimensionChannelDef=encoding[\"horizontal\"===markDef.orient?\"y\":\"x\"];!isFieldDef(dimensionChannelDef)||\"quantitative\"!==\ndimensionChannelDef.type||dimensionChannelDef.field in implicit||(implicit[dimensionChannelDef.field]=\"number\")}}return implicit}function isDataSourceNode(node){return node instanceof SourceNode||node instanceof GraticuleNode||node instanceof SequenceNode}function getStackByFields(model){return model.stack.stackBy.reduce((fields,by)=>{(by=vgField(by.fieldDef))&&fields.push(by);return fields},[])}function isValidAsArray(as){return isArray(as)&&as.every(s=>isString(s))&&1<as.length}function cloneSubtree(facet){function clone(node){if(!(node instanceof\nFacetNode)){const copy=node.clone();if(copy instanceof OutputNode){const newName=\"scale_\"+copy.getSource();copy.setSource(newName);facet.model.component.data.outputNodes[newName]=copy}else(copy instanceof AggregateNode||copy instanceof StackNode||copy instanceof WindowTransformNode||copy instanceof JoinAggregateTransformNode)&&copy.addDimensions(facet.fields);for(const n of node.children.flatMap(clone))n.parent=copy;return[copy]}return node.children.flatMap(clone)}return clone}function moveFacetDown(node){if(node instanceof\nFacetNode)if(1!==node.numChildren()||node.children[0]instanceof OutputNode){var facetMain=node.model.component.data.main;moveMainDownToFacet(facetMain);const cloner=cloneSubtree(node);node=node.children.map(cloner).flat();for(const c of node)c.parent=facetMain}else facetMain=node.children[0],(facetMain instanceof AggregateNode||facetMain instanceof StackNode||facetMain instanceof WindowTransformNode||facetMain instanceof JoinAggregateTransformNode)&&facetMain.addDimensions(node.fields),facetMain.swapWithParent(),\nmoveFacetDown(node);else node.children.map(moveFacetDown)}function moveMainDownToFacet(node){if(node instanceof OutputNode&&node.type===DataSourceType.Main&&1===node.numChildren()){const child=node.children[0];child instanceof FacetNode||(child.swapWithParent(),moveMainDownToFacet(node))}}function checkLinks(nodes){for(const node of nodes){for(const child of node.children)if(child.parent!==node)return!1;if(!checkLinks(node.children))return!1}return!0}function runOptimizer(optimizer,nodes){let modified=\n!1;for(const node of nodes)modified=optimizer.optimize(node)||modified;return modified}function optimizationDataflowHelper(dataComponent,model,firstPass){let roots=dataComponent.sources,modified=!1;modified=runOptimizer(new RemoveUnnecessaryOutputNodes,roots)||modified;modified=runOptimizer(new RemoveUnnecessaryIdentifierNodes(model),roots)||modified;roots=roots.filter(r=>0<r.numChildren());modified=runOptimizer(new RemoveUnusedSubtrees,roots)||modified;roots=roots.filter(r=>0<r.numChildren());firstPass||\n(modified=runOptimizer(new MoveParseUp,roots)||modified,modified=runOptimizer(new MergeBins(model),roots)||modified,modified=runOptimizer(new RemoveDuplicateTimeUnits,roots)||modified,modified=runOptimizer(new MergeParse,roots)||modified,modified=runOptimizer(new MergeAggregates,roots)||modified,modified=runOptimizer(new MergeTimeUnits,roots)||modified,modified=runOptimizer(new MergeIdenticalNodes,roots)||modified,modified=runOptimizer(new MergeOutputs,roots)||modified);dataComponent.sources=roots;\nreturn modified}function parseUnitScaleDomain(model){const localScaleComponents=model.component.scales;for(const channel of keys$jscomp$0(localScaleComponents)){var JSCompiler_inline_result=model;var channel$jscomp$0=channel,scaleType=JSCompiler_inline_result.getScaleComponent(channel$jscomp$0).get(\"type\"),{encoding}=JSCompiler_inline_result;var JSCompiler_inline_result$jscomp$0=JSCompiler_inline_result.scaleDomain(channel$jscomp$0);var fieldDef=JSCompiler_inline_result.typedFieldDef(channel$jscomp$0),\nscaleConfig=JSCompiler_inline_result.config.scale;if(\"unaggregated\"===JSCompiler_inline_result$jscomp$0){const {valid,reason}=canUseUnaggregatedDomain(fieldDef,scaleType);valid||(warn(reason),JSCompiler_inline_result$jscomp$0=void 0)}else void 0===JSCompiler_inline_result$jscomp$0&&scaleConfig.useUnaggregatedDomain&&({valid:fieldDef}=canUseUnaggregatedDomain(fieldDef,scaleType),fieldDef&&(JSCompiler_inline_result$jscomp$0=\"unaggregated\"));JSCompiler_inline_result$jscomp$0!==JSCompiler_inline_result.scaleDomain(channel$jscomp$0)&&\n(JSCompiler_inline_result.specifiedScales[channel$jscomp$0]=Object.assign({},JSCompiler_inline_result.specifiedScales[channel$jscomp$0],{domain:JSCompiler_inline_result$jscomp$0}));JSCompiler_inline_result=\"x\"===channel$jscomp$0&&getFieldOrDatumDef(encoding.x2)?getFieldOrDatumDef(encoding.x)?mergeValuesWithExplicit(parseSingleChannelDomain(scaleType,JSCompiler_inline_result$jscomp$0,JSCompiler_inline_result,\"x\"),parseSingleChannelDomain(scaleType,JSCompiler_inline_result$jscomp$0,JSCompiler_inline_result,\n\"x2\"),\"domain\",\"scale\",domainsTieBreaker):parseSingleChannelDomain(scaleType,JSCompiler_inline_result$jscomp$0,JSCompiler_inline_result,\"x2\"):\"y\"===channel$jscomp$0&&getFieldOrDatumDef(encoding.y2)?getFieldOrDatumDef(encoding.y)?mergeValuesWithExplicit(parseSingleChannelDomain(scaleType,JSCompiler_inline_result$jscomp$0,JSCompiler_inline_result,\"y\"),parseSingleChannelDomain(scaleType,JSCompiler_inline_result$jscomp$0,JSCompiler_inline_result,\"y2\"),\"domain\",\"scale\",domainsTieBreaker):parseSingleChannelDomain(scaleType,\nJSCompiler_inline_result$jscomp$0,JSCompiler_inline_result,\"y2\"):parseSingleChannelDomain(scaleType,JSCompiler_inline_result$jscomp$0,JSCompiler_inline_result,channel$jscomp$0);localScaleComponents[channel].setWithExplicit(\"domains\",JSCompiler_inline_result);encoding=void 0;channel$jscomp$0=model.component.scales[channel];JSCompiler_inline_result$jscomp$0=model.specifiedScales[channel].domain;scaleType=null===(encoding=model.fieldDef(channel))||void 0===encoding?void 0:encoding.bin;encoding=isSelectionDomain(JSCompiler_inline_result$jscomp$0)&&\nJSCompiler_inline_result$jscomp$0;scaleType=isObject(scaleType)&&isSelectionExtent(scaleType.extent)&&scaleType.extent;(encoding||scaleType)&&channel$jscomp$0.set(\"selectionExtent\",null!==encoding&&void 0!==encoding?encoding:scaleType,!0);if(model.component.data.isFaceted){for(channel$jscomp$0=model;!isFacetModel(channel$jscomp$0)&&channel$jscomp$0.parent;)channel$jscomp$0=channel$jscomp$0.parent;if(\"shared\"===channel$jscomp$0.component.resolve.scale[channel])for(const domain of JSCompiler_inline_result.value)isDataRefDomain(domain)&&\n(domain.data=\"scale_\"+domain.data.replace(\"scale_\",\"\"))}}}function parseNonUnitScaleDomain(model$jscomp$0){for(var child$jscomp$0 of model$jscomp$0.children){var model=child$jscomp$0;isUnitModel(model)?parseUnitScaleDomain(model):parseNonUnitScaleDomain(model)}model=model$jscomp$0.component.scales;for(const channel of keys$jscomp$0(model)){let domains;child$jscomp$0=null;for(const child of model$jscomp$0.children){var childComponent=child.component.scales[channel];childComponent&&(domains=void 0===\ndomains?childComponent.getWithExplicit(\"domains\"):mergeValuesWithExplicit(domains,childComponent.getWithExplicit(\"domains\"),\"domains\",\"scale\",domainsTieBreaker),childComponent=childComponent.get(\"selectionExtent\"),child$jscomp$0&&childComponent&&child$jscomp$0.selection!==childComponent.selection&&warn(\"The same selection must be used to override scale domains in a layered view.\"),child$jscomp$0=childComponent)}model[channel].setWithExplicit(\"domains\",domains);child$jscomp$0&&model[channel].set(\"selectionExtent\",\nchild$jscomp$0,!0)}}function mapDomainToDataSignal(domain,type,timeUnit){return domain.map(v=>{v=valueExpr(v,{timeUnit,type});return{signal:\"{data: \".concat(v,\"}\")}})}function convertDomainIfItIsDateTime(domain,type,timeUnit){var _normalizeTimeUnit;timeUnit=null===(_normalizeTimeUnit=normalizeTimeUnit(timeUnit))||void 0===_normalizeTimeUnit?void 0:_normalizeTimeUnit.unit;return\"temporal\"===type||timeUnit?mapDomainToDataSignal(domain,type,timeUnit):[domain]}function parseSingleChannelDomain(scaleType,\ndomain,model,channel){var {encoding}=model;encoding=getFieldOrDatumDef(encoding[channel]);const {type}=encoding,timeUnit=encoding.timeUnit;if(domain&&domain.unionWith)return channel=parseSingleChannelDomain(scaleType,void 0,model,channel),domain=convertDomainIfItIsDateTime(domain.unionWith,type,timeUnit),makeExplicit([...channel.value,...domain]);if(isSignalRef(domain))return makeExplicit([domain]);if(domain&&\"unaggregated\"!==domain&&!isSelectionDomain(domain))return makeExplicit(convertDomainIfItIsDateTime(domain,\ntype,timeUnit));var stack=model.stack;if(stack&&channel===stack.fieldChannel){if(\"normalize\"===stack.offset)return makeImplicit([[0,1]]);domain=model.requestDataName(DataSourceType.Main);return makeImplicit([{data:domain,field:model.vgField(channel,{suffix:\"start\"})},{data:domain,field:model.vgField(channel,{suffix:\"end\"})}])}stack=SCALE_CHANNEL_INDEX[channel]&&isFieldDef(encoding)?domainSort(model,channel,scaleType):void 0;if(isDatumDef(encoding))return channel=convertDomainIfItIsDateTime([encoding.datum],\ntype,timeUnit),makeImplicit(channel);if(\"unaggregated\"===domain)return channel=model.requestDataName(DataSourceType.Main),{field:domain}=encoding,makeImplicit([{data:channel,field:vgField({field:domain,aggregate:\"min\"})},{data:channel,field:vgField({field:domain,aggregate:\"max\"})}]);if(isBinning(encoding.bin)){if(scaleType in DISCRETE_DOMAIN_INDEX)return\"bin-ordinal\"===scaleType?makeImplicit([]):makeImplicit([{data:isBoolean$1(stack)?model.requestDataName(DataSourceType.Main):model.requestDataName(DataSourceType.Raw),\nfield:model.vgField(channel,binRequiresRange(encoding,channel)?{binSuffix:\"range\"}:{}),sort:!0!==stack&&isObject(stack)?stack:{field:model.vgField(channel,{}),op:\"min\"}}]);({bin:domain}=encoding);if(isBinning(domain)){const binSignal=getBinSignalName(model,encoding.field,domain);return makeImplicit([new SignalRefWrapper(()=>{const signal=model.getSignalName(binSignal);return\"[\".concat(signal,\".start, \").concat(signal,\".stop]\")})])}return makeImplicit([{data:model.requestDataName(DataSourceType.Main),\nfield:model.vgField(channel,{})}])}return encoding.timeUnit&&contains([\"time\",\"utc\"],scaleType)&&hasBand(channel,encoding,isUnitModel(model)?model.encoding[getSecondaryRangeChannel(channel)]:void 0,model.stack,model.markDef,model.config)?(domain=model.requestDataName(DataSourceType.Main),makeImplicit([{data:domain,field:model.vgField(channel)},{data:domain,field:model.vgField(channel,{suffix:\"end\"})}])):stack?makeImplicit([{data:isBoolean$1(stack)?model.requestDataName(DataSourceType.Main):model.requestDataName(DataSourceType.Raw),\nfield:model.vgField(channel),sort:stack}]):makeImplicit([{data:model.requestDataName(DataSourceType.Main),field:model.vgField(channel)}])}function normalizeSortField(sort,isStackedMeasure){const {op,field,order}=sort;return Object.assign({},{op:null!==op&&void 0!==op?op:isStackedMeasure?\"sum\":\"min\"},field?{field:replacePathInField(field)}:{},order?{order}:{})}function domainSort(model,channel,scaleType){if(scaleType in DISCRETE_DOMAIN_INDEX){var fieldDef=model.fieldDef(channel);scaleType=fieldDef.sort;\nif(isSortArray(scaleType))return{op:\"min\",field:sortArrayIndexField(fieldDef,channel),order:\"ascending\"};({stack:fieldDef}=model);var stackDimensions=fieldDef?[...(fieldDef.groupbyField?[fieldDef.groupbyField]:[]),...fieldDef.stackBy.map(s=>s.fieldDef.field)]:void 0;if(isSortField(scaleType))return model=fieldDef&&!contains(stackDimensions,scaleType.field),normalizeSortField(scaleType,model);if(scaleType&&scaleType.encoding){const {encoding,order}=scaleType;model=model.fieldDef(encoding);const {aggregate,\nfield}=model;channel=fieldDef&&!contains(stackDimensions,field);if(isArgminDef(aggregate)||isArgmaxDef(aggregate))return normalizeSortField({field:vgField(model),order},channel);if(isAggregateOp(aggregate)||!aggregate)return normalizeSortField({op:aggregate,field,order},channel)}else{if(\"descending\"===scaleType)return{op:\"min\",field:model.vgField(channel),order:\"descending\"};if(contains([\"ascending\",void 0],scaleType))return!0}}}function canUseUnaggregatedDomain(fieldDef,scaleType){const {aggregate,\ntype}=fieldDef;return aggregate?isString(aggregate)&&!SHARED_DOMAIN_OP_INDEX[aggregate]?{valid:!1,reason:'Unaggregated domain not applicable for \"'.concat(aggregate,'\" since it produces values outside the origin domain of the source data.')}:\"quantitative\"===type&&\"log\"===scaleType?{valid:!1,reason:\"Unaggregated domain is currently unsupported for log scale (\".concat(stringify(fieldDef),\").\")}:{valid:!0}:{valid:!1,reason:\"Using unaggregated domain with raw field has no effect (\".concat(stringify(fieldDef),\n\").\")}}function domainsTieBreaker(v1$jscomp$0,v2$jscomp$0,property,propertyOf){if(v1$jscomp$0.explicit&&v2$jscomp$0.explicit){var v1=v1$jscomp$0.value,v2=v2$jscomp$0.value;property=\"Conflicting \".concat(propertyOf.toString(),' property \"').concat(property.toString(),'\" (').concat(stringify(v1),\" and \").concat(stringify(v2),\"). Using the union of the two domains.\");warn(property)}return{explicit:v1$jscomp$0.explicit,value:[...v1$jscomp$0.value,...v2$jscomp$0.value]}}function mergeDomains(domains){var uniqueDomains=\nunique(domains.map(domain=>isDataRefDomain(domain)?(domain=Object.assign({},domain),delete domain.sort,domain):domain),hash),sorts=unique(domains.map(d=>{if(isDataRefDomain(d))return d=d.sort,void 0===d||isBoolean$1(d)||(\"op\"in d&&\"count\"===d.op&&delete d.field,\"ascending\"===d.order&&delete d.order),d}).filter(s=>void 0!==s),hash);if(0!==uniqueDomains.length){if(1===uniqueDomains.length){uniqueDomains=domains[0];if(isDataRefDomain(uniqueDomains)&&0<sorts.length){var sort=sorts[0];1<sorts.length?(warn(\"Domains that should be unioned has conflicting sort properties. Sort will be set to true.\"),\nsort=!0):isObject(sort)&&\"field\"in sort&&uniqueDomains.field===sort.field&&(sort=sort.order?{order:sort.order}:!0);return Object.assign({},uniqueDomains,{sort})}return uniqueDomains}sorts=unique(sorts.map(s=>{if(isBoolean$1(s)||!(\"op\"in s)||isString(s.op)&&s.op in MULTIDOMAIN_SORT_OP_INDEX)return s;warn(\"Dropping sort property \".concat(stringify(s),' as unioned domains only support boolean or op \"count\", \"min\", and \"max\".'));return!0}),hash);1===sorts.length?sort=sorts[0]:1<sorts.length&&(warn(\"Domains that should be unioned has conflicting sort properties. Sort will be set to true.\"),\nsort=!0);sorts=unique(domains.map(d=>isDataRefDomain(d)?d.data:null),x=>x);return 1===sorts.length&&null!==sorts[0]?Object.assign({},{data:sorts[0],fields:uniqueDomains.map(d=>d.field)},sort?{sort}:{}):Object.assign({},{fields:uniqueDomains},sort?{sort}:{})}}function getFieldFromDomain(domain){if(isDataRefDomain(domain)&&isString(domain.field))return domain.field;var JSCompiler_inline_result=isArray(domain)?!1:\"fields\"in domain&&!(\"data\"in domain);if(JSCompiler_inline_result){let field;for(const nonUnionDomain of domain.fields)if(isDataRefDomain(nonUnionDomain)&&\nisString(nonUnionDomain.field))if(!field)field=nonUnionDomain.field;else if(field!==nonUnionDomain.field)return warn(\"Detected faceted independent scales that union domain of multiple fields from different data sources. We will use the first field. The result view size may be incorrect.\"),field;warn(\"Detected faceted independent scales that union domain of the same fields from different source. We will assume that this is the same field from a different fork of the same data source. However, if this is not the case, the result view size may be incorrect.\");\nreturn field}JSCompiler_inline_result=isArray(domain)?!1:\"fields\"in domain&&\"data\"in domain;if(JSCompiler_inline_result)return warn(\"Detected faceted independent scales that union domain of multiple fields from the same data source. We will use the first field. The result view size may be incorrect.\"),domain=domain.fields[0],isString(domain)?domain:void 0}function assembleDomain(model,channel){channel=model.component.scales[channel].get(\"domains\").map(domain=>{isDataRefDomain(domain)&&(domain.data=\nmodel.lookupDataSource(domain.data));return domain});return mergeDomains(channel)}function assembleScales(model){return isLayerModel(model)||isConcatModel(model)?model.children.reduce((scales,child)=>scales.concat(assembleScales(child)),assembleScalesForModel(model)):assembleScalesForModel(model)}function assembleScalesForModel(model){return keys$jscomp$0(model.component.scales).reduce((scales,channel)=>{var scaleComponent=model.component.scales[channel];if(scaleComponent.merged)return scales;var scale=\nscaleComponent.combine(),$jscomp$destructuring$var230=Object.assign({},scale);scaleComponent=scale.name;const type=scale.type,selectionExtent=scale.selectionExtent,reverse=scale.reverse;$jscomp$destructuring$var230=(delete $jscomp$destructuring$var230.name,delete $jscomp$destructuring$var230.type,delete $jscomp$destructuring$var230.selectionExtent,delete $jscomp$destructuring$var230.domains,delete $jscomp$destructuring$var230.range,delete $jscomp$destructuring$var230.reverse,$jscomp$destructuring$var230);\nscale=scale.range;channel in POSITION_SCALE_CHANNEL_INDEX?isVgRangeStep(scale)&&(scale={step:{signal:scaleComponent+\"_step\"}}):isObject(scale)&&isDataRefDomain(scale)&&(scale=Object.assign({},scale,{data:model.lookupDataSource(scale.data)}));if(selectionExtent){var domainRaw=selectionExtent.selection;domainRaw=model.getSelectionComponent(domainRaw,varName(domainRaw));domainRaw={signal:parseSelectionBinExtent(domainRaw,selectionExtent)}}channel=assembleDomain(model,channel);scales.push(Object.assign({},\n{name:scaleComponent,type},channel?{domain:channel}:{},domainRaw?{domainRaw}:{},{range:scale},void 0!==reverse?{reverse}:{},$jscomp$destructuring$var230));return scales},[])}function getSizeChannel$1(channel){return\"x\"===channel?\"width\":\"y\"===channel?\"height\":void 0}function getBinStepSignal(model,channel){const fieldDef=model.fieldDef(channel);if(fieldDef&&fieldDef.bin&&isBinning(fieldDef.bin)){const binSignal=getBinSignalName(model,fieldDef.field,fieldDef.bin);channel=getSizeChannel$1(channel);\nconst sizeSignal=model.getName(channel);return new SignalRefWrapper(()=>{var updatedName=model.getSignalName(binSignal);updatedName=\"(\".concat(updatedName,\".stop - \").concat(updatedName,\".start) / \").concat(updatedName,\".step\");return\"\".concat(model.getSignalName(sizeSignal),\" / (\").concat(updatedName,\")\")})}}function parseRangeForChannel(channel,model){const specifiedScale=model.specifiedScales[channel];var {size}=model,scaleType=model.getScaleComponent(channel).get(\"type\");for(var property of RANGE_PROPERTIES)if(void 0!==\nspecifiedScale[property]){const supportedByScaleType=scaleTypeSupportProperty(scaleType,property),channelIncompatability=channelScalePropertyIncompatability(channel,property);if(supportedByScaleType)if(channelIncompatability)warn(channelIncompatability);else switch(property){case \"range\":scaleType=specifiedScale.range;if(isArray(scaleType)){if(channel in POSITION_SCALE_CHANNEL_INDEX)return makeExplicit(scaleType.map(v=>{if(\"width\"===v||\"height\"===v){v=model.getName(v);const getSignalName=model.getSignalName.bind(model);\nreturn SignalRefWrapper.fromName(getSignalName,v)}return v}))}else if(isObject(scaleType))return makeExplicit({data:model.requestDataName(DataSourceType.Main),field:scaleType.field,sort:{op:\"min\",field:model.vgField(channel)}});return makeExplicit(scaleType);case \"scheme\":return makeExplicit(parseScheme(specifiedScale[property]))}else warn(scalePropertyNotWorkWithScaleType(scaleType,property,channel))}if(\"x\"===channel||\"y\"===channel)if(property=\"x\"===channel?\"width\":\"height\",size=size[property],isStep(size)){if(scaleType in\nDISCRETE_DOMAIN_INDEX)return makeExplicit({step:size.step});warn(stepDropped(property))}const {rangeMin,rangeMax}=specifiedScale;channel=defaultRange(channel,model);return(void 0!==rangeMin||void 0!==rangeMax)&&scaleTypeSupportProperty(scaleType,\"rangeMin\")&&isArray(channel)&&2===channel.length?makeExplicit([null!==rangeMin&&void 0!==rangeMin?rangeMin:channel[0],null!==rangeMax&&void 0!==rangeMax?rangeMax:channel[1]]):makeImplicit(channel)}function parseScheme(scheme){return!isString(scheme)&&scheme.name?\nObject.assign({},{scheme:scheme.name},omit(scheme,[\"name\"])):{scheme}}function defaultRange(channel,model){const {size,config,mark,encoding}=model;var getSignalName=model.getSignalName.bind(model),{type}=getFieldOrDatumDef(encoding[channel]);const scaleType=model.getScaleComponent(channel).get(\"type\"),{domain,domainMid}=model.specifiedScales[channel];switch(channel){case \"x\":case \"y\":if(contains([\"point\",\"band\"],scaleType))if(\"x\"===channel&&!size.width){if(type=getViewConfigDiscreteSize(config.view,\n\"width\"),isStep(type))return type}else if(\"y\"===channel&&!size.height&&(type=getViewConfigDiscreteSize(config.view,\"height\"),isStep(type)))return type;type=getSizeChannel$1(channel);type=model.getName(type);return\"y\"===channel&&scaleType in CONTINUOUS_DOMAIN_INDEX?[SignalRefWrapper.fromName(getSignalName,type),0]:[0,SignalRefWrapper.fromName(getSignalName,type)];case \"size\":return getSignalName=model.component.scales[channel].get(\"zero\"),getSignalName=sizeRangeMin(mark,getSignalName,config),type=\nsizeRangeMax(mark,size,model,config),scaleType in CONTINUOUS_TO_DISCRETE_INDEX?interpolateRange(getSignalName,type,defaultContinuousToDiscreteCount(scaleType,config,domain,channel)):[getSignalName,type];case \"theta\":return[0,2*Math.PI];case \"angle\":return[0,360];case \"radius\":return[0,new SignalRefWrapper(()=>{const w=model.getSignalName(\"width\"),h=model.getSignalName(\"height\");return\"min(\".concat(w,\",\").concat(h,\")/2\")})];case \"strokeWidth\":return[config.scale.minStrokeWidth,config.scale.maxStrokeWidth];\ncase \"strokeDash\":return[[1,0],[4,2],[2,1],[1,1],[1,2,4,2]];case \"shape\":return\"symbol\";case \"color\":case \"fill\":case \"stroke\":return\"ordinal\"===scaleType?\"nominal\"===type?\"category\":\"ordinal\":void 0!==domainMid?\"diverging\":\"rect\"===mark||\"geoshape\"===mark?\"heatmap\":\"ramp\";case \"opacity\":case \"fillOpacity\":case \"strokeOpacity\":return[config.scale.minOpacity,config.scale.maxOpacity]}throw Error(\"Scale range undefined for channel \".concat(channel));}function defaultContinuousToDiscreteCount(scaleType,\nconfig,domain,channel){switch(scaleType){case \"quantile\":return config.scale.quantileCount;case \"quantize\":return config.scale.quantizeCount;case \"threshold\":if(void 0!==domain&&isArray(domain))return domain.length+1;warn(\"Domain for \".concat(channel,\" is required for threshold scale.\"));return 3}}function interpolateRange(rangeMin,rangeMax,cardinality){const f=()=>{const rMax=signalOrStringValue(rangeMax),rMin=signalOrStringValue(rangeMin),step=\"(\".concat(rMax,\" - \").concat(rMin,\") / (\").concat(cardinality,\n\" - 1)\");return\"sequence(\".concat(rMin,\", \").concat(rMax,\" + \").concat(step,\", \").concat(step,\")\")};return isSignalRef(rangeMax)?new SignalRefWrapper(f):{signal:f()}}function sizeRangeMin(mark,zero,config){if(zero)return isSignalRef(zero)?{signal:\"\".concat(zero.signal,\" ? 0 : \").concat(sizeRangeMin(mark,!1,config))}:0;switch(mark){case \"bar\":case \"tick\":return config.scale.minBandSize;case \"line\":case \"trail\":case \"rule\":return config.scale.minStrokeWidth;case \"text\":return config.scale.minFontSize;\ncase \"point\":case \"square\":case \"circle\":return config.scale.minSize}throw Error(incompatibleChannel(\"size\",mark));}function sizeRangeMax(mark,size,model,config){model={x:getBinStepSignal(model,\"x\"),y:getBinStepSignal(model,\"y\")};switch(mark){case \"bar\":case \"tick\":{if(void 0!==config.scale.maxBandSize)return config.scale.maxBandSize;const min=minXYStep(size,model,config.view);return isNumber(min)?min-1:new SignalRefWrapper(()=>\"\".concat(min.signal,\" - 1\"))}case \"line\":case \"trail\":case \"rule\":return config.scale.maxStrokeWidth;\ncase \"text\":return config.scale.maxFontSize;case \"point\":case \"square\":case \"circle\":{if(config.scale.maxSize)return config.scale.maxSize;const pointStep=minXYStep(size,model,config.view);return isNumber(pointStep)?Math.pow(.95*pointStep,2):new SignalRefWrapper(()=>\"pow(\".concat(.95,\" * \").concat(pointStep.signal,\", 2)\"))}}throw Error(incompatibleChannel(\"size\",mark));}function minXYStep(size,xyStepSignals,viewConfig){const widthStep=isStep(size.width)?size.width.step:getViewConfigDiscreteStep(viewConfig,\n\"width\"),heightStep=isStep(size.height)?size.height.step:getViewConfigDiscreteStep(viewConfig,\"height\");return xyStepSignals.x||xyStepSignals.y?new SignalRefWrapper(()=>\"min(\".concat([xyStepSignals.x?xyStepSignals.x.signal:widthStep,xyStepSignals.y?xyStepSignals.y.signal:heightStep].join(\", \"),\")\")):Math.min(widthStep,heightStep)}function parseScaleProperty(model,property){if(isUnitModel(model)){{const localScaleComponents=model.component.scales,{config,encoding,markDef,specifiedScales}=model;for(const channel of keys$jscomp$0(localScaleComponents)){var specifiedScale=\nspecifiedScales[channel];const localScaleCmpt=localScaleComponents[channel];var mergedScaleCmpt=model.getScaleComponent(channel),fieldOrDatumDef=getFieldOrDatumDef(encoding[channel]),specifiedValue=specifiedScale[property];const scaleType=mergedScaleCmpt.get(\"type\"),scalePadding=mergedScaleCmpt.get(\"padding\");mergedScaleCmpt=mergedScaleCmpt.get(\"paddingInner\");const supportedByScaleType=scaleTypeSupportProperty(scaleType,property),channelIncompatability=channelScalePropertyIncompatability(channel,\nproperty);void 0!==specifiedValue&&(supportedByScaleType?channelIncompatability&&warn(channelIncompatability):warn(scalePropertyNotWorkWithScaleType(scaleType,property,channel)));if(supportedByScaleType&&void 0===channelIncompatability)if(void 0!==specifiedValue)switch(specifiedValue=fieldOrDatumDef.timeUnit,fieldOrDatumDef=fieldOrDatumDef.type,property){case \"domainMax\":case \"domainMin\":isDateTime(specifiedScale[property])||\"temporal\"===fieldOrDatumDef||specifiedValue?localScaleCmpt.set(property,\n{signal:valueExpr(specifiedScale[property],{type:fieldOrDatumDef,timeUnit:specifiedValue})},!0):localScaleCmpt.set(property,specifiedScale[property],!0);break;default:localScaleCmpt.copyKeyFromObject(property,specifiedScale)}else specifiedScale=property in scaleRules?scaleRules[property]({model,channel,fieldOrDatumDef,scaleType,scalePadding,scalePaddingInner:mergedScaleCmpt,domain:specifiedScale.domain,markDef,config}):config.scale[property],void 0!==specifiedScale&&localScaleCmpt.set(property,specifiedScale,\n!1)}}}else parseNonUnitScaleProperty(model,property)}function parseScaleRange(model){if(isUnitModel(model)){{const localScaleComponents=model.component.scales;for(const channel of SCALE_CHANNELS){const localScaleCmpt=localScaleComponents[channel];if(!localScaleCmpt)continue;const rangeWithExplicit=parseRangeForChannel(channel,model);localScaleCmpt.setWithExplicit(\"range\",rangeWithExplicit)}}}else parseNonUnitScaleProperty(model,\"range\")}function parseNonUnitScaleProperty(model,property){const localScaleComponents=\nmodel.component.scales;for(var child$jscomp$0 of model.children)\"range\"===property?parseScaleRange(child$jscomp$0):parseScaleProperty(child$jscomp$0,property);for(const channel of keys$jscomp$0(localScaleComponents)){let valueWithExplicit;for(const child of model.children)if(child$jscomp$0=child.component.scales[channel])child$jscomp$0=child$jscomp$0.getWithExplicit(property),valueWithExplicit=mergeValuesWithExplicit(valueWithExplicit,child$jscomp$0,property,\"scale\",tieBreakByComparing((v1,v2)=>{switch(property){case \"range\":if(v1.step&&\nv2.step)return v1.step-v2.step}return 0}));localScaleComponents[channel].setWithExplicit(property,valueWithExplicit)}}function bins$jscomp$1(model,fieldDef){const bin=fieldDef.bin;if(isBinning(bin)){const binSignal=getBinSignalName(model,fieldDef.field,bin);return new SignalRefWrapper(()=>model.getSignalName(binSignal))}if(isBinned(bin)&&isObject(bin)&&void 0!==bin.step)return{step:bin.step}}function defaultType$2(channel,fieldDef,mark){var _fieldDef$axis;switch(fieldDef.type){case \"nominal\":case \"ordinal\":if(isColorChannel(channel)||\n\"discrete\"===rangeType(channel))return\"shape\"===channel&&\"ordinal\"===fieldDef.type&&warn(discreteChannelCannotEncode(channel,\"ordinal\")),\"ordinal\";if(channel in POSITION_SCALE_CHANNEL_INDEX){if(contains([\"rect\",\"bar\",\"image\",\"rule\"],mark))return\"band\"}else if(\"arc\"===mark&&channel in POLAR_POSITION_SCALE_CHANNEL_INDEX)return\"band\";return void 0!==fieldDef.band||isPositionFieldOrDatumDef(fieldDef)&&(null===(_fieldDef$axis=fieldDef.axis)||void 0===_fieldDef$axis?0:_fieldDef$axis.tickBand)?\"band\":\"point\";\ncase \"temporal\":if(!isColorChannel(channel)){if(\"discrete\"===rangeType(channel))return warn(discreteChannelCannotEncode(channel,\"temporal\")),\"ordinal\";if(isFieldDef(fieldDef)&&fieldDef.timeUnit&&normalizeTimeUnit(fieldDef.timeUnit).utc)return\"utc\"}return\"time\";case \"quantitative\":if(isColorChannel(channel)){if(isFieldDef(fieldDef)&&isBinning(fieldDef.bin))return\"bin-ordinal\"}else if(\"discrete\"===rangeType(channel))return warn(discreteChannelCannotEncode(channel,\"quantitative\")),\"ordinal\";return\"linear\";\ncase \"geojson\":return}throw Error('Invalid field type \"'.concat(fieldDef.type,'\".'));}function parseScaleCore(model$jscomp$0){if(isUnitModel(model$jscomp$0))model$jscomp$0.component.scales=parseUnitScaleCore(model$jscomp$0);else{var JSCompiler_temp_const=model$jscomp$0.component;{const scaleComponents=model$jscomp$0.component.scales={},scaleTypeWithExplicitIndex={};var resolve=model$jscomp$0.component.resolve;for(const child of model$jscomp$0.children){parseScaleCore(child);for(const channel of keys$jscomp$0(child.component.scales)){var _resolve$scale$channe,\nJSCompiler_temp_const$jscomp$0=resolve.scale;if(null!==(_resolve$scale$channe=resolve.scale[channel])&&void 0!==_resolve$scale$channe)var JSCompiler_temp=_resolve$scale$channe;else{JSCompiler_temp=channel;var model=model$jscomp$0;if(isLayerModel(model)||isFacetModel(model))JSCompiler_temp=\"shared\";else if(isConcatModel(model))JSCompiler_temp=JSCompiler_temp in POSITION_SCALE_CHANNEL_INDEX?\"independent\":\"shared\";else throw Error(\"invalid model type for resolve\");}JSCompiler_temp_const$jscomp$0[channel]=\nJSCompiler_temp;if(\"shared\"===resolve.scale[channel])if(JSCompiler_temp_const$jscomp$0=scaleTypeWithExplicitIndex[channel],JSCompiler_temp=child.component.scales[channel].getWithExplicit(\"type\"),JSCompiler_temp_const$jscomp$0){{model=SCALE_CATEGORY_INDEX[JSCompiler_temp_const$jscomp$0.value];const scaleCategory2=SCALE_CATEGORY_INDEX[JSCompiler_temp.value];model=model===scaleCategory2||\"ordinal-position\"===model&&\"time\"===scaleCategory2||\"ordinal-position\"===scaleCategory2&&\"time\"===model}model?scaleTypeWithExplicitIndex[channel]=\nmergeValuesWithExplicit(JSCompiler_temp_const$jscomp$0,JSCompiler_temp,\"type\",\"scale\",scaleTypeTieBreaker):(resolve.scale[channel]=\"independent\",delete scaleTypeWithExplicitIndex[channel])}else scaleTypeWithExplicitIndex[channel]=JSCompiler_temp}}for(const channel of keys$jscomp$0(scaleTypeWithExplicitIndex)){_resolve$scale$channe=model$jscomp$0.scaleName(channel,!0);scaleComponents[channel]=new ScaleComponent(_resolve$scale$channe,scaleTypeWithExplicitIndex[channel]);for(const child of model$jscomp$0.children)if(resolve=\nchild.component.scales[channel])child.renameScale(resolve.get(\"name\"),_resolve$scale$channe),resolve.merged=!0}model$jscomp$0=scaleComponents}JSCompiler_temp_const.scales=model$jscomp$0}}function parseUnitScaleCore(model){const {encoding,mark}=model;return SCALE_CHANNELS.reduce((scaleComponents,channel)=>{var fieldOrDatumDef=getFieldOrDatumDef(encoding[channel]);if(fieldOrDatumDef&&mark===GEOSHAPE&&\"shape\"===channel&&\"geojson\"===fieldOrDatumDef.type)return scaleComponents;let specifiedScale=fieldOrDatumDef&&\nfieldOrDatumDef.scale;if(fieldOrDatumDef&&null!==specifiedScale&&!1!==specifiedScale){var _specifiedScale;specifiedScale=null!==(_specifiedScale=specifiedScale)&&void 0!==_specifiedScale?_specifiedScale:{};var specifiedScale$jscomp$0=specifiedScale;_specifiedScale=defaultType$2(channel,fieldOrDatumDef,mark);({type:specifiedScale$jscomp$0}=specifiedScale$jscomp$0);if(SCALE_CHANNEL_INDEX[channel]){if(void 0!==specifiedScale$jscomp$0)if(channelSupportScaleType(channel,specifiedScale$jscomp$0)){var JSCompiler_temp;\nif(JSCompiler_temp=isFieldDef(fieldOrDatumDef))JSCompiler_temp=specifiedScale$jscomp$0,fieldOrDatumDef=fieldOrDatumDef.type,JSCompiler_temp=!(contains([\"ordinal\",\"nominal\"],fieldOrDatumDef)?void 0===JSCompiler_temp||JSCompiler_temp in DISCRETE_DOMAIN_INDEX:\"temporal\"===fieldOrDatumDef?contains([ScaleType.TIME,ScaleType.UTC,void 0],JSCompiler_temp):\"quantitative\"===fieldOrDatumDef?contains([ScaleType.LOG,ScaleType.POW,ScaleType.SQRT,ScaleType.SYMLOG,ScaleType.QUANTILE,ScaleType.QUANTIZE,ScaleType.THRESHOLD,\nScaleType.LINEAR,void 0],JSCompiler_temp):1);JSCompiler_temp?(fieldOrDatumDef=_specifiedScale,fieldOrDatumDef='FieldDef does not work with \"'.concat(specifiedScale$jscomp$0,'\" scale. We are using \"').concat(fieldOrDatumDef,'\" scale instead.'),warn(fieldOrDatumDef)):_specifiedScale=specifiedScale$jscomp$0}else fieldOrDatumDef=specifiedScale$jscomp$0,specifiedScale$jscomp$0=_specifiedScale,fieldOrDatumDef='Channel \"'.concat(channel,'\" does not work with \"').concat(fieldOrDatumDef,'\" scale. We are using \"').concat(specifiedScale$jscomp$0,\n'\" scale instead.'),warn(fieldOrDatumDef)}else _specifiedScale=null;scaleComponents[channel]=new ScaleComponent(model.scaleName(channel+\"\",!0),{value:_specifiedScale,explicit:specifiedScale.type===_specifiedScale})}return scaleComponents},{})}function isUnitModel(model){return\"unit\"===(null===model||void 0===model?void 0:model.type)}function isFacetModel(model){return\"facet\"===(null===model||void 0===model?void 0:model.type)}function isConcatModel(model){return\"concat\"===(null===model||void 0===model?\nvoid 0:model.type)}function isLayerModel(model){return\"layer\"===(null===model||void 0===model?void 0:model.type)}function makeWalkTree(data){function walkTree(node,dataSource){node instanceof SourceNode&&!(node.isGenerator||\"url\"in node.data)&&(data.push(dataSource),dataSource={name:null,source:dataSource.name,transform:[]});if(node instanceof ParseNode)if(node.parent instanceof SourceNode&&!dataSource.source){var _dataSource$format;dataSource.format=Object.assign({},null!==(_dataSource$format=dataSource.format)&&\nvoid 0!==_dataSource$format?_dataSource$format:{},{parse:node.assembleFormatParse()});dataSource.transform.push(...node.assembleTransforms(!0))}else dataSource.transform.push(...node.assembleTransforms());if(node instanceof FacetNode){dataSource.name||(dataSource.name=\"data_\".concat(datasetIndex++));!dataSource.source||0<dataSource.transform.length?(data.push(dataSource),node.data=dataSource.name):node.data=dataSource.source;for(const d of node.assemble())data.push(d)}else switch((node instanceof\nGraticuleNode||node instanceof SequenceNode||node instanceof FilterInvalidNode||node instanceof FilterNode||node instanceof CalculateNode||node instanceof GeoPointNode||node instanceof GeoJSONNode||node instanceof AggregateNode||node instanceof LookupNode||node instanceof WindowTransformNode||node instanceof JoinAggregateTransformNode||node instanceof FoldTransformNode||node instanceof FlattenTransformNode||node instanceof DensityTransformNode||node instanceof LoessTransformNode||node instanceof QuantileTransformNode||\nnode instanceof RegressionTransformNode||node instanceof IdentifierNode||node instanceof SampleTransformNode||node instanceof PivotTransformNode)&&dataSource.transform.push(node.assemble()),(node instanceof BinNode||node instanceof TimeUnitNode||node instanceof ImputeNode||node instanceof StackNode)&&dataSource.transform.push(...node.assemble()),node instanceof OutputNode&&(dataSource.source&&0===dataSource.transform.length?node.setSource(dataSource.source):node.parent instanceof OutputNode?node.setSource(dataSource.name):\n(dataSource.name||(dataSource.name=\"data_\".concat(datasetIndex++)),node.setSource(dataSource.name),1===node.numChildren()&&(data.push(dataSource),dataSource={name:null,source:dataSource.name,transform:[]}))),node.numChildren()){case 0:node instanceof OutputNode&&(!dataSource.source||0<dataSource.transform.length)&&data.push(dataSource);break;case 1:walkTree(node.children[0],dataSource);break;default:dataSource.name||(dataSource.name=\"data_\".concat(datasetIndex++));_dataSource$format=dataSource.name;\n!dataSource.source||0<dataSource.transform.length?data.push(dataSource):_dataSource$format=dataSource.source;for(const child of node.children)walkTree(child,{name:null,source:_dataSource$format,transform:[]})}}let datasetIndex=0;return walkTree}function assembleFacetData(root){const data=[],walkTree=makeWalkTree(data);for(const child of root.children)walkTree(child,{source:root.name,name:null,transform:[]});return data}function assembleRootData(dataComponent,datasets){const data=[];var walkTree=makeWalkTree(data);\nlet sourceIndex=0;for(const root of dataComponent.sources){root.hasName()||(root.dataName=\"source_\".concat(sourceIndex++));const newData=root.assemble();walkTree(root,newData)}for(const d of data)0===d.transform.length&&delete d.transform;walkTree=0;for(const $jscomp$destructuring$var254 of data.entries()){const [i,d]=$jscomp$destructuring$var254;var _d$transform;0!==(null!==(_d$transform=d.transform)&&void 0!==_d$transform?_d$transform:[]).length||d.source||data.splice(walkTree++,0,data.splice(i,\n1)[0])}for(const d of data)for(const t of null!==(_d$transform2=d.transform)&&void 0!==_d$transform2?_d$transform2:[]){var _d$transform2;\"lookup\"===t.type&&(t.from=dataComponent.outputNodes[t.from].getSource())}for(const d of data)d.name in datasets&&(d.values=datasets[d.name]);return data}function makeHeaderComponent(model,channel,labels){channel=\"row\"===channel?\"height\":\"width\";return{labels,sizeSignal:model.child.component.layoutSize.get(channel)?model.child.getSizeSignalRef(channel):void 0,axes:[]}}\nfunction mergeChildAxis(model,channel){var {child}=model;if(child.component.axes[channel]){const {layoutHeaders,resolve}=model.component;resolve.axis[channel]=parseGuideResolve(resolve,channel);if(\"shared\"===resolve.axis[channel]){const headerChannel=\"x\"===channel?\"column\":\"row\",layoutHeader=layoutHeaders[headerChannel];for(const axisComponent of child.component.axes[channel]){var _layoutHeader$headerT;channel=axisComponent.get(\"orient\");channel=\"top\"===channel||\"left\"===channel||isSignalRef(channel)?\n\"header\":\"footer\";layoutHeader[channel]=null!==(_layoutHeader$headerT=layoutHeader[channel])&&void 0!==_layoutHeader$headerT?_layoutHeader$headerT:[makeHeaderComponent(model,headerChannel,!1)];(child=assembleAxis(axisComponent,\"main\",model.config,{header:!0}))&&layoutHeader[channel][0].axes.push(child);axisComponent.mainExtracted=!0}}}}function parseChildrenLayoutSize(model){for(const child of model.children)child.parseLayoutSize()}function parseNonUnitLayoutSizeForChannel(model,layoutSizeType){const sizeType=\ngetSizeTypeFromLayoutSizeType(layoutSizeType),channel=getPositionScaleChannel(sizeType),resolve=model.component.resolve,layoutSizeCmpt=model.component.layoutSize;let mergedSize;for(const child of model.children){const childSize=child.component.layoutSize.getWithExplicit(sizeType),scaleResolve=resolve.scale[channel];if(\"independent\"===scaleResolve&&\"step\"===childSize.value){mergedSize=void 0;break}if(mergedSize){if(\"independent\"===scaleResolve&&mergedSize.value!==childSize.value){mergedSize=void 0;\nbreak}mergedSize=mergeValuesWithExplicit(mergedSize,childSize,sizeType,\"\")}else mergedSize=childSize}if(mergedSize){for(const child of model.children)model.renameSignal(child.getName(sizeType),model.getName(layoutSizeType)),child.component.layoutSize.set(sizeType,\"merged\",!1);layoutSizeCmpt.setWithExplicit(layoutSizeType,mergedSize)}else layoutSizeCmpt.setWithExplicit(layoutSizeType,{explicit:!1,value:void 0})}function defaultUnitSize(model,sizeType){const config=model.config;var scaleComponent=model.getScaleComponent(\"width\"===\nsizeType?\"x\":\"y\");if(scaleComponent)return model=scaleComponent.get(\"type\"),scaleComponent=scaleComponent.get(\"range\"),model in DISCRETE_DOMAIN_INDEX?(sizeType=getViewConfigDiscreteSize(config.view,sizeType),isVgRangeStep(scaleComponent)||isStep(sizeType)?\"step\":sizeType):getViewConfigContinuousSize(config.view,sizeType);if(model.hasProjection||\"arc\"===model.mark)return getViewConfigContinuousSize(config.view,sizeType);sizeType=getViewConfigDiscreteSize(config.view,sizeType);return isStep(sizeType)?\nsizeType.step:sizeType}function facetSortFieldName(fieldDef,sort,opt){return vgField(sort,Object.assign({},{suffix:\"by_\".concat(vgField(fieldDef))},null!==opt&&void 0!==opt?opt:{}))}function findSource(data,sources){for(const other of sources){var _data$format,_otherData$format,_data$format2,_otherData$format2;sources=other.data;if(data.name&&other.hasName()&&data.name!==other.dataName)continue;const formatMesh=null===(_data$format=data.format)||void 0===_data$format?void 0:_data$format.mesh;var otherFeature=\nnull===(_otherData$format=sources.format)||void 0===_otherData$format?void 0:_otherData$format.feature;if(formatMesh&&otherFeature)continue;const formatFeature=null===(_data$format2=data.format)||void 0===_data$format2?void 0:_data$format2.feature;if(!formatFeature&&!otherFeature||formatFeature===otherFeature)if(otherFeature=null===(_otherData$format2=sources.format)||void 0===_otherData$format2?void 0:_otherData$format2.mesh,!formatMesh&&!otherFeature||formatMesh===otherFeature)if(\"values\"in data&&\n\"values\"in sources){if(deepEqual(data.values,sources.values))return other}else if(\"url\"in data&&\"url\"in sources){if(data.url===sources.url)return other}else if(isNamedData(data)&&data.name===other.dataName)return other}return null}function parseRoot(model,sources){if(model.data||!model.parent){if(null===model.data)return model=new SourceNode({values:[]}),sources.push(model),model;const existingSource=findSource(model.data,sources);if(existingSource)return isGenerator(model.data)||(existingSource.data.format=\nmergeDeep({},model.data.format,existingSource.data.format)),!existingSource.hasName()&&model.data.name&&(existingSource.dataName=model.data.name),existingSource;model=new SourceNode(model.data);sources.push(model);return model}return model.parent.component.data.facetRoot?model.parent.component.data.facetRoot:model.parent.component.data.main}function parseData(model){var _data$format3,_ParseNode$makeExplic,_ParseNode$makeWithAn2,head=parseRoot(model,model.component.data.sources);const {outputNodes,\noutputNodeRefCounts}=model.component.data,ancestorParse=model.parent?model.parent.component.data.ancestorParse.clone():new AncestorParse,data=model.data;isGenerator(data)?(\"sequence\"in data?head=new SequenceNode(head,data.sequence):\"graticule\"in data&&(head=new GraticuleNode(head,data.graticule)),ancestorParse.parseNothing=!0):null===(null===data||void 0===data?void 0:null===(_data$format3=data.format)||void 0===_data$format3?void 0:_data$format3.parse)&&(ancestorParse.parseNothing=!0);head=null!==\n(_ParseNode$makeExplic=ParseNode.makeExplicit(head,model,ancestorParse))&&void 0!==_ParseNode$makeExplic?_ParseNode$makeExplic:head;head=new IdentifierNode(head);_data$format3=model.parent&&isLayerModel(model.parent);if((isUnitModel(model)||isFacetModel(model))&&_data$format3){var _BinNode$makeFromEnco;head=null!==(_BinNode$makeFromEnco=BinNode.makeFromEncoding(head,model))&&void 0!==_BinNode$makeFromEnco?_BinNode$makeFromEnco:head}if(0<model.transforms.length){_BinNode$makeFromEnco=0;for(const t of model.transforms){var transformNode=\n_ParseNode$makeExplic=void 0;if(\"calculate\"in t)transformNode=head=new CalculateNode(head,t),_ParseNode$makeExplic=\"derived\";else if(\"filter\"in t){var _ParseNode$makeWithAn;transformNode=getImplicitFromFilterTransform(t);transformNode=head=null!==(_ParseNode$makeWithAn=ParseNode.makeWithAncestors(head,{},transformNode,ancestorParse))&&void 0!==_ParseNode$makeWithAn?_ParseNode$makeWithAn:head;head=new FilterNode(head,model,t.filter)}else if(\"bin\"in t)transformNode=head=BinNode.makeFromTransform(head,\nt,model),_ParseNode$makeExplic=\"number\";else if(\"timeUnit\"in t)_ParseNode$makeExplic=\"date\",void 0===ancestorParse.getWithExplicit(t.field).value&&(head=new ParseNode(head,{[t.field]:_ParseNode$makeExplic}),ancestorParse.set(t.field,_ParseNode$makeExplic,!1)),transformNode=head=TimeUnitNode.makeFromTransform(head,t);else if(\"aggregate\"in t)transformNode=head=AggregateNode.makeFromTransform(head,t),_ParseNode$makeExplic=\"number\",requiresSelectionId(model)&&(head=new IdentifierNode(head));else if(\"lookup\"in\nt)transformNode=head=LookupNode.make(head,model,t,_BinNode$makeFromEnco++),_ParseNode$makeExplic=\"derived\";else if(\"window\"in t)transformNode=head=new WindowTransformNode(head,t),_ParseNode$makeExplic=\"number\";else if(\"joinaggregate\"in t)transformNode=head=new JoinAggregateTransformNode(head,t),_ParseNode$makeExplic=\"number\";else if(\"stack\"in t)transformNode=head=StackNode.makeFromTransform(head,t),_ParseNode$makeExplic=\"derived\";else if(\"fold\"in t)transformNode=head=new FoldTransformNode(head,t),\n_ParseNode$makeExplic=\"derived\";else if(\"flatten\"in t)transformNode=head=new FlattenTransformNode(head,t),_ParseNode$makeExplic=\"derived\";else if(\"pivot\"in t)transformNode=head=new PivotTransformNode(head,t),_ParseNode$makeExplic=\"derived\";else if(\"sample\"in t)head=new SampleTransformNode(head,t);else if(\"impute\"in t)transformNode=head=ImputeNode.makeFromTransform(head,t),_ParseNode$makeExplic=\"derived\";else if(\"density\"in t)transformNode=head=new DensityTransformNode(head,t),_ParseNode$makeExplic=\n\"derived\";else if(\"quantile\"in t)transformNode=head=new QuantileTransformNode(head,t),_ParseNode$makeExplic=\"derived\";else if(\"regression\"in t)transformNode=head=new RegressionTransformNode(head,t),_ParseNode$makeExplic=\"derived\";else if(\"loess\"in t)transformNode=head=new LoessTransformNode(head,t),_ParseNode$makeExplic=\"derived\";else{warn(\"Ignoring an invalid transform: \".concat(stringify(t),\".\"));continue}if(transformNode&&void 0!==_ParseNode$makeExplic)for(const field of null!==(_transformNode$produc=\ntransformNode.producedFields())&&void 0!==_transformNode$produc?_transformNode$produc:[]){var _transformNode$produc;ancestorParse.set(field,_ParseNode$makeExplic,!1)}}}_ParseNode$makeWithAn={};if(isUnitModel(model)&&model.component.selection)for(JSCompiler_inline_result of keys$jscomp$0(model.component.selection)){_transformNode$produc=model.component.selection[JSCompiler_inline_result];for(var proj of _transformNode$produc.project.items)!proj.channel&&1<accessPathDepth(proj.field)&&(_ParseNode$makeWithAn[proj.field]=\n\"flatten\")}var JSCompiler_inline_result=_ParseNode$makeWithAn;proj=getImplicitFromEncoding(model);head=null!==(_ParseNode$makeWithAn2=ParseNode.makeWithAncestors(head,{},Object.assign({},JSCompiler_inline_result,proj),ancestorParse))&&void 0!==_ParseNode$makeWithAn2?_ParseNode$makeWithAn2:head;isUnitModel(model)&&(head=GeoJSONNode.parseAll(head,model),head=GeoPointNode.parseAll(head,model));if(isUnitModel(model)||isFacetModel(model)){var _TimeUnitNode$makeFro;if(!_data$format3){var _BinNode$makeFromEnco2;\nhead=null!==(_BinNode$makeFromEnco2=BinNode.makeFromEncoding(head,model))&&void 0!==_BinNode$makeFromEnco2?_BinNode$makeFromEnco2:head}head=null!==(_TimeUnitNode$makeFro=TimeUnitNode.makeFromEncoding(head,model))&&void 0!==_TimeUnitNode$makeFro?_TimeUnitNode$makeFro:head;head=CalculateNode.parseAllForSortIndex(head,model)}_TimeUnitNode$makeFro=model.getDataName(DataSourceType.Raw);_ParseNode$makeWithAn2=new OutputNode(head,_TimeUnitNode$makeFro,DataSourceType.Raw,outputNodeRefCounts);head=outputNodes[_TimeUnitNode$makeFro]=\n_ParseNode$makeWithAn2;if(isUnitModel(model)){var _ImputeNode$makeFromE,_StackNode$makeFromEn;if(_TimeUnitNode$makeFro=AggregateNode.makeFromEncoding(head,model))head=_TimeUnitNode$makeFro,requiresSelectionId(model)&&(head=new IdentifierNode(head));head=null!==(_ImputeNode$makeFromE=ImputeNode.makeFromEncoding(head,model))&&void 0!==_ImputeNode$makeFromE?_ImputeNode$makeFromE:head;head=null!==(_StackNode$makeFromEn=StackNode.makeFromEncoding(head,model))&&void 0!==_StackNode$makeFromEn?_StackNode$makeFromEn:\nhead}if(isUnitModel(model)){var _FilterInvalidNode$ma;head=null!==(_FilterInvalidNode$ma=FilterInvalidNode.make(head,model))&&void 0!==_FilterInvalidNode$ma?_FilterInvalidNode$ma:head}_StackNode$makeFromEn=model.getDataName(DataSourceType.Main);_ImputeNode$makeFromE=new OutputNode(head,_StackNode$makeFromEn,DataSourceType.Main,outputNodeRefCounts);head=outputNodes[_StackNode$makeFromEn]=_ImputeNode$makeFromE;isUnitModel(model)&&materializeSelections(model,_ImputeNode$makeFromE);_FilterInvalidNode$ma=\nnull;if(isFacetModel(model)){var _makeJoinAggregateFro;_StackNode$makeFromEn=model.getName(\"facet\");{_FilterInvalidNode$ma=head;const {row,column}=model.facet;if(row&&column){_TimeUnitNode$makeFro=null;for(JSCompiler_inline_result$jscomp$0 of[row,column])if(isSortField(JSCompiler_inline_result$jscomp$0.sort)){const {field,op=\"min\"}=JSCompiler_inline_result$jscomp$0.sort;_FilterInvalidNode$ma=_TimeUnitNode$makeFro=new JoinAggregateTransformNode(_FilterInvalidNode$ma,{joinaggregate:[{op,field,as:facetSortFieldName(JSCompiler_inline_result$jscomp$0,\nJSCompiler_inline_result$jscomp$0.sort,{forAs:!0})}],groupby:[vgField(JSCompiler_inline_result$jscomp$0)]})}var JSCompiler_inline_result$jscomp$0=_TimeUnitNode$makeFro}else JSCompiler_inline_result$jscomp$0=null}head=null!==(_makeJoinAggregateFro=JSCompiler_inline_result$jscomp$0)&&void 0!==_makeJoinAggregateFro?_makeJoinAggregateFro:head;_FilterInvalidNode$ma=new FacetNode(head,model,_StackNode$makeFromEn,_ImputeNode$makeFromE.getSource());outputNodes[_StackNode$makeFromEn]=_FilterInvalidNode$ma}return Object.assign({},\nmodel.component.data,{outputNodes,outputNodeRefCounts,raw:_ParseNode$makeWithAn2,main:_ImputeNode$makeFromE,facetRoot:_FilterInvalidNode$ma,ancestorParse})}function parseUnitAxes(model){return POSITION_SCALE_CHANNELS.reduce((axis,channel)=>{model.component.scales[channel]&&(axis[channel]=[parseAxis(channel,model)]);return axis},{})}function mergeAxisComponents(mergedAxisCmpts,childAxisCmpts){if(mergedAxisCmpts){if(mergedAxisCmpts.length!==childAxisCmpts.length)return;const length=mergedAxisCmpts.length;\nfor(let i=0;i<length;i++){const merged=mergedAxisCmpts[i],child=childAxisCmpts[i];if(!!merged!==!!child)return;if(merged&&child){const mergedOrient=merged.getWithExplicit(\"orient\"),childOrient=child.getWithExplicit(\"orient\");if(mergedOrient.explicit&&childOrient.explicit&&mergedOrient.value!==childOrient.value)return;mergedAxisCmpts[i]=mergeAxisComponent(merged,child)}}}else return childAxisCmpts.map(axisComponent=>axisComponent.clone());return mergedAxisCmpts}function mergeAxisComponent(merged,child){for(const prop of AXIS_COMPONENT_PROPERTIES){const mergedValueWithExplicit=\nmergeValuesWithExplicit(merged.getWithExplicit(prop),child.getWithExplicit(prop),prop,\"axis\",(v1,v2)=>{switch(prop){case \"title\":return mergeTitleComponent(v1,v2);case \"gridScale\":return{explicit:v1.explicit,value:getFirstDefined(v1.value,v2.value)}}return defaultTieBreaker(v1,v2,prop,\"axis\")});merged.setWithExplicit(prop,mergedValueWithExplicit)}return merged}function isExplicit$1(value,property,axis,model,channel){if(\"disable\"===property)return void 0!==axis;axis=axis||{};switch(property){case \"titleAngle\":case \"labelAngle\":return value===\n(isSignalRef(axis.labelAngle)?axis.labelAngle:normalizeAngle(axis.labelAngle));case \"values\":return!!axis.values;case \"encode\":return!!axis.encoding||!!axis.labelAngle;case \"title\":if(value===getFieldDefTitle(model,channel))return!0}return value===axis[property]}function parseAxis(channel,model){var _axis,_config,_config$axis,_axis2,_axis$encoding;let axis=model.axis(channel);const axisComponent=new AxisComponent;var fieldOrDatumDef=getFieldOrDatumDef(model.encoding[channel]);const {mark,config:config$jscomp$0}=\nmodel;var orient=(null===(_axis=axis)||void 0===_axis?void 0:_axis.orient)||(null===(_config=config$jscomp$0[\"x\"===channel?\"axisX\":\"axisY\"])||void 0===_config?void 0:_config.orient)||(null===(_config$axis=config$jscomp$0.axis)||void 0===_config$axis?void 0:_config$axis.orient)||(\"x\"===channel?\"bottom\":\"left\");_config=model.getScaleComponent(channel).get(\"type\");_axis=getAxisConfigs(channel,_config,orient,model.config);_config$axis=void 0!==axis?!axis:getAxisConfig(\"disable\",config$jscomp$0.style,\nnull===(_axis2=axis)||void 0===_axis2?void 0:_axis2.style,_axis).configValue;axisComponent.set(\"disable\",_config$axis,void 0!==axis);if(_config$axis)return axisComponent;axis=axis||{};_axis2=getLabelAngle(fieldOrDatumDef,axis,channel,config$jscomp$0.style,_axis);fieldOrDatumDef={fieldOrDatumDef,axis,channel,model,scaleType:_config,orient,labelAngle:_axis2,mark,config:config$jscomp$0};for(const property of AXIS_COMPONENT_PROPERTIES)if(orient=property in axisRules?axisRules[property](fieldOrDatumDef):\nAXIS_PROPERTIES_INDEX[property]?axis[property]:void 0,_axis2=void 0!==orient,_config=isExplicit$1(orient,property,axis,model,channel),_axis2&&_config)axisComponent.set(property,orient,_config);else{const {configValue,configFrom}=AXIS_PROPERTIES_INDEX[property]&&\"values\"!==property?getAxisConfig(property,config$jscomp$0.style,axis.style,_axis):{};_config$axis=void 0!==configValue;_axis2&&!_config$axis?axisComponent.set(property,orient,_config):(\"vgAxisConfig\"!==configFrom||propsToAlwaysIncludeConfig.has(property)&&\n_config$axis||isConditionalAxisValue(configValue)||isSignalRef(configValue))&&axisComponent.set(property,configValue,!1)}const axisEncoding=null!==(_axis$encoding=axis.encoding)&&void 0!==_axis$encoding?_axis$encoding:{};_axis$encoding=AXIS_PARTS.reduce((e,part)=>{var _axisEncoding$part;if(!axisComponent.hasAxisPart(part))return e;var axisEncodingPart=guideEncodeEntry(null!==(_axisEncoding$part=axisEncoding[part])&&void 0!==_axisEncoding$part?_axisEncoding$part:{},model);if(\"labels\"===part){{var _getFieldOrDatumDef;\nconst {encoding,config}=model;_axisEncoding$part=null!==(_getFieldOrDatumDef=getFieldOrDatumDef(encoding[channel]))&&void 0!==_getFieldOrDatumDef?_getFieldOrDatumDef:getFieldOrDatumDef(encoding[getSecondaryRangeChannel(channel)]);_getFieldOrDatumDef=model.axis(channel)||{};const {format,formatType}=_getFieldOrDatumDef;axisEncodingPart=isCustomFormatType(formatType)?Object.assign({},{text:formatCustomType({fieldOrDatumDef:_axisEncoding$part,field:\"datum.value\",format,formatType,config})},axisEncodingPart):\naxisEncodingPart}}void 0===axisEncodingPart||isEmpty(axisEncodingPart)||(e[part]={update:axisEncodingPart});return e},{});isEmpty(_axis$encoding)||axisComponent.set(\"encode\",_axis$encoding,!!axis.encoding||void 0!==axis.labelAngle);return axisComponent}function orient$jscomp$1(mark,encoding,specifiedOrient){switch(mark){case POINT:case CIRCLE:case SQUARE:case TEXT$1:case RECT:case IMAGE:return}const {x,y,x2,y2}=encoding;switch(mark){case BAR:if(isFieldDef(x)&&(isBinned(x.bin)||isFieldDef(y)&&y.aggregate&&\n!x.aggregate))break;if(isFieldDef(y)&&(isBinned(y.bin)||isFieldDef(x)&&x.aggregate&&!y.aggregate))return\"horizontal\";if(y2||x2){if(specifiedOrient)return specifiedOrient;if(!x2&&(isFieldDef(x)&&\"quantitative\"===x.type&&!isBinning(x.bin)||isNumericDataDef(x)))return\"horizontal\";if(!y2&&(isFieldDef(y)&&\"quantitative\"===y.type&&!isBinning(y.bin)||isNumericDataDef(y)))break}case RULE:if(!(!x2||isFieldDef(x)&&isBinned(x.bin)||!y2||isFieldDef(y)&&isBinned(y.bin)))return;case AREA:if(y2){if(isFieldDef(y)&&\nisBinned(y.bin))return\"horizontal\";break}else if(x2)if(isFieldDef(x)&&isBinned(x.bin))break;else return\"horizontal\";else if(mark===RULE)if(x&&!y)break;else if(y&&!x)return\"horizontal\";case LINE:case TICK:encoding=isContinuousFieldOrDatumDef(x);var yIsContinuous=isContinuousFieldOrDatumDef(y);if(encoding&&!yIsContinuous)return\"tick\"!==mark?\"horizontal\":\"vertical\";if(!encoding&&yIsContinuous)return\"tick\"!==mark?\"vertical\":\"horizontal\";if(encoding&&yIsContinuous){encoding=\"temporal\"===x.type;yIsContinuous=\n\"temporal\"===y.type;if(encoding&&!yIsContinuous)return\"tick\"!==mark?\"vertical\":\"horizontal\";if(!encoding&&yIsContinuous)return\"tick\"!==mark?\"horizontal\":\"vertical\";if(!x.aggregate&&y.aggregate)return\"tick\"!==mark?\"vertical\":\"horizontal\";if(x.aggregate&&!y.aggregate)return\"tick\"!==mark?\"horizontal\":\"vertical\";if(specifiedOrient)return specifiedOrient}else{if(specifiedOrient)return specifiedOrient;return}}return\"vertical\"}function encodeEntry(model,fixedShape){var JSCompiler_temp_const=Object,JSCompiler_temp_const$jscomp$0=\nJSCompiler_temp_const.assign,JSCompiler_temp_const$jscomp$1=baseEncodeEntry(model,{align:\"ignore\",baseline:\"ignore\",color:\"include\",size:\"include\",orient:\"ignore\",theta:\"ignore\"}),JSCompiler_temp_const$jscomp$2=pointPosition(\"x\",model,{defaultPos:\"mid\"}),JSCompiler_temp_const$jscomp$3=pointPosition(\"y\",model,{defaultPos:\"mid\"}),JSCompiler_temp_const$jscomp$4=nonPosition(\"size\",model),JSCompiler_temp_const$jscomp$5=nonPosition(\"angle\",model);model=fixedShape?{shape:{value:fixedShape}}:nonPosition(\"shape\",\nmodel);return JSCompiler_temp_const$jscomp$0.call(JSCompiler_temp_const,{},JSCompiler_temp_const$jscomp$1,JSCompiler_temp_const$jscomp$2,JSCompiler_temp_const$jscomp$3,JSCompiler_temp_const$jscomp$4,JSCompiler_temp_const$jscomp$5,model)}function parseMarkGroups(model){if(contains([LINE,AREA,TRAIL],model.mark)){var details=pathGroupingFields(model.mark,model.encoding);if(0<details.length)return getPathGroups(model,details)}else if(contains([BAR],model.mark)&&(details=VG_CORNERRADIUS_CHANNELS.some(prop=>\ngetMarkPropOrConfig(prop,model.markDef,model.config)),model.stack&&!model.fieldDef(\"size\")&&details))return getGroupsForStackedBarWithCornerRadius(model);return getMarkGroup(model)}function getPathGroups(model,details){return[{name:model.getName(\"pathgroup\"),type:\"group\",from:{facet:{name:\"faceted_path_\"+model.requestDataName(DataSourceType.Main),data:model.requestDataName(DataSourceType.Main),groupby:details}},encode:{update:{width:{field:{group:\"width\"}},height:{field:{group:\"height\"}}}},marks:getMarkGroup(model,\n{fromPrefix:\"faceted_path_\"})}]}function getGroupsForStackedBarWithCornerRadius(model){const [mark]=getMarkGroup(model,{fromPrefix:\"stack_group_\"}),fieldScale=model.scaleName(model.stack.fieldChannel),stackField=opt=>{opt=void 0===opt?{}:opt;return model.vgField(model.stack.fieldChannel,opt)};var stackFieldGroup=(func,expr)=>{expr=[stackField({prefix:\"min\",suffix:\"start\",expr}),stackField({prefix:\"max\",suffix:\"start\",expr}),stackField({prefix:\"min\",suffix:\"end\",expr}),stackField({prefix:\"max\",suffix:\"end\",\nexpr})];return\"\".concat(func,\"(\").concat(expr.map(field=>\"scale('\".concat(fieldScale,\"',\").concat(field,\")\")).join(\",\"),\")\")};let innerGroupUpdate;\"x\"===model.stack.fieldChannel?(stackFieldGroup=Object.assign({},pick(mark.encode.update,[\"y\",\"yc\",\"y2\",\"height\",...VG_CORNERRADIUS_CHANNELS]),{x:{signal:stackFieldGroup(\"min\",\"datum\")},x2:{signal:stackFieldGroup(\"max\",\"datum\")},clip:{value:!0}}),innerGroupUpdate={x:{field:{group:\"x\"},mult:-1},height:{field:{group:\"height\"}}},mark.encode.update=Object.assign({},\nomit(mark.encode.update,[\"y\",\"yc\",\"y2\"]),{height:{field:{group:\"height\"}}})):(stackFieldGroup=Object.assign({},pick(mark.encode.update,[\"x\",\"xc\",\"x2\",\"width\"]),{y:{signal:stackFieldGroup(\"min\",\"datum\")},y2:{signal:stackFieldGroup(\"max\",\"datum\")},clip:{value:!0}}),innerGroupUpdate={y:{field:{group:\"y\"},mult:-1},width:{field:{group:\"width\"}}},mark.encode.update=Object.assign({},omit(mark.encode.update,[\"x\",\"xc\",\"x2\"]),{width:{field:{group:\"width\"}}}));for(var key of VG_CORNERRADIUS_CHANNELS){var configValue$jscomp$0=\ngetMarkConfig(key,model.markDef,model.config);mark.encode.update[key]?(stackFieldGroup[key]=mark.encode.update[key],delete mark.encode.update[key]):configValue$jscomp$0&&(stackFieldGroup[key]=signalOrValueRef(configValue$jscomp$0));configValue$jscomp$0&&(mark.encode.update[key]={value:0})}key=model.fieldDef(model.stack.groupbyChannel);configValue$jscomp$0=vgField(key)?[vgField(key)]:[];((null===key||void 0===key?0:key.bin)||(null===key||void 0===key?0:key.timeUnit))&&configValue$jscomp$0.push(vgField(key,\n{binSuffix:\"end\"}));stackFieldGroup=\"stroke strokeWidth strokeJoin strokeCap strokeDash strokeDashOffset strokeMiterLimit strokeOpacity\".split(\" \").reduce((encode,prop)=>{if(mark.encode.update[prop])return Object.assign({},encode,{[prop]:mark.encode.update[prop]});{const configValue=getMarkConfig(prop,model.markDef,model.config);return void 0!==configValue?Object.assign({},encode,{[prop]:signalOrValueRef(configValue)}):encode}},stackFieldGroup);stackFieldGroup.stroke&&(stackFieldGroup.strokeForeground=\n{value:!0},stackFieldGroup.strokeOffset={value:0});return[{type:\"group\",from:{facet:{data:model.requestDataName(DataSourceType.Main),name:\"stack_group_\"+model.requestDataName(DataSourceType.Main),groupby:configValue$jscomp$0,aggregate:{fields:[stackField({suffix:\"start\"}),stackField({suffix:\"start\"}),stackField({suffix:\"end\"}),stackField({suffix:\"end\"})],ops:[\"min\",\"max\",\"min\",\"max\"]}}},encode:{update:stackFieldGroup},marks:[{type:\"group\",encode:{update:innerGroupUpdate},marks:[mark]}]}]}function getSort$1(model){const {encoding,\nstack,mark,markDef,config}=model;var order=encoding.order;if(!(!isArray(order)&&isValueDef(order)&&isNullOrFalse(order.value)||!order&&isNullOrFalse(getMarkPropOrConfig(\"order\",markDef,config)))){if((isArray(order)||isFieldDef(order))&&!stack)return sortParams(order,{expr:\"datum\"});if(isPathMark(mark)){const dimensionChannel=\"horizontal\"===markDef.orient?\"y\":\"x\",dimensionChannelDef=encoding[dimensionChannel];if(isFieldDef(dimensionChannelDef)){order=dimensionChannelDef.sort;if(isArray(order))return{field:vgField(dimensionChannelDef,\n{prefix:dimensionChannel,suffix:\"sort_index\",expr:\"datum\"})};if(isSortField(order))return{field:vgField({aggregate:isAggregate(model.encoding)?order.op:void 0,field:order.field},{expr:\"datum\"})};if(order&&order.encoding)return model=model.fieldDef(order.encoding),{field:vgField(model,{expr:\"datum\"}),order:order.order};if(null!==order)return{field:vgField(dimensionChannelDef,{binSuffix:model.stack&&model.stack.impute?\"mid\":void 0,expr:\"datum\"})}}}}}function getMarkGroup(model,opt){opt=void 0===opt?\n{fromPrefix:\"\"}:opt;const {mark,markDef,encoding,config}=model;var JSCompiler_temp_const=markDef.clip;var JSCompiler_inline_result=model.getScaleComponent(\"x\");var yScale=model.getScaleComponent(\"y\");JSCompiler_inline_result=JSCompiler_inline_result&&JSCompiler_inline_result.get(\"selectionExtent\")||yScale&&yScale.get(\"selectionExtent\")?!0:void 0;yScale=(yScale=model.component.projection)&&!yScale.isFit?!0:void 0;JSCompiler_temp_const=getFirstDefined(JSCompiler_temp_const,JSCompiler_inline_result,\nyScale);JSCompiler_inline_result=getStyles(markDef);yScale=encoding.key;const sort=getSort$1(model);var JSCompiler_inline_result$jscomp$0;if(model.component.selection){for(var parentCount=JSCompiler_inline_result$jscomp$0=keys$jscomp$0(model.component.selection).length,parent=model.parent;parent&&0===parentCount;)parentCount=keys$jscomp$0(parent.component.selection).length,parent=parent.parent;JSCompiler_inline_result$jscomp$0=parentCount?{interactive:0<JSCompiler_inline_result$jscomp$0||!!model.encoding.tooltip}:\nnull}else JSCompiler_inline_result$jscomp$0=null;parentCount=getMarkPropOrConfig(\"aria\",markDef,config);parent=markCompiler[mark].postEncodingTransform?markCompiler[mark].postEncodingTransform(model):null;return[Object.assign({},{name:model.getName(\"marks\"),type:markCompiler[mark].vgMark},JSCompiler_temp_const?{clip:!0}:{},JSCompiler_inline_result?{style:JSCompiler_inline_result}:{},yScale?{key:yScale.field}:{},sort?{sort}:{},JSCompiler_inline_result$jscomp$0?JSCompiler_inline_result$jscomp$0:{},\n!1===parentCount?{aria:parentCount}:{},{from:{data:opt.fromPrefix+model.requestDataName(DataSourceType.Main)},encode:{update:markCompiler[mark].encodeEntry(model)}},parent?{transform:parent}:{})]}function buildModel(spec,parent,parentGivenName,unitSize,config){if(\"facet\"in spec)return new FacetModel(spec,parent,parentGivenName,config);if(\"layer\"in spec)return new LayerModel(spec,parent,parentGivenName,unitSize,config);if(isUnitSpec(spec))return new UnitModel(spec,parent,parentGivenName,unitSize,config);\nif(\"vconcat\"in spec||\"hconcat\"in spec||\"concat\"in spec)return new ConcatModel(spec,parent,parentGivenName,config);throw Error(invalidSpec(spec));}function assembleTopLevelModel(model,topLevelProperties,datasets,usermeta){datasets=void 0===datasets?{}:datasets;const vgConfig=model.config?stripAndRedirectConfig(model.config):void 0;datasets=[].concat(model.assembleSelectionData([]),assembleRootData(model.component.data,datasets));const projections=model.assembleProjections(),title=model.assembleTitle(),\nstyle=model.assembleGroupStyle(),encodeEntry=model.assembleGroupEncodeEntry(!0);let layoutSignals=model.assembleLayoutSignals();layoutSignals=layoutSignals.filter(signal=>\"width\"!==signal.name&&\"height\"!==signal.name||void 0===signal.value?!0:(topLevelProperties[signal.name]=+signal.value,!1));var $jscomp$destructuring$var260=Object.assign({},topLevelProperties);const params=topLevelProperties.params;$jscomp$destructuring$var260=(delete $jscomp$destructuring$var260.params,$jscomp$destructuring$var260);\nreturn Object.assign({},{$schema:\"https://vega.github.io/schema/vega/v5.json\"},model.description?{description:model.description}:{},$jscomp$destructuring$var260,title?{title}:{},style?{style}:{},encodeEntry?{encode:{update:encodeEntry}}:{},{data:datasets},0<projections.length?{projections}:{},model.assembleGroup([...layoutSignals,...model.assembleSelectionTopLevelSignals([]),...assembleParameterSignals(params)]),vgConfig?{config:vgConfig}:{},usermeta?{usermeta}:{})}const get1=field=>function(obj){return obj[field]},\ngetN=path=>{const len=path.length;return function(obj){for(let i=0;i<len;++i)obj=obj[path[i]];return obj}};(function(field,name,opt){const path=splitAccessPath(field);field=1===path.length?path[0]:field;return accessor$jscomp$0((opt&&opt.get||getter)(path),[field],name||field)})(\"id\");const identity=accessor$jscomp$0(_=>_,[],\"identity\");accessor$jscomp$0(()=>0,[],\"zero\");accessor$jscomp$0(()=>1,[],\"one\");accessor$jscomp$0(()=>!0,[],\"true\");accessor$jscomp$0(()=>!1,[],\"false\");var isArray=Array.isArray;\nconst hop=Object.prototype.hasOwnProperty;Array.prototype.flat||Object.defineProperty(Array.prototype,\"flat\",{configurable:!0,value:function r(JSCompiler_OptimizeArgumentsArray_p4){var t=isNaN(JSCompiler_OptimizeArgumentsArray_p4)?1:Number(JSCompiler_OptimizeArgumentsArray_p4);return t?Array.prototype.reduce.call(this,function(a,e){return Array.isArray(e)?a.push.apply(a,r.call(e,t-1)):a.push(e),a},[]):Array.prototype.slice.call(this)},writable:!0});Array.prototype.flatMap||Object.defineProperty(Array.prototype,\n\"flatMap\",{configurable:!0,value:function(r){return Array.prototype.map.apply(this,arguments).flat()},writable:!0});var fastJsonStableStringify=function(data,opts){opts||(opts={});\"function\"===typeof opts&&(opts={cmp:opts});var cycles=\"boolean\"===typeof opts.cycles?opts.cycles:!1,cmp=opts.cmp&&function(f){return function(node){return function(a,b){return f({key:a,value:node[a]},{key:b,value:node[b]})}}}(opts.cmp),seen=[];return function stringify(node){node&&node.toJSON&&\"function\"===typeof node.toJSON&&\n(node=node.toJSON());if(void 0!==node){if(\"number\"==typeof node)return isFinite(node)?\"\"+node:\"null\";if(\"object\"!==typeof node)return JSON.stringify(node);var i;if(Array.isArray(node)){var out=\"[\";for(i=0;i<node.length;i++)i&&(out+=\",\"),out+=stringify(node[i])||\"null\";return out+\"]\"}if(null===node)return\"null\";if(-1!==seen.indexOf(node)){if(cycles)return JSON.stringify(\"__cycle__\");throw new TypeError(\"Converting circular structure to JSON\");}var seenIndex=seen.push(node)-1,keys=Object.keys(node).sort(cmp&&\ncmp(node));out=\"\";for(i=0;i<keys.length;i++){var key=keys[i],value=stringify(node[key]);value&&(out&&(out+=\",\"),out+=JSON.stringify(key)+\":\"+value)}seen.splice(seenIndex,1);return\"{\"+out+\"}\"}}(data)};const deepEqual=function equal(a,b){if(a===b)return!0;if(a&&b&&\"object\"==typeof a&&\"object\"==typeof b){if(a.constructor!==b.constructor)return!1;var i;if(Array.isArray(a)){var length=a.length;if(length!=b.length)return!1;for(i=length;0!==i--;)if(!equal(a[i],b[i]))return!1;return!0}if(a.constructor===\nRegExp)return a.source===b.source&&a.flags===b.flags;if(a.valueOf!==Object.prototype.valueOf)return a.valueOf()===b.valueOf();if(a.toString!==Object.prototype.toString)return a.toString()===b.toString();var keys=Object.keys(a);length=keys.length;if(length!==Object.keys(b).length)return!1;for(i=length;0!==i--;)if(!Object.prototype.hasOwnProperty.call(b,keys[i]))return!1;for(i=length;0!==i--;)if(length=keys[i],!equal(a[length],b[length]))return!1;return!0}return a!==a&&b!==b},duplicate=function(fn,\nbasedir,module){return module={path:basedir,exports:{},require:function(path,base){throw Error(\"Dynamic requires are not currently supported by @rollup/plugin-commonjs\");}},fn(module,module.exports),module.exports}(function(module){var clone$jscomp$0=function(){function _instanceof(obj,type){return null!=type&&obj instanceof type}function clone(parent$jscomp$0,circular,depth$jscomp$0,prototype,includeNonEnumerable){function _clone(parent,depth){if(null===parent)return null;if(0===depth||\"object\"!=\ntypeof parent)return parent;if(_instanceof(parent,nativeMap))var child=new nativeMap;else if(_instanceof(parent,nativeSet))child=new nativeSet;else if(_instanceof(parent,nativePromise))child=new nativePromise(function(resolve,reject){parent.then(function(value){resolve(_clone(value,depth-1))},function(err){reject(_clone(err,depth-1))})});else if(clone.__isArray(parent))child=[];else if(clone.__isRegExp(parent))child=new RegExp(parent.source,__getRegExpFlags(parent)),parent.lastIndex&&(child.lastIndex=\nparent.lastIndex);else if(clone.__isDate(parent))child=new Date(parent.getTime());else{if(useBuffer&&Buffer.isBuffer(parent))return child=Buffer.allocUnsafe?Buffer.allocUnsafe(parent.length):new Buffer(parent.length),parent.copy(child),child;if(_instanceof(parent,Error))child=Object.create(parent);else if(\"undefined\"==typeof prototype){var proto=Object.getPrototypeOf(parent);child=Object.create(proto)}else child=Object.create(prototype),proto=prototype}if(circular){var index=allParents.indexOf(parent);\nif(-1!=index)return allChildren[index];allParents.push(parent);allChildren.push(child)}_instanceof(parent,nativeMap)&&parent.forEach(function(value,key){key=_clone(key,depth-1);value=_clone(value,depth-1);child.set(key,value)});_instanceof(parent,nativeSet)&&parent.forEach(function(value){value=_clone(value,depth-1);child.add(value)});for(var i in parent){var attrs;proto&&(attrs=Object.getOwnPropertyDescriptor(proto,i));attrs&&null==attrs.set||(child[i]=_clone(parent[i],depth-1))}if(Object.getOwnPropertySymbols)for(index=\nObject.getOwnPropertySymbols(parent),i=0;i<index.length;i++)if(attrs=index[i],proto=Object.getOwnPropertyDescriptor(parent,attrs),!proto||proto.enumerable||includeNonEnumerable)child[attrs]=_clone(parent[attrs],depth-1),proto.enumerable||Object.defineProperty(child,attrs,{enumerable:!1});if(includeNonEnumerable)for(index=Object.getOwnPropertyNames(parent),i=0;i<index.length;i++)attrs=index[i],proto=Object.getOwnPropertyDescriptor(parent,attrs),proto&&proto.enumerable||(child[attrs]=_clone(parent[attrs],\ndepth-1),Object.defineProperty(child,attrs,{enumerable:!1}));return child}\"object\"===typeof circular&&(depth$jscomp$0=circular.depth,prototype=circular.prototype,includeNonEnumerable=circular.includeNonEnumerable,circular=circular.circular);var allParents=[],allChildren=[],useBuffer=\"undefined\"!=typeof Buffer;\"undefined\"==typeof circular&&(circular=!0);\"undefined\"==typeof depth$jscomp$0&&(depth$jscomp$0=Infinity);return _clone(parent$jscomp$0,depth$jscomp$0)}function __objToStr(o){return Object.prototype.toString.call(o)}\nfunction __getRegExpFlags(re){var flags=\"\";re.global&&(flags+=\"g\");re.ignoreCase&&(flags+=\"i\");re.multiline&&(flags+=\"m\");return flags}try{var nativeMap=Map}catch(_){nativeMap=function(){}}try{var nativeSet=Set}catch(_){nativeSet=function(){}}try{var nativePromise=Promise}catch(_){nativePromise=function(){}}clone.clonePrototype=function(parent){if(null===parent)return null;var c=function(){};c.prototype=parent;return new c};clone.__objToStr=__objToStr;clone.__isDate=function(o){return\"object\"===typeof o&&\n\"[object Date]\"===__objToStr(o)};clone.__isArray=function(o){return\"object\"===typeof o&&\"[object Array]\"===__objToStr(o)};clone.__isRegExp=function(o){return\"object\"===typeof o&&\"[object RegExp]\"===__objToStr(o)};clone.__getRegExpFlags=__getRegExpFlags;return clone}();module.exports&&(module.exports=clone$jscomp$0)});Set.prototype.toJSON=function(){return\"Set(\".concat([...this].map(x=>fastJsonStableStringify(x)).join(\",\"),\")\")};const stringify=fastJsonStableStringify,keys$jscomp$0=Object.keys,vals$jscomp$0=\nObject.values,entries=Object.entries;let idCounter=42;const CONDITIONAL_AXIS_PROP_INDEX={labelAlign:{part:\"labels\",vgProp:\"align\"},labelBaseline:{part:\"labels\",vgProp:\"baseline\"},labelColor:{part:\"labels\",vgProp:\"fill\"},labelFont:{part:\"labels\",vgProp:\"font\"},labelFontSize:{part:\"labels\",vgProp:\"fontSize\"},labelFontStyle:{part:\"labels\",vgProp:\"fontStyle\"},labelFontWeight:{part:\"labels\",vgProp:\"fontWeight\"},labelOpacity:{part:\"labels\",vgProp:\"opacity\"},labelOffset:null,labelPadding:null,gridColor:{part:\"grid\",\nvgProp:\"stroke\"},gridDash:{part:\"grid\",vgProp:\"strokeDash\"},gridDashOffset:{part:\"grid\",vgProp:\"strokeDashOffset\"},gridOpacity:{part:\"grid\",vgProp:\"opacity\"},gridWidth:{part:\"grid\",vgProp:\"strokeWidth\"},tickColor:{part:\"ticks\",vgProp:\"stroke\"},tickDash:{part:\"ticks\",vgProp:\"strokeDash\"},tickDashOffset:{part:\"ticks\",vgProp:\"strokeDashOffset\"},tickOpacity:{part:\"ticks\",vgProp:\"opacity\"},tickSize:null,tickWidth:{part:\"ticks\",vgProp:\"strokeWidth\"}},AXIS_PARTS=[\"domain\",\"grid\",\"labels\",\"ticks\",\"title\"],\nAXIS_PROPERTY_TYPE={grid:\"grid\",gridCap:\"grid\",gridColor:\"grid\",gridDash:\"grid\",gridDashOffset:\"grid\",gridOpacity:\"grid\",gridScale:\"grid\",gridWidth:\"grid\",orient:\"main\",bandPosition:\"both\",aria:\"main\",description:\"main\",domain:\"main\",domainCap:\"main\",domainColor:\"main\",domainDash:\"main\",domainDashOffset:\"main\",domainOpacity:\"main\",domainWidth:\"main\",format:\"main\",formatType:\"main\",labelAlign:\"main\",labelAngle:\"main\",labelBaseline:\"main\",labelBound:\"main\",labelColor:\"main\",labelFlush:\"main\",labelFlushOffset:\"main\",\nlabelFont:\"main\",labelFontSize:\"main\",labelFontStyle:\"main\",labelFontWeight:\"main\",labelLimit:\"main\",labelLineHeight:\"main\",labelOffset:\"main\",labelOpacity:\"main\",labelOverlap:\"main\",labelPadding:\"main\",labels:\"main\",labelSeparation:\"main\",maxExtent:\"main\",minExtent:\"main\",offset:\"both\",position:\"main\",tickCap:\"main\",tickColor:\"main\",tickDash:\"main\",tickDashOffset:\"main\",tickMinStep:\"main\",tickOffset:\"both\",tickOpacity:\"main\",tickRound:\"both\",ticks:\"main\",tickSize:\"main\",tickWidth:\"both\",title:\"main\",\ntitleAlign:\"main\",titleAnchor:\"main\",titleAngle:\"main\",titleBaseline:\"main\",titleColor:\"main\",titleFont:\"main\",titleFontSize:\"main\",titleFontStyle:\"main\",titleFontWeight:\"main\",titleLimit:\"main\",titleLineHeight:\"main\",titleOpacity:\"main\",titlePadding:\"main\",titleX:\"main\",titleY:\"main\",encode:\"both\",scale:\"both\",tickBand:\"both\",tickCount:\"both\",tickExtra:\"both\",translate:\"both\",values:\"both\",zindex:\"both\"},COMMON_AXIS_PROPERTIES_INDEX={orient:1,aria:1,bandPosition:1,description:1,domain:1,domainCap:1,\ndomainColor:1,domainDash:1,domainDashOffset:1,domainOpacity:1,domainWidth:1,format:1,formatType:1,grid:1,gridCap:1,gridColor:1,gridDash:1,gridDashOffset:1,gridOpacity:1,gridWidth:1,labelAlign:1,labelAngle:1,labelBaseline:1,labelBound:1,labelColor:1,labelFlush:1,labelFlushOffset:1,labelFont:1,labelFontSize:1,labelFontStyle:1,labelFontWeight:1,labelLimit:1,labelLineHeight:1,labelOffset:1,labelOpacity:1,labelOverlap:1,labelPadding:1,labels:1,labelSeparation:1,maxExtent:1,minExtent:1,offset:1,position:1,\ntickBand:1,tickCap:1,tickColor:1,tickCount:1,tickDash:1,tickDashOffset:1,tickExtra:1,tickMinStep:1,tickOffset:1,tickOpacity:1,tickRound:1,ticks:1,tickSize:1,tickWidth:1,title:1,titleAlign:1,titleAnchor:1,titleAngle:1,titleBaseline:1,titleColor:1,titleFont:1,titleFontSize:1,titleFontStyle:1,titleFontWeight:1,titleLimit:1,titleLineHeight:1,titleOpacity:1,titlePadding:1,titleX:1,titleY:1,translate:1,values:1,zindex:1},AXIS_PROPERTIES_INDEX=Object.assign({},COMMON_AXIS_PROPERTIES_INDEX,{style:1,labelExpr:1,\nencoding:1}),AXIS_CONFIGS=keys$jscomp$0({axis:1,axisBand:1,axisBottom:1,axisDiscrete:1,axisLeft:1,axisPoint:1,axisQuantitative:1,axisRight:1,axisTemporal:1,axisTop:1,axisX:1,axisXBand:1,axisXDiscrete:1,axisXPoint:1,axisXQuantitative:1,axisXTemporal:1,axisY:1,axisYBand:1,axisYDiscrete:1,axisYPoint:1,axisYQuantitative:1,axisYTemporal:1}),AGGREGATE_OP_INDEX={argmax:1,argmin:1,average:1,count:1,distinct:1,product:1,max:1,mean:1,median:1,min:1,missing:1,q1:1,q3:1,ci0:1,ci1:1,stderr:1,stdev:1,stdevp:1,\nsum:1,valid:1,values:1,variance:1,variancep:1},MULTIDOMAIN_SORT_OP_INDEX={count:1,min:1,max:1},COUNTING_OPS=[\"count\",\"valid\",\"missing\",\"distinct\"],SUM_OPS=[\"count\",\"sum\",\"distinct\",\"valid\",\"missing\"],SHARED_DOMAIN_OP_INDEX=toSet(\"mean average median q1 q3 min max\".split(\" \")),POLAR_POSITION_CHANNEL_INDEX={theta:1,theta2:1,radius:1,radius2:1},GEO_POSIITON_CHANNEL_INDEX={longitude:1,longitude2:1,latitude:1,latitude2:1},GEOPOSITION_CHANNELS=keys$jscomp$0(GEO_POSIITON_CHANNEL_INDEX),UNIT_CHANNEL_INDEX=\nObject.assign({},{x:1,y:1,x2:1,y2:1},POLAR_POSITION_CHANNEL_INDEX,GEO_POSIITON_CHANNEL_INDEX,{color:1,fill:1,stroke:1,opacity:1,fillOpacity:1,strokeOpacity:1,strokeWidth:1,strokeDash:1,size:1,angle:1,shape:1,order:1,text:1,detail:1,key:1,tooltip:1,href:1,url:1,description:1}),FACET_CHANNEL_INDEX={row:1,column:1,facet:1},FACET_CHANNELS=keys$jscomp$0(FACET_CHANNEL_INDEX),CHANNEL_INDEX=Object.assign({},UNIT_CHANNEL_INDEX,FACET_CHANNEL_INDEX),CHANNELS=keys$jscomp$0(CHANNEL_INDEX);var $jscomp$destructuring$var56=\nObject.assign({},CHANNEL_INDEX),$jscomp$destructuring$var57=(delete $jscomp$destructuring$var56.order,delete $jscomp$destructuring$var56.detail,delete $jscomp$destructuring$var56.tooltip,$jscomp$destructuring$var56),$jscomp$destructuring$var58=Object.assign({},$jscomp$destructuring$var57);const SINGLE_DEF_UNIT_CHANNEL_INDEX=(delete $jscomp$destructuring$var58.row,delete $jscomp$destructuring$var58.column,delete $jscomp$destructuring$var58.facet,$jscomp$destructuring$var58),SECONDARY_RANGE_CHANNEL=\n\"x2 y2 latitude2 longitude2 theta2 radius2\".split(\" \");var $jscomp$destructuring$var60=Object.assign({},UNIT_CHANNEL_INDEX);const NONPOSITION_CHANNEL_INDEX=(delete $jscomp$destructuring$var60.x,delete $jscomp$destructuring$var60.y,delete $jscomp$destructuring$var60.x2,delete $jscomp$destructuring$var60.y2,delete $jscomp$destructuring$var60.latitude,delete $jscomp$destructuring$var60.longitude,delete $jscomp$destructuring$var60.latitude2,delete $jscomp$destructuring$var60.longitude2,delete $jscomp$destructuring$var60.theta,\ndelete $jscomp$destructuring$var60.theta2,delete $jscomp$destructuring$var60.radius,delete $jscomp$destructuring$var60.radius2,$jscomp$destructuring$var60),NONPOSITION_CHANNELS=keys$jscomp$0(NONPOSITION_CHANNEL_INDEX),POSITION_SCALE_CHANNEL_INDEX={x:1,y:1},POSITION_SCALE_CHANNELS=keys$jscomp$0(POSITION_SCALE_CHANNEL_INDEX),POLAR_POSITION_SCALE_CHANNEL_INDEX={theta:1,radius:1},POLAR_POSITION_SCALE_CHANNELS=keys$jscomp$0(POLAR_POSITION_SCALE_CHANNEL_INDEX);var $jscomp$destructuring$var62=Object.assign({},\nNONPOSITION_CHANNEL_INDEX);const NONPOSITION_SCALE_CHANNEL_INDEX=(delete $jscomp$destructuring$var62.text,delete $jscomp$destructuring$var62.tooltip,delete $jscomp$destructuring$var62.href,delete $jscomp$destructuring$var62.url,delete $jscomp$destructuring$var62.description,delete $jscomp$destructuring$var62.detail,delete $jscomp$destructuring$var62.key,delete $jscomp$destructuring$var62.order,$jscomp$destructuring$var62),NONPOSITION_SCALE_CHANNELS=keys$jscomp$0(NONPOSITION_SCALE_CHANNEL_INDEX),SCALE_CHANNEL_INDEX=\nObject.assign({},POSITION_SCALE_CHANNEL_INDEX,POLAR_POSITION_SCALE_CHANNEL_INDEX,NONPOSITION_SCALE_CHANNEL_INDEX),SCALE_CHANNELS=keys$jscomp$0(SCALE_CHANNEL_INDEX),ALL_MARKS={arc:\"always\",area:\"always\",bar:\"always\",circle:\"always\",geoshape:\"always\",image:\"always\",line:\"always\",rule:\"always\",point:\"always\",rect:\"always\",square:\"always\",trail:\"always\",text:\"always\",tick:\"always\"};var $jscomp$destructuring$var64=Object.assign({},ALL_MARKS);const ALL_MARKS_EXCEPT_GEOSHAPE=(delete $jscomp$destructuring$var64.geoshape,\n$jscomp$destructuring$var64),main$jscomp$0=function(_$jscomp$0,method){let level=_$jscomp$0||0;return{level(_){return arguments.length?(level=+_,this):level},error(){1<=level&&log(method||\"error\",\"ERROR\",arguments);return this},warn(){2<=level&&log(method||\"warn\",\"WARN\",arguments);return this},info(){3<=level&&log(method||\"log\",\"INFO\",arguments);return this},debug(){4<=level&&log(method||\"log\",\"DEBUG\",arguments);return this}}}(2);let current=main$jscomp$0;const MONTHS=\"january february march april may june july august september october november december\".split(\" \"),\nSHORT_MONTHS=MONTHS.map(m=>m.substr(0,3)),DAYS=\"sunday monday tuesday wednesday thursday friday saturday\".split(\" \"),SHORT_DAYS=DAYS.map(d=>d.substr(0,3)),LOCAL_SINGLE_TIMEUNIT_INDEX={year:1,quarter:1,month:1,week:1,day:1,dayofyear:1,date:1,hours:1,minutes:1,seconds:1,milliseconds:1},TIMEUNIT_PARTS=keys$jscomp$0(LOCAL_SINGLE_TIMEUNIT_INDEX),VEGALITE_TIMEFORMAT={\"year-month\":\"%b %Y \",\"year-month-date\":\"%b %d, %Y \"},VG_MARK_CONFIGS=keys$jscomp$0({aria:1,description:1,ariaRole:1,ariaRoleDescription:1,\nblend:1,opacity:1,fill:1,fillOpacity:1,stroke:1,strokeCap:1,strokeWidth:1,strokeOpacity:1,strokeDash:1,strokeDashOffset:1,strokeJoin:1,strokeOffset:1,strokeMiterLimit:1,startAngle:1,endAngle:1,padAngle:1,innerRadius:1,outerRadius:1,size:1,shape:1,interpolate:1,tension:1,orient:1,align:1,baseline:1,text:1,dir:1,dx:1,dy:1,ellipsis:1,limit:1,radius:1,theta:1,angle:1,font:1,fontSize:1,fontWeight:1,fontStyle:1,lineBreak:1,lineHeight:1,cursor:1,href:1,tooltip:1,cornerRadius:1,cornerRadiusTopLeft:1,cornerRadiusTopRight:1,\ncornerRadiusBottomLeft:1,cornerRadiusBottomRight:1,aspect:1,width:1,height:1,url:1,smooth:1}),VG_MARK_INDEX={arc:1,area:1,group:1,image:1,line:1,path:1,rect:1,rule:1,shape:1,symbol:1,text:1,trail:1},VG_CORNERRADIUS_CHANNELS=[\"cornerRadius\",\"cornerRadiusTopLeft\",\"cornerRadiusTopRight\",\"cornerRadiusBottomLeft\",\"cornerRadiusBottomRight\"],ScaleType={LINEAR:\"linear\",LOG:\"log\",POW:\"pow\",SQRT:\"sqrt\",SYMLOG:\"symlog\",IDENTITY:\"identity\",SEQUENTIAL:\"sequential\",TIME:\"time\",UTC:\"utc\",QUANTILE:\"quantile\",QUANTIZE:\"quantize\",\nTHRESHOLD:\"threshold\",BIN_ORDINAL:\"bin-ordinal\",ORDINAL:\"ordinal\",POINT:\"point\",BAND:\"band\"},SCALE_CATEGORY_INDEX={linear:\"numeric\",log:\"numeric\",pow:\"numeric\",sqrt:\"numeric\",symlog:\"numeric\",identity:\"numeric\",sequential:\"numeric\",time:\"time\",utc:\"time\",ordinal:\"ordinal\",\"bin-ordinal\":\"bin-ordinal\",point:\"ordinal-position\",band:\"ordinal-position\",quantile:\"discretizing\",quantize:\"discretizing\",threshold:\"discretizing\"},SCALE_PRECEDENCE_INDEX={linear:0,log:1,pow:1,sqrt:1,symlog:1,identity:1,sequential:1,\ntime:0,utc:0,point:10,band:11,ordinal:0,\"bin-ordinal\":0,quantile:0,quantize:0,threshold:0},CONTINUOUS_TO_CONTINUOUS_SCALES=\"linear log pow sqrt symlog time utc\".split(\" \"),CONTINUOUS_TO_CONTINUOUS_INDEX=toSet(CONTINUOUS_TO_CONTINUOUS_SCALES),QUANTITATIVE_SCALES_INDEX=toSet([\"linear\",\"log\",\"pow\",\"sqrt\",\"symlog\"]),CONTINUOUS_TO_DISCRETE_INDEX=toSet([\"quantile\",\"quantize\",\"threshold\"]),CONTINUOUS_DOMAIN_SCALES=CONTINUOUS_TO_CONTINUOUS_SCALES.concat([\"quantile\",\"quantize\",\"threshold\",\"sequential\",\"identity\"]),\nCONTINUOUS_DOMAIN_INDEX=toSet(CONTINUOUS_DOMAIN_SCALES),DISCRETE_DOMAIN_INDEX=toSet([\"ordinal\",\"bin-ordinal\",\"point\",\"band\"]);var $jscomp$destructuring$var69=Object.assign({},{type:1,domain:1,domainMax:1,domainMin:1,domainMid:1,align:1,range:1,rangeMax:1,rangeMin:1,scheme:1,bins:1,reverse:1,round:1,clamp:1,nice:1,base:1,exponent:1,constant:1,interpolate:1,zero:1,padding:1,paddingInner:1,paddingOuter:1});const NON_TYPE_DOMAIN_RANGE_VEGA_SCALE_PROPERTY_INDEX=(delete $jscomp$destructuring$var69.type,\ndelete $jscomp$destructuring$var69.domain,delete $jscomp$destructuring$var69.range,delete $jscomp$destructuring$var69.rangeMax,delete $jscomp$destructuring$var69.rangeMin,delete $jscomp$destructuring$var69.scheme,$jscomp$destructuring$var69),NON_TYPE_DOMAIN_RANGE_VEGA_SCALE_PROPERTIES=keys$jscomp$0(NON_TYPE_DOMAIN_RANGE_VEGA_SCALE_PROPERTY_INDEX),Mark={arc:\"arc\",area:\"area\",bar:\"bar\",image:\"image\",line:\"line\",point:\"point\",rect:\"rect\",rule:\"rule\",text:\"text\",tick:\"tick\",trail:\"trail\",circle:\"circle\",\nsquare:\"square\",geoshape:\"geoshape\"},ARC=Mark.arc,AREA=Mark.area,BAR=Mark.bar,IMAGE=Mark.image,LINE=Mark.line,POINT=Mark.point,RECT=Mark.rect,RULE=Mark.rule,TEXT$1=Mark.text,TICK=Mark.tick,TRAIL=Mark.trail,CIRCLE=Mark.circle,SQUARE=Mark.square,GEOSHAPE=Mark.geoshape,PRIMITIVE_MARKS=keys$jscomp$0(Mark);toSet(PRIMITIVE_MARKS);const FILL_STROKE_CONFIG=\"stroke strokeWidth strokeDash strokeDashOffset strokeOpacity strokeJoin strokeMiterLimit fill fillOpacity\".split(\" \"),VL_ONLY_MARK_CONFIG_PROPERTIES=\nkeys$jscomp$0({color:1,filled:1,invalid:1,order:1,radius2:1,theta2:1,timeUnitBand:1,timeUnitBandPosition:1}),MARK_CONFIGS=keys$jscomp$0({mark:1,arc:1,area:1,bar:1,circle:1,image:1,line:1,point:1,rect:1,rule:1,square:1,text:1,tick:1,trail:1,geoshape:1}),BAR_CORNER_RADIUS_INDEX={horizontal:[\"cornerRadiusTopRight\",\"cornerRadiusBottomRight\"],vertical:[\"cornerRadiusTopLeft\",\"cornerRadiusTopRight\"]},SORT_BY_CHANNEL_INDEX={x:1,y:1,color:1,fill:1,stroke:1,strokeWidth:1,size:1,shape:1,fillOpacity:1,strokeOpacity:1,\nopacity:1,text:1},defaultTitleFormatter=(fieldDef,config)=>{switch(config.fieldTitle){case \"plain\":return fieldDef.field;case \"functional\":{const {aggregate,bin,timeUnit,field}=fieldDef;isArgmaxDef(aggregate)?fieldDef=\"\".concat(field,\" for argmax(\").concat(aggregate.argmax,\")\"):isArgminDef(aggregate)?fieldDef=\"\".concat(field,\" for argmin(\").concat(aggregate.argmin,\")\"):(fieldDef=normalizeTimeUnit(timeUnit),fieldDef=(fieldDef=aggregate||(null===fieldDef||void 0===fieldDef?void 0:fieldDef.unit)||(null===\nfieldDef||void 0===fieldDef?void 0:fieldDef.maxbins)&&\"timeunit\"||isBinning(bin)&&\"bin\")?fieldDef.toUpperCase()+\"(\"+field+\")\":field)}return fieldDef;default:return verbalTitleFormatter(fieldDef,config)}};let titleFormatter=defaultTitleFormatter;const COMPATIBLE={compatible:!0};class CompositeMarkNormalizer{constructor(name,run){this.name=name;this.run=run}hasMatchingType(spec){return isUnitSpec(spec)?(spec=spec.mark,(isMarkDef(spec)?spec.type:spec)===this.name):!1}}const boxPlotNormalizer=new CompositeMarkNormalizer(\"boxplot\",\nnormalizeBoxPlot),errorBarNormalizer=new CompositeMarkNormalizer(\"errorbar\",normalizeErrorBar),errorBandNormalizer=new CompositeMarkNormalizer(\"errorband\",normalizeErrorBand),compositeMarkRegistry={};add$jscomp$0(\"boxplot\",normalizeBoxPlot,[\"box\",\"median\",\"outliers\",\"rule\",\"ticks\"]);add$jscomp$0(\"errorbar\",normalizeErrorBar,[\"ticks\",\"rule\"]);add$jscomp$0(\"errorband\",normalizeErrorBand,[\"band\",\"borders\"]);const VL_ONLY_LEGEND_CONFIG=[\"gradientHorizontalMaxLength\",\"gradientHorizontalMinLength\",\"gradientVerticalMaxLength\",\n\"gradientVerticalMinLength\",\"unselectedOpacity\"],HEADER_TITLE_PROPERTIES_MAP={titleAlign:\"align\",titleAnchor:\"anchor\",titleAngle:\"angle\",titleBaseline:\"baseline\",titleColor:\"color\",titleFont:\"font\",titleFontSize:\"fontSize\",titleFontStyle:\"fontStyle\",titleFontWeight:\"fontWeight\",titleLimit:\"limit\",titleLineHeight:\"lineHeight\",titleOrient:\"orient\",titlePadding:\"offset\"},HEADER_LABEL_PROPERTIES_MAP={labelAlign:\"align\",labelAnchor:\"anchor\",labelAngle:\"angle\",labelBaseline:\"baseline\",labelColor:\"color\",\nlabelFont:\"font\",labelFontSize:\"fontSize\",labelFontStyle:\"fontStyle\",labelFontWeight:\"fontWeight\",labelLimit:\"limit\",labelLineHeight:\"lineHeight\",labelOrient:\"orient\",labelPadding:\"offset\"},HEADER_TITLE_PROPERTIES=keys$jscomp$0(HEADER_TITLE_PROPERTIES_MAP),HEADER_LABEL_PROPERTIES=keys$jscomp$0(HEADER_LABEL_PROPERTIES_MAP),HEADER_CONFIGS=keys$jscomp$0({header:1,headerRow:1,headerColumn:1,headerFacet:1}),LEGEND_SCALE_CHANNELS=\"size shape fill stroke strokeDash strokeWidth opacity\".split(\" \"),TOP_LEVEL_PROPERTIES=\n[\"background\",\"padding\"],COMPOSITION_LAYOUT_PROPERTIES=keys$jscomp$0({align:1,bounds:1,center:1,columns:1,spacing:1}),defaultConfig$1={background:\"white\",padding:5,timeFormat:\"%b %d, %Y\",countTitle:\"Count of Records\",view:{continuousWidth:200,continuousHeight:200,step:20},mark:{color:\"#4c78a8\",invalid:\"filter\",timeUnitBand:1},arc:{},area:{},bar:{binSpacing:1,continuousBandSize:5,timeUnitBandPosition:.5},circle:{},geoshape:{},image:{},line:{},point:{},rect:{binSpacing:0,continuousBandSize:5,timeUnitBandPosition:.5},\nrule:{color:\"black\"},square:{},text:{color:\"black\"},tick:{thickness:1},trail:{},boxplot:{size:14,extent:1.5,box:{},median:{color:\"white\"},outliers:{},rule:{},ticks:null},errorbar:{center:\"mean\",rule:!0,ticks:!1},errorband:{band:{opacity:.3},borders:!1},scale:{pointPadding:.5,barBandPaddingInner:.1,rectBandPaddingInner:0,minBandSize:2,minFontSize:8,maxFontSize:40,minOpacity:.3,maxOpacity:.8,minSize:9,minStrokeWidth:1,maxStrokeWidth:4,quantileCount:4,quantizeCount:4},projection:{},legend:{gradientHorizontalMaxLength:200,\ngradientHorizontalMinLength:100,gradientVerticalMaxLength:200,gradientVerticalMinLength:64,unselectedOpacity:.35},header:{titlePadding:10,labelPadding:10},headerColumn:{},headerRow:{},headerFacet:{},selection:{single:{on:\"click\",fields:[\"_vgsid_\"],resolve:\"global\",empty:\"all\",clear:\"dblclick\"},multi:{on:\"click\",fields:[\"_vgsid_\"],toggle:\"event.shiftKey\",resolve:\"global\",empty:\"all\",clear:\"dblclick\"},interval:{on:\"[mousedown, window:mouseup] \\x3e window:mousemove!\",encodings:[\"x\",\"y\"],translate:\"[mousedown, window:mouseup] \\x3e window:mousemove!\",\nzoom:\"wheel!\",mark:{fill:\"#333\",fillOpacity:.125,stroke:\"white\"},resolve:\"global\",clear:\"dblclick\"}},style:{},title:{},facet:{spacing:20},concat:{spacing:20}},tab10=\"#4c78a8 #f58518 #e45756 #72b7b2 #54a24b #eeca3b #b279a2 #ff9da6 #9d755d #bab0ac\".split(\" \"),DEFAULT_FONT_SIZE={text:11,guideLabel:10,guideTitle:11,groupTitle:13,groupSubtitle:12},DEFAULT_COLOR={blue:tab10[0],orange:tab10[1],red:tab10[2],teal:tab10[3],green:tab10[4],yellow:tab10[5],purple:tab10[6],pink:tab10[7],brown:tab10[8],gray0:\"#000\",\ngray1:\"#111\",gray2:\"#222\",gray3:\"#333\",gray4:\"#444\",gray5:\"#555\",gray6:\"#666\",gray7:\"#777\",gray8:\"#888\",gray9:\"#999\",gray10:\"#aaa\",gray11:\"#bbb\",gray12:\"#ccc\",gray13:\"#ddd\",gray14:\"#eee\",gray15:\"#fff\"},configPropsWithExpr=[...MARK_CONFIGS,...AXIS_CONFIGS,...HEADER_CONFIGS,\"background\",\"padding\",\"legend\",\"lineBreak\",\"scale\",\"style\",\"title\",\"view\"],MARK_STYLES=[\"view\",...PRIMITIVE_MARKS],VL_ONLY_CONFIG_PROPERTIES=\"color fontSize background padding facet concat numberFormat timeFormat countTitle header axisQuantitative axisTemporal axisDiscrete axisPoint axisXBand axisXPoint axisXDiscrete axisXQuantitative axisXTemporal axisYBand axisYPoint axisYDiscrete axisYQuantitative axisYTemporal scale selection overlay\".split(\" \"),\nVL_ONLY_ALL_MARK_SPECIFIC_CONFIG_PROPERTY_INDEX=Object.assign({},{view:[\"continuousWidth\",\"continuousHeight\",\"discreteWidth\",\"discreteHeight\",\"step\"]},{area:[\"line\",\"point\"],bar:[\"binSpacing\",\"continuousBandSize\",\"discreteBandSize\"],rect:[\"binSpacing\",\"continuousBandSize\",\"discreteBandSize\"],line:[\"point\"],tick:[\"bandSize\",\"thickness\"]});class SpecMapper{map(spec,params){return\"facet\"in spec?this.mapFacet(spec,params):\"repeat\"in spec?this.mapRepeat(spec,params):\"hconcat\"in spec?this.mapHConcat(spec,\nparams):\"vconcat\"in spec?this.mapVConcat(spec,params):\"concat\"in spec?this.mapConcat(spec,params):this.mapLayerOrUnit(spec,params)}mapLayerOrUnit(spec,params){if(\"layer\"in spec)return this.mapLayer(spec,params);if(isUnitSpec(spec))return this.mapUnit(spec,params);throw Error(invalidSpec(spec));}mapLayer(spec,params){return Object.assign({},spec,{layer:spec.layer.map(subspec=>this.mapLayerOrUnit(subspec,params))})}mapHConcat(spec,params){return Object.assign({},spec,{hconcat:spec.hconcat.map(subspec=>\nthis.map(subspec,params))})}mapVConcat(spec,params){return Object.assign({},spec,{vconcat:spec.vconcat.map(subspec=>this.map(subspec,params))})}mapConcat(spec,params){var $jscomp$destructuring$var127=Object.assign({},spec);spec=spec.concat;$jscomp$destructuring$var127=(delete $jscomp$destructuring$var127.concat,$jscomp$destructuring$var127);return Object.assign({},$jscomp$destructuring$var127,{concat:spec.map(subspec=>this.map(subspec,params))})}mapFacet(spec,params){return Object.assign({},spec,\n{spec:this.map(spec.spec,params)})}mapRepeat(spec,params){return Object.assign({},spec,{spec:this.map(spec.spec,params)})}}const STACK_OFFSET_INDEX={zero:1,center:1,normalize:1},STACKABLE_MARKS=new Set([ARC,BAR,AREA,RULE,POINT,CIRCLE,SQUARE,LINE,TEXT$1,TICK]),STACK_BY_DEFAULT_MARKS=new Set([BAR,AREA,ARC]);class PathOverlayNormalizer{constructor(){_defineProperty(this,\"name\",\"path-overlay\")}hasMatchingType(spec,config){if(isUnitSpec(spec)){const {mark,encoding}=spec;spec=isMarkDef(mark)?mark:{type:mark};\nswitch(spec.type){case \"line\":case \"rule\":case \"trail\":return!!getPointOverlay(spec,config[spec.type],encoding);case \"area\":return!!getPointOverlay(spec,config[spec.type],encoding)||!!getLineOverlay(spec,config[spec.type])}}return!1}run(spec,params,normalize){var {config}=params,$jscomp$destructuring$var131=Object.assign({},spec),selection=spec.selection,projection=spec.projection,mark$jscomp$0=spec.mark;spec=spec.encoding;$jscomp$destructuring$var131=(delete $jscomp$destructuring$var131.selection,\ndelete $jscomp$destructuring$var131.projection,delete $jscomp$destructuring$var131.mark,delete $jscomp$destructuring$var131.encoding,$jscomp$destructuring$var131);spec=normalizeEncoding(spec,config);mark$jscomp$0=isMarkDef(mark$jscomp$0)?mark$jscomp$0:{type:mark$jscomp$0};const pointOverlay=getPointOverlay(mark$jscomp$0,config[mark$jscomp$0.type],spec),lineOverlay=\"area\"===mark$jscomp$0.type&&getLineOverlay(mark$jscomp$0,config[mark$jscomp$0.type]);var JSCompiler_temp_const=Object,JSCompiler_temp_const$jscomp$0=\nJSCompiler_temp_const.assign;var JSCompiler_inline_result=Object.assign({},\"area\"===mark$jscomp$0.type&&void 0===mark$jscomp$0.opacity&&void 0===mark$jscomp$0.fillOpacity?{opacity:.7}:{},mark$jscomp$0);JSCompiler_inline_result=Object.assign({},JSCompiler_inline_result);JSCompiler_inline_result=(delete JSCompiler_inline_result.point,delete JSCompiler_inline_result.line,JSCompiler_inline_result);JSCompiler_inline_result=1<keys$jscomp$0(JSCompiler_inline_result).length?JSCompiler_inline_result:JSCompiler_inline_result.type;\nselection=[JSCompiler_temp_const$jscomp$0.call(JSCompiler_temp_const,{},selection?{selection}:{},{mark:JSCompiler_inline_result,encoding:omit(spec,[\"shape\"])})];JSCompiler_temp_const=stack$jscomp$1(mark$jscomp$0,spec);JSCompiler_temp_const$jscomp$0=spec;if(JSCompiler_temp_const){const {fieldChannel:stackFieldChannel,offset}=JSCompiler_temp_const;JSCompiler_temp_const$jscomp$0=Object.assign({},spec,{[stackFieldChannel]:Object.assign({},spec[stackFieldChannel],offset?{stack:offset}:{})})}lineOverlay&&\nselection.push(Object.assign({},projection?{projection}:{},{mark:Object.assign({},{type:\"line\"},pick(mark$jscomp$0,[\"clip\",\"interpolate\",\"tension\",\"tooltip\"]),lineOverlay),encoding:JSCompiler_temp_const$jscomp$0}));pointOverlay&&selection.push(Object.assign({},projection?{projection}:{},{mark:Object.assign({},{type:\"point\",opacity:1,filled:!0},pick(mark$jscomp$0,[\"clip\",\"tooltip\"]),pointOverlay),encoding:JSCompiler_temp_const$jscomp$0}));projection=Object.assign({},$jscomp$destructuring$var131,{layer:selection});\n$jscomp$destructuring$var131=Object;selection=$jscomp$destructuring$var131.assign;for(const mark of[\"line\",\"area\",\"rule\",\"trail\"])config[mark]&&(config=Object.assign({},config,{[mark]:omit(config[mark],[\"point\",\"line\"])}));return normalize(projection,selection.call($jscomp$destructuring$var131,{},params,{config}))}}class RangeStepNormalizer{constructor(){_defineProperty(this,\"name\",\"RangeStep\")}hasMatchingType(spec){if(isUnitSpec(spec)&&spec.encoding)for(const channel of POSITION_SCALE_CHANNELS){const def=\nspec.encoding[channel];if(def&&isFieldOrDatumDef(def)){var _def$scale;if(null===def||void 0===def?0:null===(_def$scale=def.scale)||void 0===_def$scale?0:_def$scale.rangeStep)return!0}}return!1}run(spec){const sizeMixins={};let encoding=Object.assign({},spec.encoding);for(const channel of POSITION_SCALE_CHANNELS){const sizeType=getSizeChannel(channel);var def=encoding[channel];if(def&&isFieldOrDatumDef(def)){var _def$scale2;if(null===def||void 0===def?0:null===(_def$scale2=def.scale)||void 0===_def$scale2?\n0:_def$scale2.rangeStep){var $jscomp$destructuring$var133=Object.assign({},def);def=def.scale;$jscomp$destructuring$var133=(delete $jscomp$destructuring$var133.scale,$jscomp$destructuring$var133);var $jscomp$destructuring$var135=Object.assign({},def);$jscomp$destructuring$var135=(delete $jscomp$destructuring$var135.rangeStep,$jscomp$destructuring$var135);sizeMixins[sizeType]={step:def.rangeStep};warn('Scale\\'s \"rangeStep\" is deprecated and will be removed in Vega-Lite 5.0. Please use \"width\"/\"height\": {\"step\": ...} instead. See https://vega.github.io/vega-lite/docs/size.html.');\nencoding=Object.assign({},encoding,{[channel]:Object.assign({},$jscomp$destructuring$var133,isEmpty($jscomp$destructuring$var135)?{}:{scale:$jscomp$destructuring$var135})})}}}return Object.assign({},sizeMixins,spec,{encoding})}}class RuleForRangedLineNormalizer{constructor(){_defineProperty(this,\"name\",\"RuleForRangedLine\")}hasMatchingType(spec){if(isUnitSpec(spec)){const {encoding,mark}=spec;if(\"line\"===mark)for(const channel of SECONDARY_RANGE_CHANNEL)if(spec=getMainRangeChannel(channel),spec=encoding[spec],\nencoding[channel]&&(isFieldDef(spec)&&!isBinned(spec.bin)||isDatumDef(spec)))return!0}return!1}run(spec,params,normalize){var {encoding}=spec,hasX2=!!encoding.x2;encoding=\"Line mark is for continuous lines and thus cannot be used with \".concat(hasX2&&encoding.y2?\"x2 and y2\":hasX2?\"x2\":\"y2\",\". We will use the rule mark (line segments) instead.\");warn(encoding);return normalize(Object.assign({},spec,{mark:\"rule\"}),params)}}class CoreNormalizer extends SpecMapper{constructor(...args){super(...args);\n_defineProperty(this,\"nonFacetUnitNormalizers\",[boxPlotNormalizer,errorBarNormalizer,errorBandNormalizer,new PathOverlayNormalizer,new RuleForRangedLineNormalizer,new RangeStepNormalizer])}map(spec,params){if(isUnitSpec(spec)){const hasRow=channelHasField(spec.encoding,\"row\"),hasColumn=channelHasField(spec.encoding,\"column\"),hasFacet=channelHasField(spec.encoding,\"facet\");if(hasRow||hasColumn||hasFacet)return this.mapFacetedUnit(spec,params)}return super.map(spec,params)}mapUnit(spec,params){const {parentEncoding,\nparentProjection}=params;var encoding=replaceRepeaterInEncoding(spec.encoding,params.repeater);spec=Object.assign({},spec,encoding?{encoding}:{});if(parentEncoding||parentProjection)return this.mapUnitWithParentEncodingOrProjection(spec,params);encoding=this.mapLayerOrUnit.bind(this);for(const unitNormalizer of this.nonFacetUnitNormalizers)if(unitNormalizer.hasMatchingType(spec,params.config))return unitNormalizer.run(spec,params,encoding);return spec}mapRepeat(spec,params){return!isArray(spec.repeat)&&\nspec.repeat.layer?this.mapLayerRepeat(spec,params):this.mapNonLayerRepeat(spec,params)}mapLayerRepeat(spec,params){var $jscomp$destructuring$var139=Object.assign({},spec);const repeat=spec.repeat,childSpec=spec.spec;$jscomp$destructuring$var139=(delete $jscomp$destructuring$var139.repeat,delete $jscomp$destructuring$var139.spec,$jscomp$destructuring$var139);const {row,column,layer}=repeat,{repeater={},repeaterPrefix=\"\"}=params;return row||column?this.mapRepeat(Object.assign({},spec,{repeat:Object.assign({},\nrow?{row}:{},column?{column}:{}),spec:{repeat:{layer},spec:childSpec}}),params):Object.assign({},$jscomp$destructuring$var139,{layer:layer.map(layerValue=>{var childRepeater=Object.assign({},repeater,{layer:layerValue});layerValue=(childSpec.name||\"\")+repeaterPrefix+\"child__layer_\".concat(varName(layerValue));childRepeater=this.mapLayerOrUnit(childSpec,Object.assign({},params,{repeater:childRepeater,repeaterPrefix:layerValue}));childRepeater.name=layerValue;return childRepeater})})}mapNonLayerRepeat(spec,\nparams){var _childSpec$data,$jscomp$destructuring$var140=spec,$jscomp$destructuring$var141=Object.assign({},$jscomp$destructuring$var140);const repeat=$jscomp$destructuring$var140.repeat,childSpec=$jscomp$destructuring$var140.spec;$jscomp$destructuring$var140=$jscomp$destructuring$var140.data;$jscomp$destructuring$var141=(delete $jscomp$destructuring$var141.repeat,delete $jscomp$destructuring$var141.spec,delete $jscomp$destructuring$var141.data,$jscomp$destructuring$var141);!isArray(repeat)&&spec.columns&&\n(spec=omit(spec,[\"columns\"]),warn(columnsNotSupportByRowCol(\"repeat\")));const concat=[],{repeater={},repeaterPrefix=\"\"}=params,row=!isArray(repeat)&&repeat.row||[repeater?repeater.row:null],column=!isArray(repeat)&&repeat.column||[repeater?repeater.column:null];var repeatValues=isArray(repeat)&&repeat||[repeater?repeater.repeat:null];for(const repeatValue of repeatValues)for(const rowValue of row)for(const columnValue of column){var childRepeater={repeat:repeatValue,row:rowValue,column:columnValue,\nlayer:repeater.layer};repeatValues=(childSpec.name||\"\")+repeaterPrefix+\"child__\"+(isArray(repeat)?\"\".concat(varName(repeatValue)):(repeat.row?\"row_\".concat(varName(rowValue)):\"\")+(repeat.column?\"column_\".concat(varName(columnValue)):\"\"));childRepeater=this.map(childSpec,Object.assign({},params,{repeater:childRepeater,repeaterPrefix:repeatValues}));childRepeater.name=repeatValues;concat.push(omit(childRepeater,[\"data\"]))}spec=isArray(repeat)?spec.columns:repeat.column?repeat.column.length:1;return Object.assign({},\n{data:null!==(_childSpec$data=childSpec.data)&&void 0!==_childSpec$data?_childSpec$data:$jscomp$destructuring$var140,align:\"all\"},$jscomp$destructuring$var141,{columns:spec,concat})}mapFacet(spec,params){const {facet}=spec;isFacetMapping(facet)&&spec.columns&&(spec=omit(spec,[\"columns\"]),warn(columnsNotSupportByRowCol(\"facet\")));return super.mapFacet(spec,params)}mapUnitWithParentEncodingOrProjection(spec,params){const {encoding,projection}=spec,{parentEncoding,parentProjection,config}=params,mergedProjection=\nmergeProjection({parentProjection,projection});params=mergeEncoding({parentEncoding,encoding:replaceRepeaterInEncoding(encoding,params.repeater)});return this.mapUnit(Object.assign({},spec,mergedProjection?{projection:mergedProjection}:{},params?{encoding:params}:{}),{config})}mapFacetedUnit(spec,params){var $jscomp$destructuring$var142=spec.encoding,$jscomp$destructuring$var143=Object.assign({},$jscomp$destructuring$var142),row=$jscomp$destructuring$var142.row;const column=$jscomp$destructuring$var142.column;\n$jscomp$destructuring$var142=$jscomp$destructuring$var142.facet;const encoding=(delete $jscomp$destructuring$var143.row,delete $jscomp$destructuring$var143.column,delete $jscomp$destructuring$var143.facet,$jscomp$destructuring$var143);var $jscomp$destructuring$var145=Object.assign({},spec);$jscomp$destructuring$var143=spec.mark;const width=spec.width,projection=spec.projection,height=spec.height,view=spec.view;spec=spec.selection;$jscomp$destructuring$var145=(delete $jscomp$destructuring$var145.mark,\ndelete $jscomp$destructuring$var145.width,delete $jscomp$destructuring$var145.projection,delete $jscomp$destructuring$var145.height,delete $jscomp$destructuring$var145.view,delete $jscomp$destructuring$var145.selection,delete $jscomp$destructuring$var145.encoding,$jscomp$destructuring$var145);const {facetMapping,layout}=this.getFacetMappingAndLayout({row,column,facet:$jscomp$destructuring$var142},params);row=replaceRepeaterInEncoding(encoding,params.repeater);return this.mapFacet(Object.assign({},\n$jscomp$destructuring$var145,layout,{facet:facetMapping,spec:Object.assign({},width?{width}:{},height?{height}:{},view?{view}:{},projection?{projection}:{},{mark:$jscomp$destructuring$var143,encoding:row},spec?{selection:spec}:{})}),params)}getFacetMappingAndLayout(facets,params){const {row,column,facet}=facets;if(row||column){facet&&(params=[...(row?[\"row\"]:[]),...(column?[\"column\"]:[])],params=\"Facet encoding dropped as \".concat(params.join(\" and \"),\" \").concat(1<params.length?\"are\":\"is\",\" also specified.\"),\nwarn(params));params={};var layout={};for(var channel of[\"row\",\"column\"]){const def=facets[channel];if(def){var $jscomp$destructuring$var147=Object.assign({},def);$jscomp$destructuring$var147=(delete $jscomp$destructuring$var147.align,delete $jscomp$destructuring$var147.center,delete $jscomp$destructuring$var147.spacing,delete $jscomp$destructuring$var147.columns,$jscomp$destructuring$var147);params[channel]=$jscomp$destructuring$var147;for(var prop of[\"align\",\"center\",\"spacing\"])if(void 0!==def[prop]){var _layout$prop;\nlayout[prop]=null!==(_layout$prop=layout[prop])&&void 0!==_layout$prop?_layout$prop:{};layout[prop][channel]=def[prop]}}}return{facetMapping:params,layout}}layout=Object.assign({},facet);facets=facet.align;_layout$prop=facet.center;channel=facet.spacing;prop=facet.columns;layout=(delete layout.align,delete layout.center,delete layout.spacing,delete layout.columns,layout);params=(params=params.repeater)?isFacetMapping(layout)?replaceRepeaterInMapping(layout,params):replaceRepeaterInFieldDef(layout,\nparams):layout;return{facetMapping:params,layout:Object.assign({},facets?{align:facets}:{},_layout$prop?{center:_layout$prop}:{},channel?{spacing:channel}:{},prop?{columns:prop}:{})}}mapLayer(spec,$jscomp$destructuring$var150){var $jscomp$destructuring$var152=Object.assign({},$jscomp$destructuring$var150),parentEncoding=$jscomp$destructuring$var150.parentEncoding;$jscomp$destructuring$var150=$jscomp$destructuring$var150.parentProjection;$jscomp$destructuring$var152=(delete $jscomp$destructuring$var152.parentEncoding,\ndelete $jscomp$destructuring$var152.parentProjection,$jscomp$destructuring$var152);var $jscomp$destructuring$var154=Object.assign({},spec);const encoding=spec.encoding;spec=spec.projection;$jscomp$destructuring$var154=(delete $jscomp$destructuring$var154.encoding,delete $jscomp$destructuring$var154.projection,$jscomp$destructuring$var154);parentEncoding=Object.assign({},$jscomp$destructuring$var152,{parentEncoding:mergeEncoding({parentEncoding,encoding,layer:!0}),parentProjection:mergeProjection({parentProjection:$jscomp$destructuring$var150,\nprojection:spec})});return super.mapLayer($jscomp$destructuring$var154,parentEncoding)}}const normalizer=new CoreNormalizer;class Split{constructor(explicit,implicit){explicit=void 0===explicit?{}:explicit;implicit=void 0===implicit?{}:implicit;this.explicit=explicit;this.implicit=implicit}clone(){return new Split(duplicate(this.explicit),duplicate(this.implicit))}combine(){return Object.assign({},this.explicit,this.implicit)}get(key){return getFirstDefined(this.explicit[key],this.implicit[key])}getWithExplicit(key){return void 0!==\nthis.explicit[key]?{explicit:!0,value:this.explicit[key]}:void 0!==this.implicit[key]?{explicit:!1,value:this.implicit[key]}:{explicit:!1,value:void 0}}setWithExplicit(key,value){void 0!==value.value&&this.set(key,value.value,value.explicit)}set(key,value,explicit){delete this[explicit?\"implicit\":\"explicit\"][key];this[explicit?\"explicit\":\"implicit\"][key]=value;return this}copyKeyFromSplit(key,s){void 0!==s.explicit[key]?this.set(key,s.explicit[key],!0):void 0!==s.implicit[key]&&this.set(key,s.implicit[key],\n!1)}copyKeyFromObject(key,s){void 0!==s[key]&&this.set(key,s[key],!0)}copyAll(other){for(const key of keys$jscomp$0(other.combine())){const val=other.getWithExplicit(key);this.setWithExplicit(key,val)}}}class AncestorParse extends Split{constructor(explicit,implicit,parseNothing){explicit=void 0===explicit?{}:explicit;implicit=void 0===implicit?{}:implicit;parseNothing=void 0===parseNothing?!1:parseNothing;super(explicit,implicit);this.explicit=explicit;this.implicit=implicit;this.parseNothing=parseNothing}clone(){const clone=\nsuper.clone();clone.parseNothing=this.parseNothing;return clone}}let DataSourceType;(function(DataSourceType){DataSourceType[DataSourceType.Raw=0]=\"Raw\";DataSourceType[DataSourceType.Main=1]=\"Main\";DataSourceType[DataSourceType.Row=2]=\"Row\";DataSourceType[DataSourceType.Column=3]=\"Column\";DataSourceType[DataSourceType.Lookup=4]=\"Lookup\"})(DataSourceType||(DataSourceType={}));const ILLEGAL=/[[\\]{}]/,DEFAULT_MARKS={\"*\":1,arc:1,area:1,group:1,image:1,line:1,path:1,rect:1,rule:1,shape:1,symbol:1,text:1,\ntrail:1};let DEFAULT_SOURCE,MARKS;const ALIGNED_X_CHANNEL={left:\"x\",center:\"xc\",right:\"x2\"},BASELINED_Y_CHANNEL={top:\"y\",middle:\"yc\",bottom:\"y2\"},ALWAYS_IGNORE=new Set([\"aria\"]),nearest={has:selCmpt=>\"interval\"!==selCmpt.type&&selCmpt.nearest,parse:(model,selCmpt)=>{if(selCmpt.events)for(const s of selCmpt.events)s.markname=model.getName(\"voronoi\")},marks:(model,selCmpt,marks)=>{const {x,y}=selCmpt.project.hasChannel;selCmpt=model.mark;if(isPathMark(selCmpt))return warn('The \"nearest\" transform is not supported for '.concat(selCmpt,\n\" marks.\")),marks;selCmpt={name:model.getName(\"voronoi\"),type:\"path\",interactive:!0,from:{data:model.getName(\"marks\")},encode:{update:Object.assign({},{fill:{value:\"transparent\"},strokeWidth:{value:.35},stroke:{value:\"transparent\"},isVoronoi:{value:!0}},tooltip(model,{reactiveGeom:!0}))},transform:[{type:\"voronoi\",x:{expr:x||!y?\"datum.datum.x || 0\":\"0\"},y:{expr:y||!x?\"datum.datum.y || 0\":\"0\"},size:[model.getSizeSignalRef(\"width\"),model.getSizeSignalRef(\"height\")]}]};let index=0,exists=!1;marks.forEach((mark,\ni)=>{var _mark$name;mark=null!==(_mark$name=mark.name)&&void 0!==_mark$name?_mark$name:\"\";mark===model.component.mark[0].name?index=i:0<=mark.indexOf(\"voronoi\")&&(exists=!0)});exists||marks.splice(index+1,0,selCmpt);return marks}};class DataFlowNode{constructor(parent,debugName){this.debugName=debugName;_defineProperty(this,\"_children\",[]);_defineProperty(this,\"_parent\",null);_defineProperty(this,\"_hash\",void 0);parent&&(this.parent=parent)}clone(){throw Error(\"Cannot clone node\");}get parent(){return this._parent}set parent(parent){(this._parent=\nparent)&&parent.addChild(this)}get children(){return this._children}numChildren(){return this._children.length}addChild(child,loc){-1<this._children.indexOf(child)?warn(\"Attempt to add the same child twice.\"):void 0!==loc?this._children.splice(loc,0,child):this._children.push(child)}removeChild(oldChild){oldChild=this._children.indexOf(oldChild);this._children.splice(oldChild,1);return oldChild}remove(){let loc=this._parent.removeChild(this);for(const child of this._children)child._parent=this._parent,\nthis._parent.addChild(child,loc++)}insertAsParentOf(other){const parent=other.parent;parent.removeChild(this);this.parent=parent;other.parent=this}swapWithParent(){const parent=this._parent,newParent=parent.parent;for(const child of this._children)child.parent=parent;this._children=[];parent.removeChild(this);parent.parent.removeChild(parent);this.parent=newParent;parent.parent=this}}class OutputNode extends DataFlowNode{clone(){const cloneObj=new this.constructor;cloneObj.debugName=\"clone_\"+this.debugName;\ncloneObj._source=this._source;cloneObj._name=\"clone_\"+this._name;cloneObj.type=this.type;cloneObj.refCounts=this.refCounts;cloneObj.refCounts[cloneObj._name]=0;return cloneObj}constructor(parent,source,type,refCounts){super(parent,source);this.type=type;this.refCounts=refCounts;_defineProperty(this,\"_source\",void 0);_defineProperty(this,\"_name\",void 0);this._source=this._name=source;!this.refCounts||this._name in this.refCounts||(this.refCounts[this._name]=0)}dependentFields(){return new Set}producedFields(){return new Set}hash(){void 0===\nthis._hash&&(this._hash=\"Output \".concat(uniqueId()));return this._hash}getSource(){this.refCounts[this._name]++;return this._source}isRequired(){return!!this.refCounts[this._name]}setSource(source){this._source=source}}class TimeUnitNode extends DataFlowNode{clone(){return new TimeUnitNode(null,duplicate(this.formula))}constructor(parent,formula){super(parent);this.formula=formula}static makeFromEncoding(parent,model){const formula=model.reduceFieldDef((timeUnitComponent,fieldDef,channel)=>{const {field,\ntimeUnit}=fieldDef,channelDef2=isUnitModel(model)?model.encoding[getSecondaryRangeChannel(channel)]:void 0;channel=isUnitModel(model)&&hasBand(channel,fieldDef,channelDef2,model.stack,model.markDef,model.config);timeUnit&&(fieldDef=vgField(fieldDef,{forAs:!0}),timeUnitComponent[hash({as:fieldDef,field,timeUnit})]=Object.assign({},{as:fieldDef,field,timeUnit},channel?{band:!0}:{}));return timeUnitComponent},{});return isEmpty(formula)?null:new TimeUnitNode(parent,formula)}static makeFromTransform(parent,\nt){var $jscomp$destructuring$var170=Object.assign({},t);t=Object.assign({},$jscomp$destructuring$var170);$jscomp$destructuring$var170=$jscomp$destructuring$var170.timeUnit;t=(delete t.timeUnit,t);$jscomp$destructuring$var170=normalizeTimeUnit($jscomp$destructuring$var170);t=Object.assign({},t,{timeUnit:$jscomp$destructuring$var170});return new TimeUnitNode(parent,{[hash(t)]:t})}merge(other){this.formula=Object.assign({},this.formula);for(const key in other.formula)if(!this.formula[key]||other.formula[key].band)this.formula[key]=\nother.formula[key];for(const child of other.children)other.removeChild(child),child.parent=this;other.remove()}removeFormulas(fields){const newFormula={};for(const $jscomp$destructuring$var172 of entries(this.formula)){const [key,timeUnit]=$jscomp$destructuring$var172;fields.has(timeUnit.as)||(newFormula[key]=timeUnit)}this.formula=newFormula}producedFields(){return new Set(vals$jscomp$0(this.formula).map(f=>f.as))}dependentFields(){return new Set(vals$jscomp$0(this.formula).map(f=>f.field))}hash(){return\"TimeUnit \".concat(hash(this.formula))}assemble(){const transforms=\n[];for(const f of vals$jscomp$0(this.formula)){const {field,as,timeUnit}=f;var $jscomp$destructuring$var173=normalizeTimeUnit(timeUnit),$jscomp$destructuring$var174=Object.assign({},$jscomp$destructuring$var173);const unit=$jscomp$destructuring$var173.unit;$jscomp$destructuring$var173=$jscomp$destructuring$var173.utc;$jscomp$destructuring$var174=(delete $jscomp$destructuring$var174.unit,delete $jscomp$destructuring$var174.utc,$jscomp$destructuring$var174);transforms.push(Object.assign({},{field:replacePathInField(field),\ntype:\"timeunit\"},unit?{units:getTimeUnitParts(unit)}:{},$jscomp$destructuring$var173?{timezone:\"utc\"}:{},$jscomp$destructuring$var174,{as:[as,\"\".concat(as,\"_end\")]}))}return transforms}}class SelectionProjectionComponent{constructor(...items){_defineProperty(this,\"hasChannel\",void 0);_defineProperty(this,\"hasField\",void 0);_defineProperty(this,\"timeUnit\",void 0);_defineProperty(this,\"items\",void 0);this.items=items;this.hasChannel={};this.hasField={}}}const inputBindings={has:selCmpt=>\"single\"===\nselCmpt.type&&\"global\"===selCmpt.resolve&&selCmpt.bind&&\"scales\"!==selCmpt.bind&&!isLegendBinding(selCmpt.bind),parse:(model,selCmpt,selDef,origDef)=>{origDef.on||delete selCmpt.events;origDef.clear||delete selCmpt.clear},topLevelSignals:(model,selCmpt,signals)=>{const name=selCmpt.name;model=selCmpt.project;const bind=selCmpt.bind,init=selCmpt.init&&selCmpt.init[0],datum=nearest.has(selCmpt)?\"(item().isVoronoi ? datum.datum : datum)\":\"datum\";model.items.forEach((p,i)=>{const sgname=varName(\"\".concat(name,\n\"_\").concat(p.field));if(!signals.filter(s=>s.name===sgname).length){var _ref,_bind$p$field;signals.unshift(Object.assign({},{name:sgname},init?{init:assembleInit(init[i])}:{value:null},{on:selCmpt.events?[{events:selCmpt.events,update:\"datum \\x26\\x26 item().mark.marktype !\\x3d\\x3d 'group' ? \".concat(datum,\"[\").concat($(p.field),\"] : null\")}]:[],bind:null!==(_ref=null!==(_bind$p$field=bind[p.field])&&void 0!==_bind$p$field?_bind$p$field:bind[p.channel])&&void 0!==_ref?_ref:bind}))}});return signals},\nsignals:(model,selCmpt,signals)=>{const name=selCmpt.name;var proj=selCmpt.project;model=signals.filter(s=>s.name===name+\"_tuple\")[0];selCmpt=name+\"_tuple_fields\";proj=proj.items.map(p=>varName(\"\".concat(name,\"_\").concat(p.field)));const valid=proj.map(v=>\"\".concat(v,\" !\\x3d\\x3d null\")).join(\" \\x26\\x26 \");proj.length&&(model.update=\"\".concat(valid,\" ? {fields: \").concat(selCmpt,\", values: [\").concat(proj.join(\", \"),\"]} : null\"));delete model.value;delete model.on;return signals}},toggle={has:selCmpt=>\n\"multi\"===selCmpt.type&&!!selCmpt.toggle,signals:(model,selCmpt,signals)=>signals.concat({name:selCmpt.name+\"_toggle\",value:!1,on:[{events:selCmpt.events,update:selCmpt.toggle}]}),modifyExpr:(model,selCmpt)=>{const tpl=selCmpt.name+\"_tuple\",signal=selCmpt.name+\"_toggle\";return\"\".concat(signal,\" ? null : \").concat(tpl,\", \")+(\"global\"===selCmpt.resolve?\"\".concat(signal,\" ? null : true, \"):\"\".concat(signal,\" ? null : {unit: \").concat(unitName(model),\"}, \"))+\"\".concat(signal,\" ? \").concat(tpl,\" : null\")}},\nscaleBindings={has:selCmpt=>\"interval\"===selCmpt.type&&\"global\"===selCmpt.resolve&&selCmpt.bind&&\"scales\"===selCmpt.bind,parse:(model,selCmpt)=>{const bound=selCmpt.scales=[];for(const proj of selCmpt.project.items){var channel=proj.channel;if(!SCALE_CHANNEL_INDEX[channel])continue;const scaleType=(channel=model.getScaleComponent(channel))?channel.get(\"type\"):void 0;channel&&scaleType in CONTINUOUS_DOMAIN_INDEX?(channel.set(\"selectionExtent\",{selection:selCmpt.name,field:proj.field},!0),bound.push(proj)):\nwarn(\"Scale bindings are currently only supported for scales with unbinned, continuous domains.\")}},topLevelSignals:(model,selCmpt,signals)=>{const bound=selCmpt.scales.filter(proj=>0===signals.filter(s=>s.name===proj.signals.data).length);if(!model.parent||isTopLevelLayer(model)||0===bound.length)return signals;model=signals.filter(s=>s.name===selCmpt.name)[0];let update=model.update;if(0<=update.indexOf(\"vlSelectionResolve\"))model.update=\"{\".concat(bound.map(proj=>\"\".concat($(proj.field),\": \").concat(proj.signals.data)).join(\", \"),\n\"}\");else{for(const proj of bound){const mapping=\"\".concat($(proj.field),\": \").concat(proj.signals.data);0>update.indexOf(mapping)&&(update=\"\".concat(update.substring(0,update.length-1),\", \").concat(mapping,\"}\"))}model.update=update}return signals.concat(bound.map(proj=>({name:proj.signals.data})))},signals:(model,selCmpt,signals)=>{if(model.parent&&!isTopLevelLayer(model))for(const proj of selCmpt.scales)model=signals.filter(s=>s.name===proj.signals.data)[0],model.push=\"outer\",delete model.value,\ndelete model.update;return signals}},legendBindings={has:selCmpt=>{const spec=\"global\"===selCmpt.resolve&&selCmpt.bind&&isLegendBinding(selCmpt.bind);selCmpt=1===selCmpt.project.items.length&&\"_vgsid_\"!==selCmpt.project.items[0].field;spec&&!selCmpt&&warn(\"Legend bindings are only supported for selections over an individual field or encoding channel.\");return spec&&selCmpt},parse:(model,selCmpt,selDef,origDef)=>{origDef.on||delete selCmpt.events;origDef.clear||delete selCmpt.clear;if(origDef.on||\norigDef.clear)for(const evt of selCmpt.events){var _evt$filter;evt.filter=array$jscomp$0(null!==(_evt$filter=evt.filter)&&void 0!==_evt$filter?_evt$filter:[]);0>evt.filter.indexOf('event.item \\x26\\x26 indexof(event.item.mark.role, \"legend\") \\x3c 0')&&evt.filter.push('event.item \\x26\\x26 indexof(event.item.mark.role, \"legend\") \\x3c 0')}model=isLegendStreamBinding(selCmpt.bind)?selCmpt.bind.legend:\"click\";model=isString(model)?eventSelector(model,\"view\"):array$jscomp$0(model);selCmpt.bind={legend:{merge:model}}},\ntopLevelSignals:(model,selCmpt,signals)=>{model=selCmpt.name;const stream=isLegendStreamBinding(selCmpt.bind)&&selCmpt.bind.legend,markName=name=>s=>{s=duplicate(s);s.markname=name;return s};for(const proj of selCmpt.project.items){if(!proj.hasLegend)continue;var prefix=\"\".concat(varName(proj.field),\"_legend\");const sgName=\"\".concat(model,\"_\").concat(prefix);0===signals.filter(s=>s.name===sgName).length&&(prefix=stream.merge.map(markName(\"\".concat(prefix,\"_symbols\"))).concat(stream.merge.map(markName(\"\".concat(prefix,\n\"_labels\")))).concat(stream.merge.map(markName(\"\".concat(prefix,\"_entries\")))),signals.unshift(Object.assign({},{name:sgName},selCmpt.init?{}:{value:null},{on:[{events:prefix,update:\"datum.value || item().items[0].items[0].datum.value\",force:!0},{events:stream.merge,update:\"!event.item || !datum ? null : \".concat(sgName),force:!0}]})))}return signals},signals:(model,selCmpt,signals)=>{const name=selCmpt.name;var proj=selCmpt.project;model=signals.find(s=>s.name===name+\"_tuple\");var fields=name+\"_tuple_fields\";\nproj=proj.items.filter(p=>p.hasLegend).map(p=>varName(\"\".concat(name,\"_\").concat(varName(p.field),\"_legend\")));const valid=proj.map(v=>\"\".concat(v,\" !\\x3d\\x3d null\")).join(\" \\x26\\x26 \");fields=\"\".concat(valid,\" ? {fields: \").concat(fields,\", values: [\").concat(proj.join(\", \"),\"]} : null\");selCmpt.events&&0<proj.length?model.on.push({events:proj.map(signal=>({signal})),update:fields}):0<proj.length&&(model.update=fields,delete model.value,delete model.on);model=signals.find(s=>s.name===name+\"_toggle\");\nfields=isLegendStreamBinding(selCmpt.bind)&&selCmpt.bind.legend;model&&(selCmpt.events?model.on.push(Object.assign({},model.on[0],{events:fields})):model.on[0].events=fields);return signals}},compilers=[{has:()=>!0,parse:(model,selCmpt,selDef)=>{var _selCmpt$project;const name=selCmpt.name,proj=null!==(_selCmpt$project=selCmpt.project)&&void 0!==_selCmpt$project?_selCmpt$project:selCmpt.project=new SelectionProjectionComponent,parsed={};_selCmpt$project={};const signals=new Set,signalName=(p,range)=>\n{p=\"visual\"===range?p.channel:p.field;let sg=varName(\"\".concat(name,\"_\").concat(p));for(let counter=1;signals.has(sg);counter++)sg=varName(\"\".concat(name,\"_\").concat(p,\"_\").concat(counter));signals.add(sg);return{[range]:sg}};if(!selDef.fields&&!selDef.encodings){const cfg=model.config.selection[selDef.type];if(selDef.init)for(const init of array$jscomp$0(selDef.init))for(const key of keys$jscomp$0(init))SINGLE_DEF_UNIT_CHANNEL_INDEX[key]?(selDef.encodings||(selDef.encodings=[])).push(key):\"interval\"===\nselDef.type?(warn('Interval selections should be initialized using \"x\" and/or \"y\" keys.'),selDef.encodings=cfg.encodings):(selDef.fields||(selDef.fields=[])).push(key);else selDef.encodings=cfg.encodings,selDef.fields=cfg.fields}for(var field of null!==(_selDef$fields=selDef.fields)&&void 0!==_selDef$fields?_selDef$fields:[]){var _selDef$fields;_selDef$fields={type:\"E\",field};_selDef$fields.signals=Object.assign({},signalName(_selDef$fields,\"data\"));proj.items.push(_selDef$fields);proj.hasField[field]=\n_selDef$fields}for(const channel of null!==(_selDef$encodings=selDef.encodings)&&void 0!==_selDef$encodings?_selDef$encodings:[]){var _selDef$encodings;(field=model.fieldDef(channel))?(_selDef$encodings=field.field,field.aggregate?warn(cannotProjectAggregate(channel,field.aggregate)):_selDef$encodings?(field.timeUnit&&(_selDef$encodings=model.vgField(channel),_selDef$fields={timeUnit:field.timeUnit,as:_selDef$encodings,field:field.field},_selCmpt$project[hash(_selDef$fields)]=_selDef$fields),parsed[_selDef$encodings]||\n(_selDef$fields=\"E\",\"interval\"===selCmpt.type?model.getScaleComponent(channel).get(\"type\")in CONTINUOUS_DOMAIN_INDEX&&(_selDef$fields=\"R\"):field.bin&&(_selDef$fields=\"R-RE\"),field={field:_selDef$encodings,channel,type:_selDef$fields},field.signals=Object.assign({},signalName(field,\"data\"),signalName(field,\"visual\")),proj.items.push(parsed[_selDef$encodings]=field),proj.hasField[_selDef$encodings]=proj.hasChannel[channel]=parsed[_selDef$encodings])):warn(cannotProjectOnChannelWithoutField(channel))):\nwarn(cannotProjectOnChannelWithoutField(channel))}selDef.init&&(model=i=>proj.items.map(p=>void 0!==i[p.channel]?i[p.channel]:i[p.field]),\"interval\"===selDef.type?selCmpt.init=model(selDef.init):(selDef=array$jscomp$0(selDef.init),selCmpt.init=selDef.map(model)));isEmpty(_selCmpt$project)||(proj.timeUnit=new TimeUnitNode(null,_selCmpt$project))},signals:(model,selCmpt,allSignals)=>{const name=selCmpt.name+\"_tuple_fields\";return 0<allSignals.filter(s=>s.name===name).length?allSignals:allSignals.concat({name,\nvalue:selCmpt.project.items.map(proj=>{proj=Object.assign({},proj);proj=(delete proj.signals,delete proj.hasLegend,proj);proj.field=replacePathInField(proj.field);return proj})})}},toggle,scaleBindings,legendBindings,{has:selCmpt=>\"interval\"===selCmpt.type&&selCmpt.translate,signals:(model,selCmpt,signals)=>{const name=selCmpt.name,hasScales=scaleBindings.has(selCmpt),anchor=name+\"_translate_anchor\",{x,y}=selCmpt.project.hasChannel;let events=eventSelector(selCmpt.translate,\"scope\");hasScales||(events=\nevents.map(e=>(e.between[0].markname=name+\"_brush\",e)));signals.push({name:anchor,value:{},on:[{events:events.map(e=>e.between[0]),update:\"{x: x(unit), y: y(unit)\"+(void 0!==x?\", extent_x: \"+(hasScales?domain$1(model,\"x\"):\"slice(\".concat(x.signals.visual,\")\")):\"\")+(void 0!==y?\", extent_y: \"+(hasScales?domain$1(model,\"y\"):\"slice(\".concat(y.signals.visual,\")\")):\"\")+\"}\"}]},{name:name+\"_translate_delta\",value:{},on:[{events,update:\"{x: \".concat(anchor,\".x - x(unit), y: \").concat(anchor,\".y - y(unit)}\")}]});\nvoid 0!==x&&onDelta(model,selCmpt,x,\"width\",signals);void 0!==y&&onDelta(model,selCmpt,y,\"height\",signals);return signals}},{has:selCmpt=>\"interval\"===selCmpt.type&&selCmpt.zoom,signals:(model,selCmpt,signals)=>{const name=selCmpt.name,hasScales=scaleBindings.has(selCmpt),delta=name+\"_zoom_delta\",{x,y}=selCmpt.project.hasChannel,sx=$(model.scaleName(\"x\")),sy=$(model.scaleName(\"y\"));let events=eventSelector(selCmpt.zoom,\"scope\");hasScales||(events=events.map(e=>(e.markname=name+\"_brush\",e)));signals.push({name:name+\n\"_zoom_anchor\",on:[{events,update:hasScales?\"{\"+[sx?\"x: invert(\".concat(sx,\", x(unit))\"):\"\",sy?\"y: invert(\".concat(sy,\", y(unit))\"):\"\"].filter(expr=>!!expr).join(\", \")+\"}\":\"{x: x(unit), y: y(unit)}\"}]},{name:delta,on:[{events,force:!0,update:\"pow(1.001, event.deltaY * pow(16, event.deltaMode))\"}]});void 0!==x&&onDelta$1(model,selCmpt,x,\"width\",signals);void 0!==y&&onDelta$1(model,selCmpt,y,\"height\",signals);return signals}},inputBindings,nearest,{has:selCmpt=>void 0!==selCmpt.clear&&!1!==selCmpt.clear,\nparse:(model,selCmpt,selDef)=>{selDef.clear&&(selCmpt.clear=isString(selDef.clear)?eventSelector(selDef.clear,\"scope\"):selDef.clear)},topLevelSignals:(model,selCmpt,signals)=>{if(inputBindings.has(selCmpt))for(const proj of selCmpt.project.items)model=signals.findIndex(n=>n.name===varName(\"\".concat(selCmpt.name,\"_\").concat(proj.field))),-1!==model&&signals[model].on.push({events:selCmpt.clear,update:\"null\"});return signals},signals:(model,selCmpt,signals)=>{function addClear(idx,update){-1!==idx&&\nsignals[idx].on&&signals[idx].on.push({events:selCmpt.clear,update})}if(\"interval\"===selCmpt.type)for(const proj of selCmpt.project.items)model=signals.findIndex(n=>n.name===proj.signals.visual),addClear(model,\"[0, 0]\"),-1===model&&(model=signals.findIndex(n=>n.name===proj.signals.data),addClear(model,\"null\"));else model=signals.findIndex(n=>n.name===selCmpt.name+\"_tuple\"),addClear(model,\"null\"),toggle.has(selCmpt)&&(model=signals.findIndex(n=>n.name===selCmpt.name+\"_toggle\"),addClear(model,\"false\"));\nreturn signals}}],compilers$1={single:{signals:singleOrMultiSignals,modifyExpr:(model,selCmpt)=>selCmpt.name+\"_tuple, \"+(\"global\"===selCmpt.resolve?\"true\":\"{unit: \".concat(unitName(model),\"}\"))},multi:{signals:singleOrMultiSignals,modifyExpr:(model,selCmpt)=>selCmpt.name+\"_tuple, \"+(\"global\"===selCmpt.resolve?\"null\":\"{unit: \".concat(unitName(model),\"}\"))},interval:{signals:(model,selCmpt)=>{const name=selCmpt.name;var fieldsSg=name+\"_tuple_fields\",hasScales=scaleBindings.has(selCmpt);const signals=\n[],dataSignals=[],scaleTriggers=[];if(selCmpt.translate&&!hasScales){const filterExpr=\"!event.item || event.item.mark.name !\\x3d\\x3d \".concat($(name+\"_brush\"));events$jscomp$0(selCmpt,(on,evt)=>{var _evt$between$0$filter;evt=array$jscomp$0(null!==(_evt$between$0$filter=evt.between[0].filter)&&void 0!==_evt$between$0$filter?_evt$between$0$filter:evt.between[0].filter=[]);0>evt.indexOf(filterExpr)&&evt.push(filterExpr);return on})}selCmpt.project.items.forEach((proj,i)=>{const channel=proj.channel;\nif(\"x\"!==channel&&\"y\"!==channel)warn(\"Interval selections only support x and y encoding channels.\");else{i=channelSignals(model,selCmpt,proj,selCmpt.init?selCmpt.init[i]:null);var dname=proj.signals.data;proj=proj.signals.visual;var scaleName=$(model.scaleName(channel)),toNum=model.getScaleComponent(channel).get(\"type\")in CONTINUOUS_DOMAIN_INDEX?\"+\":\"\";signals.push(...i);dataSignals.push(dname);scaleTriggers.push({scaleName:model.scaleName(channel),expr:\"(!isArray(\".concat(dname,\") || \")+\"(\".concat(toNum,\n\"invert(\").concat(scaleName,\", \").concat(proj,\")[0] \\x3d\\x3d\\x3d \").concat(toNum).concat(dname,\"[0] \\x26\\x26 \")+\"\".concat(toNum,\"invert(\").concat(scaleName,\", \").concat(proj,\")[1] \\x3d\\x3d\\x3d \").concat(toNum).concat(dname,\"[1]))\")})}});hasScales||signals.push({name:name+\"_scale_trigger\",value:{},on:[{events:scaleTriggers.map(t=>({scale:t.scaleName})),update:scaleTriggers.map(t=>t.expr).join(\" \\x26\\x26 \")+\" ? \".concat(name+\"_scale_trigger\",\" : {}\")}]});hasScales=selCmpt.init;fieldsSg=\"unit: \".concat(unitName(model),\n\", fields: \").concat(fieldsSg,\", values\");return signals.concat(Object.assign({},{name:name+\"_tuple\"},hasScales?{init:\"{\".concat(fieldsSg,\": \").concat(assembleInit(hasScales),\"}\")}:{},{on:[{events:[{signal:dataSignals.join(\" || \")}],update:dataSignals.join(\" \\x26\\x26 \")+\" ? {\".concat(fieldsSg,\": [\").concat(dataSignals,\"]} : null\")}]}))},modifyExpr:(model,selCmpt)=>selCmpt.name+\"_tuple, \"+(\"global\"===selCmpt.resolve?\"true\":\"{unit: \".concat(unitName(model),\"}\")),marks:(model,selCmpt,marks)=>{const name=\nselCmpt.name,{x,y}=selCmpt.project.hasChannel,xvname=x&&x.signals.visual,yvname=y&&y.signals.visual;var store=\"data(\".concat($(selCmpt.name+\"_store\"),\")\");if(scaleBindings.has(selCmpt))return marks;const update={x:void 0!==x?{signal:\"\".concat(xvname,\"[0]\")}:{value:0},y:void 0!==y?{signal:\"\".concat(yvname,\"[0]\")}:{value:0},x2:void 0!==x?{signal:\"\".concat(xvname,\"[1]\")}:{field:{group:\"width\"}},y2:void 0!==y?{signal:\"\".concat(yvname,\"[1]\")}:{field:{group:\"height\"}}};if(\"global\"===selCmpt.resolve)for(var key of keys$jscomp$0(update))update[key]=\n[Object.assign({},{test:\"\".concat(store,\".length \\x26\\x26 \").concat(store,\"[0].unit \\x3d\\x3d\\x3d \").concat(unitName(model))},update[key]),{value:0}];key=selCmpt.mark;store=Object.assign({},key);model=key.fill;selCmpt=key.fillOpacity;key=key.cursor;const stroke=(delete store.fill,delete store.fillOpacity,delete store.cursor,store);store=keys$jscomp$0(stroke).reduce((def,k)=>{def[k]=[{test:[void 0!==x&&\"\".concat(xvname,\"[0] !\\x3d\\x3d \").concat(xvname,\"[1]\"),void 0!==y&&\"\".concat(yvname,\"[0] !\\x3d\\x3d \").concat(yvname,\n\"[1]\")].filter(t=>t).join(\" \\x26\\x26 \"),value:stroke[k]},{value:null}];return def},{});return[{name:name+\"_brush_bg\",type:\"rect\",clip:!0,encode:{enter:{fill:{value:model},fillOpacity:{value:selCmpt}},update}},...marks,{name:name+\"_brush\",type:\"rect\",clip:!0,encode:{enter:Object.assign({},key?{cursor:{value:key}}:{},{fill:{value:\"transparent\"}}),update:Object.assign({},update,store)}}]}}};ASTNode.prototype.visit=function(visitor){let c,i,n;if(visitor(this))return 1;c=children$jscomp$0(this);i=0;for(n=\nc.length;i<n;++i)if(c[i].visit(visitor))return 1};var source$jscomp$0,index$jscomp$0,length$jscomp$0,lookahead,RegexNonAsciiIdentifierStart=/[\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u08A0-\\u08B2\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D\\u0C58\\u0C59\\u0C60\\u0C61\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D60\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F4\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1877\\u1880-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19C1-\\u19C7\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u1CF5\\u1CF6\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2E2F\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FCC\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA69D\\uA6A0-\\uA6EF\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA78E\\uA790-\\uA7AD\\uA7B0\\uA7B1\\uA7F7-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uA9E0-\\uA9E4\\uA9E6-\\uA9EF\\uA9FA-\\uA9FE\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA7E-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB5F\\uAB64\\uAB65\\uABC0-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]/,\nRegexNonAsciiIdentifierPart=/[\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0300-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u0483-\\u0487\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0610-\\u061A\\u0620-\\u0669\\u066E-\\u06D3\\u06D5-\\u06DC\\u06DF-\\u06E8\\u06EA-\\u06FC\\u06FF\\u0710-\\u074A\\u074D-\\u07B1\\u07C0-\\u07F5\\u07FA\\u0800-\\u082D\\u0840-\\u085B\\u08A0-\\u08B2\\u08E4-\\u0963\\u0966-\\u096F\\u0971-\\u0983\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BC-\\u09C4\\u09C7\\u09C8\\u09CB-\\u09CE\\u09D7\\u09DC\\u09DD\\u09DF-\\u09E3\\u09E6-\\u09F1\\u0A01-\\u0A03\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A3C\\u0A3E-\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A59-\\u0A5C\\u0A5E\\u0A66-\\u0A75\\u0A81-\\u0A83\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABC-\\u0AC5\\u0AC7-\\u0AC9\\u0ACB-\\u0ACD\\u0AD0\\u0AE0-\\u0AE3\\u0AE6-\\u0AEF\\u0B01-\\u0B03\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3C-\\u0B44\\u0B47\\u0B48\\u0B4B-\\u0B4D\\u0B56\\u0B57\\u0B5C\\u0B5D\\u0B5F-\\u0B63\\u0B66-\\u0B6F\\u0B71\\u0B82\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BBE-\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCD\\u0BD0\\u0BD7\\u0BE6-\\u0BEF\\u0C00-\\u0C03\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D-\\u0C44\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C58\\u0C59\\u0C60-\\u0C63\\u0C66-\\u0C6F\\u0C81-\\u0C83\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBC-\\u0CC4\\u0CC6-\\u0CC8\\u0CCA-\\u0CCD\\u0CD5\\u0CD6\\u0CDE\\u0CE0-\\u0CE3\\u0CE6-\\u0CEF\\u0CF1\\u0CF2\\u0D01-\\u0D03\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D-\\u0D44\\u0D46-\\u0D48\\u0D4A-\\u0D4E\\u0D57\\u0D60-\\u0D63\\u0D66-\\u0D6F\\u0D7A-\\u0D7F\\u0D82\\u0D83\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0DCA\\u0DCF-\\u0DD4\\u0DD6\\u0DD8-\\u0DDF\\u0DE6-\\u0DEF\\u0DF2\\u0DF3\\u0E01-\\u0E3A\\u0E40-\\u0E4E\\u0E50-\\u0E59\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB9\\u0EBB-\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EC8-\\u0ECD\\u0ED0-\\u0ED9\\u0EDC-\\u0EDF\\u0F00\\u0F18\\u0F19\\u0F20-\\u0F29\\u0F35\\u0F37\\u0F39\\u0F3E-\\u0F47\\u0F49-\\u0F6C\\u0F71-\\u0F84\\u0F86-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u1000-\\u1049\\u1050-\\u109D\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u135D-\\u135F\\u1380-\\u138F\\u13A0-\\u13F4\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1714\\u1720-\\u1734\\u1740-\\u1753\\u1760-\\u176C\\u176E-\\u1770\\u1772\\u1773\\u1780-\\u17D3\\u17D7\\u17DC\\u17DD\\u17E0-\\u17E9\\u180B-\\u180D\\u1810-\\u1819\\u1820-\\u1877\\u1880-\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1920-\\u192B\\u1930-\\u193B\\u1946-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u19D0-\\u19D9\\u1A00-\\u1A1B\\u1A20-\\u1A5E\\u1A60-\\u1A7C\\u1A7F-\\u1A89\\u1A90-\\u1A99\\u1AA7\\u1AB0-\\u1ABD\\u1B00-\\u1B4B\\u1B50-\\u1B59\\u1B6B-\\u1B73\\u1B80-\\u1BF3\\u1C00-\\u1C37\\u1C40-\\u1C49\\u1C4D-\\u1C7D\\u1CD0-\\u1CD2\\u1CD4-\\u1CF6\\u1CF8\\u1CF9\\u1D00-\\u1DF5\\u1DFC-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u200C\\u200D\\u203F\\u2040\\u2054\\u2071\\u207F\\u2090-\\u209C\\u20D0-\\u20DC\\u20E1\\u20E5-\\u20F0\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D7F-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2DE0-\\u2DFF\\u2E2F\\u3005-\\u3007\\u3021-\\u302F\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u3099\\u309A\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FCC\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA62B\\uA640-\\uA66F\\uA674-\\uA67D\\uA67F-\\uA69D\\uA69F-\\uA6F1\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA78E\\uA790-\\uA7AD\\uA7B0\\uA7B1\\uA7F7-\\uA827\\uA840-\\uA873\\uA880-\\uA8C4\\uA8D0-\\uA8D9\\uA8E0-\\uA8F7\\uA8FB\\uA900-\\uA92D\\uA930-\\uA953\\uA960-\\uA97C\\uA980-\\uA9C0\\uA9CF-\\uA9D9\\uA9E0-\\uA9FE\\uAA00-\\uAA36\\uAA40-\\uAA4D\\uAA50-\\uAA59\\uAA60-\\uAA76\\uAA7A-\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEF\\uAAF2-\\uAAF6\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB5F\\uAB64\\uAB65\\uABC0-\\uABEA\\uABEC\\uABED\\uABF0-\\uABF9\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE00-\\uFE0F\\uFE20-\\uFE2D\\uFE33\\uFE34\\uFE4D-\\uFE4F\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF10-\\uFF19\\uFF21-\\uFF3A\\uFF3F\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]/;\nconst keywords={\"if\":1,\"in\":1,\"do\":1,\"var\":1,\"for\":1,\"new\":1,\"try\":1,let:1,\"this\":1,\"else\":1,\"case\":1,\"void\":1,\"with\":1,\"enum\":1,\"while\":1,\"break\":1,\"catch\":1,\"throw\":1,\"const\":1,yield:1,\"class\":1,\"super\":1,\"return\":1,\"typeof\":1,\"delete\":1,\"switch\":1,\"export\":1,\"import\":1,\"public\":1,\"static\":1,\"default\":1,\"finally\":1,\"extends\":1,\"package\":1,\"private\":1,\"function\":1,\"continue\":1,\"debugger\":1,\"interface\":1,\"protected\":1,\"instanceof\":1,\"implements\":1},legalKeywords={\"if\":1};class FilterNode extends DataFlowNode{clone(){return new FilterNode(null,\nthis.model,duplicate(this.filter))}constructor(parent,model,filter){super(parent);this.model=model;this.filter=filter;_defineProperty(this,\"expr\",void 0);_defineProperty(this,\"_dependentFields\",void 0);this.expr=expression$jscomp$0(this.model,this.filter,this);this._dependentFields=getDependentFields(this.expr)}dependentFields(){return this._dependentFields}producedFields(){return new Set}assemble(){return{type:\"filter\",expr:this.expr}}hash(){return\"Filter \".concat(this.expr)}}const axisRules={scale:$jscomp$destructuring$var192=>\n{var {model,channel}=$jscomp$destructuring$var192;return model.scaleName(channel)},format:$jscomp$destructuring$var193=>{var {fieldOrDatumDef,config,axis}=$jscomp$destructuring$var193;const {format,formatType}=axis;return guideFormat(fieldOrDatumDef,fieldOrDatumDef.type,format,formatType,config,!0)},formatType:$jscomp$destructuring$var194=>{var {axis,fieldOrDatumDef,scaleType}=$jscomp$destructuring$var194;({formatType:$jscomp$destructuring$var194}=axis);return guideFormatType($jscomp$destructuring$var194,\nfieldOrDatumDef,scaleType)},grid:$jscomp$destructuring$var195=>{var {fieldOrDatumDef,axis,scaleType}=$jscomp$destructuring$var195;if(isFieldDef(fieldOrDatumDef)&&isBinned(fieldOrDatumDef.bin))return!1;var _axis$grid;return null!==(_axis$grid=axis.grid)&&void 0!==_axis$grid?_axis$grid:!(scaleType in DISCRETE_DOMAIN_INDEX)&&isFieldDef(fieldOrDatumDef)&&!isBinning(null===fieldOrDatumDef||void 0===fieldOrDatumDef?void 0:fieldOrDatumDef.bin)},gridScale:$jscomp$destructuring$var196=>{var {model,channel}=\n$jscomp$destructuring$var196;$jscomp$destructuring$var196=\"x\"===channel?\"y\":\"x\";$jscomp$destructuring$var196=model.getScaleComponent($jscomp$destructuring$var196)?model.scaleName($jscomp$destructuring$var196):void 0;return $jscomp$destructuring$var196},labelAlign:$jscomp$destructuring$var197=>{var {axis,labelAngle,orient,channel}=$jscomp$destructuring$var197;return axis.labelAlign||defaultLabelAlign(labelAngle,orient,channel)},labelAngle:$jscomp$destructuring$var198=>{({labelAngle:$jscomp$destructuring$var198}=\n$jscomp$destructuring$var198);return $jscomp$destructuring$var198},labelBaseline:$jscomp$destructuring$var199=>{var {axis,labelAngle,orient,channel}=$jscomp$destructuring$var199;return axis.labelBaseline||defaultLabelBaseline(labelAngle,orient,channel)},labelFlush:$jscomp$destructuring$var200=>{var {axis,fieldOrDatumDef,channel}=$jscomp$destructuring$var200,_axis$labelFlush;$jscomp$destructuring$var200=null!==(_axis$labelFlush=axis.labelFlush)&&void 0!==_axis$labelFlush?_axis$labelFlush:\"x\"===channel&&\ncontains([\"quantitative\",\"temporal\"],fieldOrDatumDef.type)?!0:void 0;return $jscomp$destructuring$var200},labelOverlap:$jscomp$destructuring$var201=>{var {axis,fieldOrDatumDef,scaleType}=$jscomp$destructuring$var201,_axis$labelOverlap;if(null!==(_axis$labelOverlap=axis.labelOverlap)&&void 0!==_axis$labelOverlap)$jscomp$destructuring$var201=_axis$labelOverlap;else{$jscomp$destructuring$var201=fieldOrDatumDef.type;_axis$labelOverlap=isFieldDef(fieldOrDatumDef)&&!!fieldOrDatumDef.timeUnit;var sort=isFieldDef(fieldOrDatumDef)?\nfieldOrDatumDef.sort:void 0;$jscomp$destructuring$var201=_axis$labelOverlap&&!isObject(sort)||\"nominal\"!==$jscomp$destructuring$var201&&\"ordinal\"!==$jscomp$destructuring$var201?\"log\"===scaleType||\"symlog\"===scaleType?\"greedy\":!0:void 0}return $jscomp$destructuring$var201},orient:$jscomp$destructuring$var202=>{({orient:$jscomp$destructuring$var202}=$jscomp$destructuring$var202);return $jscomp$destructuring$var202},tickCount:$jscomp$destructuring$var203=>{var {channel,model,axis,fieldOrDatumDef,scaleType}=\n$jscomp$destructuring$var203,_axis$tickCount;$jscomp$destructuring$var203=($jscomp$destructuring$var203=\"x\"===channel?\"width\":\"y\"===channel?\"height\":void 0)?model.getSizeSignalRef($jscomp$destructuring$var203):void 0;if(null===(_axis$tickCount=axis.tickCount)||void 0===_axis$tickCount)a:{var {fieldOrDatumDef:fieldOrDatumDef$jscomp$0,scaleType:scaleType$jscomp$0,size,values:vals}={fieldOrDatumDef,scaleType,size:$jscomp$destructuring$var203,values:axis.values};if(vals||scaleType$jscomp$0 in DISCRETE_DOMAIN_INDEX||\n\"log\"===scaleType$jscomp$0)_axis$tickCount=void 0;else{if(isFieldDef(fieldOrDatumDef$jscomp$0)){var _normalizeTimeUnit;if(isBinning(fieldOrDatumDef$jscomp$0.bin)){_axis$tickCount={signal:\"ceil(\".concat(size.signal,\"/10)\")};break a}if(fieldOrDatumDef$jscomp$0.timeUnit&&contains([\"month\",\"hours\",\"day\",\"quarter\"],null===(_normalizeTimeUnit=normalizeTimeUnit(fieldOrDatumDef$jscomp$0.timeUnit))||void 0===_normalizeTimeUnit?void 0:_normalizeTimeUnit.unit)){_axis$tickCount=void 0;break a}}_axis$tickCount=\n{signal:\"ceil(\".concat(size.signal,\"/40)\")}}}return _axis$tickCount},title:$jscomp$destructuring$var204=>{var {axis,model,channel}=$jscomp$destructuring$var204;if(void 0!==axis.title)return axis.title;$jscomp$destructuring$var204=getFieldDefTitle(model,channel);if(void 0!==$jscomp$destructuring$var204)return $jscomp$destructuring$var204;$jscomp$destructuring$var204=model.typedFieldDef(channel);const fieldDef2=model.fieldDef(\"x\"===channel?\"x2\":\"y2\");return mergeTitleFieldDefs($jscomp$destructuring$var204?\n[toFieldDefBase($jscomp$destructuring$var204)]:[],isFieldDef(fieldDef2)?[toFieldDefBase(fieldDef2)]:[])},values:$jscomp$destructuring$var205=>{var {axis,fieldOrDatumDef}=$jscomp$destructuring$var205;$jscomp$destructuring$var205=axis.values;$jscomp$destructuring$var205=isArray($jscomp$destructuring$var205)?valueArray(fieldOrDatumDef,$jscomp$destructuring$var205):isSignalRef($jscomp$destructuring$var205)?$jscomp$destructuring$var205:void 0;return $jscomp$destructuring$var205},zindex:$jscomp$destructuring$var206=>\n{var {axis,fieldOrDatumDef,mark}=$jscomp$destructuring$var206,_axis$zindex;$jscomp$destructuring$var206=null!==(_axis$zindex=axis.zindex)&&void 0!==_axis$zindex?_axis$zindex:\"rect\"===mark&&isDiscrete(fieldOrDatumDef)?1:0;return $jscomp$destructuring$var206}};class CalculateNode extends DataFlowNode{clone(){return new CalculateNode(null,duplicate(this.transform))}constructor(parent,transform){super(parent);this.transform=transform;_defineProperty(this,\"_dependentFields\",void 0);this._dependentFields=\ngetDependentFields(this.transform.calculate)}static parseAllForSortIndex(parent,model){model.forEachFieldDef((fieldDef,channel)=>{if(isScaleFieldDef(fieldDef)&&isSortArray(fieldDef.sort)){const {field,timeUnit}=fieldDef;var sort=fieldDef.sort;sort=sort.map((sortValue,i)=>\"\".concat(fieldFilterExpression({field,timeUnit,equal:sortValue}),\" ? \").concat(i,\" : \")).join(\"\")+sort.length;parent=new CalculateNode(parent,{calculate:sort,as:sortArrayIndexField(fieldDef,channel,{forAs:!0})})}});return parent}producedFields(){return new Set([this.transform.as])}dependentFields(){return this._dependentFields}assemble(){return{type:\"formula\",\nexpr:this.transform.calculate,as:this.transform.as}}hash(){return\"Calculate \".concat(hash(this.transform))}}const HEADER_CHANNELS=[\"row\",\"column\"],HEADER_TYPES=[\"header\",\"footer\"],LAYOUT_TITLE_BAND={column:{start:0,end:1},row:{start:1,end:0}},LEGEND_COMPONENT_PROPERTY_INDEX=Object.assign({},{aria:1,clipHeight:1,columnPadding:1,columns:1,cornerRadius:1,description:1,direction:1,fillColor:1,format:1,formatType:1,gradientLength:1,gradientOpacity:1,gradientStrokeColor:1,gradientStrokeWidth:1,gradientThickness:1,\ngridAlign:1,labelAlign:1,labelBaseline:1,labelColor:1,labelFont:1,labelFontSize:1,labelFontStyle:1,labelFontWeight:1,labelLimit:1,labelOffset:1,labelOpacity:1,labelOverlap:1,labelPadding:1,labelSeparation:1,legendX:1,legendY:1,offset:1,orient:1,padding:1,rowPadding:1,strokeColor:1,symbolDash:1,symbolDashOffset:1,symbolFillColor:1,symbolLimit:1,symbolOffset:1,symbolOpacity:1,symbolSize:1,symbolStrokeColor:1,symbolStrokeWidth:1,symbolType:1,tickCount:1,tickMinStep:1,title:1,titleAlign:1,titleAnchor:1,\ntitleBaseline:1,titleColor:1,titleFont:1,titleFontSize:1,titleFontStyle:1,titleFontWeight:1,titleLimit:1,titleLineHeight:1,titleOpacity:1,titleOrient:1,titlePadding:1,type:1,values:1,zindex:1},{disable:1,labelExpr:1,selections:1,opacity:1,shape:1,stroke:1,fill:1,size:1,strokeWidth:1,strokeDash:1,encode:1}),LEGEND_COMPONENT_PROPERTIES=keys$jscomp$0(LEGEND_COMPONENT_PROPERTY_INDEX);class LegendComponent extends Split{}const legendEncodeRules={symbols:function(symbolsSpec,$jscomp$destructuring$var208){var {fieldOrDatumDef,\nmodel,channel,legendCmpt,legendType}=$jscomp$destructuring$var208,_legendCmpt$get,_legendCmpt$get2,_legendCmpt$get3,_getMaxValue;if(\"symbol\"===legendType){var {markDef,encoding,config,mark}=model;$jscomp$destructuring$var208=markDef.filled&&\"trail\"!==mark;var JSCompiler_temp_const=Object,JSCompiler_temp_const$jscomp$0=JSCompiler_temp_const.assign,e={};for(var property of FILL_STROKE_CONFIG){const value=getMarkConfig(property,model.markDef,model.config);void 0!==value&&(e[property]=signalOrValueRef(value))}property=\nJSCompiler_temp_const$jscomp$0.call(JSCompiler_temp_const,{},e,color$jscomp$0(model,{filled:$jscomp$destructuring$var208}));JSCompiler_temp_const=null!==(_legendCmpt$get=legendCmpt.get(\"symbolOpacity\"))&&void 0!==_legendCmpt$get?_legendCmpt$get:config.legend.symbolOpacity;_legendCmpt$get=null!==(_legendCmpt$get2=legendCmpt.get(\"symbolFillColor\"))&&void 0!==_legendCmpt$get2?_legendCmpt$get2:config.legend.symbolFillColor;_legendCmpt$get2=null!==(_legendCmpt$get3=legendCmpt.get(\"symbolStrokeColor\"))&&\nvoid 0!==_legendCmpt$get3?_legendCmpt$get3:config.legend.symbolStrokeColor;_legendCmpt$get3=void 0===JSCompiler_temp_const?null!==(_getMaxValue=getMaxValue(encoding.opacity))&&void 0!==_getMaxValue?_getMaxValue:markDef.opacity:void 0;if(property.fill)if(\"fill\"===channel||$jscomp$destructuring$var208&&\"color\"===channel)delete property.fill;else if(property.fill.field)if(_legendCmpt$get)delete property.fill;else{var _config$legend$symbol;property.fill=signalOrValueRef(null!==(_config$legend$symbol=\nconfig.legend.symbolBaseFillColor)&&void 0!==_config$legend$symbol?_config$legend$symbol:\"black\");property.fillOpacity=signalOrValueRef(null!==_legendCmpt$get3&&void 0!==_legendCmpt$get3?_legendCmpt$get3:1)}else if(isArray(property.fill)){var _ref,_getFirstConditionVal,_encoding$fill;if(_getMaxValue=null!==(_ref=null!==(_getFirstConditionVal=getFirstConditionValue(null!==(_encoding$fill=encoding.fill)&&void 0!==_encoding$fill?_encoding$fill:encoding.color))&&void 0!==_getFirstConditionVal?_getFirstConditionVal:\nmarkDef.fill)&&void 0!==_ref?_ref:$jscomp$destructuring$var208&&markDef.color)property.fill=signalOrValueRef(_getMaxValue)}property.stroke&&(\"stroke\"===channel||!$jscomp$destructuring$var208&&\"color\"===channel?delete property.stroke:property.stroke.field||_legendCmpt$get2?delete property.stroke:isArray(property.stroke)&&(_ref=getFirstDefined(getFirstConditionValue(encoding.stroke||encoding.color),markDef.stroke,$jscomp$destructuring$var208?markDef.color:void 0))&&(property.stroke={value:_ref}));\"opacity\"!==\nchannel&&((_ref=isFieldDef(fieldOrDatumDef)&&selectedCondition(model,legendCmpt,fieldOrDatumDef))?property.opacity=[Object.assign({},{test:_ref},signalOrValueRef(null!==_legendCmpt$get3&&void 0!==_legendCmpt$get3?_legendCmpt$get3:1)),signalOrValueRef(config.legend.unselectedOpacity)]:_legendCmpt$get3&&(property.opacity=signalOrValueRef(_legendCmpt$get3)));property=Object.assign({},property,symbolsSpec);return isEmpty(property)?void 0:property}},gradient:function(gradientSpec,$jscomp$destructuring$var209){var {model,\nlegendType,legendCmpt}=$jscomp$destructuring$var209,_legendCmpt$get4;if(\"gradient\"===legendType){var {config,markDef,encoding}=model;$jscomp$destructuring$var209={};var opacity=void 0===(null!==(_legendCmpt$get4=legendCmpt.get(\"gradientOpacity\"))&&void 0!==_legendCmpt$get4?_legendCmpt$get4:config.legend.gradientOpacity)?getMaxValue(encoding.opacity)||markDef.opacity:void 0;opacity&&($jscomp$destructuring$var209.opacity=signalOrValueRef(opacity));$jscomp$destructuring$var209=Object.assign({},$jscomp$destructuring$var209,\ngradientSpec);return isEmpty($jscomp$destructuring$var209)?void 0:$jscomp$destructuring$var209}},labels:function(specifiedlabelsSpec,$jscomp$destructuring$var210){var {fieldOrDatumDef,model,channel,legendCmpt}=$jscomp$destructuring$var210;$jscomp$destructuring$var210=model.legend(channel)||{};const config=model.config;var condition=isFieldDef(fieldOrDatumDef)?selectedCondition(model,legendCmpt,fieldOrDatumDef):void 0;condition=condition?[{test:condition,value:1},{value:config.legend.unselectedOpacity}]:\nvoid 0;const {format,formatType}=$jscomp$destructuring$var210;$jscomp$destructuring$var210=isCustomFormatType(formatType)?formatCustomType({fieldOrDatumDef,field:\"datum.value\",format,formatType,config}):void 0;specifiedlabelsSpec=Object.assign({},condition?{opacity:condition}:{},$jscomp$destructuring$var210?{text:$jscomp$destructuring$var210}:{},specifiedlabelsSpec);return isEmpty(specifiedlabelsSpec)?void 0:specifiedlabelsSpec},entries:function(entriesSpec,$jscomp$destructuring$var211){({legendCmpt:$jscomp$destructuring$var211}=\n$jscomp$destructuring$var211);$jscomp$destructuring$var211=$jscomp$destructuring$var211.get(\"selections\");return(null===$jscomp$destructuring$var211||void 0===$jscomp$destructuring$var211?0:$jscomp$destructuring$var211.length)?Object.assign({},entriesSpec,{fill:{value:\"transparent\"}}):entriesSpec}},legendRules={direction:$jscomp$destructuring$var212=>{({direction:$jscomp$destructuring$var212}=$jscomp$destructuring$var212);return $jscomp$destructuring$var212},format:$jscomp$destructuring$var213=>{var {fieldOrDatumDef,\nlegend,config}=$jscomp$destructuring$var213;const {format,formatType}=legend;return guideFormat(fieldOrDatumDef,fieldOrDatumDef.type,format,formatType,config,!1)},formatType:$jscomp$destructuring$var214=>{var {legend,fieldOrDatumDef,scaleType}=$jscomp$destructuring$var214;({formatType:$jscomp$destructuring$var214}=legend);return guideFormatType($jscomp$destructuring$var214,fieldOrDatumDef,scaleType)},gradientLength:params=>{var _ref,_legend$gradientLengt;const {legend,legendConfig}=params;if(null!==\n(_ref=null!==(_legend$gradientLengt=legend.gradientLength)&&void 0!==_legend$gradientLengt?_legend$gradientLengt:legendConfig.gradientLength)&&void 0!==_ref)params=_ref;else{{var {legendConfig:legendConfig$jscomp$0,model,direction,orient,scaleType}=params;const {gradientHorizontalMaxLength,gradientHorizontalMinLength,gradientVerticalMaxLength,gradientVerticalMinLength}=legendConfig$jscomp$0;params=scaleType in CONTINUOUS_TO_CONTINUOUS_INDEX?\"horizontal\"===direction?\"top\"===orient||\"bottom\"===orient?\ngradientLengthSignal(model,\"width\",gradientHorizontalMinLength,gradientHorizontalMaxLength):gradientHorizontalMinLength:gradientLengthSignal(model,\"height\",gradientVerticalMinLength,gradientVerticalMaxLength):void 0}}return params},labelOverlap:$jscomp$destructuring$var215=>{var {legend,legendConfig,scaleType}=$jscomp$destructuring$var215,_ref2,_legend$labelOverlap;$jscomp$destructuring$var215=null!==(_ref2=null!==(_legend$labelOverlap=legend.labelOverlap)&&void 0!==_legend$labelOverlap?_legend$labelOverlap:\nlegendConfig.labelOverlap)&&void 0!==_ref2?_ref2:contains([\"quantile\",\"threshold\",\"log\",\"symlog\"],scaleType)?\"greedy\":void 0;return $jscomp$destructuring$var215},symbolType:$jscomp$destructuring$var216=>{var {legend,markDef,channel,encoding}=$jscomp$destructuring$var216,_legend$symbolType;if(null!==(_legend$symbolType=legend.symbolType)&&void 0!==_legend$symbolType)var JSCompiler_temp=_legend$symbolType;else a:{$jscomp$destructuring$var216=markDef.type;_legend$symbolType=markDef.shape;if(\"shape\"!==\nchannel&&(_legend$symbolType=null!==(JSCompiler_temp=getFirstConditionValue(encoding.shape))&&void 0!==JSCompiler_temp?JSCompiler_temp:_legend$symbolType)){JSCompiler_temp=_legend$symbolType;break a}switch($jscomp$destructuring$var216){case \"bar\":case \"rect\":case \"image\":case \"square\":JSCompiler_temp=\"square\";break a;case \"line\":case \"trail\":case \"rule\":JSCompiler_temp=\"stroke\";break a;case \"arc\":case \"point\":case \"circle\":case \"tick\":case \"geoshape\":case \"area\":case \"text\":JSCompiler_temp=\"circle\";\nbreak a}JSCompiler_temp=void 0}return JSCompiler_temp},title:$jscomp$destructuring$var217=>{var {fieldOrDatumDef,config}=$jscomp$destructuring$var217;return title$jscomp$0(fieldOrDatumDef,config,{allowDisabling:!0})},type:$jscomp$destructuring$var218=>{var {legendType,scaleType,channel}=$jscomp$destructuring$var218;if(isColorChannel(channel)&&scaleType in CONTINUOUS_TO_CONTINUOUS_INDEX){if(\"gradient\"===legendType)return}else if(\"symbol\"===legendType)return;return legendType},values:$jscomp$destructuring$var219=>\n{var {fieldOrDatumDef,legend}=$jscomp$destructuring$var219;$jscomp$destructuring$var219=legend.values;$jscomp$destructuring$var219=isArray($jscomp$destructuring$var219)?valueArray(fieldOrDatumDef,$jscomp$destructuring$var219):isSignalRef($jscomp$destructuring$var219)?$jscomp$destructuring$var219:void 0;return $jscomp$destructuring$var219}},PROJECTION_PROPERTIES=\"type clipAngle clipExtent center rotate precision reflectX reflectY coefficient distance fraction lobes parallel radius ratio spacing tilt\".split(\" \");\nclass ProjectionComponent extends Split{constructor(name,specifiedProjection,size,data){super(Object.assign({},specifiedProjection),{name});this.specifiedProjection=specifiedProjection;this.size=size;this.data=data;_defineProperty(this,\"merged\",!1)}get isFit(){return!!this.data}}class BinNode extends DataFlowNode{clone(){return new BinNode(null,duplicate(this.bins))}constructor(parent,bins){super(parent);this.bins=bins}static makeFromEncoding(parent,model){const bins=model.reduceFieldDef((binComponentIndex,\nfieldDef,channel)=>{if(isTypedFieldDef(fieldDef)&&isBinning(fieldDef.bin)){const {key,binComponent}=createBinComponent(fieldDef,fieldDef.bin,model);var JSCompiler_temp_const=Object,JSCompiler_temp_const$jscomp$0=JSCompiler_temp_const.assign,JSCompiler_temp_const$jscomp$1=binComponentIndex[key];var config=model.config;if(binRequiresRange(fieldDef,channel)){var _ref,_model$axis;channel=isUnitModel(model)?null!==(_ref=null!==(_model$axis=model.axis(channel))&&void 0!==_model$axis?_model$axis:model.legend(channel))&&\nvoid 0!==_ref?_ref:{}:{};_ref=vgField(fieldDef,{expr:\"datum\"});_model$axis=vgField(fieldDef,{expr:\"datum\",binSuffix:\"end\"});fieldDef={formulaAs:vgField(fieldDef,{binSuffix:\"range\",forAs:!0}),formula:binFormatExpression(_ref,_model$axis,channel.format,channel.formatType,config)}}else fieldDef={};binComponentIndex[key]=JSCompiler_temp_const$jscomp$0.call(JSCompiler_temp_const,{},binComponent,JSCompiler_temp_const$jscomp$1,fieldDef)}return binComponentIndex},{});return isEmpty(bins)?null:new BinNode(parent,\nbins)}static makeFromTransform(parent,t,model){const {key,binComponent}=createBinComponent(t,t.bin,model);return new BinNode(parent,{[key]:binComponent})}merge(other,renameSignal){for(const key of keys$jscomp$0(other.bins))key in this.bins?(renameSignal(other.bins[key].signal,this.bins[key].signal),this.bins[key].as=unique([...this.bins[key].as,...other.bins[key].as],hash)):this.bins[key]=other.bins[key];for(const child of other.children)other.removeChild(child),child.parent=this;other.remove()}producedFields(){return new Set(vals$jscomp$0(this.bins).map(c=>\nc.as).flat(2))}dependentFields(){return new Set(vals$jscomp$0(this.bins).map(c=>c.field))}hash(){return\"Bin \".concat(hash(this.bins))}assemble(){return vals$jscomp$0(this.bins).flatMap(bin=>{const transform=[],[binAs,...remainingAs]=bin.as;var $jscomp$destructuring$var225=bin.bin,$jscomp$destructuring$var226=Object.assign({},$jscomp$destructuring$var225);$jscomp$destructuring$var225=$jscomp$destructuring$var225.extent;$jscomp$destructuring$var226=(delete $jscomp$destructuring$var226.extent,$jscomp$destructuring$var226);\n$jscomp$destructuring$var226=Object.assign({},{type:\"bin\",field:replacePathInField(bin.field),as:binAs,signal:bin.signal},isSelectionExtent($jscomp$destructuring$var225)?{extent:null}:{extent:$jscomp$destructuring$var225},bin.span?{span:{signal:\"span(\".concat(bin.span,\")\")}}:{},$jscomp$destructuring$var226);!$jscomp$destructuring$var225&&bin.extentSignal&&(transform.push({type:\"extent\",field:replacePathInField(bin.field),signal:bin.extentSignal}),$jscomp$destructuring$var226.extent={signal:bin.extentSignal});\ntransform.push($jscomp$destructuring$var226);for(const as of remainingAs)for($jscomp$destructuring$var225=0;2>$jscomp$destructuring$var225;$jscomp$destructuring$var225++)transform.push({type:\"formula\",expr:vgField({field:binAs[$jscomp$destructuring$var225]},{expr:\"datum\"}),as:as[$jscomp$destructuring$var225]});bin.formula&&transform.push({type:\"formula\",expr:bin.formula,as:bin.formulaAs});return transform})}}class AggregateNode extends DataFlowNode{clone(){return new AggregateNode(null,new Set(this.dimensions),\nduplicate(this.measures))}constructor(parent,dimensions,measures){super(parent);this.dimensions=dimensions;this.measures=measures}get groupBy(){return this.dimensions}static makeFromEncoding(parent,model){let isAggregate=!1;model.forEachFieldDef(fd=>{fd.aggregate&&(isAggregate=!0)});const meas={},dims=new Set;if(!isAggregate)return null;model.forEachFieldDef((fieldDef,channel)=>{const {aggregate,field}=fieldDef;if(aggregate)if(\"count\"===aggregate){var _meas$;meas[\"*\"]=null!==(_meas$=meas[\"*\"])&&void 0!==\n_meas$?_meas$:{};meas[\"*\"].count=new Set([vgField(fieldDef,{forAs:!0})])}else{if(isArgminDef(aggregate)||isArgmaxDef(aggregate)){var _meas$argField;fieldDef=isArgminDef(aggregate)?\"argmin\":\"argmax\";_meas$=aggregate[fieldDef];meas[_meas$]=null!==(_meas$argField=meas[_meas$])&&void 0!==_meas$argField?_meas$argField:{};meas[_meas$][fieldDef]=new Set([vgField({op:fieldDef,field:_meas$},{forAs:!0})])}else{var _meas$field;meas[field]=null!==(_meas$field=meas[field])&&void 0!==_meas$field?_meas$field:{};\nmeas[field][aggregate]=new Set([vgField(fieldDef,{forAs:!0})])}if(SCALE_CHANNEL_INDEX[channel]&&\"unaggregated\"===model.scaleDomain(channel)){var _meas$field2;meas[field]=null!==(_meas$field2=meas[field])&&void 0!==_meas$field2?_meas$field2:{};meas[field].min=new Set([vgField({field,aggregate:\"min\"},{forAs:!0})]);meas[field].max=new Set([vgField({field,aggregate:\"max\"},{forAs:!0})])}}else _meas$argField=isUnitModel(model)?model.encoding[getSecondaryRangeChannel(channel)]:void 0,isTypedFieldDef(fieldDef)&&\nisUnitModel(model)&&hasBand(channel,fieldDef,_meas$argField,model.stack,model.markDef,model.config)?(dims.add(vgField(fieldDef,{})),dims.add(vgField(fieldDef,{suffix:\"end\"})),fieldDef.bin&&binRequiresRange(fieldDef,channel)&&dims.add(vgField(fieldDef,{binSuffix:\"range\"}))):channel in GEO_POSIITON_CHANNEL_INDEX?(channel=getPositionChannelFromLatLong(channel),dims.add(model.getName(channel))):dims.add(vgField(fieldDef))});return 0===dims.size+keys$jscomp$0(meas).length?null:new AggregateNode(parent,\ndims,meas)}static makeFromTransform(parent,t){const dims=new Set,meas={};for(const s of t.aggregate){const {op,field,as}=s;if(op)if(\"count\"===op){var _meas$2;meas[\"*\"]=null!==(_meas$2=meas[\"*\"])&&void 0!==_meas$2?_meas$2:{};meas[\"*\"].count=new Set([as?as:vgField(s,{forAs:!0})])}else{var _meas$field3;meas[field]=null!==(_meas$field3=meas[field])&&void 0!==_meas$field3?_meas$field3:{};meas[field][op]=new Set([as?as:vgField(s,{forAs:!0})])}}for(const s of null!==(_t$groupby=t.groupby)&&void 0!==_t$groupby?\n_t$groupby:[]){var _t$groupby;dims.add(s)}return 0===dims.size+keys$jscomp$0(meas).length?null:new AggregateNode(parent,dims,meas)}merge(other){if(setEqual(this.dimensions,other.dimensions)){var parentMeasures=this.measures;other=other.measures;for(const field of keys$jscomp$0(other)){const ops=other[field];for(const op of keys$jscomp$0(ops))if(field in parentMeasures){var _parentMeasures$field;parentMeasures[field][op]=new Set([...(null!==(_parentMeasures$field=parentMeasures[field][op])&&void 0!==\n_parentMeasures$field?_parentMeasures$field:[]),...ops[op]])}else parentMeasures[field]={[op]:ops[op]}}return!0}current.debug(...[\"different dimensions, cannot merge\"]);return!1}addDimensions(fields){fields.forEach(this.dimensions.add,this.dimensions)}dependentFields(){return new Set([...this.dimensions,...keys$jscomp$0(this.measures)])}producedFields(){const out=new Set;for(const field of keys$jscomp$0(this.measures))for(const op of keys$jscomp$0(this.measures[field])){const m=this.measures[field][op];\n0===m.size?out.add(\"\".concat(op,\"_\").concat(field)):m.forEach(out.add,out)}return out}hash(){return\"Aggregate \".concat(hash({dimensions:this.dimensions,measures:this.measures}))}assemble(){const ops=[],fields=[],as=[];for(const field of keys$jscomp$0(this.measures))for(const op of keys$jscomp$0(this.measures[field]))for(const alias of this.measures[field][op])as.push(alias),ops.push(op),fields.push(\"*\"===field?null:replacePathInField(field));return{type:\"aggregate\",groupby:[...this.dimensions].map(replacePathInField),\nops,fields,as}}}class FacetNode extends DataFlowNode{constructor(parent,model,name,data){super(parent);this.model=model;this.name=name;this.data=data;_defineProperty(this,\"column\",void 0);_defineProperty(this,\"row\",void 0);_defineProperty(this,\"facet\",void 0);_defineProperty(this,\"childModel\",void 0);for(const channel of FACET_CHANNELS)if(parent=model.facet[channel]){const {bin,sort}=parent;this[channel]=Object.assign({},{name:model.getName(\"\".concat(channel,\"_domain\")),fields:[vgField(parent),...(isBinning(bin)?\n[vgField(parent,{binSuffix:\"end\"})]:[])]},isSortField(sort)?{sortField:sort}:isArray(sort)?{sortIndexField:sortArrayIndexField(parent,channel)}:{})}this.childModel=model.child}hash(){let out=\"Facet\";for(const channel of FACET_CHANNELS)this[channel]&&(out+=\" \".concat(channel.charAt(0),\":\").concat(hash(this[channel])));return out}get fields(){const f=[];for(const channel of FACET_CHANNELS){var _this$channel;(null===(_this$channel=this[channel])||void 0===_this$channel?0:_this$channel.fields)&&f.push(...this[channel].fields)}return f}dependentFields(){const depFields=\nnew Set(this.fields);for(const channel of FACET_CHANNELS)this[channel]&&(this[channel].sortField&&depFields.add(this[channel].sortField.field),this[channel].sortIndexField&&depFields.add(this[channel].sortIndexField));return depFields}producedFields(){return new Set}getSource(){return this.name}getChildIndependentFieldsWithStep(){const childIndependentFieldsWithStep={};for(const channel of POSITION_SCALE_CHANNELS){var childScaleComponent=this.childModel.component.scales[channel];if(childScaleComponent&&\n!childScaleComponent.merged){var type=childScaleComponent.get(\"type\");childScaleComponent=childScaleComponent.get(\"range\");type in DISCRETE_DOMAIN_INDEX&&isVgRangeStep(childScaleComponent)&&(type=assembleDomain(this.childModel,channel),(type=getFieldFromDomain(type))?childIndependentFieldsWithStep[channel]=type:warn(unknownField(channel)))}}return childIndependentFieldsWithStep}assembleRowColumnHeaderData(channel,crossedDataName,childIndependentFieldsWithStep){const childChannel={row:\"y\",column:\"x\"}[channel],\nfields=[],ops=[],as=[];childIndependentFieldsWithStep&&childIndependentFieldsWithStep[childChannel]&&(crossedDataName?(fields.push(\"distinct_\".concat(childIndependentFieldsWithStep[childChannel])),ops.push(\"max\")):(fields.push(childIndependentFieldsWithStep[childChannel]),ops.push(\"distinct\")),as.push(\"distinct_\".concat(childIndependentFieldsWithStep[childChannel])));const {sortField,sortIndexField}=this[channel];if(sortField){const {op=\"min\",field}=sortField;fields.push(field);ops.push(op);as.push(vgField(sortField,\n{forAs:!0}))}else sortIndexField&&(fields.push(sortIndexField),ops.push(\"max\"),as.push(sortIndexField));return{name:this[channel].name,source:null!==crossedDataName&&void 0!==crossedDataName?crossedDataName:this.data,transform:[Object.assign({},{type:\"aggregate\",groupby:this[channel].fields},fields.length?{fields,ops,as}:{})]}}assembleFacetHeaderData(childIndependentFieldsWithStep){const {columns}=this.model.layout,{layoutHeaders}=this.model.component,data=[],hasSharedAxis={};for(const headerChannel of HEADER_CHANNELS){for(const headerType of HEADER_TYPES){var _ref,\nheaders=null!==(_ref=layoutHeaders[headerChannel]&&layoutHeaders[headerChannel][headerType])&&void 0!==_ref?_ref:[];for(const header of headers){var _header$axes;if(0<(null===(_header$axes=header.axes)||void 0===_header$axes?void 0:_header$axes.length)){hasSharedAxis[headerChannel]=!0;break}}}hasSharedAxis[headerChannel]&&(headers='length(data(\"'.concat(this.facet.name,'\"))'),headers=\"row\"===headerChannel?columns?{signal:\"ceil(\".concat(headers,\" / \").concat(columns,\")\")}:1:columns?{signal:\"min(\".concat(headers,\n\", \").concat(columns,\")\")}:{signal:headers},data.push({name:\"\".concat(this.facet.name,\"_\").concat(headerChannel),transform:[{type:\"sequence\",start:0,stop:headers}]}))}const {row,column}=hasSharedAxis;(row||column)&&data.unshift(this.assembleRowColumnHeaderData(\"facet\",null,childIndependentFieldsWithStep));return data}assemble(){const data=[];var crossedDataName=null;const childIndependentFieldsWithStep=this.getChildIndependentFieldsWithStep(),{column,row,facet}=this;if(column&&row&&(childIndependentFieldsWithStep.x||\nchildIndependentFieldsWithStep.y)){var _childIndependentFiel,_childIndependentFiel2;crossedDataName=\"cross_\".concat(this.column.name,\"_\").concat(this.row.name);const fields=[].concat(null!==(_childIndependentFiel=childIndependentFieldsWithStep.x)&&void 0!==_childIndependentFiel?_childIndependentFiel:[],null!==(_childIndependentFiel2=childIndependentFieldsWithStep.y)&&void 0!==_childIndependentFiel2?_childIndependentFiel2:[]);_childIndependentFiel=fields.map(()=>\"distinct\");data.push({name:crossedDataName,\nsource:this.data,transform:[{type:\"aggregate\",groupby:this.fields,fields,ops:_childIndependentFiel}]})}for(const channel of[\"column\",\"row\"])this[channel]&&data.push(this.assembleRowColumnHeaderData(channel,crossedDataName,childIndependentFieldsWithStep));facet&&(crossedDataName=this.assembleFacetHeaderData(childIndependentFieldsWithStep))&&data.push(...crossedDataName);return data}}class ParseNode extends DataFlowNode{clone(){return new ParseNode(null,duplicate(this._parse))}constructor(parent,parse){super(parent);\n_defineProperty(this,\"_parse\",void 0);this._parse=parse}hash(){return\"Parse \".concat(hash(this._parse))}static makeExplicit(parent,model,ancestorParse){let explicit={};model=model.data;!isGenerator(model)&&model&&model.format&&model.format.parse&&(explicit=model.format.parse);return this.makeWithAncestors(parent,explicit,{},ancestorParse)}static makeWithAncestors(parent,explicit,implicit,ancestorParse){for(var field of keys$jscomp$0(implicit)){const parsedAs=ancestorParse.getWithExplicit(field);void 0!==\nparsedAs.value&&(parsedAs.explicit||parsedAs.value===implicit[field]||\"derived\"===parsedAs.value||\"flatten\"===implicit[field]?delete implicit[field]:warn(differentParse(field,implicit[field],parsedAs.value)))}for(var field$jscomp$0 of keys$jscomp$0(explicit))field=ancestorParse.get(field$jscomp$0),void 0!==field&&(field===explicit[field$jscomp$0]?delete explicit[field$jscomp$0]:warn(differentParse(field$jscomp$0,explicit[field$jscomp$0],field)));explicit=new Split(explicit,implicit);ancestorParse.copyAll(explicit);\nimplicit={};for(const key of keys$jscomp$0(explicit.combine()))field$jscomp$0=explicit.get(key),null!==field$jscomp$0&&(implicit[key]=field$jscomp$0);return 0===keys$jscomp$0(implicit).length||ancestorParse.parseNothing?null:new ParseNode(parent,implicit)}get parse(){return this._parse}merge(other){this._parse=Object.assign({},this._parse,other.parse);other.remove()}assembleFormatParse(){const formatParse={};for(const field of keys$jscomp$0(this._parse)){const p=this._parse[field];1===accessPathDepth(field)&&\n(formatParse[field]=p)}return formatParse}producedFields(){return new Set(keys$jscomp$0(this._parse))}dependentFields(){return new Set(keys$jscomp$0(this._parse))}assembleTransforms(onlyNested){onlyNested=void 0===onlyNested?!1:onlyNested;return keys$jscomp$0(this._parse).filter(field=>onlyNested?1<accessPathDepth(field):!0).map(field=>{const expr=parseExpression$1(field,this._parse[field]);return expr?{type:\"formula\",expr,as:removePathFromField(field)}:null}).filter(t=>null!==t)}}class IdentifierNode extends DataFlowNode{clone(){return new IdentifierNode(null)}constructor(parent){super(parent)}dependentFields(){return new Set}producedFields(){return new Set([\"_vgsid_\"])}hash(){return\"Identifier\"}assemble(){return{type:\"identifier\",\nas:\"_vgsid_\"}}}class GraticuleNode extends DataFlowNode{clone(){return new GraticuleNode(null,this.params)}constructor(parent,params){super(parent);this.params=params}dependentFields(){return new Set}producedFields(){}hash(){return\"Graticule \".concat(hash(this.params))}assemble(){return Object.assign({},{type:\"graticule\"},!0===this.params?{}:this.params)}}class SequenceNode extends DataFlowNode{clone(){return new SequenceNode(null,this.params)}constructor(parent,params){super(parent);this.params=\nparams}dependentFields(){return new Set}producedFields(){var _this$params$as;return new Set([null!==(_this$params$as=this.params.as)&&void 0!==_this$params$as?_this$params$as:\"data\"])}hash(){return\"Hash \".concat(hash(this.params))}assemble(){return Object.assign({},{type:\"sequence\"},this.params)}}class SourceNode extends DataFlowNode{constructor(data){var _data;super(null);_defineProperty(this,\"_data\",void 0);_defineProperty(this,\"_name\",void 0);_defineProperty(this,\"_generator\",void 0);data=null!==\n(_data=data)&&void 0!==_data?_data:{name:\"source\"};let format;isGenerator(data)||(format=data.format?Object.assign({},omit(data.format,[\"parse\"])):{});if(\"values\"in data)this._data={values:data.values};else if(\"url\"in data)this._data={url:data.url},format.type||(_data=/(?:\\.([^.]+))?$/.exec(data.url)[1],contains([\"json\",\"csv\",\"tsv\",\"dsv\",\"topojson\"],_data)||(_data=\"json\"),format.type=_data);else if(\"sphere\"in data)this._data={values:[{type:\"Sphere\"}]};else if(isNamedData(data)||isGenerator(data))this._data=\n{};this._generator=isGenerator(data);data.name&&(this._name=data.name);format&&!isEmpty(format)&&(this._data.format=format)}dependentFields(){return new Set}producedFields(){}get data(){return this._data}hasName(){return!!this._name}get isGenerator(){return this._generator}get dataName(){return this._name}set dataName(name){this._name=name}set parent(parent){throw Error(\"Source nodes have to be roots.\");}remove(){throw Error(\"Source nodes are roots and cannot be removed.\");}hash(){throw Error(\"Cannot hash sources\");\n}assemble(){return Object.assign({},{name:this._name},this._data,{transform:[]})}}var _modified=new WeakMap;class Optimizer{constructor(){_modified.set(this,{writable:!0,value:void 0});_classPrivateFieldSet(this,_modified,!1)}setModified(){_classPrivateFieldSet(this,_modified,!0)}get modifiedFlag(){var JSCompiler_inline_result=_modified.get(this);if(!JSCompiler_inline_result)throw new TypeError(\"attempted to get private field on non-instance\");JSCompiler_inline_result=JSCompiler_inline_result.get?\nJSCompiler_inline_result.get.call(this):JSCompiler_inline_result.value;return JSCompiler_inline_result}}class BottomUpOptimizer extends Optimizer{getNodeDepths(node,depth,depths){depths.set(node,depth);for(const child of node.children)this.getNodeDepths(child,depth+1,depths);return depths}optimize(node){node=[...this.getNodeDepths(node,0,new Map).entries()].sort((a,b)=>b[1]-a[1]);for(const tuple of node)this.run(tuple[0]);return this.modifiedFlag}}class TopDownOptimizer extends Optimizer{optimize(node){this.run(node);\nfor(const child of node.children)this.optimize(child);return this.modifiedFlag}}class MergeIdenticalNodes extends TopDownOptimizer{mergeNodes(parent,nodes){const mergedNode=nodes.shift();for(const node of nodes)parent.removeChild(node),node.parent=mergedNode,node.remove()}run(node){const hashes=node.children.map(x=>x.hash()),buckets={};for(let i=0;i<hashes.length;i++)void 0===buckets[hashes[i]]?buckets[hashes[i]]=[node.children[i]]:buckets[hashes[i]].push(node.children[i]);for(const k of keys$jscomp$0(buckets))1<\nbuckets[k].length&&(this.setModified(),this.mergeNodes(node,buckets[k]))}}class RemoveUnnecessaryIdentifierNodes extends TopDownOptimizer{constructor(model){super();_defineProperty(this,\"requiresSelectionId\",void 0);this.requiresSelectionId=model&&requiresSelectionId(model)}run(node){!(node instanceof IdentifierNode)||this.requiresSelectionId&&(isDataSourceNode(node.parent)||node.parent instanceof AggregateNode||node.parent instanceof ParseNode)||(this.setModified(),node.remove())}}class RemoveDuplicateTimeUnits extends Optimizer{optimize(node){this.run(node,\nnew Set);return this.modifiedFlag}run(node,timeUnitFields){let producedFields=new Set;node instanceof TimeUnitNode&&(producedFields=node.producedFields(),hasIntersection(producedFields,timeUnitFields)&&(this.setModified(),node.removeFormulas(timeUnitFields),0===node.producedFields.length&&node.remove()));for(const child of node.children)this.run(child,new Set([...timeUnitFields,...producedFields]))}}class RemoveUnnecessaryOutputNodes extends TopDownOptimizer{constructor(){super()}run(node){node instanceof\nOutputNode&&!node.isRequired()&&(this.setModified(),node.remove())}}class MoveParseUp extends BottomUpOptimizer{run(node){if(!(isDataSourceNode(node)||1<node.numChildren()))for(const child of node.children)child instanceof ParseNode&&(node instanceof ParseNode?(this.setModified(),node.merge(child)):fieldIntersection(node.producedFields(),child.dependentFields())||(this.setModified(),child.swapWithParent()))}}class MergeParse extends BottomUpOptimizer{run(node){const originalChildren=[...node.children];\nvar parseChildren=node.children.filter(child=>child instanceof ParseNode);if(1<node.numChildren()&&1<=parseChildren.length){const commonParse={};var conflictingParse=new Set;for(const parseNode of parseChildren){parseChildren=parseNode.parse;for(const k of keys$jscomp$0(parseChildren))k in commonParse?commonParse[k]!==parseChildren[k]&&conflictingParse.add(k):commonParse[k]=parseChildren[k]}for(const field of conflictingParse)delete commonParse[field];if(!isEmpty(commonParse)){this.setModified();\nconflictingParse=new ParseNode(node,commonParse);for(const childNode of originalChildren){if(childNode instanceof ParseNode)for(const key of keys$jscomp$0(commonParse))delete childNode.parse[key];node.removeChild(childNode);childNode.parent=conflictingParse;childNode instanceof ParseNode&&0===keys$jscomp$0(childNode.parse).length&&childNode.remove()}}}}}class RemoveUnusedSubtrees extends BottomUpOptimizer{run(node){node instanceof OutputNode||0<node.numChildren()||node instanceof FacetNode||node instanceof\nSourceNode||(this.setModified(),node.remove())}}class MergeTimeUnits extends BottomUpOptimizer{run(node){node=node.children.filter(x=>x instanceof TimeUnitNode);const combination=node.pop();for(const timeUnit of node)this.setModified(),combination.merge(timeUnit)}}class MergeAggregates extends BottomUpOptimizer{run(node){var aggChildren=node.children.filter(child=>child instanceof AggregateNode);const groupedAggregates={};for(var agg$jscomp$0 of aggChildren)aggChildren=hash(agg$jscomp$0.groupBy),\naggChildren in groupedAggregates||(groupedAggregates[aggChildren]=[]),groupedAggregates[aggChildren].push(agg$jscomp$0);for(const group of keys$jscomp$0(groupedAggregates))if(agg$jscomp$0=groupedAggregates[group],1<agg$jscomp$0.length){aggChildren=agg$jscomp$0.pop();for(const agg of agg$jscomp$0)aggChildren.merge(agg)&&(node.removeChild(agg),agg.parent=aggChildren,agg.remove(),this.setModified())}}}class MergeBins extends BottomUpOptimizer{constructor(model){super();this.model=model}run(node){var moveBinsUp=\n!(isDataSourceNode(node)||node instanceof FilterNode||node instanceof ParseNode||node instanceof IdentifierNode);const promotableBins=[],remainingBins=[];for(const child of node.children)child instanceof BinNode&&(moveBinsUp&&!fieldIntersection(node.producedFields(),child.dependentFields())?promotableBins.push(child):remainingBins.push(child));if(0<promotableBins.length){moveBinsUp=promotableBins.pop();for(const bin of promotableBins)moveBinsUp.merge(bin,this.model.renameSignal.bind(this.model));\nthis.setModified();node instanceof BinNode?node.merge(moveBinsUp,this.model.renameSignal.bind(this.model)):moveBinsUp.swapWithParent()}if(1<remainingBins.length){node=remainingBins.pop();for(const bin of remainingBins)node.merge(bin,this.model.renameSignal.bind(this.model));this.setModified()}}}class MergeOutputs extends BottomUpOptimizer{run(node){var children=[...node.children];if(some(children,child=>child instanceof OutputNode)&&!(1>=node.numChildren())){var otherChildren=[];for(const child of children)if(child instanceof\nOutputNode){for(children=child;1===children.numChildren();){const [theChild]=children.children;if(theChild instanceof OutputNode)children=theChild;else break}otherChildren.push(...children.children);if(mainOutput)node.removeChild(child),child.parent=mainOutput.parent,mainOutput.parent.removeChild(mainOutput),mainOutput.parent=children,this.setModified();else var mainOutput=children}else otherChildren.push(child);if(otherChildren.length){this.setModified();for(const child of otherChildren)child.parent.removeChild(child),\nchild.parent=mainOutput}}}}class JoinAggregateTransformNode extends DataFlowNode{clone(){return new JoinAggregateTransformNode(null,duplicate(this.transform))}constructor(parent,transform){super(parent);this.transform=transform}addDimensions(fields){this.transform.groupby=unique(this.transform.groupby.concat(fields),d=>d)}dependentFields(){const out=new Set;this.transform.groupby&&this.transform.groupby.forEach(out.add,out);this.transform.joinaggregate.map(w=>w.field).filter(f=>void 0!==f).forEach(out.add,\nout);return out}producedFields(){return new Set(this.transform.joinaggregate.map(this.getDefaultName))}getDefaultName(joinAggregateFieldDef){var _joinAggregateFieldDe;return null!==(_joinAggregateFieldDe=joinAggregateFieldDef.as)&&void 0!==_joinAggregateFieldDe?_joinAggregateFieldDe:vgField(joinAggregateFieldDef)}hash(){return\"JoinAggregateTransform \".concat(hash(this.transform))}assemble(){const fields=[],ops=[],as=[];for(var joinaggregate of this.transform.joinaggregate)ops.push(joinaggregate.op),\nas.push(this.getDefaultName(joinaggregate)),fields.push(void 0===joinaggregate.field?null:joinaggregate.field);joinaggregate=this.transform.groupby;return Object.assign({},{type:\"joinaggregate\",as,ops,fields},void 0!==joinaggregate?{groupby:joinaggregate}:{})}}class StackNode extends DataFlowNode{clone(){return new StackNode(null,duplicate(this._stack))}constructor(parent,stack){super(parent);_defineProperty(this,\"_stack\",void 0);this._stack=stack}static makeFromTransform(parent,stackTransform){const {stack,\ngroupby,as,offset=\"zero\"}=stackTransform;var sortFields=[];const sortOrder=[];if(void 0!==stackTransform.sort)for(const sortField of stackTransform.sort)sortFields.push(sortField.field),sortOrder.push(getFirstDefined(sortField.order,\"ascending\"));sortFields={field:sortFields,order:sortOrder};stackTransform=isValidAsArray(as)?as:isString(as)?[as,as+\"_end\"]:[stackTransform.stack+\"_start\",stackTransform.stack+\"_end\"];return new StackNode(parent,{stackField:stack,groupby,offset,sort:sortFields,facetby:[],\nas:stackTransform})}static makeFromEncoding(parent,model){var stackProperties=model.stack,{encoding}=model;if(!stackProperties)return null;const {groupbyChannel,fieldChannel,offset,impute}=stackProperties;let dimensionFieldDef;groupbyChannel&&(dimensionFieldDef=getFieldDef(encoding[groupbyChannel]));stackProperties=getStackByFields(model);encoding=model.encoding.order;encoding=isArray(encoding)||isFieldDef(encoding)?sortParams(encoding):stackProperties.reduce((s,field)=>{s.field.push(field);s.order.push(\"y\"===\nfieldChannel?\"descending\":\"ascending\");return s},{field:[],order:[]});return new StackNode(parent,{dimensionFieldDef,stackField:model.vgField(fieldChannel),facetby:[],stackby:stackProperties,sort:encoding,offset,impute,as:[model.vgField(fieldChannel,{suffix:\"start\",forAs:!0}),model.vgField(fieldChannel,{suffix:\"end\",forAs:!0})]})}get stack(){return this._stack}addDimensions(fields){this._stack.facetby.push(...fields)}dependentFields(){const out=new Set;out.add(this._stack.stackField);this.getGroupbyFields().forEach(out.add,\nout);this._stack.facetby.forEach(out.add,out);this._stack.sort.field.forEach(out.add,out);return out}producedFields(){return new Set(this._stack.as)}hash(){return\"Stack \".concat(hash(this._stack))}getGroupbyFields(){const {dimensionFieldDef,impute,groupby}=this._stack;return dimensionFieldDef?dimensionFieldDef.bin?impute?[vgField(dimensionFieldDef,{binSuffix:\"mid\"})]:[vgField(dimensionFieldDef,{}),vgField(dimensionFieldDef,{binSuffix:\"end\"})]:[vgField(dimensionFieldDef)]:null!==groupby&&void 0!==\ngroupby?groupby:[]}assemble(){const transform=[],{facetby,dimensionFieldDef,stackField:field,stackby,sort,offset,impute,as}=this._stack;if(impute&&dimensionFieldDef){const {band=.5,bin}=dimensionFieldDef;bin&&transform.push({type:\"formula\",expr:\"\".concat(band,\"*\")+vgField(dimensionFieldDef,{expr:\"datum\"})+\"+\".concat(1-band,\"*\")+vgField(dimensionFieldDef,{expr:\"datum\",binSuffix:\"end\"}),as:vgField(dimensionFieldDef,{binSuffix:\"mid\",forAs:!0})});transform.push({type:\"impute\",field,groupby:[...stackby,\n...facetby],key:vgField(dimensionFieldDef,{binSuffix:\"mid\"}),method:\"value\",value:0})}transform.push({type:\"stack\",groupby:[...this.getGroupbyFields(),...facetby],field,sort,as,offset});return transform}}class WindowTransformNode extends DataFlowNode{clone(){return new WindowTransformNode(null,duplicate(this.transform))}constructor(parent,transform){super(parent);this.transform=transform}addDimensions(fields){this.transform.groupby=unique(this.transform.groupby.concat(fields),d=>d)}dependentFields(){var _this$transform$group,\n_this$transform$sort;const out=new Set;(null!==(_this$transform$group=this.transform.groupby)&&void 0!==_this$transform$group?_this$transform$group:[]).forEach(out.add,out);(null!==(_this$transform$sort=this.transform.sort)&&void 0!==_this$transform$sort?_this$transform$sort:[]).forEach(m=>out.add(m.field));this.transform.window.map(w=>w.field).filter(f=>void 0!==f).forEach(out.add,out);return out}producedFields(){return new Set(this.transform.window.map(this.getDefaultName))}getDefaultName(windowFieldDef){var _windowFieldDef$as;\nreturn null!==(_windowFieldDef$as=windowFieldDef.as)&&void 0!==_windowFieldDef$as?_windowFieldDef$as:vgField(windowFieldDef)}hash(){return\"WindowTransform \".concat(hash(this.transform))}assemble(){const fields=[],ops=[],as=[],params=[];for(var window of this.transform.window)ops.push(window.op),as.push(this.getDefaultName(window)),params.push(void 0===window.param?null:window.param),fields.push(void 0===window.field?null:window.field);window=this.transform.frame;const groupby=this.transform.groupby;\nif(window&&null===window[0]&&null===window[1]&&ops.every(o=>isAggregateOp(o)))return Object.assign({},{type:\"joinaggregate\",as,ops,fields},void 0!==groupby?{groupby}:{});const sortFields=[],sortOrder=[];if(void 0!==this.transform.sort)for(const sortField of this.transform.sort){var _sortField$order;sortFields.push(sortField.field);sortOrder.push(null!==(_sortField$order=sortField.order)&&void 0!==_sortField$order?_sortField$order:\"ascending\")}_sortField$order=this.transform.ignorePeers;return Object.assign({},\n{type:\"window\",params,as,ops,fields,sort:{field:sortFields,order:sortOrder}},void 0!==_sortField$order?{ignorePeers:_sortField$order}:{},void 0!==groupby?{groupby}:{},void 0!==window?{frame:window}:{})}}class SignalRefWrapper{constructor(exprGenerator){_defineProperty(this,\"signal\",void 0);Object.defineProperty(this,\"signal\",{enumerable:!0,get:exprGenerator})}static fromName(rename,signalName){return new SignalRefWrapper(()=>rename(signalName))}}class ScaleComponent extends Split{constructor(name,\ntypeWithExplicit){super({},{name});_defineProperty(this,\"merged\",!1);this.setWithExplicit(\"type\",typeWithExplicit)}domainDefinitelyIncludesZero(){return!1!==this.get(\"zero\")?!0:some(this.get(\"domains\"),d=>isArray(d)&&2===d.length&&0>=d[0]&&0<=d[1])}}const RANGE_PROPERTIES=[\"range\",\"scheme\"],scaleRules={bins:$jscomp$destructuring$var231=>{var {model,fieldOrDatumDef}=$jscomp$destructuring$var231;return isFieldDef(fieldOrDatumDef)?bins$jscomp$1(model,fieldOrDatumDef):void 0},interpolate:$jscomp$destructuring$var232=>\n{var {channel,fieldOrDatumDef}=$jscomp$destructuring$var232;$jscomp$destructuring$var232=fieldOrDatumDef.type;$jscomp$destructuring$var232=contains([\"color\",\"fill\",\"stroke\"],channel)&&\"nominal\"!==$jscomp$destructuring$var232?\"hcl\":void 0;return $jscomp$destructuring$var232},nice:$jscomp$destructuring$var233=>{var {scaleType,channel,fieldOrDatumDef}=$jscomp$destructuring$var233;var _getFieldDef;$jscomp$destructuring$var233=(null===(_getFieldDef=getFieldDef(fieldOrDatumDef))||void 0===_getFieldDef?\n0:_getFieldDef.bin)||contains([ScaleType.TIME,ScaleType.UTC],scaleType)?void 0:channel in POSITION_SCALE_CHANNEL_INDEX?!0:void 0;return $jscomp$destructuring$var233},padding:$jscomp$destructuring$var234=>{var {channel,scaleType,fieldOrDatumDef,markDef,config}=$jscomp$destructuring$var234;a:{$jscomp$destructuring$var234=config.scale;var barConfig=config.bar;if(channel in POSITION_SCALE_CHANNEL_INDEX){if(scaleType in CONTINUOUS_TO_CONTINUOUS_INDEX){if(void 0!==$jscomp$destructuring$var234.continuousPadding){$jscomp$destructuring$var234=\n$jscomp$destructuring$var234.continuousPadding;break a}const {type,orient}=markDef;if(\"bar\"===type&&(!isFieldDef(fieldOrDatumDef)||!fieldOrDatumDef.bin&&!fieldOrDatumDef.timeUnit)&&(\"vertical\"===orient&&\"x\"===channel||\"horizontal\"===orient&&\"y\"===channel)){$jscomp$destructuring$var234=barConfig.continuousBandSize;break a}}if(scaleType===ScaleType.POINT){$jscomp$destructuring$var234=$jscomp$destructuring$var234.pointPadding;break a}}$jscomp$destructuring$var234=void 0}return $jscomp$destructuring$var234},\npaddingInner:$jscomp$destructuring$var235=>{var {scalePadding,channel,markDef,config}=$jscomp$destructuring$var235;if(void 0!==scalePadding)$jscomp$destructuring$var235=void 0;else if(channel in POSITION_SCALE_CHANNEL_INDEX){const {bandPaddingInner,barBandPaddingInner,rectBandPaddingInner}=config.scale;$jscomp$destructuring$var235=getFirstDefined(bandPaddingInner,\"bar\"===markDef.type?barBandPaddingInner:rectBandPaddingInner)}else $jscomp$destructuring$var235=void 0;return $jscomp$destructuring$var235},\npaddingOuter:$jscomp$destructuring$var236=>{var {scalePadding,channel,scaleType,scalePaddingInner,config}=$jscomp$destructuring$var236;void 0!==scalePadding?$jscomp$destructuring$var236=void 0:channel in POSITION_SCALE_CHANNEL_INDEX&&scaleType===ScaleType.BAND?({bandPaddingOuter:$jscomp$destructuring$var236}=config.scale,$jscomp$destructuring$var236=getFirstDefined($jscomp$destructuring$var236,isSignalRef(scalePaddingInner)?{signal:\"\".concat(scalePaddingInner.signal,\"/2\")}:scalePaddingInner/2)):$jscomp$destructuring$var236=\nvoid 0;return $jscomp$destructuring$var236},reverse:$jscomp$destructuring$var237=>{var {fieldOrDatumDef,scaleType,channel,config}=$jscomp$destructuring$var237;$jscomp$destructuring$var237=isFieldDef(fieldOrDatumDef)?fieldOrDatumDef.sort:void 0;var scaleConfig=config.scale;$jscomp$destructuring$var237=\"x\"===channel&&void 0!==scaleConfig.xReverse?scaleType in CONTINUOUS_DOMAIN_INDEX&&\"descending\"===$jscomp$destructuring$var237?isSignalRef(scaleConfig.xReverse)?{signal:\"!\".concat(scaleConfig.xReverse.signal)}:\n!scaleConfig.xReverse:scaleConfig.xReverse:scaleType in CONTINUOUS_DOMAIN_INDEX&&\"descending\"===$jscomp$destructuring$var237?!0:void 0;return $jscomp$destructuring$var237},zero:$jscomp$destructuring$var238=>{var {channel,fieldOrDatumDef,domain,markDef,scaleType}=$jscomp$destructuring$var238;a:if(domain&&\"unaggregated\"!==domain&&scaleType in CONTINUOUS_DOMAIN_INDEX){if(isArray(domain)&&($jscomp$destructuring$var238=domain[domain.length-1],0>=domain[0]&&0<=$jscomp$destructuring$var238)){$jscomp$destructuring$var238=\n!0;break a}$jscomp$destructuring$var238=!1}else if(\"size\"!==channel||\"quantitative\"!==fieldOrDatumDef.type||scaleType in CONTINUOUS_TO_DISCRETE_INDEX)if(isFieldDef(fieldOrDatumDef)&&fieldOrDatumDef.bin||!contains([...POSITION_SCALE_CHANNELS,...POLAR_POSITION_SCALE_CHANNELS],channel))$jscomp$destructuring$var238=!1;else{const {orient,type}=markDef;$jscomp$destructuring$var238=contains([\"bar\",\"area\",\"line\",\"trail\"],type)&&(\"horizontal\"===orient&&\"y\"===channel||\"vertical\"===orient&&\"x\"===channel)?!1:\n!0}else $jscomp$destructuring$var238=!0;return $jscomp$destructuring$var238}},scaleTypeTieBreaker=tieBreakByComparing((st1,st2)=>SCALE_PRECEDENCE_INDEX[st1]-SCALE_PRECEDENCE_INDEX[st2]);class NameMap{constructor(){_defineProperty(this,\"nameMap\",void 0);this.nameMap={}}rename(oldName,newName){this.nameMap[oldName]=newName}has(name){return void 0!==this.nameMap[name]}get(name){for(;this.nameMap[name]&&name!==this.nameMap[name];)name=this.nameMap[name];return name}}class Model{constructor(spec,type,\nparent,parentGivenName,config,resolve,view){var _spec$name,_spec$transform;this.type=type;this.parent=parent;this.config=config;_defineProperty(this,\"name\",void 0);_defineProperty(this,\"size\",void 0);_defineProperty(this,\"title\",void 0);_defineProperty(this,\"description\",void 0);_defineProperty(this,\"data\",void 0);_defineProperty(this,\"transforms\",void 0);_defineProperty(this,\"layout\",void 0);_defineProperty(this,\"scaleNameMap\",void 0);_defineProperty(this,\"projectionNameMap\",void 0);_defineProperty(this,\n\"signalNameMap\",void 0);_defineProperty(this,\"component\",void 0);_defineProperty(this,\"view\",void 0);_defineProperty(this,\"children\",[]);_defineProperty(this,\"correctDataNames\",mark=>{mark.from&&mark.from.data&&(mark.from.data=this.lookupDataSource(mark.from.data));mark.from&&mark.from.facet&&mark.from.facet.data&&(mark.from.facet.data=this.lookupDataSource(mark.from.facet.data));return mark});this.parent=parent;this.config=config;this.view=replaceExprRefInIndex(view);this.name=null!==(_spec$name=\nspec.name)&&void 0!==_spec$name?_spec$name:parentGivenName;this.title=isText(spec.title)?{text:spec.title}:spec.title?this.initTitle(spec.title):void 0;this.scaleNameMap=parent?parent.scaleNameMap:new NameMap;this.projectionNameMap=parent?parent.projectionNameMap:new NameMap;this.signalNameMap=parent?parent.signalNameMap:new NameMap;this.data=spec.data;this.description=spec.description;this.transforms=normalizeTransform(null!==(_spec$transform=spec.transform)&&void 0!==_spec$transform?_spec$transform:\n[]);this.layout=\"layer\"===type||\"unit\"===type?{}:extractCompositionLayout(spec,type,config);this.component={data:{sources:parent?parent.component.data.sources:[],outputNodes:parent?parent.component.data.outputNodes:{},outputNodeRefCounts:parent?parent.component.data.outputNodeRefCounts:{},isFaceted:\"facet\"in spec||parent&&parent.component.data.isFaceted&&void 0===spec.data},layoutSize:new Split,layoutHeaders:{row:{},column:{},facet:{}},mark:null,resolve:Object.assign({},{scale:{},axis:{},legend:{}},\nresolve?duplicate(resolve):{}),selection:null,scales:null,projection:null,axes:{},legends:{}}}initTitle(title){const props=keys$jscomp$0(title),titleInternal={text:signalRefOrValue(title.text)};for(const prop of props)titleInternal[prop]=signalRefOrValue(title[prop]);return titleInternal}get width(){return this.getSizeSignalRef(\"width\")}get height(){return this.getSizeSignalRef(\"height\")}parse(){this.parseScale();this.parseLayoutSize();this.renameTopLevelLayoutSizeSignal();this.parseSelections();\nthis.parseProjection();this.parseData();this.parseAxesAndHeaders();this.parseLegends();this.parseMarkGroup()}parseScale(){var {ignoreRange}={};parseScaleCore(this);isUnitModel(this)?parseUnitScaleDomain(this):parseNonUnitScaleDomain(this);for(const prop of NON_TYPE_DOMAIN_RANGE_VEGA_SCALE_PROPERTIES)parseScaleProperty(this,prop);ignoreRange||parseScaleRange(this)}parseProjection(){parseProjection(this)}renameTopLevelLayoutSizeSignal(){\"width\"!==this.getName(\"width\")&&this.renameSignal(this.getName(\"width\"),\n\"width\");\"height\"!==this.getName(\"height\")&&this.renameSignal(this.getName(\"height\"),\"height\")}parseLegends(){parseLegend(this)}assembleGroupStyle(){if(\"unit\"===this.type||\"layer\"===this.type){var _this$view$style,_this$view;return null!==(_this$view$style=null===(_this$view=this.view)||void 0===_this$view?void 0:_this$view.style)&&void 0!==_this$view$style?_this$view$style:\"cell\"}}assembleEncodeFromView(view){view=Object.assign({},view);view=(delete view.style,view);const e={};for(const property of keys$jscomp$0(view)){const value=\nview[property];void 0!==value&&(e[property]=signalOrValueRef(value))}return e}assembleGroupEncodeEntry(isTopLevel){let encodeEntry={};this.view&&(encodeEntry=this.assembleEncodeFromView(this.view));if(!isTopLevel&&(this.description&&(encodeEntry.description=signalOrValueRef(this.description)),\"unit\"===this.type||\"layer\"===this.type)){var _encodeEntry;return Object.assign({},{width:this.getSizeSignalRef(\"width\"),height:this.getSizeSignalRef(\"height\")},null!==(_encodeEntry=encodeEntry)&&void 0!==_encodeEntry?\n_encodeEntry:{})}return isEmpty(encodeEntry)?void 0:encodeEntry}assembleLayout(){if(this.layout){var $jscomp$destructuring$var242=this.layout,$jscomp$destructuring$var243=Object.assign({},$jscomp$destructuring$var242);$jscomp$destructuring$var242=$jscomp$destructuring$var242.spacing;$jscomp$destructuring$var243=(delete $jscomp$destructuring$var243.spacing,$jscomp$destructuring$var243);var {component,config}=this;{var headerComponentIndex=component.layoutHeaders;const titleBand={};for(JSCompiler_inline_result of FACET_CHANNELS){var headerComponent=\nheaderComponentIndex[JSCompiler_inline_result];if(null===headerComponent||void 0===headerComponent?0:headerComponent.facetFieldDef){const {titleAnchor,titleOrient}=getHeaderProperties([\"titleAnchor\",\"titleOrient\"],headerComponent.facetFieldDef.header,config,JSCompiler_inline_result);headerComponent=getHeaderChannel(JSCompiler_inline_result,titleOrient);const band=LAYOUT_TITLE_BAND[headerComponent][titleAnchor];void 0!==band&&(titleBand[headerComponent]=band)}}var JSCompiler_inline_result=isEmpty(titleBand)?\nvoid 0:titleBand}return Object.assign({},{padding:$jscomp$destructuring$var242},this.assembleDefaultLayout(),$jscomp$destructuring$var243,JSCompiler_inline_result?{titleBand:JSCompiler_inline_result}:{})}}assembleDefaultLayout(){return{}}assembleHeaderMarks(){var {layoutHeaders}=this.component,headerMarks=[];for(var channel$jscomp$0 of FACET_CHANNELS)if(layoutHeaders[channel$jscomp$0].title){var JSCompiler_temp_const=headerMarks,JSCompiler_temp_const$jscomp$0=JSCompiler_temp_const.push;{var JSCompiler_inline_result=\nchannel$jscomp$0;var title=this.component.layoutHeaders[JSCompiler_inline_result].title,config=this.config?this.config:void 0,facetFieldDef=this.component.layoutHeaders[JSCompiler_inline_result].facetFieldDef?this.component.layoutHeaders[JSCompiler_inline_result].facetFieldDef:void 0;const {titleAnchor,titleAngle:ta,titleOrient}=getHeaderProperties([\"titleAnchor\",\"titleAngle\",\"titleOrient\"],facetFieldDef.header,config,JSCompiler_inline_result);var headerChannel=getHeaderChannel(JSCompiler_inline_result,\ntitleOrient),titleAngle=normalizeAngle(ta);JSCompiler_inline_result={name:\"\".concat(JSCompiler_inline_result,\"-title\"),type:\"group\",role:\"\".concat(headerChannel,\"-title\"),title:Object.assign({},{text:title},\"row\"===JSCompiler_inline_result?{orient:\"left\"}:{},{style:\"guide-title\"},defaultHeaderGuideBaseline(titleAngle,headerChannel),defaultHeaderGuideAlign(headerChannel,titleAngle,titleAnchor),assembleHeaderProperties(config,facetFieldDef,JSCompiler_inline_result,HEADER_TITLE_PROPERTIES,HEADER_TITLE_PROPERTIES_MAP))}}JSCompiler_temp_const$jscomp$0.call(JSCompiler_temp_const,\nJSCompiler_inline_result)}for(const channel of HEADER_CHANNELS){layoutHeaders=headerMarks;headerMarks=layoutHeaders.concat;JSCompiler_temp_const=channel;JSCompiler_temp_const$jscomp$0=this.component.layoutHeaders[JSCompiler_temp_const];channel$jscomp$0=[];for(const headerType of HEADER_TYPES)if(JSCompiler_temp_const$jscomp$0[headerType])for(const headerComponent of JSCompiler_temp_const$jscomp$0[headerType]){a:{facetFieldDef=void 0;JSCompiler_inline_result=JSCompiler_temp_const;var headerType$jscomp$0=\nheaderType,layoutHeader=JSCompiler_temp_const$jscomp$0;if(title=headerComponent){config=null;({facetFieldDef:JSCompiler_inline_result$jscomp$0}=layoutHeader);headerChannel=this.config?this.config:void 0;JSCompiler_inline_result$jscomp$0&&title.labels&&({labelOrient:titleAngle}=getHeaderProperties([\"labelOrient\"],JSCompiler_inline_result$jscomp$0.header,headerChannel,JSCompiler_inline_result),\"row\"===JSCompiler_inline_result&&!contains([\"top\",\"bottom\"],titleAngle)||\"column\"===JSCompiler_inline_result&&\n!contains([\"left\",\"right\"],titleAngle))&&(config=assembleLabelTitle(JSCompiler_inline_result$jscomp$0,JSCompiler_inline_result,headerChannel));const isFacetWithoutRowCol=isFacetModel(this)&&!isFacetMapping(this.facet),axes=title.axes,hasAxes=0<(null===axes||void 0===axes?void 0:axes.length);if(config||hasAxes){const sizeChannel=\"row\"===JSCompiler_inline_result?\"height\":\"width\";headerChannel=Object;titleAngle=headerChannel.assign;headerType$jscomp$0={name:this.getName(\"\".concat(JSCompiler_inline_result,\n\"_\").concat(headerType$jscomp$0)),type:\"group\",role:\"\".concat(JSCompiler_inline_result,\"-\").concat(headerType$jscomp$0)};if(layoutHeader.facetFieldDef){layoutHeader={data:this.getName(JSCompiler_inline_result+\"_domain\")};{const {sort}=JSCompiler_inline_result$jscomp$0;var JSCompiler_inline_result$jscomp$0=isSortField(sort)?{field:vgField(sort,{expr:\"datum\"}),order:null!==(facetFieldDef=sort.order)&&void 0!==facetFieldDef?facetFieldDef:\"ascending\"}:isArray(sort)?{field:sortArrayIndexField(JSCompiler_inline_result$jscomp$0,\nJSCompiler_inline_result,{expr:\"datum\"}),order:\"ascending\"}:{field:vgField(JSCompiler_inline_result$jscomp$0,{expr:\"datum\"}),order:null!==sort&&void 0!==sort?sort:\"ascending\"}}facetFieldDef={from:layoutHeader,sort:JSCompiler_inline_result$jscomp$0}}else facetFieldDef={};JSCompiler_inline_result=titleAngle.call(headerChannel,{},headerType$jscomp$0,facetFieldDef,hasAxes&&isFacetWithoutRowCol?{from:{data:this.getName(\"facet_domain_\".concat(JSCompiler_inline_result))}}:{},config?{title:config}:{},title.sizeSignal?\n{encode:{update:{[sizeChannel]:title.sizeSignal}}}:{},hasAxes?{axes}:{});break a}}JSCompiler_inline_result=null}null!=JSCompiler_inline_result&&channel$jscomp$0.push(JSCompiler_inline_result)}JSCompiler_temp_const=channel$jscomp$0;headerMarks=headerMarks.call(layoutHeaders,JSCompiler_temp_const)}return headerMarks}assembleAxes(){return assembleAxes(this.component.axes,this.config)}assembleLegends(){return assembleLegends(this)}assembleProjections(){var JSCompiler_inline_result=isLayerModel(this)||\nisConcatModel(this)?assembleProjectionsForModelAndChildren(this):assembleProjectionForModel(this);return JSCompiler_inline_result}assembleTitle(){var _this$title,$jscomp$destructuring$var244=null!==(_this$title=this.title)&&void 0!==_this$title?_this$title:{};_this$title=Object.assign({},$jscomp$destructuring$var244);$jscomp$destructuring$var244=$jscomp$destructuring$var244.encoding;_this$title=(delete _this$title.encoding,_this$title);$jscomp$destructuring$var244=Object.assign({},extractTitleConfig(this.config.title).nonMark,\n_this$title,$jscomp$destructuring$var244?{encode:{update:$jscomp$destructuring$var244}}:{});if($jscomp$destructuring$var244.text){if(contains([\"unit\",\"layer\"],this.type)){if(contains([\"middle\",void 0],$jscomp$destructuring$var244.anchor)){var _title$frame;$jscomp$destructuring$var244.frame=null!==(_title$frame=$jscomp$destructuring$var244.frame)&&void 0!==_title$frame?_title$frame:\"group\"}}else{var _title$anchor;$jscomp$destructuring$var244.anchor=null!==(_title$anchor=$jscomp$destructuring$var244.anchor)&&\nvoid 0!==_title$anchor?_title$anchor:\"start\"}return isEmpty($jscomp$destructuring$var244)?void 0:$jscomp$destructuring$var244}}assembleGroup(signals){signals=void 0===signals?[]:signals;const group={};signals=signals.concat(this.assembleSignals());0<signals.length&&(group.signals=signals);if(signals=this.assembleLayout())group.layout=signals;group.marks=[].concat(this.assembleHeaderMarks(),this.assembleMarks());signals=!this.parent||isFacetModel(this.parent)?assembleScales(this):[];0<signals.length&&\n(group.scales=signals);signals=this.assembleAxes();0<signals.length&&(group.axes=signals);signals=this.assembleLegends();0<signals.length&&(group.legends=signals);return group}getName(text){return varName((this.name?this.name+\"_\":\"\")+text)}getDataName(type){return this.getName(DataSourceType[type].toLowerCase())}requestDataName(name){name=this.getDataName(name);const refCounts=this.component.data.outputNodeRefCounts;refCounts[name]=(refCounts[name]||0)+1;return name}getSizeSignalRef(layoutSizeType){if(isFacetModel(this.parent)){var sizeType=\ngetSizeTypeFromLayoutSizeType(layoutSizeType),channel=getPositionScaleChannel(sizeType);if((sizeType=this.component.scales[channel])&&!sizeType.merged){var type=sizeType.get(\"type\");const range=sizeType.get(\"range\");if(type in DISCRETE_DOMAIN_INDEX&&isVgRangeStep(range)){layoutSizeType=sizeType.get(\"name\");type=assembleDomain(this,channel);if(type=getFieldFromDomain(type))return channel=vgField({aggregate:\"distinct\",field:type},{expr:\"datum\"}),{signal:sizeExpr(layoutSizeType,sizeType,channel)};warn(unknownField(channel));\nreturn null}}}return{signal:this.signalNameMap.get(this.getName(layoutSizeType))}}lookupDataSource(name){const node=this.component.data.outputNodes[name];return node?node.getSource():name}getSignalName(oldSignalName){return this.signalNameMap.get(oldSignalName)}renameSignal(oldName,newName){this.signalNameMap.rename(oldName,newName)}renameScale(oldName,newName){this.scaleNameMap.rename(oldName,newName)}renameProjection(oldName,newName){this.projectionNameMap.rename(oldName,newName)}scaleName(originalScaleName,\nparse){if(parse)return this.getName(originalScaleName);if(CHANNEL_INDEX[originalScaleName]&&SCALE_CHANNEL_INDEX[originalScaleName]&&this.component.scales[originalScaleName]||this.scaleNameMap.has(this.getName(originalScaleName)))return this.scaleNameMap.get(this.getName(originalScaleName))}projectionName(parse){if(parse)return this.getName(\"projection\");if(this.component.projection&&!this.component.projection.merged||this.projectionNameMap.has(this.getName(\"projection\")))return this.projectionNameMap.get(this.getName(\"projection\"))}getScaleComponent(channel){if(!this.component.scales)throw Error(\"getScaleComponent cannot be called before parseScale(). Make sure you have called parseScale or use parseUnitModelWithScale().\");\nconst localScaleComponent=this.component.scales[channel];return localScaleComponent&&!localScaleComponent.merged?localScaleComponent:this.parent?this.parent.getScaleComponent(channel):void 0}getSelectionComponent(variableName,origName){let sel=this.component.selection[variableName];!sel&&this.parent&&(sel=this.parent.getSelectionComponent(variableName,origName));if(!sel)throw Error('Cannot find a selection named \"'.concat(origName,'\".'));return sel}hasAxisOrientSignalRef(){var _this$component$axes$,\n_this$component$axes$2;return(null===(_this$component$axes$=this.component.axes.x)||void 0===_this$component$axes$?void 0:_this$component$axes$.some(a=>a.hasOrientSignalRef()))||(null===(_this$component$axes$2=this.component.axes.y)||void 0===_this$component$axes$2?void 0:_this$component$axes$2.some(a=>a.hasOrientSignalRef()))}}class ModelWithField extends Model{vgField(channel,opt){opt=void 0===opt?{}:opt;if(channel=this.fieldDef(channel))return vgField(channel,opt)}reduceFieldDef(f,init){return reduce(this.getMapping(),\n(acc,cd,c)=>(cd=getFieldDef(cd))?f(acc,cd,c):acc,init)}forEachFieldDef(f,t){forEach(this.getMapping(),(cd,c)=>{(cd=getFieldDef(cd))&&f(cd,c)},t)}}class DensityTransformNode extends DataFlowNode{clone(){return new DensityTransformNode(null,duplicate(this.transform))}constructor(parent,transform){var _this$transform$as,_specifiedAs$,_specifiedAs$2;super(parent);this.transform=transform;this.transform=duplicate(transform);parent=null!==(_this$transform$as=this.transform.as)&&void 0!==_this$transform$as?\n_this$transform$as:[void 0,void 0];this.transform.as=[null!==(_specifiedAs$=parent[0])&&void 0!==_specifiedAs$?_specifiedAs$:\"value\",null!==(_specifiedAs$2=parent[1])&&void 0!==_specifiedAs$2?_specifiedAs$2:\"density\"]}dependentFields(){var _this$transform$group;return new Set([this.transform.density,...(null!==(_this$transform$group=this.transform.groupby)&&void 0!==_this$transform$group?_this$transform$group:[])])}producedFields(){return new Set(this.transform.as)}hash(){return\"DensityTransform \".concat(hash(this.transform))}assemble(){var $jscomp$destructuring$var246=\nthis.transform,$jscomp$destructuring$var247=Object.assign({},$jscomp$destructuring$var246);$jscomp$destructuring$var246=$jscomp$destructuring$var246.density;$jscomp$destructuring$var247=(delete $jscomp$destructuring$var247.density,$jscomp$destructuring$var247);return Object.assign({},{type:\"kde\",field:$jscomp$destructuring$var246},$jscomp$destructuring$var247)}}class FilterInvalidNode extends DataFlowNode{clone(){return new FilterInvalidNode(null,Object.assign({},this.filter))}constructor(parent,\nfilter){super(parent);this.filter=filter}static make(parent,model){const {config,mark,markDef}=model;if(\"filter\"!==getMarkPropOrConfig(\"invalid\",markDef,config))return null;const filter=model.reduceFieldDef((aggregator,fieldDef,channel)=>{(channel=!!SCALE_CHANNEL_INDEX[channel]&&model.getScaleComponent(channel))&&channel.get(\"type\")in CONTINUOUS_DOMAIN_INDEX&&\"count\"!==fieldDef.aggregate&&!isPathMark(mark)&&(aggregator[fieldDef.field]=fieldDef);return aggregator},{});return keys$jscomp$0(filter).length?\nnew FilterInvalidNode(parent,filter):null}dependentFields(){return new Set(keys$jscomp$0(this.filter))}producedFields(){return new Set}hash(){return\"FilterInvalid \".concat(hash(this.filter))}assemble(){const filters=keys$jscomp$0(this.filter).reduce((vegaFilters,field)=>{field=this.filter[field];const ref=vgField(field,{expr:\"datum\"});null!==field&&(\"temporal\"===field.type?vegaFilters.push(\"(isDate(\".concat(ref,\") || (isValid(\").concat(ref,\") \\x26\\x26 isFinite(+\").concat(ref,\")))\")):\"quantitative\"===\nfield.type&&(vegaFilters.push(\"isValid(\".concat(ref,\")\")),vegaFilters.push(\"isFinite(+\".concat(ref,\")\"))));return vegaFilters},[]);return 0<filters.length?{type:\"filter\",expr:filters.join(\" \\x26\\x26 \")}:null}}class FlattenTransformNode extends DataFlowNode{clone(){return new FlattenTransformNode(this.parent,duplicate(this.transform))}constructor(parent,transform){super(parent);this.transform=transform;this.transform=duplicate(transform);const {flatten,as=[]}=this.transform;this.transform.as=flatten.map((f,\ni)=>{var _as$i;return null!==(_as$i=as[i])&&void 0!==_as$i?_as$i:f})}dependentFields(){return new Set(this.transform.flatten)}producedFields(){return new Set(this.transform.as)}hash(){return\"FlattenTransform \".concat(hash(this.transform))}assemble(){const {flatten:fields,as}=this.transform;return{type:\"flatten\",fields,as}}}class FoldTransformNode extends DataFlowNode{clone(){return new FoldTransformNode(null,duplicate(this.transform))}constructor(parent,transform){var _this$transform$as,_specifiedAs$,\n_specifiedAs$2;super(parent);this.transform=transform;this.transform=duplicate(transform);parent=null!==(_this$transform$as=this.transform.as)&&void 0!==_this$transform$as?_this$transform$as:[void 0,void 0];this.transform.as=[null!==(_specifiedAs$=parent[0])&&void 0!==_specifiedAs$?_specifiedAs$:\"key\",null!==(_specifiedAs$2=parent[1])&&void 0!==_specifiedAs$2?_specifiedAs$2:\"value\"]}dependentFields(){return new Set(this.transform.fold)}producedFields(){return new Set(this.transform.as)}hash(){return\"FoldTransform \".concat(hash(this.transform))}assemble(){const {fold,\nas}=this.transform;return{type:\"fold\",fields:fold,as}}}class GeoJSONNode extends DataFlowNode{clone(){return new GeoJSONNode(null,duplicate(this.fields),this.geojson,this.signal)}static parseAll(parent,model){if(model.component.projection&&!model.component.projection.isFit)return parent;let geoJsonCounter=0;for(var coordinates of[[\"longitude\",\"latitude\"],[\"longitude2\",\"latitude2\"]]){const pair=coordinates.map(channel=>{channel=getFieldOrDatumDef(model.encoding[channel]);return isFieldDef(channel)?\nchannel.field:isDatumDef(channel)?{expr:\"\".concat(channel.datum)}:isValueDef(channel)?{expr:\"\".concat(channel.value)}:void 0});if(pair[0]||pair[1])parent=new GeoJSONNode(parent,pair,null,model.getName(\"geojson_\".concat(geoJsonCounter++)))}model.channelHasField(\"shape\")&&(coordinates=model.typedFieldDef(\"shape\"),\"geojson\"===coordinates.type&&(parent=new GeoJSONNode(parent,null,coordinates.field,model.getName(\"geojson_\".concat(geoJsonCounter++)))));return parent}constructor(parent,fields,geojson,signal){super(parent);\nthis.fields=fields;this.geojson=geojson;this.signal=signal}dependentFields(){var _this$fields;const fields=(null!==(_this$fields=this.fields)&&void 0!==_this$fields?_this$fields:[]).filter(isString);return new Set([...(this.geojson?[this.geojson]:[]),...fields])}producedFields(){return new Set}hash(){return\"GeoJSON \".concat(this.geojson,\" \").concat(this.signal,\" \").concat(hash(this.fields))}assemble(){return Object.assign({},{type:\"geojson\"},this.fields?{fields:this.fields}:{},this.geojson?{geojson:this.geojson}:\n{},{signal:this.signal})}}class GeoPointNode extends DataFlowNode{clone(){return new GeoPointNode(null,this.projection,duplicate(this.fields),duplicate(this.as))}constructor(parent,projection,fields,as){super(parent);this.projection=projection;this.fields=fields;this.as=as}static parseAll(parent,model){if(!model.projectionName())return parent;for(const coordinates of[[\"longitude\",\"latitude\"],[\"longitude2\",\"latitude2\"]]){const pair=coordinates.map(channel=>{channel=getFieldOrDatumDef(model.encoding[channel]);\nreturn isFieldDef(channel)?channel.field:isDatumDef(channel)?{expr:\"\".concat(channel.datum)}:isValueDef(channel)?{expr:\"\".concat(channel.value)}:void 0}),suffix=\"longitude2\"===coordinates[0]?\"2\":\"\";if(pair[0]||pair[1])parent=new GeoPointNode(parent,model.projectionName(),pair,[model.getName(\"x\"+suffix),model.getName(\"y\"+suffix)])}return parent}dependentFields(){return new Set(this.fields.filter(isString))}producedFields(){return new Set(this.as)}hash(){return\"Geopoint \".concat(this.projection,\" \").concat(hash(this.fields),\n\" \").concat(hash(this.as))}assemble(){return{type:\"geopoint\",projection:this.projection,fields:this.fields,as:this.as}}}class ImputeNode extends DataFlowNode{clone(){return new ImputeNode(null,duplicate(this.transform))}constructor(parent,transform){super(parent);this.transform=transform}dependentFields(){var _this$transform$group;return new Set([this.transform.impute,this.transform.key,...(null!==(_this$transform$group=this.transform.groupby)&&void 0!==_this$transform$group?_this$transform$group:\n[])])}producedFields(){return new Set([this.transform.impute])}processSequence(keyvals){const {start=0,stop,step}=keyvals;keyvals=[start,stop,...(step?[step]:[])].join();return{signal:\"sequence(\".concat(keyvals,\")\")}}static makeFromTransform(parent,imputeTransform){return new ImputeNode(parent,imputeTransform)}static makeFromEncoding(parent,model){const encoding=model.encoding;var xDef=encoding.x;const yDef=encoding.y;if(isFieldDef(xDef)&&isFieldDef(yDef)){const imputedChannel=xDef.impute?xDef:yDef.impute?\nyDef:void 0;if(void 0===imputedChannel)return;xDef=xDef.impute?yDef:yDef.impute?xDef:void 0;const {method,value,frame,keyvals}=imputedChannel.impute;model=pathGroupingFields(model.mark,encoding);return new ImputeNode(parent,Object.assign({},{impute:imputedChannel.field,key:xDef.field},method?{method}:{},void 0!==value?{value}:{},frame?{frame}:{},void 0!==keyvals?{keyvals}:{},model.length?{groupby:model}:{}))}return null}hash(){return\"Impute \".concat(hash(this.transform))}assemble(){const {impute,\nkey,keyvals,method,groupby,value,frame=[null,null]}=this.transform,imputeTransform=Object.assign({},{type:\"impute\",field:impute,key},keyvals?{keyvals:void 0!==(null===keyvals||void 0===keyvals?void 0:keyvals.stop)?this.processSequence(keyvals):keyvals}:{},{method:\"value\"},groupby?{groupby}:{},{value:method&&\"value\"!==method?null:value});if(method&&\"value\"!==method){const deriveNewField=Object.assign({},{type:\"window\",as:[\"imputed_\".concat(impute,\"_value\")],ops:[method],fields:[impute],frame,ignorePeers:!1},\ngroupby?{groupby}:{}),replaceOriginal={type:\"formula\",expr:\"datum.\".concat(impute,\" \\x3d\\x3d\\x3d null ? datum.imputed_\").concat(impute,\"_value : datum.\").concat(impute),as:impute};return[imputeTransform,deriveNewField,replaceOriginal]}return[imputeTransform]}}class LoessTransformNode extends DataFlowNode{clone(){return new LoessTransformNode(null,duplicate(this.transform))}constructor(parent,transform){var _this$transform$as,_specifiedAs$,_specifiedAs$2;super(parent);this.transform=transform;this.transform=\nduplicate(transform);parent=null!==(_this$transform$as=this.transform.as)&&void 0!==_this$transform$as?_this$transform$as:[void 0,void 0];this.transform.as=[null!==(_specifiedAs$=parent[0])&&void 0!==_specifiedAs$?_specifiedAs$:transform.on,null!==(_specifiedAs$2=parent[1])&&void 0!==_specifiedAs$2?_specifiedAs$2:transform.loess]}dependentFields(){var _this$transform$group;return new Set([this.transform.loess,this.transform.on,...(null!==(_this$transform$group=this.transform.groupby)&&void 0!==_this$transform$group?\n_this$transform$group:[])])}producedFields(){return new Set(this.transform.as)}hash(){return\"LoessTransform \".concat(hash(this.transform))}assemble(){var $jscomp$destructuring$var248=this.transform,$jscomp$destructuring$var249=Object.assign({},$jscomp$destructuring$var248);const loess=$jscomp$destructuring$var248.loess;$jscomp$destructuring$var248=$jscomp$destructuring$var248.on;$jscomp$destructuring$var249=(delete $jscomp$destructuring$var249.loess,delete $jscomp$destructuring$var249.on,$jscomp$destructuring$var249);\nreturn Object.assign({},{type:\"loess\",x:$jscomp$destructuring$var248,y:loess},$jscomp$destructuring$var249)}}class LookupNode extends DataFlowNode{clone(){return new LookupNode(null,duplicate(this.transform),this.secondary)}constructor(parent,transform,secondary){super(parent);this.transform=transform;this.secondary=secondary}static make(parent,model,transform,counter){const sources=model.component.data.sources,{from}=transform;var fromOutputNode=null;if(\"data\"in from)fromOutputNode=findSource(from.data,\nsources),fromOutputNode||(fromOutputNode=new SourceNode(from.data),sources.push(fromOutputNode)),counter=model.getName(\"lookup_\".concat(counter)),fromOutputNode=new OutputNode(fromOutputNode,counter,DataSourceType.Lookup,model.component.data.outputNodeRefCounts),model.component.data.outputNodes[counter]=fromOutputNode;else if(\"selection\"in from&&(counter=from.selection,transform=Object.assign({},{as:counter},transform),fromOutputNode=model.getSelectionComponent(varName(counter),counter).materialized,\n!fromOutputNode))throw Error('Cannot define and lookup the \"'.concat(counter,'\" selection in the same view. ')+\"Try moving the lookup into a second, layered view?\");return new LookupNode(parent,transform,fromOutputNode.getSource())}dependentFields(){return new Set([this.transform.lookup])}producedFields(){return new Set(this.transform.as?array$jscomp$0(this.transform.as):this.transform.from.fields)}hash(){return\"Lookup \".concat(hash({transform:this.transform,secondary:this.secondary}))}assemble(){if(this.transform.from.fields)var foreign=\nObject.assign({},{values:this.transform.from.fields},this.transform.as?{as:array$jscomp$0(this.transform.as)}:{});else foreign=this.transform.as,isString(foreign)||(warn('If \"from.fields\" is not specified, \"as\" has to be a string that specifies the key to be used for the data from the secondary source.'),foreign=\"_lookup\"),foreign={as:[foreign]};return Object.assign({},{type:\"lookup\",from:this.secondary,key:this.transform.from.key,fields:[this.transform.lookup]},foreign,this.transform.default?{default:this.transform.default}:\n{})}}class QuantileTransformNode extends DataFlowNode{clone(){return new QuantileTransformNode(null,duplicate(this.transform))}constructor(parent,transform){var _this$transform$as,_specifiedAs$,_specifiedAs$2;super(parent);this.transform=transform;this.transform=duplicate(transform);parent=null!==(_this$transform$as=this.transform.as)&&void 0!==_this$transform$as?_this$transform$as:[void 0,void 0];this.transform.as=[null!==(_specifiedAs$=parent[0])&&void 0!==_specifiedAs$?_specifiedAs$:\"prob\",null!==\n(_specifiedAs$2=parent[1])&&void 0!==_specifiedAs$2?_specifiedAs$2:\"value\"]}dependentFields(){var _this$transform$group;return new Set([this.transform.quantile,...(null!==(_this$transform$group=this.transform.groupby)&&void 0!==_this$transform$group?_this$transform$group:[])])}producedFields(){return new Set(this.transform.as)}hash(){return\"QuantileTransform \".concat(hash(this.transform))}assemble(){var $jscomp$destructuring$var250=this.transform,$jscomp$destructuring$var251=Object.assign({},$jscomp$destructuring$var250);\n$jscomp$destructuring$var250=$jscomp$destructuring$var250.quantile;$jscomp$destructuring$var251=(delete $jscomp$destructuring$var251.quantile,$jscomp$destructuring$var251);return Object.assign({},{type:\"quantile\",field:$jscomp$destructuring$var250},$jscomp$destructuring$var251)}}class RegressionTransformNode extends DataFlowNode{clone(){return new RegressionTransformNode(null,duplicate(this.transform))}constructor(parent,transform){var _this$transform$as,_specifiedAs$,_specifiedAs$2;super(parent);\nthis.transform=transform;this.transform=duplicate(transform);parent=null!==(_this$transform$as=this.transform.as)&&void 0!==_this$transform$as?_this$transform$as:[void 0,void 0];this.transform.as=[null!==(_specifiedAs$=parent[0])&&void 0!==_specifiedAs$?_specifiedAs$:transform.on,null!==(_specifiedAs$2=parent[1])&&void 0!==_specifiedAs$2?_specifiedAs$2:transform.regression]}dependentFields(){var _this$transform$group;return new Set([this.transform.regression,this.transform.on,...(null!==(_this$transform$group=\nthis.transform.groupby)&&void 0!==_this$transform$group?_this$transform$group:[])])}producedFields(){return new Set(this.transform.as)}hash(){return\"RegressionTransform \".concat(hash(this.transform))}assemble(){var $jscomp$destructuring$var252=this.transform,$jscomp$destructuring$var253=Object.assign({},$jscomp$destructuring$var252);const regression=$jscomp$destructuring$var252.regression;$jscomp$destructuring$var252=$jscomp$destructuring$var252.on;$jscomp$destructuring$var253=(delete $jscomp$destructuring$var253.regression,\ndelete $jscomp$destructuring$var253.on,$jscomp$destructuring$var253);return Object.assign({},{type:\"regression\",x:$jscomp$destructuring$var252,y:regression},$jscomp$destructuring$var253)}}class PivotTransformNode extends DataFlowNode{clone(){return new PivotTransformNode(null,duplicate(this.transform))}constructor(parent,transform){super(parent);this.transform=transform}addDimensions(fields){var _this$transform$group;this.transform.groupby=unique((null!==(_this$transform$group=this.transform.groupby)&&\nvoid 0!==_this$transform$group?_this$transform$group:[]).concat(fields),d=>d)}producedFields(){}dependentFields(){var _this$transform$group2;return new Set([this.transform.pivot,this.transform.value,...(null!==(_this$transform$group2=this.transform.groupby)&&void 0!==_this$transform$group2?_this$transform$group2:[])])}hash(){return\"PivotTransform \".concat(hash(this.transform))}assemble(){const {pivot,value,groupby,limit,op}=this.transform;return Object.assign({},{type:\"pivot\",field:pivot,value},void 0!==\nlimit?{limit}:{},void 0!==op?{op}:{},void 0!==groupby?{groupby}:{})}}class SampleTransformNode extends DataFlowNode{clone(){return new SampleTransformNode(null,duplicate(this.transform))}constructor(parent,transform){super(parent);this.transform=transform}dependentFields(){return new Set}producedFields(){return new Set}hash(){return\"SampleTransform \".concat(hash(this.transform))}assemble(){return{type:\"sample\",size:this.transform.sample}}}class FacetModel extends ModelWithField{constructor(spec,parent,\nparentGivenName,config){super(spec,\"facet\",parent,parentGivenName,config,spec.resolve);_defineProperty(this,\"facet\",void 0);_defineProperty(this,\"child\",void 0);_defineProperty(this,\"children\",void 0);this.child=buildModel(spec.spec,this,this.getName(\"child\"),void 0,config);this.children=[this.child];this.facet=this.initFacet(spec.facet)}initFacet(facet){if(!isFacetMapping(facet))return{facet:this.initFacetFieldDef(facet,\"facet\")};var channels=keys$jscomp$0(facet);const normalizedFacet={};for(const channel of channels){if(!contains([\"row\",\n\"column\"],channel)){warn(incompatibleChannel(channel,\"facet\"));break}channels=facet[channel];if(void 0===channels.field){warn(emptyFieldDef(channels,channel));break}normalizedFacet[channel]=this.initFacetFieldDef(channels,channel)}return normalizedFacet}initFacetFieldDef(fieldDef,channel){var $jscomp$destructuring$var256=Object.assign({},fieldDef);fieldDef=fieldDef.header;$jscomp$destructuring$var256=(delete $jscomp$destructuring$var256.header,$jscomp$destructuring$var256);channel=initFieldDef($jscomp$destructuring$var256,\nchannel);fieldDef&&(channel.header=replaceExprRefInIndex(fieldDef));return channel}channelHasField(channel){return!!this.facet[channel]}fieldDef(channel){return this.facet[channel]}parseData(){this.component.data=parseData(this);this.child.parseData()}parseLayoutSize(){parseChildrenLayoutSize(this)}parseSelections(){this.child.parseSelections();this.component.selection=this.child.component.selection}parseMarkGroup(){this.child.parseMarkGroup()}parseAxesAndHeaders(){this.child.parseAxesAndHeaders();\nfor(const channel of FACET_CHANNELS){{var _fieldDef$header=void 0,channel$jscomp$0=channel;const {facet,config,child,component}=this;if(this.channelHasField(channel$jscomp$0)){const fieldDef=facet[channel$jscomp$0];var titleConfig=getHeaderProperty(\"title\",null,config,channel$jscomp$0);titleConfig=title$jscomp$0(fieldDef,config,{allowDisabling:!0,includeDefault:void 0===titleConfig||!!titleConfig});child.component.layoutHeaders[channel$jscomp$0].title&&(titleConfig=isArray(titleConfig)?titleConfig.join(\", \"):\ntitleConfig,titleConfig+=\" / \"+child.component.layoutHeaders[channel$jscomp$0].title,child.component.layoutHeaders[channel$jscomp$0].title=null);var labelOrient=getHeaderProperty(\"labelOrient\",fieldDef,config,channel$jscomp$0);const header=null!==(_fieldDef$header=fieldDef.header)&&void 0!==_fieldDef$header?_fieldDef$header:{};_fieldDef$header=getFirstDefined(header.labels,config.header.labels,!0);labelOrient=contains([\"bottom\",\"right\"],labelOrient)?\"footer\":\"header\";component.layoutHeaders[channel$jscomp$0]=\n{title:titleConfig,facetFieldDef:fieldDef,[labelOrient]:\"facet\"===channel$jscomp$0?[]:[makeHeaderComponent(this,channel$jscomp$0,_fieldDef$header)]}}}}mergeChildAxis(this,\"x\");mergeChildAxis(this,\"y\")}assembleSelectionTopLevelSignals(signals){return this.child.assembleSelectionTopLevelSignals(signals)}assembleSignals(){this.child.assembleSignals();return[]}assembleSelectionData(data){return this.child.assembleSelectionData(data)}getHeaderLayoutMixins(){const layoutMixins={};for(const channel of FACET_CHANNELS)for(const headerType of HEADER_TYPES){const layoutHeaderComponent=\nthis.component.layoutHeaders[channel];var headerComponent=layoutHeaderComponent[headerType],{facetFieldDef}=layoutHeaderComponent;if(facetFieldDef&&(facetFieldDef=getHeaderProperty(\"titleOrient\",facetFieldDef.header,this.config,channel),contains([\"right\",\"bottom\"],facetFieldDef))){var _layoutMixins$titleAn;facetFieldDef=getHeaderChannel(channel,facetFieldDef);layoutMixins.titleAnchor=null!==(_layoutMixins$titleAn=layoutMixins.titleAnchor)&&void 0!==_layoutMixins$titleAn?_layoutMixins$titleAn:{};layoutMixins.titleAnchor[facetFieldDef]=\n\"end\"}if(null===headerComponent||void 0===headerComponent?0:headerComponent[0]){headerComponent=\"row\"===channel?\"height\":\"width\";facetFieldDef=\"header\"===headerType?\"headerBand\":\"footerBand\";if(\"facet\"!==channel&&!this.child.component.layoutSize.get(headerComponent)){var _layoutMixins$bandTyp;layoutMixins[facetFieldDef]=null!==(_layoutMixins$bandTyp=layoutMixins[facetFieldDef])&&void 0!==_layoutMixins$bandTyp?_layoutMixins$bandTyp:{};layoutMixins[facetFieldDef][channel]=.5}if(layoutHeaderComponent.title){var _layoutMixins$offset;\nlayoutMixins.offset=null!==(_layoutMixins$offset=layoutMixins.offset)&&void 0!==_layoutMixins$offset?_layoutMixins$offset:{};layoutMixins.offset[\"row\"===channel?\"rowTitle\":\"columnTitle\"]=10}}}return layoutMixins}assembleDefaultLayout(){const {column,row}=this.facet,columns=column?this.columnDistinctSignal():row?1:void 0;let align=\"all\";row||\"independent\"!==this.component.resolve.scale.x?column||\"independent\"!==this.component.resolve.scale.y||(align=\"none\"):align=\"none\";return Object.assign({},this.getHeaderLayoutMixins(),\ncolumns?{columns}:{},{bounds:\"full\",align})}assembleLayoutSignals(){return this.child.assembleLayoutSignals()}columnDistinctSignal(){if(!(this.parent&&this.parent instanceof FacetModel)){const facetLayoutDataName=this.getName(\"column_domain\");return{signal:\"length(data('\".concat(facetLayoutDataName,\"'))\")}}}assembleGroup(signals){return this.parent&&this.parent instanceof FacetModel?Object.assign({},this.channelHasField(\"column\")?{encode:{update:{columns:{field:vgField(this.facet.column,{prefix:\"distinct\"})}}}}:\n{},super.assembleGroup(signals)):super.assembleGroup(signals)}getCardinalityAggregateForChild(){const fields=[],ops=[],as=[];if(this.child instanceof FacetModel){if(this.child.channelHasField(\"column\")){var field=vgField(this.child.facet.column);fields.push(field);ops.push(\"distinct\");as.push(\"distinct_\".concat(field))}}else for(field of POSITION_SCALE_CHANNELS){var childScaleComponent=this.child.component.scales[field];if(childScaleComponent&&!childScaleComponent.merged){var type=childScaleComponent.get(\"type\");\nchildScaleComponent=childScaleComponent.get(\"range\");type in DISCRETE_DOMAIN_INDEX&&isVgRangeStep(childScaleComponent)&&(type=assembleDomain(this.child,field),(type=getFieldFromDomain(type))?(fields.push(type),ops.push(\"distinct\"),as.push(\"distinct_\".concat(type))):warn(unknownField(field)))}}return{fields,ops,as}}assembleFacet(){const {name,data}=this.component.data.facetRoot,{row,column}=this.facet,{fields,ops,as}=this.getCardinalityAggregateForChild(),groupby=[];for(var channel of FACET_CHANNELS){var fieldDef=\nthis.facet[channel];if(fieldDef){groupby.push(vgField(fieldDef));const {bin,sort}=fieldDef;isBinning(bin)&&groupby.push(vgField(fieldDef,{binSuffix:\"end\"}));if(isSortField(sort)){const {field,op=\"min\"}=sort;fieldDef=facetSortFieldName(fieldDef,sort);row&&column?(fields.push(fieldDef),ops.push(\"max\")):(fields.push(field),ops.push(op));as.push(fieldDef)}else isArray(sort)&&(fieldDef=sortArrayIndexField(fieldDef,channel),fields.push(fieldDef),ops.push(\"max\"),as.push(fieldDef))}}channel=!!row&&!!column;\nreturn Object.assign({},{name,data,groupby},channel||0<fields.length?{aggregate:Object.assign({},channel?{cross:channel}:{},fields.length?{fields,ops,as}:{})}:{})}facetSortFields(channel){var {facet}=this;return(facet=facet[channel])?isSortField(facet.sort)?[facetSortFieldName(facet,facet.sort,{expr:\"datum\"})]:isArray(facet.sort)?[sortArrayIndexField(facet,channel,{expr:\"datum\"})]:[vgField(facet,{expr:\"datum\"})]:[]}facetSortOrder(channel){const {facet}=this;return(channel=facet[channel])?({sort:channel}=\nchannel,[(isSortField(channel)?channel.order:!isArray(channel)&&channel)||\"ascending\"]):[]}assembleLabelTitle(){const {facet,config}=this;if(facet.facet)return assembleLabelTitle(facet.facet,\"facet\",config);const ORTHOGONAL_ORIENT={row:[\"top\",\"bottom\"],column:[\"left\",\"right\"]};for(const channel of HEADER_CHANNELS)if(facet[channel]){var _facet$channel;const labelOrient=getHeaderProperty(\"labelOrient\",null===(_facet$channel=facet[channel])||void 0===_facet$channel?void 0:_facet$channel.header,config,\nchannel);if(contains(ORTHOGONAL_ORIENT[channel],labelOrient))return assembleLabelTitle(facet[channel],channel,config)}}assembleMarks(){const {child}=this,data=assembleFacetData(this.component.data.facetRoot),encodeEntry=child.assembleGroupEncodeEntry(!1),title=this.assembleLabelTitle()||child.assembleTitle(),style=child.assembleGroupStyle();return[Object.assign({},{name:this.getName(\"cell\"),type:\"group\"},title?{title}:{},style?{style}:{},{from:{facet:this.assembleFacet()},sort:{field:FACET_CHANNELS.map(c=>\nthis.facetSortFields(c)).flat(),order:FACET_CHANNELS.map(c=>this.facetSortOrder(c)).flat()}},0<data.length?{data}:{},encodeEntry?{encode:{update:encodeEntry}}:{},child.assembleGroup(assembleFacetSignals(this,[])))]}getMapping(){return this.facet}}class ConcatModel extends Model{constructor(spec,parent,parentGivenName,config){var _spec$resolve,_spec$resolve$axis,_spec$resolve2,_spec$resolve2$axis;super(spec,\"concat\",parent,parentGivenName,config,spec.resolve);_defineProperty(this,\"children\",void 0);\n\"shared\"!==(null===(_spec$resolve=spec.resolve)||void 0===_spec$resolve?void 0:null===(_spec$resolve$axis=_spec$resolve.axis)||void 0===_spec$resolve$axis?void 0:_spec$resolve$axis.x)&&\"shared\"!==(null===(_spec$resolve2=spec.resolve)||void 0===_spec$resolve2?void 0:null===(_spec$resolve2$axis=_spec$resolve2.axis)||void 0===_spec$resolve2$axis?void 0:_spec$resolve2$axis.y)||warn(\"Axes cannot be shared in concatenated or repeated views yet (https://github.com/vega/vega-lite/issues/2415).\");this.children=\nthis.getChildren(spec).map((child,i)=>buildModel(child,this,this.getName(\"concat_\"+i),void 0,config))}parseData(){this.component.data=parseData(this);for(const child of this.children)child.parseData()}parseSelections(){this.component.selection={};for(const child of this.children){child.parseSelections();for(const key of keys$jscomp$0(child.component.selection))this.component.selection[key]=child.component.selection[key]}}parseMarkGroup(){for(const child of this.children)child.parseMarkGroup()}parseAxesAndHeaders(){for(const child of this.children)child.parseAxesAndHeaders()}getChildren(spec){return\"vconcat\"in\nspec?spec.vconcat:\"hconcat\"in spec?spec.hconcat:spec.concat}parseLayoutSize(){{parseChildrenLayoutSize(this);const heightType=void 0===this.layout.columns?\"height\":\"childHeight\";parseNonUnitLayoutSizeForChannel(this,1===this.layout.columns?\"width\":\"childWidth\");parseNonUnitLayoutSizeForChannel(this,heightType)}}parseAxisGroup(){return null}assembleSelectionTopLevelSignals(signals){return this.children.reduce((sg,child)=>child.assembleSelectionTopLevelSignals(sg),signals)}assembleSignals(){this.children.forEach(child=>\nchild.assembleSignals());return[]}assembleLayoutSignals(){const layoutSignals=assembleLayoutSignals(this);for(const child of this.children)layoutSignals.push(...child.assembleLayoutSignals());return layoutSignals}assembleSelectionData(data){return this.children.reduce((db,child)=>child.assembleSelectionData(db),data)}assembleMarks(){return this.children.map(child=>{const title=child.assembleTitle(),style=child.assembleGroupStyle(),encodeEntry=child.assembleGroupEncodeEntry(!1);return Object.assign({},\n{type:\"group\",name:child.getName(\"group\")},title?{title}:{},style?{style}:{},encodeEntry?{encode:{update:encodeEntry}}:{},child.assembleGroup())})}assembleDefaultLayout(){const columns=this.layout.columns;return Object.assign({},null!=columns?{columns}:{},{bounds:\"full\",align:\"each\"})}}const AXIS_COMPONENT_PROPERTIES_INDEX=Object.assign({},{disable:1,gridScale:1,scale:1},COMMON_AXIS_PROPERTIES_INDEX,{labelExpr:1,encode:1}),AXIS_COMPONENT_PROPERTIES=keys$jscomp$0(AXIS_COMPONENT_PROPERTIES_INDEX);class AxisComponent extends Split{constructor(explicit,\nimplicit,mainExtracted){explicit=void 0===explicit?{}:explicit;implicit=void 0===implicit?{}:implicit;mainExtracted=void 0===mainExtracted?!1:mainExtracted;super();this.explicit=explicit;this.implicit=implicit;this.mainExtracted=mainExtracted}clone(){return new AxisComponent(duplicate(this.explicit),duplicate(this.implicit),this.mainExtracted)}hasAxisPart(part){if(\"axis\"===part)return!0;if(\"grid\"===part||\"title\"===part)return!!this.get(part);part=this.get(part);return!(!1===part||null===part)}hasOrientSignalRef(){return isSignalRef(this.explicit.orient)}}\nconst OPPOSITE_ORIENT={bottom:\"top\",top:\"bottom\",left:\"right\",right:\"left\"},propsToAlwaysIncludeConfig=new Set(\"grid translate format formatType orient labelExpr tickCount position tickMinStep\".split(\" \")),markCompiler={arc:{vgMark:\"arc\",encodeEntry:model=>Object.assign({},baseEncodeEntry(model,{align:\"ignore\",baseline:\"ignore\",color:\"include\",size:\"ignore\",orient:\"ignore\",theta:\"ignore\"}),pointPosition(\"x\",model,{defaultPos:\"mid\"}),pointPosition(\"y\",model,{defaultPos:\"mid\"}),rectPosition(model,\"radius\",\n\"arc\"),rectPosition(model,\"theta\",\"arc\"))},area:{vgMark:\"area\",encodeEntry:model=>Object.assign({},baseEncodeEntry(model,{align:\"ignore\",baseline:\"ignore\",color:\"include\",orient:\"include\",size:\"ignore\",theta:\"ignore\"}),pointOrRangePosition(\"x\",model,{defaultPos:\"zeroOrMin\",defaultPos2:\"zeroOrMin\",range:\"horizontal\"===model.markDef.orient}),pointOrRangePosition(\"y\",model,{defaultPos:\"zeroOrMin\",defaultPos2:\"zeroOrMin\",range:\"vertical\"===model.markDef.orient}),defined(model))},bar:{vgMark:\"rect\",encodeEntry:model=>\nObject.assign({},baseEncodeEntry(model,{align:\"ignore\",baseline:\"ignore\",color:\"include\",orient:\"ignore\",size:\"ignore\",theta:\"ignore\"}),rectPosition(model,\"x\",\"bar\"),rectPosition(model,\"y\",\"bar\"))},circle:{vgMark:\"symbol\",encodeEntry:model=>encodeEntry(model,\"circle\")},geoshape:{vgMark:\"shape\",encodeEntry:model=>Object.assign({},baseEncodeEntry(model,{align:\"ignore\",baseline:\"ignore\",color:\"include\",size:\"ignore\",orient:\"ignore\",theta:\"ignore\"})),postEncodingTransform:model=>{var {encoding}=model;\nencoding=encoding.shape;return[Object.assign({},{type:\"geoshape\",projection:model.projectionName()},encoding&&isFieldDef(encoding)&&\"geojson\"===encoding.type?{field:vgField(encoding,{expr:\"datum\"})}:{})]}},image:{vgMark:\"image\",encodeEntry:model=>Object.assign({},baseEncodeEntry(model,{align:\"ignore\",baseline:\"ignore\",color:\"ignore\",orient:\"ignore\",size:\"ignore\",theta:\"ignore\"}),rectPosition(model,\"x\",\"image\"),rectPosition(model,\"y\",\"image\"),text$jscomp$0(model,\"url\"))},line:{vgMark:\"line\",encodeEntry:model=>\nObject.assign({},baseEncodeEntry(model,{align:\"ignore\",baseline:\"ignore\",color:\"include\",size:\"ignore\",orient:\"ignore\",theta:\"ignore\"}),pointPosition(\"x\",model,{defaultPos:\"mid\"}),pointPosition(\"y\",model,{defaultPos:\"mid\"}),nonPosition(\"size\",model,{vgChannel:\"strokeWidth\"}),defined(model))},point:{vgMark:\"symbol\",encodeEntry:model=>encodeEntry(model)},rect:{vgMark:\"rect\",encodeEntry:model=>Object.assign({},baseEncodeEntry(model,{align:\"ignore\",baseline:\"ignore\",color:\"include\",orient:\"ignore\",size:\"ignore\",\ntheta:\"ignore\"}),rectPosition(model,\"x\",\"rect\"),rectPosition(model,\"y\",\"rect\"))},rule:{vgMark:\"rule\",encodeEntry:model=>{var {markDef}=model;markDef=markDef.orient;return model.encoding.x||model.encoding.y||model.encoding.latitude||model.encoding.longitude?Object.assign({},baseEncodeEntry(model,{align:\"ignore\",baseline:\"ignore\",color:\"include\",orient:\"ignore\",size:\"ignore\",theta:\"ignore\"}),pointOrRangePosition(\"x\",model,{defaultPos:\"horizontal\"===markDef?\"zeroOrMax\":\"mid\",defaultPos2:\"zeroOrMin\",\nrange:\"vertical\"!==markDef}),pointOrRangePosition(\"y\",model,{defaultPos:\"vertical\"===markDef?\"zeroOrMax\":\"mid\",defaultPos2:\"zeroOrMin\",range:\"horizontal\"!==markDef}),nonPosition(\"size\",model,{vgChannel:\"strokeWidth\"})):{}}},square:{vgMark:\"symbol\",encodeEntry:model=>encodeEntry(model,\"square\")},text:{vgMark:\"text\",encodeEntry:model=>{var {config}=model,JSCompiler_temp_const=Object,JSCompiler_temp_const$jscomp$0=JSCompiler_temp_const.assign,JSCompiler_temp_const$jscomp$1=baseEncodeEntry(model,{align:\"include\",\nbaseline:\"include\",color:\"include\",size:\"ignore\",orient:\"ignore\",theta:\"include\"}),JSCompiler_temp_const$jscomp$2=pointPosition(\"x\",model,{defaultPos:\"mid\"}),JSCompiler_temp_const$jscomp$3=pointPosition(\"y\",model,{defaultPos:\"mid\"}),JSCompiler_temp_const$jscomp$4=text$jscomp$0(model),JSCompiler_temp_const$jscomp$5=nonPosition(\"size\",model,{vgChannel:\"fontSize\"}),JSCompiler_temp_const$jscomp$6=nonPosition(\"angle\",model);var JSCompiler_inline_result=void 0===getMarkPropOrConfig(\"align\",model.markDef,\nconfig)?\"center\":void 0;JSCompiler_inline_result=valueIfDefined(\"align\",JSCompiler_inline_result);config=void 0===getMarkPropOrConfig(\"baseline\",model.markDef,config)?\"middle\":void 0;return JSCompiler_temp_const$jscomp$0.call(JSCompiler_temp_const,{},JSCompiler_temp_const$jscomp$1,JSCompiler_temp_const$jscomp$2,JSCompiler_temp_const$jscomp$3,JSCompiler_temp_const$jscomp$4,JSCompiler_temp_const$jscomp$5,JSCompiler_temp_const$jscomp$6,JSCompiler_inline_result,valueIfDefined(\"baseline\",config),pointPosition(\"radius\",\nmodel,{defaultPos:null,isMidPoint:!0}),pointPosition(\"theta\",model,{defaultPos:null,isMidPoint:!0}))}},tick:{vgMark:\"rect\",encodeEntry:model=>{const {config:config$jscomp$0,markDef:markDef$jscomp$0}=model;var orient=markDef$jscomp$0.orient;const vgSizeChannel$jscomp$0=\"horizontal\"===orient?\"width\":\"height\";orient=\"horizontal\"===orient?\"height\":\"width\";var JSCompiler_temp_const=Object,JSCompiler_temp_const$jscomp$0=JSCompiler_temp_const.assign,JSCompiler_temp_const$jscomp$1=baseEncodeEntry(model,{align:\"ignore\",\nbaseline:\"ignore\",color:\"include\",orient:\"ignore\",size:\"ignore\",theta:\"ignore\"}),JSCompiler_temp_const$jscomp$2=pointPosition(\"x\",model,{defaultPos:\"mid\",vgChannel:\"xc\"}),JSCompiler_temp_const$jscomp$3=pointPosition(\"y\",model,{defaultPos:\"mid\",vgChannel:\"yc\"}),JSCompiler_inline_result;{const {config,markDef}=model;var {orient:orient$jscomp$0}=markDef;const vgSizeChannel=\"horizontal\"===orient$jscomp$0?\"width\":\"height\";orient$jscomp$0=model.getScaleComponent(\"horizontal\"===orient$jscomp$0?\"x\":\"y\");\nconst markPropOrConfig=null!==(JSCompiler_inline_result=getMarkPropOrConfig(\"size\",markDef,config,{vgChannel:vgSizeChannel}))&&void 0!==JSCompiler_inline_result?JSCompiler_inline_result:config.tick.bandSize;JSCompiler_inline_result=void 0!==markPropOrConfig?markPropOrConfig:(JSCompiler_inline_result=orient$jscomp$0?orient$jscomp$0.get(\"range\"):void 0)&&isVgRangeStep(JSCompiler_inline_result)&&isNumber(JSCompiler_inline_result.step)?3*JSCompiler_inline_result.step/4:3*getViewConfigDiscreteStep(config.view,\nvgSizeChannel)/4}return JSCompiler_temp_const$jscomp$0.call(JSCompiler_temp_const,{},JSCompiler_temp_const$jscomp$1,JSCompiler_temp_const$jscomp$2,JSCompiler_temp_const$jscomp$3,nonPosition(\"size\",model,{defaultValue:JSCompiler_inline_result,vgChannel:vgSizeChannel$jscomp$0}),{[orient]:signalOrValueRef(getMarkPropOrConfig(\"thickness\",markDef$jscomp$0,config$jscomp$0))})}},trail:{vgMark:\"trail\",encodeEntry:model=>Object.assign({},baseEncodeEntry(model,{align:\"ignore\",baseline:\"ignore\",color:\"include\",\nsize:\"include\",orient:\"ignore\",theta:\"ignore\"}),pointPosition(\"x\",model,{defaultPos:\"mid\"}),pointPosition(\"y\",model,{defaultPos:\"mid\"}),nonPosition(\"size\",model),defined(model))}};class UnitModel extends ModelWithField{constructor(spec,parent,parentGivenName,parentGivenSize,config){parentGivenSize=void 0===parentGivenSize?{}:parentGivenSize;super(spec,\"unit\",parent,parentGivenName,config,void 0,isFrameMixins(spec)?spec.view:void 0);_defineProperty(this,\"markDef\",void 0);_defineProperty(this,\"encoding\",\nvoid 0);_defineProperty(this,\"specifiedScales\",{});_defineProperty(this,\"stack\",void 0);_defineProperty(this,\"specifiedAxes\",{});_defineProperty(this,\"specifiedLegends\",{});_defineProperty(this,\"specifiedProjection\",{});_defineProperty(this,\"selection\",{});_defineProperty(this,\"children\",[]);var markDef=isMarkDef(spec.mark)?Object.assign({},spec.mark):{type:spec.mark};parent=markDef.type;if(void 0===markDef.filled){({graticule:parentGivenName}={graticule:spec.data&&\"graticule\"in spec.data});if(parentGivenName)parentGivenName=\n!1;else{parentGivenName=getMarkConfig(\"filled\",markDef,config);var mark=markDef.type;parentGivenName=getFirstDefined(parentGivenName,mark!==POINT&&mark!==LINE&&mark!==RULE)}markDef.filled=parentGivenName}parentGivenName=this.encoding=initEncoding(spec.encoding||{},parent,markDef.filled,config);markDef=replaceExprRefInIndex(markDef);mark=getMarkPropOrConfig(\"orient\",markDef,config);markDef.orient=orient$jscomp$1(markDef.type,parentGivenName,mark);void 0!==mark&&mark!==markDef.orient&&(mark='Specified orient \"'.concat(markDef.orient,\n'\" overridden with \"').concat(mark,'\".'),warn(mark));if(\"bar\"===markDef.type&&markDef.orient&&(mark=getMarkPropOrConfig(\"cornerRadiusEnd\",markDef,config),void 0!==mark)){const newProps=\"horizontal\"===markDef.orient&&parentGivenName.x2||\"vertical\"===markDef.orient&&parentGivenName.y2?[\"cornerRadius\"]:BAR_CORNER_RADIUS_INDEX[markDef.orient];for(var newProp of newProps)markDef[newProp]=mark;void 0!==markDef.cornerRadiusEnd&&delete markDef.cornerRadiusEnd}void 0===getMarkPropOrConfig(\"opacity\",markDef,\nconfig)&&(newProp=contains([POINT,TICK,CIRCLE,SQUARE],markDef.type)&&!isAggregate(parentGivenName)?.7:void 0,markDef.opacity=newProp);void 0===getMarkPropOrConfig(\"cursor\",markDef,config)&&(newProp=markDef,config=parentGivenName.href||newProp.href||getMarkPropOrConfig(\"href\",newProp,config)?\"pointer\":newProp.cursor,markDef.cursor=config);this.markDef=config=markDef;parentGivenSize={encoding:parentGivenName,size:isFrameMixins(spec)?Object.assign({},parentGivenSize,spec.width?{width:spec.width}:{},\nspec.height?{height:spec.height}:{}):parentGivenSize};var {encoding,size}=parentGivenSize;for(const channel of POSITION_SCALE_CHANNELS)parentGivenSize=getSizeChannel(channel),isStep(size[parentGivenSize])&&isContinuousFieldOrDatumDef(encoding[channel])&&(delete size[parentGivenSize],warn(stepDropped(parentGivenSize)));this.size=size;this.stack=stack$jscomp$1(parent,parentGivenName);this.specifiedScales=this.initScales(parent,parentGivenName);this.specifiedAxes=this.initAxes(parentGivenName);this.specifiedLegends=\nthis.initLegends(parentGivenName);this.specifiedProjection=spec.projection;this.selection=spec.selection}get hasProjection(){const {encoding}=this,isGeoShapeMark=this.mark===GEOSHAPE,hasGeoPosition=encoding&&GEOPOSITION_CHANNELS.some(channel=>isFieldOrDatumDef(encoding[channel]));return isGeoShapeMark||hasGeoPosition}scaleDomain(channel){return(channel=this.specifiedScales[channel])?channel.domain:void 0}axis(channel){return this.specifiedAxes[channel]}legend(channel){return this.specifiedLegends[channel]}initScales(mark,\nencoding){return SCALE_CHANNELS.reduce((scales,channel)=>{const fieldOrDatumDef=getFieldOrDatumDef(encoding[channel]);if(fieldOrDatumDef){var _fieldOrDatumDef$scal;scales[channel]=this.initScale(null!==(_fieldOrDatumDef$scal=fieldOrDatumDef.scale)&&void 0!==_fieldOrDatumDef$scal?_fieldOrDatumDef$scal:{})}return scales},{})}initScale(scale){const {domain,range}=scale;scale=replaceExprRefInIndex(scale);isArray(domain)&&(scale.domain=domain.map(signalRefOrValue));isArray(range)&&(scale.range=range.map(signalRefOrValue));\nreturn scale}initAxes(encoding){return POSITION_SCALE_CHANNELS.reduce((_axis,channel)=>{var channelDef=encoding[channel];if(isFieldOrDatumDef(channelDef)||\"x\"===channel&&isFieldOrDatumDef(encoding.x2)||\"y\"===channel&&isFieldOrDatumDef(encoding.y2))channelDef=isFieldOrDatumDef(channelDef)?channelDef.axis:void 0,_axis[channel]=channelDef?this.initAxis(Object.assign({},channelDef)):channelDef;return _axis},{})}initAxis(axis){var props=keys$jscomp$0(axis);const axisInternal={};for(const prop of props)props=\naxis[prop],axisInternal[prop]=isConditionalAxisValue(props)?signalOrValueRefWithCondition(props):signalRefOrValue(props);return axisInternal}initLegends(encoding){return NONPOSITION_SCALE_CHANNELS.reduce((_legend,channel)=>{var fieldOrDatumDef=getFieldOrDatumDef(encoding[channel]),JSCompiler_temp;if(JSCompiler_temp=fieldOrDatumDef)a:{switch(channel){case \"color\":case \"fill\":case \"stroke\":case \"size\":case \"shape\":case \"opacity\":case \"strokeWidth\":case \"strokeDash\":JSCompiler_temp=!0;break a;case \"fillOpacity\":case \"strokeOpacity\":case \"angle\":JSCompiler_temp=\n!1;break a}JSCompiler_temp=void 0}JSCompiler_temp&&(fieldOrDatumDef=fieldOrDatumDef.legend,_legend[channel]=fieldOrDatumDef?replaceExprRefInIndex(fieldOrDatumDef):fieldOrDatumDef);return _legend},{})}parseData(){this.component.data=parseData(this)}parseLayoutSize(){{const {size,component}=this;for(const channel of POSITION_SCALE_CHANNELS){const sizeType=getSizeChannel(channel);if(size[sizeType]){var specifiedSize=size[sizeType];component.layoutSize.set(sizeType,isStep(specifiedSize)?\"step\":specifiedSize,\n!0)}else specifiedSize=defaultUnitSize(this,sizeType),component.layoutSize.set(sizeType,specifiedSize,!1)}}}parseSelections(){this.component.selection=parseUnitSelection(this,this.selection)}parseMarkGroup(){this.component.mark=parseMarkGroups(this)}parseAxesAndHeaders(){this.component.axes=parseUnitAxes(this)}assembleSelectionTopLevelSignals(signals){return assembleTopLevelSignals(this,signals)}assembleSignals(){return[...assembleAxisSignals(this),...assembleUnitSelectionSignals(this,[])]}assembleSelectionData(data){return assembleUnitSelectionData(this,\ndata)}assembleLayout(){return null}assembleLayoutSignals(){return assembleLayoutSignals(this)}assembleMarks(){var _this$component$mark;let marks=null!==(_this$component$mark=this.component.mark)&&void 0!==_this$component$mark?_this$component$mark:[];this.parent&&isLayerModel(this.parent)||(marks=assembleUnitSelectionMarks(this,marks));return marks.map(this.correctDataNames)}getMapping(){return this.encoding}get mark(){return this.markDef.type}channelHasField(channel){return channelHasField(this.encoding,\nchannel)}fieldDef(channel){return getFieldDef(this.encoding[channel])}typedFieldDef(channel){channel=this.fieldDef(channel);return isTypedFieldDef(channel)?channel:null}}class LayerModel extends Model{constructor(spec,parent,parentGivenName,parentGivenSize,config){super(spec,\"layer\",parent,parentGivenName,config,spec.resolve,spec.view);_defineProperty(this,\"children\",void 0);const layoutSize=Object.assign({},parentGivenSize,spec.width?{width:spec.width}:{},spec.height?{height:spec.height}:{});this.children=\nspec.layer.map((layer,i)=>{if(\"layer\"in layer)return new LayerModel(layer,this,this.getName(\"layer_\"+i),layoutSize,config);if(isUnitSpec(layer))return new UnitModel(layer,this,this.getName(\"layer_\"+i),layoutSize,config);throw Error(invalidSpec(layer));})}parseData(){this.component.data=parseData(this);for(const child of this.children)child.parseData()}parseLayoutSize(){parseChildrenLayoutSize(this);parseNonUnitLayoutSizeForChannel(this,\"width\");parseNonUnitLayoutSizeForChannel(this,\"height\")}parseSelections(){this.component.selection=\n{};for(const child of this.children){child.parseSelections();for(const key of keys$jscomp$0(child.component.selection))this.component.selection[key]=child.component.selection[key]}}parseMarkGroup(){for(const child of this.children)child.parseMarkGroup()}parseAxesAndHeaders(){{const {axes,resolve}=this.component,axisCount={top:0,bottom:0,right:0,left:0};for(var child$jscomp$0 of this.children){child$jscomp$0.parseAxesAndHeaders();for(const channel of keys$jscomp$0(child$jscomp$0.component.axes))resolve.axis[channel]=\nparseGuideResolve(this.component.resolve,channel),\"shared\"===resolve.axis[channel]&&(axes[channel]=mergeAxisComponents(axes[channel],child$jscomp$0.component.axes[channel]),axes[channel]||(resolve.axis[channel]=\"independent\",delete axes[channel]))}for(const channel of POSITION_SCALE_CHANNELS){for(const child of this.children)if(child.component.axes[channel]){if(\"independent\"===resolve.axis[channel]){var _axes$channel;axes[channel]=(null!==(_axes$channel=axes[channel])&&void 0!==_axes$channel?_axes$channel:\n[]).concat(child.component.axes[channel]);for(const axisComponent of child.component.axes[channel]){const {value:orient,explicit}=axisComponent.getWithExplicit(\"orient\");isSignalRef(orient)||(0<axisCount[orient]&&!explicit&&(child$jscomp$0=OPPOSITE_ORIENT[orient],axisCount[orient]>axisCount[child$jscomp$0]&&axisComponent.set(\"orient\",child$jscomp$0,!1)),axisCount[orient]++)}}delete child.component.axes[channel]}if(\"independent\"===resolve.axis[channel]&&axes[channel]&&1<axes[channel].length)for(const axisCmpt of axes[channel])axisCmpt.get(\"grid\")&&\n!axisCmpt.explicit.grid&&(axisCmpt.implicit.grid=!1)}}}assembleSelectionTopLevelSignals(signals){return this.children.reduce((sg,child)=>child.assembleSelectionTopLevelSignals(sg),signals)}assembleSignals(){return this.children.reduce((signals,child)=>signals.concat(child.assembleSignals()),assembleAxisSignals(this))}assembleLayoutSignals(){return this.children.reduce((signals,child)=>signals.concat(child.assembleLayoutSignals()),assembleLayoutSignals(this))}assembleSelectionData(data){return this.children.reduce((db,\nchild)=>child.assembleSelectionData(db),data)}assembleTitle(){let title=super.assembleTitle();if(title)return title;for(const child of this.children)if(title=child.assembleTitle())return title}assembleLayout(){return null}assembleMarks(){return assembleLayerSelectionMarks(this,this.children.flatMap(child=>child.assembleMarks()))}assembleLegends(){return this.children.reduce((legends,child)=>legends.concat(child.assembleLegends()),assembleLegends(this))}}exports.accessPathDepth=accessPathDepth;exports.accessPathWithDatum=\naccessPathWithDatum;exports.compile=function(inputSpec,opt){opt=void 0===opt?{}:opt;opt.logger&&(current=opt.logger);opt.fieldTitle&&(titleFormatter=opt.fieldTitle);try{const config=initConfig(mergeConfig(opt.config,inputSpec.config)),spec=normalize$jscomp$0(inputSpec,config),model=buildModel(spec,null,\"\",void 0,config);model.parse();{var data=model.component.data,model$jscomp$0=model;checkLinks(data.sources);let firstPassCounter=0,secondPassCounter=0;for(var i=0;5>i&&optimizationDataflowHelper(data,\nmodel$jscomp$0,!0);i++)firstPassCounter++;data.sources.map(moveFacetDown);for(i=0;5>i&&optimizationDataflowHelper(data,model$jscomp$0,!1);i++)secondPassCounter++;checkLinks(data.sources);5===Math.max(firstPassCounter,secondPassCounter)&&warn(\"Maximum optimization runs(\".concat(5,\") reached.\"))}{var autosize=spec.autosize;data=config;model$jscomp$0=model;const width=model$jscomp$0.component.layoutSize.get(\"width\"),height=model$jscomp$0.component.layoutSize.get(\"height\");void 0===autosize?(autosize=\n{type:\"pad\"},model$jscomp$0.hasAxisOrientSignalRef()&&(autosize.resize=!0)):isString(autosize)&&(autosize={type:autosize});var JSCompiler_temp;if(JSCompiler_temp=width&&height){var autoSizeType=autosize.type;JSCompiler_temp=\"fit\"===autoSizeType||\"fit-x\"===autoSizeType||\"fit-y\"===autoSizeType}if(JSCompiler_temp)if(\"step\"===width&&\"step\"===height)warn(droppingFit()),autosize.type=\"pad\";else if(\"step\"===width||\"step\"===height){autoSizeType=\"step\"===width?\"width\":\"height\";warn(droppingFit(getPositionScaleChannel(autoSizeType)));\nJSCompiler_temp=autosize;var JSCompiler_inline_result=(autoSizeType=\"width\"===autoSizeType?\"height\":\"width\",\"fit-\".concat(getPositionScaleChannel(autoSizeType)));JSCompiler_temp.type=JSCompiler_inline_result}var JSCompiler_inline_result$jscomp$0=Object.assign({},1===keys$jscomp$0(autosize).length&&autosize.type?\"pad\"===autosize.type?{}:{autosize:autosize.type}:{autosize},extractTopLevelProperties(data,!1),extractTopLevelProperties(inputSpec,!0))}return{spec:assembleTopLevelModel(model,JSCompiler_inline_result$jscomp$0,\ninputSpec.datasets,inputSpec.usermeta),normalized:spec}}finally{opt.logger&&(current=main$jscomp$0),opt.fieldTitle&&(titleFormatter=defaultTitleFormatter)}};exports.contains=contains;exports.deepEqual=deepEqual;exports.deleteNestedProperty=deleteNestedProperty;exports.duplicate=duplicate;exports.entries=entries;exports.every=every;exports.fieldIntersection=fieldIntersection;exports.flatAccessWithDatum=flatAccessWithDatum;exports.getFirstDefined=getFirstDefined;exports.hasIntersection=hasIntersection;\nexports.hash=hash;exports.internalField=internalField;exports.isBoolean=isBoolean$1;exports.isEmpty=isEmpty;exports.isEqual=function(dict,other){const dictKeys=keys$jscomp$0(dict),otherKeys=keys$jscomp$0(other);if(dictKeys.length!==otherKeys.length)return!1;for(const key of dictKeys)if(dict[key]!==other[key])return!1;return!0};exports.isInternalField=isInternalField;exports.isNullOrFalse=isNullOrFalse;exports.isNumeric=isNumeric;exports.keys=keys$jscomp$0;exports.logicalExpr=logicalExpr;exports.mergeDeep=\nmergeDeep;exports.normalize=normalize$jscomp$0;exports.normalizeAngle=normalizeAngle;exports.omit=omit;exports.pick=pick;exports.prefixGenerator=prefixGenerator;exports.removePathFromField=removePathFromField;exports.replaceAll=replaceAll;exports.replacePathInField=replacePathInField;exports.resetIdCounter=function(){idCounter=42};exports.setEqual=setEqual;exports.some=some;exports.stringify=stringify;exports.titleCase=titleCase;exports.unique=unique;exports.uniqueId=uniqueId;exports.vals=vals$jscomp$0;\nexports.varName=varName;exports.version=\"4.17.0\";Object.defineProperty(exports,\"__esModule\",{value:!0})})}","~:source","shadow$provide[\"module$node_modules$vega_lite$build$vega_lite\"] = function(global,require,module,exports) {\nvar Buffer = require('buffer').Buffer;\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n  typeof define === 'function' && define.amd ? define(['exports'], factory) :\n  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.vegaLite = {}));\n}(this, (function (exports) { 'use strict';\n\n  var version = \"4.17.0\";\n\n  function accessor(fn, fields, name) {\n    fn.fields = fields || [];\n    fn.fname = name;\n    return fn;\n  }\n\n  function getter(path) {\n    return path.length === 1 ? get1(path[0]) : getN(path);\n  }\n\n  const get1 = field => function (obj) {\n    return obj[field];\n  };\n\n  const getN = path => {\n    const len = path.length;\n    return function (obj) {\n      for (let i = 0; i < len; ++i) {\n        obj = obj[path[i]];\n      }\n\n      return obj;\n    };\n  };\n\n  function error(message) {\n    throw Error(message);\n  }\n\n  function splitAccessPath(p) {\n    const path = [],\n          n = p.length;\n    let q = null,\n        b = 0,\n        s = '',\n        i,\n        j,\n        c;\n    p = p + '';\n\n    function push() {\n      path.push(s + p.substring(i, j));\n      s = '';\n      i = j + 1;\n    }\n\n    for (i = j = 0; j < n; ++j) {\n      c = p[j];\n\n      if (c === '\\\\') {\n        s += p.substring(i, j);\n        s += p.substring(++j, ++j);\n        i = j;\n      } else if (c === q) {\n        push();\n        q = null;\n        b = -1;\n      } else if (q) {\n        continue;\n      } else if (i === b && c === '\"') {\n        i = j + 1;\n        q = c;\n      } else if (i === b && c === \"'\") {\n        i = j + 1;\n        q = c;\n      } else if (c === '.' && !b) {\n        if (j > i) {\n          push();\n        } else {\n          i = j + 1;\n        }\n      } else if (c === '[') {\n        if (j > i) push();\n        b = i = j + 1;\n      } else if (c === ']') {\n        if (!b) error('Access path missing open bracket: ' + p);\n        if (b > 0) push();\n        b = 0;\n        i = j + 1;\n      }\n    }\n\n    if (b) error('Access path missing closing bracket: ' + p);\n    if (q) error('Access path missing closing quote: ' + p);\n\n    if (j > i) {\n      j++;\n      push();\n    }\n\n    return path;\n  }\n\n  function field(field, name, opt) {\n    const path = splitAccessPath(field);\n    field = path.length === 1 ? path[0] : field;\n    return accessor((opt && opt.get || getter)(path), [field], name || field);\n  }\n\n  const id = field('id');\n  const identity = accessor(_ => _, [], 'identity');\n  const zero = accessor(() => 0, [], 'zero');\n  const one = accessor(() => 1, [], 'one');\n  const truthy = accessor(() => true, [], 'true');\n  const falsy = accessor(() => false, [], 'false');\n\n  function log(method, level, input) {\n    const args = [level].concat([].slice.call(input));\n    console[method].apply(console, args); // eslint-disable-line no-console\n  }\n\n  const None = 0;\n  const Error$1 = 1;\n  const Warn = 2;\n  const Info = 3;\n  const Debug = 4;\n\n  function logger(_, method) {\n    let level = _ || None;\n    return {\n      level(_) {\n        if (arguments.length) {\n          level = +_;\n          return this;\n        } else {\n          return level;\n        }\n      },\n\n      error() {\n        if (level >= Error$1) log(method || 'error', 'ERROR', arguments);\n        return this;\n      },\n\n      warn() {\n        if (level >= Warn) log(method || 'warn', 'WARN', arguments);\n        return this;\n      },\n\n      info() {\n        if (level >= Info) log(method || 'log', 'INFO', arguments);\n        return this;\n      },\n\n      debug() {\n        if (level >= Debug) log(method || 'log', 'DEBUG', arguments);\n        return this;\n      }\n\n    };\n  }\n\n  var isArray = Array.isArray;\n\n  function isObject(_) {\n    return _ === Object(_);\n  }\n\n  const isLegalKey = key => key !== '__proto__';\n\n  function mergeConfig(...configs) {\n    return configs.reduce((out, source) => {\n      for (const key in source) {\n        if (key === 'signals') {\n          // for signals, we merge the signals arrays\n          // source signals take precedence over\n          // existing signals with the same name\n          out.signals = mergeNamed(out.signals, source.signals);\n        } else {\n          // otherwise, merge objects subject to recursion constraints\n          // for legend block, recurse for the layout entry only\n          // for style block, recurse for all properties\n          // otherwise, no recursion: objects overwrite, no merging\n          const r = key === 'legend' ? {\n            layout: 1\n          } : key === 'style' ? true : null;\n          writeConfig(out, key, source[key], r);\n        }\n      }\n\n      return out;\n    }, {});\n  }\n\n  function writeConfig(output, key, value, recurse) {\n    if (!isLegalKey(key)) return;\n    let k, o;\n\n    if (isObject(value) && !isArray(value)) {\n      o = isObject(output[key]) ? output[key] : output[key] = {};\n\n      for (k in value) {\n        if (recurse && (recurse === true || recurse[k])) {\n          writeConfig(o, k, value[k]);\n        } else if (isLegalKey(k)) {\n          o[k] = value[k];\n        }\n      }\n    } else {\n      output[key] = value;\n    }\n  }\n\n  function mergeNamed(a, b) {\n    if (a == null) return b;\n    const map = {},\n          out = [];\n\n    function add(_) {\n      if (!map[_.name]) {\n        map[_.name] = 1;\n        out.push(_);\n      }\n    }\n\n    b.forEach(add);\n    a.forEach(add);\n    return out;\n  }\n\n  function array(_) {\n    return _ != null ? isArray(_) ? _ : [_] : [];\n  }\n\n  function isFunction(_) {\n    return typeof _ === 'function';\n  }\n\n  const hop = Object.prototype.hasOwnProperty;\n\n  function has(object, property) {\n    return hop.call(object, property);\n  }\n\n  function isBoolean(_) {\n    return typeof _ === 'boolean';\n  }\n\n  function isNumber(_) {\n    return typeof _ === 'number';\n  }\n\n  function isString(_) {\n    return typeof _ === 'string';\n  }\n\n  function $(x) {\n    return isArray(x) ? '[' + x.map($) + ']' : isObject(x) || isString(x) ? // Output valid JSON and JS source strings.\n    // See http://timelessrepo.com/json-isnt-a-javascript-subset\n    JSON.stringify(x).replace('\\u2028', '\\\\u2028').replace('\\u2029', '\\\\u2029') : x;\n  }\n\n  function toSet(_) {\n    const s = {},\n          n = _.length;\n\n    for (let i = 0; i < n; ++i) s[_[i]] = true;\n\n    return s;\n  }\n\n  Array.prototype.flat||Object.defineProperty(Array.prototype,\"flat\",{configurable:!0,value:function r(){var t=isNaN(arguments[0])?1:Number(arguments[0]);return t?Array.prototype.reduce.call(this,function(a,e){return Array.isArray(e)?a.push.apply(a,r.call(e,t-1)):a.push(e),a},[]):Array.prototype.slice.call(this)},writable:!0}),Array.prototype.flatMap||Object.defineProperty(Array.prototype,\"flatMap\",{configurable:!0,value:function(r){return Array.prototype.map.apply(this,arguments).flat()},writable:!0});\n\n  function createCommonjsModule(fn, basedir, module) {\n  \treturn module = {\n  \t\tpath: basedir,\n  \t\texports: {},\n  \t\trequire: function (path, base) {\n  \t\t\treturn commonjsRequire(path, (base === undefined || base === null) ? module.path : base);\n  \t\t}\n  \t}, fn(module, module.exports), module.exports;\n  }\n\n  function commonjsRequire () {\n  \tthrow new Error('Dynamic requires are not currently supported by @rollup/plugin-commonjs');\n  }\n\n  var clone_1 = createCommonjsModule(function (module) {\n    var clone = function () {\n\n      function _instanceof(obj, type) {\n        return type != null && obj instanceof type;\n      }\n\n      var nativeMap;\n\n      try {\n        nativeMap = Map;\n      } catch (_) {\n        // maybe a reference error because no `Map`. Give it a dummy value that no\n        // value will ever be an instanceof.\n        nativeMap = function () {};\n      }\n\n      var nativeSet;\n\n      try {\n        nativeSet = Set;\n      } catch (_) {\n        nativeSet = function () {};\n      }\n\n      var nativePromise;\n\n      try {\n        nativePromise = Promise;\n      } catch (_) {\n        nativePromise = function () {};\n      }\n      /**\n       * Clones (copies) an Object using deep copying.\n       *\n       * This function supports circular references by default, but if you are certain\n       * there are no circular references in your object, you can save some CPU time\n       * by calling clone(obj, false).\n       *\n       * Caution: if `circular` is false and `parent` contains circular references,\n       * your program may enter an infinite loop and crash.\n       *\n       * @param `parent` - the object to be cloned\n       * @param `circular` - set to true if the object to be cloned may contain\n       *    circular references. (optional - true by default)\n       * @param `depth` - set to a number if the object is only to be cloned to\n       *    a particular depth. (optional - defaults to Infinity)\n       * @param `prototype` - sets the prototype to be used when cloning an object.\n       *    (optional - defaults to parent prototype).\n       * @param `includeNonEnumerable` - set to true if the non-enumerable properties\n       *    should be cloned as well. Non-enumerable properties on the prototype\n       *    chain will be ignored. (optional - false by default)\n      */\n\n\n      function clone(parent, circular, depth, prototype, includeNonEnumerable) {\n        if (typeof circular === 'object') {\n          depth = circular.depth;\n          prototype = circular.prototype;\n          includeNonEnumerable = circular.includeNonEnumerable;\n          circular = circular.circular;\n        } // maintain two arrays for circular references, where corresponding parents\n        // and children have the same index\n\n\n        var allParents = [];\n        var allChildren = [];\n        var useBuffer = typeof Buffer != 'undefined';\n        if (typeof circular == 'undefined') circular = true;\n        if (typeof depth == 'undefined') depth = Infinity; // recurse this function so we don't reset allParents and allChildren\n\n        function _clone(parent, depth) {\n          // cloning null always returns null\n          if (parent === null) return null;\n          if (depth === 0) return parent;\n          var child;\n          var proto;\n\n          if (typeof parent != 'object') {\n            return parent;\n          }\n\n          if (_instanceof(parent, nativeMap)) {\n            child = new nativeMap();\n          } else if (_instanceof(parent, nativeSet)) {\n            child = new nativeSet();\n          } else if (_instanceof(parent, nativePromise)) {\n            child = new nativePromise(function (resolve, reject) {\n              parent.then(function (value) {\n                resolve(_clone(value, depth - 1));\n              }, function (err) {\n                reject(_clone(err, depth - 1));\n              });\n            });\n          } else if (clone.__isArray(parent)) {\n            child = [];\n          } else if (clone.__isRegExp(parent)) {\n            child = new RegExp(parent.source, __getRegExpFlags(parent));\n            if (parent.lastIndex) child.lastIndex = parent.lastIndex;\n          } else if (clone.__isDate(parent)) {\n            child = new Date(parent.getTime());\n          } else if (useBuffer && Buffer.isBuffer(parent)) {\n            if (Buffer.allocUnsafe) {\n              // Node.js >= 4.5.0\n              child = Buffer.allocUnsafe(parent.length);\n            } else {\n              // Older Node.js versions\n              child = new Buffer(parent.length);\n            }\n\n            parent.copy(child);\n            return child;\n          } else if (_instanceof(parent, Error)) {\n            child = Object.create(parent);\n          } else {\n            if (typeof prototype == 'undefined') {\n              proto = Object.getPrototypeOf(parent);\n              child = Object.create(proto);\n            } else {\n              child = Object.create(prototype);\n              proto = prototype;\n            }\n          }\n\n          if (circular) {\n            var index = allParents.indexOf(parent);\n\n            if (index != -1) {\n              return allChildren[index];\n            }\n\n            allParents.push(parent);\n            allChildren.push(child);\n          }\n\n          if (_instanceof(parent, nativeMap)) {\n            parent.forEach(function (value, key) {\n              var keyChild = _clone(key, depth - 1);\n\n              var valueChild = _clone(value, depth - 1);\n\n              child.set(keyChild, valueChild);\n            });\n          }\n\n          if (_instanceof(parent, nativeSet)) {\n            parent.forEach(function (value) {\n              var entryChild = _clone(value, depth - 1);\n\n              child.add(entryChild);\n            });\n          }\n\n          for (var i in parent) {\n            var attrs;\n\n            if (proto) {\n              attrs = Object.getOwnPropertyDescriptor(proto, i);\n            }\n\n            if (attrs && attrs.set == null) {\n              continue;\n            }\n\n            child[i] = _clone(parent[i], depth - 1);\n          }\n\n          if (Object.getOwnPropertySymbols) {\n            var symbols = Object.getOwnPropertySymbols(parent);\n\n            for (var i = 0; i < symbols.length; i++) {\n              // Don't need to worry about cloning a symbol because it is a primitive,\n              // like a number or string.\n              var symbol = symbols[i];\n              var descriptor = Object.getOwnPropertyDescriptor(parent, symbol);\n\n              if (descriptor && !descriptor.enumerable && !includeNonEnumerable) {\n                continue;\n              }\n\n              child[symbol] = _clone(parent[symbol], depth - 1);\n\n              if (!descriptor.enumerable) {\n                Object.defineProperty(child, symbol, {\n                  enumerable: false\n                });\n              }\n            }\n          }\n\n          if (includeNonEnumerable) {\n            var allPropertyNames = Object.getOwnPropertyNames(parent);\n\n            for (var i = 0; i < allPropertyNames.length; i++) {\n              var propertyName = allPropertyNames[i];\n              var descriptor = Object.getOwnPropertyDescriptor(parent, propertyName);\n\n              if (descriptor && descriptor.enumerable) {\n                continue;\n              }\n\n              child[propertyName] = _clone(parent[propertyName], depth - 1);\n              Object.defineProperty(child, propertyName, {\n                enumerable: false\n              });\n            }\n          }\n\n          return child;\n        }\n\n        return _clone(parent, depth);\n      }\n      /**\n       * Simple flat clone using prototype, accepts only objects, usefull for property\n       * override on FLAT configuration object (no nested props).\n       *\n       * USE WITH CAUTION! This may not behave as you wish if you do not know how this\n       * works.\n       */\n\n\n      clone.clonePrototype = function clonePrototype(parent) {\n        if (parent === null) return null;\n\n        var c = function () {};\n\n        c.prototype = parent;\n        return new c();\n      }; // private utility functions\n\n\n      function __objToStr(o) {\n        return Object.prototype.toString.call(o);\n      }\n\n      clone.__objToStr = __objToStr;\n\n      function __isDate(o) {\n        return typeof o === 'object' && __objToStr(o) === '[object Date]';\n      }\n\n      clone.__isDate = __isDate;\n\n      function __isArray(o) {\n        return typeof o === 'object' && __objToStr(o) === '[object Array]';\n      }\n\n      clone.__isArray = __isArray;\n\n      function __isRegExp(o) {\n        return typeof o === 'object' && __objToStr(o) === '[object RegExp]';\n      }\n\n      clone.__isRegExp = __isRegExp;\n\n      function __getRegExpFlags(re) {\n        var flags = '';\n        if (re.global) flags += 'g';\n        if (re.ignoreCase) flags += 'i';\n        if (re.multiline) flags += 'm';\n        return flags;\n      }\n\n      clone.__getRegExpFlags = __getRegExpFlags;\n      return clone;\n    }();\n\n    if ( module.exports) {\n      module.exports = clone;\n    }\n  });\n\n  var fastDeepEqual = function equal(a, b) {\n    if (a === b) return true;\n\n    if (a && b && typeof a == 'object' && typeof b == 'object') {\n      if (a.constructor !== b.constructor) return false;\n      var length, i, keys;\n\n      if (Array.isArray(a)) {\n        length = a.length;\n        if (length != b.length) return false;\n\n        for (i = length; i-- !== 0;) if (!equal(a[i], b[i])) return false;\n\n        return true;\n      }\n\n      if (a.constructor === RegExp) return a.source === b.source && a.flags === b.flags;\n      if (a.valueOf !== Object.prototype.valueOf) return a.valueOf() === b.valueOf();\n      if (a.toString !== Object.prototype.toString) return a.toString() === b.toString();\n      keys = Object.keys(a);\n      length = keys.length;\n      if (length !== Object.keys(b).length) return false;\n\n      for (i = length; i-- !== 0;) if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;\n\n      for (i = length; i-- !== 0;) {\n        var key = keys[i];\n        if (!equal(a[key], b[key])) return false;\n      }\n\n      return true;\n    } // true if both NaN, false otherwise\n\n\n    return a !== a && b !== b;\n  };\n\n  var fastJsonStableStringify = function (data, opts) {\n    if (!opts) opts = {};\n    if (typeof opts === 'function') opts = {\n      cmp: opts\n    };\n    var cycles = typeof opts.cycles === 'boolean' ? opts.cycles : false;\n\n    var cmp = opts.cmp && function (f) {\n      return function (node) {\n        return function (a, b) {\n          var aobj = {\n            key: a,\n            value: node[a]\n          };\n          var bobj = {\n            key: b,\n            value: node[b]\n          };\n          return f(aobj, bobj);\n        };\n      };\n    }(opts.cmp);\n\n    var seen = [];\n    return function stringify(node) {\n      if (node && node.toJSON && typeof node.toJSON === 'function') {\n        node = node.toJSON();\n      }\n\n      if (node === undefined) return;\n      if (typeof node == 'number') return isFinite(node) ? '' + node : 'null';\n      if (typeof node !== 'object') return JSON.stringify(node);\n      var i, out;\n\n      if (Array.isArray(node)) {\n        out = '[';\n\n        for (i = 0; i < node.length; i++) {\n          if (i) out += ',';\n          out += stringify(node[i]) || 'null';\n        }\n\n        return out + ']';\n      }\n\n      if (node === null) return 'null';\n\n      if (seen.indexOf(node) !== -1) {\n        if (cycles) return JSON.stringify('__cycle__');\n        throw new TypeError('Converting circular structure to JSON');\n      }\n\n      var seenIndex = seen.push(node) - 1;\n      var keys = Object.keys(node).sort(cmp && cmp(node));\n      out = '';\n\n      for (i = 0; i < keys.length; i++) {\n        var key = keys[i];\n        var value = stringify(node[key]);\n        if (!value) continue;\n        if (out) out += ',';\n        out += JSON.stringify(key) + ':' + value;\n      }\n\n      seen.splice(seenIndex, 1);\n      return '{' + out + '}';\n    }(data);\n  };\n\n  function isLogicalOr(op) {\n    return !!op.or;\n  }\n  function isLogicalAnd(op) {\n    return !!op.and;\n  }\n  function isLogicalNot(op) {\n    return !!op.not;\n  }\n  function forEachLeaf(op, fn) {\n    if (isLogicalNot(op)) {\n      forEachLeaf(op.not, fn);\n    } else if (isLogicalAnd(op)) {\n      for (const subop of op.and) {\n        forEachLeaf(subop, fn);\n      }\n    } else if (isLogicalOr(op)) {\n      for (const subop of op.or) {\n        forEachLeaf(subop, fn);\n      }\n    } else {\n      fn(op);\n    }\n  }\n  function normalizeLogicalComposition(op, normalizer) {\n    if (isLogicalNot(op)) {\n      return {\n        not: normalizeLogicalComposition(op.not, normalizer)\n      };\n    } else if (isLogicalAnd(op)) {\n      return {\n        and: op.and.map(o => normalizeLogicalComposition(o, normalizer))\n      };\n    } else if (isLogicalOr(op)) {\n      return {\n        or: op.or.map(o => normalizeLogicalComposition(o, normalizer))\n      };\n    } else {\n      return normalizer(op);\n    }\n  }\n\n  const deepEqual = fastDeepEqual;\n  const duplicate = clone_1;\n  /**\n   * Creates an object composed of the picked object properties.\n   *\n   * var object = {'a': 1, 'b': '2', 'c': 3};\n   * pick(object, ['a', 'c']);\n   * // → {'a': 1, 'c': 3}\n   */\n  // eslint-disable-next-line @typescript-eslint/ban-types\n\n  function pick(obj, props) {\n    const copy = {};\n\n    for (const prop of props) {\n      if (has(obj, prop)) {\n        copy[prop] = obj[prop];\n      }\n    }\n\n    return copy;\n  }\n  /**\n   * The opposite of _.pick; this method creates an object composed of the own\n   * and inherited enumerable string keyed properties of object that are not omitted.\n   */\n  // eslint-disable-next-line @typescript-eslint/ban-types\n\n  function omit(obj, props) {\n    const copy = { ...obj\n    };\n\n    for (const prop of props) {\n      delete copy[prop];\n    }\n\n    return copy;\n  }\n  /**\n   * Monkey patch Set so that `stringify` produces a string representation of sets.\n   */\n\n  Set.prototype['toJSON'] = function () {\n    return \"Set(\".concat([...this].map(x => fastJsonStableStringify(x)).join(','), \")\");\n  };\n  /**\n   * Converts any object to a string representation that can be consumed by humans.\n   */\n\n\n  const stringify = fastJsonStableStringify;\n  /**\n   * Converts any object to a string of limited size, or a number.\n   */\n\n  function hash(a) {\n    if (isNumber(a)) {\n      return a;\n    }\n\n    const str = isString(a) ? a : fastJsonStableStringify(a); // short strings can be used as hash directly, longer strings are hashed to reduce memory usage\n\n    if (str.length < 250) {\n      return str;\n    } // from http://werxltd.com/wp/2010/05/13/javascript-implementation-of-javas-string-hashcode-method/\n\n\n    let h = 0;\n\n    for (let i = 0; i < str.length; i++) {\n      const char = str.charCodeAt(i);\n      h = (h << 5) - h + char;\n      h = h & h; // Convert to 32bit integer\n    }\n\n    return h;\n  }\n  function isNullOrFalse(x) {\n    return x === false || x === null;\n  }\n  function contains(array, item) {\n    return array.indexOf(item) > -1;\n  }\n  /**\n   * Returns true if any item returns true.\n   */\n\n  function some(arr, f) {\n    let i = 0;\n\n    for (const [k, a] of arr.entries()) {\n      if (f(a, k, i++)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n  /**\n   * Returns true if all items return true.\n   */\n\n  function every(arr, f) {\n    let i = 0;\n\n    for (const [k, a] of arr.entries()) {\n      if (!f(a, k, i++)) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n  /**\n   * Like TS Partial but applies recursively to all properties.\n   */\n\n  /**\n   * recursively merges src into dest\n   */\n  function mergeDeep(dest, ...src) {\n    for (const s of src) {\n      deepMerge_(dest, s !== null && s !== void 0 ? s : {});\n    }\n\n    return dest;\n  }\n\n  function deepMerge_(dest, src) {\n    for (const property of keys(src)) {\n      writeConfig(dest, property, src[property], true);\n    }\n  }\n\n  function unique(values, f) {\n    const results = [];\n    const u = {};\n    let v;\n\n    for (const val of values) {\n      v = f(val);\n\n      if (v in u) {\n        continue;\n      }\n\n      u[v] = 1;\n      results.push(val);\n    }\n\n    return results;\n  }\n\n  /**\n   * Returns true if the two dictionaries disagree. Applies only to defined values.\n   */\n  function isEqual(dict, other) {\n    const dictKeys = keys(dict);\n    const otherKeys = keys(other);\n\n    if (dictKeys.length !== otherKeys.length) {\n      return false;\n    }\n\n    for (const key of dictKeys) {\n      if (dict[key] !== other[key]) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n  function setEqual(a, b) {\n    if (a.size !== b.size) {\n      return false;\n    }\n\n    for (const e of a) {\n      if (!b.has(e)) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n  function hasIntersection(a, b) {\n    for (const key of a) {\n      if (b.has(key)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n  function prefixGenerator(a) {\n    const prefixes = new Set();\n\n    for (const x of a) {\n      const splitField = splitAccessPath(x); // Wrap every element other than the first in `[]`\n\n      const wrappedWithAccessors = splitField.map((y, i) => i === 0 ? y : \"[\".concat(y, \"]\"));\n      const computedPrefixes = wrappedWithAccessors.map((_, i) => wrappedWithAccessors.slice(0, i + 1).join(''));\n\n      for (const y of computedPrefixes) {\n        prefixes.add(y);\n      }\n    }\n\n    return prefixes;\n  }\n  /**\n   * Returns true if a and b have an intersection. Also return true if a or b are undefined\n   * since this means we don't know what fields a node produces or depends on.\n   */\n\n  function fieldIntersection(a, b) {\n    if (a === undefined || b === undefined) {\n      return true;\n    }\n\n    return hasIntersection(prefixGenerator(a), prefixGenerator(b));\n  } // eslint-disable-next-line @typescript-eslint/ban-types\n\n  function isEmpty(obj) {\n    return keys(obj).length === 0;\n  } // This is a stricter version of Object.keys but with better types. See https://github.com/Microsoft/TypeScript/pull/12253#issuecomment-263132208\n\n  const keys = Object.keys;\n  const vals = Object.values;\n  const entries = Object.entries; // Using mapped type to declare a collect of flags for a string literal type S\n  // https://www.typescriptlang.org/docs/handbook/advanced-types.html#mapped-types\n\n  function isBoolean$1(b) {\n    return b === true || b === false;\n  }\n  /**\n   * Convert a string into a valid variable name\n   */\n\n  function varName(s) {\n    // Replace non-alphanumeric characters (anything besides a-zA-Z0-9_) with _\n    const alphanumericS = s.replace(/\\W/g, '_'); // Add _ if the string has leading numbers.\n\n    return (s.match(/^\\d+/) ? '_' : '') + alphanumericS;\n  }\n  function logicalExpr(op, cb) {\n    if (isLogicalNot(op)) {\n      return '!(' + logicalExpr(op.not, cb) + ')';\n    } else if (isLogicalAnd(op)) {\n      return '(' + op.and.map(and => logicalExpr(and, cb)).join(') && (') + ')';\n    } else if (isLogicalOr(op)) {\n      return '(' + op.or.map(or => logicalExpr(or, cb)).join(') || (') + ')';\n    } else {\n      return cb(op);\n    }\n  }\n  /**\n   * Delete nested property of an object, and delete the ancestors of the property if they become empty.\n   */\n\n  function deleteNestedProperty(obj, orderedProps) {\n    if (orderedProps.length === 0) {\n      return true;\n    }\n\n    const prop = orderedProps.shift(); // eslint-disable-line @typescript-eslint/no-non-null-assertion\n\n    if (prop in obj && deleteNestedProperty(obj[prop], orderedProps)) {\n      delete obj[prop];\n    }\n\n    return isEmpty(obj);\n  }\n  function titleCase(s) {\n    return s.charAt(0).toUpperCase() + s.substr(1);\n  }\n  /**\n   * Converts a path to an access path with datum.\n   * @param path The field name.\n   * @param datum The string to use for `datum`.\n   */\n\n  function accessPathWithDatum(path, datum = 'datum') {\n    const pieces = splitAccessPath(path);\n    const prefixes = [];\n\n    for (let i = 1; i <= pieces.length; i++) {\n      const prefix = \"[\".concat(pieces.slice(0, i).map($).join(']['), \"]\");\n      prefixes.push(\"\".concat(datum).concat(prefix));\n    }\n\n    return prefixes.join(' && ');\n  }\n  /**\n   * Return access with datum to the flattened field.\n   *\n   * @param path The field name.\n   * @param datum The string to use for `datum`.\n   */\n\n  function flatAccessWithDatum(path, datum = 'datum') {\n    return \"\".concat(datum, \"[\").concat($(splitAccessPath(path).join('.')), \"]\");\n  }\n\n  function escapePathAccess(string) {\n    return string.replace(/(\\[|\\]|\\.|'|\")/g, '\\\\$1');\n  }\n  /**\n   * Replaces path accesses with access to non-nested field.\n   * For example, `foo[\"bar\"].baz` becomes `foo\\\\.bar\\\\.baz`.\n   */\n\n\n  function replacePathInField(path) {\n    return \"\".concat(splitAccessPath(path).map(escapePathAccess).join('\\\\.'));\n  }\n  /**\n   * Replace all occurrences of a string with another string.\n   *\n   * @param string the string to replace in\n   * @param find the string to replace\n   * @param replacement the replacement\n   */\n\n  function replaceAll(string, find, replacement) {\n    return string.replace(new RegExp(find.replace(/[-/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&'), 'g'), replacement);\n  }\n  /**\n   * Remove path accesses with access from field.\n   * For example, `foo[\"bar\"].baz` becomes `foo.bar.baz`.\n   */\n\n  function removePathFromField(path) {\n    return \"\".concat(splitAccessPath(path).join('.'));\n  }\n  /**\n   * Count the depth of the path. Returns 1 for fields that are not nested.\n   */\n\n  function accessPathDepth(path) {\n    if (!path) {\n      return 0;\n    }\n\n    return splitAccessPath(path).length;\n  }\n  /**\n   * This is a replacement for chained || for numeric properties or properties that respect null so that 0 will be included.\n   */\n\n  function getFirstDefined(...args) {\n    for (const arg of args) {\n      if (arg !== undefined) {\n        return arg;\n      }\n    }\n\n    return undefined;\n  } // variable used to generate id\n\n  let idCounter = 42;\n  /**\n   * Returns a new random id every time it gets called.\n   *\n   * Has side effect!\n   */\n\n  function uniqueId(prefix) {\n    const id = ++idCounter;\n    return prefix ? String(prefix) + id : id;\n  }\n  /**\n   * Resets the id counter used in uniqueId. This can be useful for testing.\n   */\n\n  function resetIdCounter() {\n    idCounter = 42;\n  }\n  function internalField(name) {\n    return isInternalField(name) ? name : \"__\".concat(name);\n  }\n  function isInternalField(name) {\n    return name.indexOf('__') === 0;\n  }\n  /**\n   * Normalize angle to be within [0,360).\n   */\n\n  function normalizeAngle(angle) {\n    if (angle === undefined) {\n      return undefined;\n    }\n\n    return (angle % 360 + 360) % 360;\n  }\n  /**\n   * Returns whether the passed in value is a valid number.\n   */\n\n  function isNumeric(value) {\n    if (isNumber(value)) {\n      return true;\n    }\n\n    return !isNaN(value) && !isNaN(parseFloat(value));\n  }\n\n  const CONDITIONAL_AXIS_PROP_INDEX = {\n    labelAlign: {\n      part: 'labels',\n      vgProp: 'align'\n    },\n    labelBaseline: {\n      part: 'labels',\n      vgProp: 'baseline'\n    },\n    labelColor: {\n      part: 'labels',\n      vgProp: 'fill'\n    },\n    labelFont: {\n      part: 'labels',\n      vgProp: 'font'\n    },\n    labelFontSize: {\n      part: 'labels',\n      vgProp: 'fontSize'\n    },\n    labelFontStyle: {\n      part: 'labels',\n      vgProp: 'fontStyle'\n    },\n    labelFontWeight: {\n      part: 'labels',\n      vgProp: 'fontWeight'\n    },\n    labelOpacity: {\n      part: 'labels',\n      vgProp: 'opacity'\n    },\n    labelOffset: null,\n    labelPadding: null,\n    // There is no fixed vgProp for tickSize, need to use signal.\n    gridColor: {\n      part: 'grid',\n      vgProp: 'stroke'\n    },\n    gridDash: {\n      part: 'grid',\n      vgProp: 'strokeDash'\n    },\n    gridDashOffset: {\n      part: 'grid',\n      vgProp: 'strokeDashOffset'\n    },\n    gridOpacity: {\n      part: 'grid',\n      vgProp: 'opacity'\n    },\n    gridWidth: {\n      part: 'grid',\n      vgProp: 'strokeWidth'\n    },\n    tickColor: {\n      part: 'ticks',\n      vgProp: 'stroke'\n    },\n    tickDash: {\n      part: 'ticks',\n      vgProp: 'strokeDash'\n    },\n    tickDashOffset: {\n      part: 'ticks',\n      vgProp: 'strokeDashOffset'\n    },\n    tickOpacity: {\n      part: 'ticks',\n      vgProp: 'opacity'\n    },\n    tickSize: null,\n    // There is no fixed vgProp for tickSize, need to use signal.\n    tickWidth: {\n      part: 'ticks',\n      vgProp: 'strokeWidth'\n    }\n  };\n  function isConditionalAxisValue(v) {\n    return v && v['condition'];\n  }\n  const AXIS_PARTS = ['domain', 'grid', 'labels', 'ticks', 'title'];\n  /**\n   * A dictionary listing whether a certain axis property is applicable for only main axes or only grid axes.\n   */\n\n  const AXIS_PROPERTY_TYPE = {\n    grid: 'grid',\n    gridCap: 'grid',\n    gridColor: 'grid',\n    gridDash: 'grid',\n    gridDashOffset: 'grid',\n    gridOpacity: 'grid',\n    gridScale: 'grid',\n    gridWidth: 'grid',\n    orient: 'main',\n    bandPosition: 'both',\n    // Need to be applied to grid axis too, so the grid will align with ticks.\n    aria: 'main',\n    description: 'main',\n    domain: 'main',\n    domainCap: 'main',\n    domainColor: 'main',\n    domainDash: 'main',\n    domainDashOffset: 'main',\n    domainOpacity: 'main',\n    domainWidth: 'main',\n    format: 'main',\n    formatType: 'main',\n    labelAlign: 'main',\n    labelAngle: 'main',\n    labelBaseline: 'main',\n    labelBound: 'main',\n    labelColor: 'main',\n    labelFlush: 'main',\n    labelFlushOffset: 'main',\n    labelFont: 'main',\n    labelFontSize: 'main',\n    labelFontStyle: 'main',\n    labelFontWeight: 'main',\n    labelLimit: 'main',\n    labelLineHeight: 'main',\n    labelOffset: 'main',\n    labelOpacity: 'main',\n    labelOverlap: 'main',\n    labelPadding: 'main',\n    labels: 'main',\n    labelSeparation: 'main',\n    maxExtent: 'main',\n    minExtent: 'main',\n    offset: 'both',\n    position: 'main',\n    tickCap: 'main',\n    tickColor: 'main',\n    tickDash: 'main',\n    tickDashOffset: 'main',\n    tickMinStep: 'main',\n    tickOffset: 'both',\n    // Need to be applied to grid axis too, so the grid will align with ticks.\n    tickOpacity: 'main',\n    tickRound: 'both',\n    // Apply rounding to grid and ticks so they are aligned.\n    ticks: 'main',\n    tickSize: 'main',\n    tickWidth: 'both',\n    title: 'main',\n    titleAlign: 'main',\n    titleAnchor: 'main',\n    titleAngle: 'main',\n    titleBaseline: 'main',\n    titleColor: 'main',\n    titleFont: 'main',\n    titleFontSize: 'main',\n    titleFontStyle: 'main',\n    titleFontWeight: 'main',\n    titleLimit: 'main',\n    titleLineHeight: 'main',\n    titleOpacity: 'main',\n    titlePadding: 'main',\n    titleX: 'main',\n    titleY: 'main',\n    encode: 'both',\n    // we hide this in Vega-Lite\n    scale: 'both',\n    tickBand: 'both',\n    tickCount: 'both',\n    tickExtra: 'both',\n    translate: 'both',\n    values: 'both',\n    zindex: 'both' // this is actually set afterward, so it doesn't matter\n\n  };\n  const COMMON_AXIS_PROPERTIES_INDEX = {\n    orient: 1,\n    // other things can depend on orient\n    aria: 1,\n    bandPosition: 1,\n    description: 1,\n    domain: 1,\n    domainCap: 1,\n    domainColor: 1,\n    domainDash: 1,\n    domainDashOffset: 1,\n    domainOpacity: 1,\n    domainWidth: 1,\n    format: 1,\n    formatType: 1,\n    grid: 1,\n    gridCap: 1,\n    gridColor: 1,\n    gridDash: 1,\n    gridDashOffset: 1,\n    gridOpacity: 1,\n    gridWidth: 1,\n    labelAlign: 1,\n    labelAngle: 1,\n    labelBaseline: 1,\n    labelBound: 1,\n    labelColor: 1,\n    labelFlush: 1,\n    labelFlushOffset: 1,\n    labelFont: 1,\n    labelFontSize: 1,\n    labelFontStyle: 1,\n    labelFontWeight: 1,\n    labelLimit: 1,\n    labelLineHeight: 1,\n    labelOffset: 1,\n    labelOpacity: 1,\n    labelOverlap: 1,\n    labelPadding: 1,\n    labels: 1,\n    labelSeparation: 1,\n    maxExtent: 1,\n    minExtent: 1,\n    offset: 1,\n    position: 1,\n    tickBand: 1,\n    tickCap: 1,\n    tickColor: 1,\n    tickCount: 1,\n    tickDash: 1,\n    tickDashOffset: 1,\n    tickExtra: 1,\n    tickMinStep: 1,\n    tickOffset: 1,\n    tickOpacity: 1,\n    tickRound: 1,\n    ticks: 1,\n    tickSize: 1,\n    tickWidth: 1,\n    title: 1,\n    titleAlign: 1,\n    titleAnchor: 1,\n    titleAngle: 1,\n    titleBaseline: 1,\n    titleColor: 1,\n    titleFont: 1,\n    titleFontSize: 1,\n    titleFontStyle: 1,\n    titleFontWeight: 1,\n    titleLimit: 1,\n    titleLineHeight: 1,\n    titleOpacity: 1,\n    titlePadding: 1,\n    titleX: 1,\n    titleY: 1,\n    translate: 1,\n    values: 1,\n    zindex: 1\n  };\n  const AXIS_PROPERTIES_INDEX = { ...COMMON_AXIS_PROPERTIES_INDEX,\n    style: 1,\n    labelExpr: 1,\n    encoding: 1\n  };\n  function isAxisProperty(prop) {\n    return !!AXIS_PROPERTIES_INDEX[prop];\n  } // Export for dependent projects\n  const AXIS_CONFIGS_INDEX = {\n    axis: 1,\n    axisBand: 1,\n    axisBottom: 1,\n    axisDiscrete: 1,\n    axisLeft: 1,\n    axisPoint: 1,\n    axisQuantitative: 1,\n    axisRight: 1,\n    axisTemporal: 1,\n    axisTop: 1,\n    axisX: 1,\n    axisXBand: 1,\n    axisXDiscrete: 1,\n    axisXPoint: 1,\n    axisXQuantitative: 1,\n    axisXTemporal: 1,\n    axisY: 1,\n    axisYBand: 1,\n    axisYDiscrete: 1,\n    axisYPoint: 1,\n    axisYQuantitative: 1,\n    axisYTemporal: 1\n  };\n  const AXIS_CONFIGS = keys(AXIS_CONFIGS_INDEX);\n\n  const AGGREGATE_OP_INDEX = {\n    argmax: 1,\n    argmin: 1,\n    average: 1,\n    count: 1,\n    distinct: 1,\n    product: 1,\n    max: 1,\n    mean: 1,\n    median: 1,\n    min: 1,\n    missing: 1,\n    q1: 1,\n    q3: 1,\n    ci0: 1,\n    ci1: 1,\n    stderr: 1,\n    stdev: 1,\n    stdevp: 1,\n    sum: 1,\n    valid: 1,\n    values: 1,\n    variance: 1,\n    variancep: 1\n  };\n  const MULTIDOMAIN_SORT_OP_INDEX = {\n    count: 1,\n    min: 1,\n    max: 1\n  };\n  function isArgminDef(a) {\n    return !!a && !!a['argmin'];\n  }\n  function isArgmaxDef(a) {\n    return !!a && !!a['argmax'];\n  }\n  function isAggregateOp(a) {\n    return isString(a) && !!AGGREGATE_OP_INDEX[a];\n  }\n  const COUNTING_OPS = ['count', 'valid', 'missing', 'distinct'];\n  function isCountingAggregateOp(aggregate) {\n    return isString(aggregate) && contains(COUNTING_OPS, aggregate);\n  }\n  function isMinMaxOp(aggregate) {\n    return isString(aggregate) && contains(['min', 'max'], aggregate);\n  }\n  /** Additive-based aggregation operations. These can be applied to stack. */\n\n  const SUM_OPS = ['count', 'sum', 'distinct', 'valid', 'missing'];\n  /**\n   * Aggregation operators that always produce values within the range [domainMin, domainMax].\n   */\n\n  const SHARED_DOMAIN_OPS = ['mean', 'average', 'median', 'q1', 'q3', 'min', 'max'];\n  const SHARED_DOMAIN_OP_INDEX = toSet(SHARED_DOMAIN_OPS);\n\n  /*\n   * Constants and utilities for encoding channels (Visual variables)\n   * such as 'x', 'y', 'color'.\n   */\n  // Facet\n  const ROW = 'row';\n  const COLUMN = 'column';\n  const FACET = 'facet'; // Position\n\n  const X = 'x';\n  const Y = 'y';\n  const X2 = 'x2';\n  const Y2 = 'y2'; // Arc-Position\n\n  const RADIUS = 'radius';\n  const RADIUS2 = 'radius2';\n  const THETA = 'theta';\n  const THETA2 = 'theta2'; // Geo Position\n\n  const LATITUDE = 'latitude';\n  const LONGITUDE = 'longitude';\n  const LATITUDE2 = 'latitude2';\n  const LONGITUDE2 = 'longitude2'; // Mark property with scale\n\n  const COLOR = 'color';\n  const FILL = 'fill';\n  const STROKE = 'stroke';\n  const SHAPE = 'shape';\n  const SIZE = 'size';\n  const ANGLE = 'angle';\n  const OPACITY = 'opacity';\n  const FILLOPACITY = 'fillOpacity';\n  const STROKEOPACITY = 'strokeOpacity';\n  const STROKEWIDTH = 'strokeWidth';\n  const STROKEDASH = 'strokeDash'; // Non-scale channel\n\n  const TEXT = 'text';\n  const ORDER = 'order';\n  const DETAIL = 'detail';\n  const KEY = 'key';\n  const TOOLTIP = 'tooltip';\n  const HREF = 'href';\n  const URL = 'url';\n  const DESCRIPTION = 'description';\n  const POSITION_CHANNEL_INDEX = {\n    x: 1,\n    y: 1,\n    x2: 1,\n    y2: 1\n  };\n  const POLAR_POSITION_CHANNEL_INDEX = {\n    theta: 1,\n    theta2: 1,\n    radius: 1,\n    radius2: 1\n  };\n  function isPolarPositionChannel(c) {\n    return c in POLAR_POSITION_CHANNEL_INDEX;\n  }\n  const GEO_POSIITON_CHANNEL_INDEX = {\n    longitude: 1,\n    longitude2: 1,\n    latitude: 1,\n    latitude2: 1\n  };\n  function getPositionChannelFromLatLong(channel) {\n    switch (channel) {\n      case LATITUDE:\n        return 'y';\n\n      case LATITUDE2:\n        return 'y2';\n\n      case LONGITUDE:\n        return 'x';\n\n      case LONGITUDE2:\n        return 'x2';\n    }\n  }\n  function isGeoPositionChannel(c) {\n    return c in GEO_POSIITON_CHANNEL_INDEX;\n  }\n  const GEOPOSITION_CHANNELS = keys(GEO_POSIITON_CHANNEL_INDEX);\n  const UNIT_CHANNEL_INDEX = { ...POSITION_CHANNEL_INDEX,\n    ...POLAR_POSITION_CHANNEL_INDEX,\n    ...GEO_POSIITON_CHANNEL_INDEX,\n    // color\n    color: 1,\n    fill: 1,\n    stroke: 1,\n    // other non-position with scale\n    opacity: 1,\n    fillOpacity: 1,\n    strokeOpacity: 1,\n    strokeWidth: 1,\n    strokeDash: 1,\n    size: 1,\n    angle: 1,\n    shape: 1,\n    // channels without scales\n    order: 1,\n    text: 1,\n    detail: 1,\n    key: 1,\n    tooltip: 1,\n    href: 1,\n    url: 1,\n    description: 1\n  };\n  function isColorChannel(channel) {\n    return channel === COLOR || channel === FILL || channel === STROKE;\n  }\n  const FACET_CHANNEL_INDEX = {\n    row: 1,\n    column: 1,\n    facet: 1\n  };\n  const FACET_CHANNELS = keys(FACET_CHANNEL_INDEX);\n  const CHANNEL_INDEX = { ...UNIT_CHANNEL_INDEX,\n    ...FACET_CHANNEL_INDEX\n  };\n  const CHANNELS = keys(CHANNEL_INDEX);\n  const {\n    order: _o,\n    detail: _d,\n    tooltip: _tt1,\n    ...SINGLE_DEF_CHANNEL_INDEX\n  } = CHANNEL_INDEX;\n  const {\n    row: _r,\n    column: _c,\n    facet: _f,\n    ...SINGLE_DEF_UNIT_CHANNEL_INDEX\n  } = SINGLE_DEF_CHANNEL_INDEX;\n  function isSingleDefUnitChannel(str) {\n    return !!SINGLE_DEF_UNIT_CHANNEL_INDEX[str];\n  }\n  function isChannel(str) {\n    return !!CHANNEL_INDEX[str];\n  }\n  const SECONDARY_RANGE_CHANNEL = [X2, Y2, LATITUDE2, LONGITUDE2, THETA2, RADIUS2];\n  function isSecondaryRangeChannel(c) {\n    const main = getMainRangeChannel(c);\n    return main !== c;\n  }\n\n  /**\n   * Get the main channel for a range channel. E.g. `x` for `x2`.\n   */\n  function getMainRangeChannel(channel) {\n    switch (channel) {\n      case X2:\n        return X;\n\n      case Y2:\n        return Y;\n\n      case LATITUDE2:\n        return LATITUDE;\n\n      case LONGITUDE2:\n        return LONGITUDE;\n\n      case THETA2:\n        return THETA;\n\n      case RADIUS2:\n        return RADIUS;\n    }\n\n    return channel;\n  }\n  function getVgPositionChannel(channel) {\n    if (isPolarPositionChannel(channel)) {\n      switch (channel) {\n        case THETA:\n          return 'startAngle';\n\n        case THETA2:\n          return 'endAngle';\n\n        case RADIUS:\n          return 'outerRadius';\n\n        case RADIUS2:\n          return 'innerRadius';\n      }\n    }\n\n    return channel;\n  }\n  /**\n   * Get the main channel for a range channel. E.g. `x` for `x2`.\n   */\n\n  function getSecondaryRangeChannel(channel) {\n    switch (channel) {\n      case X:\n        return X2;\n\n      case Y:\n        return Y2;\n\n      case LATITUDE:\n        return LATITUDE2;\n\n      case LONGITUDE:\n        return LONGITUDE2;\n\n      case THETA:\n        return THETA2;\n\n      case RADIUS:\n        return RADIUS2;\n    }\n\n    return undefined;\n  }\n  function getSizeChannel(channel) {\n    switch (channel) {\n      case X:\n      case X2:\n        return 'width';\n\n      case Y:\n      case Y2:\n        return 'height';\n    }\n\n    return undefined;\n  }\n  /**\n   * Get the main channel for a range channel. E.g. `x` for `x2`.\n   */\n\n  function getOffsetChannel(channel) {\n    switch (channel) {\n      case X:\n        return 'xOffset';\n\n      case Y:\n        return 'yOffset';\n\n      case X2:\n        return 'x2Offset';\n\n      case Y2:\n        return 'y2Offset';\n\n      case THETA:\n        return 'thetaOffset';\n\n      case RADIUS:\n        return 'radiusOffset';\n\n      case THETA2:\n        return 'theta2Offset';\n\n      case RADIUS2:\n        return 'radius2Offset';\n    }\n\n    return undefined;\n  } // CHANNELS without COLUMN, ROW\n\n  const {\n    x: _x,\n    y: _y,\n    // x2 and y2 share the same scale as x and y\n    x2: _x2,\n    y2: _y2,\n    latitude: _latitude,\n    longitude: _longitude,\n    latitude2: _latitude2,\n    longitude2: _longitude2,\n    theta: _theta,\n    theta2: _theta2,\n    radius: _radius,\n    radius2: _radius2,\n    // The rest of unit channels then have scale\n    ...NONPOSITION_CHANNEL_INDEX\n  } = UNIT_CHANNEL_INDEX;\n  const NONPOSITION_CHANNELS = keys(NONPOSITION_CHANNEL_INDEX);\n  const POSITION_SCALE_CHANNEL_INDEX = {\n    x: 1,\n    y: 1\n  };\n  const POSITION_SCALE_CHANNELS = keys(POSITION_SCALE_CHANNEL_INDEX);\n  function isXorY(channel) {\n    return channel in POSITION_SCALE_CHANNEL_INDEX;\n  }\n  const POLAR_POSITION_SCALE_CHANNEL_INDEX = {\n    theta: 1,\n    radius: 1\n  };\n  const POLAR_POSITION_SCALE_CHANNELS = keys(POLAR_POSITION_SCALE_CHANNEL_INDEX);\n  function getPositionScaleChannel(sizeType) {\n    return sizeType === 'width' ? X : Y;\n  } // NON_POSITION_SCALE_CHANNEL = SCALE_CHANNELS without X, Y\n\n  const {\n    // x2 and y2 share the same scale as x and y\n    // text and tooltip have format instead of scale,\n    // href has neither format, nor scale\n    text: _t,\n    tooltip: _tt,\n    href: _hr,\n    url: _u,\n    description: _al,\n    // detail and order have no scale\n    detail: _dd,\n    key: _k,\n    order: _oo,\n    ...NONPOSITION_SCALE_CHANNEL_INDEX\n  } = NONPOSITION_CHANNEL_INDEX;\n  const NONPOSITION_SCALE_CHANNELS = keys(NONPOSITION_SCALE_CHANNEL_INDEX);\n  function isNonPositionScaleChannel(channel) {\n    return !!NONPOSITION_CHANNEL_INDEX[channel];\n  }\n  /**\n   * @returns whether Vega supports legends for a particular channel\n   */\n\n  function supportLegend(channel) {\n    switch (channel) {\n      case COLOR:\n      case FILL:\n      case STROKE:\n      case SIZE:\n      case SHAPE:\n      case OPACITY:\n      case STROKEWIDTH:\n      case STROKEDASH:\n        return true;\n\n      case FILLOPACITY:\n      case STROKEOPACITY:\n      case ANGLE:\n        return false;\n    }\n  } // Declare SCALE_CHANNEL_INDEX\n\n  const SCALE_CHANNEL_INDEX = { ...POSITION_SCALE_CHANNEL_INDEX,\n    ...POLAR_POSITION_SCALE_CHANNEL_INDEX,\n    ...NONPOSITION_SCALE_CHANNEL_INDEX\n  };\n  /** List of channels with scales */\n\n  const SCALE_CHANNELS = keys(SCALE_CHANNEL_INDEX);\n  function isScaleChannel(channel) {\n    return !!SCALE_CHANNEL_INDEX[channel];\n  }\n\n  /**\n   * Return whether a channel supports a particular mark type.\n   * @param channel  channel name\n   * @param mark the mark type\n   * @return whether the mark supports the channel\n   */\n  function supportMark(channel, mark) {\n    return getSupportedMark(channel)[mark];\n  }\n  const ALL_MARKS = {\n    // all marks\n    arc: 'always',\n    area: 'always',\n    bar: 'always',\n    circle: 'always',\n    geoshape: 'always',\n    image: 'always',\n    line: 'always',\n    rule: 'always',\n    point: 'always',\n    rect: 'always',\n    square: 'always',\n    trail: 'always',\n    text: 'always',\n    tick: 'always'\n  };\n  const {\n    geoshape: _g,\n    ...ALL_MARKS_EXCEPT_GEOSHAPE\n  } = ALL_MARKS;\n  /**\n   * Return a dictionary showing whether a channel supports mark type.\n   * @param channel\n   * @return A dictionary mapping mark types to 'always', 'binned', or undefined\n   */\n\n  function getSupportedMark(channel) {\n    switch (channel) {\n      case COLOR:\n      case FILL:\n      case STROKE: // falls through\n\n      case DESCRIPTION:\n      case DETAIL:\n      case KEY:\n      case TOOLTIP:\n      case HREF:\n      case ORDER: // TODO: revise (order might not support rect, which is not stackable?)\n\n      case OPACITY:\n      case FILLOPACITY:\n      case STROKEOPACITY:\n      case STROKEWIDTH: // falls through\n\n      case FACET:\n      case ROW: // falls through\n\n      case COLUMN:\n        return ALL_MARKS;\n\n      case X:\n      case Y:\n      case LATITUDE:\n      case LONGITUDE:\n        // all marks except geoshape. geoshape does not use X, Y -- it uses a projection\n        return ALL_MARKS_EXCEPT_GEOSHAPE;\n\n      case X2:\n      case Y2:\n      case LATITUDE2:\n      case LONGITUDE2:\n        return {\n          area: 'always',\n          bar: 'always',\n          image: 'always',\n          rect: 'always',\n          rule: 'always',\n          circle: 'binned',\n          point: 'binned',\n          square: 'binned',\n          tick: 'binned',\n          line: 'binned',\n          trail: 'binned'\n        };\n\n      case SIZE:\n        return {\n          point: 'always',\n          tick: 'always',\n          rule: 'always',\n          circle: 'always',\n          square: 'always',\n          bar: 'always',\n          text: 'always',\n          line: 'always',\n          trail: 'always'\n        };\n\n      case STROKEDASH:\n        return {\n          line: 'always',\n          point: 'always',\n          tick: 'always',\n          rule: 'always',\n          circle: 'always',\n          square: 'always',\n          bar: 'always',\n          geoshape: 'always'\n        };\n\n      case SHAPE:\n        return {\n          point: 'always',\n          geoshape: 'always'\n        };\n\n      case TEXT:\n        return {\n          text: 'always'\n        };\n\n      case ANGLE:\n        return {\n          point: 'always',\n          square: 'always',\n          text: 'always'\n        };\n\n      case URL:\n        return {\n          image: 'always'\n        };\n\n      case THETA:\n        return {\n          text: 'always',\n          arc: 'always'\n        };\n\n      case RADIUS:\n        return {\n          text: 'always',\n          arc: 'always'\n        };\n\n      case THETA2:\n      case RADIUS2:\n        return {\n          arc: 'always'\n        };\n    }\n  }\n\n  function rangeType(channel) {\n    switch (channel) {\n      case X:\n      case Y:\n      case THETA:\n      case RADIUS:\n      case SIZE:\n      case ANGLE:\n      case STROKEWIDTH:\n      case OPACITY:\n      case FILLOPACITY:\n      case STROKEOPACITY: // X2 and Y2 use X and Y scales, so they similarly have continuous range. [falls through]\n\n      case X2:\n      case Y2:\n      case THETA2:\n      case RADIUS2:\n        return undefined;\n\n      case FACET:\n      case ROW:\n      case COLUMN:\n      case SHAPE:\n      case STROKEDASH: // TEXT, TOOLTIP, URL, and HREF have no scale but have discrete output [falls through]\n\n      case TEXT:\n      case TOOLTIP:\n      case HREF:\n      case URL:\n      case DESCRIPTION:\n        return 'discrete';\n      // Color can be either continuous or discrete, depending on scale type.\n\n      case COLOR:\n      case FILL:\n      case STROKE:\n        return 'flexible';\n      // No scale, no range type.\n\n      case LATITUDE:\n      case LONGITUDE:\n      case LATITUDE2:\n      case LONGITUDE2:\n      case DETAIL:\n      case KEY:\n      case ORDER:\n        return undefined;\n    }\n  }\n\n  /**\n   * Create a key for the bin configuration. Not for prebinned bin.\n   */\n  function binToString(bin) {\n    if (isBoolean(bin)) {\n      bin = normalizeBin(bin, undefined);\n    }\n\n    return 'bin' + keys(bin).map(p => isSelectionExtent(bin[p]) ? varName(\"_\".concat(p, \"_\").concat(entries(bin[p]))) : varName(\"_\".concat(p, \"_\").concat(bin[p]))).join('');\n  }\n  /**\n   * Vega-Lite should bin the data.\n   */\n\n  function isBinning(bin) {\n    return bin === true || isBinParams(bin) && !bin.binned;\n  }\n  /**\n   * The data is already binned and so Vega-Lite should not bin it again.\n   */\n\n  function isBinned(bin) {\n    return bin === 'binned' || isBinParams(bin) && bin.binned === true;\n  }\n  function isBinParams(bin) {\n    return isObject(bin);\n  }\n  function isSelectionExtent(extent) {\n    return extent === null || extent === void 0 ? void 0 : extent['selection'];\n  }\n  function autoMaxBins(channel) {\n    switch (channel) {\n      case ROW:\n      case COLUMN:\n      case SIZE:\n      case COLOR:\n      case FILL:\n      case STROKE:\n      case STROKEWIDTH:\n      case OPACITY:\n      case FILLOPACITY:\n      case STROKEOPACITY: // Facets and Size shouldn't have too many bins\n      // We choose 6 like shape to simplify the rule [falls through]\n\n      case SHAPE:\n        return 6;\n      // Vega's \"shape\" has 6 distinct values\n\n      case STROKEDASH:\n        return 4;\n      // We only provide 5 different stroke dash values (but 4 is more effective)\n\n      default:\n        return 10;\n    }\n  }\n\n  function _defineProperty(obj, key, value) {\n    if (key in obj) {\n      Object.defineProperty(obj, key, {\n        value: value,\n        enumerable: true,\n        configurable: true,\n        writable: true\n      });\n    } else {\n      obj[key] = value;\n    }\n\n    return obj;\n  }\n\n  function _classPrivateFieldGet(receiver, privateMap) {\n    var descriptor = privateMap.get(receiver);\n\n    if (!descriptor) {\n      throw new TypeError(\"attempted to get private field on non-instance\");\n    }\n\n    if (descriptor.get) {\n      return descriptor.get.call(receiver);\n    }\n\n    return descriptor.value;\n  }\n\n  function _classPrivateFieldSet(receiver, privateMap, value) {\n    var descriptor = privateMap.get(receiver);\n\n    if (!descriptor) {\n      throw new TypeError(\"attempted to set private field on non-instance\");\n    }\n\n    if (descriptor.set) {\n      descriptor.set.call(receiver, value);\n    } else {\n      if (!descriptor.writable) {\n        throw new TypeError(\"attempted to set read only private field\");\n      }\n\n      descriptor.value = value;\n    }\n\n    return value;\n  }\n\n  /**\n   * Collection of all Vega-Lite Error Messages\n   */\n  function invalidSpec(spec) {\n    return \"Invalid specification \".concat(JSON.stringify(spec), \". Make sure the specification includes at least one of the following properties: \\\"mark\\\", \\\"layer\\\", \\\"facet\\\", \\\"hconcat\\\", \\\"vconcat\\\", \\\"concat\\\", or \\\"repeat\\\".\");\n  } // FIT\n\n  const FIT_NON_SINGLE = 'Autosize \"fit\" only works for single views and layered views.';\n  function containerSizeNonSingle(name) {\n    const uName = name == 'width' ? 'Width' : 'Height';\n    return \"\".concat(uName, \" \\\"container\\\" only works for single views and layered views.\");\n  }\n  function containerSizeNotCompatibleWithAutosize(name) {\n    const uName = name == 'width' ? 'Width' : 'Height';\n    const fitDirection = name == 'width' ? 'x' : 'y';\n    return \"\".concat(uName, \" \\\"container\\\" only works well with autosize \\\"fit\\\" or \\\"fit-\").concat(fitDirection, \"\\\".\");\n  }\n  function droppingFit(channel) {\n    return channel ? \"Dropping \\\"fit-\".concat(channel, \"\\\" because spec has discrete \").concat(getSizeChannel(channel), \".\") : \"Dropping \\\"fit\\\" because spec has discrete size.\";\n  } // VIEW SIZE\n\n  function unknownField(channel) {\n    return \"Unknown field for \".concat(channel, \". Cannot calculate view size.\");\n  } // SELECTION\n\n  function cannotProjectOnChannelWithoutField(channel) {\n    return \"Cannot project a selection on encoding channel \\\"\".concat(channel, \"\\\", which has no field.\");\n  }\n  function cannotProjectAggregate(channel, aggregate) {\n    return \"Cannot project a selection on encoding channel \\\"\".concat(channel, \"\\\" as it uses an aggregate function (\\\"\").concat(aggregate, \"\\\").\");\n  }\n  function nearestNotSupportForContinuous(mark) {\n    return \"The \\\"nearest\\\" transform is not supported for \".concat(mark, \" marks.\");\n  }\n  function selectionNotSupported(mark) {\n    return \"Selection not supported for \".concat(mark, \" yet.\");\n  }\n  function selectionNotFound(name) {\n    return \"Cannot find a selection named \\\"\".concat(name, \"\\\".\");\n  }\n  const SCALE_BINDINGS_CONTINUOUS = 'Scale bindings are currently only supported for scales with unbinned, continuous domains.';\n  const LEGEND_BINDINGS_MUST_HAVE_PROJECTION = 'Legend bindings are only supported for selections over an individual field or encoding channel.';\n  function noSameUnitLookup(name) {\n    return \"Cannot define and lookup the \\\"\".concat(name, \"\\\" selection in the same view. \") + \"Try moving the lookup into a second, layered view?\";\n  }\n  const NEEDS_SAME_SELECTION = 'The same selection must be used to override scale domains in a layered view.';\n  const INTERVAL_INITIALIZED_WITH_X_Y = 'Interval selections should be initialized using \"x\" and/or \"y\" keys.'; // REPEAT\n\n  function noSuchRepeatedValue(field) {\n    return \"Unknown repeated value \\\"\".concat(field, \"\\\".\");\n  }\n  function columnsNotSupportByRowCol(type) {\n    return \"The \\\"columns\\\" property cannot be used when \\\"\".concat(type, \"\\\" has nested row/column.\");\n  } // CONCAT / REPEAT\n\n  const CONCAT_CANNOT_SHARE_AXIS = 'Axes cannot be shared in concatenated or repeated views yet (https://github.com/vega/vega-lite/issues/2415).'; // DATA\n\n  function unrecognizedParse(p) {\n    return \"Unrecognized parse \\\"\".concat(p, \"\\\".\");\n  }\n  function differentParse(field, local, ancestor) {\n    return \"An ancestor parsed field \\\"\".concat(field, \"\\\" as \").concat(ancestor, \" but a child wants to parse the field as \").concat(local, \".\");\n  }\n  const ADD_SAME_CHILD_TWICE = 'Attempt to add the same child twice.'; // TRANSFORMS\n\n  function invalidTransformIgnored(transform) {\n    return \"Ignoring an invalid transform: \".concat(stringify(transform), \".\");\n  }\n  const NO_FIELDS_NEEDS_AS = 'If \"from.fields\" is not specified, \"as\" has to be a string that specifies the key to be used for the data from the secondary source.'; // ENCODING & FACET\n\n  function customFormatTypeNotAllowed(channel) {\n    return \"Config.customFormatTypes is not true, thus custom format type and format for channel \".concat(channel, \" are dropped.\");\n  }\n  function projectionOverridden(opt) {\n    const {\n      parentProjection,\n      projection\n    } = opt;\n    return \"Layer's shared projection \".concat(stringify(parentProjection), \" is overridden by a child projection \").concat(stringify(projection), \".\");\n  }\n  const REPLACE_ANGLE_WITH_THETA = 'Arc marks uses theta channel rather than angle, replacing angle with theta.';\n  function primitiveChannelDef(channel, type, value) {\n    return \"Channel \".concat(channel, \" is a \").concat(type, \". Converted to {value: \").concat(stringify(value), \"}.\");\n  }\n  function invalidFieldType(type) {\n    return \"Invalid field type \\\"\".concat(type, \"\\\".\");\n  }\n  function invalidFieldTypeForCountAggregate(type, aggregate) {\n    return \"Invalid field type \\\"\".concat(type, \"\\\" for aggregate: \\\"\").concat(aggregate, \"\\\", using \\\"quantitative\\\" instead.\");\n  }\n  function invalidAggregate(aggregate) {\n    return \"Invalid aggregation operator \\\"\".concat(aggregate, \"\\\".\");\n  }\n  function droppingColor(type, opt) {\n    const {\n      fill,\n      stroke\n    } = opt;\n    return \"Dropping color \".concat(type, \" as the plot also has \").concat(fill && stroke ? 'fill and stroke' : fill ? 'fill' : 'stroke', \".\");\n  }\n  function emptyFieldDef(fieldDef, channel) {\n    return \"Dropping \".concat(stringify(fieldDef), \" from channel \\\"\").concat(channel, \"\\\" since it does not contain any data field, datum, value, or signal.\");\n  }\n  const LINE_WITH_VARYING_SIZE = 'Line marks cannot encode size with a non-groupby field. You may want to use trail marks instead.';\n  function incompatibleChannel(channel, markOrFacet, when) {\n    return \"\".concat(channel, \" dropped as it is incompatible with \\\"\").concat(markOrFacet, \"\\\"\").concat(when ? \" when \".concat(when) : '', \".\");\n  }\n  function invalidEncodingChannel(channel) {\n    return \"\".concat(channel, \"-encoding is dropped as \").concat(channel, \" is not a valid encoding channel.\");\n  }\n  function facetChannelShouldBeDiscrete(channel) {\n    return \"\".concat(channel, \" encoding should be discrete (ordinal / nominal / binned).\");\n  }\n  function facetChannelDropped(channels) {\n    return \"Facet encoding dropped as \".concat(channels.join(' and '), \" \").concat(channels.length > 1 ? 'are' : 'is', \" also specified.\");\n  }\n  function discreteChannelCannotEncode(channel, type) {\n    return \"Using discrete channel \\\"\".concat(channel, \"\\\" to encode \\\"\").concat(type, \"\\\" field can be misleading as it does not encode \").concat(type === 'ordinal' ? 'order' : 'magnitude', \".\");\n  } // MARK\n\n  function rangeMarkAlignmentCannotBeExpression(align) {\n    return \"The \".concat(align, \" for range marks cannot be an expression\");\n  }\n  function lineWithRange(hasX2, hasY2) {\n    const channels = hasX2 && hasY2 ? 'x2 and y2' : hasX2 ? 'x2' : 'y2';\n    return \"Line mark is for continuous lines and thus cannot be used with \".concat(channels, \". We will use the rule mark (line segments) instead.\");\n  }\n  function orientOverridden(original, actual) {\n    return \"Specified orient \\\"\".concat(original, \"\\\" overridden with \\\"\").concat(actual, \"\\\".\");\n  } // SCALE\n  const RANGE_STEP_DEPRECATED = \"Scale's \\\"rangeStep\\\" is deprecated and will be removed in Vega-Lite 5.0. Please use \\\"width\\\"/\\\"height\\\": {\\\"step\\\": ...} instead. See https://vega.github.io/vega-lite/docs/size.html.\";\n  function cannotUseScalePropertyWithNonColor(prop) {\n    return \"Cannot use the scale property \\\"\".concat(prop, \"\\\" with non-color channel.\");\n  }\n  function unaggregateDomainHasNoEffectForRawField(fieldDef) {\n    return \"Using unaggregated domain with raw field has no effect (\".concat(stringify(fieldDef), \").\");\n  }\n  function unaggregateDomainWithNonSharedDomainOp(aggregate) {\n    return \"Unaggregated domain not applicable for \\\"\".concat(aggregate, \"\\\" since it produces values outside the origin domain of the source data.\");\n  }\n  function unaggregatedDomainWithLogScale(fieldDef) {\n    return \"Unaggregated domain is currently unsupported for log scale (\".concat(stringify(fieldDef), \").\");\n  }\n  function cannotApplySizeToNonOrientedMark(mark) {\n    return \"Cannot apply size to non-oriented mark \\\"\".concat(mark, \"\\\".\");\n  }\n  function scaleTypeNotWorkWithChannel(channel, scaleType, defaultScaleType) {\n    return \"Channel \\\"\".concat(channel, \"\\\" does not work with \\\"\").concat(scaleType, \"\\\" scale. We are using \\\"\").concat(defaultScaleType, \"\\\" scale instead.\");\n  }\n  function scaleTypeNotWorkWithFieldDef(scaleType, defaultScaleType) {\n    return \"FieldDef does not work with \\\"\".concat(scaleType, \"\\\" scale. We are using \\\"\").concat(defaultScaleType, \"\\\" scale instead.\");\n  }\n  function scalePropertyNotWorkWithScaleType(scaleType, propName, channel) {\n    return \"\".concat(channel, \"-scale's \\\"\").concat(propName, \"\\\" is dropped as it does not work with \").concat(scaleType, \" scale.\");\n  }\n  function stepDropped(channel) {\n    return \"The step for \\\"\".concat(channel, \"\\\" is dropped because the \").concat(channel === 'width' ? 'x' : 'y', \" is continuous.\");\n  }\n  function mergeConflictingProperty(property, propertyOf, v1, v2) {\n    return \"Conflicting \".concat(propertyOf.toString(), \" property \\\"\").concat(property.toString(), \"\\\" (\").concat(stringify(v1), \" and \").concat(stringify(v2), \"). Using \").concat(stringify(v1), \".\");\n  }\n  function mergeConflictingDomainProperty(property, propertyOf, v1, v2) {\n    return \"Conflicting \".concat(propertyOf.toString(), \" property \\\"\").concat(property.toString(), \"\\\" (\").concat(stringify(v1), \" and \").concat(stringify(v2), \"). Using the union of the two domains.\");\n  }\n  function independentScaleMeansIndependentGuide(channel) {\n    return \"Setting the scale to be independent for \\\"\".concat(channel, \"\\\" means we also have to set the guide (axis or legend) to be independent.\");\n  }\n  function domainSortDropped(sort) {\n    return \"Dropping sort property \".concat(stringify(sort), \" as unioned domains only support boolean or op \\\"count\\\", \\\"min\\\", and \\\"max\\\".\");\n  }\n  const MORE_THAN_ONE_SORT = 'Domains that should be unioned has conflicting sort properties. Sort will be set to true.';\n  const FACETED_INDEPENDENT_DIFFERENT_SOURCES = 'Detected faceted independent scales that union domain of multiple fields from different data sources. We will use the first field. The result view size may be incorrect.';\n  const FACETED_INDEPENDENT_SAME_FIELDS_DIFFERENT_SOURCES = 'Detected faceted independent scales that union domain of the same fields from different source. We will assume that this is the same field from a different fork of the same data source. However, if this is not the case, the result view size may be incorrect.';\n  const FACETED_INDEPENDENT_SAME_SOURCE = 'Detected faceted independent scales that union domain of multiple fields from the same data source. We will use the first field. The result view size may be incorrect.'; // AXIS\n\n  function cannotStackRangedMark(channel) {\n    return \"Cannot stack \\\"\".concat(channel, \"\\\" if there is already \\\"\").concat(channel, \"2\\\".\");\n  }\n  function cannotStackNonLinearScale(scaleType) {\n    return \"Cannot stack non-linear scale (\".concat(scaleType, \").\");\n  }\n  function stackNonSummativeAggregate(aggregate) {\n    return \"Stacking is applied even though the aggregate function is non-summative (\\\"\".concat(aggregate, \"\\\").\");\n  } // TIMEUNIT\n\n  function invalidTimeUnit(unitName, value) {\n    return \"Invalid \".concat(unitName, \": \").concat(stringify(value), \".\");\n  }\n  function droppedDay(d) {\n    return \"Dropping day from datetime \".concat(stringify(d), \" as day cannot be combined with other units.\");\n  }\n  function errorBarCenterAndExtentAreNotNeeded(center, extent) {\n    return \"\".concat(extent ? 'extent ' : '').concat(extent && center ? 'and ' : '').concat(center ? 'center ' : '').concat(extent && center ? 'are ' : 'is ', \"not needed when data are aggregated.\");\n  }\n  function errorBarCenterIsUsedWithWrongExtent(center, extent, mark) {\n    return \"\".concat(center, \" is not usually used with \").concat(extent, \" for \").concat(mark, \".\");\n  }\n  function errorBarContinuousAxisHasCustomizedAggregate(aggregate, compositeMark) {\n    return \"Continuous axis should not have customized aggregation function \".concat(aggregate, \"; \").concat(compositeMark, \" already agregates the axis.\");\n  }\n  function errorBand1DNotSupport(property) {\n    return \"1D error band does not support \".concat(property, \".\");\n  } // CHANNEL\n\n  function channelRequiredForBinned(channel) {\n    return \"Channel \".concat(channel, \" is required for \\\"binned\\\" bin.\");\n  }\n  function channelShouldNotBeUsedForBinned(channel) {\n    return \"Channel \".concat(channel, \" should not be used with \\\"binned\\\" bin.\");\n  }\n  function domainRequiredForThresholdScale(channel) {\n    return \"Domain for \".concat(channel, \" is required for threshold scale.\");\n  }\n\n  /**\n   * Main (default) Vega Logger instance for Vega-Lite.\n   */\n\n  const main = logger(Warn);\n  let current = main;\n  /**\n   * Set the singleton logger to be a custom logger.\n   */\n\n  function set(newLogger) {\n    current = newLogger;\n    return current;\n  }\n  /**\n   * Reset the main logger to use the default Vega Logger.\n   */\n\n  function reset() {\n    current = main;\n    return current;\n  }\n  function warn(...args) {\n    current.warn(...args);\n  }\n  function debug(...args) {\n    current.debug(...args);\n  }\n\n  // DateTime definition object\n  /**\n   * @minimum 1\n   * @maximum 12\n   * @TJS-type integer\n   */\n\n  function isDateTime(o) {\n    if (o && isObject(o)) {\n      for (const part of TIMEUNIT_PARTS) {\n        if (part in o) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n  const MONTHS = ['january', 'february', 'march', 'april', 'may', 'june', 'july', 'august', 'september', 'october', 'november', 'december'];\n  const SHORT_MONTHS = MONTHS.map(m => m.substr(0, 3));\n  const DAYS = ['sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday'];\n  const SHORT_DAYS = DAYS.map(d => d.substr(0, 3));\n\n  function normalizeQuarter(q) {\n    if (isNumeric(q)) {\n      q = +q;\n    }\n\n    if (isNumber(q)) {\n      if (q > 4) {\n        warn(invalidTimeUnit('quarter', q));\n      } // We accept 1-based quarter, so need to readjust to 0-based quarter\n\n\n      return q - 1;\n    } else {\n      // Invalid quarter\n      throw new Error(invalidTimeUnit('quarter', q));\n    }\n  }\n\n  function normalizeMonth(m) {\n    if (isNumeric(m)) {\n      m = +m;\n    }\n\n    if (isNumber(m)) {\n      // We accept 1-based month, so need to readjust to 0-based month\n      return m - 1;\n    } else {\n      const lowerM = m.toLowerCase();\n      const monthIndex = MONTHS.indexOf(lowerM);\n\n      if (monthIndex !== -1) {\n        return monthIndex; // 0 for january, ...\n      }\n\n      const shortM = lowerM.substr(0, 3);\n      const shortMonthIndex = SHORT_MONTHS.indexOf(shortM);\n\n      if (shortMonthIndex !== -1) {\n        return shortMonthIndex;\n      } // Invalid month\n\n\n      throw new Error(invalidTimeUnit('month', m));\n    }\n  }\n\n  function normalizeDay(d) {\n    if (isNumeric(d)) {\n      d = +d;\n    }\n\n    if (isNumber(d)) {\n      // mod so that this can be both 0-based where 0 = sunday\n      // and 1-based where 7=sunday\n      return d % 7;\n    } else {\n      const lowerD = d.toLowerCase();\n      const dayIndex = DAYS.indexOf(lowerD);\n\n      if (dayIndex !== -1) {\n        return dayIndex; // 0 for january, ...\n      }\n\n      const shortD = lowerD.substr(0, 3);\n      const shortDayIndex = SHORT_DAYS.indexOf(shortD);\n\n      if (shortDayIndex !== -1) {\n        return shortDayIndex;\n      } // Invalid day\n\n\n      throw new Error(invalidTimeUnit('day', d));\n    }\n  }\n  /**\n   * @param d the date.\n   * @param normalize whether to normalize quarter, month, day. This should probably be true if d is a DateTime.\n   * @returns array of date time parts [year, month, day, hours, minutes, seconds, milliseconds]\n   */\n\n\n  function dateTimeParts(d, normalize) {\n    const parts = [];\n\n    if (normalize && d.day !== undefined) {\n      if (keys(d).length > 1) {\n        warn(droppedDay(d));\n        d = duplicate(d);\n        delete d.day;\n      }\n    }\n\n    if (d.year !== undefined) {\n      parts.push(d.year);\n    } else {\n      // Just like Vega's timeunit transform, set default year to 2012, so domain conversion will be compatible with Vega\n      // Note: 2012 is a leap year (and so the date February 29 is respected) that begins on a Sunday (and so days of the week will order properly at the beginning of the year).\n      parts.push(2012);\n    }\n\n    if (d.month !== undefined) {\n      const month = normalize ? normalizeMonth(d.month) : d.month;\n      parts.push(month);\n    } else if (d.quarter !== undefined) {\n      const quarter = normalize ? normalizeQuarter(d.quarter) : d.quarter;\n      parts.push(isNumber(quarter) ? quarter * 3 : quarter + '*3');\n    } else {\n      parts.push(0); // months start at zero in JS\n    }\n\n    if (d.date !== undefined) {\n      parts.push(d.date);\n    } else if (d.day !== undefined) {\n      // HACK: Day only works as a standalone unit\n      // This is only correct because we always set year to 2006 for day\n      const day = normalize ? normalizeDay(d.day) : d.day;\n      parts.push(isNumber(day) ? day + 1 : day + '+1');\n    } else {\n      parts.push(1); // Date starts at 1 in JS\n    } // Note: can't use TimeUnit enum here as importing it will create\n    // circular dependency problem!\n\n\n    for (const timeUnit of ['hours', 'minutes', 'seconds', 'milliseconds']) {\n      const unit = d[timeUnit];\n      parts.push(typeof unit === 'undefined' ? 0 : unit);\n    }\n\n    return parts;\n  }\n  /**\n   * Return Vega expression for a date time.\n   *\n   * @param d the date time.\n   * @returns the Vega expression.\n   */\n\n\n  function dateTimeToExpr(d) {\n    const parts = dateTimeParts(d, true);\n    const string = parts.join(', ');\n\n    if (d.utc) {\n      return \"utc(\".concat(string, \")\");\n    } else {\n      return \"datetime(\".concat(string, \")\");\n    }\n  }\n  /**\n   * Return Vega expression for a date time expression.\n   *\n   * @param d the internal date time object with expression.\n   * @returns the Vega expression.\n   */\n\n  function dateTimeExprToExpr(d) {\n    const parts = dateTimeParts(d, false);\n    const string = parts.join(', ');\n\n    if (d.utc) {\n      return \"utc(\".concat(string, \")\");\n    } else {\n      return \"datetime(\".concat(string, \")\");\n    }\n  }\n  /**\n   * @param d the date time.\n   * @returns the timestamp.\n   */\n\n  function dateTimeToTimestamp(d) {\n    const parts = dateTimeParts(d, true);\n\n    if (d.utc) {\n      return +new Date(Date.UTC(...parts));\n    } else {\n      return +new Date(...parts);\n    }\n  }\n\n  /** Time Unit that only corresponds to only one part of Date objects. */\n\n  const LOCAL_SINGLE_TIMEUNIT_INDEX = {\n    year: 1,\n    quarter: 1,\n    month: 1,\n    week: 1,\n    day: 1,\n    dayofyear: 1,\n    date: 1,\n    hours: 1,\n    minutes: 1,\n    seconds: 1,\n    milliseconds: 1\n  };\n  const TIMEUNIT_PARTS = keys(LOCAL_SINGLE_TIMEUNIT_INDEX);\n  function isLocalSingleTimeUnit(timeUnit) {\n    return !!LOCAL_SINGLE_TIMEUNIT_INDEX[timeUnit];\n  }\n  function isUTCTimeUnit(t) {\n    return t.startsWith('utc');\n  }\n  function getLocalTimeUnit(t) {\n    return t.substr(3);\n  }\n  // In order of increasing specificity\n  const VEGALITE_TIMEFORMAT = {\n    'year-month': '%b %Y ',\n    'year-month-date': '%b %d, %Y '\n  };\n  function getTimeUnitParts(timeUnit) {\n    const parts = [];\n\n    for (const part of TIMEUNIT_PARTS) {\n      if (containsTimeUnit(timeUnit, part)) {\n        parts.push(part);\n      }\n    }\n\n    return parts;\n  }\n  /** Returns true if fullTimeUnit contains the timeUnit, false otherwise. */\n\n  function containsTimeUnit(fullTimeUnit, timeUnit) {\n    const index = fullTimeUnit.indexOf(timeUnit);\n\n    if (index < 0) {\n      return false;\n    } // exclude milliseconds\n\n\n    if (index > 0 && timeUnit === 'seconds' && fullTimeUnit.charAt(index - 1) === 'i') {\n      return false;\n    } // exclude dayofyear\n\n\n    if (fullTimeUnit.length > index + 3 && timeUnit === 'day' && fullTimeUnit.charAt(index + 3) === 'o') {\n      return false;\n    }\n\n    if (index > 0 && timeUnit === 'year' && fullTimeUnit.charAt(index - 1) === 'f') {\n      return false;\n    }\n\n    return true;\n  }\n  /**\n   * Returns Vega expression for a given timeUnit and fieldRef\n   */\n\n  function fieldExpr(fullTimeUnit, field, {\n    end\n  } = {\n    end: false\n  }) {\n    const fieldRef = accessPathWithDatum(field);\n    const utc = isUTCTimeUnit(fullTimeUnit) ? 'utc' : '';\n\n    function func(timeUnit) {\n      if (timeUnit === 'quarter') {\n        // quarter starting at 0 (0,3,6,9).\n        return \"(\".concat(utc, \"quarter(\").concat(fieldRef, \")-1)\");\n      } else {\n        return \"\".concat(utc).concat(timeUnit, \"(\").concat(fieldRef, \")\");\n      }\n    }\n\n    let lastTimeUnit;\n    const dateExpr = {};\n\n    for (const part of TIMEUNIT_PARTS) {\n      if (containsTimeUnit(fullTimeUnit, part)) {\n        dateExpr[part] = func(part);\n        lastTimeUnit = part;\n      }\n    }\n\n    if (end) {\n      dateExpr[lastTimeUnit] += '+1';\n    }\n\n    return dateTimeExprToExpr(dateExpr);\n  }\n  function timeUnitSpecifierExpression(timeUnit) {\n    if (!timeUnit) {\n      return undefined;\n    }\n\n    const timeUnitParts = getTimeUnitParts(timeUnit);\n    return \"timeUnitSpecifier(\".concat(fastJsonStableStringify(timeUnitParts), \", \").concat(fastJsonStableStringify(VEGALITE_TIMEFORMAT), \")\");\n  }\n  /**\n   * Returns the signal expression used for axis labels for a time unit.\n   */\n\n  function formatExpression(timeUnit, field, isUTCScale) {\n    if (!timeUnit) {\n      return undefined;\n    }\n\n    const expr = timeUnitSpecifierExpression(timeUnit); // We only use utcFormat for utc scale\n    // For utc time units, the data is already converted as a part of timeUnit transform.\n    // Thus, utc time units should use timeFormat to avoid shifting the time twice.\n\n    const utc = isUTCScale || isUTCTimeUnit(timeUnit);\n    return \"\".concat(utc ? 'utc' : 'time', \"Format(\").concat(field, \", \").concat(expr, \")\");\n  }\n  function normalizeTimeUnit(timeUnit) {\n    if (!timeUnit) {\n      return undefined;\n    }\n\n    let params;\n\n    if (isString(timeUnit)) {\n      params = {\n        unit: timeUnit\n      };\n    } else if (isObject(timeUnit)) {\n      params = { ...timeUnit,\n        ...(timeUnit.unit ? {\n          unit: timeUnit.unit\n        } : {})\n      };\n    }\n\n    if (isUTCTimeUnit(params.unit)) {\n      params.utc = true;\n      params.unit = getLocalTimeUnit(params.unit);\n    }\n\n    return params;\n  }\n  function timeUnitToString(tu) {\n    const {\n      utc,\n      ...rest\n    } = normalizeTimeUnit(tu);\n\n    if (rest.unit) {\n      return (utc ? 'utc' : '') + keys(rest).map(p => varName(\"\".concat(p === 'unit' ? '' : \"_\".concat(p, \"_\")).concat(rest[p]))).join('');\n    } else {\n      // when maxbins is specified instead of units\n      return (utc ? 'utc' : '') + 'timeunit' + keys(rest).map(p => varName(\"_\".concat(p, \"_\").concat(rest[p]))).join('');\n    }\n  }\n\n  function isSignalRef(o) {\n    return o && !!o['signal'];\n  } // TODO: add type of value (Make it VgValueRef<V extends ValueOrGradient> {value?:V ...})\n\n  function isVgRangeStep(range) {\n    return !!range['step'];\n  }\n  function isDataRefUnionedDomain(domain) {\n    if (!isArray(domain)) {\n      return 'fields' in domain && !('data' in domain);\n    }\n\n    return false;\n  }\n  function isFieldRefUnionDomain(domain) {\n    if (!isArray(domain)) {\n      return 'fields' in domain && 'data' in domain;\n    }\n\n    return false;\n  }\n  function isDataRefDomain(domain) {\n    if (!isArray(domain)) {\n      return 'field' in domain && 'data' in domain;\n    }\n\n    return false;\n  }\n  const VG_MARK_CONFIG_INDEX = {\n    aria: 1,\n    description: 1,\n    ariaRole: 1,\n    ariaRoleDescription: 1,\n    blend: 1,\n    opacity: 1,\n    fill: 1,\n    fillOpacity: 1,\n    stroke: 1,\n    strokeCap: 1,\n    strokeWidth: 1,\n    strokeOpacity: 1,\n    strokeDash: 1,\n    strokeDashOffset: 1,\n    strokeJoin: 1,\n    strokeOffset: 1,\n    strokeMiterLimit: 1,\n    startAngle: 1,\n    endAngle: 1,\n    padAngle: 1,\n    innerRadius: 1,\n    outerRadius: 1,\n    size: 1,\n    shape: 1,\n    interpolate: 1,\n    tension: 1,\n    orient: 1,\n    align: 1,\n    baseline: 1,\n    text: 1,\n    dir: 1,\n    dx: 1,\n    dy: 1,\n    ellipsis: 1,\n    limit: 1,\n    radius: 1,\n    theta: 1,\n    angle: 1,\n    font: 1,\n    fontSize: 1,\n    fontWeight: 1,\n    fontStyle: 1,\n    lineBreak: 1,\n    lineHeight: 1,\n    cursor: 1,\n    href: 1,\n    tooltip: 1,\n    cornerRadius: 1,\n    cornerRadiusTopLeft: 1,\n    cornerRadiusTopRight: 1,\n    cornerRadiusBottomLeft: 1,\n    cornerRadiusBottomRight: 1,\n    aspect: 1,\n    width: 1,\n    height: 1,\n    url: 1,\n    smooth: 1 // commented below are vg channel that do not have mark config.\n    // x: 1,\n    // y: 1,\n    // x2: 1,\n    // y2: 1,\n    // xc'|'yc'\n    // clip: 1,\n    // path: 1,\n    // url: 1,\n\n  };\n  const VG_MARK_CONFIGS = keys(VG_MARK_CONFIG_INDEX);\n  const VG_MARK_INDEX = {\n    arc: 1,\n    area: 1,\n    group: 1,\n    image: 1,\n    line: 1,\n    path: 1,\n    rect: 1,\n    rule: 1,\n    shape: 1,\n    symbol: 1,\n    text: 1,\n    trail: 1\n  }; // Vega's cornerRadius channels.\n\n  const VG_CORNERRADIUS_CHANNELS = ['cornerRadius', 'cornerRadiusTopLeft', 'cornerRadiusTopRight', 'cornerRadiusBottomLeft', 'cornerRadiusBottomRight'];\n\n  function isSelectionPredicate(predicate) {\n    return predicate === null || predicate === void 0 ? void 0 : predicate['selection'];\n  }\n  function isFieldEqualPredicate(predicate) {\n    return predicate && !!predicate.field && predicate.equal !== undefined;\n  }\n  function isFieldLTPredicate(predicate) {\n    return predicate && !!predicate.field && predicate.lt !== undefined;\n  }\n  function isFieldLTEPredicate(predicate) {\n    return predicate && !!predicate.field && predicate.lte !== undefined;\n  }\n  function isFieldGTPredicate(predicate) {\n    return predicate && !!predicate.field && predicate.gt !== undefined;\n  }\n  function isFieldGTEPredicate(predicate) {\n    return predicate && !!predicate.field && predicate.gte !== undefined;\n  }\n  function isFieldRangePredicate(predicate) {\n    if (predicate && predicate.field) {\n      if (isArray(predicate.range) && predicate.range.length === 2) {\n        return true;\n      } else if (isSignalRef(predicate.range)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n  function isFieldOneOfPredicate(predicate) {\n    return predicate && !!predicate.field && (isArray(predicate.oneOf) || isArray(predicate.in)) // backward compatibility\n    ;\n  }\n  function isFieldValidPredicate(predicate) {\n    return predicate && !!predicate.field && predicate.valid !== undefined;\n  }\n  function isFieldPredicate(predicate) {\n    return isFieldOneOfPredicate(predicate) || isFieldEqualPredicate(predicate) || isFieldRangePredicate(predicate) || isFieldLTPredicate(predicate) || isFieldGTPredicate(predicate) || isFieldLTEPredicate(predicate) || isFieldGTEPredicate(predicate);\n  }\n\n  function predicateValueExpr(v, timeUnit) {\n    return valueExpr(v, {\n      timeUnit,\n      wrapTime: true\n    });\n  }\n\n  function predicateValuesExpr(vals, timeUnit) {\n    return vals.map(v => predicateValueExpr(v, timeUnit));\n  } // This method is used by Voyager. Do not change its behavior without changing Voyager.\n\n\n  function fieldFilterExpression(predicate, useInRange = true) {\n    var _normalizeTimeUnit;\n\n    const {\n      field\n    } = predicate;\n    const timeUnit = (_normalizeTimeUnit = normalizeTimeUnit(predicate.timeUnit)) === null || _normalizeTimeUnit === void 0 ? void 0 : _normalizeTimeUnit.unit;\n    const fieldExpr$1 = timeUnit ? // For timeUnit, cast into integer with time() so we can use ===, inrange, indexOf to compare values directly.\n    // TODO: We calculate timeUnit on the fly here. Consider if we would like to consolidate this with timeUnit pipeline\n    // TODO: support utc\n    'time(' + fieldExpr(timeUnit, field) + ')' : vgField(predicate, {\n      expr: 'datum'\n    });\n\n    if (isFieldEqualPredicate(predicate)) {\n      return fieldExpr$1 + '===' + predicateValueExpr(predicate.equal, timeUnit);\n    } else if (isFieldLTPredicate(predicate)) {\n      const upper = predicate.lt;\n      return \"\".concat(fieldExpr$1, \"<\").concat(predicateValueExpr(upper, timeUnit));\n    } else if (isFieldGTPredicate(predicate)) {\n      const lower = predicate.gt;\n      return \"\".concat(fieldExpr$1, \">\").concat(predicateValueExpr(lower, timeUnit));\n    } else if (isFieldLTEPredicate(predicate)) {\n      const upper = predicate.lte;\n      return \"\".concat(fieldExpr$1, \"<=\").concat(predicateValueExpr(upper, timeUnit));\n    } else if (isFieldGTEPredicate(predicate)) {\n      const lower = predicate.gte;\n      return \"\".concat(fieldExpr$1, \">=\").concat(predicateValueExpr(lower, timeUnit));\n    } else if (isFieldOneOfPredicate(predicate)) {\n      return \"indexof([\".concat(predicateValuesExpr(predicate.oneOf, timeUnit).join(','), \"], \").concat(fieldExpr$1, \") !== -1\");\n    } else if (isFieldValidPredicate(predicate)) {\n      return fieldValidPredicate(fieldExpr$1, predicate.valid);\n    } else if (isFieldRangePredicate(predicate)) {\n      const {\n        range\n      } = predicate;\n      const lower = isSignalRef(range) ? {\n        signal: \"\".concat(range.signal, \"[0]\")\n      } : range[0];\n      const upper = isSignalRef(range) ? {\n        signal: \"\".concat(range.signal, \"[1]\")\n      } : range[1];\n\n      if (lower !== null && upper !== null && useInRange) {\n        return 'inrange(' + fieldExpr$1 + ', [' + predicateValueExpr(lower, timeUnit) + ', ' + predicateValueExpr(upper, timeUnit) + '])';\n      }\n\n      const exprs = [];\n\n      if (lower !== null) {\n        exprs.push(\"\".concat(fieldExpr$1, \" >= \").concat(predicateValueExpr(lower, timeUnit)));\n      }\n\n      if (upper !== null) {\n        exprs.push(\"\".concat(fieldExpr$1, \" <= \").concat(predicateValueExpr(upper, timeUnit)));\n      }\n\n      return exprs.length > 0 ? exprs.join(' && ') : 'true';\n    }\n    /* istanbul ignore next: it should never reach here */\n\n\n    throw new Error(\"Invalid field predicate: \".concat(JSON.stringify(predicate)));\n  }\n  function fieldValidPredicate(fieldExpr, valid = true) {\n    if (valid) {\n      return \"isValid(\".concat(fieldExpr, \") && isFinite(+\").concat(fieldExpr, \")\");\n    } else {\n      return \"!isValid(\".concat(fieldExpr, \") || !isFinite(+\").concat(fieldExpr, \")\");\n    }\n  }\n  function normalizePredicate(f) {\n    if (isFieldPredicate(f) && f.timeUnit) {\n      var _normalizeTimeUnit2;\n\n      return { ...f,\n        timeUnit: (_normalizeTimeUnit2 = normalizeTimeUnit(f.timeUnit)) === null || _normalizeTimeUnit2 === void 0 ? void 0 : _normalizeTimeUnit2.unit\n      };\n    }\n\n    return f;\n  }\n\n  /**\n   * Data type based on level of measurement\n   */\n\n  const Type = {\n    quantitative: 'quantitative',\n    ordinal: 'ordinal',\n    temporal: 'temporal',\n    nominal: 'nominal',\n    geojson: 'geojson'\n  };\n  const QUANTITATIVE = Type.quantitative;\n  const ORDINAL = Type.ordinal;\n  const TEMPORAL = Type.temporal;\n  const NOMINAL = Type.nominal;\n  const GEOJSON = Type.geojson;\n  /**\n   * Get full, lowercase type name for a given type.\n   * @param  type\n   * @return Full type name.\n   */\n\n  function getFullName(type) {\n    if (type) {\n      type = type.toLowerCase();\n\n      switch (type) {\n        case 'q':\n        case QUANTITATIVE:\n          return 'quantitative';\n\n        case 't':\n        case TEMPORAL:\n          return 'temporal';\n\n        case 'o':\n        case ORDINAL:\n          return 'ordinal';\n\n        case 'n':\n        case NOMINAL:\n          return 'nominal';\n\n        case GEOJSON:\n          return 'geojson';\n      }\n    } // If we get invalid input, return undefined type.\n\n\n    return undefined;\n  }\n\n  const ScaleType = {\n    // Continuous - Quantitative\n    LINEAR: 'linear',\n    LOG: 'log',\n    POW: 'pow',\n    SQRT: 'sqrt',\n    SYMLOG: 'symlog',\n    IDENTITY: 'identity',\n    SEQUENTIAL: 'sequential',\n    // Continuous - Time\n    TIME: 'time',\n    UTC: 'utc',\n    // Discretizing scales\n    QUANTILE: 'quantile',\n    QUANTIZE: 'quantize',\n    THRESHOLD: 'threshold',\n    BIN_ORDINAL: 'bin-ordinal',\n    // Discrete scales\n    ORDINAL: 'ordinal',\n    POINT: 'point',\n    BAND: 'band'\n  };\n\n  /**\n   * Index for scale categories -- only scale of the same categories can be merged together.\n   * Current implementation is trying to be conservative and avoid merging scale type that might not work together\n   */\n  const SCALE_CATEGORY_INDEX = {\n    linear: 'numeric',\n    log: 'numeric',\n    pow: 'numeric',\n    sqrt: 'numeric',\n    symlog: 'numeric',\n    identity: 'numeric',\n    sequential: 'numeric',\n    time: 'time',\n    utc: 'time',\n    ordinal: 'ordinal',\n    'bin-ordinal': 'bin-ordinal',\n    // TODO: should bin-ordinal support merging with other\n    point: 'ordinal-position',\n    band: 'ordinal-position',\n    quantile: 'discretizing',\n    quantize: 'discretizing',\n    threshold: 'discretizing'\n  };\n  /**\n   * Whether the two given scale types can be merged together.\n   */\n\n  function scaleCompatible(scaleType1, scaleType2) {\n    const scaleCategory1 = SCALE_CATEGORY_INDEX[scaleType1];\n    const scaleCategory2 = SCALE_CATEGORY_INDEX[scaleType2];\n    return scaleCategory1 === scaleCategory2 || scaleCategory1 === 'ordinal-position' && scaleCategory2 === 'time' || scaleCategory2 === 'ordinal-position' && scaleCategory1 === 'time';\n  }\n  /**\n   * Index for scale precedence -- high score = higher priority for merging.\n   */\n\n  const SCALE_PRECEDENCE_INDEX = {\n    // numeric\n    linear: 0,\n    log: 1,\n    pow: 1,\n    sqrt: 1,\n    symlog: 1,\n    identity: 1,\n    sequential: 1,\n    // time\n    time: 0,\n    utc: 0,\n    // ordinal-position -- these have higher precedence than continuous scales as they support more types of data\n    point: 10,\n    band: 11,\n    // band has higher precedence as it is better for interaction\n    // non grouped types\n    ordinal: 0,\n    'bin-ordinal': 0,\n    quantile: 0,\n    quantize: 0,\n    threshold: 0\n  };\n  /**\n   * Return scale categories -- only scale of the same categories can be merged together.\n   */\n\n  function scaleTypePrecedence(scaleType) {\n    return SCALE_PRECEDENCE_INDEX[scaleType];\n  }\n  const CONTINUOUS_TO_CONTINUOUS_SCALES = ['linear', 'log', 'pow', 'sqrt', 'symlog', 'time', 'utc'];\n  const CONTINUOUS_TO_CONTINUOUS_INDEX = toSet(CONTINUOUS_TO_CONTINUOUS_SCALES);\n  const QUANTITATIVE_SCALES = ['linear', 'log', 'pow', 'sqrt', 'symlog'];\n  const QUANTITATIVE_SCALES_INDEX = toSet(QUANTITATIVE_SCALES);\n  function isQuantitative(type) {\n    return type in QUANTITATIVE_SCALES_INDEX;\n  }\n  const CONTINUOUS_TO_DISCRETE_SCALES = ['quantile', 'quantize', 'threshold'];\n  const CONTINUOUS_TO_DISCRETE_INDEX = toSet(CONTINUOUS_TO_DISCRETE_SCALES);\n  const CONTINUOUS_DOMAIN_SCALES = CONTINUOUS_TO_CONTINUOUS_SCALES.concat(['quantile', 'quantize', 'threshold', 'sequential', 'identity']);\n  const CONTINUOUS_DOMAIN_INDEX = toSet(CONTINUOUS_DOMAIN_SCALES);\n  const DISCRETE_DOMAIN_SCALES = ['ordinal', 'bin-ordinal', 'point', 'band'];\n  const DISCRETE_DOMAIN_INDEX = toSet(DISCRETE_DOMAIN_SCALES);\n  function hasDiscreteDomain(type) {\n    return type in DISCRETE_DOMAIN_INDEX;\n  }\n  function hasContinuousDomain(type) {\n    return type in CONTINUOUS_DOMAIN_INDEX;\n  }\n  function isContinuousToContinuous(type) {\n    return type in CONTINUOUS_TO_CONTINUOUS_INDEX;\n  }\n  function isContinuousToDiscrete(type) {\n    return type in CONTINUOUS_TO_DISCRETE_INDEX;\n  }\n  const defaultScaleConfig = {\n    pointPadding: 0.5,\n    barBandPaddingInner: 0.1,\n    rectBandPaddingInner: 0,\n    minBandSize: 2,\n    minFontSize: 8,\n    maxFontSize: 40,\n    minOpacity: 0.3,\n    maxOpacity: 0.8,\n    // FIXME: revise if these *can* become ratios of width/height step\n    minSize: 9,\n    // Point size is area. For square point, 9 = 3 pixel ^ 2, not too small!\n    minStrokeWidth: 1,\n    maxStrokeWidth: 4,\n    quantileCount: 4,\n    quantizeCount: 4\n  };\n  function isExtendedScheme(scheme) {\n    return !isString(scheme) && !!scheme['name'];\n  }\n  function isSelectionDomain(domain) {\n    return domain === null || domain === void 0 ? void 0 : domain['selection'];\n  }\n  function isDomainUnionWith(domain) {\n    return domain && domain['unionWith'];\n  }\n  const SCALE_PROPERTY_INDEX = {\n    type: 1,\n    domain: 1,\n    domainMax: 1,\n    domainMin: 1,\n    domainMid: 1,\n    align: 1,\n    range: 1,\n    rangeMax: 1,\n    rangeMin: 1,\n    scheme: 1,\n    bins: 1,\n    // Other properties\n    reverse: 1,\n    round: 1,\n    // quantitative / time\n    clamp: 1,\n    nice: 1,\n    // quantitative\n    base: 1,\n    exponent: 1,\n    constant: 1,\n    interpolate: 1,\n    zero: 1,\n    // zero depends on domain\n    // band/point\n    padding: 1,\n    paddingInner: 1,\n    paddingOuter: 1\n  };\n  const {\n    type,\n    domain,\n    range,\n    rangeMax,\n    rangeMin,\n    scheme,\n    ...NON_TYPE_DOMAIN_RANGE_VEGA_SCALE_PROPERTY_INDEX\n  } = SCALE_PROPERTY_INDEX;\n  const NON_TYPE_DOMAIN_RANGE_VEGA_SCALE_PROPERTIES = keys(NON_TYPE_DOMAIN_RANGE_VEGA_SCALE_PROPERTY_INDEX);\n  function scaleTypeSupportProperty(scaleType, propName) {\n    switch (propName) {\n      case 'type':\n      case 'domain':\n      case 'reverse':\n      case 'range':\n        return true;\n\n      case 'scheme':\n      case 'interpolate':\n        return !contains(['point', 'band', 'identity'], scaleType);\n\n      case 'bins':\n        return !contains(['point', 'band', 'identity', 'ordinal'], scaleType);\n\n      case 'round':\n        return isContinuousToContinuous(scaleType) || scaleType === 'band' || scaleType === 'point';\n\n      case 'padding':\n      case 'rangeMin':\n      case 'rangeMax':\n        return isContinuousToContinuous(scaleType) || contains(['point', 'band'], scaleType);\n\n      case 'paddingOuter':\n      case 'align':\n        return contains(['point', 'band'], scaleType);\n\n      case 'paddingInner':\n        return scaleType === 'band';\n\n      case 'domainMax':\n      case 'domainMid':\n      case 'domainMin':\n      case 'clamp':\n        return isContinuousToContinuous(scaleType);\n\n      case 'nice':\n        return isContinuousToContinuous(scaleType) || scaleType === 'quantize' || scaleType === 'threshold';\n\n      case 'exponent':\n        return scaleType === 'pow';\n\n      case 'base':\n        return scaleType === 'log';\n\n      case 'constant':\n        return scaleType === 'symlog';\n\n      case 'zero':\n        return hasContinuousDomain(scaleType) && !contains(['log', // log scale cannot have zero value\n        'time', 'utc', // zero is not meaningful for time\n        'threshold', // threshold requires custom domain so zero does not matter\n        'quantile' // quantile depends on distribution so zero does not matter\n        ], scaleType);\n    }\n  }\n  /**\n   * Returns undefined if the input channel supports the input scale property name\n   */\n\n  function channelScalePropertyIncompatability(channel, propName) {\n    switch (propName) {\n      case 'interpolate':\n      case 'scheme':\n      case 'domainMid':\n        if (!isColorChannel(channel)) {\n          return cannotUseScalePropertyWithNonColor(channel);\n        }\n\n        return undefined;\n\n      case 'align':\n      case 'type':\n      case 'bins':\n      case 'domain':\n      case 'domainMax':\n      case 'domainMin':\n      case 'range':\n      case 'base':\n      case 'exponent':\n      case 'constant':\n      case 'nice':\n      case 'padding':\n      case 'paddingInner':\n      case 'paddingOuter':\n      case 'rangeMax':\n      case 'rangeMin':\n      case 'reverse':\n      case 'round':\n      case 'clamp':\n      case 'zero':\n        return undefined;\n      // GOOD!\n    }\n  }\n  function scaleTypeSupportDataType(specifiedType, fieldDefType) {\n    if (contains([ORDINAL, NOMINAL], fieldDefType)) {\n      return specifiedType === undefined || hasDiscreteDomain(specifiedType);\n    } else if (fieldDefType === TEMPORAL) {\n      return contains([ScaleType.TIME, ScaleType.UTC, undefined], specifiedType);\n    } else if (fieldDefType === QUANTITATIVE) {\n      return contains([ScaleType.LOG, ScaleType.POW, ScaleType.SQRT, ScaleType.SYMLOG, ScaleType.QUANTILE, ScaleType.QUANTIZE, ScaleType.THRESHOLD, ScaleType.LINEAR, undefined], specifiedType);\n    }\n\n    return true;\n  }\n  function channelSupportScaleType(channel, scaleType) {\n    if (!isScaleChannel(channel)) {\n      return false;\n    }\n\n    switch (channel) {\n      case X:\n      case Y:\n      case THETA:\n      case RADIUS:\n        return isContinuousToContinuous(scaleType) || contains(['band', 'point'], scaleType);\n\n      case SIZE: // TODO: size and opacity can support ordinal with more modification\n\n      case STROKEWIDTH:\n      case OPACITY:\n      case FILLOPACITY:\n      case STROKEOPACITY:\n      case ANGLE:\n        // Although it generally doesn't make sense to use band with size and opacity,\n        // it can also work since we use band: 0.5 to get midpoint.\n        return isContinuousToContinuous(scaleType) || isContinuousToDiscrete(scaleType) || contains(['band', 'point', 'ordinal'], scaleType);\n\n      case COLOR:\n      case FILL:\n      case STROKE:\n        return scaleType !== 'band';\n      // band does not make sense with color\n\n      case STROKEDASH:\n        return scaleType === 'ordinal' || isContinuousToDiscrete(scaleType);\n\n      case SHAPE:\n        return scaleType === 'ordinal';\n      // shape = lookup only\n    }\n  }\n\n  function isExprRef(o) {\n    return o && !!o['expr'];\n  }\n  function replaceExprRefInIndex(index) {\n    const props = keys(index || {});\n    const newIndex = {};\n\n    for (const prop of props) {\n      newIndex[prop] = signalRefOrValue(index[prop]);\n    }\n\n    return newIndex;\n  }\n\n  /**\n   * All types of primitive marks.\n   */\n  const Mark = {\n    arc: 'arc',\n    area: 'area',\n    bar: 'bar',\n    image: 'image',\n    line: 'line',\n    point: 'point',\n    rect: 'rect',\n    rule: 'rule',\n    text: 'text',\n    tick: 'tick',\n    trail: 'trail',\n    circle: 'circle',\n    square: 'square',\n    geoshape: 'geoshape'\n  };\n  const ARC = Mark.arc;\n  const AREA = Mark.area;\n  const BAR = Mark.bar;\n  const IMAGE = Mark.image;\n  const LINE = Mark.line;\n  const POINT = Mark.point;\n  const RECT = Mark.rect;\n  const RULE = Mark.rule;\n  const TEXT$1 = Mark.text;\n  const TICK = Mark.tick;\n  const TRAIL = Mark.trail;\n  const CIRCLE = Mark.circle;\n  const SQUARE = Mark.square;\n  const GEOSHAPE = Mark.geoshape;\n  function isPathMark(m) {\n    return contains(['line', 'area', 'trail'], m);\n  }\n  function isRectBasedMark(m) {\n    return contains(['rect', 'bar', 'image', 'arc'\n    /* arc is rect/interval in polar coordinate */\n    ], m);\n  }\n  const PRIMITIVE_MARKS = keys(Mark);\n  function isMarkDef(mark) {\n    return mark['type'];\n  }\n  const PRIMITIVE_MARK_INDEX = toSet(PRIMITIVE_MARKS);\n  const STROKE_CONFIG = ['stroke', 'strokeWidth', 'strokeDash', 'strokeDashOffset', 'strokeOpacity', 'strokeJoin', 'strokeMiterLimit'];\n  const FILL_CONFIG = ['fill', 'fillOpacity'];\n  const FILL_STROKE_CONFIG = [...STROKE_CONFIG, ...FILL_CONFIG];\n  const VL_ONLY_MARK_CONFIG_INDEX = {\n    color: 1,\n    filled: 1,\n    invalid: 1,\n    order: 1,\n    radius2: 1,\n    theta2: 1,\n    timeUnitBand: 1,\n    timeUnitBandPosition: 1\n  };\n  const VL_ONLY_MARK_CONFIG_PROPERTIES = keys(VL_ONLY_MARK_CONFIG_INDEX);\n  const VL_ONLY_MARK_SPECIFIC_CONFIG_PROPERTY_INDEX = {\n    area: ['line', 'point'],\n    bar: ['binSpacing', 'continuousBandSize', 'discreteBandSize'],\n    rect: ['binSpacing', 'continuousBandSize', 'discreteBandSize'],\n    line: ['point'],\n    tick: ['bandSize', 'thickness']\n  };\n  const defaultMarkConfig = {\n    color: '#4c78a8',\n    invalid: 'filter',\n    timeUnitBand: 1\n  }; // TODO: replace with MarkConfigMixins[Mark] once https://github.com/vega/ts-json-schema-generator/issues/344 is fixed\n\n  const MARK_CONFIG_INDEX = {\n    mark: 1,\n    arc: 1,\n    area: 1,\n    bar: 1,\n    circle: 1,\n    image: 1,\n    line: 1,\n    point: 1,\n    rect: 1,\n    rule: 1,\n    square: 1,\n    text: 1,\n    tick: 1,\n    trail: 1,\n    geoshape: 1\n  };\n  const MARK_CONFIGS = keys(MARK_CONFIG_INDEX);\n  const BAR_CORNER_RADIUS_INDEX = {\n    horizontal: ['cornerRadiusTopRight', 'cornerRadiusBottomRight'],\n    vertical: ['cornerRadiusTopLeft', 'cornerRadiusTopRight']\n  };\n  const DEFAULT_RECT_BAND_SIZE = 5;\n  const defaultBarConfig = {\n    binSpacing: 1,\n    continuousBandSize: DEFAULT_RECT_BAND_SIZE,\n    timeUnitBandPosition: 0.5\n  };\n  const defaultRectConfig = {\n    binSpacing: 0,\n    continuousBandSize: DEFAULT_RECT_BAND_SIZE,\n    timeUnitBandPosition: 0.5\n  };\n  const defaultTickConfig = {\n    thickness: 1\n  };\n  function getMarkType(m) {\n    return isMarkDef(m) ? m.type : m;\n  }\n\n  /**\n   * Utility files for producing Vega ValueRef for marks\n   */\n  function midPointRefWithPositionInvalidTest(params) {\n    const {\n      channel,\n      channelDef,\n      markDef,\n      scale,\n      config\n    } = params;\n    const ref = midPoint(params); // Wrap to check if the positional value is invalid, if so, plot the point on the min value\n\n    if ( // Only this for field def without counting aggregate (as count wouldn't be null)\n    isFieldDef(channelDef) && !isCountingAggregateOp(channelDef.aggregate) && // and only for continuous scale without zero (otherwise, null / invalid will be interpreted as zero, which doesn't cause layout problem)\n    scale && isContinuousToContinuous(scale.get('type')) && scale.get('zero') === false) {\n      return wrapPositionInvalidTest({\n        fieldDef: channelDef,\n        channel,\n        markDef,\n        ref,\n        config\n      });\n    }\n\n    return ref;\n  }\n  function wrapPositionInvalidTest({\n    fieldDef,\n    channel,\n    markDef,\n    ref,\n    config\n  }) {\n    if (isPathMark(markDef.type)) {\n      // path mark already use defined to skip points, no need to do it here.\n      return ref;\n    }\n\n    const invalid = getMarkPropOrConfig('invalid', markDef, config);\n\n    if (invalid === null) {\n      // if there is no invalid filter, don't do the invalid test\n      return ref;\n    }\n\n    return [fieldInvalidTestValueRef(fieldDef, channel), ref];\n  }\n  function fieldInvalidTestValueRef(fieldDef, channel) {\n    const test = fieldInvalidPredicate(fieldDef, true);\n    const mainChannel = getMainRangeChannel(channel); // we can cast here as the output can't be other things.\n\n    const zeroValueRef = mainChannel === 'y' ? {\n      field: {\n        group: 'height'\n      }\n    } : // x / angle / radius can all use 0\n    {\n      value: 0\n    };\n    return {\n      test,\n      ...zeroValueRef\n    };\n  }\n  function fieldInvalidPredicate(field, invalid = true) {\n    return fieldValidPredicate(isString(field) ? field : vgField(field, {\n      expr: 'datum'\n    }), !invalid);\n  }\n  function datumDefToExpr(datumDef) {\n    const {\n      datum\n    } = datumDef;\n\n    if (isDateTime(datum)) {\n      return dateTimeToExpr(datum);\n    }\n\n    return \"\".concat(JSON.stringify(datum));\n  }\n  function valueRefForFieldOrDatumDef(fieldDef, scaleName, opt, encode) {\n    const ref = {};\n\n    if (scaleName) {\n      ref.scale = scaleName;\n    }\n\n    if (isDatumDef(fieldDef)) {\n      const {\n        datum\n      } = fieldDef;\n\n      if (isDateTime(datum)) {\n        ref.signal = dateTimeToExpr(datum);\n      } else if (isSignalRef(datum)) {\n        ref.signal = datum.signal;\n      } else if (isExprRef(datum)) {\n        ref.signal = datum.expr;\n      } else {\n        ref.value = datum;\n      }\n    } else {\n      ref.field = vgField(fieldDef, opt);\n    }\n\n    if (encode) {\n      const {\n        offset,\n        band\n      } = encode;\n\n      if (offset) {\n        ref.offset = offset;\n      }\n\n      if (band) {\n        ref.band = band;\n      }\n    }\n\n    return ref;\n  }\n  /**\n   * Signal that returns the middle of a bin from start and end field. Should only be used with x and y.\n   */\n\n  function interpolatedSignalRef({\n    scaleName,\n    fieldOrDatumDef,\n    fieldOrDatumDef2,\n    offset,\n    startSuffix,\n    band = 0.5\n  }) {\n    const expr = 0 < band && band < 1 ? 'datum' : undefined;\n    const start = vgField(fieldOrDatumDef, {\n      expr,\n      suffix: startSuffix\n    });\n    const end = fieldOrDatumDef2 !== undefined ? vgField(fieldOrDatumDef2, {\n      expr\n    }) : vgField(fieldOrDatumDef, {\n      suffix: 'end',\n      expr\n    });\n    const ref = {};\n\n    if (band === 0 || band === 1) {\n      ref.scale = scaleName;\n      const val = band === 0 ? start : end;\n      ref.field = val;\n    } else {\n      const datum = \"\".concat(band, \" * \").concat(start, \" + \").concat(1 - band, \" * \").concat(end);\n      ref.signal = \"scale(\\\"\".concat(scaleName, \"\\\", \").concat(datum, \")\");\n    }\n\n    if (offset) {\n      ref.offset = offset;\n    }\n\n    return ref;\n  }\n\n  /**\n   * @returns {VgValueRef} Value Ref for xc / yc or mid point for other channels.\n   */\n  function midPoint({\n    channel,\n    channelDef,\n    channel2Def,\n    markDef,\n    config,\n    scaleName,\n    scale,\n    stack,\n    offset,\n    defaultRef,\n    band\n  }) {\n    // TODO: datum support\n    if (channelDef) {\n      /* istanbul ignore else */\n      if (isFieldOrDatumDef(channelDef)) {\n        var _ref, _band2;\n\n        if (isTypedFieldDef(channelDef)) {\n          var _band;\n\n          band = (_band = band) !== null && _band !== void 0 ? _band : getBand({\n            channel,\n            fieldDef: channelDef,\n            fieldDef2: channel2Def,\n            markDef,\n            stack,\n            config,\n            isMidPoint: true\n          });\n          const {\n            bin,\n            timeUnit,\n            type\n          } = channelDef;\n\n          if (isBinning(bin) || band && timeUnit && type === TEMPORAL) {\n            // Use middle only for x an y to place marks in the center between start and end of the bin range.\n            // We do not use the mid point for other channels (e.g. size) so that properties of legends and marks match.\n            if (stack && stack.impute) {\n              // For stack, we computed bin_mid so we can impute.\n              return valueRefForFieldOrDatumDef(channelDef, scaleName, {\n                binSuffix: 'mid'\n              }, {\n                offset\n              });\n            }\n\n            if (band) {\n              // if band = 0, no need to call interpolation\n              // For non-stack, we can just calculate bin mid on the fly using signal.\n              return interpolatedSignalRef({\n                scaleName,\n                fieldOrDatumDef: channelDef,\n                band,\n                offset\n              });\n            }\n\n            return valueRefForFieldOrDatumDef(channelDef, scaleName, binRequiresRange(channelDef, channel) ? {\n              binSuffix: 'range'\n            } : {}, {\n              offset\n            });\n          } else if (isBinned(bin)) {\n            if (isFieldDef(channel2Def)) {\n              return interpolatedSignalRef({\n                scaleName,\n                fieldOrDatumDef: channelDef,\n                fieldOrDatumDef2: channel2Def,\n                band,\n                offset\n              });\n            } else {\n              const channel2 = channel === X ? X2 : Y2;\n              warn(channelRequiredForBinned(channel2));\n            }\n          }\n        }\n\n        const scaleType = scale === null || scale === void 0 ? void 0 : scale.get('type');\n        return valueRefForFieldOrDatumDef(channelDef, scaleName, hasDiscreteDomain(scaleType) ? {\n          binSuffix: 'range'\n        } : {}, // no need for bin suffix if there is no scale\n        {\n          offset,\n          // For band, to get mid point, need to offset by half of the band\n          band: scaleType === 'band' ? (_ref = (_band2 = band) !== null && _band2 !== void 0 ? _band2 : channelDef.band) !== null && _ref !== void 0 ? _ref : 0.5 : undefined\n        });\n      } else if (isValueDef(channelDef)) {\n        const value = channelDef.value;\n        const offsetMixins = offset ? {\n          offset\n        } : {};\n        return { ...widthHeightValueOrSignalRef(channel, value),\n          ...offsetMixins\n        };\n      } // If channelDef is neither field def or value def, it's a condition-only def.\n      // In such case, we will use default ref.\n\n    }\n\n    if (isFunction(defaultRef)) {\n      defaultRef = defaultRef();\n    }\n\n    if (defaultRef) {\n      // for non-position, ref could be undefined.\n      return { ...defaultRef,\n        // only include offset when it is non-zero (zero = no offset)\n        ...(offset ? {\n          offset\n        } : {})\n      };\n    }\n\n    return defaultRef;\n  }\n  /**\n   * Convert special \"width\" and \"height\" values in Vega-Lite into Vega value ref.\n   */\n\n  function widthHeightValueOrSignalRef(channel, value) {\n    if (contains(['x', 'x2'], channel) && value === 'width') {\n      return {\n        field: {\n          group: 'width'\n        }\n      };\n    } else if (contains(['y', 'y2'], channel) && value === 'height') {\n      return {\n        field: {\n          group: 'height'\n        }\n      };\n    }\n\n    return signalOrValueRef(value);\n  }\n\n  function isCustomFormatType(formatType) {\n    return formatType && formatType !== 'number' && formatType !== 'time';\n  }\n\n  function customFormatExpr(formatType, field, format) {\n    return \"\".concat(formatType, \"(\").concat(field).concat(format ? \", \".concat(JSON.stringify(format)) : '', \")\");\n  }\n\n  const BIN_RANGE_DELIMITER = ' \\u2013 ';\n  function formatSignalRef({\n    fieldOrDatumDef,\n    format,\n    formatType,\n    expr,\n    normalizeStack,\n    config\n  }) {\n    if (isCustomFormatType(formatType)) {\n      return formatCustomType({\n        fieldOrDatumDef,\n        format,\n        formatType,\n        expr,\n        config\n      });\n    }\n\n    const field = fieldToFormat(fieldOrDatumDef, expr, normalizeStack);\n\n    if (isFieldOrDatumDefForTimeFormat(fieldOrDatumDef)) {\n      var _normalizeTimeUnit, _fieldOrDatumDef$scal;\n\n      const signal = timeFormatExpression(field, isFieldDef(fieldOrDatumDef) ? (_normalizeTimeUnit = normalizeTimeUnit(fieldOrDatumDef.timeUnit)) === null || _normalizeTimeUnit === void 0 ? void 0 : _normalizeTimeUnit.unit : undefined, format, config.timeFormat, isScaleFieldDef(fieldOrDatumDef) && ((_fieldOrDatumDef$scal = fieldOrDatumDef.scale) === null || _fieldOrDatumDef$scal === void 0 ? void 0 : _fieldOrDatumDef$scal.type) === ScaleType.UTC);\n      return signal ? {\n        signal\n      } : undefined;\n    }\n\n    format = numberFormat(channelDefType(fieldOrDatumDef), format, config);\n\n    if (isFieldDef(fieldOrDatumDef) && isBinning(fieldOrDatumDef.bin)) {\n      const endField = vgField(fieldOrDatumDef, {\n        expr,\n        binSuffix: 'end'\n      });\n      return {\n        signal: binFormatExpression(field, endField, format, formatType, config)\n      };\n    } else if (format || channelDefType(fieldOrDatumDef) === 'quantitative') {\n      return {\n        signal: \"\".concat(formatExpr(field, format))\n      };\n    } else {\n      return {\n        signal: \"isValid(\".concat(field, \") ? \").concat(field, \" : \\\"\\\"+\").concat(field)\n      };\n    }\n  }\n\n  function fieldToFormat(fieldOrDatumDef, expr, normalizeStack) {\n    if (isFieldDef(fieldOrDatumDef)) {\n      if (normalizeStack) {\n        return \"\".concat(vgField(fieldOrDatumDef, {\n          expr,\n          suffix: 'end'\n        }), \"-\").concat(vgField(fieldOrDatumDef, {\n          expr,\n          suffix: 'start'\n        }));\n      } else {\n        return vgField(fieldOrDatumDef, {\n          expr\n        });\n      }\n    } else {\n      return datumDefToExpr(fieldOrDatumDef);\n    }\n  }\n\n  function formatCustomType({\n    fieldOrDatumDef,\n    format,\n    formatType,\n    expr,\n    normalizeStack,\n    config,\n    field\n  }) {\n    var _field;\n\n    field = (_field = field) !== null && _field !== void 0 ? _field : fieldToFormat(fieldOrDatumDef, expr, normalizeStack);\n\n    if (isFieldDef(fieldOrDatumDef) && isBinning(fieldOrDatumDef.bin)) {\n      const endField = vgField(fieldOrDatumDef, {\n        expr,\n        binSuffix: 'end'\n      });\n      return {\n        signal: binFormatExpression(field, endField, format, formatType, config)\n      };\n    }\n\n    return {\n      signal: customFormatExpr(formatType, field, format)\n    };\n  }\n  function guideFormat(fieldOrDatumDef, type, format, formatType, config, omitTimeFormatConfig) // axis doesn't use config.timeFormat\n  {\n    if (isCustomFormatType(formatType)) {\n      return undefined; // handled in encode block\n    }\n\n    if (isFieldOrDatumDefForTimeFormat(fieldOrDatumDef)) {\n      var _normalizeTimeUnit2;\n\n      const timeUnit = isFieldDef(fieldOrDatumDef) ? (_normalizeTimeUnit2 = normalizeTimeUnit(fieldOrDatumDef.timeUnit)) === null || _normalizeTimeUnit2 === void 0 ? void 0 : _normalizeTimeUnit2.unit : undefined;\n      return timeFormat(format, timeUnit, config, omitTimeFormatConfig);\n    }\n\n    return numberFormat(type, format, config);\n  }\n  function guideFormatType(formatType, fieldOrDatumDef, scaleType) {\n    if (formatType && (isSignalRef(formatType) || formatType === 'number' || formatType === 'time')) {\n      return formatType;\n    }\n\n    if (isFieldOrDatumDefForTimeFormat(fieldOrDatumDef) && scaleType !== 'time' && scaleType !== 'utc') {\n      return 'time';\n    }\n\n    return undefined;\n  }\n  /**\n   * Returns number format for a fieldDef.\n   */\n\n  function numberFormat(type, specifiedFormat, config) {\n    // Specified format in axis/legend has higher precedence than fieldDef.format\n    if (isString(specifiedFormat)) {\n      return specifiedFormat;\n    }\n\n    if (type === QUANTITATIVE) {\n      // we only apply the default if the field is quantitative\n      return config.numberFormat;\n    }\n\n    return undefined;\n  }\n  /**\n   * Returns time format for a fieldDef for use in guides.\n   */\n\n  function timeFormat(specifiedFormat, timeUnit, config, omitTimeFormatConfig) {\n    if (specifiedFormat) {\n      return specifiedFormat;\n    }\n\n    if (timeUnit) {\n      return {\n        signal: timeUnitSpecifierExpression(timeUnit)\n      };\n    }\n\n    return omitTimeFormatConfig ? undefined : config.timeFormat;\n  }\n\n  function formatExpr(field, format) {\n    return \"format(\".concat(field, \", \\\"\").concat(format || '', \"\\\")\");\n  }\n\n  function binNumberFormatExpr(field, format, formatType, config) {\n    var _ref;\n\n    if (isCustomFormatType(formatType)) {\n      return customFormatExpr(formatType, field, format);\n    }\n\n    return formatExpr(field, (_ref = isString(format) ? format : undefined) !== null && _ref !== void 0 ? _ref : config.numberFormat);\n  }\n\n  function binFormatExpression(startField, endField, format, formatType, config) {\n    const start = binNumberFormatExpr(startField, format, formatType, config);\n    const end = binNumberFormatExpr(endField, format, formatType, config);\n    return \"\".concat(fieldValidPredicate(startField, false), \" ? \\\"null\\\" : \").concat(start, \" + \\\"\").concat(BIN_RANGE_DELIMITER, \"\\\" + \").concat(end);\n  }\n  /**\n   * Returns the time expression used for axis/legend labels or text mark for a temporal field\n   */\n\n  function timeFormatExpression(field, timeUnit, format, rawTimeFormat, // should be provided only for actual text and headers, not axis/legend labels\n  isUTCScale) {\n    if (!timeUnit || format) {\n      // If there is no time unit, or if user explicitly specifies format for axis/legend/text.\n      format = isString(format) ? format : rawTimeFormat; // only use provided timeFormat if there is no timeUnit.\n\n      return \"\".concat(isUTCScale ? 'utc' : 'time', \"Format(\").concat(field, \", '\").concat(format, \"')\");\n    } else {\n      return formatExpression(timeUnit, field, isUTCScale);\n    }\n  }\n\n  const DEFAULT_SORT_OP = 'min';\n  /**\n   * A sort definition for sorting a discrete scale in an encoding field definition.\n   */\n\n  const SORT_BY_CHANNEL_INDEX = {\n    x: 1,\n    y: 1,\n    color: 1,\n    fill: 1,\n    stroke: 1,\n    strokeWidth: 1,\n    size: 1,\n    shape: 1,\n    fillOpacity: 1,\n    strokeOpacity: 1,\n    opacity: 1,\n    text: 1\n  };\n  function isSortByChannel(c) {\n    return c in SORT_BY_CHANNEL_INDEX;\n  }\n  function isSortByEncoding(sort) {\n    return !!sort && !!sort['encoding'];\n  }\n  function isSortField(sort) {\n    return !!sort && (sort['op'] === 'count' || !!sort['field']);\n  }\n  function isSortArray(sort) {\n    return !!sort && isArray(sort);\n  }\n\n  function isFacetMapping(f) {\n    return 'row' in f || 'column' in f;\n  }\n  /**\n   * Facet mapping for encoding macro\n   */\n\n  function isFacetFieldDef(channelDef) {\n    return !!channelDef && 'header' in channelDef;\n  }\n  /**\n   * Base interface for a facet specification.\n   */\n\n  function isFacetSpec(spec) {\n    return 'facet' in spec;\n  }\n\n  function isConditionalSelection(c) {\n    return c['selection'];\n  }\n  function isRepeatRef(field) {\n    return field && !isString(field) && 'repeat' in field;\n  }\n  /** @@hidden */\n\n  function toFieldDefBase(fieldDef) {\n    const {\n      field,\n      timeUnit,\n      bin,\n      aggregate\n    } = fieldDef;\n    return { ...(timeUnit ? {\n        timeUnit\n      } : {}),\n      ...(bin ? {\n        bin\n      } : {}),\n      ...(aggregate ? {\n        aggregate\n      } : {}),\n      field\n    };\n  }\n  function isSortableFieldDef(fieldDef) {\n    return 'sort' in fieldDef;\n  }\n  function getBand({\n    channel,\n    fieldDef,\n    fieldDef2,\n    markDef: mark,\n    stack,\n    config,\n    isMidPoint\n  }) {\n    if (isFieldOrDatumDef(fieldDef) && fieldDef.band !== undefined) {\n      return fieldDef.band;\n    }\n\n    if (isFieldDef(fieldDef)) {\n      const {\n        timeUnit,\n        bin\n      } = fieldDef;\n\n      if (timeUnit && !fieldDef2) {\n        if (isMidPoint) {\n          return getMarkConfig('timeUnitBandPosition', mark, config);\n        } else {\n          return isRectBasedMark(mark.type) ? getMarkConfig('timeUnitBand', mark, config) : 0;\n        }\n      } else if (isBinning(bin)) {\n        return isRectBasedMark(mark.type) && !isMidPoint ? 1 : 0.5;\n      }\n    }\n\n    if ((stack === null || stack === void 0 ? void 0 : stack.fieldChannel) === channel && isMidPoint) {\n      return 0.5;\n    }\n\n    return undefined;\n  }\n  function hasBand(channel, fieldDef, fieldDef2, stack, markDef, config) {\n    if (isBinning(fieldDef.bin) || fieldDef.timeUnit && isTypedFieldDef(fieldDef) && fieldDef.type === 'temporal') {\n      return !!getBand({\n        channel,\n        fieldDef,\n        fieldDef2,\n        stack,\n        markDef,\n        config\n      });\n    }\n\n    return false;\n  }\n  /**\n   * Field definition of a mark property, which can contain a legend.\n   */\n\n  function isConditionalDef(channelDef) {\n    return !!channelDef && 'condition' in channelDef;\n  }\n  /**\n   * Return if a channelDef is a ConditionalValueDef with ConditionFieldDef\n   */\n\n  function hasConditionalFieldDef(channelDef) {\n    const condition = channelDef && channelDef['condition'];\n    return !!condition && !isArray(condition) && isFieldDef(condition);\n  }\n  function hasConditionalFieldOrDatumDef(channelDef) {\n    const condition = channelDef && channelDef['condition'];\n    return !!condition && !isArray(condition) && isFieldOrDatumDef(condition);\n  }\n  function hasConditionalValueDef(channelDef) {\n    const condition = channelDef && channelDef['condition'];\n    return !!condition && (isArray(condition) || isValueDef(condition));\n  }\n  function isFieldDef(channelDef) {\n    // TODO: we can't use field in channelDef here as it's somehow failing runtime test\n    return !!channelDef && (!!channelDef['field'] || channelDef['aggregate'] === 'count');\n  }\n  function channelDefType(channelDef) {\n    return channelDef && channelDef['type'];\n  }\n  function isDatumDef(channelDef) {\n    return !!channelDef && 'datum' in channelDef;\n  }\n  function isContinuousFieldOrDatumDef(cd) {\n    // TODO: make datum support DateTime object\n    return isTypedFieldDef(cd) && isContinuous(cd) || isNumericDataDef(cd);\n  }\n  function isNumericDataDef(cd) {\n    return isDatumDef(cd) && isNumber(cd.datum);\n  }\n  function isFieldOrDatumDef(channelDef) {\n    return isFieldDef(channelDef) || isDatumDef(channelDef);\n  }\n  function isTypedFieldDef(channelDef) {\n    return !!channelDef && ('field' in channelDef || channelDef['aggregate'] === 'count') && 'type' in channelDef;\n  }\n  function isValueDef(channelDef) {\n    return channelDef && 'value' in channelDef && 'value' in channelDef;\n  }\n  function isScaleFieldDef(channelDef) {\n    return !!channelDef && ('scale' in channelDef || 'sort' in channelDef);\n  }\n  function isPositionFieldOrDatumDef(channelDef) {\n    return channelDef && ('axis' in channelDef || 'stack' in channelDef || 'impute' in channelDef);\n  }\n  function isMarkPropFieldOrDatumDef(channelDef) {\n    return !!channelDef && 'legend' in channelDef;\n  }\n  function isStringFieldOrDatumDef(channelDef) {\n    return !!channelDef && ('format' in channelDef || 'formatType' in channelDef);\n  }\n  function toStringFieldDef(fieldDef) {\n    // omit properties that don't exist in string field defs\n    return omit(fieldDef, ['legend', 'axis', 'header', 'scale']);\n  }\n\n  function isOpFieldDef(fieldDef) {\n    return 'op' in fieldDef;\n  }\n  /**\n   * Get a Vega field reference from a Vega-Lite field def.\n   */\n\n\n  function vgField(fieldDef, opt = {}) {\n    let field = fieldDef.field;\n    const prefix = opt.prefix;\n    let suffix = opt.suffix;\n    let argAccessor = ''; // for accessing argmin/argmax field at the end without getting escaped\n\n    if (isCount(fieldDef)) {\n      field = internalField('count');\n    } else {\n      let fn;\n\n      if (!opt.nofn) {\n        if (isOpFieldDef(fieldDef)) {\n          fn = fieldDef.op;\n        } else {\n          const {\n            bin,\n            aggregate,\n            timeUnit\n          } = fieldDef;\n\n          if (isBinning(bin)) {\n            var _opt$binSuffix, _opt$suffix;\n\n            fn = binToString(bin);\n            suffix = ((_opt$binSuffix = opt.binSuffix) !== null && _opt$binSuffix !== void 0 ? _opt$binSuffix : '') + ((_opt$suffix = opt.suffix) !== null && _opt$suffix !== void 0 ? _opt$suffix : '');\n          } else if (aggregate) {\n            if (isArgmaxDef(aggregate)) {\n              argAccessor = \"[\\\"\".concat(field, \"\\\"]\");\n              field = \"argmax_\".concat(aggregate.argmax);\n            } else if (isArgminDef(aggregate)) {\n              argAccessor = \"[\\\"\".concat(field, \"\\\"]\");\n              field = \"argmin_\".concat(aggregate.argmin);\n            } else {\n              fn = String(aggregate);\n            }\n          } else if (timeUnit) {\n            var _opt$suffix2;\n\n            fn = timeUnitToString(timeUnit);\n            suffix = (!contains(['range', 'mid'], opt.binSuffix) && opt.binSuffix || '') + ((_opt$suffix2 = opt.suffix) !== null && _opt$suffix2 !== void 0 ? _opt$suffix2 : '');\n          }\n        }\n      }\n\n      if (fn) {\n        field = field ? \"\".concat(fn, \"_\").concat(field) : fn;\n      }\n    }\n\n    if (suffix) {\n      field = \"\".concat(field, \"_\").concat(suffix);\n    }\n\n    if (prefix) {\n      field = \"\".concat(prefix, \"_\").concat(field);\n    }\n\n    if (opt.forAs) {\n      return removePathFromField(field);\n    } else if (opt.expr) {\n      // Expression to access flattened field. No need to escape dots.\n      return flatAccessWithDatum(field, opt.expr) + argAccessor;\n    } else {\n      // We flattened all fields so paths should have become dot.\n      return replacePathInField(field) + argAccessor;\n    }\n  }\n  function isDiscrete(def) {\n    switch (def.type) {\n      case 'nominal':\n      case 'ordinal':\n      case 'geojson':\n        return true;\n\n      case 'quantitative':\n        return isFieldDef(def) && !!def.bin;\n\n      case 'temporal':\n        return false;\n    }\n\n    throw new Error(invalidFieldType(def.type));\n  }\n  function isContinuous(fieldDef) {\n    return !isDiscrete(fieldDef);\n  }\n  function isCount(fieldDef) {\n    return fieldDef.aggregate === 'count';\n  }\n  function verbalTitleFormatter(fieldDef, config) {\n    const {\n      field,\n      bin,\n      timeUnit,\n      aggregate\n    } = fieldDef;\n\n    if (aggregate === 'count') {\n      return config.countTitle;\n    } else if (isBinning(bin)) {\n      return \"\".concat(field, \" (binned)\");\n    } else if (timeUnit) {\n      var _normalizeTimeUnit;\n\n      const unit = (_normalizeTimeUnit = normalizeTimeUnit(timeUnit)) === null || _normalizeTimeUnit === void 0 ? void 0 : _normalizeTimeUnit.unit;\n\n      if (unit) {\n        return \"\".concat(field, \" (\").concat(getTimeUnitParts(unit).join('-'), \")\");\n      }\n    } else if (aggregate) {\n      if (isArgmaxDef(aggregate)) {\n        return \"\".concat(field, \" for max \").concat(aggregate.argmax);\n      } else if (isArgminDef(aggregate)) {\n        return \"\".concat(field, \" for min \").concat(aggregate.argmin);\n      } else {\n        return \"\".concat(titleCase(aggregate), \" of \").concat(field);\n      }\n    }\n\n    return field;\n  }\n  function functionalTitleFormatter(fieldDef) {\n    const {\n      aggregate,\n      bin,\n      timeUnit,\n      field\n    } = fieldDef;\n\n    if (isArgmaxDef(aggregate)) {\n      return \"\".concat(field, \" for argmax(\").concat(aggregate.argmax, \")\");\n    } else if (isArgminDef(aggregate)) {\n      return \"\".concat(field, \" for argmin(\").concat(aggregate.argmin, \")\");\n    }\n\n    const timeUnitParams = normalizeTimeUnit(timeUnit);\n    const fn = aggregate || (timeUnitParams === null || timeUnitParams === void 0 ? void 0 : timeUnitParams.unit) || (timeUnitParams === null || timeUnitParams === void 0 ? void 0 : timeUnitParams.maxbins) && 'timeunit' || isBinning(bin) && 'bin';\n\n    if (fn) {\n      return fn.toUpperCase() + '(' + field + ')';\n    } else {\n      return field;\n    }\n  }\n  const defaultTitleFormatter = (fieldDef, config) => {\n    switch (config.fieldTitle) {\n      case 'plain':\n        return fieldDef.field;\n\n      case 'functional':\n        return functionalTitleFormatter(fieldDef);\n\n      default:\n        return verbalTitleFormatter(fieldDef, config);\n    }\n  };\n  let titleFormatter = defaultTitleFormatter;\n  function setTitleFormatter(formatter) {\n    titleFormatter = formatter;\n  }\n  function resetTitleFormatter() {\n    setTitleFormatter(defaultTitleFormatter);\n  }\n  function title(fieldOrDatumDef, config, {\n    allowDisabling,\n    includeDefault = true\n  }) {\n    var _getGuide;\n\n    const guideTitle = (_getGuide = getGuide(fieldOrDatumDef)) === null || _getGuide === void 0 ? void 0 : _getGuide.title;\n\n    if (!isFieldDef(fieldOrDatumDef)) {\n      return guideTitle;\n    }\n\n    const fieldDef = fieldOrDatumDef;\n    const def = includeDefault ? defaultTitle(fieldDef, config) : undefined;\n\n    if (allowDisabling) {\n      return getFirstDefined(guideTitle, fieldDef.title, def);\n    } else {\n      var _ref;\n\n      return (_ref = guideTitle !== null && guideTitle !== void 0 ? guideTitle : fieldDef.title) !== null && _ref !== void 0 ? _ref : def;\n    }\n  }\n  function getGuide(fieldDef) {\n    if (isPositionFieldOrDatumDef(fieldDef) && fieldDef.axis) {\n      return fieldDef.axis;\n    } else if (isMarkPropFieldOrDatumDef(fieldDef) && fieldDef.legend) {\n      return fieldDef.legend;\n    } else if (isFacetFieldDef(fieldDef) && fieldDef.header) {\n      return fieldDef.header;\n    }\n\n    return undefined;\n  }\n  function defaultTitle(fieldDef, config) {\n    return titleFormatter(fieldDef, config);\n  }\n  function getFormatMixins(fieldDef) {\n    if (isStringFieldOrDatumDef(fieldDef)) {\n      const {\n        format,\n        formatType\n      } = fieldDef;\n      return {\n        format,\n        formatType\n      };\n    } else {\n      var _getGuide2;\n\n      const guide = (_getGuide2 = getGuide(fieldDef)) !== null && _getGuide2 !== void 0 ? _getGuide2 : {};\n      const {\n        format,\n        formatType\n      } = guide;\n      return {\n        format,\n        formatType\n      };\n    }\n  }\n  function defaultType(fieldDef, channel) {\n    var _fieldDef$scale;\n\n    switch (channel) {\n      case 'latitude':\n      case 'longitude':\n        return 'quantitative';\n\n      case 'row':\n      case 'column':\n      case 'facet':\n      case 'shape':\n      case 'strokeDash':\n        return 'nominal';\n\n      case 'order':\n        return 'ordinal';\n    }\n\n    if (isSortableFieldDef(fieldDef) && isArray(fieldDef.sort)) {\n      return 'ordinal';\n    }\n\n    const {\n      aggregate,\n      bin,\n      timeUnit\n    } = fieldDef;\n\n    if (timeUnit) {\n      return 'temporal';\n    }\n\n    if (bin || aggregate && !isArgmaxDef(aggregate) && !isArgminDef(aggregate)) {\n      return 'quantitative';\n    }\n\n    if (isScaleFieldDef(fieldDef) && ((_fieldDef$scale = fieldDef.scale) === null || _fieldDef$scale === void 0 ? void 0 : _fieldDef$scale.type)) {\n      switch (SCALE_CATEGORY_INDEX[fieldDef.scale.type]) {\n        case 'numeric':\n        case 'discretizing':\n          return 'quantitative';\n\n        case 'time':\n          return 'temporal';\n      }\n    }\n\n    return 'nominal';\n  }\n  /**\n   * Returns the fieldDef -- either from the outer channelDef or from the condition of channelDef.\n   * @param channelDef\n   */\n\n  function getFieldDef(channelDef) {\n    if (isFieldDef(channelDef)) {\n      return channelDef;\n    } else if (hasConditionalFieldDef(channelDef)) {\n      return channelDef.condition;\n    }\n\n    return undefined;\n  }\n  function getFieldOrDatumDef(channelDef) {\n    if (isFieldOrDatumDef(channelDef)) {\n      return channelDef;\n    } else if (hasConditionalFieldOrDatumDef(channelDef)) {\n      return channelDef.condition;\n    }\n\n    return undefined;\n  }\n  /**\n   * Convert type to full, lowercase type, or augment the fieldDef with a default type if missing.\n   */\n\n  function initChannelDef(channelDef, channel, config, opt = {}) {\n    if (isString(channelDef) || isNumber(channelDef) || isBoolean(channelDef)) {\n      const primitiveType = isString(channelDef) ? 'string' : isNumber(channelDef) ? 'number' : 'boolean';\n      warn(primitiveChannelDef(channel, primitiveType, channelDef));\n      return {\n        value: channelDef\n      };\n    } // If a fieldDef contains a field, we need type.\n\n\n    if (isFieldOrDatumDef(channelDef)) {\n      return initFieldOrDatumDef(channelDef, channel, config, opt);\n    } else if (hasConditionalFieldOrDatumDef(channelDef)) {\n      return { ...channelDef,\n        // Need to cast as normalizeFieldDef normally return FieldDef, but here we know that it is definitely Condition<FieldDef>\n        condition: initFieldOrDatumDef(channelDef.condition, channel, config, opt)\n      };\n    }\n\n    return channelDef;\n  }\n  function initFieldOrDatumDef(fd, channel, config, opt) {\n    if (isStringFieldOrDatumDef(fd)) {\n      const {\n        format,\n        formatType,\n        ...rest\n      } = fd;\n\n      if (isCustomFormatType(formatType) && !config.customFormatTypes) {\n        warn(customFormatTypeNotAllowed(channel));\n        return initFieldOrDatumDef(rest, channel, config, opt);\n      }\n    } else {\n      const guideType = isPositionFieldOrDatumDef(fd) ? 'axis' : isMarkPropFieldOrDatumDef(fd) ? 'legend' : isFacetFieldDef(fd) ? 'header' : null;\n\n      if (guideType && fd[guideType]) {\n        const {\n          format,\n          formatType,\n          ...newGuide\n        } = fd[guideType];\n\n        if (isCustomFormatType(formatType) && !config.customFormatTypes) {\n          warn(customFormatTypeNotAllowed(channel));\n          return initFieldOrDatumDef({ ...fd,\n            [guideType]: newGuide\n          }, channel, config, opt);\n        }\n      }\n    }\n\n    if (isFieldDef(fd)) {\n      return initFieldDef(fd, channel, opt);\n    }\n\n    return initDatumDef(fd);\n  }\n\n  function initDatumDef(datumDef) {\n    let type = datumDef['type'];\n\n    if (type) {\n      return datumDef;\n    }\n\n    const {\n      datum\n    } = datumDef;\n    type = isNumber(datum) ? 'quantitative' : isString(datum) ? 'nominal' : isDateTime(datum) ? 'temporal' : undefined;\n    return { ...datumDef,\n      type\n    };\n  }\n\n  function initFieldDef(fd, channel, {\n    compositeMark = false\n  } = {}) {\n    const {\n      aggregate,\n      timeUnit,\n      bin,\n      field\n    } = fd;\n    const fieldDef = { ...fd\n    }; // Drop invalid aggregate\n\n    if (!compositeMark && aggregate && !isAggregateOp(aggregate) && !isArgmaxDef(aggregate) && !isArgminDef(aggregate)) {\n      warn(invalidAggregate(aggregate));\n      delete fieldDef.aggregate;\n    } // Normalize Time Unit\n\n\n    if (timeUnit) {\n      fieldDef.timeUnit = normalizeTimeUnit(timeUnit);\n    }\n\n    if (field) {\n      fieldDef.field = \"\".concat(field);\n    } // Normalize bin\n\n\n    if (isBinning(bin)) {\n      fieldDef.bin = normalizeBin(bin, channel);\n    }\n\n    if (isBinned(bin) && !isXorY(channel)) {\n      warn(channelShouldNotBeUsedForBinned(channel));\n    } // Normalize Type\n\n\n    if (isTypedFieldDef(fieldDef)) {\n      const {\n        type\n      } = fieldDef;\n      const fullType = getFullName(type);\n\n      if (type !== fullType) {\n        // convert short type to full type\n        fieldDef.type = fullType;\n      }\n\n      if (type !== 'quantitative') {\n        if (isCountingAggregateOp(aggregate)) {\n          warn(invalidFieldTypeForCountAggregate(type, aggregate));\n          fieldDef.type = 'quantitative';\n        }\n      }\n    } else if (!isSecondaryRangeChannel(channel)) {\n      // If type is empty / invalid, then augment with default type\n      const newType = defaultType(fieldDef, channel);\n      fieldDef['type'] = newType;\n    }\n\n    if (isTypedFieldDef(fieldDef)) {\n      const {\n        compatible,\n        warning\n      } = channelCompatibility(fieldDef, channel) || {};\n\n      if (compatible === false) {\n        warn(warning);\n      }\n    }\n\n    if (isSortableFieldDef(fieldDef) && isString(fieldDef.sort)) {\n      const {\n        sort\n      } = fieldDef;\n\n      if (isSortByChannel(sort)) {\n        return { ...fieldDef,\n          sort: {\n            encoding: sort\n          }\n        };\n      }\n\n      const sub = sort.substr(1);\n\n      if (sort.charAt(0) === '-' && isSortByChannel(sub)) {\n        return { ...fieldDef,\n          sort: {\n            encoding: sub,\n            order: 'descending'\n          }\n        };\n      }\n    }\n\n    if (isFacetFieldDef(fieldDef)) {\n      const {\n        header\n      } = fieldDef;\n      const {\n        orient,\n        ...rest\n      } = header;\n\n      if (orient) {\n        return { ...fieldDef,\n          header: { ...rest,\n            labelOrient: header.labelOrient || orient,\n            titleOrient: header.titleOrient || orient\n          }\n        };\n      }\n    }\n\n    return fieldDef;\n  }\n  function normalizeBin(bin, channel) {\n    if (isBoolean(bin)) {\n      return {\n        maxbins: autoMaxBins(channel)\n      };\n    } else if (bin === 'binned') {\n      return {\n        binned: true\n      };\n    } else if (!bin.maxbins && !bin.step) {\n      return { ...bin,\n        maxbins: autoMaxBins(channel)\n      };\n    } else {\n      return bin;\n    }\n  }\n  const COMPATIBLE = {\n    compatible: true\n  };\n  function channelCompatibility(fieldDef, channel) {\n    const type = fieldDef.type;\n\n    if (type === 'geojson' && channel !== 'shape') {\n      return {\n        compatible: false,\n        warning: \"Channel \".concat(channel, \" should not be used with a geojson data.\")\n      };\n    }\n\n    switch (channel) {\n      case ROW:\n      case COLUMN:\n      case FACET:\n        if (isContinuous(fieldDef)) {\n          return {\n            compatible: false,\n            warning: facetChannelShouldBeDiscrete(channel)\n          };\n        }\n\n        return COMPATIBLE;\n\n      case X:\n      case Y:\n      case COLOR:\n      case FILL:\n      case STROKE:\n      case TEXT:\n      case DETAIL:\n      case KEY:\n      case TOOLTIP:\n      case HREF:\n      case URL:\n      case ANGLE:\n      case THETA:\n      case RADIUS:\n      case DESCRIPTION:\n        return COMPATIBLE;\n\n      case LONGITUDE:\n      case LONGITUDE2:\n      case LATITUDE:\n      case LATITUDE2:\n        if (type !== QUANTITATIVE) {\n          return {\n            compatible: false,\n            warning: \"Channel \".concat(channel, \" should be used with a quantitative field only, not \").concat(fieldDef.type, \" field.\")\n          };\n        }\n\n        return COMPATIBLE;\n\n      case OPACITY:\n      case FILLOPACITY:\n      case STROKEOPACITY:\n      case STROKEWIDTH:\n      case SIZE:\n      case THETA2:\n      case RADIUS2:\n      case X2:\n      case Y2:\n        if (type === 'nominal' && !fieldDef['sort']) {\n          return {\n            compatible: false,\n            warning: \"Channel \".concat(channel, \" should not be used with an unsorted discrete field.\")\n          };\n        }\n\n        return COMPATIBLE;\n\n      case STROKEDASH:\n        if (!contains(['ordinal', 'nominal'], fieldDef.type)) {\n          return {\n            compatible: false,\n            warning: 'StrokeDash channel should be used with only discrete data.'\n          };\n        }\n\n        return COMPATIBLE;\n\n      case SHAPE:\n        if (!contains(['ordinal', 'nominal', 'geojson'], fieldDef.type)) {\n          return {\n            compatible: false,\n            warning: 'Shape channel should be used with only either discrete or geojson data.'\n          };\n        }\n\n        return COMPATIBLE;\n\n      case ORDER:\n        if (fieldDef.type === 'nominal' && !('sort' in fieldDef)) {\n          return {\n            compatible: false,\n            warning: \"Channel order is inappropriate for nominal field, which has no inherent order.\"\n          };\n        }\n\n        return COMPATIBLE;\n    }\n  }\n  /**\n   * Check if the field def uses a time format or does not use any format but is temporal\n   * (this does not cover field defs that are temporal but use a number format).\n   */\n\n  function isFieldOrDatumDefForTimeFormat(fieldOrDatumDef) {\n    const {\n      formatType\n    } = getFormatMixins(fieldOrDatumDef);\n    return formatType === 'time' || !formatType && isTimeFieldDef(fieldOrDatumDef);\n  }\n  /**\n   * Check if field def has type `temporal`. If you want to also cover field defs that use a time format, use `isTimeFormatFieldDef`.\n   */\n\n  function isTimeFieldDef(def) {\n    return def && (def['type'] === 'temporal' || isFieldDef(def) && !!def.timeUnit);\n  }\n  /**\n   * Getting a value associated with a fielddef.\n   * Convert the value to Vega expression if applicable (for datetime object, or string if the field def is temporal or has timeUnit)\n   */\n\n  function valueExpr(v, {\n    timeUnit,\n    type,\n    wrapTime,\n    undefinedIfExprNotRequired\n  }) {\n    var _normalizeTimeUnit2;\n\n    const unit = timeUnit && ((_normalizeTimeUnit2 = normalizeTimeUnit(timeUnit)) === null || _normalizeTimeUnit2 === void 0 ? void 0 : _normalizeTimeUnit2.unit);\n    let isTime = unit || type === 'temporal';\n    let expr;\n\n    if (isExprRef(v)) {\n      expr = v.expr;\n    } else if (isSignalRef(v)) {\n      expr = v.signal;\n    } else if (isDateTime(v)) {\n      isTime = true;\n      expr = dateTimeToExpr(v);\n    } else if (isString(v) || isNumber(v)) {\n      if (isTime) {\n        expr = \"datetime(\".concat(JSON.stringify(v), \")\");\n\n        if (isLocalSingleTimeUnit(unit)) {\n          // for single timeUnit, we will use dateTimeToExpr to convert number/string to match the timeUnit\n          if (isNumber(v) && v < 10000 || isString(v) && isNaN(Date.parse(v))) {\n            expr = dateTimeToExpr({\n              [unit]: v\n            });\n          }\n        }\n      }\n    }\n\n    if (expr) {\n      return wrapTime && isTime ? \"time(\".concat(expr, \")\") : expr;\n    } // number or boolean or normal string\n\n\n    return undefinedIfExprNotRequired ? undefined : JSON.stringify(v);\n  }\n  /**\n   * Standardize value array -- convert each value to Vega expression if applicable\n   */\n\n  function valueArray(fieldOrDatumDef, values) {\n    const {\n      type\n    } = fieldOrDatumDef;\n    return values.map(v => {\n      const expr = valueExpr(v, {\n        timeUnit: isFieldDef(fieldOrDatumDef) ? fieldOrDatumDef.timeUnit : undefined,\n        type,\n        undefinedIfExprNotRequired: true\n      }); // return signal for the expression if we need an expression\n\n      if (expr !== undefined) {\n        return {\n          signal: expr\n        };\n      } // otherwise just return the original value\n\n\n      return v;\n    });\n  }\n  /**\n   * Checks whether a fieldDef for a particular channel requires a computed bin range.\n   */\n\n  function binRequiresRange(fieldDef, channel) {\n    if (!isBinning(fieldDef.bin)) {\n      console.warn('Only call this method for binned field defs.');\n      return false;\n    } // We need the range only when the user explicitly forces a binned field to be use discrete scale. In this case, bin range is used in axis and legend labels.\n    // We could check whether the axis or legend exists (not disabled) but that seems overkill.\n\n\n    return isScaleChannel(channel) && contains(['ordinal', 'nominal'], fieldDef.type);\n  }\n\n  function extractTitleConfig(titleConfig) {\n    const {\n      // These are non-mark title config that need to be hardcoded\n      anchor,\n      frame,\n      offset,\n      orient,\n      // color needs to be redirect to fill\n      color,\n      // subtitle properties\n      subtitleColor,\n      subtitleFont,\n      subtitleFontSize,\n      subtitleFontStyle,\n      subtitleFontWeight,\n      subtitleLineHeight,\n      subtitlePadding,\n      // The rest are mark config.\n      ...rest\n    } = titleConfig;\n    const titleMarkConfig = { ...rest,\n      ...(color ? {\n        fill: color\n      } : {})\n    }; // These are non-mark title config that need to be hardcoded\n\n    const nonMark = { ...(anchor ? {\n        anchor\n      } : {}),\n      ...(frame ? {\n        frame\n      } : {}),\n      ...(offset ? {\n        offset\n      } : {}),\n      ...(orient ? {\n        orient\n      } : {})\n    }; // subtitle part can stay in config.title since header titles do not use subtitle\n\n    const subtitle = { ...(subtitleColor ? {\n        subtitleColor\n      } : {}),\n      ...(subtitleFont ? {\n        subtitleFont\n      } : {}),\n      ...(subtitleFontSize ? {\n        subtitleFontSize\n      } : {}),\n      ...(subtitleFontStyle ? {\n        subtitleFontStyle\n      } : {}),\n      ...(subtitleFontWeight ? {\n        subtitleFontWeight\n      } : {}),\n      ...(subtitleLineHeight ? {\n        subtitleLineHeight\n      } : {}),\n      ...(subtitlePadding ? {\n        subtitlePadding\n      } : {})\n    };\n    const subtitleMarkConfig = pick(titleMarkConfig, ['align', 'baseline', 'dx', 'dy', 'limit']);\n    return {\n      titleMarkConfig,\n      subtitleMarkConfig,\n      nonMark,\n      subtitle\n    };\n  }\n  function isText(v) {\n    return isString(v) || isArray(v) && isString(v[0]);\n  }\n\n  function signalOrValueRefWithCondition(val) {\n    const condition = isArray(val.condition) ? val.condition.map(conditionalSignalRefOrValue) : conditionalSignalRefOrValue(val.condition);\n    return { ...signalRefOrValue(val),\n      condition\n    };\n  }\n  function signalRefOrValue(value) {\n    if (isExprRef(value)) {\n      const {\n        expr,\n        ...rest\n      } = value;\n      return {\n        signal: expr,\n        ...rest\n      };\n    }\n\n    return value;\n  }\n  function conditionalSignalRefOrValue(value) {\n    if (isExprRef(value)) {\n      const {\n        expr,\n        ...rest\n      } = value;\n      return {\n        signal: expr,\n        ...rest\n      };\n    }\n\n    return value;\n  }\n  function signalOrValueRef(value) {\n    if (isExprRef(value)) {\n      const {\n        expr,\n        ...rest\n      } = value;\n      return {\n        signal: expr,\n        ...rest\n      };\n    }\n\n    if (isSignalRef(value)) {\n      return value;\n    }\n\n    return value !== undefined ? {\n      value\n    } : undefined;\n  }\n  function exprFromValueOrSignalRef(ref) {\n    if (isSignalRef(ref)) {\n      return ref.signal;\n    }\n\n    return $(ref.value);\n  }\n  function signalOrStringValue(v) {\n    if (isSignalRef(v)) {\n      return v.signal;\n    }\n\n    return v == null ? null : $(v);\n  }\n  function applyMarkConfig(e, model, propsList) {\n    for (const property of propsList) {\n      const value = getMarkConfig(property, model.markDef, model.config);\n\n      if (value !== undefined) {\n        e[property] = signalOrValueRef(value);\n      }\n    }\n\n    return e;\n  }\n  function getStyles(mark) {\n    var _mark$style;\n\n    return [].concat(mark.type, (_mark$style = mark.style) !== null && _mark$style !== void 0 ? _mark$style : []);\n  }\n  function getMarkPropOrConfig(channel, mark, config, opt = {}) {\n    const {\n      vgChannel,\n      ignoreVgConfig\n    } = opt;\n\n    if (vgChannel && mark[vgChannel] !== undefined) {\n      return mark[vgChannel];\n    } else if (mark[channel] !== undefined) {\n      return mark[channel];\n    } else if (ignoreVgConfig && (!vgChannel || vgChannel === channel)) {\n      return undefined;\n    }\n\n    return getMarkConfig(channel, mark, config, opt);\n  }\n  /**\n   * Return property value from style or mark specific config property if exists.\n   * Otherwise, return general mark specific config.\n   */\n\n  function getMarkConfig(channel, mark, config, {\n    vgChannel\n  } = {}) {\n    return getFirstDefined( // style config has highest precedence\n    vgChannel ? getMarkStyleConfig(channel, mark, config.style) : undefined, getMarkStyleConfig(channel, mark, config.style), // then mark-specific config\n    vgChannel ? config[mark.type][vgChannel] : undefined, config[mark.type][channel], // Need to cast because MarkDef doesn't perfectly match with AnyMarkConfig, but if the type isn't available, we'll get nothing here, which is fine\n    // If there is vgChannel, skip vl channel.\n    // For example, vl size for text is vg fontSize, but config.mark.size is only for point size.\n    vgChannel ? config.mark[vgChannel] : config.mark[channel] // Need to cast for the same reason as above\n    );\n  }\n  function getMarkStyleConfig(prop, mark, styleConfigIndex) {\n    return getStyleConfig(prop, getStyles(mark), styleConfigIndex);\n  }\n  function getStyleConfig(p, styles, styleConfigIndex) {\n    styles = array(styles);\n    let value;\n\n    for (const style of styles) {\n      const styleConfig = styleConfigIndex[style];\n\n      if (styleConfig && styleConfig[p] !== undefined) {\n        value = styleConfig[p];\n      }\n    }\n\n    return value;\n  }\n  /**\n   * Return Vega sort parameters (tuple of field and order).\n   */\n\n  function sortParams(orderDef, fieldRefOption) {\n    return array(orderDef).reduce((s, orderChannelDef) => {\n      var _orderChannelDef$sort;\n\n      s.field.push(vgField(orderChannelDef, fieldRefOption));\n      s.order.push((_orderChannelDef$sort = orderChannelDef.sort) !== null && _orderChannelDef$sort !== void 0 ? _orderChannelDef$sort : 'ascending');\n      return s;\n    }, {\n      field: [],\n      order: []\n    });\n  }\n  function mergeTitleFieldDefs(f1, f2) {\n    const merged = [...f1];\n    f2.forEach(fdToMerge => {\n      for (const fieldDef1 of merged) {\n        // If already exists, no need to append to merged array\n        if (deepEqual(fieldDef1, fdToMerge)) {\n          return;\n        }\n      }\n\n      merged.push(fdToMerge);\n    });\n    return merged;\n  }\n  function mergeTitle(title1, title2) {\n    if (deepEqual(title1, title2) || !title2) {\n      // if titles are the same or title2 is falsy\n      return title1;\n    } else if (!title1) {\n      // if title1 is falsy\n      return title2;\n    } else {\n      return [...array(title1), ...array(title2)].join(', ');\n    }\n  }\n  function mergeTitleComponent(v1, v2) {\n    const v1Val = v1.value;\n    const v2Val = v2.value;\n\n    if (v1Val == null || v2Val === null) {\n      return {\n        explicit: v1.explicit,\n        value: null\n      };\n    } else if ((isText(v1Val) || isSignalRef(v1Val)) && (isText(v2Val) || isSignalRef(v2Val))) {\n      return {\n        explicit: v1.explicit,\n        value: mergeTitle(v1Val, v2Val)\n      };\n    } else if (isText(v1Val) || isSignalRef(v1Val)) {\n      return {\n        explicit: v1.explicit,\n        value: v1Val\n      };\n    } else if (isText(v2Val) || isSignalRef(v2Val)) {\n      return {\n        explicit: v1.explicit,\n        value: v2Val\n      };\n    } else if (!isText(v1Val) && !isSignalRef(v1Val) && !isText(v2Val) && !isSignalRef(v2Val)) {\n      return {\n        explicit: v1.explicit,\n        value: mergeTitleFieldDefs(v1Val, v2Val)\n      };\n    }\n    /* istanbul ignore next: Condition should not happen -- only for warning in development. */\n\n\n    throw new Error('It should never reach here');\n  }\n\n  /**\n   * Base interface for a unit (single-view) specification.\n   */\n\n  /**\n   * A unit specification without any shortcut/expansion syntax.\n   */\n\n  /**\n   * A unit specification, which can contain either [primitive marks or composite marks](https://vega.github.io/vega-lite/docs/mark.html#types).\n   */\n\n  /**\n   * Unit spec that can have a composite mark and row or column channels (shorthand for a facet spec).\n   */\n  function isUnitSpec(spec) {\n    return 'mark' in spec;\n  }\n\n  class CompositeMarkNormalizer {\n    constructor(name, run) {\n      this.name = name;\n      this.run = run;\n    }\n\n    hasMatchingType(spec) {\n      if (isUnitSpec(spec)) {\n        return getMarkType(spec.mark) === this.name;\n      }\n\n      return false;\n    }\n\n  }\n\n  function channelHasField(encoding, channel) {\n    const channelDef = encoding && encoding[channel];\n\n    if (channelDef) {\n      if (isArray(channelDef)) {\n        return some(channelDef, fieldDef => !!fieldDef.field);\n      } else {\n        return isFieldDef(channelDef) || hasConditionalFieldDef(channelDef);\n      }\n    }\n\n    return false;\n  }\n  function isAggregate(encoding) {\n    return some(CHANNELS, channel => {\n      if (channelHasField(encoding, channel)) {\n        const channelDef = encoding[channel];\n\n        if (isArray(channelDef)) {\n          return some(channelDef, fieldDef => !!fieldDef.aggregate);\n        } else {\n          const fieldDef = getFieldDef(channelDef);\n          return fieldDef && !!fieldDef.aggregate;\n        }\n      }\n\n      return false;\n    });\n  }\n  function extractTransformsFromEncoding(oldEncoding, config) {\n    const groupby = [];\n    const bins = [];\n    const timeUnits = [];\n    const aggregate = [];\n    const encoding = {};\n    forEach(oldEncoding, (channelDef, channel) => {\n      // Extract potential embedded transformations along with remaining properties\n      if (isFieldDef(channelDef)) {\n        const {\n          field,\n          aggregate: aggOp,\n          bin,\n          timeUnit,\n          ...remaining\n        } = channelDef;\n\n        if (aggOp || timeUnit || bin) {\n          const guide = getGuide(channelDef);\n          const isTitleDefined = guide && guide.title;\n          let newField = vgField(channelDef, {\n            forAs: true\n          });\n          const newFieldDef = { // Only add title if it doesn't exist\n            ...(isTitleDefined ? [] : {\n              title: title(channelDef, config, {\n                allowDisabling: true\n              })\n            }),\n            ...remaining,\n            // Always overwrite field\n            field: newField\n          };\n\n          if (aggOp) {\n            let op;\n\n            if (isArgmaxDef(aggOp)) {\n              op = 'argmax';\n              newField = vgField({\n                op: 'argmax',\n                field: aggOp.argmax\n              }, {\n                forAs: true\n              });\n              newFieldDef.field = \"\".concat(newField, \".\").concat(field);\n            } else if (isArgminDef(aggOp)) {\n              op = 'argmin';\n              newField = vgField({\n                op: 'argmin',\n                field: aggOp.argmin\n              }, {\n                forAs: true\n              });\n              newFieldDef.field = \"\".concat(newField, \".\").concat(field);\n            } else if (aggOp !== 'boxplot' && aggOp !== 'errorbar' && aggOp !== 'errorband') {\n              op = aggOp;\n            }\n\n            if (op) {\n              const aggregateEntry = {\n                op,\n                as: newField\n              };\n\n              if (field) {\n                aggregateEntry.field = field;\n              }\n\n              aggregate.push(aggregateEntry);\n            }\n          } else {\n            groupby.push(newField);\n\n            if (isTypedFieldDef(channelDef) && isBinning(bin)) {\n              bins.push({\n                bin,\n                field,\n                as: newField\n              }); // Add additional groupbys for range and end of bins\n\n              groupby.push(vgField(channelDef, {\n                binSuffix: 'end'\n              }));\n\n              if (binRequiresRange(channelDef, channel)) {\n                groupby.push(vgField(channelDef, {\n                  binSuffix: 'range'\n                }));\n              } // Create accompanying 'x2' or 'y2' field if channel is 'x' or 'y' respectively\n\n\n              if (isXorY(channel)) {\n                const secondaryChannel = {\n                  field: newField + '_end'\n                };\n                encoding[channel + '2'] = secondaryChannel;\n              }\n\n              newFieldDef.bin = 'binned';\n\n              if (!isSecondaryRangeChannel(channel)) {\n                newFieldDef['type'] = QUANTITATIVE;\n              }\n            } else if (timeUnit) {\n              timeUnits.push({\n                timeUnit,\n                field,\n                as: newField\n              }); // define the format type for later compilation\n\n              const formatType = isTypedFieldDef(channelDef) && channelDef.type !== TEMPORAL && 'time';\n\n              if (formatType) {\n                if (channel === TEXT || channel === TOOLTIP) {\n                  newFieldDef['formatType'] = formatType;\n                } else if (isNonPositionScaleChannel(channel)) {\n                  newFieldDef['legend'] = {\n                    formatType,\n                    ...newFieldDef['legend']\n                  };\n                } else if (isXorY(channel)) {\n                  newFieldDef['axis'] = {\n                    formatType,\n                    ...newFieldDef['axis']\n                  };\n                }\n              }\n            }\n          } // now the field should refer to post-transformed field instead\n\n\n          encoding[channel] = newFieldDef;\n        } else {\n          groupby.push(field);\n          encoding[channel] = oldEncoding[channel];\n        }\n      } else {\n        // For value def / signal ref / datum def, just copy\n        encoding[channel] = oldEncoding[channel];\n      }\n    });\n    return {\n      bins,\n      timeUnits,\n      aggregate,\n      groupby,\n      encoding\n    };\n  }\n  function markChannelCompatible(encoding, channel, mark) {\n    const markSupported = supportMark(channel, mark);\n\n    if (!markSupported) {\n      return false;\n    } else if (markSupported === 'binned') {\n      const primaryFieldDef = encoding[channel === X2 ? X : Y]; // circle, point, square and tick only support x2/y2 when their corresponding x/y fieldDef\n      // has \"binned\" data and thus need x2/y2 to specify the bin-end field.\n\n      if (isFieldDef(primaryFieldDef) && isFieldDef(encoding[channel]) && isBinned(primaryFieldDef.bin)) {\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n    return true;\n  }\n  function initEncoding(encoding, mark, filled, config) {\n    return keys(encoding).reduce((normalizedEncoding, channel) => {\n      if (!isChannel(channel)) {\n        // Drop invalid channel\n        warn(invalidEncodingChannel(channel));\n        return normalizedEncoding;\n      }\n\n      const channelDef = encoding[channel];\n\n      if (channel === 'angle' && mark === 'arc' && !encoding.theta) {\n        warn(REPLACE_ANGLE_WITH_THETA);\n        channel = THETA;\n      }\n\n      if (!markChannelCompatible(encoding, channel, mark)) {\n        // Drop unsupported channel\n        warn(incompatibleChannel(channel, mark));\n        return normalizedEncoding;\n      } // Drop line's size if the field is aggregated.\n\n\n      if (channel === SIZE && mark === 'line') {\n        const fieldDef = getFieldDef(encoding[channel]);\n\n        if (fieldDef === null || fieldDef === void 0 ? void 0 : fieldDef.aggregate) {\n          warn(LINE_WITH_VARYING_SIZE);\n          return normalizedEncoding;\n        }\n      } // Drop color if either fill or stroke is specified\n\n\n      if (channel === COLOR && (filled ? 'fill' in encoding : 'stroke' in encoding)) {\n        warn(droppingColor('encoding', {\n          fill: 'fill' in encoding,\n          stroke: 'stroke' in encoding\n        }));\n        return normalizedEncoding;\n      }\n\n      if (channel === DETAIL || channel === ORDER && !isArray(channelDef) && !isValueDef(channelDef) || channel === TOOLTIP && isArray(channelDef)) {\n        if (channelDef) {\n          // Array of fieldDefs for detail channel (or production rule)\n          normalizedEncoding[channel] = array(channelDef).reduce((defs, fieldDef) => {\n            if (!isFieldDef(fieldDef)) {\n              warn(emptyFieldDef(fieldDef, channel));\n            } else {\n              defs.push(initFieldDef(fieldDef, channel));\n            }\n\n            return defs;\n          }, []);\n        }\n      } else {\n        if (channel === TOOLTIP && channelDef === null) {\n          // Preserve null so we can use it to disable tooltip\n          normalizedEncoding[channel] = null;\n        } else if (!isFieldDef(channelDef) && !isDatumDef(channelDef) && !isValueDef(channelDef) && !isConditionalDef(channelDef) && !isSignalRef(channelDef)) {\n          warn(emptyFieldDef(channelDef, channel));\n          return normalizedEncoding;\n        }\n\n        normalizedEncoding[channel] = initChannelDef(channelDef, channel, config);\n      }\n\n      return normalizedEncoding;\n    }, {});\n  }\n  /**\n   * For composite marks, we have to call initChannelDef during init so we can infer types earlier.\n   */\n\n  function normalizeEncoding(encoding, config) {\n    const normalizedEncoding = {};\n\n    for (const channel of keys(encoding)) {\n      const newChannelDef = initChannelDef(encoding[channel], channel, config, {\n        compositeMark: true\n      });\n      normalizedEncoding[channel] = newChannelDef;\n    }\n\n    return normalizedEncoding;\n  }\n  function fieldDefs(encoding) {\n    const arr = [];\n\n    for (const channel of keys(encoding)) {\n      if (channelHasField(encoding, channel)) {\n        const channelDef = encoding[channel];\n        const channelDefArray = array(channelDef);\n\n        for (const def of channelDefArray) {\n          if (isFieldDef(def)) {\n            arr.push(def);\n          } else if (hasConditionalFieldDef(def)) {\n            arr.push(def.condition);\n          }\n        }\n      }\n    }\n\n    return arr;\n  }\n  function forEach(mapping, f, thisArg) {\n    if (!mapping) {\n      return;\n    }\n\n    for (const channel of keys(mapping)) {\n      const el = mapping[channel];\n\n      if (isArray(el)) {\n        for (const channelDef of el) {\n          f.call(thisArg, channelDef, channel);\n        }\n      } else {\n        f.call(thisArg, el, channel);\n      }\n    }\n  }\n  function reduce(mapping, f, init, thisArg) {\n    if (!mapping) {\n      return init;\n    }\n\n    return keys(mapping).reduce((r, channel) => {\n      const map = mapping[channel];\n\n      if (isArray(map)) {\n        return map.reduce((r1, channelDef) => {\n          return f.call(thisArg, r1, channelDef, channel);\n        }, r);\n      } else {\n        return f.call(thisArg, r, map, channel);\n      }\n    }, init);\n  }\n  /**\n   * Returns list of path grouping fields for the given encoding\n   */\n\n  function pathGroupingFields(mark, encoding) {\n    return keys(encoding).reduce((details, channel) => {\n      switch (channel) {\n        // x, y, x2, y2, lat, long, lat1, long2, order, tooltip, href, aria label, cursor should not cause lines to group\n        case X:\n        case Y:\n        case HREF:\n        case DESCRIPTION:\n        case URL:\n        case X2:\n        case Y2:\n        case THETA:\n        case THETA2:\n        case RADIUS:\n        case RADIUS2: // falls through\n\n        case LATITUDE:\n        case LONGITUDE:\n        case LATITUDE2:\n        case LONGITUDE2: // TODO: case 'cursor':\n        // text, shape, shouldn't be a part of line/trail/area [falls through]\n\n        case TEXT:\n        case SHAPE:\n        case ANGLE: // falls through\n        // tooltip fields should not be added to group by [falls through]\n\n        case TOOLTIP:\n          return details;\n\n        case ORDER:\n          // order should not group line / trail\n          if (mark === 'line' || mark === 'trail') {\n            return details;\n          }\n\n        // but order should group area for stacking (falls through)\n\n        case DETAIL:\n        case KEY:\n          {\n            const channelDef = encoding[channel];\n\n            if (isArray(channelDef) || isFieldDef(channelDef)) {\n              for (const fieldDef of array(channelDef)) {\n                if (!fieldDef.aggregate) {\n                  details.push(vgField(fieldDef, {}));\n                }\n              }\n            }\n\n            return details;\n          }\n\n        case SIZE:\n          if (mark === 'trail') {\n            // For trail, size should not group trail lines.\n            return details;\n          }\n\n        // For line, size should group lines.\n        // falls through\n\n        case COLOR:\n        case FILL:\n        case STROKE:\n        case OPACITY:\n        case FILLOPACITY:\n        case STROKEOPACITY:\n        case STROKEDASH:\n        case STROKEWIDTH:\n          {\n            // TODO strokeDashOffset:\n            // falls through\n            const fieldDef = getFieldDef(encoding[channel]);\n\n            if (fieldDef && !fieldDef.aggregate) {\n              details.push(vgField(fieldDef, {}));\n            }\n\n            return details;\n          }\n      }\n    }, []);\n  }\n\n  function filterTooltipWithAggregatedField(oldEncoding) {\n    const {\n      tooltip,\n      ...filteredEncoding\n    } = oldEncoding;\n\n    if (!tooltip) {\n      return {\n        filteredEncoding\n      };\n    }\n\n    let customTooltipWithAggregatedField;\n    let customTooltipWithoutAggregatedField;\n\n    if (isArray(tooltip)) {\n      for (const t of tooltip) {\n        if (t.aggregate) {\n          if (!customTooltipWithAggregatedField) {\n            customTooltipWithAggregatedField = [];\n          }\n\n          customTooltipWithAggregatedField.push(t);\n        } else {\n          if (!customTooltipWithoutAggregatedField) {\n            customTooltipWithoutAggregatedField = [];\n          }\n\n          customTooltipWithoutAggregatedField.push(t);\n        }\n      }\n\n      if (customTooltipWithAggregatedField) {\n        filteredEncoding.tooltip = customTooltipWithAggregatedField;\n      }\n    } else {\n      if (tooltip['aggregate']) {\n        filteredEncoding.tooltip = tooltip;\n      } else {\n        customTooltipWithoutAggregatedField = tooltip;\n      }\n    }\n\n    if (isArray(customTooltipWithoutAggregatedField) && customTooltipWithoutAggregatedField.length === 1) {\n      customTooltipWithoutAggregatedField = customTooltipWithoutAggregatedField[0];\n    }\n\n    return {\n      customTooltipWithoutAggregatedField,\n      filteredEncoding\n    };\n  }\n  function getCompositeMarkTooltip(tooltipSummary, continuousAxisChannelDef, encodingWithoutContinuousAxis, withFieldName = true) {\n    if ('tooltip' in encodingWithoutContinuousAxis) {\n      return {\n        tooltip: encodingWithoutContinuousAxis.tooltip\n      };\n    }\n\n    const fiveSummaryTooltip = tooltipSummary.map(({\n      fieldPrefix,\n      titlePrefix\n    }) => {\n      const mainTitle = withFieldName ? \" of \".concat(getTitle(continuousAxisChannelDef)) : '';\n      return {\n        field: fieldPrefix + continuousAxisChannelDef.field,\n        type: continuousAxisChannelDef.type,\n        title: isSignalRef(titlePrefix) ? {\n          signal: titlePrefix + \"\\\"\".concat(escape(mainTitle), \"\\\"\")\n        } : titlePrefix + mainTitle\n      };\n    });\n    const tooltipFieldDefs = fieldDefs(encodingWithoutContinuousAxis).map(toStringFieldDef);\n    return {\n      tooltip: [...fiveSummaryTooltip, // need to cast because TextFieldDef supports fewer types of bin\n      ...unique(tooltipFieldDefs, hash)]\n    };\n  }\n  function getTitle(continuousAxisChannelDef) {\n    const {\n      title,\n      field\n    } = continuousAxisChannelDef;\n    return getFirstDefined(title, field);\n  }\n  function makeCompositeAggregatePartFactory(compositeMarkDef, continuousAxis, continuousAxisChannelDef, sharedEncoding, compositeMarkConfig) {\n    const {\n      scale,\n      axis\n    } = continuousAxisChannelDef;\n    return ({\n      partName,\n      mark,\n      positionPrefix,\n      endPositionPrefix = undefined,\n      extraEncoding = {}\n    }) => {\n      const title = getTitle(continuousAxisChannelDef);\n      return partLayerMixins(compositeMarkDef, partName, compositeMarkConfig, {\n        mark,\n        // TODO better remove this method and just have mark as a parameter of the method\n        encoding: {\n          [continuousAxis]: {\n            field: positionPrefix + '_' + continuousAxisChannelDef.field,\n            type: continuousAxisChannelDef.type,\n            ...(title !== undefined ? {\n              title\n            } : {}),\n            ...(scale !== undefined ? {\n              scale\n            } : {}),\n            ...(axis !== undefined ? {\n              axis\n            } : {})\n          },\n          ...(isString(endPositionPrefix) ? {\n            [continuousAxis + '2']: {\n              field: endPositionPrefix + '_' + continuousAxisChannelDef.field\n            }\n          } : {}),\n          ...sharedEncoding,\n          ...extraEncoding\n        }\n      });\n    };\n  }\n  function partLayerMixins(markDef, part, compositeMarkConfig, partBaseSpec) {\n    const {\n      clip,\n      color,\n      opacity\n    } = markDef;\n    const mark = markDef.type;\n\n    if (markDef[part] || markDef[part] === undefined && compositeMarkConfig[part]) {\n      return [{ ...partBaseSpec,\n        mark: { ...compositeMarkConfig[part],\n          ...(clip ? {\n            clip\n          } : {}),\n          ...(color ? {\n            color\n          } : {}),\n          ...(opacity ? {\n            opacity\n          } : {}),\n          ...(isMarkDef(partBaseSpec.mark) ? partBaseSpec.mark : {\n            type: partBaseSpec.mark\n          }),\n          style: \"\".concat(mark, \"-\").concat(part),\n          ...(isBoolean(markDef[part]) ? {} : markDef[part])\n        }\n      }];\n    }\n\n    return [];\n  }\n  function compositeMarkContinuousAxis(spec, orient, compositeMark) {\n    const {\n      encoding\n    } = spec;\n    const continuousAxis = orient === 'vertical' ? 'y' : 'x';\n    const continuousAxisChannelDef = encoding[continuousAxis]; // Safe to cast because if x is not continuous fielddef, the orient would not be horizontal.\n\n    const continuousAxisChannelDef2 = encoding[continuousAxis + '2'];\n    const continuousAxisChannelDefError = encoding[continuousAxis + 'Error'];\n    const continuousAxisChannelDefError2 = encoding[continuousAxis + 'Error2'];\n    return {\n      continuousAxisChannelDef: filterAggregateFromChannelDef(continuousAxisChannelDef, compositeMark),\n      continuousAxisChannelDef2: filterAggregateFromChannelDef(continuousAxisChannelDef2, compositeMark),\n      continuousAxisChannelDefError: filterAggregateFromChannelDef(continuousAxisChannelDefError, compositeMark),\n      continuousAxisChannelDefError2: filterAggregateFromChannelDef(continuousAxisChannelDefError2, compositeMark),\n      continuousAxis\n    };\n  }\n\n  function filterAggregateFromChannelDef(continuousAxisChannelDef, compositeMark) {\n    if (continuousAxisChannelDef && continuousAxisChannelDef.aggregate) {\n      const {\n        aggregate,\n        ...continuousAxisWithoutAggregate\n      } = continuousAxisChannelDef;\n\n      if (aggregate !== compositeMark) {\n        warn(errorBarContinuousAxisHasCustomizedAggregate(aggregate, compositeMark));\n      }\n\n      return continuousAxisWithoutAggregate;\n    } else {\n      return continuousAxisChannelDef;\n    }\n  }\n\n  function compositeMarkOrient(spec, compositeMark) {\n    const {\n      mark,\n      encoding\n    } = spec;\n    const {\n      x,\n      y\n    } = encoding;\n\n    if (isMarkDef(mark) && mark.orient) {\n      return mark.orient;\n    }\n\n    if (isContinuousFieldOrDatumDef(x)) {\n      // x is continuous\n      if (isContinuousFieldOrDatumDef(y)) {\n        // both x and y are continuous\n        const xAggregate = isFieldDef(x) && x.aggregate;\n        const yAggregate = isFieldDef(y) && y.aggregate;\n\n        if (!xAggregate && yAggregate === compositeMark) {\n          return 'vertical';\n        } else if (!yAggregate && xAggregate === compositeMark) {\n          return 'horizontal';\n        } else if (xAggregate === compositeMark && yAggregate === compositeMark) {\n          throw new Error('Both x and y cannot have aggregate');\n        } else {\n          if (isFieldOrDatumDefForTimeFormat(y) && !isFieldOrDatumDefForTimeFormat(x)) {\n            // y is temporal but x is not\n            return 'horizontal';\n          } // default orientation for two continuous\n\n\n          return 'vertical';\n        }\n      }\n\n      return 'horizontal';\n    } else if (isContinuousFieldOrDatumDef(y)) {\n      // y is continuous but x is not\n      return 'vertical';\n    } else {\n      // Neither x nor y is continuous.\n      throw new Error(\"Need a valid continuous axis for \".concat(compositeMark, \"s\"));\n    }\n  }\n\n  const BOXPLOT = 'boxplot';\n  const BOXPLOT_PARTS = ['box', 'median', 'outliers', 'rule', 'ticks'];\n  const boxPlotNormalizer = new CompositeMarkNormalizer(BOXPLOT, normalizeBoxPlot);\n  function getBoxPlotType(extent) {\n    if (isNumber(extent)) {\n      return 'tukey';\n    } // Ham: If we ever want to, we could add another extent syntax `{kIQR: number}` for the original [Q1-k*IQR, Q3+k*IQR] whisker and call this boxPlotType = `kIQR`. However, I'm not exposing this for now.\n\n\n    return extent;\n  }\n  function normalizeBoxPlot(spec, {\n    config\n  }) {\n    var _markDef$extent;\n\n    // Need to initEncoding first so we can infer type\n    spec = { ...spec,\n      encoding: normalizeEncoding(spec.encoding, config)\n    };\n    const {\n      mark,\n      encoding: _encoding,\n      selection,\n      projection: _p,\n      ...outerSpec\n    } = spec;\n    const markDef = isMarkDef(mark) ? mark : {\n      type: mark\n    }; // TODO(https://github.com/vega/vega-lite/issues/3702): add selection support\n\n    if (selection) {\n      warn(selectionNotSupported('boxplot'));\n    }\n\n    const extent = (_markDef$extent = markDef.extent) !== null && _markDef$extent !== void 0 ? _markDef$extent : config.boxplot.extent;\n    const sizeValue = getMarkPropOrConfig('size', markDef, // TODO: https://github.com/vega/vega-lite/issues/6245\n    config);\n    const boxPlotType = getBoxPlotType(extent);\n    const {\n      bins,\n      timeUnits,\n      transform,\n      continuousAxisChannelDef,\n      continuousAxis,\n      groupby,\n      aggregate,\n      encodingWithoutContinuousAxis,\n      ticksOrient,\n      boxOrient,\n      customTooltipWithoutAggregatedField\n    } = boxParams(spec, extent, config);\n    const {\n      color,\n      size,\n      ...encodingWithoutSizeColorAndContinuousAxis\n    } = encodingWithoutContinuousAxis;\n\n    const makeBoxPlotPart = sharedEncoding => {\n      return makeCompositeAggregatePartFactory(markDef, continuousAxis, continuousAxisChannelDef, sharedEncoding, config.boxplot);\n    };\n\n    const makeBoxPlotExtent = makeBoxPlotPart(encodingWithoutSizeColorAndContinuousAxis);\n    const makeBoxPlotBox = makeBoxPlotPart(encodingWithoutContinuousAxis);\n    const makeBoxPlotMidTick = makeBoxPlotPart({ ...encodingWithoutSizeColorAndContinuousAxis,\n      ...(size ? {\n        size\n      } : {})\n    });\n    const fiveSummaryTooltipEncoding = getCompositeMarkTooltip([{\n      fieldPrefix: boxPlotType === 'min-max' ? 'upper_whisker_' : 'max_',\n      titlePrefix: 'Max'\n    }, {\n      fieldPrefix: 'upper_box_',\n      titlePrefix: 'Q3'\n    }, {\n      fieldPrefix: 'mid_box_',\n      titlePrefix: 'Median'\n    }, {\n      fieldPrefix: 'lower_box_',\n      titlePrefix: 'Q1'\n    }, {\n      fieldPrefix: boxPlotType === 'min-max' ? 'lower_whisker_' : 'min_',\n      titlePrefix: 'Min'\n    }], continuousAxisChannelDef, encodingWithoutContinuousAxis); // ## Whisker Layers\n\n    const endTick = {\n      type: 'tick',\n      color: 'black',\n      opacity: 1,\n      orient: ticksOrient,\n      invalid: null,\n      aria: false\n    };\n    const whiskerTooltipEncoding = boxPlotType === 'min-max' ? fiveSummaryTooltipEncoding // for min-max, show five-summary tooltip for whisker\n    : // for tukey / k-IQR, just show upper/lower-whisker\n    getCompositeMarkTooltip([{\n      fieldPrefix: 'upper_whisker_',\n      titlePrefix: 'Upper Whisker'\n    }, {\n      fieldPrefix: 'lower_whisker_',\n      titlePrefix: 'Lower Whisker'\n    }], continuousAxisChannelDef, encodingWithoutContinuousAxis);\n    const whiskerLayers = [...makeBoxPlotExtent({\n      partName: 'rule',\n      mark: {\n        type: 'rule',\n        invalid: null,\n        aria: false\n      },\n      positionPrefix: 'lower_whisker',\n      endPositionPrefix: 'lower_box',\n      extraEncoding: whiskerTooltipEncoding\n    }), ...makeBoxPlotExtent({\n      partName: 'rule',\n      mark: {\n        type: 'rule',\n        invalid: null,\n        aria: false\n      },\n      positionPrefix: 'upper_box',\n      endPositionPrefix: 'upper_whisker',\n      extraEncoding: whiskerTooltipEncoding\n    }), ...makeBoxPlotExtent({\n      partName: 'ticks',\n      mark: endTick,\n      positionPrefix: 'lower_whisker',\n      extraEncoding: whiskerTooltipEncoding\n    }), ...makeBoxPlotExtent({\n      partName: 'ticks',\n      mark: endTick,\n      positionPrefix: 'upper_whisker',\n      extraEncoding: whiskerTooltipEncoding\n    })]; // ## Box Layers\n    // TODO: support hiding certain mark parts\n\n    const boxLayers = [...(boxPlotType !== 'tukey' ? whiskerLayers : []), ...makeBoxPlotBox({\n      partName: 'box',\n      mark: {\n        type: 'bar',\n        ...(sizeValue ? {\n          size: sizeValue\n        } : {}),\n        orient: boxOrient,\n        invalid: null,\n        ariaRoleDescription: 'box'\n      },\n      positionPrefix: 'lower_box',\n      endPositionPrefix: 'upper_box',\n      extraEncoding: fiveSummaryTooltipEncoding\n    }), ...makeBoxPlotMidTick({\n      partName: 'median',\n      mark: {\n        type: 'tick',\n        invalid: null,\n        ...(isObject(config.boxplot.median) && config.boxplot.median.color ? {\n          color: config.boxplot.median.color\n        } : {}),\n        ...(sizeValue ? {\n          size: sizeValue\n        } : {}),\n        orient: ticksOrient,\n        aria: false\n      },\n      positionPrefix: 'mid_box',\n      extraEncoding: fiveSummaryTooltipEncoding\n    })];\n\n    if (boxPlotType === 'min-max') {\n      var _outerSpec$transform;\n\n      return { ...outerSpec,\n        transform: ((_outerSpec$transform = outerSpec.transform) !== null && _outerSpec$transform !== void 0 ? _outerSpec$transform : []).concat(transform),\n        layer: boxLayers\n      };\n    } // Tukey Box Plot\n\n\n    const lowerBoxExpr = \"datum[\\\"lower_box_\".concat(continuousAxisChannelDef.field, \"\\\"]\");\n    const upperBoxExpr = \"datum[\\\"upper_box_\".concat(continuousAxisChannelDef.field, \"\\\"]\");\n    const iqrExpr = \"(\".concat(upperBoxExpr, \" - \").concat(lowerBoxExpr, \")\");\n    const lowerWhiskerExpr = \"\".concat(lowerBoxExpr, \" - \").concat(extent, \" * \").concat(iqrExpr);\n    const upperWhiskerExpr = \"\".concat(upperBoxExpr, \" + \").concat(extent, \" * \").concat(iqrExpr);\n    const fieldExpr = \"datum[\\\"\".concat(continuousAxisChannelDef.field, \"\\\"]\");\n    const joinaggregateTransform = {\n      joinaggregate: boxParamsQuartiles(continuousAxisChannelDef.field),\n      groupby\n    };\n    const filteredWhiskerSpec = {\n      transform: [{\n        filter: \"(\".concat(lowerWhiskerExpr, \" <= \").concat(fieldExpr, \") && (\").concat(fieldExpr, \" <= \").concat(upperWhiskerExpr, \")\")\n      }, {\n        aggregate: [{\n          op: 'min',\n          field: continuousAxisChannelDef.field,\n          as: 'lower_whisker_' + continuousAxisChannelDef.field\n        }, {\n          op: 'max',\n          field: continuousAxisChannelDef.field,\n          as: 'upper_whisker_' + continuousAxisChannelDef.field\n        }, // preserve lower_box / upper_box\n        {\n          op: 'min',\n          field: 'lower_box_' + continuousAxisChannelDef.field,\n          as: 'lower_box_' + continuousAxisChannelDef.field\n        }, {\n          op: 'max',\n          field: 'upper_box_' + continuousAxisChannelDef.field,\n          as: 'upper_box_' + continuousAxisChannelDef.field\n        }, ...aggregate],\n        groupby\n      }],\n      layer: whiskerLayers\n    };\n    const {\n      tooltip,\n      ...encodingWithoutSizeColorContinuousAxisAndTooltip\n    } = encodingWithoutSizeColorAndContinuousAxis;\n    const {\n      scale,\n      axis\n    } = continuousAxisChannelDef;\n    const title = getTitle(continuousAxisChannelDef);\n    const axisWithoutTitle = omit(axis, ['title']);\n    const outlierLayersMixins = partLayerMixins(markDef, 'outliers', config.boxplot, {\n      transform: [{\n        filter: \"(\".concat(fieldExpr, \" < \").concat(lowerWhiskerExpr, \") || (\").concat(fieldExpr, \" > \").concat(upperWhiskerExpr, \")\")\n      }],\n      mark: 'point',\n      encoding: {\n        [continuousAxis]: {\n          field: continuousAxisChannelDef.field,\n          type: continuousAxisChannelDef.type,\n          ...(title !== undefined ? {\n            title\n          } : {}),\n          ...(scale !== undefined ? {\n            scale\n          } : {}),\n          // add axis without title since we already added the title above\n          ...(isEmpty(axisWithoutTitle) ? {} : {\n            axis: axisWithoutTitle\n          })\n        },\n        ...encodingWithoutSizeColorContinuousAxisAndTooltip,\n        ...(color ? {\n          color\n        } : {}),\n        ...(customTooltipWithoutAggregatedField ? {\n          tooltip: customTooltipWithoutAggregatedField\n        } : {})\n      }\n    })[0];\n    let filteredLayersMixins;\n    const filteredLayersMixinsTransforms = [...bins, ...timeUnits, joinaggregateTransform];\n\n    if (outlierLayersMixins) {\n      filteredLayersMixins = {\n        transform: filteredLayersMixinsTransforms,\n        layer: [outlierLayersMixins, filteredWhiskerSpec]\n      };\n    } else {\n      filteredLayersMixins = filteredWhiskerSpec;\n      filteredLayersMixins.transform.unshift(...filteredLayersMixinsTransforms);\n    }\n\n    return { ...outerSpec,\n      layer: [filteredLayersMixins, {\n        // boxplot\n        transform,\n        layer: boxLayers\n      }]\n    };\n  }\n\n  function boxParamsQuartiles(continousAxisField) {\n    return [{\n      op: 'q1',\n      field: continousAxisField,\n      as: 'lower_box_' + continousAxisField\n    }, {\n      op: 'q3',\n      field: continousAxisField,\n      as: 'upper_box_' + continousAxisField\n    }];\n  }\n\n  function boxParams(spec, extent, config) {\n    const orient = compositeMarkOrient(spec, BOXPLOT);\n    const {\n      continuousAxisChannelDef,\n      continuousAxis\n    } = compositeMarkContinuousAxis(spec, orient, BOXPLOT);\n    const continuousFieldName = continuousAxisChannelDef.field;\n    const boxPlotType = getBoxPlotType(extent);\n    const boxplotSpecificAggregate = [...boxParamsQuartiles(continuousFieldName), {\n      op: 'median',\n      field: continuousFieldName,\n      as: 'mid_box_' + continuousFieldName\n    }, {\n      op: 'min',\n      field: continuousFieldName,\n      as: (boxPlotType === 'min-max' ? 'lower_whisker_' : 'min_') + continuousFieldName\n    }, {\n      op: 'max',\n      field: continuousFieldName,\n      as: (boxPlotType === 'min-max' ? 'upper_whisker_' : 'max_') + continuousFieldName\n    }];\n    const postAggregateCalculates = boxPlotType === 'min-max' || boxPlotType === 'tukey' ? [] : [// This is for the  original k-IQR, which we do not expose\n    {\n      calculate: \"datum[\\\"upper_box_\".concat(continuousFieldName, \"\\\"] - datum[\\\"lower_box_\").concat(continuousFieldName, \"\\\"]\"),\n      as: 'iqr_' + continuousFieldName\n    }, {\n      calculate: \"min(datum[\\\"upper_box_\".concat(continuousFieldName, \"\\\"] + datum[\\\"iqr_\").concat(continuousFieldName, \"\\\"] * \").concat(extent, \", datum[\\\"max_\").concat(continuousFieldName, \"\\\"])\"),\n      as: 'upper_whisker_' + continuousFieldName\n    }, {\n      calculate: \"max(datum[\\\"lower_box_\".concat(continuousFieldName, \"\\\"] - datum[\\\"iqr_\").concat(continuousFieldName, \"\\\"] * \").concat(extent, \", datum[\\\"min_\").concat(continuousFieldName, \"\\\"])\"),\n      as: 'lower_whisker_' + continuousFieldName\n    }];\n    const {\n      [continuousAxis]: oldContinuousAxisChannelDef,\n      ...oldEncodingWithoutContinuousAxis\n    } = spec.encoding;\n    const {\n      customTooltipWithoutAggregatedField,\n      filteredEncoding\n    } = filterTooltipWithAggregatedField(oldEncodingWithoutContinuousAxis);\n    const {\n      bins,\n      timeUnits,\n      aggregate,\n      groupby,\n      encoding: encodingWithoutContinuousAxis\n    } = extractTransformsFromEncoding(filteredEncoding, config);\n    const ticksOrient = orient === 'vertical' ? 'horizontal' : 'vertical';\n    const boxOrient = orient;\n    const transform = [...bins, ...timeUnits, {\n      aggregate: [...aggregate, ...boxplotSpecificAggregate],\n      groupby\n    }, ...postAggregateCalculates];\n    return {\n      bins,\n      timeUnits,\n      transform,\n      groupby,\n      aggregate,\n      continuousAxisChannelDef,\n      continuousAxis,\n      encodingWithoutContinuousAxis,\n      ticksOrient,\n      boxOrient,\n      customTooltipWithoutAggregatedField\n    };\n  }\n\n  const ERRORBAR = 'errorbar';\n  const ERRORBAR_PARTS = ['ticks', 'rule'];\n  const errorBarNormalizer = new CompositeMarkNormalizer(ERRORBAR, normalizeErrorBar);\n  function normalizeErrorBar(spec, {\n    config\n  }) {\n    // Need to initEncoding first so we can infer type\n    spec = { ...spec,\n      encoding: normalizeEncoding(spec.encoding, config)\n    };\n    const {\n      transform,\n      continuousAxisChannelDef,\n      continuousAxis,\n      encodingWithoutContinuousAxis,\n      ticksOrient,\n      markDef,\n      outerSpec,\n      tooltipEncoding\n    } = errorBarParams(spec, ERRORBAR, config);\n    delete encodingWithoutContinuousAxis['size'];\n    const makeErrorBarPart = makeCompositeAggregatePartFactory(markDef, continuousAxis, continuousAxisChannelDef, encodingWithoutContinuousAxis, config.errorbar);\n    const thickness = markDef.thickness;\n    const size = markDef.size;\n    const tick = {\n      type: 'tick',\n      orient: ticksOrient,\n      aria: false,\n      ...(thickness !== undefined ? {\n        thickness\n      } : {}),\n      ...(size !== undefined ? {\n        size\n      } : {})\n    };\n    const layer = [...makeErrorBarPart({\n      partName: 'ticks',\n      mark: tick,\n      positionPrefix: 'lower',\n      extraEncoding: tooltipEncoding\n    }), ...makeErrorBarPart({\n      partName: 'ticks',\n      mark: tick,\n      positionPrefix: 'upper',\n      extraEncoding: tooltipEncoding\n    }), ...makeErrorBarPart({\n      partName: 'rule',\n      mark: {\n        type: 'rule',\n        ariaRoleDescription: 'errorbar',\n        ...(thickness !== undefined ? {\n          size: thickness\n        } : {})\n      },\n      positionPrefix: 'lower',\n      endPositionPrefix: 'upper',\n      extraEncoding: tooltipEncoding\n    })];\n    return { ...outerSpec,\n      transform,\n      ...(layer.length > 1 ? {\n        layer\n      } : { ...layer[0]\n      })\n    };\n  }\n\n  function errorBarOrientAndInputType(spec, compositeMark) {\n    const {\n      encoding\n    } = spec;\n\n    if (errorBarIsInputTypeRaw(encoding)) {\n      return {\n        orient: compositeMarkOrient(spec, compositeMark),\n        inputType: 'raw'\n      };\n    }\n\n    const isTypeAggregatedUpperLower = errorBarIsInputTypeAggregatedUpperLower(encoding);\n    const isTypeAggregatedError = errorBarIsInputTypeAggregatedError(encoding);\n    const x = encoding.x;\n    const y = encoding.y;\n\n    if (isTypeAggregatedUpperLower) {\n      // type is aggregated-upper-lower\n      if (isTypeAggregatedError) {\n        throw new Error(\"\".concat(compositeMark, \" cannot be both type aggregated-upper-lower and aggregated-error\"));\n      }\n\n      const x2 = encoding.x2;\n      const y2 = encoding.y2;\n\n      if (isFieldOrDatumDef(x2) && isFieldOrDatumDef(y2)) {\n        // having both x, x2 and y, y2\n        throw new Error(\"\".concat(compositeMark, \" cannot have both x2 and y2\"));\n      } else if (isFieldOrDatumDef(x2)) {\n        if (isContinuousFieldOrDatumDef(x)) {\n          // having x, x2 quantitative and field y, y2 are not specified\n          return {\n            orient: 'horizontal',\n            inputType: 'aggregated-upper-lower'\n          };\n        } else {\n          // having x, x2 that are not both quantitative\n          throw new Error(\"Both x and x2 have to be quantitative in \".concat(compositeMark));\n        }\n      } else if (isFieldOrDatumDef(y2)) {\n        // y2 is a FieldDef\n        if (isContinuousFieldOrDatumDef(y)) {\n          // having y, y2 quantitative and field x, x2 are not specified\n          return {\n            orient: 'vertical',\n            inputType: 'aggregated-upper-lower'\n          };\n        } else {\n          // having y, y2 that are not both quantitative\n          throw new Error(\"Both y and y2 have to be quantitative in \".concat(compositeMark));\n        }\n      }\n\n      throw new Error('No ranged axis');\n    } else {\n      // type is aggregated-error\n      const xError = encoding.xError;\n      const xError2 = encoding.xError2;\n      const yError = encoding.yError;\n      const yError2 = encoding.yError2;\n\n      if (isFieldOrDatumDef(xError2) && !isFieldOrDatumDef(xError)) {\n        // having xError2 without xError\n        throw new Error(\"\".concat(compositeMark, \" cannot have xError2 without xError\"));\n      }\n\n      if (isFieldOrDatumDef(yError2) && !isFieldOrDatumDef(yError)) {\n        // having yError2 without yError\n        throw new Error(\"\".concat(compositeMark, \" cannot have yError2 without yError\"));\n      }\n\n      if (isFieldOrDatumDef(xError) && isFieldOrDatumDef(yError)) {\n        // having both xError and yError\n        throw new Error(\"\".concat(compositeMark, \" cannot have both xError and yError with both are quantiative\"));\n      } else if (isFieldOrDatumDef(xError)) {\n        if (isContinuousFieldOrDatumDef(x)) {\n          // having x and xError that are all quantitative\n          return {\n            orient: 'horizontal',\n            inputType: 'aggregated-error'\n          };\n        } else {\n          // having x, xError, and xError2 that are not all quantitative\n          throw new Error('All x, xError, and xError2 (if exist) have to be quantitative');\n        }\n      } else if (isFieldOrDatumDef(yError)) {\n        if (isContinuousFieldOrDatumDef(y)) {\n          // having y and yError that are all quantitative\n          return {\n            orient: 'vertical',\n            inputType: 'aggregated-error'\n          };\n        } else {\n          // having y, yError, and yError2 that are not all quantitative\n          throw new Error('All y, yError, and yError2 (if exist) have to be quantitative');\n        }\n      }\n\n      throw new Error('No ranged axis');\n    }\n  }\n\n  function errorBarIsInputTypeRaw(encoding) {\n    return (isFieldOrDatumDef(encoding.x) || isFieldOrDatumDef(encoding.y)) && !isFieldOrDatumDef(encoding.x2) && !isFieldOrDatumDef(encoding.y2) && !isFieldOrDatumDef(encoding.xError) && !isFieldOrDatumDef(encoding.xError2) && !isFieldOrDatumDef(encoding.yError) && !isFieldOrDatumDef(encoding.yError2);\n  }\n\n  function errorBarIsInputTypeAggregatedUpperLower(encoding) {\n    return isFieldOrDatumDef(encoding.x2) || isFieldOrDatumDef(encoding.y2);\n  }\n\n  function errorBarIsInputTypeAggregatedError(encoding) {\n    return isFieldOrDatumDef(encoding.xError) || isFieldOrDatumDef(encoding.xError2) || isFieldOrDatumDef(encoding.yError) || isFieldOrDatumDef(encoding.yError2);\n  }\n\n  function errorBarParams(spec, compositeMark, config) {\n    var _outerSpec$transform;\n\n    // TODO: use selection\n    const {\n      mark,\n      encoding,\n      selection,\n      projection: _p,\n      ...outerSpec\n    } = spec;\n    const markDef = isMarkDef(mark) ? mark : {\n      type: mark\n    }; // TODO(https://github.com/vega/vega-lite/issues/3702): add selection support\n\n    if (selection) {\n      warn(selectionNotSupported(compositeMark));\n    }\n\n    const {\n      orient,\n      inputType\n    } = errorBarOrientAndInputType(spec, compositeMark);\n    const {\n      continuousAxisChannelDef,\n      continuousAxisChannelDef2,\n      continuousAxisChannelDefError,\n      continuousAxisChannelDefError2,\n      continuousAxis\n    } = compositeMarkContinuousAxis(spec, orient, compositeMark);\n    const {\n      errorBarSpecificAggregate,\n      postAggregateCalculates,\n      tooltipSummary,\n      tooltipTitleWithFieldName\n    } = errorBarAggregationAndCalculation(markDef, continuousAxisChannelDef, continuousAxisChannelDef2, continuousAxisChannelDefError, continuousAxisChannelDefError2, inputType, compositeMark, config);\n    const {\n      [continuousAxis]: oldContinuousAxisChannelDef,\n      [continuousAxis === 'x' ? 'x2' : 'y2']: oldContinuousAxisChannelDef2,\n      [continuousAxis === 'x' ? 'xError' : 'yError']: oldContinuousAxisChannelDefError,\n      [continuousAxis === 'x' ? 'xError2' : 'yError2']: oldContinuousAxisChannelDefError2,\n      ...oldEncodingWithoutContinuousAxis\n    } = encoding;\n    const {\n      bins,\n      timeUnits,\n      aggregate: oldAggregate,\n      groupby: oldGroupBy,\n      encoding: encodingWithoutContinuousAxis\n    } = extractTransformsFromEncoding(oldEncodingWithoutContinuousAxis, config);\n    const aggregate = [...oldAggregate, ...errorBarSpecificAggregate];\n    const groupby = inputType !== 'raw' ? [] : oldGroupBy;\n    const tooltipEncoding = getCompositeMarkTooltip(tooltipSummary, continuousAxisChannelDef, encodingWithoutContinuousAxis, tooltipTitleWithFieldName);\n    return {\n      transform: [...((_outerSpec$transform = outerSpec.transform) !== null && _outerSpec$transform !== void 0 ? _outerSpec$transform : []), ...bins, ...timeUnits, ...(aggregate.length === 0 ? [] : [{\n        aggregate,\n        groupby\n      }]), ...postAggregateCalculates],\n      groupby,\n      continuousAxisChannelDef,\n      continuousAxis,\n      encodingWithoutContinuousAxis,\n      ticksOrient: orient === 'vertical' ? 'horizontal' : 'vertical',\n      markDef,\n      outerSpec,\n      tooltipEncoding\n    };\n  }\n\n  function errorBarAggregationAndCalculation(markDef, continuousAxisChannelDef, continuousAxisChannelDef2, continuousAxisChannelDefError, continuousAxisChannelDefError2, inputType, compositeMark, config) {\n    let errorBarSpecificAggregate = [];\n    let postAggregateCalculates = [];\n    const continuousFieldName = continuousAxisChannelDef.field;\n    let tooltipSummary;\n    let tooltipTitleWithFieldName = false;\n\n    if (inputType === 'raw') {\n      const center = markDef.center ? markDef.center : markDef.extent ? markDef.extent === 'iqr' ? 'median' : 'mean' : config.errorbar.center;\n      const extent = markDef.extent ? markDef.extent : center === 'mean' ? 'stderr' : 'iqr';\n\n      if (center === 'median' !== (extent === 'iqr')) {\n        warn(errorBarCenterIsUsedWithWrongExtent(center, extent, compositeMark));\n      }\n\n      if (extent === 'stderr' || extent === 'stdev') {\n        errorBarSpecificAggregate = [{\n          op: extent,\n          field: continuousFieldName,\n          as: 'extent_' + continuousFieldName\n        }, {\n          op: center,\n          field: continuousFieldName,\n          as: 'center_' + continuousFieldName\n        }];\n        postAggregateCalculates = [{\n          calculate: \"datum[\\\"center_\".concat(continuousFieldName, \"\\\"] + datum[\\\"extent_\").concat(continuousFieldName, \"\\\"]\"),\n          as: 'upper_' + continuousFieldName\n        }, {\n          calculate: \"datum[\\\"center_\".concat(continuousFieldName, \"\\\"] - datum[\\\"extent_\").concat(continuousFieldName, \"\\\"]\"),\n          as: 'lower_' + continuousFieldName\n        }];\n        tooltipSummary = [{\n          fieldPrefix: 'center_',\n          titlePrefix: titleCase(center)\n        }, {\n          fieldPrefix: 'upper_',\n          titlePrefix: getTitlePrefix(center, extent, '+')\n        }, {\n          fieldPrefix: 'lower_',\n          titlePrefix: getTitlePrefix(center, extent, '-')\n        }];\n        tooltipTitleWithFieldName = true;\n      } else {\n        let centerOp;\n        let lowerExtentOp;\n        let upperExtentOp;\n\n        if (extent === 'ci') {\n          centerOp = 'mean';\n          lowerExtentOp = 'ci0';\n          upperExtentOp = 'ci1';\n        } else {\n          centerOp = 'median';\n          lowerExtentOp = 'q1';\n          upperExtentOp = 'q3';\n        }\n\n        errorBarSpecificAggregate = [{\n          op: lowerExtentOp,\n          field: continuousFieldName,\n          as: 'lower_' + continuousFieldName\n        }, {\n          op: upperExtentOp,\n          field: continuousFieldName,\n          as: 'upper_' + continuousFieldName\n        }, {\n          op: centerOp,\n          field: continuousFieldName,\n          as: 'center_' + continuousFieldName\n        }];\n        tooltipSummary = [{\n          fieldPrefix: 'upper_',\n          titlePrefix: title({\n            field: continuousFieldName,\n            aggregate: upperExtentOp,\n            type: 'quantitative'\n          }, config, {\n            allowDisabling: false\n          })\n        }, {\n          fieldPrefix: 'lower_',\n          titlePrefix: title({\n            field: continuousFieldName,\n            aggregate: lowerExtentOp,\n            type: 'quantitative'\n          }, config, {\n            allowDisabling: false\n          })\n        }, {\n          fieldPrefix: 'center_',\n          titlePrefix: title({\n            field: continuousFieldName,\n            aggregate: centerOp,\n            type: 'quantitative'\n          }, config, {\n            allowDisabling: false\n          })\n        }];\n      }\n    } else {\n      if (markDef.center || markDef.extent) {\n        warn(errorBarCenterAndExtentAreNotNeeded(markDef.center, markDef.extent));\n      }\n\n      if (inputType === 'aggregated-upper-lower') {\n        tooltipSummary = [];\n        postAggregateCalculates = [{\n          calculate: \"datum[\\\"\".concat(continuousAxisChannelDef2.field, \"\\\"]\"),\n          as: 'upper_' + continuousFieldName\n        }, {\n          calculate: \"datum[\\\"\".concat(continuousFieldName, \"\\\"]\"),\n          as: 'lower_' + continuousFieldName\n        }];\n      } else if (inputType === 'aggregated-error') {\n        tooltipSummary = [{\n          fieldPrefix: '',\n          titlePrefix: continuousFieldName\n        }];\n        postAggregateCalculates = [{\n          calculate: \"datum[\\\"\".concat(continuousFieldName, \"\\\"] + datum[\\\"\").concat(continuousAxisChannelDefError.field, \"\\\"]\"),\n          as: 'upper_' + continuousFieldName\n        }];\n\n        if (continuousAxisChannelDefError2) {\n          postAggregateCalculates.push({\n            calculate: \"datum[\\\"\".concat(continuousFieldName, \"\\\"] + datum[\\\"\").concat(continuousAxisChannelDefError2.field, \"\\\"]\"),\n            as: 'lower_' + continuousFieldName\n          });\n        } else {\n          postAggregateCalculates.push({\n            calculate: \"datum[\\\"\".concat(continuousFieldName, \"\\\"] - datum[\\\"\").concat(continuousAxisChannelDefError.field, \"\\\"]\"),\n            as: 'lower_' + continuousFieldName\n          });\n        }\n      }\n\n      for (const postAggregateCalculate of postAggregateCalculates) {\n        tooltipSummary.push({\n          fieldPrefix: postAggregateCalculate.as.substring(0, 6),\n          titlePrefix: replaceAll(replaceAll(postAggregateCalculate.calculate, 'datum[\"', ''), '\"]', '')\n        });\n      }\n    }\n\n    return {\n      postAggregateCalculates,\n      errorBarSpecificAggregate,\n      tooltipSummary,\n      tooltipTitleWithFieldName\n    };\n  }\n\n  function getTitlePrefix(center, extent, operation) {\n    return titleCase(center) + ' ' + operation + ' ' + extent;\n  }\n\n  const ERRORBAND = 'errorband';\n  const ERRORBAND_PARTS = ['band', 'borders'];\n  const errorBandNormalizer = new CompositeMarkNormalizer(ERRORBAND, normalizeErrorBand);\n  function normalizeErrorBand(spec, {\n    config\n  }) {\n    // Need to initEncoding first so we can infer type\n    spec = { ...spec,\n      encoding: normalizeEncoding(spec.encoding, config)\n    };\n    const {\n      transform,\n      continuousAxisChannelDef,\n      continuousAxis,\n      encodingWithoutContinuousAxis,\n      markDef,\n      outerSpec,\n      tooltipEncoding\n    } = errorBarParams(spec, ERRORBAND, config);\n    const errorBandDef = markDef;\n    const makeErrorBandPart = makeCompositeAggregatePartFactory(errorBandDef, continuousAxis, continuousAxisChannelDef, encodingWithoutContinuousAxis, config.errorband);\n    const is2D = spec.encoding.x !== undefined && spec.encoding.y !== undefined;\n    let bandMark = {\n      type: is2D ? 'area' : 'rect'\n    };\n    let bordersMark = {\n      type: is2D ? 'line' : 'rule'\n    };\n    const interpolate = { ...(errorBandDef.interpolate ? {\n        interpolate: errorBandDef.interpolate\n      } : {}),\n      ...(errorBandDef.tension && errorBandDef.interpolate ? {\n        tension: errorBandDef.tension\n      } : {})\n    };\n\n    if (is2D) {\n      bandMark = { ...bandMark,\n        ...interpolate,\n        ariaRoleDescription: 'errorband'\n      };\n      bordersMark = { ...bordersMark,\n        ...interpolate,\n        aria: false\n      };\n    } else if (errorBandDef.interpolate) {\n      warn(errorBand1DNotSupport('interpolate'));\n    } else if (errorBandDef.tension) {\n      warn(errorBand1DNotSupport('tension'));\n    }\n\n    return { ...outerSpec,\n      transform,\n      layer: [...makeErrorBandPart({\n        partName: 'band',\n        mark: bandMark,\n        positionPrefix: 'lower',\n        endPositionPrefix: 'upper',\n        extraEncoding: tooltipEncoding\n      }), ...makeErrorBandPart({\n        partName: 'borders',\n        mark: bordersMark,\n        positionPrefix: 'lower',\n        extraEncoding: tooltipEncoding\n      }), ...makeErrorBandPart({\n        partName: 'borders',\n        mark: bordersMark,\n        positionPrefix: 'upper',\n        extraEncoding: tooltipEncoding\n      })]\n    };\n  }\n\n  /**\n   * Registry index for all composite mark's normalizer\n   */\n  const compositeMarkRegistry = {};\n  function add(mark, run, parts) {\n    const normalizer = new CompositeMarkNormalizer(mark, run);\n    compositeMarkRegistry[mark] = {\n      normalizer,\n      parts\n    };\n  }\n  function getAllCompositeMarks() {\n    return keys(compositeMarkRegistry);\n  }\n  add(BOXPLOT, normalizeBoxPlot, BOXPLOT_PARTS);\n  add(ERRORBAR, normalizeErrorBar, ERRORBAR_PARTS);\n  add(ERRORBAND, normalizeErrorBand, ERRORBAND_PARTS);\n\n  const VL_ONLY_LEGEND_CONFIG = ['gradientHorizontalMaxLength', 'gradientHorizontalMinLength', 'gradientVerticalMaxLength', 'gradientVerticalMinLength', 'unselectedOpacity'];\n\n  const HEADER_TITLE_PROPERTIES_MAP = {\n    titleAlign: 'align',\n    titleAnchor: 'anchor',\n    titleAngle: 'angle',\n    titleBaseline: 'baseline',\n    titleColor: 'color',\n    titleFont: 'font',\n    titleFontSize: 'fontSize',\n    titleFontStyle: 'fontStyle',\n    titleFontWeight: 'fontWeight',\n    titleLimit: 'limit',\n    titleLineHeight: 'lineHeight',\n    titleOrient: 'orient',\n    titlePadding: 'offset'\n  };\n  const HEADER_LABEL_PROPERTIES_MAP = {\n    labelAlign: 'align',\n    labelAnchor: 'anchor',\n    labelAngle: 'angle',\n    labelBaseline: 'baseline',\n    labelColor: 'color',\n    labelFont: 'font',\n    labelFontSize: 'fontSize',\n    labelFontStyle: 'fontStyle',\n    labelFontWeight: 'fontWeight',\n    labelLimit: 'limit',\n    labelLineHeight: 'lineHeight',\n    labelOrient: 'orient',\n    labelPadding: 'offset'\n  };\n  const HEADER_TITLE_PROPERTIES = keys(HEADER_TITLE_PROPERTIES_MAP);\n  const HEADER_LABEL_PROPERTIES = keys(HEADER_LABEL_PROPERTIES_MAP);\n  const HEADER_CONFIGS_INDEX = {\n    header: 1,\n    headerRow: 1,\n    headerColumn: 1,\n    headerFacet: 1\n  };\n  const HEADER_CONFIGS = keys(HEADER_CONFIGS_INDEX);\n\n  const LEGEND_SCALE_CHANNELS = ['size', 'shape', 'fill', 'stroke', 'strokeDash', 'strokeWidth', 'opacity'];\n  const defaultLegendConfig = {\n    gradientHorizontalMaxLength: 200,\n    gradientHorizontalMinLength: 100,\n    gradientVerticalMaxLength: 200,\n    gradientVerticalMinLength: 64,\n    // This is Vega's minimum.\n    unselectedOpacity: 0.35\n  };\n  const COMMON_LEGEND_PROPERTY_INDEX = {\n    aria: 1,\n    clipHeight: 1,\n    columnPadding: 1,\n    columns: 1,\n    cornerRadius: 1,\n    description: 1,\n    direction: 1,\n    fillColor: 1,\n    format: 1,\n    formatType: 1,\n    gradientLength: 1,\n    gradientOpacity: 1,\n    gradientStrokeColor: 1,\n    gradientStrokeWidth: 1,\n    gradientThickness: 1,\n    gridAlign: 1,\n    labelAlign: 1,\n    labelBaseline: 1,\n    labelColor: 1,\n    labelFont: 1,\n    labelFontSize: 1,\n    labelFontStyle: 1,\n    labelFontWeight: 1,\n    labelLimit: 1,\n    labelOffset: 1,\n    labelOpacity: 1,\n    labelOverlap: 1,\n    labelPadding: 1,\n    labelSeparation: 1,\n    legendX: 1,\n    legendY: 1,\n    offset: 1,\n    orient: 1,\n    padding: 1,\n    rowPadding: 1,\n    strokeColor: 1,\n    symbolDash: 1,\n    symbolDashOffset: 1,\n    symbolFillColor: 1,\n    symbolLimit: 1,\n    symbolOffset: 1,\n    symbolOpacity: 1,\n    symbolSize: 1,\n    symbolStrokeColor: 1,\n    symbolStrokeWidth: 1,\n    symbolType: 1,\n    tickCount: 1,\n    tickMinStep: 1,\n    title: 1,\n    titleAlign: 1,\n    titleAnchor: 1,\n    titleBaseline: 1,\n    titleColor: 1,\n    titleFont: 1,\n    titleFontSize: 1,\n    titleFontStyle: 1,\n    titleFontWeight: 1,\n    titleLimit: 1,\n    titleLineHeight: 1,\n    titleOpacity: 1,\n    titleOrient: 1,\n    titlePadding: 1,\n    type: 1,\n    values: 1,\n    zindex: 1\n  };\n\n  function assembleParameterSignals(params) {\n    const signals = [];\n\n    for (const param of params || []) {\n      const {\n        expr,\n        bind,\n        ...rest\n      } = param;\n\n      if (bind && expr) {\n        // Vega's InitSignal -- apply expr to \"init\"\n        const signal = { ...rest,\n          bind,\n          init: expr\n        };\n        signals.push(signal);\n      } else {\n        const signal = { ...rest,\n          ...(expr ? {\n            update: expr\n          } : {}),\n          ...(bind ? {\n            bind\n          } : {})\n        };\n        signals.push(signal);\n      }\n    }\n\n    return signals;\n  }\n\n  const SELECTION_ID = '_vgsid_';\n  const defaultConfig = {\n    single: {\n      on: 'click',\n      fields: [SELECTION_ID],\n      resolve: 'global',\n      empty: 'all',\n      clear: 'dblclick'\n    },\n    multi: {\n      on: 'click',\n      fields: [SELECTION_ID],\n      toggle: 'event.shiftKey',\n      resolve: 'global',\n      empty: 'all',\n      clear: 'dblclick'\n    },\n    interval: {\n      on: '[mousedown, window:mouseup] > window:mousemove!',\n      encodings: ['x', 'y'],\n      translate: '[mousedown, window:mouseup] > window:mousemove!',\n      zoom: 'wheel!',\n      mark: {\n        fill: '#333',\n        fillOpacity: 0.125,\n        stroke: 'white'\n      },\n      resolve: 'global',\n      clear: 'dblclick'\n    }\n  };\n  function isLegendBinding(bind) {\n    return !!bind && (bind === 'legend' || !!bind.legend);\n  }\n  function isLegendStreamBinding(bind) {\n    return isLegendBinding(bind) && isObject(bind);\n  }\n\n  /**\n   * Base layout mixins for V/HConcatSpec, which should not have RowCol<T> generic fo its property.\n   */\n\n  /**\n   * Base interface for a generalized concatenation specification.\n   */\n\n  /**\n   * Base interface for a vertical concatenation specification.\n   */\n\n  /**\n   * Base interface for a horizontal concatenation specification.\n   */\n\n  /** A concat spec without any shortcut/expansion syntax */\n  function isAnyConcatSpec(spec) {\n    return isVConcatSpec(spec) || isHConcatSpec(spec) || isConcatSpec(spec);\n  }\n  function isConcatSpec(spec) {\n    return 'concat' in spec;\n  }\n  function isVConcatSpec(spec) {\n    return 'vconcat' in spec;\n  }\n  function isHConcatSpec(spec) {\n    return 'hconcat' in spec;\n  }\n\n  function isFitType(autoSizeType) {\n    return autoSizeType === 'fit' || autoSizeType === 'fit-x' || autoSizeType === 'fit-y';\n  }\n  function getFitType(sizeType) {\n    return sizeType ? \"fit-\".concat(getPositionScaleChannel(sizeType)) : 'fit';\n  }\n  const TOP_LEVEL_PROPERTIES = ['background', 'padding' // We do not include \"autosize\" here as it is supported by only unit and layer specs and thus need to be normalized\n  ];\n  function extractTopLevelProperties(t, includeParams) {\n    const o = {};\n\n    for (const p of TOP_LEVEL_PROPERTIES) {\n      if (t && t[p] !== undefined) {\n        o[p] = signalRefOrValue(t[p]);\n      }\n    }\n\n    if (includeParams) {\n      o.params = t.params;\n    }\n\n    return o;\n  }\n\n  /**\n   * Common properties for all types of specification\n   */\n\n  function isStep(size) {\n    return isObject(size) && size['step'] !== undefined;\n  } // TODO(https://github.com/vega/vega-lite/issues/2503): Make this generic so we can support some form of top-down sizing.\n\n  /**\n   * Common properties for specifying width and height of unit and layer specifications.\n   */\n\n  function isFrameMixins(o) {\n    return o['view'] || o['width'] || o['height'];\n  }\n  const DEFAULT_SPACING = 20;\n  const COMPOSITION_LAYOUT_INDEX = {\n    align: 1,\n    bounds: 1,\n    center: 1,\n    columns: 1,\n    spacing: 1\n  };\n  const COMPOSITION_LAYOUT_PROPERTIES = keys(COMPOSITION_LAYOUT_INDEX);\n  function extractCompositionLayout(spec, specType, config) {\n    const compositionConfig = config[specType];\n    const layout = {}; // Apply config first\n\n    const {\n      spacing: spacingConfig,\n      columns\n    } = compositionConfig;\n\n    if (spacingConfig !== undefined) {\n      layout.spacing = spacingConfig;\n    }\n\n    if (columns !== undefined) {\n      if (isFacetSpec(spec) && !isFacetMapping(spec.facet) || isConcatSpec(spec)) {\n        layout.columns = columns;\n      }\n    }\n\n    if (isVConcatSpec(spec)) {\n      layout.columns = 1;\n    } // Then copy properties from the spec\n\n\n    for (const prop of COMPOSITION_LAYOUT_PROPERTIES) {\n      if (spec[prop] !== undefined) {\n        if (prop === 'spacing') {\n          var _spacing$row, _spacing$column;\n\n          const spacing = spec[prop];\n          layout[prop] = isNumber(spacing) ? spacing : {\n            row: (_spacing$row = spacing.row) !== null && _spacing$row !== void 0 ? _spacing$row : spacingConfig,\n            column: (_spacing$column = spacing.column) !== null && _spacing$column !== void 0 ? _spacing$column : spacingConfig\n          };\n        } else {\n          layout[prop] = spec[prop];\n        }\n      }\n    }\n\n    return layout;\n  }\n\n  function getViewConfigContinuousSize(viewConfig, channel) {\n    var _viewConfig$channel;\n\n    return (_viewConfig$channel = viewConfig[channel]) !== null && _viewConfig$channel !== void 0 ? _viewConfig$channel : viewConfig[channel === 'width' ? 'continuousWidth' : 'continuousHeight']; // get width/height for backwards compatibility\n  }\n  function getViewConfigDiscreteStep(viewConfig, channel) {\n    const size = getViewConfigDiscreteSize(viewConfig, channel);\n    return isStep(size) ? size.step : DEFAULT_STEP;\n  }\n  function getViewConfigDiscreteSize(viewConfig, channel) {\n    var _viewConfig$channel2;\n\n    const size = (_viewConfig$channel2 = viewConfig[channel]) !== null && _viewConfig$channel2 !== void 0 ? _viewConfig$channel2 : viewConfig[channel === 'width' ? 'discreteWidth' : 'discreteHeight']; // get width/height for backwards compatibility\n\n    return getFirstDefined(size, {\n      step: viewConfig.step\n    });\n  }\n  const DEFAULT_STEP = 20;\n  const defaultViewConfig = {\n    continuousWidth: 200,\n    continuousHeight: 200,\n    step: DEFAULT_STEP\n  };\n  const defaultConfig$1 = {\n    background: 'white',\n    padding: 5,\n    timeFormat: '%b %d, %Y',\n    countTitle: 'Count of Records',\n    view: defaultViewConfig,\n    mark: defaultMarkConfig,\n    arc: {},\n    area: {},\n    bar: defaultBarConfig,\n    circle: {},\n    geoshape: {},\n    image: {},\n    line: {},\n    point: {},\n    rect: defaultRectConfig,\n    rule: {\n      color: 'black'\n    },\n    // Need this to override default color in mark config\n    square: {},\n    text: {\n      color: 'black'\n    },\n    // Need this to override default color in mark config\n    tick: defaultTickConfig,\n    trail: {},\n    boxplot: {\n      size: 14,\n      extent: 1.5,\n      box: {},\n      median: {\n        color: 'white'\n      },\n      outliers: {},\n      rule: {},\n      ticks: null\n    },\n    errorbar: {\n      center: 'mean',\n      rule: true,\n      ticks: false\n    },\n    errorband: {\n      band: {\n        opacity: 0.3\n      },\n      borders: false\n    },\n    scale: defaultScaleConfig,\n    projection: {},\n    legend: defaultLegendConfig,\n    header: {\n      titlePadding: 10,\n      labelPadding: 10\n    },\n    headerColumn: {},\n    headerRow: {},\n    headerFacet: {},\n    selection: defaultConfig,\n    style: {},\n    title: {},\n    facet: {\n      spacing: DEFAULT_SPACING\n    },\n    concat: {\n      spacing: DEFAULT_SPACING\n    }\n  }; // Tableau10 color palette, copied from `vegaScale.scheme('tableau10')`\n\n  const tab10 = ['#4c78a8', '#f58518', '#e45756', '#72b7b2', '#54a24b', '#eeca3b', '#b279a2', '#ff9da6', '#9d755d', '#bab0ac'];\n  const DEFAULT_FONT_SIZE = {\n    text: 11,\n    guideLabel: 10,\n    guideTitle: 11,\n    groupTitle: 13,\n    groupSubtitle: 12\n  };\n  const DEFAULT_COLOR = {\n    blue: tab10[0],\n    orange: tab10[1],\n    red: tab10[2],\n    teal: tab10[3],\n    green: tab10[4],\n    yellow: tab10[5],\n    purple: tab10[6],\n    pink: tab10[7],\n    brown: tab10[8],\n    gray0: '#000',\n    gray1: '#111',\n    gray2: '#222',\n    gray3: '#333',\n    gray4: '#444',\n    gray5: '#555',\n    gray6: '#666',\n    gray7: '#777',\n    gray8: '#888',\n    gray9: '#999',\n    gray10: '#aaa',\n    gray11: '#bbb',\n    gray12: '#ccc',\n    gray13: '#ddd',\n    gray14: '#eee',\n    gray15: '#fff'\n  };\n  function colorSignalConfig(color = {}) {\n    return {\n      signals: [{\n        name: 'color',\n        value: isObject(color) ? { ...DEFAULT_COLOR,\n          ...color\n        } : DEFAULT_COLOR\n      }],\n      mark: {\n        color: {\n          signal: 'color.blue'\n        }\n      },\n      rule: {\n        color: {\n          signal: 'color.gray0'\n        }\n      },\n      text: {\n        color: {\n          signal: 'color.gray0'\n        }\n      },\n      style: {\n        'guide-label': {\n          fill: {\n            signal: 'color.gray0'\n          }\n        },\n        'guide-title': {\n          fill: {\n            signal: 'color.gray0'\n          }\n        },\n        'group-title': {\n          fill: {\n            signal: 'color.gray0'\n          }\n        },\n        'group-subtitle': {\n          fill: {\n            signal: 'color.gray0'\n          }\n        },\n        cell: {\n          stroke: {\n            signal: 'color.gray8'\n          }\n        }\n      },\n      axis: {\n        domainColor: {\n          signal: 'color.gray13'\n        },\n        gridColor: {\n          signal: 'color.gray8'\n        },\n        tickColor: {\n          signal: 'color.gray13'\n        }\n      },\n      range: {\n        category: [{\n          signal: 'color.blue'\n        }, {\n          signal: 'color.orange'\n        }, {\n          signal: 'color.red'\n        }, {\n          signal: 'color.teal'\n        }, {\n          signal: 'color.green'\n        }, {\n          signal: 'color.yellow'\n        }, {\n          signal: 'color.purple'\n        }, {\n          signal: 'color.pink'\n        }, {\n          signal: 'color.brown'\n        }, {\n          signal: 'color.grey8'\n        }]\n      }\n    };\n  }\n  function fontSizeSignalConfig(fontSize) {\n    return {\n      signals: [{\n        name: 'fontSize',\n        value: isObject(fontSize) ? { ...DEFAULT_FONT_SIZE,\n          ...fontSize\n        } : DEFAULT_FONT_SIZE\n      }],\n      text: {\n        fontSize: {\n          signal: 'fontSize.text'\n        }\n      },\n      style: {\n        'guide-label': {\n          fontSize: {\n            signal: 'fontSize.guideLabel'\n          }\n        },\n        'guide-title': {\n          fontSize: {\n            signal: 'fontSize.guideTitle'\n          }\n        },\n        'group-title': {\n          fontSize: {\n            signal: 'fontSize.groupTitle'\n          }\n        },\n        'group-subtitle': {\n          fontSize: {\n            signal: 'fontSize.groupSubtitle'\n          }\n        }\n      }\n    };\n  }\n  function fontConfig(font) {\n    return {\n      text: {\n        font\n      },\n      style: {\n        'guide-label': {\n          font\n        },\n        'guide-title': {\n          font\n        },\n        'group-title': {\n          font\n        },\n        'group-subtitle': {\n          font\n        }\n      }\n    };\n  }\n\n  function getAxisConfigInternal(axisConfig) {\n    const props = keys(axisConfig || {});\n    const axisConfigInternal = {};\n\n    for (const prop of props) {\n      const val = axisConfig[prop];\n      axisConfigInternal[prop] = isConditionalAxisValue(val) ? signalOrValueRefWithCondition(val) : signalRefOrValue(val);\n    }\n\n    return axisConfigInternal;\n  }\n\n  function getStyleConfigInternal(styleConfig) {\n    const props = keys(styleConfig);\n    const styleConfigInternal = {};\n\n    for (const prop of props) {\n      // We need to cast to cheat a bit here since styleConfig can be either mark config or axis config\n      styleConfigInternal[prop] = getAxisConfigInternal(styleConfig[prop]);\n    }\n\n    return styleConfigInternal;\n  }\n\n  const configPropsWithExpr = [...MARK_CONFIGS, ...AXIS_CONFIGS, ...HEADER_CONFIGS, 'background', 'padding', 'legend', 'lineBreak', 'scale', 'style', 'title', 'view'];\n  /**\n   * Merge specified config with default config and config for the `color` flag,\n   * then replace all expressions with signals\n   */\n\n  function initConfig(specifiedConfig = {}) {\n    const {\n      color,\n      font,\n      fontSize,\n      ...restConfig\n    } = specifiedConfig;\n    const mergedConfig = mergeConfig({}, defaultConfig$1, font ? fontConfig(font) : {}, color ? colorSignalConfig(color) : {}, fontSize ? fontSizeSignalConfig(fontSize) : {}, restConfig || {});\n    const outputConfig = omit(mergedConfig, configPropsWithExpr);\n\n    for (const prop of ['background', 'lineBreak', 'padding']) {\n      if (mergedConfig[prop]) {\n        outputConfig[prop] = signalRefOrValue(mergedConfig[prop]);\n      }\n    }\n\n    for (const markConfigType of MARK_CONFIGS) {\n      if (mergedConfig[markConfigType]) {\n        outputConfig[markConfigType] = replaceExprRefInIndex(mergedConfig[markConfigType]);\n      }\n    }\n\n    for (const axisConfigType of AXIS_CONFIGS) {\n      if (mergedConfig[axisConfigType]) {\n        outputConfig[axisConfigType] = getAxisConfigInternal(mergedConfig[axisConfigType]);\n      }\n    }\n\n    for (const headerConfigType of HEADER_CONFIGS) {\n      if (mergedConfig[headerConfigType]) {\n        outputConfig[headerConfigType] = replaceExprRefInIndex(mergedConfig[headerConfigType]);\n      }\n    }\n\n    if (mergedConfig.legend) {\n      outputConfig.legend = replaceExprRefInIndex(mergedConfig.legend);\n    }\n\n    if (mergedConfig.scale) {\n      outputConfig.scale = replaceExprRefInIndex(mergedConfig.scale);\n    }\n\n    if (mergedConfig.style) {\n      outputConfig.style = getStyleConfigInternal(mergedConfig.style);\n    }\n\n    if (mergedConfig.title) {\n      outputConfig.title = replaceExprRefInIndex(mergedConfig.title);\n    }\n\n    if (mergedConfig.view) {\n      outputConfig.view = replaceExprRefInIndex(mergedConfig.view);\n    }\n\n    return outputConfig;\n  }\n  const MARK_STYLES = ['view', ...PRIMITIVE_MARKS];\n  const VL_ONLY_CONFIG_PROPERTIES = ['color', 'fontSize', 'background', // We apply background to the spec directly.\n  'padding', 'facet', 'concat', 'numberFormat', 'timeFormat', 'countTitle', 'header', 'axisQuantitative', 'axisTemporal', 'axisDiscrete', 'axisPoint', 'axisXBand', 'axisXPoint', 'axisXDiscrete', 'axisXQuantitative', 'axisXTemporal', 'axisYBand', 'axisYPoint', 'axisYDiscrete', 'axisYQuantitative', 'axisYTemporal', 'scale', 'selection', 'overlay' // FIXME: Redesign and unhide this\n  ];\n  const VL_ONLY_ALL_MARK_SPECIFIC_CONFIG_PROPERTY_INDEX = {\n    view: ['continuousWidth', 'continuousHeight', 'discreteWidth', 'discreteHeight', 'step'],\n    ...VL_ONLY_MARK_SPECIFIC_CONFIG_PROPERTY_INDEX\n  };\n  function stripAndRedirectConfig(config) {\n    config = duplicate(config);\n\n    for (const prop of VL_ONLY_CONFIG_PROPERTIES) {\n      delete config[prop];\n    }\n\n    if (config.axis) {\n      // delete condition axis config\n      for (const prop in config.axis) {\n        if (isConditionalAxisValue(config.axis[prop])) {\n          delete config.axis[prop];\n        }\n      }\n    }\n\n    if (config.legend) {\n      for (const prop of VL_ONLY_LEGEND_CONFIG) {\n        delete config.legend[prop];\n      }\n    } // Remove Vega-Lite only generic mark config\n\n\n    if (config.mark) {\n      for (const prop of VL_ONLY_MARK_CONFIG_PROPERTIES) {\n        delete config.mark[prop];\n      }\n\n      if (config.mark.tooltip && isObject(config.mark.tooltip)) {\n        delete config.mark.tooltip;\n      }\n    }\n\n    if (config.params) {\n      config.signals = (config.signals || []).concat(assembleParameterSignals(config.params));\n      delete config.params;\n    }\n\n    for (const markType of MARK_STYLES) {\n      // Remove Vega-Lite-only mark config\n      for (const prop of VL_ONLY_MARK_CONFIG_PROPERTIES) {\n        delete config[markType][prop];\n      } // Remove Vega-Lite only mark-specific config\n\n\n      const vlOnlyMarkSpecificConfigs = VL_ONLY_ALL_MARK_SPECIFIC_CONFIG_PROPERTY_INDEX[markType];\n\n      if (vlOnlyMarkSpecificConfigs) {\n        for (const prop of vlOnlyMarkSpecificConfigs) {\n          delete config[markType][prop];\n        }\n      } // Redirect mark config to config.style so that mark config only affect its own mark type\n      // without affecting other marks that share the same underlying Vega marks.\n      // For example, config.rect should not affect bar marks.\n\n\n      redirectConfigToStyleConfig(config, markType);\n    }\n\n    for (const m of getAllCompositeMarks()) {\n      // Clean up the composite mark config as we don't need them in the output specs anymore\n      delete config[m];\n    }\n\n    redirectTitleConfig(config); // Remove empty config objects.\n\n    for (const prop in config) {\n      if (isObject(config[prop]) && isEmpty(config[prop])) {\n        delete config[prop];\n      }\n    }\n\n    return isEmpty(config) ? undefined : config;\n  }\n  /**\n   *\n   * Redirect config.title -- so that title config do not affect header labels,\n   * which also uses `title` directive to implement.\n   *\n   * For subtitle configs in config.title, keep them in config.title as header titles never have subtitles.\n   */\n\n  function redirectTitleConfig(config) {\n    const {\n      titleMarkConfig,\n      subtitleMarkConfig,\n      subtitle\n    } = extractTitleConfig(config.title); // set config.style if title/subtitleMarkConfig is not an empty object\n\n    if (!isEmpty(titleMarkConfig)) {\n      config.style['group-title'] = { ...config.style['group-title'],\n        ...titleMarkConfig // config.title has higher precedence than config.style.group-title in Vega\n\n      };\n    }\n\n    if (!isEmpty(subtitleMarkConfig)) {\n      config.style['group-subtitle'] = { ...config.style['group-subtitle'],\n        ...subtitleMarkConfig\n      };\n    } // subtitle part can stay in config.title since header titles do not use subtitle\n\n\n    if (!isEmpty(subtitle)) {\n      config.title = subtitle;\n    } else {\n      delete config.title;\n    }\n  }\n\n  function redirectConfigToStyleConfig(config, prop, // string = composite mark\n  toProp, compositeMarkPart) {\n    var _toProp;\n\n    const propConfig = compositeMarkPart ? config[prop][compositeMarkPart] : config[prop];\n\n    if (prop === 'view') {\n      toProp = 'cell'; // View's default style is \"cell\"\n    }\n\n    const style = { ...propConfig,\n      ...config.style[(_toProp = toProp) !== null && _toProp !== void 0 ? _toProp : prop]\n    }; // set config.style if it is not an empty object\n\n    if (!isEmpty(style)) {\n      var _toProp2;\n\n      config.style[(_toProp2 = toProp) !== null && _toProp2 !== void 0 ? _toProp2 : prop] = style;\n    }\n\n    if (!compositeMarkPart) {\n      // For composite mark, so don't delete the whole config yet as we have to do multiple redirections.\n      delete config[prop];\n    }\n  }\n\n  /**\n   * Base interface for a layer specification.\n   */\n\n  /**\n   * A full layered plot specification, which may contains `encoding` and `projection` properties that will be applied to underlying unit (single-view) specifications.\n   */\n\n  /**\n   * A layered specification without any shortcut/expansion syntax.\n   */\n  function isLayerSpec(spec) {\n    return 'layer' in spec;\n  }\n\n  function isRepeatSpec(spec) {\n    return 'repeat' in spec;\n  }\n  function isLayerRepeatSpec(spec) {\n    return !isArray(spec.repeat) && spec.repeat['layer'];\n  }\n\n  class SpecMapper {\n    map(spec, params) {\n      if (isFacetSpec(spec)) {\n        return this.mapFacet(spec, params);\n      } else if (isRepeatSpec(spec)) {\n        return this.mapRepeat(spec, params);\n      } else if (isHConcatSpec(spec)) {\n        return this.mapHConcat(spec, params);\n      } else if (isVConcatSpec(spec)) {\n        return this.mapVConcat(spec, params);\n      } else if (isConcatSpec(spec)) {\n        return this.mapConcat(spec, params);\n      } else {\n        return this.mapLayerOrUnit(spec, params);\n      }\n    }\n\n    mapLayerOrUnit(spec, params) {\n      if (isLayerSpec(spec)) {\n        return this.mapLayer(spec, params);\n      } else if (isUnitSpec(spec)) {\n        return this.mapUnit(spec, params);\n      }\n\n      throw new Error(invalidSpec(spec));\n    }\n\n    mapLayer(spec, params) {\n      return { ...spec,\n        layer: spec.layer.map(subspec => this.mapLayerOrUnit(subspec, params))\n      };\n    }\n\n    mapHConcat(spec, params) {\n      return { ...spec,\n        hconcat: spec.hconcat.map(subspec => this.map(subspec, params))\n      };\n    }\n\n    mapVConcat(spec, params) {\n      return { ...spec,\n        vconcat: spec.vconcat.map(subspec => this.map(subspec, params))\n      };\n    }\n\n    mapConcat(spec, params) {\n      const {\n        concat,\n        ...rest\n      } = spec;\n      return { ...rest,\n        concat: concat.map(subspec => this.map(subspec, params))\n      };\n    }\n\n    mapFacet(spec, params) {\n      return { // as any is required here since TS cannot infer that FO may only be FieldName or Field, but not RepeatRef\n        ...spec,\n        // TODO: remove \"any\" once we support all facet listed in https://github.com/vega/vega-lite/issues/2760\n        spec: this.map(spec.spec, params)\n      };\n    }\n\n    mapRepeat(spec, params) {\n      return { ...spec,\n        // as any is required here since TS cannot infer that the output type satisfies the input type\n        spec: this.map(spec.spec, params)\n      };\n    }\n\n  }\n\n  const STACK_OFFSET_INDEX = {\n    zero: 1,\n    center: 1,\n    normalize: 1\n  };\n  function isStackOffset(s) {\n    return s in STACK_OFFSET_INDEX;\n  }\n  const STACKABLE_MARKS = new Set([ARC, BAR, AREA, RULE, POINT, CIRCLE, SQUARE, LINE, TEXT$1, TICK]);\n  const STACK_BY_DEFAULT_MARKS = new Set([BAR, AREA, ARC]);\n\n  function potentialStackedChannel(encoding, x) {\n    const y = x === 'x' ? 'y' : 'radius';\n    const xDef = encoding[x];\n    const yDef = encoding[y];\n\n    if (isFieldDef(xDef) && isFieldDef(yDef)) {\n      if (channelDefType(xDef) === 'quantitative' && channelDefType(yDef) === 'quantitative') {\n        if (xDef.stack) {\n          return x;\n        } else if (yDef.stack) {\n          return y;\n        }\n\n        const xAggregate = isFieldDef(xDef) && !!xDef.aggregate;\n        const yAggregate = isFieldDef(yDef) && !!yDef.aggregate; // if there is no explicit stacking, only apply stack if there is only one aggregate for x or y\n\n        if (xAggregate !== yAggregate) {\n          return xAggregate ? x : y;\n        } else {\n          var _xDef$scale, _yDef$scale;\n\n          const xScale = (_xDef$scale = xDef.scale) === null || _xDef$scale === void 0 ? void 0 : _xDef$scale.type;\n          const yScale = (_yDef$scale = yDef.scale) === null || _yDef$scale === void 0 ? void 0 : _yDef$scale.type;\n\n          if (xScale && xScale !== 'linear') {\n            return y;\n          } else if (yScale && yScale !== 'linear') {\n            return x;\n          }\n        }\n      } else if (channelDefType(xDef) === 'quantitative') {\n        return x;\n      } else if (channelDefType(yDef) === 'quantitative') {\n        return y;\n      }\n    } else if (channelDefType(xDef) === 'quantitative') {\n      return x;\n    } else if (channelDefType(yDef) === 'quantitative') {\n      return y;\n    }\n\n    return undefined;\n  }\n\n  function getDimensionChannel(channel) {\n    switch (channel) {\n      case 'x':\n        return 'y';\n\n      case 'y':\n        return 'x';\n\n      case 'theta':\n        return 'radius';\n\n      case 'radius':\n        return 'theta';\n    }\n  } // Note: CompassQL uses this method and only pass in required properties of each argument object.\n  // If required properties change, make sure to update CompassQL.\n\n\n  function stack(m, encoding, opt = {}) {\n    const mark = isMarkDef(m) ? m.type : m; // Should have stackable mark\n\n    if (!STACKABLE_MARKS.has(mark)) {\n      return null;\n    } // Run potential stacked twice, one for Cartesian and another for Polar,\n    // so text marks can be stacked in any of the coordinates.\n    // Note: The logic here is not perfectly correct.  If we want to support stacked dot plots where each dot is a pie chart with label, we have to change the stack logic here to separate Cartesian stacking for polar stacking.\n    // However, since we probably never want to do that, let's just note the limitation here.\n\n\n    const fieldChannel = potentialStackedChannel(encoding, 'x') || potentialStackedChannel(encoding, 'theta');\n\n    if (!fieldChannel) {\n      return null;\n    }\n\n    const stackedFieldDef = encoding[fieldChannel];\n    const stackedField = isFieldDef(stackedFieldDef) ? vgField(stackedFieldDef, {}) : undefined;\n    let dimensionChannel = getDimensionChannel(fieldChannel);\n    let dimensionDef = encoding[dimensionChannel];\n    let dimensionField = isFieldDef(dimensionDef) ? vgField(dimensionDef, {}) : undefined; // avoid grouping by the stacked field\n\n    if (dimensionField === stackedField) {\n      dimensionField = undefined;\n      dimensionDef = undefined;\n      dimensionChannel = undefined;\n    } // Should have grouping level of detail that is different from the dimension field\n\n\n    const stackBy = NONPOSITION_CHANNELS.reduce((sc, channel) => {\n      // Ignore tooltip in stackBy (https://github.com/vega/vega-lite/issues/4001)\n      if (channel !== 'tooltip' && channelHasField(encoding, channel)) {\n        const channelDef = encoding[channel];\n\n        for (const cDef of array(channelDef)) {\n          const fieldDef = getFieldDef(cDef);\n\n          if (fieldDef.aggregate) {\n            continue;\n          } // Check whether the channel's field is identical to x/y's field or if the channel is a repeat\n\n\n          const f = vgField(fieldDef, {});\n\n          if ( // if fielddef is a repeat, just include it in the stack by\n          !f || // otherwise, the field must be different from x and y fields.\n          f !== dimensionField) {\n            sc.push({\n              channel,\n              fieldDef\n            });\n          }\n        }\n      }\n\n      return sc;\n    }, []); // Automatically determine offset\n\n    let offset;\n\n    if (stackedFieldDef.stack !== undefined) {\n      if (isBoolean(stackedFieldDef.stack)) {\n        offset = stackedFieldDef.stack ? 'zero' : null;\n      } else {\n        offset = stackedFieldDef.stack;\n      }\n    } else if (stackBy.length > 0 && STACK_BY_DEFAULT_MARKS.has(mark)) {\n      // Bar and Area with sum ops are automatically stacked by default\n      offset = 'zero';\n    }\n\n    if (!offset || !isStackOffset(offset)) {\n      return null;\n    }\n\n    if (isAggregate(encoding) && stackBy.length === 0) {\n      return null;\n    } // warn when stacking non-linear\n\n\n    if (stackedFieldDef.scale && stackedFieldDef.scale.type && stackedFieldDef.scale.type !== ScaleType.LINEAR) {\n      if (opt.disallowNonLinearStack) {\n        return null;\n      } else {\n        warn(cannotStackNonLinearScale(stackedFieldDef.scale.type));\n      }\n    } // Check if it is a ranged mark\n\n\n    if (isFieldOrDatumDef(encoding[getSecondaryRangeChannel(fieldChannel)])) {\n      if (stackedFieldDef.stack !== undefined) {\n        warn(cannotStackRangedMark(fieldChannel));\n      }\n\n      return null;\n    } // Warn if stacking non-summative aggregate\n\n\n    if (isFieldDef(stackedFieldDef) && stackedFieldDef.aggregate && !contains(SUM_OPS, stackedFieldDef.aggregate)) {\n      warn(stackNonSummativeAggregate(stackedFieldDef.aggregate));\n    }\n\n    return {\n      groupbyChannel: dimensionDef ? dimensionChannel : undefined,\n      groupbyField: dimensionField,\n      fieldChannel,\n      impute: stackedFieldDef.impute === null ? false : isPathMark(mark),\n      stackBy,\n      offset\n    };\n  }\n\n  function dropLineAndPoint(markDef) {\n    const {\n      point: _point,\n      line: _line,\n      ...mark\n    } = markDef;\n    return keys(mark).length > 1 ? mark : mark.type;\n  }\n\n  function dropLineAndPointFromConfig(config) {\n    for (const mark of ['line', 'area', 'rule', 'trail']) {\n      if (config[mark]) {\n        config = { ...config,\n          // TODO: remove as any\n          [mark]: omit(config[mark], ['point', 'line'])\n        };\n      }\n    }\n\n    return config;\n  }\n\n  function getPointOverlay(markDef, markConfig = {}, encoding) {\n    if (markDef.point === 'transparent') {\n      return {\n        opacity: 0\n      };\n    } else if (markDef.point) {\n      // truthy : true or object\n      return isObject(markDef.point) ? markDef.point : {};\n    } else if (markDef.point !== undefined) {\n      // false or null\n      return null;\n    } else {\n      // undefined (not disabled)\n      if (markConfig.point || encoding.shape) {\n        // enable point overlay if config[mark].point is truthy or if encoding.shape is provided\n        return isObject(markConfig.point) ? markConfig.point : {};\n      } // markDef.point is defined as falsy\n\n\n      return undefined;\n    }\n  }\n\n  function getLineOverlay(markDef, markConfig = {}) {\n    if (markDef.line) {\n      // true or object\n      return markDef.line === true ? {} : markDef.line;\n    } else if (markDef.line !== undefined) {\n      // false or null\n      return null;\n    } else {\n      // undefined (not disabled)\n      if (markConfig.line) {\n        // enable line overlay if config[mark].line is truthy\n        return markConfig.line === true ? {} : markConfig.line;\n      } // markDef.point is defined as falsy\n\n\n      return undefined;\n    }\n  }\n\n  class PathOverlayNormalizer {\n    constructor() {\n      _defineProperty(this, \"name\", 'path-overlay');\n    }\n\n    hasMatchingType(spec, config) {\n      if (isUnitSpec(spec)) {\n        const {\n          mark,\n          encoding\n        } = spec;\n        const markDef = isMarkDef(mark) ? mark : {\n          type: mark\n        };\n\n        switch (markDef.type) {\n          case 'line':\n          case 'rule':\n          case 'trail':\n            return !!getPointOverlay(markDef, config[markDef.type], encoding);\n\n          case 'area':\n            return (// false / null are also included as we want to remove the properties\n              !!getPointOverlay(markDef, config[markDef.type], encoding) || !!getLineOverlay(markDef, config[markDef.type])\n            );\n        }\n      }\n\n      return false;\n    }\n\n    run(spec, params, normalize) {\n      const {\n        config\n      } = params;\n      const {\n        selection,\n        projection,\n        mark,\n        encoding: e,\n        ...outerSpec\n      } = spec; // Need to call normalizeEncoding because we need the inferred types to correctly determine stack\n\n      const encoding = normalizeEncoding(e, config);\n      const markDef = isMarkDef(mark) ? mark : {\n        type: mark\n      };\n      const pointOverlay = getPointOverlay(markDef, config[markDef.type], encoding);\n      const lineOverlay = markDef.type === 'area' && getLineOverlay(markDef, config[markDef.type]);\n      const layer = [{ ...(selection ? {\n          selection\n        } : {}),\n        mark: dropLineAndPoint({ // TODO: extract this 0.7 to be shared with default opacity for point/tick/...\n          ...(markDef.type === 'area' && markDef.opacity === undefined && markDef.fillOpacity === undefined ? {\n            opacity: 0.7\n          } : {}),\n          ...markDef\n        }),\n        // drop shape from encoding as this might be used to trigger point overlay\n        encoding: omit(encoding, ['shape'])\n      }]; // FIXME: determine rules for applying selections.\n      // Need to copy stack config to overlayed layer\n\n      const stackProps = stack(markDef, encoding);\n      let overlayEncoding = encoding;\n\n      if (stackProps) {\n        const {\n          fieldChannel: stackFieldChannel,\n          offset\n        } = stackProps;\n        overlayEncoding = { ...encoding,\n          [stackFieldChannel]: { ...encoding[stackFieldChannel],\n            ...(offset ? {\n              stack: offset\n            } : {})\n          }\n        };\n      }\n\n      if (lineOverlay) {\n        layer.push({ ...(projection ? {\n            projection\n          } : {}),\n          mark: {\n            type: 'line',\n            ...pick(markDef, ['clip', 'interpolate', 'tension', 'tooltip']),\n            ...lineOverlay\n          },\n          encoding: overlayEncoding\n        });\n      }\n\n      if (pointOverlay) {\n        layer.push({ ...(projection ? {\n            projection\n          } : {}),\n          mark: {\n            type: 'point',\n            opacity: 1,\n            filled: true,\n            ...pick(markDef, ['clip', 'tooltip']),\n            ...pointOverlay\n          },\n          encoding: overlayEncoding\n        });\n      }\n\n      return normalize({ ...outerSpec,\n        layer\n      }, { ...params,\n        config: dropLineAndPointFromConfig(config)\n      });\n    }\n\n  }\n\n  // this is not accurate, but it's not worth making it accurate\n  class RangeStepNormalizer {\n    constructor() {\n      _defineProperty(this, \"name\", 'RangeStep');\n    }\n\n    hasMatchingType(spec) {\n      if (isUnitSpec(spec) && spec.encoding) {\n        for (const channel of POSITION_SCALE_CHANNELS) {\n          const def = spec.encoding[channel];\n\n          if (def && isFieldOrDatumDef(def)) {\n            var _def$scale;\n\n            if (def === null || def === void 0 ? void 0 : (_def$scale = def.scale) === null || _def$scale === void 0 ? void 0 : _def$scale['rangeStep']) {\n              return true;\n            }\n          }\n        }\n      }\n\n      return false;\n    }\n\n    run(spec) {\n      const sizeMixins = {};\n      let encoding = { ...spec.encoding\n      };\n\n      for (const channel of POSITION_SCALE_CHANNELS) {\n        const sizeType = getSizeChannel(channel);\n        const def = encoding[channel];\n\n        if (def && isFieldOrDatumDef(def)) {\n          var _def$scale2;\n\n          if (def === null || def === void 0 ? void 0 : (_def$scale2 = def.scale) === null || _def$scale2 === void 0 ? void 0 : _def$scale2['rangeStep']) {\n            const {\n              scale,\n              ...defWithoutScale\n            } = def;\n            const {\n              rangeStep,\n              ...scaleWithoutRangeStep\n            } = scale;\n            sizeMixins[sizeType] = {\n              step: scale['rangeStep']\n            };\n            warn(RANGE_STEP_DEPRECATED);\n            encoding = { ...encoding,\n              [channel]: { ...defWithoutScale,\n                ...(isEmpty(scaleWithoutRangeStep) ? {} : {\n                  scale: scaleWithoutRangeStep\n                })\n              }\n            };\n          }\n        }\n      }\n\n      return { ...sizeMixins,\n        ...spec,\n        encoding\n      };\n    }\n\n  }\n\n  function replaceRepeaterInFacet(facet, repeater) {\n    if (!repeater) {\n      return facet;\n    }\n\n    if (isFacetMapping(facet)) {\n      return replaceRepeaterInMapping(facet, repeater);\n    }\n\n    return replaceRepeaterInFieldDef(facet, repeater);\n  }\n  function replaceRepeaterInEncoding(encoding, repeater) {\n    if (!repeater) {\n      return encoding;\n    }\n\n    return replaceRepeaterInMapping(encoding, repeater);\n  }\n  /**\n   * Replaces repeated value and returns if the repeated value is valid.\n   */\n\n  function replaceRepeatInProp(prop, o, repeater) {\n    const val = o[prop];\n\n    if (isRepeatRef(val)) {\n      if (val.repeat in repeater) {\n        return { ...o,\n          [prop]: repeater[val.repeat]\n        };\n      } else {\n        warn(noSuchRepeatedValue(val.repeat));\n        return undefined;\n      }\n    }\n\n    return o;\n  }\n  /**\n   * Replace repeater values in a field def with the concrete field name.\n   */\n\n\n  function replaceRepeaterInFieldDef(fieldDef, repeater) {\n    fieldDef = replaceRepeatInProp('field', fieldDef, repeater);\n\n    if (fieldDef === undefined) {\n      // the field def should be ignored\n      return undefined;\n    } else if (fieldDef === null) {\n      return null;\n    }\n\n    if (isSortableFieldDef(fieldDef) && isSortField(fieldDef.sort)) {\n      const sort = replaceRepeatInProp('field', fieldDef.sort, repeater);\n      fieldDef = { ...fieldDef,\n        ...(sort ? {\n          sort\n        } : {})\n      };\n    }\n\n    return fieldDef;\n  }\n\n  function replaceRepeaterInFieldOrDatumDef(def, repeater) {\n    if (isFieldDef(def)) {\n      return replaceRepeaterInFieldDef(def, repeater);\n    } else {\n      const datumDef = replaceRepeatInProp('datum', def, repeater);\n\n      if (datumDef !== def && !datumDef.type) {\n        datumDef.type = 'nominal';\n      }\n\n      return datumDef;\n    }\n  }\n\n  function replaceRepeaterInChannelDef(channelDef, repeater) {\n    if (isFieldOrDatumDef(channelDef)) {\n      const fd = replaceRepeaterInFieldOrDatumDef(channelDef, repeater);\n\n      if (fd) {\n        return fd;\n      } else if (isConditionalDef(channelDef)) {\n        return {\n          condition: channelDef.condition\n        };\n      }\n    } else {\n      if (hasConditionalFieldOrDatumDef(channelDef)) {\n        const fd = replaceRepeaterInFieldOrDatumDef(channelDef.condition, repeater);\n\n        if (fd) {\n          return { ...channelDef,\n            condition: fd\n          };\n        } else {\n          const {\n            condition,\n            ...channelDefWithoutCondition\n          } = channelDef;\n          return channelDefWithoutCondition;\n        }\n      }\n\n      return channelDef;\n    }\n\n    return undefined;\n  }\n\n  function replaceRepeaterInMapping(mapping, repeater) {\n    const out = {};\n\n    for (const channel in mapping) {\n      if (has(mapping, channel)) {\n        const channelDef = mapping[channel];\n\n        if (isArray(channelDef)) {\n          // array cannot have condition\n          out[channel] = channelDef. // somehow we need to cast it here\n          map(cd => replaceRepeaterInChannelDef(cd, repeater)).filter(cd => cd);\n        } else {\n          const cd = replaceRepeaterInChannelDef(channelDef, repeater);\n\n          if (cd !== undefined) {\n            out[channel] = cd;\n          }\n        }\n      }\n    }\n\n    return out;\n  }\n\n  class RuleForRangedLineNormalizer {\n    constructor() {\n      _defineProperty(this, \"name\", 'RuleForRangedLine');\n    }\n\n    hasMatchingType(spec) {\n      if (isUnitSpec(spec)) {\n        const {\n          encoding,\n          mark\n        } = spec;\n\n        if (mark === 'line') {\n          for (const channel of SECONDARY_RANGE_CHANNEL) {\n            const mainChannel = getMainRangeChannel(channel);\n            const mainChannelDef = encoding[mainChannel];\n\n            if (encoding[channel]) {\n              if (isFieldDef(mainChannelDef) && !isBinned(mainChannelDef.bin) || isDatumDef(mainChannelDef)) {\n                return true;\n              }\n            }\n          }\n        }\n      }\n\n      return false;\n    }\n\n    run(spec, params, normalize) {\n      const {\n        encoding\n      } = spec;\n      warn(lineWithRange(!!encoding.x2, !!encoding.y2));\n      return normalize({ ...spec,\n        mark: 'rule'\n      }, params);\n    }\n\n  }\n\n  class CoreNormalizer extends SpecMapper {\n    constructor(...args) {\n      super(...args);\n\n      _defineProperty(this, \"nonFacetUnitNormalizers\", [boxPlotNormalizer, errorBarNormalizer, errorBandNormalizer, new PathOverlayNormalizer(), new RuleForRangedLineNormalizer(), new RangeStepNormalizer()]);\n    }\n\n    map(spec, params) {\n      // Special handling for a faceted unit spec as it can return a facet spec, not just a layer or unit spec like a normal unit spec.\n      if (isUnitSpec(spec)) {\n        const hasRow = channelHasField(spec.encoding, ROW);\n        const hasColumn = channelHasField(spec.encoding, COLUMN);\n        const hasFacet = channelHasField(spec.encoding, FACET);\n\n        if (hasRow || hasColumn || hasFacet) {\n          return this.mapFacetedUnit(spec, params);\n        }\n      }\n\n      return super.map(spec, params);\n    } // This is for normalizing non-facet unit\n\n\n    mapUnit(spec, params) {\n      const {\n        parentEncoding,\n        parentProjection\n      } = params;\n      const encoding = replaceRepeaterInEncoding(spec.encoding, params.repeater);\n      const specWithReplacedEncoding = { ...spec,\n        ...(encoding ? {\n          encoding\n        } : {})\n      };\n\n      if (parentEncoding || parentProjection) {\n        return this.mapUnitWithParentEncodingOrProjection(specWithReplacedEncoding, params);\n      }\n\n      const normalizeLayerOrUnit = this.mapLayerOrUnit.bind(this);\n\n      for (const unitNormalizer of this.nonFacetUnitNormalizers) {\n        if (unitNormalizer.hasMatchingType(specWithReplacedEncoding, params.config)) {\n          return unitNormalizer.run(specWithReplacedEncoding, params, normalizeLayerOrUnit);\n        }\n      }\n\n      return specWithReplacedEncoding;\n    }\n\n    mapRepeat(spec, params) {\n      if (isLayerRepeatSpec(spec)) {\n        return this.mapLayerRepeat(spec, params);\n      } else {\n        return this.mapNonLayerRepeat(spec, params);\n      }\n    }\n\n    mapLayerRepeat(spec, params) {\n      const {\n        repeat,\n        spec: childSpec,\n        ...rest\n      } = spec;\n      const {\n        row,\n        column,\n        layer\n      } = repeat;\n      const {\n        repeater = {},\n        repeaterPrefix = ''\n      } = params;\n\n      if (row || column) {\n        return this.mapRepeat({ ...spec,\n          repeat: { ...(row ? {\n              row\n            } : {}),\n            ...(column ? {\n              column\n            } : {})\n          },\n          spec: {\n            repeat: {\n              layer\n            },\n            spec: childSpec\n          }\n        }, params);\n      } else {\n        return { ...rest,\n          layer: layer.map(layerValue => {\n            const childRepeater = { ...repeater,\n              layer: layerValue\n            };\n            const childName = (childSpec.name || '') + repeaterPrefix + \"child__layer_\".concat(varName(layerValue));\n            const child = this.mapLayerOrUnit(childSpec, { ...params,\n              repeater: childRepeater,\n              repeaterPrefix: childName\n            });\n            child.name = childName;\n            return child;\n          })\n        };\n      }\n    }\n\n    mapNonLayerRepeat(spec, params) {\n      var _childSpec$data;\n\n      const {\n        repeat,\n        spec: childSpec,\n        data,\n        ...remainingProperties\n      } = spec;\n\n      if (!isArray(repeat) && spec.columns) {\n        // is repeat with row/column\n        spec = omit(spec, ['columns']);\n        warn(columnsNotSupportByRowCol('repeat'));\n      }\n\n      const concat = [];\n      const {\n        repeater = {},\n        repeaterPrefix = ''\n      } = params;\n      const row = !isArray(repeat) && repeat.row || [repeater ? repeater.row : null];\n      const column = !isArray(repeat) && repeat.column || [repeater ? repeater.column : null];\n      const repeatValues = isArray(repeat) && repeat || [repeater ? repeater.repeat : null]; // cross product\n\n      for (const repeatValue of repeatValues) {\n        for (const rowValue of row) {\n          for (const columnValue of column) {\n            const childRepeater = {\n              repeat: repeatValue,\n              row: rowValue,\n              column: columnValue,\n              layer: repeater.layer\n            };\n            const childName = (childSpec.name || '') + repeaterPrefix + 'child__' + (isArray(repeat) ? \"\".concat(varName(repeatValue)) : (repeat.row ? \"row_\".concat(varName(rowValue)) : '') + (repeat.column ? \"column_\".concat(varName(columnValue)) : ''));\n            const child = this.map(childSpec, { ...params,\n              repeater: childRepeater,\n              repeaterPrefix: childName\n            });\n            child.name = childName; // we move data up\n\n            concat.push(omit(child, ['data']));\n          }\n        }\n      }\n\n      const columns = isArray(repeat) ? spec.columns : repeat.column ? repeat.column.length : 1;\n      return {\n        data: (_childSpec$data = childSpec.data) !== null && _childSpec$data !== void 0 ? _childSpec$data : data,\n        // data from child spec should have precedence\n        align: 'all',\n        ...remainingProperties,\n        columns,\n        concat\n      };\n    }\n\n    mapFacet(spec, params) {\n      const {\n        facet\n      } = spec;\n\n      if (isFacetMapping(facet) && spec.columns) {\n        // is facet with row/column\n        spec = omit(spec, ['columns']);\n        warn(columnsNotSupportByRowCol('facet'));\n      }\n\n      return super.mapFacet(spec, params);\n    }\n\n    mapUnitWithParentEncodingOrProjection(spec, params) {\n      const {\n        encoding,\n        projection\n      } = spec;\n      const {\n        parentEncoding,\n        parentProjection,\n        config\n      } = params;\n      const mergedProjection = mergeProjection({\n        parentProjection,\n        projection\n      });\n      const mergedEncoding = mergeEncoding({\n        parentEncoding,\n        encoding: replaceRepeaterInEncoding(encoding, params.repeater)\n      });\n      return this.mapUnit({ ...spec,\n        ...(mergedProjection ? {\n          projection: mergedProjection\n        } : {}),\n        ...(mergedEncoding ? {\n          encoding: mergedEncoding\n        } : {})\n      }, {\n        config\n      });\n    }\n\n    mapFacetedUnit(spec, params) {\n      // New encoding in the inside spec should not contain row / column\n      // as row/column should be moved to facet\n      const {\n        row,\n        column,\n        facet,\n        ...encoding\n      } = spec.encoding; // Mark and encoding should be moved into the inner spec\n\n      const {\n        mark,\n        width,\n        projection,\n        height,\n        view,\n        selection,\n        encoding: _,\n        ...outerSpec\n      } = spec;\n      const {\n        facetMapping,\n        layout\n      } = this.getFacetMappingAndLayout({\n        row,\n        column,\n        facet\n      }, params);\n      const newEncoding = replaceRepeaterInEncoding(encoding, params.repeater);\n      return this.mapFacet({ ...outerSpec,\n        ...layout,\n        // row / column has higher precedence than facet\n        facet: facetMapping,\n        spec: { ...(width ? {\n            width\n          } : {}),\n          ...(height ? {\n            height\n          } : {}),\n          ...(view ? {\n            view\n          } : {}),\n          ...(projection ? {\n            projection\n          } : {}),\n          mark,\n          encoding: newEncoding,\n          ...(selection ? {\n            selection\n          } : {})\n        }\n      }, params);\n    }\n\n    getFacetMappingAndLayout(facets, params) {\n      const {\n        row,\n        column,\n        facet\n      } = facets;\n\n      if (row || column) {\n        if (facet) {\n          warn(facetChannelDropped([...(row ? [ROW] : []), ...(column ? [COLUMN] : [])]));\n        }\n\n        const facetMapping = {};\n        const layout = {};\n\n        for (const channel of [ROW, COLUMN]) {\n          const def = facets[channel];\n\n          if (def) {\n            const {\n              align,\n              center,\n              spacing,\n              columns,\n              ...defWithoutLayout\n            } = def;\n            facetMapping[channel] = defWithoutLayout;\n\n            for (const prop of ['align', 'center', 'spacing']) {\n              if (def[prop] !== undefined) {\n                var _layout$prop;\n\n                layout[prop] = (_layout$prop = layout[prop]) !== null && _layout$prop !== void 0 ? _layout$prop : {};\n                layout[prop][channel] = def[prop];\n              }\n            }\n          }\n        }\n\n        return {\n          facetMapping,\n          layout\n        };\n      } else {\n        const {\n          align,\n          center,\n          spacing,\n          columns,\n          ...facetMapping\n        } = facet;\n        return {\n          facetMapping: replaceRepeaterInFacet(facetMapping, params.repeater),\n          layout: { ...(align ? {\n              align\n            } : {}),\n            ...(center ? {\n              center\n            } : {}),\n            ...(spacing ? {\n              spacing\n            } : {}),\n            ...(columns ? {\n              columns\n            } : {})\n          }\n        };\n      }\n    }\n\n    mapLayer(spec, {\n      parentEncoding,\n      parentProjection,\n      ...otherParams\n    }) {\n      // Special handling for extended layer spec\n      const {\n        encoding,\n        projection,\n        ...rest\n      } = spec;\n      const params = { ...otherParams,\n        parentEncoding: mergeEncoding({\n          parentEncoding,\n          encoding,\n          layer: true\n        }),\n        parentProjection: mergeProjection({\n          parentProjection,\n          projection\n        })\n      };\n      return super.mapLayer(rest, params);\n    }\n\n  }\n\n  function mergeEncoding({\n    parentEncoding,\n    encoding = {},\n    layer\n  }) {\n    let merged = {};\n\n    if (parentEncoding) {\n      const channels = new Set([...keys(parentEncoding), ...keys(encoding)]);\n\n      for (const channel of channels) {\n        const channelDef = encoding[channel];\n        const parentChannelDef = parentEncoding[channel];\n\n        if (isFieldOrDatumDef(channelDef)) {\n          // Field/Datum Def can inherit properties from its parent\n          // Note that parentChannelDef doesn't have to be a field/datum def if the channelDef is already one.\n          const mergedChannelDef = { ...parentChannelDef,\n            ...channelDef\n          };\n          merged[channel] = mergedChannelDef;\n        } else if (hasConditionalFieldOrDatumDef(channelDef)) {\n          merged[channel] = { ...channelDef,\n            condition: { ...parentChannelDef,\n              ...channelDef.condition\n            }\n          };\n        } else if (channelDef || channelDef === null) {\n          merged[channel] = channelDef;\n        } else if (layer || isValueDef(parentChannelDef) || isSignalRef(parentChannelDef) || isFieldOrDatumDef(parentChannelDef) || isArray(parentChannelDef)) {\n          merged[channel] = parentChannelDef;\n        }\n      }\n    } else {\n      merged = encoding;\n    }\n\n    return !merged || isEmpty(merged) ? undefined : merged;\n  }\n\n  function mergeProjection(opt) {\n    const {\n      parentProjection,\n      projection\n    } = opt;\n\n    if (parentProjection && projection) {\n      warn(projectionOverridden({\n        parentProjection,\n        projection\n      }));\n    }\n\n    return projection !== null && projection !== void 0 ? projection : parentProjection;\n  }\n\n  function normalize(spec, config) {\n    if (config === undefined) {\n      config = initConfig(spec.config);\n    }\n\n    const normalizedSpec = normalizeGenericSpec(spec, config);\n    const {\n      width,\n      height\n    } = spec;\n    const autosize = normalizeAutoSize(normalizedSpec, {\n      width,\n      height,\n      autosize: spec.autosize\n    }, config);\n    return { ...normalizedSpec,\n      ...(autosize ? {\n        autosize\n      } : {})\n    };\n  }\n  const normalizer = new CoreNormalizer();\n  /**\n   * Decompose extended unit specs into composition of pure unit specs.\n   */\n\n  function normalizeGenericSpec(spec, config = {}) {\n    return normalizer.map(spec, {\n      config\n    });\n  }\n\n  function _normalizeAutoSize(autosize) {\n    return isString(autosize) ? {\n      type: autosize\n    } : autosize !== null && autosize !== void 0 ? autosize : {};\n  }\n  /**\n   * Normalize autosize and deal with width or height == \"container\".\n   */\n\n\n  function normalizeAutoSize(spec, sizeInfo, config) {\n    let {\n      width,\n      height\n    } = sizeInfo;\n    const isFitCompatible = isUnitSpec(spec) || isLayerSpec(spec);\n    const autosizeDefault = {};\n\n    if (!isFitCompatible) {\n      // If spec is not compatible with autosize == \"fit\", discard width/height == container\n      if (width == 'container') {\n        warn(containerSizeNonSingle('width'));\n        width = undefined;\n      }\n\n      if (height == 'container') {\n        warn(containerSizeNonSingle('height'));\n        height = undefined;\n      }\n    } else {\n      // Default autosize parameters to fit when width/height is \"container\"\n      if (width == 'container' && height == 'container') {\n        autosizeDefault.type = 'fit';\n        autosizeDefault.contains = 'padding';\n      } else if (width == 'container') {\n        autosizeDefault.type = 'fit-x';\n        autosizeDefault.contains = 'padding';\n      } else if (height == 'container') {\n        autosizeDefault.type = 'fit-y';\n        autosizeDefault.contains = 'padding';\n      }\n    }\n\n    const autosize = {\n      type: 'pad',\n      ...autosizeDefault,\n      ...(config ? _normalizeAutoSize(config.autosize) : {}),\n      ..._normalizeAutoSize(spec.autosize)\n    };\n\n    if (autosize.type === 'fit' && !isFitCompatible) {\n      warn(FIT_NON_SINGLE);\n      autosize.type = 'pad';\n    }\n\n    if (width == 'container' && !(autosize.type == 'fit' || autosize.type == 'fit-x')) {\n      warn(containerSizeNotCompatibleWithAutosize('width'));\n    }\n\n    if (height == 'container' && !(autosize.type == 'fit' || autosize.type == 'fit-y')) {\n      warn(containerSizeNotCompatibleWithAutosize('height'));\n    } // Delete autosize property if it's Vega's default\n\n\n    if (deepEqual(autosize, {\n      type: 'pad'\n    })) {\n      return undefined;\n    }\n\n    return autosize;\n  }\n\n  /**\n   * Generic class for storing properties that are explicitly specified\n   * and implicitly determined by the compiler.\n   * This is important for scale/axis/legend merging as\n   * we want to prioritize properties that users explicitly specified.\n   */\n  // eslint-disable-next-line @typescript-eslint/ban-types\n\n  class Split {\n    constructor(explicit = {}, implicit = {}) {\n      this.explicit = explicit;\n      this.implicit = implicit;\n    }\n\n    clone() {\n      return new Split(duplicate(this.explicit), duplicate(this.implicit));\n    }\n\n    combine() {\n      // FIXME remove \"as any\".\n      // Add \"as any\" to avoid an error \"Spread types may only be created from object types\".\n      return { ...this.explicit,\n        // Explicit properties comes first\n        ...this.implicit\n      };\n    }\n\n    get(key) {\n      // Explicit has higher precedence\n      return getFirstDefined(this.explicit[key], this.implicit[key]);\n    }\n\n    getWithExplicit(key) {\n      // Explicit has higher precedence\n      if (this.explicit[key] !== undefined) {\n        return {\n          explicit: true,\n          value: this.explicit[key]\n        };\n      } else if (this.implicit[key] !== undefined) {\n        return {\n          explicit: false,\n          value: this.implicit[key]\n        };\n      }\n\n      return {\n        explicit: false,\n        value: undefined\n      };\n    }\n\n    setWithExplicit(key, value) {\n      if (value.value !== undefined) {\n        this.set(key, value.value, value.explicit);\n      }\n    }\n\n    set(key, value, explicit) {\n      delete this[explicit ? 'implicit' : 'explicit'][key];\n      this[explicit ? 'explicit' : 'implicit'][key] = value;\n      return this;\n    }\n\n    copyKeyFromSplit(key, s) {\n      // Explicit has higher precedence\n      if (s.explicit[key] !== undefined) {\n        this.set(key, s.explicit[key], true);\n      } else if (s.implicit[key] !== undefined) {\n        this.set(key, s.implicit[key], false);\n      }\n    }\n\n    copyKeyFromObject(key, s) {\n      // Explicit has higher precedence\n      if (s[key] !== undefined) {\n        this.set(key, s[key], true);\n      }\n    }\n    /**\n     * Merge split object into this split object. Properties from the other split\n     * overwrite properties from this split.\n     */\n\n\n    copyAll(other) {\n      for (const key of keys(other.combine())) {\n        const val = other.getWithExplicit(key);\n        this.setWithExplicit(key, val);\n      }\n    }\n\n  }\n  function makeExplicit(value) {\n    return {\n      explicit: true,\n      value\n    };\n  }\n  function makeImplicit(value) {\n    return {\n      explicit: false,\n      value\n    };\n  }\n  function tieBreakByComparing(compare) {\n    return (v1, v2, property, propertyOf) => {\n      const diff = compare(v1.value, v2.value);\n\n      if (diff > 0) {\n        return v1;\n      } else if (diff < 0) {\n        return v2;\n      }\n\n      return defaultTieBreaker(v1, v2, property, propertyOf);\n    };\n  }\n  function defaultTieBreaker(v1, v2, property, propertyOf) {\n    if (v1.explicit && v2.explicit) {\n      warn(mergeConflictingProperty(property, propertyOf, v1.value, v2.value));\n    } // If equal score, prefer v1.\n\n\n    return v1;\n  }\n  function mergeValuesWithExplicit(v1, v2, property, propertyOf, tieBreaker = defaultTieBreaker) {\n    if (v1 === undefined || v1.value === undefined) {\n      // For first run\n      return v2;\n    }\n\n    if (v1.explicit && !v2.explicit) {\n      return v1;\n    } else if (v2.explicit && !v1.explicit) {\n      return v2;\n    } else if (deepEqual(v1.value, v2.value)) {\n      return v1;\n    } else {\n      return tieBreaker(v1, v2, property, propertyOf);\n    }\n  }\n\n  /**\n   * Class to track interesting properties (see https://15721.courses.cs.cmu.edu/spring2016/papers/graefe-ieee1995.pdf)\n   * about how fields have been parsed or whether they have been derived in a transform. We use this to not parse the\n   * same field again (or differently).\n   */\n  class AncestorParse extends Split {\n    constructor(explicit = {}, implicit = {}, parseNothing = false) {\n      super(explicit, implicit);\n      this.explicit = explicit;\n      this.implicit = implicit;\n      this.parseNothing = parseNothing;\n    }\n\n    clone() {\n      const clone = super.clone();\n      clone.parseNothing = this.parseNothing;\n      return clone;\n    }\n\n  }\n\n  /*\n   * Constants and utilities for data.\n   */\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  function isUrlData(data) {\n    return 'url' in data;\n  }\n  function isInlineData(data) {\n    return 'values' in data;\n  }\n  function isNamedData(data) {\n    return 'name' in data && !isUrlData(data) && !isInlineData(data) && !isGenerator(data);\n  }\n  function isGenerator(data) {\n    return data && (isSequenceGenerator(data) || isSphereGenerator(data) || isGraticuleGenerator(data));\n  }\n  function isSequenceGenerator(data) {\n    return 'sequence' in data;\n  }\n  function isSphereGenerator(data) {\n    return 'sphere' in data;\n  }\n  function isGraticuleGenerator(data) {\n    return 'graticule' in data;\n  }\n  let DataSourceType;\n\n  (function (DataSourceType) {\n    DataSourceType[DataSourceType[\"Raw\"] = 0] = \"Raw\";\n    DataSourceType[DataSourceType[\"Main\"] = 1] = \"Main\";\n    DataSourceType[DataSourceType[\"Row\"] = 2] = \"Row\";\n    DataSourceType[DataSourceType[\"Column\"] = 3] = \"Column\";\n    DataSourceType[DataSourceType[\"Lookup\"] = 4] = \"Lookup\";\n  })(DataSourceType || (DataSourceType = {}));\n\n  function isFilter(t) {\n    return 'filter' in t;\n  }\n  function isImputeSequence(t) {\n    return (t === null || t === void 0 ? void 0 : t['stop']) !== undefined;\n  }\n  function isLookup(t) {\n    return 'lookup' in t;\n  }\n  function isLookupData(from) {\n    return 'data' in from;\n  }\n  function isLookupSelection(from) {\n    return 'selection' in from;\n  }\n  function isPivot(t) {\n    return 'pivot' in t;\n  }\n  function isDensity(t) {\n    return 'density' in t;\n  }\n  function isQuantile(t) {\n    return 'quantile' in t;\n  }\n  function isRegression(t) {\n    return 'regression' in t;\n  }\n  function isLoess(t) {\n    return 'loess' in t;\n  }\n  function isSample(t) {\n    return 'sample' in t;\n  }\n  function isWindow(t) {\n    return 'window' in t;\n  }\n  function isJoinAggregate(t) {\n    return 'joinaggregate' in t;\n  }\n  function isFlatten(t) {\n    return 'flatten' in t;\n  }\n  function isCalculate(t) {\n    return 'calculate' in t;\n  }\n  function isBin(t) {\n    return 'bin' in t;\n  }\n  function isImpute(t) {\n    return 'impute' in t;\n  }\n  function isTimeUnit(t) {\n    return 'timeUnit' in t;\n  }\n  function isAggregate$1(t) {\n    return 'aggregate' in t;\n  }\n  function isStack(t) {\n    return 'stack' in t;\n  }\n  function isFold(t) {\n    return 'fold' in t;\n  }\n  function normalizeTransform(transform) {\n    return transform.map(t => {\n      if (isFilter(t)) {\n        return {\n          filter: normalizeLogicalComposition(t.filter, normalizePredicate)\n        };\n      }\n\n      return t;\n    });\n  }\n\n  const VIEW = 'view',\n        LBRACK = '[',\n        RBRACK = ']',\n        LBRACE = '{',\n        RBRACE = '}',\n        COLON = ':',\n        COMMA = ',',\n        NAME = '@',\n        GT = '>',\n        ILLEGAL = /[[\\]{}]/,\n        DEFAULT_MARKS = {\n    '*': 1,\n    arc: 1,\n    area: 1,\n    group: 1,\n    image: 1,\n    line: 1,\n    path: 1,\n    rect: 1,\n    rule: 1,\n    shape: 1,\n    symbol: 1,\n    text: 1,\n    trail: 1\n  };\n  let DEFAULT_SOURCE, MARKS;\n  /**\n   * Parse an event selector string.\n   * Returns an array of event stream definitions.\n   */\n\n  function eventSelector(selector, source, marks) {\n    DEFAULT_SOURCE = source || VIEW;\n    MARKS = marks || DEFAULT_MARKS;\n    return parseMerge(selector.trim()).map(parseSelector);\n  }\n\n  function isMarkType(type) {\n    return MARKS[type];\n  }\n\n  function find(s, i, endChar, pushChar, popChar) {\n    const n = s.length;\n    let count = 0,\n        c;\n\n    for (; i < n; ++i) {\n      c = s[i];\n      if (!count && c === endChar) return i;else if (popChar && popChar.indexOf(c) >= 0) --count;else if (pushChar && pushChar.indexOf(c) >= 0) ++count;\n    }\n\n    return i;\n  }\n\n  function parseMerge(s) {\n    const output = [],\n          n = s.length;\n    let start = 0,\n        i = 0;\n\n    while (i < n) {\n      i = find(s, i, COMMA, LBRACK + LBRACE, RBRACK + RBRACE);\n      output.push(s.substring(start, i).trim());\n      start = ++i;\n    }\n\n    if (output.length === 0) {\n      throw 'Empty event selector: ' + s;\n    }\n\n    return output;\n  }\n\n  function parseSelector(s) {\n    return s[0] === '[' ? parseBetween(s) : parseStream(s);\n  }\n\n  function parseBetween(s) {\n    const n = s.length;\n    let i = 1,\n        b;\n    i = find(s, i, RBRACK, LBRACK, RBRACK);\n\n    if (i === n) {\n      throw 'Empty between selector: ' + s;\n    }\n\n    b = parseMerge(s.substring(1, i));\n\n    if (b.length !== 2) {\n      throw 'Between selector must have two elements: ' + s;\n    }\n\n    s = s.slice(i + 1).trim();\n\n    if (s[0] !== GT) {\n      throw 'Expected \\'>\\' after between selector: ' + s;\n    }\n\n    b = b.map(parseSelector);\n    const stream = parseSelector(s.slice(1).trim());\n\n    if (stream.between) {\n      return {\n        between: b,\n        stream: stream\n      };\n    } else {\n      stream.between = b;\n    }\n\n    return stream;\n  }\n\n  function parseStream(s) {\n    const stream = {\n      source: DEFAULT_SOURCE\n    },\n          source = [];\n    let throttle = [0, 0],\n        markname = 0,\n        start = 0,\n        n = s.length,\n        i = 0,\n        j,\n        filter; // extract throttle from end\n\n    if (s[n - 1] === RBRACE) {\n      i = s.lastIndexOf(LBRACE);\n\n      if (i >= 0) {\n        try {\n          throttle = parseThrottle(s.substring(i + 1, n - 1));\n        } catch (e) {\n          throw 'Invalid throttle specification: ' + s;\n        }\n\n        s = s.slice(0, i).trim();\n        n = s.length;\n      } else throw 'Unmatched right brace: ' + s;\n\n      i = 0;\n    }\n\n    if (!n) throw s; // set name flag based on first char\n\n    if (s[0] === NAME) markname = ++i; // extract first part of multi-part stream selector\n\n    j = find(s, i, COLON);\n\n    if (j < n) {\n      source.push(s.substring(start, j).trim());\n      start = i = ++j;\n    } // extract remaining part of stream selector\n\n\n    i = find(s, i, LBRACK);\n\n    if (i === n) {\n      source.push(s.substring(start, n).trim());\n    } else {\n      source.push(s.substring(start, i).trim());\n      filter = [];\n      start = ++i;\n      if (start === n) throw 'Unmatched left bracket: ' + s;\n    } // extract filters\n\n\n    while (i < n) {\n      i = find(s, i, RBRACK);\n      if (i === n) throw 'Unmatched left bracket: ' + s;\n      filter.push(s.substring(start, i).trim());\n      if (i < n - 1 && s[++i] !== LBRACK) throw 'Expected left bracket: ' + s;\n      start = ++i;\n    } // marshall event stream specification\n\n\n    if (!(n = source.length) || ILLEGAL.test(source[n - 1])) {\n      throw 'Invalid event selector: ' + s;\n    }\n\n    if (n > 1) {\n      stream.type = source[1];\n\n      if (markname) {\n        stream.markname = source[0].slice(1);\n      } else if (isMarkType(source[0])) {\n        stream.marktype = source[0];\n      } else {\n        stream.source = source[0];\n      }\n    } else {\n      stream.type = source[0];\n    }\n\n    if (stream.type.slice(-1) === '!') {\n      stream.consume = true;\n      stream.type = stream.type.slice(0, -1);\n    }\n\n    if (filter != null) stream.filter = filter;\n    if (throttle[0]) stream.throttle = throttle[0];\n    if (throttle[1]) stream.debounce = throttle[1];\n    return stream;\n  }\n\n  function parseThrottle(s) {\n    const a = s.split(COMMA);\n    if (!s.length || a.length > 2) throw s;\n    return a.map(_ => {\n      const x = +_;\n      if (x !== x) throw s;\n      return x;\n    });\n  }\n\n  /**\n   * Return a mixin that includes a Vega production rule for a Vega-Lite conditional channel definition\n   * or a simple mixin if channel def has no condition.\n   */\n  function wrapCondition(model, channelDef, vgChannel, refFn) {\n    const condition = isConditionalDef(channelDef) && channelDef.condition;\n    const valueRef = refFn(channelDef);\n\n    if (condition) {\n      const conditions = array(condition);\n      const vgConditions = conditions.map(c => {\n        const conditionValueRef = refFn(c);\n        const test = isConditionalSelection(c) ? parseSelectionPredicate(model, c.selection) // FIXME: remove casting once TS is no longer dumb about it\n        : expression(model, c.test); // FIXME: remove casting once TS is no longer dumb about it\n\n        return {\n          test,\n          ...conditionValueRef\n        };\n      });\n      return {\n        [vgChannel]: [...vgConditions, ...(valueRef !== undefined ? [valueRef] : [])]\n      };\n    } else {\n      return valueRef !== undefined ? {\n        [vgChannel]: valueRef\n      } : {};\n    }\n  }\n\n  function text(model, channel = 'text') {\n    const channelDef = model.encoding[channel];\n    return wrapCondition(model, channelDef, channel, cDef => textRef(cDef, model.config));\n  }\n  function textRef(channelDef, config, expr = 'datum') {\n    // text\n    if (channelDef) {\n      if (isValueDef(channelDef)) {\n        return signalOrValueRef(channelDef.value);\n      }\n\n      if (isFieldOrDatumDef(channelDef)) {\n        const {\n          format,\n          formatType\n        } = getFormatMixins(channelDef);\n        return formatSignalRef({\n          fieldOrDatumDef: channelDef,\n          format,\n          formatType,\n          expr,\n          config\n        });\n      }\n    }\n\n    return undefined;\n  }\n\n  function tooltip(model, opt = {}) {\n    const {\n      encoding,\n      markDef,\n      config,\n      stack\n    } = model;\n    const channelDef = encoding.tooltip;\n\n    if (isArray(channelDef)) {\n      return {\n        tooltip: tooltipRefForEncoding({\n          tooltip: channelDef\n        }, stack, config, opt)\n      };\n    } else {\n      const datum = opt.reactiveGeom ? 'datum.datum' : 'datum';\n      return wrapCondition(model, channelDef, 'tooltip', cDef => {\n        // use valueRef based on channelDef first\n        const tooltipRefFromChannelDef = textRef(cDef, config, datum);\n\n        if (tooltipRefFromChannelDef) {\n          return tooltipRefFromChannelDef;\n        }\n\n        if (cDef === null) {\n          // Allow using encoding.tooltip = null to disable tooltip\n          return undefined;\n        }\n\n        let markTooltip = getMarkPropOrConfig('tooltip', markDef, config);\n\n        if (markTooltip === true) {\n          markTooltip = {\n            content: 'encoding'\n          };\n        }\n\n        if (isString(markTooltip)) {\n          return {\n            value: markTooltip\n          };\n        } else if (isObject(markTooltip)) {\n          // `tooltip` is `{fields: 'encodings' | 'fields'}`\n          if (isSignalRef(markTooltip)) {\n            return markTooltip;\n          } else if (markTooltip.content === 'encoding') {\n            return tooltipRefForEncoding(encoding, stack, config, opt);\n          } else {\n            return {\n              signal: datum\n            };\n          }\n        }\n\n        return undefined;\n      });\n    }\n  }\n  function tooltipData(encoding, stack, config, {\n    reactiveGeom\n  } = {}) {\n    const toSkip = {};\n    const expr = reactiveGeom ? 'datum.datum' : 'datum';\n    const tuples = [];\n\n    function add(fDef, channel) {\n      var _value;\n\n      const mainChannel = getMainRangeChannel(channel);\n      const fieldDef = isTypedFieldDef(fDef) ? fDef : { ...fDef,\n        type: encoding[mainChannel].type // for secondary field def, copy type from main channel\n\n      };\n      const title = fieldDef.title || defaultTitle(fieldDef, config);\n      const key = array(title).join(', ');\n      let value;\n\n      if (isXorY(channel)) {\n        const channel2 = channel === 'x' ? 'x2' : 'y2';\n        const fieldDef2 = getFieldDef(encoding[channel2]);\n\n        if (isBinned(fieldDef.bin) && fieldDef2) {\n          const startField = vgField(fieldDef, {\n            expr\n          });\n          const endField = vgField(fieldDef2, {\n            expr\n          });\n          const {\n            format,\n            formatType\n          } = getFormatMixins(fieldDef);\n          value = binFormatExpression(startField, endField, format, formatType, config);\n          toSkip[channel2] = true;\n        } else if (stack && stack.fieldChannel === channel && stack.offset === 'normalize') {\n          const {\n            format,\n            formatType\n          } = getFormatMixins(fieldDef);\n          value = formatSignalRef({\n            fieldOrDatumDef: fieldDef,\n            format,\n            formatType,\n            expr,\n            config,\n            normalizeStack: true\n          }).signal;\n        }\n      }\n\n      value = (_value = value) !== null && _value !== void 0 ? _value : textRef(fieldDef, config, expr).signal;\n      tuples.push({\n        channel,\n        key,\n        value\n      });\n    }\n\n    forEach(encoding, (channelDef, channel) => {\n      if (isFieldDef(channelDef)) {\n        add(channelDef, channel);\n      } else if (hasConditionalFieldDef(channelDef)) {\n        add(channelDef.condition, channel);\n      }\n    });\n    const out = {};\n\n    for (const {\n      channel,\n      key,\n      value\n    } of tuples) {\n      if (!toSkip[channel] && !out[key]) {\n        out[key] = value;\n      }\n    }\n\n    return out;\n  }\n  function tooltipRefForEncoding(encoding, stack, config, {\n    reactiveGeom\n  } = {}) {\n    const data = tooltipData(encoding, stack, config, {\n      reactiveGeom\n    });\n    const keyValues = entries(data).map(([key, value]) => \"\\\"\".concat(key, \"\\\": \").concat(value));\n    return keyValues.length > 0 ? {\n      signal: \"{\".concat(keyValues.join(', '), \"}\")\n    } : undefined;\n  }\n\n  function aria(model) {\n    const {\n      markDef,\n      config\n    } = model;\n    const enableAria = getMarkPropOrConfig('aria', markDef, config); // We can ignore other aria properties if ariaHidden is true.\n\n    if (enableAria === false) {\n      // getMarkGroups sets aria to false already so we don't have to set it in the encode block\n      return {};\n    }\n\n    return { ...(enableAria ? {\n        aria: enableAria\n      } : {}),\n      ...ariaRoleDescription(model),\n      ...description(model)\n    };\n  }\n\n  function ariaRoleDescription(model) {\n    const {\n      mark,\n      markDef,\n      config\n    } = model;\n\n    if (config.aria === false) {\n      return {};\n    }\n\n    const ariaRoleDesc = getMarkPropOrConfig('ariaRoleDescription', markDef, config);\n\n    if (ariaRoleDesc != null) {\n      return {\n        ariaRoleDescription: {\n          value: ariaRoleDesc\n        }\n      };\n    }\n\n    return mark in VG_MARK_INDEX ? {} : {\n      ariaRoleDescription: {\n        value: mark\n      }\n    };\n  }\n\n  function description(model) {\n    const {\n      encoding,\n      markDef,\n      config,\n      stack\n    } = model;\n    const channelDef = encoding.description;\n\n    if (channelDef) {\n      return wrapCondition(model, channelDef, 'description', cDef => textRef(cDef, model.config));\n    } // Use default from mark def or config if defined.\n    // Functions in encode usually just return undefined but since we are defining a default below, we need to check the default here.\n\n\n    const descriptionValue = getMarkPropOrConfig('description', markDef, config);\n\n    if (descriptionValue != null) {\n      return {\n        description: signalOrValueRef(descriptionValue)\n      };\n    }\n\n    if (config.aria === false) {\n      return {};\n    }\n\n    const data = tooltipData(encoding, stack, config);\n\n    if (isEmpty(data)) {\n      return undefined;\n    }\n\n    return {\n      description: {\n        signal: entries(data).map(([key, value], index) => \"\\\"\".concat(index > 0 ? '; ' : '').concat(key, \": \\\" + (\").concat(value, \")\")).join(' + ')\n      }\n    };\n  }\n\n  /**\n   * Return encode for non-positional channels with scales. (Text doesn't have scale.)\n   */\n\n  function nonPosition(channel, model, opt = {}) {\n    const {\n      markDef,\n      encoding,\n      config\n    } = model;\n    const {\n      vgChannel\n    } = opt;\n    let {\n      defaultRef,\n      defaultValue\n    } = opt;\n\n    if (defaultRef === undefined) {\n      var _defaultValue;\n\n      // prettier-ignore\n      defaultValue = (_defaultValue = defaultValue) !== null && _defaultValue !== void 0 ? _defaultValue : getMarkPropOrConfig(channel, markDef, config, {\n        vgChannel,\n        ignoreVgConfig: true\n      });\n\n      if (defaultValue !== undefined) {\n        defaultRef = signalOrValueRef(defaultValue);\n      }\n    }\n\n    const channelDef = encoding[channel];\n    return wrapCondition(model, channelDef, vgChannel !== null && vgChannel !== void 0 ? vgChannel : channel, cDef => {\n      return midPoint({\n        channel,\n        channelDef: cDef,\n        markDef,\n        config,\n        scaleName: model.scaleName(channel),\n        scale: model.getScaleComponent(channel),\n        stack: null,\n        // No need to provide stack for non-position as it does not affect mid point\n        defaultRef\n      });\n    });\n  }\n\n  function color(model, opt = {\n    filled: undefined\n  }) {\n    var _opt$filled, _ref, _getMarkPropOrConfig, _getMarkPropOrConfig2;\n\n    const {\n      markDef,\n      encoding,\n      config\n    } = model;\n    const {\n      type: markType\n    } = markDef; // Allow filled to be overridden (for trail's \"filled\")\n\n    const filled = (_opt$filled = opt.filled) !== null && _opt$filled !== void 0 ? _opt$filled : getMarkPropOrConfig('filled', markDef, config);\n    const transparentIfNeeded = contains(['bar', 'point', 'circle', 'square', 'geoshape'], markType) ? 'transparent' : undefined;\n    const defaultFill = (_ref = (_getMarkPropOrConfig = getMarkPropOrConfig(filled === true ? 'color' : undefined, markDef, config, {\n      vgChannel: 'fill'\n    })) !== null && _getMarkPropOrConfig !== void 0 ? _getMarkPropOrConfig : // need to add this manually as getMarkConfig normally drops config.mark[channel] if vgChannel is specified\n    config.mark[filled === true && 'color']) !== null && _ref !== void 0 ? _ref : // If there is no fill, always fill symbols, bar, geoshape\n    // with transparent fills https://github.com/vega/vega-lite/issues/1316\n    transparentIfNeeded;\n    const defaultStroke = (_getMarkPropOrConfig2 = getMarkPropOrConfig(filled === false ? 'color' : undefined, markDef, config, {\n      vgChannel: 'stroke'\n    })) !== null && _getMarkPropOrConfig2 !== void 0 ? _getMarkPropOrConfig2 : // need to add this manually as getMarkConfig normally drops config.mark[channel] if vgChannel is specified\n    config.mark[filled === false && 'color'];\n    const colorVgChannel = filled ? 'fill' : 'stroke';\n    const fillStrokeMarkDefAndConfig = { ...(defaultFill ? {\n        fill: signalOrValueRef(defaultFill)\n      } : {}),\n      ...(defaultStroke ? {\n        stroke: signalOrValueRef(defaultStroke)\n      } : {})\n    };\n\n    if (markDef.color && (filled ? markDef.fill : markDef.stroke)) {\n      warn(droppingColor('property', {\n        fill: 'fill' in markDef,\n        stroke: 'stroke' in markDef\n      }));\n    }\n\n    return { ...fillStrokeMarkDefAndConfig,\n      ...nonPosition('color', model, {\n        vgChannel: colorVgChannel,\n        defaultValue: filled ? defaultFill : defaultStroke\n      }),\n      ...nonPosition('fill', model, {\n        // if there is encoding.fill, include default fill just in case we have conditional-only fill encoding\n        defaultValue: encoding.fill ? defaultFill : undefined\n      }),\n      ...nonPosition('stroke', model, {\n        // if there is encoding.stroke, include default fill just in case we have conditional-only stroke encoding\n        defaultValue: encoding.stroke ? defaultStroke : undefined\n      })\n    };\n  }\n\n  function zindex(model) {\n    const {\n      encoding,\n      mark\n    } = model;\n    const order = encoding.order;\n\n    if (!isPathMark(mark) && isValueDef(order)) {\n      return wrapCondition(model, order, 'zindex', cd => signalOrValueRef(cd.value));\n    }\n\n    return {};\n  }\n\n  /**\n   * Utility files for producing Vega ValueRef for marks\n   */\n  function getOffset(channel, markDef) {\n    const offsetChannel = getOffsetChannel(channel); // TODO: in the future read from encoding channel too\n\n    const markDefOffsetValue = markDef[offsetChannel];\n\n    if (markDefOffsetValue) {\n      return markDefOffsetValue;\n    }\n\n    return undefined;\n  }\n\n  /**\n   * Return encode for point (non-band) position channels.\n   */\n\n  function pointPosition(channel, model, {\n    defaultPos,\n    vgChannel,\n    isMidPoint\n  }) {\n    const {\n      encoding,\n      markDef,\n      config,\n      stack\n    } = model;\n    const channelDef = encoding[channel];\n    const channel2Def = encoding[getSecondaryRangeChannel(channel)];\n    const scaleName = model.scaleName(channel);\n    const scale = model.getScaleComponent(channel);\n    const offset = getOffset(channel, markDef); // Get default position or position from mark def\n\n    const defaultRef = pointPositionDefaultRef({\n      model,\n      defaultPos,\n      channel,\n      scaleName,\n      scale\n    });\n    const valueRef = !channelDef && isXorY(channel) && (encoding.latitude || encoding.longitude) ? // use geopoint output if there are lat/long and there is no point position overriding lat/long.\n    {\n      field: model.getName(channel)\n    } : positionRef({\n      channel,\n      channelDef,\n      channel2Def,\n      markDef,\n      config,\n      isMidPoint,\n      scaleName,\n      scale,\n      stack,\n      offset,\n      defaultRef\n    });\n    return valueRef ? {\n      [vgChannel || channel]: valueRef\n    } : undefined;\n  } // TODO: we need to find a way to refactor these so that scaleName is a part of scale\n  // but that's complicated. For now, this is a huge step moving forward.\n\n  /**\n   * @return Vega ValueRef for normal x- or y-position without projection\n   */\n\n  function positionRef(params) {\n    const {\n      channel,\n      channelDef,\n      isMidPoint,\n      scaleName,\n      stack,\n      offset,\n      markDef,\n      config\n    } = params; // This isn't a part of midPoint because we use midPoint for non-position too\n\n    if (isFieldOrDatumDef(channelDef) && stack && channel === stack.fieldChannel) {\n      if (isFieldDef(channelDef)) {\n        const band = getBand({\n          channel,\n          fieldDef: channelDef,\n          isMidPoint,\n          markDef,\n          stack,\n          config\n        });\n\n        if (band !== undefined) {\n          return interpolatedSignalRef({\n            scaleName,\n            fieldOrDatumDef: channelDef,\n            // positionRef always have type\n            startSuffix: 'start',\n            band,\n            offset\n          });\n        }\n      } // x or y use stack_end so that stacked line's point mark use stack_end too.\n\n\n      return valueRefForFieldOrDatumDef(channelDef, scaleName, {\n        suffix: 'end'\n      }, {\n        offset\n      });\n    }\n\n    return midPointRefWithPositionInvalidTest(params);\n  }\n  function pointPositionDefaultRef({\n    model,\n    defaultPos,\n    channel,\n    scaleName,\n    scale\n  }) {\n    const {\n      markDef,\n      config\n    } = model;\n    return () => {\n      const mainChannel = getMainRangeChannel(channel);\n      const vgChannel = getVgPositionChannel(channel);\n      const definedValueOrConfig = getMarkPropOrConfig(channel, markDef, config, {\n        vgChannel\n      });\n\n      if (definedValueOrConfig !== undefined) {\n        return widthHeightValueOrSignalRef(channel, definedValueOrConfig);\n      }\n\n      switch (defaultPos) {\n        case 'zeroOrMin':\n        case 'zeroOrMax':\n          if (scaleName) {\n            const scaleType = scale.get('type');\n\n            if (contains([ScaleType.LOG, ScaleType.TIME, ScaleType.UTC], scaleType)) ; else {\n              if (scale.domainDefinitelyIncludesZero()) {\n                return {\n                  scale: scaleName,\n                  value: 0\n                };\n              }\n            }\n          }\n\n          if (defaultPos === 'zeroOrMin') {\n            return mainChannel === 'y' ? {\n              field: {\n                group: 'height'\n              }\n            } : {\n              value: 0\n            };\n          } else {\n            // zeroOrMax\n            switch (mainChannel) {\n              case 'radius':\n                // max of radius is min(width, height) / 2\n                return {\n                  signal: \"min(\".concat(model.width.signal, \",\").concat(model.height.signal, \")/2\")\n                };\n\n              case 'theta':\n                return {\n                  signal: '2*PI'\n                };\n\n              case 'x':\n                return {\n                  field: {\n                    group: 'width'\n                  }\n                };\n\n              case 'y':\n                return {\n                  value: 0\n                };\n            }\n          }\n\n          break;\n\n        case 'mid':\n          {\n            const sizeRef = model[getSizeChannel(channel)];\n            return { ...sizeRef,\n              mult: 0.5\n            };\n          }\n      } // defaultPos === null\n\n\n      return undefined;\n    };\n  }\n\n  const ALIGNED_X_CHANNEL = {\n    left: 'x',\n    center: 'xc',\n    right: 'x2'\n  };\n  const BASELINED_Y_CHANNEL = {\n    top: 'y',\n    middle: 'yc',\n    bottom: 'y2'\n  };\n  function vgAlignedPositionChannel(channel, markDef, config, defaultAlign = 'middle') {\n    if (channel === 'radius' || channel === 'theta') {\n      return getVgPositionChannel(channel);\n    }\n\n    const alignChannel = channel === 'x' ? 'align' : 'baseline';\n    const align = getMarkPropOrConfig(alignChannel, markDef, config);\n    let alignExcludingSignal;\n\n    if (isSignalRef(align)) {\n      warn(rangeMarkAlignmentCannotBeExpression(alignChannel));\n      alignExcludingSignal = undefined;\n    } else {\n      alignExcludingSignal = align;\n    }\n\n    if (channel === 'x') {\n      return ALIGNED_X_CHANNEL[alignExcludingSignal || (defaultAlign === 'top' ? 'left' : 'center')];\n    } else {\n      return BASELINED_Y_CHANNEL[alignExcludingSignal || defaultAlign];\n    }\n  }\n\n  /**\n   * Utility for area/rule position, which can be either point or range. (One of the axes should be point and the other should be range.)\n   */\n\n  function pointOrRangePosition(channel, model, {\n    defaultPos,\n    defaultPos2,\n    range\n  }) {\n    if (range) {\n      return rangePosition(channel, model, {\n        defaultPos,\n        defaultPos2\n      });\n    }\n\n    return pointPosition(channel, model, {\n      defaultPos\n    });\n  }\n  function rangePosition(channel, model, {\n    defaultPos,\n    defaultPos2\n  }) {\n    const {\n      markDef,\n      config\n    } = model;\n    const channel2 = getSecondaryRangeChannel(channel);\n    const sizeChannel = getSizeChannel(channel);\n    const pos2Mixins = pointPosition2OrSize(model, defaultPos2, channel2);\n    const vgChannel = pos2Mixins[sizeChannel] ? // If there is width/height, we need to position the marks based on the alignment.\n    vgAlignedPositionChannel(channel, markDef, config) : // Otherwise, make sure to apply to the right Vg Channel (for arc mark)\n    getVgPositionChannel(channel);\n    return { ...pointPosition(channel, model, {\n        defaultPos,\n        vgChannel\n      }),\n      ...pos2Mixins\n    };\n  }\n  /**\n   * Return encode for x2, y2.\n   * If channel is not specified, return one channel based on orientation.\n   */\n\n  function pointPosition2OrSize(model, defaultPos, channel) {\n    const {\n      encoding,\n      mark,\n      markDef,\n      stack,\n      config\n    } = model;\n    const baseChannel = getMainRangeChannel(channel);\n    const sizeChannel = getSizeChannel(channel);\n    const vgChannel = getVgPositionChannel(channel);\n    const channelDef = encoding[baseChannel];\n    const scaleName = model.scaleName(baseChannel);\n    const scale = model.getScaleComponent(baseChannel);\n    const offset = channel in encoding || channel in markDef ? getOffset(channel, model.markDef) : getOffset(baseChannel, model.markDef);\n\n    if (!channelDef && (channel === 'x2' || channel === 'y2') && (encoding.latitude || encoding.longitude)) {\n      // use geopoint output if there are lat2/long2 and there is no point position2 overriding lat2/long2.\n      return {\n        [vgChannel]: {\n          field: model.getName(channel)\n        }\n      };\n    }\n\n    const valueRef = position2Ref({\n      channel,\n      channelDef,\n      channel2Def: encoding[channel],\n      markDef,\n      config,\n      scaleName,\n      scale,\n      stack,\n      offset,\n      defaultRef: undefined\n    });\n\n    if (valueRef !== undefined) {\n      return {\n        [vgChannel]: valueRef\n      };\n    } // TODO: check width/height encoding here once we add them\n    // no x2/y2 encoding, then try to read x2/y2 or width/height based on precedence:\n    // markDef > config.style > mark-specific config (config[mark]) > general mark config (config.mark)\n\n\n    return position2orSize(channel, markDef) || position2orSize(channel, {\n      [channel]: getMarkStyleConfig(channel, markDef, config.style),\n      [sizeChannel]: getMarkStyleConfig(sizeChannel, markDef, config.style)\n    }) || position2orSize(channel, config[mark]) || position2orSize(channel, config.mark) || {\n      [vgChannel]: pointPositionDefaultRef({\n        model,\n        defaultPos,\n        channel,\n        scaleName,\n        scale\n      })()\n    };\n  }\n\n  function position2Ref({\n    channel,\n    channelDef,\n    channel2Def,\n    markDef,\n    config,\n    scaleName,\n    scale,\n    stack,\n    offset,\n    defaultRef\n  }) {\n    if (isFieldOrDatumDef(channelDef) && stack && // If fieldChannel is X and channel is X2 (or Y and Y2)\n    channel.charAt(0) === stack.fieldChannel.charAt(0)) {\n      return valueRefForFieldOrDatumDef(channelDef, scaleName, {\n        suffix: 'start'\n      }, {\n        offset\n      });\n    }\n\n    return midPointRefWithPositionInvalidTest({\n      channel,\n      channelDef: channel2Def,\n      scaleName,\n      scale,\n      stack,\n      markDef,\n      config,\n      offset,\n      defaultRef\n    });\n  }\n\n  function position2orSize(channel, markDef) {\n    const sizeChannel = getSizeChannel(channel);\n    const vgChannel = getVgPositionChannel(channel);\n\n    if (markDef[vgChannel] !== undefined) {\n      return {\n        [vgChannel]: widthHeightValueOrSignalRef(channel, markDef[vgChannel])\n      };\n    } else if (markDef[channel] !== undefined) {\n      return {\n        [vgChannel]: widthHeightValueOrSignalRef(channel, markDef[channel])\n      };\n    } else if (markDef[sizeChannel]) {\n      return {\n        [sizeChannel]: widthHeightValueOrSignalRef(channel, markDef[sizeChannel])\n      };\n    }\n\n    return undefined;\n  }\n\n  function rectPosition(model, channel, mark) {\n    var _ref, _encoding$sizeChannel;\n\n    const {\n      config,\n      encoding,\n      markDef,\n      stack\n    } = model;\n    const channel2 = getSecondaryRangeChannel(channel);\n    const sizeChannel = getSizeChannel(channel);\n    const channelDef = encoding[channel];\n    const channelDef2 = encoding[channel2];\n    const scale = model.getScaleComponent(channel);\n    const scaleType = scale ? scale.get('type') : undefined;\n    const scaleName = model.scaleName(channel);\n    const orient = markDef.orient;\n    const hasSizeDef = (_ref = (_encoding$sizeChannel = encoding[sizeChannel]) !== null && _encoding$sizeChannel !== void 0 ? _encoding$sizeChannel : encoding.size) !== null && _ref !== void 0 ? _ref : getMarkPropOrConfig('size', markDef, config, {\n      vgChannel: sizeChannel\n    });\n    const isBarBand = mark === 'bar' && (channel === 'x' ? orient === 'vertical' : orient === 'horizontal'); // x, x2, and width -- we must specify two of these in all conditions\n\n    if (isFieldDef(channelDef) && (isBinning(channelDef.bin) || isBinned(channelDef.bin) || channelDef.timeUnit && !channelDef2) && !hasSizeDef && !hasDiscreteDomain(scaleType)) {\n      var _model$component$axes, _axis$get;\n\n      const band = getBand({\n        channel,\n        fieldDef: channelDef,\n        stack,\n        markDef,\n        config\n      });\n      const axis = (_model$component$axes = model.component.axes[channel]) === null || _model$component$axes === void 0 ? void 0 : _model$component$axes[0];\n      const axisTranslate = (_axis$get = axis === null || axis === void 0 ? void 0 : axis.get('translate')) !== null && _axis$get !== void 0 ? _axis$get : 0.5; // vega default is 0.5\n\n      return rectBinPosition({\n        fieldDef: channelDef,\n        fieldDef2: channelDef2,\n        channel,\n        markDef,\n        scaleName,\n        band,\n        axisTranslate,\n        spacing: isXorY(channel) ? getMarkPropOrConfig('binSpacing', markDef, config) : undefined,\n        reverse: scale.get('reverse'),\n        config\n      });\n    } else if ((isFieldOrDatumDef(channelDef) && hasDiscreteDomain(scaleType) || isBarBand) && !channelDef2) {\n      return positionAndSize(mark, channelDef, channel, model);\n    } else {\n      return rangePosition(channel, model, {\n        defaultPos: 'zeroOrMax',\n        defaultPos2: 'zeroOrMin'\n      });\n    }\n  }\n\n  function defaultSizeRef(mark, sizeChannel, scaleName, scale, config, band) {\n    if (scale) {\n      const scaleType = scale.get('type');\n\n      if (scaleType === 'point' || scaleType === 'band') {\n        if (config[mark].discreteBandSize !== undefined) {\n          return {\n            value: config[mark].discreteBandSize\n          };\n        }\n\n        if (scaleType === ScaleType.POINT) {\n          const scaleRange = scale.get('range');\n\n          if (isVgRangeStep(scaleRange) && isNumber(scaleRange.step)) {\n            return {\n              value: scaleRange.step - 2\n            };\n          }\n\n          return {\n            value: DEFAULT_STEP - 2\n          };\n        } else {\n          // BAND\n          return {\n            scale: scaleName,\n            band\n          };\n        }\n      } else {\n        // continuous scale\n        return {\n          value: config[mark].continuousBandSize\n        };\n      }\n    } // No Scale\n\n\n    const step = getViewConfigDiscreteStep(config.view, sizeChannel);\n    const value = getFirstDefined( // No scale is like discrete bar (with one item)\n    config[mark].discreteBandSize, step - 2);\n    return value !== undefined ? {\n      value\n    } : undefined;\n  }\n  /**\n   * Output position encoding and its size encoding for continuous, point, and band scales.\n   */\n\n\n  function positionAndSize(mark, fieldDef, channel, model) {\n    var _ref2;\n\n    const {\n      markDef,\n      encoding,\n      config,\n      stack\n    } = model;\n    const orient = markDef.orient;\n    const scaleName = model.scaleName(channel);\n    const scale = model.getScaleComponent(channel);\n    const vgSizeChannel = getSizeChannel(channel);\n    const channel2 = getSecondaryRangeChannel(channel); // use \"size\" channel for bars, if there is orient and the channel matches the right orientation\n\n    const useVlSizeChannel = orient === 'horizontal' && channel === 'y' || orient === 'vertical' && channel === 'x';\n    const sizeFromMarkOrConfig = getMarkPropOrConfig(useVlSizeChannel ? 'size' : vgSizeChannel, markDef, config, {\n      vgChannel: vgSizeChannel\n    }); // Use size encoding / mark property / config if it exists\n\n    let sizeMixins;\n\n    if (encoding.size || sizeFromMarkOrConfig !== undefined) {\n      if (useVlSizeChannel) {\n        sizeMixins = nonPosition('size', model, {\n          vgChannel: vgSizeChannel,\n          defaultValue: sizeFromMarkOrConfig\n        });\n      } else {\n        warn(cannotApplySizeToNonOrientedMark(markDef.type));\n      }\n    } // Otherwise, apply default value\n\n\n    const band = (_ref2 = isFieldOrDatumDef(fieldDef) ? getBand({\n      channel,\n      fieldDef,\n      markDef,\n      stack,\n      config\n    }) : undefined) !== null && _ref2 !== void 0 ? _ref2 : 1;\n    sizeMixins = sizeMixins || {\n      [vgSizeChannel]: defaultSizeRef(mark, vgSizeChannel, scaleName, scale, config, band)\n    };\n    /*\n      Band scales with size value and all point scales, use xc/yc + band=0.5\n       Otherwise (band scales that has size based on a band ref), use x/y with position band = (1 - size_band) / 2.\n      In this case, size_band is the band specified in the x/y-encoding.\n      By default band is 1, so `(1 - band) / 2` = 0.\n      If band is 0.6, the the x/y position in such case should be `(1 - band) / 2` = 0.2\n     */\n\n    const center = (scale === null || scale === void 0 ? void 0 : scale.get('type')) !== 'band' || !('band' in sizeMixins[vgSizeChannel]);\n    const vgChannel = vgAlignedPositionChannel(channel, markDef, config, center ? 'middle' : 'top');\n    const offset = getOffset(channel, markDef);\n    const posRef = midPointRefWithPositionInvalidTest({\n      channel,\n      channelDef: fieldDef,\n      markDef,\n      config,\n      scaleName,\n      scale,\n      stack,\n      offset,\n      defaultRef: pointPositionDefaultRef({\n        model,\n        defaultPos: 'mid',\n        channel,\n        scaleName,\n        scale\n      }),\n      band: center ? 0.5 : (1 - band) / 2\n    });\n\n    if (vgSizeChannel) {\n      return {\n        [vgChannel]: posRef,\n        ...sizeMixins\n      };\n    } else {\n      // otherwise, we must simulate size by setting position2 = position + size\n      // (for theta/radius since Vega doesn't have thetaWidth/radiusWidth)\n      const vgChannel2 = getVgPositionChannel(channel2);\n      const sizeRef = sizeMixins[vgSizeChannel];\n      const sizeOffset = offset ? { ...sizeRef,\n        offset\n      } : sizeRef;\n      return {\n        [vgChannel]: posRef,\n        // posRef might be an array that wraps position invalid test\n        [vgChannel2]: isArray(posRef) ? [posRef[0], { ...posRef[1],\n          offset: sizeOffset\n        }] : { ...posRef,\n          offset: sizeOffset\n        }\n      };\n    }\n  }\n\n  function getBinSpacing(channel, spacing, reverse, translate, offset) {\n    if (isPolarPositionChannel(channel)) {\n      return 0;\n    }\n\n    const spacingOffset = channel === 'x' || channel === 'y2' ? -spacing / 2 : spacing / 2;\n\n    if (isSignalRef(reverse) || isSignalRef(offset) || isSignalRef(translate)) {\n      const reverseExpr = signalOrStringValue(reverse);\n      const offsetExpr = signalOrStringValue(offset);\n      const translateExpr = signalOrStringValue(translate);\n      const t = translateExpr ? \"\".concat(translateExpr, \" + \") : '';\n      const r = reverseExpr ? \"(\".concat(reverseExpr, \" ? -1 : 1) * \") : '';\n      const o = offsetExpr ? \"(\".concat(offsetExpr, \" + \").concat(spacingOffset, \")\") : spacingOffset;\n      return {\n        signal: t + r + o\n      };\n    } else {\n      offset = offset || 0;\n      return translate + (reverse ? -offset - spacingOffset : +offset + spacingOffset);\n    }\n  }\n\n  function rectBinPosition({\n    fieldDef,\n    fieldDef2,\n    channel,\n    band,\n    scaleName,\n    markDef,\n    spacing = 0,\n    axisTranslate,\n    reverse,\n    config\n  }) {\n    const channel2 = getSecondaryRangeChannel(channel);\n    const vgChannel = getVgPositionChannel(channel);\n    const vgChannel2 = getVgPositionChannel(channel2);\n    const offset = getOffset(channel, markDef);\n\n    if (isBinning(fieldDef.bin) || fieldDef.timeUnit) {\n      return {\n        [vgChannel2]: rectBinRef({\n          channel,\n          fieldDef,\n          scaleName,\n          markDef,\n          band: (1 - band) / 2,\n          offset: getBinSpacing(channel2, spacing, reverse, axisTranslate, offset),\n          config\n        }),\n        [vgChannel]: rectBinRef({\n          channel,\n          fieldDef,\n          scaleName,\n          markDef,\n          band: 1 - (1 - band) / 2,\n          offset: getBinSpacing(channel, spacing, reverse, axisTranslate, offset),\n          config\n        })\n      };\n    } else if (isBinned(fieldDef.bin)) {\n      const startRef = valueRefForFieldOrDatumDef(fieldDef, scaleName, {}, {\n        offset: getBinSpacing(channel2, spacing, reverse, axisTranslate, offset)\n      });\n\n      if (isFieldDef(fieldDef2)) {\n        return {\n          [vgChannel2]: startRef,\n          [vgChannel]: valueRefForFieldOrDatumDef(fieldDef2, scaleName, {}, {\n            offset: getBinSpacing(channel, spacing, reverse, axisTranslate, offset)\n          })\n        };\n      } else if (isBinParams(fieldDef.bin) && fieldDef.bin.step) {\n        return {\n          [vgChannel2]: startRef,\n          [vgChannel]: {\n            signal: \"scale(\\\"\".concat(scaleName, \"\\\", \").concat(vgField(fieldDef, {\n              expr: 'datum'\n            }), \" + \").concat(fieldDef.bin.step, \")\"),\n            offset: getBinSpacing(channel, spacing, reverse, axisTranslate, offset)\n          }\n        };\n      }\n    }\n\n    warn(channelRequiredForBinned(channel2));\n    return undefined;\n  }\n  /**\n   * Value Ref for binned fields\n   */\n\n  function rectBinRef({\n    channel,\n    fieldDef,\n    scaleName,\n    markDef,\n    band,\n    offset,\n    config\n  }) {\n    const r = interpolatedSignalRef({\n      scaleName,\n      fieldOrDatumDef: fieldDef,\n      band,\n      offset\n    });\n    return wrapPositionInvalidTest({\n      fieldDef,\n      channel,\n      markDef,\n      ref: r,\n      config\n    });\n  }\n\n  const ALWAYS_IGNORE = new Set(['aria']);\n  function baseEncodeEntry(model, ignore) {\n    const {\n      fill = undefined,\n      stroke = undefined\n    } = ignore.color === 'include' ? color(model) : {};\n    return { ...markDefProperties(model.markDef, ignore),\n      ...wrapAllFieldsInvalid(model, 'fill', fill),\n      ...wrapAllFieldsInvalid(model, 'stroke', stroke),\n      ...nonPosition('opacity', model),\n      ...nonPosition('fillOpacity', model),\n      ...nonPosition('strokeOpacity', model),\n      ...nonPosition('strokeWidth', model),\n      ...nonPosition('strokeDash', model),\n      ...zindex(model),\n      ...tooltip(model),\n      ...text(model, 'href'),\n      ...aria(model)\n    };\n  } // TODO: mark VgValueRef[] as readonly after https://github.com/vega/vega/pull/1987\n\n  function wrapAllFieldsInvalid(model, channel, valueRef) {\n    const {\n      config,\n      mark,\n      markDef\n    } = model;\n    const invalid = getMarkPropOrConfig('invalid', markDef, config);\n\n    if (invalid === 'hide' && valueRef && !isPathMark(mark)) {\n      // For non-path marks, we have to exclude invalid values (null and NaN) for scales with continuous domains.\n      // For path marks, we will use \"defined\" property and skip these values instead.\n      const test = allFieldsInvalidPredicate(model, {\n        invalid: true,\n        channels: SCALE_CHANNELS\n      });\n\n      if (test) {\n        return {\n          [channel]: [// prepend the invalid case\n          // TODO: support custom value\n          {\n            test,\n            value: null\n          }, ...array(valueRef)]\n        };\n      }\n    }\n\n    return valueRef ? {\n      [channel]: valueRef\n    } : {};\n  }\n\n  function markDefProperties(mark, ignore) {\n    return VG_MARK_CONFIGS.reduce((m, prop) => {\n      if (!ALWAYS_IGNORE.has(prop) && mark[prop] !== undefined && ignore[prop] !== 'ignore') {\n        m[prop] = signalOrValueRef(mark[prop]);\n      }\n\n      return m;\n    }, {});\n  }\n\n  function allFieldsInvalidPredicate(model, {\n    invalid = false,\n    channels\n  }) {\n    const filterIndex = channels.reduce((aggregator, channel) => {\n      const scaleComponent = model.getScaleComponent(channel);\n\n      if (scaleComponent) {\n        const scaleType = scaleComponent.get('type');\n        const field = model.vgField(channel, {\n          expr: 'datum'\n        }); // While discrete domain scales can handle invalid values, continuous scales can't.\n\n        if (field && hasContinuousDomain(scaleType)) {\n          aggregator[field] = true;\n        }\n      }\n\n      return aggregator;\n    }, {});\n    const fields = keys(filterIndex);\n\n    if (fields.length > 0) {\n      const op = invalid ? '||' : '&&';\n      return fields.map(field => fieldInvalidPredicate(field, invalid)).join(\" \".concat(op, \" \"));\n    }\n\n    return undefined;\n  }\n\n  function defined(model) {\n    const {\n      config,\n      markDef\n    } = model;\n    const invalid = getMarkPropOrConfig('invalid', markDef, config);\n\n    if (invalid) {\n      const signal = allFieldsInvalidPredicate$1(model, {\n        channels: POSITION_SCALE_CHANNELS\n      });\n\n      if (signal) {\n        return {\n          defined: {\n            signal\n          }\n        };\n      }\n    }\n\n    return {};\n  }\n\n  function allFieldsInvalidPredicate$1(model, {\n    invalid = false,\n    channels\n  }) {\n    const filterIndex = channels.reduce((aggregator, channel) => {\n      const scaleComponent = model.getScaleComponent(channel);\n\n      if (scaleComponent) {\n        const scaleType = scaleComponent.get('type');\n        const field = model.vgField(channel, {\n          expr: 'datum'\n        }); // While discrete domain scales can handle invalid values, continuous scales can't.\n\n        if (field && hasContinuousDomain(scaleType)) {\n          aggregator[field] = true;\n        }\n      }\n\n      return aggregator;\n    }, {});\n    const fields = keys(filterIndex);\n\n    if (fields.length > 0) {\n      const op = invalid ? '||' : '&&';\n      return fields.map(field => fieldInvalidPredicate(field, invalid)).join(\" \".concat(op, \" \"));\n    }\n\n    return undefined;\n  }\n\n  function valueIfDefined(prop, value) {\n    if (value !== undefined) {\n      return {\n        [prop]: signalOrValueRef(value)\n      };\n    }\n\n    return undefined;\n  }\n\n  const VORONOI = 'voronoi';\n  const nearest = {\n    has: selCmpt => {\n      return selCmpt.type !== 'interval' && selCmpt.nearest;\n    },\n    parse: (model, selCmpt) => {\n      // Scope selection events to the voronoi mark to prevent capturing\n      // events that occur on the group mark (https://github.com/vega/vega/issues/2112).\n      if (selCmpt.events) {\n        for (const s of selCmpt.events) {\n          s.markname = model.getName(VORONOI);\n        }\n      }\n    },\n    marks: (model, selCmpt, marks) => {\n      const {\n        x,\n        y\n      } = selCmpt.project.hasChannel;\n      const markType = model.mark;\n\n      if (isPathMark(markType)) {\n        warn(nearestNotSupportForContinuous(markType));\n        return marks;\n      }\n\n      const cellDef = {\n        name: model.getName(VORONOI),\n        type: 'path',\n        interactive: true,\n        from: {\n          data: model.getName('marks')\n        },\n        encode: {\n          update: {\n            fill: {\n              value: 'transparent'\n            },\n            strokeWidth: {\n              value: 0.35\n            },\n            stroke: {\n              value: 'transparent'\n            },\n            isVoronoi: {\n              value: true\n            },\n            ...tooltip(model, {\n              reactiveGeom: true\n            })\n          }\n        },\n        transform: [{\n          type: 'voronoi',\n          x: {\n            expr: x || !y ? 'datum.datum.x || 0' : '0'\n          },\n          y: {\n            expr: y || !x ? 'datum.datum.y || 0' : '0'\n          },\n          size: [model.getSizeSignalRef('width'), model.getSizeSignalRef('height')]\n        }]\n      };\n      let index = 0;\n      let exists = false;\n      marks.forEach((mark, i) => {\n        var _mark$name;\n\n        const name = (_mark$name = mark.name) !== null && _mark$name !== void 0 ? _mark$name : '';\n\n        if (name === model.component.mark[0].name) {\n          index = i;\n        } else if (name.indexOf(VORONOI) >= 0) {\n          exists = true;\n        }\n      });\n\n      if (!exists) {\n        marks.splice(index + 1, 0, cellDef);\n      }\n\n      return marks;\n    }\n  };\n\n  /**\n   * A node in the dataflow tree.\n   */\n\n  class DataFlowNode {\n    constructor(parent, debugName) {\n      this.debugName = debugName;\n\n      _defineProperty(this, \"_children\", []);\n\n      _defineProperty(this, \"_parent\", null);\n\n      _defineProperty(this, \"_hash\", void 0);\n\n      if (parent) {\n        this.parent = parent;\n      }\n    }\n    /**\n     * Clone this node with a deep copy but don't clone links to children or parents.\n     */\n\n\n    clone() {\n      throw new Error('Cannot clone node');\n    }\n    /**\n     * Return a hash of the node.\n     */\n\n\n    get parent() {\n      return this._parent;\n    }\n    /**\n     * Set the parent of the node and also add this node to the parent's children.\n     */\n\n\n    set parent(parent) {\n      this._parent = parent;\n\n      if (parent) {\n        parent.addChild(this);\n      }\n    }\n\n    get children() {\n      return this._children;\n    }\n\n    numChildren() {\n      return this._children.length;\n    }\n\n    addChild(child, loc) {\n      // do not add the same child twice\n      if (this._children.indexOf(child) > -1) {\n        warn(ADD_SAME_CHILD_TWICE);\n        return;\n      }\n\n      if (loc !== undefined) {\n        this._children.splice(loc, 0, child);\n      } else {\n        this._children.push(child);\n      }\n    }\n\n    removeChild(oldChild) {\n      const loc = this._children.indexOf(oldChild);\n\n      this._children.splice(loc, 1);\n\n      return loc;\n    }\n    /**\n     * Remove node from the dataflow.\n     */\n\n\n    remove() {\n      let loc = this._parent.removeChild(this);\n\n      for (const child of this._children) {\n        // do not use the set method because we want to insert at a particular location\n        child._parent = this._parent;\n\n        this._parent.addChild(child, loc++);\n      }\n    }\n    /**\n     * Insert another node as a parent of this node.\n     */\n\n\n    insertAsParentOf(other) {\n      const parent = other.parent;\n      parent.removeChild(this);\n      this.parent = parent;\n      other.parent = this;\n    }\n\n    swapWithParent() {\n      const parent = this._parent;\n      const newParent = parent.parent; // reconnect the children\n\n      for (const child of this._children) {\n        child.parent = parent;\n      } // remove old links\n\n\n      this._children = []; // equivalent to removing every child link one by one\n\n      parent.removeChild(this);\n      parent.parent.removeChild(parent); // swap two nodes\n\n      this.parent = newParent;\n      parent.parent = this;\n    }\n\n  }\n  class OutputNode extends DataFlowNode {\n    clone() {\n      const cloneObj = new this.constructor();\n      cloneObj.debugName = 'clone_' + this.debugName;\n      cloneObj._source = this._source;\n      cloneObj._name = 'clone_' + this._name;\n      cloneObj.type = this.type;\n      cloneObj.refCounts = this.refCounts;\n      cloneObj.refCounts[cloneObj._name] = 0;\n      return cloneObj;\n    }\n    /**\n     * @param source The name of the source. Will change in assemble.\n     * @param type The type of the output node.\n     * @param refCounts A global ref counter map.\n     */\n\n\n    constructor(parent, source, type, refCounts) {\n      super(parent, source);\n      this.type = type;\n      this.refCounts = refCounts;\n\n      _defineProperty(this, \"_source\", void 0);\n\n      _defineProperty(this, \"_name\", void 0);\n\n      this._source = this._name = source;\n\n      if (this.refCounts && !(this._name in this.refCounts)) {\n        this.refCounts[this._name] = 0;\n      }\n    }\n\n    dependentFields() {\n      return new Set();\n    }\n\n    producedFields() {\n      return new Set();\n    }\n\n    hash() {\n      if (this._hash === undefined) {\n        this._hash = \"Output \".concat(uniqueId());\n      }\n\n      return this._hash;\n    }\n    /**\n     * Request the datasource name and increase the ref counter.\n     *\n     * During the parsing phase, this will return the simple name such as 'main' or 'raw'.\n     * It is crucial to request the name from an output node to mark it as a required node.\n     * If nobody ever requests the name, this datasource will not be instantiated in the assemble phase.\n     *\n     * In the assemble phase, this will return the correct name.\n     */\n\n\n    getSource() {\n      this.refCounts[this._name]++;\n      return this._source;\n    }\n\n    isRequired() {\n      return !!this.refCounts[this._name];\n    }\n\n    setSource(source) {\n      this._source = source;\n    }\n\n  }\n\n  class TimeUnitNode extends DataFlowNode {\n    clone() {\n      return new TimeUnitNode(null, duplicate(this.formula));\n    }\n\n    constructor(parent, formula) {\n      super(parent);\n      this.formula = formula;\n    }\n\n    static makeFromEncoding(parent, model) {\n      const formula = model.reduceFieldDef((timeUnitComponent, fieldDef, channel) => {\n        const {\n          field,\n          timeUnit\n        } = fieldDef;\n        const channelDef2 = isUnitModel(model) ? model.encoding[getSecondaryRangeChannel(channel)] : undefined;\n        const band = isUnitModel(model) && hasBand(channel, fieldDef, channelDef2, model.stack, model.markDef, model.config);\n\n        if (timeUnit) {\n          const as = vgField(fieldDef, {\n            forAs: true\n          });\n          timeUnitComponent[hash({\n            as,\n            field,\n            timeUnit\n          })] = {\n            as,\n            field,\n            timeUnit,\n            ...(band ? {\n              band: true\n            } : {})\n          };\n        }\n\n        return timeUnitComponent;\n      }, {});\n\n      if (isEmpty(formula)) {\n        return null;\n      }\n\n      return new TimeUnitNode(parent, formula);\n    }\n\n    static makeFromTransform(parent, t) {\n      const {\n        timeUnit,\n        ...other\n      } = { ...t\n      };\n      const normalizedTimeUnit = normalizeTimeUnit(timeUnit);\n      const component = { ...other,\n        timeUnit: normalizedTimeUnit\n      };\n      return new TimeUnitNode(parent, {\n        [hash(component)]: component\n      });\n    }\n    /**\n     * Merge together TimeUnitNodes assigning the children of `other` to `this`\n     * and removing `other`.\n     */\n\n\n    merge(other) {\n      this.formula = { ...this.formula\n      }; // if the same hash happen twice, merge \"band\"\n\n      for (const key in other.formula) {\n        if (!this.formula[key] || other.formula[key].band) {\n          // copy if it's not a duplicate or if we need to copy band over\n          this.formula[key] = other.formula[key];\n        }\n      }\n\n      for (const child of other.children) {\n        other.removeChild(child);\n        child.parent = this;\n      }\n\n      other.remove();\n    }\n    /**\n     * Remove time units coming from the other node.\n     */\n\n\n    removeFormulas(fields) {\n      const newFormula = {};\n\n      for (const [key, timeUnit] of entries(this.formula)) {\n        if (!fields.has(timeUnit.as)) {\n          newFormula[key] = timeUnit;\n        }\n      }\n\n      this.formula = newFormula;\n    }\n\n    producedFields() {\n      return new Set(vals(this.formula).map(f => f.as));\n    }\n\n    dependentFields() {\n      return new Set(vals(this.formula).map(f => f.field));\n    }\n\n    hash() {\n      return \"TimeUnit \".concat(hash(this.formula));\n    }\n\n    assemble() {\n      const transforms = [];\n\n      for (const f of vals(this.formula)) {\n        const {\n          field,\n          as,\n          timeUnit\n        } = f;\n        const {\n          unit,\n          utc,\n          ...params\n        } = normalizeTimeUnit(timeUnit);\n        transforms.push({\n          field: replacePathInField(field),\n          type: 'timeunit',\n          ...(unit ? {\n            units: getTimeUnitParts(unit)\n          } : {}),\n          ...(utc ? {\n            timezone: 'utc'\n          } : {}),\n          ...params,\n          as: [as, \"\".concat(as, \"_end\")]\n        });\n      }\n\n      return transforms;\n    }\n\n  }\n\n  const TUPLE_FIELDS = '_tuple_fields';\n  /**\n   * Whether the selection tuples hold enumerated or ranged values for a field.\n   */\n\n  class SelectionProjectionComponent {\n    constructor(...items) {\n      _defineProperty(this, \"hasChannel\", void 0);\n\n      _defineProperty(this, \"hasField\", void 0);\n\n      _defineProperty(this, \"timeUnit\", void 0);\n\n      _defineProperty(this, \"items\", void 0);\n\n      this.items = items;\n      this.hasChannel = {};\n      this.hasField = {};\n    }\n\n  }\n  const project = {\n    has: () => {\n      return true; // This transform handles its own defaults, so always run parse.\n    },\n    parse: (model, selCmpt, selDef) => {\n      var _selCmpt$project;\n\n      const name = selCmpt.name;\n      const proj = (_selCmpt$project = selCmpt.project) !== null && _selCmpt$project !== void 0 ? _selCmpt$project : selCmpt.project = new SelectionProjectionComponent();\n      const parsed = {};\n      const timeUnits = {};\n      const signals = new Set();\n\n      const signalName = (p, range) => {\n        const suffix = range === 'visual' ? p.channel : p.field;\n        let sg = varName(\"\".concat(name, \"_\").concat(suffix));\n\n        for (let counter = 1; signals.has(sg); counter++) {\n          sg = varName(\"\".concat(name, \"_\").concat(suffix, \"_\").concat(counter));\n        }\n\n        signals.add(sg);\n        return {\n          [range]: sg\n        };\n      }; // If no explicit projection (either fields or encodings) is specified, set some defaults.\n      // If an initial value is set, try to infer projections.\n      // Otherwise, use the default configuration.\n\n\n      if (!selDef.fields && !selDef.encodings) {\n        const cfg = model.config.selection[selDef.type];\n\n        if (selDef.init) {\n          for (const init of array(selDef.init)) {\n            for (const key of keys(init)) {\n              if (isSingleDefUnitChannel(key)) {\n                (selDef.encodings || (selDef.encodings = [])).push(key);\n              } else {\n                if (selDef.type === 'interval') {\n                  warn(INTERVAL_INITIALIZED_WITH_X_Y);\n                  selDef.encodings = cfg.encodings;\n                } else {\n                  (selDef.fields || (selDef.fields = [])).push(key);\n                }\n              }\n            }\n          }\n        } else {\n          selDef.encodings = cfg.encodings;\n          selDef.fields = cfg.fields;\n        }\n      } // TODO: find a possible channel mapping for these fields.\n\n\n      for (const field of (_selDef$fields = selDef.fields) !== null && _selDef$fields !== void 0 ? _selDef$fields : []) {\n        var _selDef$fields;\n\n        const p = {\n          type: 'E',\n          field\n        };\n        p.signals = { ...signalName(p, 'data')\n        };\n        proj.items.push(p);\n        proj.hasField[field] = p;\n      }\n\n      for (const channel of (_selDef$encodings = selDef.encodings) !== null && _selDef$encodings !== void 0 ? _selDef$encodings : []) {\n        var _selDef$encodings;\n\n        const fieldDef = model.fieldDef(channel);\n\n        if (fieldDef) {\n          let field = fieldDef.field;\n\n          if (fieldDef.aggregate) {\n            warn(cannotProjectAggregate(channel, fieldDef.aggregate));\n            continue;\n          } else if (!field) {\n            warn(cannotProjectOnChannelWithoutField(channel));\n            continue;\n          }\n\n          if (fieldDef.timeUnit) {\n            field = model.vgField(channel); // Construct TimeUnitComponents which will be combined into a\n            // TimeUnitNode. This node may need to be inserted into the\n            // dataflow if the selection is used across views that do not\n            // have these time units defined.\n\n            const component = {\n              timeUnit: fieldDef.timeUnit,\n              as: field,\n              field: fieldDef.field\n            };\n            timeUnits[hash(component)] = component;\n          } // Prevent duplicate projections on the same field.\n          // TODO: what if the same field is bound to multiple channels (e.g., SPLOM diag).\n\n\n          if (!parsed[field]) {\n            // Determine whether the tuple will store enumerated or ranged values.\n            // Interval selections store ranges for continuous scales, and enumerations otherwise.\n            // Single/multi selections store ranges for binned fields, and enumerations otherwise.\n            let type = 'E';\n\n            if (selCmpt.type === 'interval') {\n              const scaleType = model.getScaleComponent(channel).get('type');\n\n              if (hasContinuousDomain(scaleType)) {\n                type = 'R';\n              }\n            } else if (fieldDef.bin) {\n              type = 'R-RE';\n            }\n\n            const p = {\n              field,\n              channel,\n              type\n            };\n            p.signals = { ...signalName(p, 'data'),\n              ...signalName(p, 'visual')\n            };\n            proj.items.push(parsed[field] = p);\n            proj.hasField[field] = proj.hasChannel[channel] = parsed[field];\n          }\n        } else {\n          warn(cannotProjectOnChannelWithoutField(channel));\n        }\n      }\n\n      if (selDef.init) {\n        const parseInit = i => {\n          return proj.items.map(p => i[p.channel] !== undefined ? i[p.channel] : i[p.field]);\n        };\n\n        if (selDef.type === 'interval') {\n          selCmpt.init = parseInit(selDef.init);\n        } else {\n          const init = array(selDef.init);\n          selCmpt.init = init.map(parseInit);\n        }\n      }\n\n      if (!isEmpty(timeUnits)) {\n        proj.timeUnit = new TimeUnitNode(null, timeUnits);\n      }\n    },\n    signals: (model, selCmpt, allSignals) => {\n      const name = selCmpt.name + TUPLE_FIELDS;\n      const hasSignal = allSignals.filter(s => s.name === name);\n      return hasSignal.length > 0 ? allSignals : allSignals.concat({\n        name,\n        value: selCmpt.project.items.map(proj => {\n          const {\n            signals,\n            hasLegend,\n            ...rest\n          } = proj;\n          rest.field = replacePathInField(rest.field);\n          return rest;\n        })\n      });\n    }\n  };\n\n  const inputBindings = {\n    has: selCmpt => {\n      return selCmpt.type === 'single' && selCmpt.resolve === 'global' && selCmpt.bind && selCmpt.bind !== 'scales' && !isLegendBinding(selCmpt.bind);\n    },\n    parse: (model, selCmpt, selDef, origDef) => {\n      // Binding a selection to input widgets disables default direct manipulation interaction.\n      // A user can choose to re-enable it by explicitly specifying triggering input events.\n      if (!origDef.on) delete selCmpt.events;\n      if (!origDef.clear) delete selCmpt.clear;\n    },\n    topLevelSignals: (model, selCmpt, signals) => {\n      const name = selCmpt.name;\n      const proj = selCmpt.project;\n      const bind = selCmpt.bind;\n      const init = selCmpt.init && selCmpt.init[0]; // Can only exist on single selections (one initial value).\n\n      const datum = nearest.has(selCmpt) ? '(item().isVoronoi ? datum.datum : datum)' : 'datum';\n      proj.items.forEach((p, i) => {\n        const sgname = varName(\"\".concat(name, \"_\").concat(p.field));\n        const hasSignal = signals.filter(s => s.name === sgname);\n\n        if (!hasSignal.length) {\n          var _ref, _bind$p$field;\n\n          signals.unshift({\n            name: sgname,\n            ...(init ? {\n              init: assembleInit(init[i])\n            } : {\n              value: null\n            }),\n            on: selCmpt.events ? [{\n              events: selCmpt.events,\n              update: \"datum && item().mark.marktype !== 'group' ? \".concat(datum, \"[\").concat($(p.field), \"] : null\")\n            }] : [],\n            bind: (_ref = (_bind$p$field = bind[p.field]) !== null && _bind$p$field !== void 0 ? _bind$p$field : bind[p.channel]) !== null && _ref !== void 0 ? _ref : bind\n          });\n        }\n      });\n      return signals;\n    },\n    signals: (model, selCmpt, signals) => {\n      const name = selCmpt.name;\n      const proj = selCmpt.project;\n      const signal = signals.filter(s => s.name === name + TUPLE)[0];\n      const fields = name + TUPLE_FIELDS;\n      const values = proj.items.map(p => varName(\"\".concat(name, \"_\").concat(p.field)));\n      const valid = values.map(v => \"\".concat(v, \" !== null\")).join(' && ');\n\n      if (values.length) {\n        signal.update = \"\".concat(valid, \" ? {fields: \").concat(fields, \", values: [\").concat(values.join(', '), \"]} : null\");\n      }\n\n      delete signal.value;\n      delete signal.on;\n      return signals;\n    }\n  };\n\n  const TOGGLE = '_toggle';\n  const toggle = {\n    has: selCmpt => {\n      return selCmpt.type === 'multi' && !!selCmpt.toggle;\n    },\n    signals: (model, selCmpt, signals) => {\n      return signals.concat({\n        name: selCmpt.name + TOGGLE,\n        value: false,\n        on: [{\n          events: selCmpt.events,\n          update: selCmpt.toggle\n        }]\n      });\n    },\n    modifyExpr: (model, selCmpt) => {\n      const tpl = selCmpt.name + TUPLE;\n      const signal = selCmpt.name + TOGGLE;\n      return \"\".concat(signal, \" ? null : \").concat(tpl, \", \") + (selCmpt.resolve === 'global' ? \"\".concat(signal, \" ? null : true, \") : \"\".concat(signal, \" ? null : {unit: \").concat(unitName(model), \"}, \")) + \"\".concat(signal, \" ? \").concat(tpl, \" : null\");\n    }\n  };\n\n  const clear = {\n    has: selCmpt => {\n      return selCmpt.clear !== undefined && selCmpt.clear !== false;\n    },\n    parse: (model, selCmpt, selDef) => {\n      if (selDef.clear) {\n        selCmpt.clear = isString(selDef.clear) ? eventSelector(selDef.clear, 'scope') : selDef.clear;\n      }\n    },\n    topLevelSignals: (model, selCmpt, signals) => {\n      if (inputBindings.has(selCmpt)) {\n        for (const proj of selCmpt.project.items) {\n          const idx = signals.findIndex(n => n.name === varName(\"\".concat(selCmpt.name, \"_\").concat(proj.field)));\n\n          if (idx !== -1) {\n            signals[idx].on.push({\n              events: selCmpt.clear,\n              update: 'null'\n            });\n          }\n        }\n      }\n\n      return signals;\n    },\n    signals: (model, selCmpt, signals) => {\n      function addClear(idx, update) {\n        if (idx !== -1 && signals[idx].on) {\n          signals[idx].on.push({\n            events: selCmpt.clear,\n            update\n          });\n        }\n      } // Be as minimalist as possible when adding clear triggers to minimize dataflow execution.\n\n\n      if (selCmpt.type === 'interval') {\n        for (const proj of selCmpt.project.items) {\n          const vIdx = signals.findIndex(n => n.name === proj.signals.visual);\n          addClear(vIdx, '[0, 0]');\n\n          if (vIdx === -1) {\n            const dIdx = signals.findIndex(n => n.name === proj.signals.data);\n            addClear(dIdx, 'null');\n          }\n        }\n      } else {\n        let tIdx = signals.findIndex(n => n.name === selCmpt.name + TUPLE);\n        addClear(tIdx, 'null');\n\n        if (toggle.has(selCmpt)) {\n          tIdx = signals.findIndex(n => n.name === selCmpt.name + TOGGLE);\n          addClear(tIdx, 'false');\n        }\n      }\n\n      return signals;\n    }\n  };\n\n  const scaleBindings = {\n    has: selCmpt => {\n      return selCmpt.type === 'interval' && selCmpt.resolve === 'global' && selCmpt.bind && selCmpt.bind === 'scales';\n    },\n    parse: (model, selCmpt) => {\n      const bound = selCmpt.scales = [];\n\n      for (const proj of selCmpt.project.items) {\n        const channel = proj.channel;\n\n        if (!isScaleChannel(channel)) {\n          continue;\n        }\n\n        const scale = model.getScaleComponent(channel);\n        const scaleType = scale ? scale.get('type') : undefined;\n\n        if (!scale || !hasContinuousDomain(scaleType)) {\n          warn(SCALE_BINDINGS_CONTINUOUS);\n          continue;\n        }\n\n        const extent = {\n          selection: selCmpt.name,\n          field: proj.field\n        };\n        scale.set('selectionExtent', extent, true);\n        bound.push(proj);\n      }\n    },\n    topLevelSignals: (model, selCmpt, signals) => {\n      const bound = selCmpt.scales.filter(proj => signals.filter(s => s.name === proj.signals.data).length === 0); // Top-level signals are only needed for multiview displays and if this\n      // view's top-level signals haven't already been generated.\n\n      if (!model.parent || isTopLevelLayer(model) || bound.length === 0) {\n        return signals;\n      } // vlSelectionResolve does not account for the behavior of bound scales in\n      // multiview displays. Each unit view adds a tuple to the store, but the\n      // state of the selection is the unit selection most recently updated. This\n      // state is captured by the top-level signals that we insert and \"push\n      // outer\" to from within the units. We need to reassemble this state into\n      // the top-level named signal, except no single selCmpt has a global view.\n\n\n      const namedSg = signals.filter(s => s.name === selCmpt.name)[0];\n      let update = namedSg.update;\n\n      if (update.indexOf(VL_SELECTION_RESOLVE) >= 0) {\n        namedSg.update = \"{\".concat(bound.map(proj => \"\".concat($(proj.field), \": \").concat(proj.signals.data)).join(', '), \"}\");\n      } else {\n        for (const proj of bound) {\n          const mapping = \"\".concat($(proj.field), \": \").concat(proj.signals.data);\n\n          if (update.indexOf(mapping) < 0) {\n            update = \"\".concat(update.substring(0, update.length - 1), \", \").concat(mapping, \"}\");\n          }\n        }\n\n        namedSg.update = update;\n      }\n\n      return signals.concat(bound.map(proj => ({\n        name: proj.signals.data\n      })));\n    },\n    signals: (model, selCmpt, signals) => {\n      // Nested signals need only push to top-level signals with multiview displays.\n      if (model.parent && !isTopLevelLayer(model)) {\n        for (const proj of selCmpt.scales) {\n          const signal = signals.filter(s => s.name === proj.signals.data)[0];\n          signal.push = 'outer';\n          delete signal.value;\n          delete signal.update;\n        }\n      }\n\n      return signals;\n    }\n  };\n  function domain$1(model, channel) {\n    const scale = $(model.scaleName(channel));\n    return \"domain(\".concat(scale, \")\");\n  }\n\n  function isTopLevelLayer(model) {\n    var _model$parent$parent;\n\n    return model.parent && isLayerModel(model.parent) && ((_model$parent$parent = !model.parent.parent) !== null && _model$parent$parent !== void 0 ? _model$parent$parent : isTopLevelLayer(model.parent.parent));\n  }\n\n  const legendBindings = {\n    has: selCmpt => {\n      const spec = selCmpt.resolve === 'global' && selCmpt.bind && isLegendBinding(selCmpt.bind);\n      const projLen = selCmpt.project.items.length === 1 && selCmpt.project.items[0].field !== SELECTION_ID;\n\n      if (spec && !projLen) {\n        warn(LEGEND_BINDINGS_MUST_HAVE_PROJECTION);\n      }\n\n      return spec && projLen;\n    },\n    parse: (model, selCmpt, selDef, origDef) => {\n      // Binding a selection to a legend disables default direct manipulation interaction.\n      // A user can choose to re-enable it by explicitly specifying triggering input events.\n      if (!origDef.on) delete selCmpt.events;\n      if (!origDef.clear) delete selCmpt.clear;\n\n      if (origDef.on || origDef.clear) {\n        const legendFilter = 'event.item && indexof(event.item.mark.role, \"legend\") < 0';\n\n        for (const evt of selCmpt.events) {\n          var _evt$filter;\n\n          evt.filter = array((_evt$filter = evt.filter) !== null && _evt$filter !== void 0 ? _evt$filter : []);\n\n          if (evt.filter.indexOf(legendFilter) < 0) {\n            evt.filter.push(legendFilter);\n          }\n        }\n      }\n\n      const evt = isLegendStreamBinding(selCmpt.bind) ? selCmpt.bind.legend : 'click';\n      const stream = isString(evt) ? eventSelector(evt, 'view') : array(evt);\n      selCmpt.bind = {\n        legend: {\n          merge: stream\n        }\n      };\n    },\n    topLevelSignals: (model, selCmpt, signals) => {\n      const selName = selCmpt.name;\n      const stream = isLegendStreamBinding(selCmpt.bind) && selCmpt.bind.legend;\n\n      const markName = name => s => {\n        const ds = duplicate(s);\n        ds.markname = name;\n        return ds;\n      };\n\n      for (const proj of selCmpt.project.items) {\n        if (!proj.hasLegend) continue;\n        const prefix = \"\".concat(varName(proj.field), \"_legend\");\n        const sgName = \"\".concat(selName, \"_\").concat(prefix);\n        const hasSignal = signals.filter(s => s.name === sgName);\n\n        if (hasSignal.length === 0) {\n          const events = stream.merge.map(markName(\"\".concat(prefix, \"_symbols\"))).concat(stream.merge.map(markName(\"\".concat(prefix, \"_labels\")))).concat(stream.merge.map(markName(\"\".concat(prefix, \"_entries\"))));\n          signals.unshift({\n            name: sgName,\n            ...(!selCmpt.init ? {\n              value: null\n            } : {}),\n            on: [// Legend entries do not store values, so we need to walk the scenegraph to the symbol datum.\n            {\n              events,\n              update: 'datum.value || item().items[0].items[0].datum.value',\n              force: true\n            }, {\n              events: stream.merge,\n              update: \"!event.item || !datum ? null : \".concat(sgName),\n              force: true\n            }]\n          });\n        }\n      }\n\n      return signals;\n    },\n    signals: (model, selCmpt, signals) => {\n      const name = selCmpt.name;\n      const proj = selCmpt.project;\n      const tuple = signals.find(s => s.name === name + TUPLE);\n      const fields = name + TUPLE_FIELDS;\n      const values = proj.items.filter(p => p.hasLegend).map(p => varName(\"\".concat(name, \"_\").concat(varName(p.field), \"_legend\")));\n      const valid = values.map(v => \"\".concat(v, \" !== null\")).join(' && ');\n      const update = \"\".concat(valid, \" ? {fields: \").concat(fields, \", values: [\").concat(values.join(', '), \"]} : null\");\n\n      if (selCmpt.events && values.length > 0) {\n        tuple.on.push({\n          events: values.map(signal => ({\n            signal\n          })),\n          update\n        });\n      } else if (values.length > 0) {\n        tuple.update = update;\n        delete tuple.value;\n        delete tuple.on;\n      }\n\n      const toggle = signals.find(s => s.name === name + TOGGLE);\n      const events = isLegendStreamBinding(selCmpt.bind) && selCmpt.bind.legend;\n\n      if (toggle) {\n        if (!selCmpt.events) toggle.on[0].events = events;else toggle.on.push({ ...toggle.on[0],\n          events\n        });\n      }\n\n      return signals;\n    }\n  };\n  function parseInteractiveLegend(model, channel, legendCmpt) {\n    var _model$fieldDef;\n\n    const field = (_model$fieldDef = model.fieldDef(channel)) === null || _model$fieldDef === void 0 ? void 0 : _model$fieldDef.field;\n    forEachSelection(model, selCmpt => {\n      var _selCmpt$project$hasF;\n\n      const proj = (_selCmpt$project$hasF = selCmpt.project.hasField[field]) !== null && _selCmpt$project$hasF !== void 0 ? _selCmpt$project$hasF : selCmpt.project.hasChannel[channel];\n\n      if (proj && legendBindings.has(selCmpt)) {\n        var _legendCmpt$get;\n\n        const legendSelections = (_legendCmpt$get = legendCmpt.get('selections')) !== null && _legendCmpt$get !== void 0 ? _legendCmpt$get : [];\n        legendSelections.push(selCmpt.name);\n        legendCmpt.set('selections', legendSelections, false);\n        proj.hasLegend = true;\n      }\n    });\n  }\n\n  const ANCHOR = '_translate_anchor';\n  const DELTA = '_translate_delta';\n  const translate = {\n    has: selCmpt => {\n      return selCmpt.type === 'interval' && selCmpt.translate;\n    },\n    signals: (model, selCmpt, signals) => {\n      const name = selCmpt.name;\n      const hasScales = scaleBindings.has(selCmpt);\n      const anchor = name + ANCHOR;\n      const {\n        x,\n        y\n      } = selCmpt.project.hasChannel;\n      let events = eventSelector(selCmpt.translate, 'scope');\n\n      if (!hasScales) {\n        events = events.map(e => (e.between[0].markname = name + BRUSH, e));\n      }\n\n      signals.push({\n        name: anchor,\n        value: {},\n        on: [{\n          events: events.map(e => e.between[0]),\n          update: '{x: x(unit), y: y(unit)' + (x !== undefined ? ', extent_x: ' + (hasScales ? domain$1(model, X) : \"slice(\".concat(x.signals.visual, \")\")) : '') + (y !== undefined ? ', extent_y: ' + (hasScales ? domain$1(model, Y) : \"slice(\".concat(y.signals.visual, \")\")) : '') + '}'\n        }]\n      }, {\n        name: name + DELTA,\n        value: {},\n        on: [{\n          events: events,\n          update: \"{x: \".concat(anchor, \".x - x(unit), y: \").concat(anchor, \".y - y(unit)}\")\n        }]\n      });\n\n      if (x !== undefined) {\n        onDelta(model, selCmpt, x, 'width', signals);\n      }\n\n      if (y !== undefined) {\n        onDelta(model, selCmpt, y, 'height', signals);\n      }\n\n      return signals;\n    }\n  };\n\n  function onDelta(model, selCmpt, proj, size, signals) {\n    var _scaleCmpt$get;\n\n    const name = selCmpt.name;\n    const anchor = name + ANCHOR;\n    const delta = name + DELTA;\n    const channel = proj.channel;\n    const hasScales = scaleBindings.has(selCmpt);\n    const signal = signals.filter(s => s.name === proj.signals[hasScales ? 'data' : 'visual'])[0];\n    const sizeSg = model.getSizeSignalRef(size).signal;\n    const scaleCmpt = model.getScaleComponent(channel);\n    const scaleType = scaleCmpt.get('type');\n    const sign = hasScales && channel === X ? '-' : ''; // Invert delta when panning x-scales.\n\n    const extent = \"\".concat(anchor, \".extent_\").concat(channel);\n    const offset = \"\".concat(sign).concat(delta, \".\").concat(channel, \" / \") + (hasScales ? \"\".concat(sizeSg) : \"span(\".concat(extent, \")\"));\n    const panFn = !hasScales ? 'panLinear' : scaleType === 'log' ? 'panLog' : scaleType === 'pow' ? 'panPow' : 'panLinear';\n    const update = \"\".concat(panFn, \"(\").concat(extent, \", \").concat(offset) + (hasScales && scaleType === 'pow' ? \", \".concat((_scaleCmpt$get = scaleCmpt.get('exponent')) !== null && _scaleCmpt$get !== void 0 ? _scaleCmpt$get : 1) : '') + ')';\n    signal.on.push({\n      events: {\n        signal: delta\n      },\n      update: hasScales ? update : \"clampRange(\".concat(update, \", 0, \").concat(sizeSg, \")\")\n    });\n  }\n\n  const ANCHOR$1 = '_zoom_anchor';\n  const DELTA$1 = '_zoom_delta';\n  const zoom = {\n    has: selCmpt => {\n      return selCmpt.type === 'interval' && selCmpt.zoom;\n    },\n    signals: (model, selCmpt, signals) => {\n      const name = selCmpt.name;\n      const hasScales = scaleBindings.has(selCmpt);\n      const delta = name + DELTA$1;\n      const {\n        x,\n        y\n      } = selCmpt.project.hasChannel;\n      const sx = $(model.scaleName(X));\n      const sy = $(model.scaleName(Y));\n      let events = eventSelector(selCmpt.zoom, 'scope');\n\n      if (!hasScales) {\n        events = events.map(e => (e.markname = name + BRUSH, e));\n      }\n\n      signals.push({\n        name: name + ANCHOR$1,\n        on: [{\n          events: events,\n          update: !hasScales ? \"{x: x(unit), y: y(unit)}\" : '{' + [sx ? \"x: invert(\".concat(sx, \", x(unit))\") : '', sy ? \"y: invert(\".concat(sy, \", y(unit))\") : ''].filter(expr => !!expr).join(', ') + '}'\n        }]\n      }, {\n        name: delta,\n        on: [{\n          events: events,\n          force: true,\n          update: 'pow(1.001, event.deltaY * pow(16, event.deltaMode))'\n        }]\n      });\n\n      if (x !== undefined) {\n        onDelta$1(model, selCmpt, x, 'width', signals);\n      }\n\n      if (y !== undefined) {\n        onDelta$1(model, selCmpt, y, 'height', signals);\n      }\n\n      return signals;\n    }\n  };\n\n  function onDelta$1(model, selCmpt, proj, size, signals) {\n    var _scaleCmpt$get;\n\n    const name = selCmpt.name;\n    const channel = proj.channel;\n    const hasScales = scaleBindings.has(selCmpt);\n    const signal = signals.filter(s => s.name === proj.signals[hasScales ? 'data' : 'visual'])[0];\n    const sizeSg = model.getSizeSignalRef(size).signal;\n    const scaleCmpt = model.getScaleComponent(channel);\n    const scaleType = scaleCmpt.get('type');\n    const base = hasScales ? domain$1(model, channel) : signal.name;\n    const delta = name + DELTA$1;\n    const anchor = \"\".concat(name).concat(ANCHOR$1, \".\").concat(channel);\n    const zoomFn = !hasScales ? 'zoomLinear' : scaleType === 'log' ? 'zoomLog' : scaleType === 'pow' ? 'zoomPow' : 'zoomLinear';\n    const update = \"\".concat(zoomFn, \"(\").concat(base, \", \").concat(anchor, \", \").concat(delta) + (hasScales && scaleType === 'pow' ? \", \".concat((_scaleCmpt$get = scaleCmpt.get('exponent')) !== null && _scaleCmpt$get !== void 0 ? _scaleCmpt$get : 1) : '') + ')';\n    signal.on.push({\n      events: {\n        signal: delta\n      },\n      update: hasScales ? update : \"clampRange(\".concat(update, \", 0, \").concat(sizeSg, \")\")\n    });\n  }\n\n  const compilers = [project, toggle, scaleBindings, legendBindings, translate, zoom, inputBindings, nearest, clear];\n  function forEachTransform(selCmpt, cb) {\n    for (const t of compilers) {\n      if (t.has(selCmpt)) {\n        cb(t);\n      }\n    }\n  }\n\n  function assembleInit(init, isExpr = true, wrap = identity) {\n    if (isArray(init)) {\n      const assembled = init.map(v => assembleInit(v, isExpr, wrap));\n      return isExpr ? \"[\".concat(assembled.join(', '), \"]\") : assembled;\n    } else if (isDateTime(init)) {\n      if (isExpr) {\n        return wrap(dateTimeToExpr(init));\n      } else {\n        return wrap(dateTimeToTimestamp(init));\n      }\n    }\n\n    return isExpr ? wrap(JSON.stringify(init)) : init;\n  }\n  function assembleUnitSelectionSignals(model, signals) {\n    forEachSelection(model, (selCmpt, selCompiler) => {\n      const name = selCmpt.name;\n      let modifyExpr = selCompiler.modifyExpr(model, selCmpt);\n      signals.push(...selCompiler.signals(model, selCmpt));\n      forEachTransform(selCmpt, txCompiler => {\n        if (txCompiler.signals) {\n          signals = txCompiler.signals(model, selCmpt, signals);\n        }\n\n        if (txCompiler.modifyExpr) {\n          modifyExpr = txCompiler.modifyExpr(model, selCmpt, modifyExpr);\n        }\n      });\n      signals.push({\n        name: name + MODIFY,\n        on: [{\n          events: {\n            signal: selCmpt.name + TUPLE\n          },\n          update: \"modify(\".concat($(selCmpt.name + STORE), \", \").concat(modifyExpr, \")\")\n        }]\n      });\n    });\n    return cleanupEmptyOnArray(signals);\n  }\n  function assembleFacetSignals(model, signals) {\n    if (model.component.selection && keys(model.component.selection).length) {\n      const name = $(model.getName('cell'));\n      signals.unshift({\n        name: 'facet',\n        value: {},\n        on: [{\n          events: eventSelector('mousemove', 'scope'),\n          update: \"isTuple(facet) ? facet : group(\".concat(name, \").datum\")\n        }]\n      });\n    }\n\n    return cleanupEmptyOnArray(signals);\n  }\n  function assembleTopLevelSignals(model, signals) {\n    let hasSelections = false;\n    forEachSelection(model, (selCmpt, selCompiler) => {\n      const name = selCmpt.name;\n      const store = $(name + STORE);\n      const hasSg = signals.filter(s => s.name === name);\n\n      if (hasSg.length === 0) {\n        const resolve = selCmpt.resolve === 'global' ? 'union' : selCmpt.resolve;\n        const isMulti = selCmpt.type === 'multi' ? ', true)' : ')';\n        signals.push({\n          name: selCmpt.name,\n          update: \"\".concat(VL_SELECTION_RESOLVE, \"(\").concat(store, \", \").concat($(resolve)).concat(isMulti)\n        });\n      }\n\n      hasSelections = true;\n\n      if (selCompiler.topLevelSignals) {\n        signals = selCompiler.topLevelSignals(model, selCmpt, signals);\n      }\n\n      forEachTransform(selCmpt, txCompiler => {\n        if (txCompiler.topLevelSignals) {\n          signals = txCompiler.topLevelSignals(model, selCmpt, signals);\n        }\n      });\n    });\n\n    if (hasSelections) {\n      const hasUnit = signals.filter(s => s.name === 'unit');\n\n      if (hasUnit.length === 0) {\n        signals.unshift({\n          name: 'unit',\n          value: {},\n          on: [{\n            events: 'mousemove',\n            update: 'isTuple(group()) ? group() : unit'\n          }]\n        });\n      }\n    }\n\n    return cleanupEmptyOnArray(signals);\n  }\n  function assembleUnitSelectionData(model, data) {\n    const dataCopy = [...data];\n    forEachSelection(model, selCmpt => {\n      const init = {\n        name: selCmpt.name + STORE\n      };\n\n      if (selCmpt.init) {\n        const fields = selCmpt.project.items.map(proj => {\n          const {\n            signals,\n            ...rest\n          } = proj;\n          return rest;\n        });\n        const insert = selCmpt.init.map(i => assembleInit(i, false));\n        init.values = selCmpt.type === 'interval' ? [{\n          unit: unitName(model, {\n            escape: false\n          }),\n          fields,\n          values: insert\n        }] : insert.map(i => ({\n          unit: unitName(model, {\n            escape: false\n          }),\n          fields,\n          values: i\n        }));\n      }\n\n      const contains = dataCopy.filter(d => d.name === selCmpt.name + STORE);\n\n      if (!contains.length) {\n        dataCopy.push(init);\n      }\n    });\n    return dataCopy;\n  }\n  function assembleUnitSelectionMarks(model, marks) {\n    forEachSelection(model, (selCmpt, selCompiler) => {\n      marks = selCompiler.marks ? selCompiler.marks(model, selCmpt, marks) : marks;\n      forEachTransform(selCmpt, txCompiler => {\n        if (txCompiler.marks) {\n          marks = txCompiler.marks(model, selCmpt, marks);\n        }\n      });\n    });\n    return marks;\n  }\n  function assembleLayerSelectionMarks(model, marks) {\n    for (const child of model.children) {\n      if (isUnitModel(child)) {\n        marks = assembleUnitSelectionMarks(child, marks);\n      }\n    }\n\n    return marks;\n  }\n  function assembleSelectionScaleDomain(model, extent) {\n    const name = extent.selection;\n    const selCmpt = model.getSelectionComponent(name, varName(name));\n    return {\n      signal: parseSelectionBinExtent(selCmpt, extent)\n    };\n  }\n\n  function cleanupEmptyOnArray(signals) {\n    return signals.map(s => {\n      if (s.on && !s.on.length) delete s.on;\n      return s;\n    });\n  }\n\n  const BRUSH = '_brush';\n  const SCALE_TRIGGER = '_scale_trigger';\n  const interval = {\n    signals: (model, selCmpt) => {\n      const name = selCmpt.name;\n      const fieldsSg = name + TUPLE_FIELDS;\n      const hasScales = scaleBindings.has(selCmpt);\n      const signals = [];\n      const dataSignals = [];\n      const scaleTriggers = [];\n\n      if (selCmpt.translate && !hasScales) {\n        const filterExpr = \"!event.item || event.item.mark.name !== \".concat($(name + BRUSH));\n        events(selCmpt, (on, evt) => {\n          var _evt$between$0$filter;\n\n          const filters = array((_evt$between$0$filter = evt.between[0].filter) !== null && _evt$between$0$filter !== void 0 ? _evt$between$0$filter : evt.between[0].filter = []);\n\n          if (filters.indexOf(filterExpr) < 0) {\n            filters.push(filterExpr);\n          }\n\n          return on;\n        });\n      }\n\n      selCmpt.project.items.forEach((proj, i) => {\n        const channel = proj.channel;\n\n        if (channel !== X && channel !== Y) {\n          warn('Interval selections only support x and y encoding channels.');\n          return;\n        }\n\n        const init = selCmpt.init ? selCmpt.init[i] : null;\n        const cs = channelSignals(model, selCmpt, proj, init);\n        const dname = proj.signals.data;\n        const vname = proj.signals.visual;\n        const scaleName = $(model.scaleName(channel));\n        const scaleType = model.getScaleComponent(channel).get('type');\n        const toNum = hasContinuousDomain(scaleType) ? '+' : '';\n        signals.push(...cs);\n        dataSignals.push(dname);\n        scaleTriggers.push({\n          scaleName: model.scaleName(channel),\n          expr: \"(!isArray(\".concat(dname, \") || \") + \"(\".concat(toNum, \"invert(\").concat(scaleName, \", \").concat(vname, \")[0] === \").concat(toNum).concat(dname, \"[0] && \") + \"\".concat(toNum, \"invert(\").concat(scaleName, \", \").concat(vname, \")[1] === \").concat(toNum).concat(dname, \"[1]))\")\n        });\n      }); // Proxy scale reactions to ensure that an infinite loop doesn't occur\n      // when an interval selection filter touches the scale.\n\n      if (!hasScales) {\n        signals.push({\n          name: name + SCALE_TRIGGER,\n          value: {},\n          on: [{\n            events: scaleTriggers.map(t => ({\n              scale: t.scaleName\n            })),\n            update: scaleTriggers.map(t => t.expr).join(' && ') + \" ? \".concat(name + SCALE_TRIGGER, \" : {}\")\n          }]\n        });\n      } // Only add an interval to the store if it has valid data extents. Data extents\n      // are set to null if pixel extents are equal to account for intervals over\n      // ordinal/nominal domains which, when inverted, will still produce a valid datum.\n\n\n      const init = selCmpt.init;\n      const update = \"unit: \".concat(unitName(model), \", fields: \").concat(fieldsSg, \", values\");\n      return signals.concat({\n        name: name + TUPLE,\n        ...(init ? {\n          init: \"{\".concat(update, \": \").concat(assembleInit(init), \"}\")\n        } : {}),\n        on: [{\n          events: [{\n            signal: dataSignals.join(' || ')\n          }],\n          // Prevents double invocation, see https://github.com/vega/vega#1672.\n          update: dataSignals.join(' && ') + \" ? {\".concat(update, \": [\").concat(dataSignals, \"]} : null\")\n        }]\n      });\n    },\n    modifyExpr: (model, selCmpt) => {\n      const tpl = selCmpt.name + TUPLE;\n      return tpl + ', ' + (selCmpt.resolve === 'global' ? 'true' : \"{unit: \".concat(unitName(model), \"}\"));\n    },\n    marks: (model, selCmpt, marks) => {\n      const name = selCmpt.name;\n      const {\n        x,\n        y\n      } = selCmpt.project.hasChannel;\n      const xvname = x && x.signals.visual;\n      const yvname = y && y.signals.visual;\n      const store = \"data(\".concat($(selCmpt.name + STORE), \")\"); // Do not add a brush if we're binding to scales.\n\n      if (scaleBindings.has(selCmpt)) {\n        return marks;\n      }\n\n      const update = {\n        x: x !== undefined ? {\n          signal: \"\".concat(xvname, \"[0]\")\n        } : {\n          value: 0\n        },\n        y: y !== undefined ? {\n          signal: \"\".concat(yvname, \"[0]\")\n        } : {\n          value: 0\n        },\n        x2: x !== undefined ? {\n          signal: \"\".concat(xvname, \"[1]\")\n        } : {\n          field: {\n            group: 'width'\n          }\n        },\n        y2: y !== undefined ? {\n          signal: \"\".concat(yvname, \"[1]\")\n        } : {\n          field: {\n            group: 'height'\n          }\n        }\n      }; // If the selection is resolved to global, only a single interval is in\n      // the store. Wrap brush mark's encodings with a production rule to test\n      // this based on the `unit` property. Hide the brush mark if it corresponds\n      // to a unit different from the one in the store.\n\n      if (selCmpt.resolve === 'global') {\n        for (const key of keys(update)) {\n          update[key] = [{\n            test: \"\".concat(store, \".length && \").concat(store, \"[0].unit === \").concat(unitName(model)),\n            ...update[key]\n          }, {\n            value: 0\n          }];\n        }\n      } // Two brush marks ensure that fill colors and other aesthetic choices do\n      // not interefere with the core marks, but that the brushed region can still\n      // be interacted with (e.g., dragging it around).\n\n\n      const {\n        fill,\n        fillOpacity,\n        cursor,\n        ...stroke\n      } = selCmpt.mark;\n      const vgStroke = keys(stroke).reduce((def, k) => {\n        def[k] = [{\n          test: [x !== undefined && \"\".concat(xvname, \"[0] !== \").concat(xvname, \"[1]\"), y !== undefined && \"\".concat(yvname, \"[0] !== \").concat(yvname, \"[1]\")].filter(t => t).join(' && '),\n          value: stroke[k]\n        }, {\n          value: null\n        }];\n        return def;\n      }, {});\n      return [{\n        name: name + BRUSH + '_bg',\n        type: 'rect',\n        clip: true,\n        encode: {\n          enter: {\n            fill: {\n              value: fill\n            },\n            fillOpacity: {\n              value: fillOpacity\n            }\n          },\n          update: update\n        }\n      }, ...marks, {\n        name: name + BRUSH,\n        type: 'rect',\n        clip: true,\n        encode: {\n          enter: { ...(cursor ? {\n              cursor: {\n                value: cursor\n              }\n            } : {}),\n            fill: {\n              value: 'transparent'\n            }\n          },\n          update: { ...update,\n            ...vgStroke\n          }\n        }\n      }];\n    }\n  };\n  /**\n   * Returns the visual and data signals for an interval selection.\n   */\n\n  function channelSignals(model, selCmpt, proj, init) {\n    const channel = proj.channel;\n    const vname = proj.signals.visual;\n    const dname = proj.signals.data;\n    const hasScales = scaleBindings.has(selCmpt);\n    const scaleName = $(model.scaleName(channel));\n    const scale = model.getScaleComponent(channel);\n    const scaleType = scale ? scale.get('type') : undefined;\n\n    const scaled = str => \"scale(\".concat(scaleName, \", \").concat(str, \")\");\n\n    const size = model.getSizeSignalRef(channel === X ? 'width' : 'height').signal;\n    const coord = \"\".concat(channel, \"(unit)\");\n    const on = events(selCmpt, (def, evt) => {\n      return [...def, {\n        events: evt.between[0],\n        update: \"[\".concat(coord, \", \").concat(coord, \"]\")\n      }, // Brush Start\n      {\n        events: evt,\n        update: \"[\".concat(vname, \"[0], clamp(\").concat(coord, \", 0, \").concat(size, \")]\")\n      } // Brush End\n      ];\n    }); // React to pan/zooms of continuous scales. Non-continuous scales\n    // (band, point) cannot be pan/zoomed and any other changes\n    // to their domains (e.g., filtering) should clear the brushes.\n\n    on.push({\n      events: {\n        signal: selCmpt.name + SCALE_TRIGGER\n      },\n      update: hasContinuousDomain(scaleType) ? \"[\".concat(scaled(\"\".concat(dname, \"[0]\")), \", \").concat(scaled(\"\".concat(dname, \"[1]\")), \"]\") : \"[0, 0]\"\n    });\n    return hasScales ? [{\n      name: dname,\n      on: []\n    }] : [{\n      name: vname,\n      ...(init ? {\n        init: assembleInit(init, true, scaled)\n      } : {\n        value: []\n      }),\n      on: on\n    }, {\n      name: dname,\n      ...(init ? {\n        init: assembleInit(init)\n      } : {}),\n      // Cannot be `value` as `init` may require datetime exprs.\n      on: [{\n        events: {\n          signal: vname\n        },\n        update: \"\".concat(vname, \"[0] === \").concat(vname, \"[1] ? null : invert(\").concat(scaleName, \", \").concat(vname, \")\")\n      }]\n    }];\n  }\n\n  function events(selCmpt, cb) {\n    return selCmpt.events.reduce((on, evt) => {\n      if (!evt.between) {\n        warn(\"\".concat(evt, \" is not an ordered event stream for interval selections.\"));\n        return on;\n      }\n\n      return cb(on, evt);\n    }, []);\n  }\n\n  function singleOrMultiSignals(model, selCmpt) {\n    const name = selCmpt.name;\n    const fieldsSg = name + TUPLE_FIELDS;\n    const project = selCmpt.project;\n    const datum = '(item().isVoronoi ? datum.datum : datum)';\n    const values = project.items.map(p => {\n      const fieldDef = model.fieldDef(p.channel); // Binned fields should capture extents, for a range test against the raw field.\n\n      return fieldDef && fieldDef.bin ? \"[\".concat(datum, \"[\").concat($(model.vgField(p.channel, {})), \"], \") + \"\".concat(datum, \"[\").concat($(model.vgField(p.channel, {\n        binSuffix: 'end'\n      })), \"]]\") : \"\".concat(datum, \"[\").concat($(p.field), \"]\");\n    }).join(', '); // Only add a discrete selection to the store if a datum is present _and_\n    // the interaction isn't occurring on a group mark. This guards against\n    // polluting interactive state with invalid values in faceted displays\n    // as the group marks are also data-driven. We force the update to account\n    // for constant null states but varying toggles (e.g., shift-click in\n    // whitespace followed by a click in whitespace; the store should only\n    // be cleared on the second click).\n\n    const update = \"unit: \".concat(unitName(model), \", fields: \").concat(fieldsSg, \", values\");\n    const events = selCmpt.events;\n    return [{\n      name: name + TUPLE,\n      on: events ? [{\n        events,\n        update: \"datum && item().mark.marktype !== 'group' ? {\".concat(update, \": [\").concat(values, \"]} : null\"),\n        force: true\n      }] : []\n    }];\n  }\n  const multi = {\n    signals: singleOrMultiSignals,\n    modifyExpr: (model, selCmpt) => {\n      const tpl = selCmpt.name + TUPLE;\n      return tpl + ', ' + (selCmpt.resolve === 'global' ? 'null' : \"{unit: \".concat(unitName(model), \"}\"));\n    }\n  };\n\n  const single = {\n    signals: singleOrMultiSignals,\n    modifyExpr: (model, selCmpt) => {\n      const tpl = selCmpt.name + TUPLE;\n      return tpl + ', ' + (selCmpt.resolve === 'global' ? 'true' : \"{unit: \".concat(unitName(model), \"}\"));\n    }\n  };\n\n  const STORE = '_store';\n  const TUPLE = '_tuple';\n  const MODIFY = '_modify';\n  const VL_SELECTION_RESOLVE = 'vlSelectionResolve';\n  const compilers$1 = {\n    single,\n    multi,\n    interval\n  };\n  function forEachSelection(model, cb) {\n    const selections = model.component.selection;\n\n    if (selections) {\n      for (const sel of vals(selections)) {\n        const success = cb(sel, compilers$1[sel.type]);\n        if (success === true) break;\n      }\n    }\n  }\n\n  function getFacetModel(model) {\n    let parent = model.parent;\n\n    while (parent) {\n      if (isFacetModel(parent)) {\n        break;\n      }\n\n      parent = parent.parent;\n    }\n\n    return parent;\n  }\n\n  function unitName(model, {\n    escape\n  } = {\n    escape: true\n  }) {\n    let name = escape ? $(model.name) : model.name;\n    const facetModel = getFacetModel(model);\n\n    if (facetModel) {\n      const {\n        facet\n      } = facetModel;\n\n      for (const channel of FACET_CHANNELS) {\n        if (facet[channel]) {\n          name += \" + '__facet_\".concat(channel, \"_' + (facet[\").concat($(facetModel.vgField(channel)), \"])\");\n        }\n      }\n    }\n\n    return name;\n  }\n  function requiresSelectionId(model) {\n    let identifier = false;\n    forEachSelection(model, selCmpt => {\n      identifier = identifier || selCmpt.project.items.some(proj => proj.field === SELECTION_ID);\n    });\n    return identifier;\n  }\n\n  const RawCode = 'RawCode';\n  const Literal = 'Literal';\n  const Property = 'Property';\n  const Identifier = 'Identifier';\n  const ArrayExpression = 'ArrayExpression';\n  const BinaryExpression = 'BinaryExpression';\n  const CallExpression = 'CallExpression';\n  const ConditionalExpression = 'ConditionalExpression';\n  const LogicalExpression = 'LogicalExpression';\n  const MemberExpression = 'MemberExpression';\n  const ObjectExpression = 'ObjectExpression';\n  const UnaryExpression = 'UnaryExpression';\n\n  function ASTNode(type) {\n    this.type = type;\n  }\n\n  ASTNode.prototype.visit = function (visitor) {\n    let c, i, n;\n    if (visitor(this)) return 1;\n\n    for (c = children(this), i = 0, n = c.length; i < n; ++i) {\n      if (c[i].visit(visitor)) return 1;\n    }\n  };\n\n  function children(node) {\n    switch (node.type) {\n      case ArrayExpression:\n        return node.elements;\n\n      case BinaryExpression:\n      case LogicalExpression:\n        return [node.left, node.right];\n\n      case CallExpression:\n        return [node.callee].concat(node.arguments);\n\n      case ConditionalExpression:\n        return [node.test, node.consequent, node.alternate];\n\n      case MemberExpression:\n        return [node.object, node.property];\n\n      case ObjectExpression:\n        return node.properties;\n\n      case Property:\n        return [node.key, node.value];\n\n      case UnaryExpression:\n        return [node.argument];\n\n      case Identifier:\n      case Literal:\n      case RawCode:\n      default:\n        return [];\n    }\n  }\n  /*\n    The following expression parser is based on Esprima (http://esprima.org/).\n    Original header comment and license for Esprima is included here:\n\n    Copyright (C) 2013 Ariya Hidayat <ariya.hidayat@gmail.com>\n    Copyright (C) 2013 Thaddee Tyl <thaddee.tyl@gmail.com>\n    Copyright (C) 2013 Mathias Bynens <mathias@qiwi.be>\n    Copyright (C) 2012 Ariya Hidayat <ariya.hidayat@gmail.com>\n    Copyright (C) 2012 Mathias Bynens <mathias@qiwi.be>\n    Copyright (C) 2012 Joost-Wim Boekesteijn <joost-wim@boekesteijn.nl>\n    Copyright (C) 2012 Kris Kowal <kris.kowal@cixar.com>\n    Copyright (C) 2012 Yusuke Suzuki <utatane.tea@gmail.com>\n    Copyright (C) 2012 Arpad Borsos <arpad.borsos@googlemail.com>\n    Copyright (C) 2011 Ariya Hidayat <ariya.hidayat@gmail.com>\n\n    Redistribution and use in source and binary forms, with or without\n    modification, are permitted provided that the following conditions are met:\n\n      * Redistributions of source code must retain the above copyright\n        notice, this list of conditions and the following disclaimer.\n      * Redistributions in binary form must reproduce the above copyright\n        notice, this list of conditions and the following disclaimer in the\n        documentation and/or other materials provided with the distribution.\n\n    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n    ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY\n    DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n    (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n    LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n    ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n    (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n    THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n\n\n  var TokenName, source, index, length, lookahead;\n  var TokenBooleanLiteral = 1,\n      TokenEOF = 2,\n      TokenIdentifier = 3,\n      TokenKeyword = 4,\n      TokenNullLiteral = 5,\n      TokenNumericLiteral = 6,\n      TokenPunctuator = 7,\n      TokenStringLiteral = 8,\n      TokenRegularExpression = 9;\n  TokenName = {};\n  TokenName[TokenBooleanLiteral] = 'Boolean';\n  TokenName[TokenEOF] = '<end>';\n  TokenName[TokenIdentifier] = 'Identifier';\n  TokenName[TokenKeyword] = 'Keyword';\n  TokenName[TokenNullLiteral] = 'Null';\n  TokenName[TokenNumericLiteral] = 'Numeric';\n  TokenName[TokenPunctuator] = 'Punctuator';\n  TokenName[TokenStringLiteral] = 'String';\n  TokenName[TokenRegularExpression] = 'RegularExpression';\n  var SyntaxArrayExpression = 'ArrayExpression',\n      SyntaxBinaryExpression = 'BinaryExpression',\n      SyntaxCallExpression = 'CallExpression',\n      SyntaxConditionalExpression = 'ConditionalExpression',\n      SyntaxIdentifier = 'Identifier',\n      SyntaxLiteral = 'Literal',\n      SyntaxLogicalExpression = 'LogicalExpression',\n      SyntaxMemberExpression = 'MemberExpression',\n      SyntaxObjectExpression = 'ObjectExpression',\n      SyntaxProperty = 'Property',\n      SyntaxUnaryExpression = 'UnaryExpression'; // Error messages should be identical to V8.\n\n  var MessageUnexpectedToken = 'Unexpected token %0',\n      MessageUnexpectedNumber = 'Unexpected number',\n      MessageUnexpectedString = 'Unexpected string',\n      MessageUnexpectedIdentifier = 'Unexpected identifier',\n      MessageUnexpectedReserved = 'Unexpected reserved word',\n      MessageUnexpectedEOS = 'Unexpected end of input',\n      MessageInvalidRegExp = 'Invalid regular expression',\n      MessageUnterminatedRegExp = 'Invalid regular expression: missing /',\n      MessageStrictOctalLiteral = 'Octal literals are not allowed in strict mode.',\n      MessageStrictDuplicateProperty = 'Duplicate data property in object literal not allowed in strict mode';\n  var ILLEGAL$1 = 'ILLEGAL',\n      DISABLED = 'Disabled.'; // See also tools/generate-unicode-regex.py.\n\n  var RegexNonAsciiIdentifierStart = new RegExp('[\\\\xAA\\\\xB5\\\\xBA\\\\xC0-\\\\xD6\\\\xD8-\\\\xF6\\\\xF8-\\\\u02C1\\\\u02C6-\\\\u02D1\\\\u02E0-\\\\u02E4\\\\u02EC\\\\u02EE\\\\u0370-\\\\u0374\\\\u0376\\\\u0377\\\\u037A-\\\\u037D\\\\u037F\\\\u0386\\\\u0388-\\\\u038A\\\\u038C\\\\u038E-\\\\u03A1\\\\u03A3-\\\\u03F5\\\\u03F7-\\\\u0481\\\\u048A-\\\\u052F\\\\u0531-\\\\u0556\\\\u0559\\\\u0561-\\\\u0587\\\\u05D0-\\\\u05EA\\\\u05F0-\\\\u05F2\\\\u0620-\\\\u064A\\\\u066E\\\\u066F\\\\u0671-\\\\u06D3\\\\u06D5\\\\u06E5\\\\u06E6\\\\u06EE\\\\u06EF\\\\u06FA-\\\\u06FC\\\\u06FF\\\\u0710\\\\u0712-\\\\u072F\\\\u074D-\\\\u07A5\\\\u07B1\\\\u07CA-\\\\u07EA\\\\u07F4\\\\u07F5\\\\u07FA\\\\u0800-\\\\u0815\\\\u081A\\\\u0824\\\\u0828\\\\u0840-\\\\u0858\\\\u08A0-\\\\u08B2\\\\u0904-\\\\u0939\\\\u093D\\\\u0950\\\\u0958-\\\\u0961\\\\u0971-\\\\u0980\\\\u0985-\\\\u098C\\\\u098F\\\\u0990\\\\u0993-\\\\u09A8\\\\u09AA-\\\\u09B0\\\\u09B2\\\\u09B6-\\\\u09B9\\\\u09BD\\\\u09CE\\\\u09DC\\\\u09DD\\\\u09DF-\\\\u09E1\\\\u09F0\\\\u09F1\\\\u0A05-\\\\u0A0A\\\\u0A0F\\\\u0A10\\\\u0A13-\\\\u0A28\\\\u0A2A-\\\\u0A30\\\\u0A32\\\\u0A33\\\\u0A35\\\\u0A36\\\\u0A38\\\\u0A39\\\\u0A59-\\\\u0A5C\\\\u0A5E\\\\u0A72-\\\\u0A74\\\\u0A85-\\\\u0A8D\\\\u0A8F-\\\\u0A91\\\\u0A93-\\\\u0AA8\\\\u0AAA-\\\\u0AB0\\\\u0AB2\\\\u0AB3\\\\u0AB5-\\\\u0AB9\\\\u0ABD\\\\u0AD0\\\\u0AE0\\\\u0AE1\\\\u0B05-\\\\u0B0C\\\\u0B0F\\\\u0B10\\\\u0B13-\\\\u0B28\\\\u0B2A-\\\\u0B30\\\\u0B32\\\\u0B33\\\\u0B35-\\\\u0B39\\\\u0B3D\\\\u0B5C\\\\u0B5D\\\\u0B5F-\\\\u0B61\\\\u0B71\\\\u0B83\\\\u0B85-\\\\u0B8A\\\\u0B8E-\\\\u0B90\\\\u0B92-\\\\u0B95\\\\u0B99\\\\u0B9A\\\\u0B9C\\\\u0B9E\\\\u0B9F\\\\u0BA3\\\\u0BA4\\\\u0BA8-\\\\u0BAA\\\\u0BAE-\\\\u0BB9\\\\u0BD0\\\\u0C05-\\\\u0C0C\\\\u0C0E-\\\\u0C10\\\\u0C12-\\\\u0C28\\\\u0C2A-\\\\u0C39\\\\u0C3D\\\\u0C58\\\\u0C59\\\\u0C60\\\\u0C61\\\\u0C85-\\\\u0C8C\\\\u0C8E-\\\\u0C90\\\\u0C92-\\\\u0CA8\\\\u0CAA-\\\\u0CB3\\\\u0CB5-\\\\u0CB9\\\\u0CBD\\\\u0CDE\\\\u0CE0\\\\u0CE1\\\\u0CF1\\\\u0CF2\\\\u0D05-\\\\u0D0C\\\\u0D0E-\\\\u0D10\\\\u0D12-\\\\u0D3A\\\\u0D3D\\\\u0D4E\\\\u0D60\\\\u0D61\\\\u0D7A-\\\\u0D7F\\\\u0D85-\\\\u0D96\\\\u0D9A-\\\\u0DB1\\\\u0DB3-\\\\u0DBB\\\\u0DBD\\\\u0DC0-\\\\u0DC6\\\\u0E01-\\\\u0E30\\\\u0E32\\\\u0E33\\\\u0E40-\\\\u0E46\\\\u0E81\\\\u0E82\\\\u0E84\\\\u0E87\\\\u0E88\\\\u0E8A\\\\u0E8D\\\\u0E94-\\\\u0E97\\\\u0E99-\\\\u0E9F\\\\u0EA1-\\\\u0EA3\\\\u0EA5\\\\u0EA7\\\\u0EAA\\\\u0EAB\\\\u0EAD-\\\\u0EB0\\\\u0EB2\\\\u0EB3\\\\u0EBD\\\\u0EC0-\\\\u0EC4\\\\u0EC6\\\\u0EDC-\\\\u0EDF\\\\u0F00\\\\u0F40-\\\\u0F47\\\\u0F49-\\\\u0F6C\\\\u0F88-\\\\u0F8C\\\\u1000-\\\\u102A\\\\u103F\\\\u1050-\\\\u1055\\\\u105A-\\\\u105D\\\\u1061\\\\u1065\\\\u1066\\\\u106E-\\\\u1070\\\\u1075-\\\\u1081\\\\u108E\\\\u10A0-\\\\u10C5\\\\u10C7\\\\u10CD\\\\u10D0-\\\\u10FA\\\\u10FC-\\\\u1248\\\\u124A-\\\\u124D\\\\u1250-\\\\u1256\\\\u1258\\\\u125A-\\\\u125D\\\\u1260-\\\\u1288\\\\u128A-\\\\u128D\\\\u1290-\\\\u12B0\\\\u12B2-\\\\u12B5\\\\u12B8-\\\\u12BE\\\\u12C0\\\\u12C2-\\\\u12C5\\\\u12C8-\\\\u12D6\\\\u12D8-\\\\u1310\\\\u1312-\\\\u1315\\\\u1318-\\\\u135A\\\\u1380-\\\\u138F\\\\u13A0-\\\\u13F4\\\\u1401-\\\\u166C\\\\u166F-\\\\u167F\\\\u1681-\\\\u169A\\\\u16A0-\\\\u16EA\\\\u16EE-\\\\u16F8\\\\u1700-\\\\u170C\\\\u170E-\\\\u1711\\\\u1720-\\\\u1731\\\\u1740-\\\\u1751\\\\u1760-\\\\u176C\\\\u176E-\\\\u1770\\\\u1780-\\\\u17B3\\\\u17D7\\\\u17DC\\\\u1820-\\\\u1877\\\\u1880-\\\\u18A8\\\\u18AA\\\\u18B0-\\\\u18F5\\\\u1900-\\\\u191E\\\\u1950-\\\\u196D\\\\u1970-\\\\u1974\\\\u1980-\\\\u19AB\\\\u19C1-\\\\u19C7\\\\u1A00-\\\\u1A16\\\\u1A20-\\\\u1A54\\\\u1AA7\\\\u1B05-\\\\u1B33\\\\u1B45-\\\\u1B4B\\\\u1B83-\\\\u1BA0\\\\u1BAE\\\\u1BAF\\\\u1BBA-\\\\u1BE5\\\\u1C00-\\\\u1C23\\\\u1C4D-\\\\u1C4F\\\\u1C5A-\\\\u1C7D\\\\u1CE9-\\\\u1CEC\\\\u1CEE-\\\\u1CF1\\\\u1CF5\\\\u1CF6\\\\u1D00-\\\\u1DBF\\\\u1E00-\\\\u1F15\\\\u1F18-\\\\u1F1D\\\\u1F20-\\\\u1F45\\\\u1F48-\\\\u1F4D\\\\u1F50-\\\\u1F57\\\\u1F59\\\\u1F5B\\\\u1F5D\\\\u1F5F-\\\\u1F7D\\\\u1F80-\\\\u1FB4\\\\u1FB6-\\\\u1FBC\\\\u1FBE\\\\u1FC2-\\\\u1FC4\\\\u1FC6-\\\\u1FCC\\\\u1FD0-\\\\u1FD3\\\\u1FD6-\\\\u1FDB\\\\u1FE0-\\\\u1FEC\\\\u1FF2-\\\\u1FF4\\\\u1FF6-\\\\u1FFC\\\\u2071\\\\u207F\\\\u2090-\\\\u209C\\\\u2102\\\\u2107\\\\u210A-\\\\u2113\\\\u2115\\\\u2119-\\\\u211D\\\\u2124\\\\u2126\\\\u2128\\\\u212A-\\\\u212D\\\\u212F-\\\\u2139\\\\u213C-\\\\u213F\\\\u2145-\\\\u2149\\\\u214E\\\\u2160-\\\\u2188\\\\u2C00-\\\\u2C2E\\\\u2C30-\\\\u2C5E\\\\u2C60-\\\\u2CE4\\\\u2CEB-\\\\u2CEE\\\\u2CF2\\\\u2CF3\\\\u2D00-\\\\u2D25\\\\u2D27\\\\u2D2D\\\\u2D30-\\\\u2D67\\\\u2D6F\\\\u2D80-\\\\u2D96\\\\u2DA0-\\\\u2DA6\\\\u2DA8-\\\\u2DAE\\\\u2DB0-\\\\u2DB6\\\\u2DB8-\\\\u2DBE\\\\u2DC0-\\\\u2DC6\\\\u2DC8-\\\\u2DCE\\\\u2DD0-\\\\u2DD6\\\\u2DD8-\\\\u2DDE\\\\u2E2F\\\\u3005-\\\\u3007\\\\u3021-\\\\u3029\\\\u3031-\\\\u3035\\\\u3038-\\\\u303C\\\\u3041-\\\\u3096\\\\u309D-\\\\u309F\\\\u30A1-\\\\u30FA\\\\u30FC-\\\\u30FF\\\\u3105-\\\\u312D\\\\u3131-\\\\u318E\\\\u31A0-\\\\u31BA\\\\u31F0-\\\\u31FF\\\\u3400-\\\\u4DB5\\\\u4E00-\\\\u9FCC\\\\uA000-\\\\uA48C\\\\uA4D0-\\\\uA4FD\\\\uA500-\\\\uA60C\\\\uA610-\\\\uA61F\\\\uA62A\\\\uA62B\\\\uA640-\\\\uA66E\\\\uA67F-\\\\uA69D\\\\uA6A0-\\\\uA6EF\\\\uA717-\\\\uA71F\\\\uA722-\\\\uA788\\\\uA78B-\\\\uA78E\\\\uA790-\\\\uA7AD\\\\uA7B0\\\\uA7B1\\\\uA7F7-\\\\uA801\\\\uA803-\\\\uA805\\\\uA807-\\\\uA80A\\\\uA80C-\\\\uA822\\\\uA840-\\\\uA873\\\\uA882-\\\\uA8B3\\\\uA8F2-\\\\uA8F7\\\\uA8FB\\\\uA90A-\\\\uA925\\\\uA930-\\\\uA946\\\\uA960-\\\\uA97C\\\\uA984-\\\\uA9B2\\\\uA9CF\\\\uA9E0-\\\\uA9E4\\\\uA9E6-\\\\uA9EF\\\\uA9FA-\\\\uA9FE\\\\uAA00-\\\\uAA28\\\\uAA40-\\\\uAA42\\\\uAA44-\\\\uAA4B\\\\uAA60-\\\\uAA76\\\\uAA7A\\\\uAA7E-\\\\uAAAF\\\\uAAB1\\\\uAAB5\\\\uAAB6\\\\uAAB9-\\\\uAABD\\\\uAAC0\\\\uAAC2\\\\uAADB-\\\\uAADD\\\\uAAE0-\\\\uAAEA\\\\uAAF2-\\\\uAAF4\\\\uAB01-\\\\uAB06\\\\uAB09-\\\\uAB0E\\\\uAB11-\\\\uAB16\\\\uAB20-\\\\uAB26\\\\uAB28-\\\\uAB2E\\\\uAB30-\\\\uAB5A\\\\uAB5C-\\\\uAB5F\\\\uAB64\\\\uAB65\\\\uABC0-\\\\uABE2\\\\uAC00-\\\\uD7A3\\\\uD7B0-\\\\uD7C6\\\\uD7CB-\\\\uD7FB\\\\uF900-\\\\uFA6D\\\\uFA70-\\\\uFAD9\\\\uFB00-\\\\uFB06\\\\uFB13-\\\\uFB17\\\\uFB1D\\\\uFB1F-\\\\uFB28\\\\uFB2A-\\\\uFB36\\\\uFB38-\\\\uFB3C\\\\uFB3E\\\\uFB40\\\\uFB41\\\\uFB43\\\\uFB44\\\\uFB46-\\\\uFBB1\\\\uFBD3-\\\\uFD3D\\\\uFD50-\\\\uFD8F\\\\uFD92-\\\\uFDC7\\\\uFDF0-\\\\uFDFB\\\\uFE70-\\\\uFE74\\\\uFE76-\\\\uFEFC\\\\uFF21-\\\\uFF3A\\\\uFF41-\\\\uFF5A\\\\uFF66-\\\\uFFBE\\\\uFFC2-\\\\uFFC7\\\\uFFCA-\\\\uFFCF\\\\uFFD2-\\\\uFFD7\\\\uFFDA-\\\\uFFDC]'),\n      // eslint-disable-next-line no-misleading-character-class\n  RegexNonAsciiIdentifierPart = new RegExp('[\\\\xAA\\\\xB5\\\\xBA\\\\xC0-\\\\xD6\\\\xD8-\\\\xF6\\\\xF8-\\\\u02C1\\\\u02C6-\\\\u02D1\\\\u02E0-\\\\u02E4\\\\u02EC\\\\u02EE\\\\u0300-\\\\u0374\\\\u0376\\\\u0377\\\\u037A-\\\\u037D\\\\u037F\\\\u0386\\\\u0388-\\\\u038A\\\\u038C\\\\u038E-\\\\u03A1\\\\u03A3-\\\\u03F5\\\\u03F7-\\\\u0481\\\\u0483-\\\\u0487\\\\u048A-\\\\u052F\\\\u0531-\\\\u0556\\\\u0559\\\\u0561-\\\\u0587\\\\u0591-\\\\u05BD\\\\u05BF\\\\u05C1\\\\u05C2\\\\u05C4\\\\u05C5\\\\u05C7\\\\u05D0-\\\\u05EA\\\\u05F0-\\\\u05F2\\\\u0610-\\\\u061A\\\\u0620-\\\\u0669\\\\u066E-\\\\u06D3\\\\u06D5-\\\\u06DC\\\\u06DF-\\\\u06E8\\\\u06EA-\\\\u06FC\\\\u06FF\\\\u0710-\\\\u074A\\\\u074D-\\\\u07B1\\\\u07C0-\\\\u07F5\\\\u07FA\\\\u0800-\\\\u082D\\\\u0840-\\\\u085B\\\\u08A0-\\\\u08B2\\\\u08E4-\\\\u0963\\\\u0966-\\\\u096F\\\\u0971-\\\\u0983\\\\u0985-\\\\u098C\\\\u098F\\\\u0990\\\\u0993-\\\\u09A8\\\\u09AA-\\\\u09B0\\\\u09B2\\\\u09B6-\\\\u09B9\\\\u09BC-\\\\u09C4\\\\u09C7\\\\u09C8\\\\u09CB-\\\\u09CE\\\\u09D7\\\\u09DC\\\\u09DD\\\\u09DF-\\\\u09E3\\\\u09E6-\\\\u09F1\\\\u0A01-\\\\u0A03\\\\u0A05-\\\\u0A0A\\\\u0A0F\\\\u0A10\\\\u0A13-\\\\u0A28\\\\u0A2A-\\\\u0A30\\\\u0A32\\\\u0A33\\\\u0A35\\\\u0A36\\\\u0A38\\\\u0A39\\\\u0A3C\\\\u0A3E-\\\\u0A42\\\\u0A47\\\\u0A48\\\\u0A4B-\\\\u0A4D\\\\u0A51\\\\u0A59-\\\\u0A5C\\\\u0A5E\\\\u0A66-\\\\u0A75\\\\u0A81-\\\\u0A83\\\\u0A85-\\\\u0A8D\\\\u0A8F-\\\\u0A91\\\\u0A93-\\\\u0AA8\\\\u0AAA-\\\\u0AB0\\\\u0AB2\\\\u0AB3\\\\u0AB5-\\\\u0AB9\\\\u0ABC-\\\\u0AC5\\\\u0AC7-\\\\u0AC9\\\\u0ACB-\\\\u0ACD\\\\u0AD0\\\\u0AE0-\\\\u0AE3\\\\u0AE6-\\\\u0AEF\\\\u0B01-\\\\u0B03\\\\u0B05-\\\\u0B0C\\\\u0B0F\\\\u0B10\\\\u0B13-\\\\u0B28\\\\u0B2A-\\\\u0B30\\\\u0B32\\\\u0B33\\\\u0B35-\\\\u0B39\\\\u0B3C-\\\\u0B44\\\\u0B47\\\\u0B48\\\\u0B4B-\\\\u0B4D\\\\u0B56\\\\u0B57\\\\u0B5C\\\\u0B5D\\\\u0B5F-\\\\u0B63\\\\u0B66-\\\\u0B6F\\\\u0B71\\\\u0B82\\\\u0B83\\\\u0B85-\\\\u0B8A\\\\u0B8E-\\\\u0B90\\\\u0B92-\\\\u0B95\\\\u0B99\\\\u0B9A\\\\u0B9C\\\\u0B9E\\\\u0B9F\\\\u0BA3\\\\u0BA4\\\\u0BA8-\\\\u0BAA\\\\u0BAE-\\\\u0BB9\\\\u0BBE-\\\\u0BC2\\\\u0BC6-\\\\u0BC8\\\\u0BCA-\\\\u0BCD\\\\u0BD0\\\\u0BD7\\\\u0BE6-\\\\u0BEF\\\\u0C00-\\\\u0C03\\\\u0C05-\\\\u0C0C\\\\u0C0E-\\\\u0C10\\\\u0C12-\\\\u0C28\\\\u0C2A-\\\\u0C39\\\\u0C3D-\\\\u0C44\\\\u0C46-\\\\u0C48\\\\u0C4A-\\\\u0C4D\\\\u0C55\\\\u0C56\\\\u0C58\\\\u0C59\\\\u0C60-\\\\u0C63\\\\u0C66-\\\\u0C6F\\\\u0C81-\\\\u0C83\\\\u0C85-\\\\u0C8C\\\\u0C8E-\\\\u0C90\\\\u0C92-\\\\u0CA8\\\\u0CAA-\\\\u0CB3\\\\u0CB5-\\\\u0CB9\\\\u0CBC-\\\\u0CC4\\\\u0CC6-\\\\u0CC8\\\\u0CCA-\\\\u0CCD\\\\u0CD5\\\\u0CD6\\\\u0CDE\\\\u0CE0-\\\\u0CE3\\\\u0CE6-\\\\u0CEF\\\\u0CF1\\\\u0CF2\\\\u0D01-\\\\u0D03\\\\u0D05-\\\\u0D0C\\\\u0D0E-\\\\u0D10\\\\u0D12-\\\\u0D3A\\\\u0D3D-\\\\u0D44\\\\u0D46-\\\\u0D48\\\\u0D4A-\\\\u0D4E\\\\u0D57\\\\u0D60-\\\\u0D63\\\\u0D66-\\\\u0D6F\\\\u0D7A-\\\\u0D7F\\\\u0D82\\\\u0D83\\\\u0D85-\\\\u0D96\\\\u0D9A-\\\\u0DB1\\\\u0DB3-\\\\u0DBB\\\\u0DBD\\\\u0DC0-\\\\u0DC6\\\\u0DCA\\\\u0DCF-\\\\u0DD4\\\\u0DD6\\\\u0DD8-\\\\u0DDF\\\\u0DE6-\\\\u0DEF\\\\u0DF2\\\\u0DF3\\\\u0E01-\\\\u0E3A\\\\u0E40-\\\\u0E4E\\\\u0E50-\\\\u0E59\\\\u0E81\\\\u0E82\\\\u0E84\\\\u0E87\\\\u0E88\\\\u0E8A\\\\u0E8D\\\\u0E94-\\\\u0E97\\\\u0E99-\\\\u0E9F\\\\u0EA1-\\\\u0EA3\\\\u0EA5\\\\u0EA7\\\\u0EAA\\\\u0EAB\\\\u0EAD-\\\\u0EB9\\\\u0EBB-\\\\u0EBD\\\\u0EC0-\\\\u0EC4\\\\u0EC6\\\\u0EC8-\\\\u0ECD\\\\u0ED0-\\\\u0ED9\\\\u0EDC-\\\\u0EDF\\\\u0F00\\\\u0F18\\\\u0F19\\\\u0F20-\\\\u0F29\\\\u0F35\\\\u0F37\\\\u0F39\\\\u0F3E-\\\\u0F47\\\\u0F49-\\\\u0F6C\\\\u0F71-\\\\u0F84\\\\u0F86-\\\\u0F97\\\\u0F99-\\\\u0FBC\\\\u0FC6\\\\u1000-\\\\u1049\\\\u1050-\\\\u109D\\\\u10A0-\\\\u10C5\\\\u10C7\\\\u10CD\\\\u10D0-\\\\u10FA\\\\u10FC-\\\\u1248\\\\u124A-\\\\u124D\\\\u1250-\\\\u1256\\\\u1258\\\\u125A-\\\\u125D\\\\u1260-\\\\u1288\\\\u128A-\\\\u128D\\\\u1290-\\\\u12B0\\\\u12B2-\\\\u12B5\\\\u12B8-\\\\u12BE\\\\u12C0\\\\u12C2-\\\\u12C5\\\\u12C8-\\\\u12D6\\\\u12D8-\\\\u1310\\\\u1312-\\\\u1315\\\\u1318-\\\\u135A\\\\u135D-\\\\u135F\\\\u1380-\\\\u138F\\\\u13A0-\\\\u13F4\\\\u1401-\\\\u166C\\\\u166F-\\\\u167F\\\\u1681-\\\\u169A\\\\u16A0-\\\\u16EA\\\\u16EE-\\\\u16F8\\\\u1700-\\\\u170C\\\\u170E-\\\\u1714\\\\u1720-\\\\u1734\\\\u1740-\\\\u1753\\\\u1760-\\\\u176C\\\\u176E-\\\\u1770\\\\u1772\\\\u1773\\\\u1780-\\\\u17D3\\\\u17D7\\\\u17DC\\\\u17DD\\\\u17E0-\\\\u17E9\\\\u180B-\\\\u180D\\\\u1810-\\\\u1819\\\\u1820-\\\\u1877\\\\u1880-\\\\u18AA\\\\u18B0-\\\\u18F5\\\\u1900-\\\\u191E\\\\u1920-\\\\u192B\\\\u1930-\\\\u193B\\\\u1946-\\\\u196D\\\\u1970-\\\\u1974\\\\u1980-\\\\u19AB\\\\u19B0-\\\\u19C9\\\\u19D0-\\\\u19D9\\\\u1A00-\\\\u1A1B\\\\u1A20-\\\\u1A5E\\\\u1A60-\\\\u1A7C\\\\u1A7F-\\\\u1A89\\\\u1A90-\\\\u1A99\\\\u1AA7\\\\u1AB0-\\\\u1ABD\\\\u1B00-\\\\u1B4B\\\\u1B50-\\\\u1B59\\\\u1B6B-\\\\u1B73\\\\u1B80-\\\\u1BF3\\\\u1C00-\\\\u1C37\\\\u1C40-\\\\u1C49\\\\u1C4D-\\\\u1C7D\\\\u1CD0-\\\\u1CD2\\\\u1CD4-\\\\u1CF6\\\\u1CF8\\\\u1CF9\\\\u1D00-\\\\u1DF5\\\\u1DFC-\\\\u1F15\\\\u1F18-\\\\u1F1D\\\\u1F20-\\\\u1F45\\\\u1F48-\\\\u1F4D\\\\u1F50-\\\\u1F57\\\\u1F59\\\\u1F5B\\\\u1F5D\\\\u1F5F-\\\\u1F7D\\\\u1F80-\\\\u1FB4\\\\u1FB6-\\\\u1FBC\\\\u1FBE\\\\u1FC2-\\\\u1FC4\\\\u1FC6-\\\\u1FCC\\\\u1FD0-\\\\u1FD3\\\\u1FD6-\\\\u1FDB\\\\u1FE0-\\\\u1FEC\\\\u1FF2-\\\\u1FF4\\\\u1FF6-\\\\u1FFC\\\\u200C\\\\u200D\\\\u203F\\\\u2040\\\\u2054\\\\u2071\\\\u207F\\\\u2090-\\\\u209C\\\\u20D0-\\\\u20DC\\\\u20E1\\\\u20E5-\\\\u20F0\\\\u2102\\\\u2107\\\\u210A-\\\\u2113\\\\u2115\\\\u2119-\\\\u211D\\\\u2124\\\\u2126\\\\u2128\\\\u212A-\\\\u212D\\\\u212F-\\\\u2139\\\\u213C-\\\\u213F\\\\u2145-\\\\u2149\\\\u214E\\\\u2160-\\\\u2188\\\\u2C00-\\\\u2C2E\\\\u2C30-\\\\u2C5E\\\\u2C60-\\\\u2CE4\\\\u2CEB-\\\\u2CF3\\\\u2D00-\\\\u2D25\\\\u2D27\\\\u2D2D\\\\u2D30-\\\\u2D67\\\\u2D6F\\\\u2D7F-\\\\u2D96\\\\u2DA0-\\\\u2DA6\\\\u2DA8-\\\\u2DAE\\\\u2DB0-\\\\u2DB6\\\\u2DB8-\\\\u2DBE\\\\u2DC0-\\\\u2DC6\\\\u2DC8-\\\\u2DCE\\\\u2DD0-\\\\u2DD6\\\\u2DD8-\\\\u2DDE\\\\u2DE0-\\\\u2DFF\\\\u2E2F\\\\u3005-\\\\u3007\\\\u3021-\\\\u302F\\\\u3031-\\\\u3035\\\\u3038-\\\\u303C\\\\u3041-\\\\u3096\\\\u3099\\\\u309A\\\\u309D-\\\\u309F\\\\u30A1-\\\\u30FA\\\\u30FC-\\\\u30FF\\\\u3105-\\\\u312D\\\\u3131-\\\\u318E\\\\u31A0-\\\\u31BA\\\\u31F0-\\\\u31FF\\\\u3400-\\\\u4DB5\\\\u4E00-\\\\u9FCC\\\\uA000-\\\\uA48C\\\\uA4D0-\\\\uA4FD\\\\uA500-\\\\uA60C\\\\uA610-\\\\uA62B\\\\uA640-\\\\uA66F\\\\uA674-\\\\uA67D\\\\uA67F-\\\\uA69D\\\\uA69F-\\\\uA6F1\\\\uA717-\\\\uA71F\\\\uA722-\\\\uA788\\\\uA78B-\\\\uA78E\\\\uA790-\\\\uA7AD\\\\uA7B0\\\\uA7B1\\\\uA7F7-\\\\uA827\\\\uA840-\\\\uA873\\\\uA880-\\\\uA8C4\\\\uA8D0-\\\\uA8D9\\\\uA8E0-\\\\uA8F7\\\\uA8FB\\\\uA900-\\\\uA92D\\\\uA930-\\\\uA953\\\\uA960-\\\\uA97C\\\\uA980-\\\\uA9C0\\\\uA9CF-\\\\uA9D9\\\\uA9E0-\\\\uA9FE\\\\uAA00-\\\\uAA36\\\\uAA40-\\\\uAA4D\\\\uAA50-\\\\uAA59\\\\uAA60-\\\\uAA76\\\\uAA7A-\\\\uAAC2\\\\uAADB-\\\\uAADD\\\\uAAE0-\\\\uAAEF\\\\uAAF2-\\\\uAAF6\\\\uAB01-\\\\uAB06\\\\uAB09-\\\\uAB0E\\\\uAB11-\\\\uAB16\\\\uAB20-\\\\uAB26\\\\uAB28-\\\\uAB2E\\\\uAB30-\\\\uAB5A\\\\uAB5C-\\\\uAB5F\\\\uAB64\\\\uAB65\\\\uABC0-\\\\uABEA\\\\uABEC\\\\uABED\\\\uABF0-\\\\uABF9\\\\uAC00-\\\\uD7A3\\\\uD7B0-\\\\uD7C6\\\\uD7CB-\\\\uD7FB\\\\uF900-\\\\uFA6D\\\\uFA70-\\\\uFAD9\\\\uFB00-\\\\uFB06\\\\uFB13-\\\\uFB17\\\\uFB1D-\\\\uFB28\\\\uFB2A-\\\\uFB36\\\\uFB38-\\\\uFB3C\\\\uFB3E\\\\uFB40\\\\uFB41\\\\uFB43\\\\uFB44\\\\uFB46-\\\\uFBB1\\\\uFBD3-\\\\uFD3D\\\\uFD50-\\\\uFD8F\\\\uFD92-\\\\uFDC7\\\\uFDF0-\\\\uFDFB\\\\uFE00-\\\\uFE0F\\\\uFE20-\\\\uFE2D\\\\uFE33\\\\uFE34\\\\uFE4D-\\\\uFE4F\\\\uFE70-\\\\uFE74\\\\uFE76-\\\\uFEFC\\\\uFF10-\\\\uFF19\\\\uFF21-\\\\uFF3A\\\\uFF3F\\\\uFF41-\\\\uFF5A\\\\uFF66-\\\\uFFBE\\\\uFFC2-\\\\uFFC7\\\\uFFCA-\\\\uFFCF\\\\uFFD2-\\\\uFFD7\\\\uFFDA-\\\\uFFDC]'); // Ensure the condition is true, otherwise throw an error.\n  // This is only to have a better contract semantic, i.e. another safety net\n  // to catch a logic error. The condition shall be fulfilled in normal case.\n  // Do NOT use this to enforce a certain condition on any user input.\n\n  function assert(condition, message) {\n    /* istanbul ignore next */\n    if (!condition) {\n      throw new Error('ASSERT: ' + message);\n    }\n  }\n\n  function isDecimalDigit(ch) {\n    return ch >= 0x30 && ch <= 0x39; // 0..9\n  }\n\n  function isHexDigit(ch) {\n    return '0123456789abcdefABCDEF'.indexOf(ch) >= 0;\n  }\n\n  function isOctalDigit(ch) {\n    return '01234567'.indexOf(ch) >= 0;\n  } // 7.2 White Space\n\n\n  function isWhiteSpace(ch) {\n    return ch === 0x20 || ch === 0x09 || ch === 0x0B || ch === 0x0C || ch === 0xA0 || ch >= 0x1680 && [0x1680, 0x180E, 0x2000, 0x2001, 0x2002, 0x2003, 0x2004, 0x2005, 0x2006, 0x2007, 0x2008, 0x2009, 0x200A, 0x202F, 0x205F, 0x3000, 0xFEFF].indexOf(ch) >= 0;\n  } // 7.3 Line Terminators\n\n\n  function isLineTerminator(ch) {\n    return ch === 0x0A || ch === 0x0D || ch === 0x2028 || ch === 0x2029;\n  } // 7.6 Identifier Names and Identifiers\n\n\n  function isIdentifierStart(ch) {\n    return ch === 0x24 || ch === 0x5F || // $ (dollar) and _ (underscore)\n    ch >= 0x41 && ch <= 0x5A || // A..Z\n    ch >= 0x61 && ch <= 0x7A || // a..z\n    ch === 0x5C || // \\ (backslash)\n    ch >= 0x80 && RegexNonAsciiIdentifierStart.test(String.fromCharCode(ch));\n  }\n\n  function isIdentifierPart(ch) {\n    return ch === 0x24 || ch === 0x5F || // $ (dollar) and _ (underscore)\n    ch >= 0x41 && ch <= 0x5A || // A..Z\n    ch >= 0x61 && ch <= 0x7A || // a..z\n    ch >= 0x30 && ch <= 0x39 || // 0..9\n    ch === 0x5C || // \\ (backslash)\n    ch >= 0x80 && RegexNonAsciiIdentifierPart.test(String.fromCharCode(ch));\n  } // 7.6.1.1 Keywords\n\n\n  const keywords = {\n    'if': 1,\n    'in': 1,\n    'do': 1,\n    'var': 1,\n    'for': 1,\n    'new': 1,\n    'try': 1,\n    'let': 1,\n    'this': 1,\n    'else': 1,\n    'case': 1,\n    'void': 1,\n    'with': 1,\n    'enum': 1,\n    'while': 1,\n    'break': 1,\n    'catch': 1,\n    'throw': 1,\n    'const': 1,\n    'yield': 1,\n    'class': 1,\n    'super': 1,\n    'return': 1,\n    'typeof': 1,\n    'delete': 1,\n    'switch': 1,\n    'export': 1,\n    'import': 1,\n    'public': 1,\n    'static': 1,\n    'default': 1,\n    'finally': 1,\n    'extends': 1,\n    'package': 1,\n    'private': 1,\n    'function': 1,\n    'continue': 1,\n    'debugger': 1,\n    'interface': 1,\n    'protected': 1,\n    'instanceof': 1,\n    'implements': 1\n  };\n\n  function skipComment() {\n    while (index < length) {\n      const ch = source.charCodeAt(index);\n\n      if (isWhiteSpace(ch) || isLineTerminator(ch)) {\n        ++index;\n      } else {\n        break;\n      }\n    }\n  }\n\n  function scanHexEscape(prefix) {\n    var i,\n        len,\n        ch,\n        code = 0;\n    len = prefix === 'u' ? 4 : 2;\n\n    for (i = 0; i < len; ++i) {\n      if (index < length && isHexDigit(source[index])) {\n        ch = source[index++];\n        code = code * 16 + '0123456789abcdef'.indexOf(ch.toLowerCase());\n      } else {\n        throwError({}, MessageUnexpectedToken, ILLEGAL$1);\n      }\n    }\n\n    return String.fromCharCode(code);\n  }\n\n  function scanUnicodeCodePointEscape() {\n    var ch, code, cu1, cu2;\n    ch = source[index];\n    code = 0; // At least, one hex digit is required.\n\n    if (ch === '}') {\n      throwError({}, MessageUnexpectedToken, ILLEGAL$1);\n    }\n\n    while (index < length) {\n      ch = source[index++];\n\n      if (!isHexDigit(ch)) {\n        break;\n      }\n\n      code = code * 16 + '0123456789abcdef'.indexOf(ch.toLowerCase());\n    }\n\n    if (code > 0x10FFFF || ch !== '}') {\n      throwError({}, MessageUnexpectedToken, ILLEGAL$1);\n    } // UTF-16 Encoding\n\n\n    if (code <= 0xFFFF) {\n      return String.fromCharCode(code);\n    }\n\n    cu1 = (code - 0x10000 >> 10) + 0xD800;\n    cu2 = (code - 0x10000 & 1023) + 0xDC00;\n    return String.fromCharCode(cu1, cu2);\n  }\n\n  function getEscapedIdentifier() {\n    var ch, id;\n    ch = source.charCodeAt(index++);\n    id = String.fromCharCode(ch); // '\\u' (U+005C, U+0075) denotes an escaped character.\n\n    if (ch === 0x5C) {\n      if (source.charCodeAt(index) !== 0x75) {\n        throwError({}, MessageUnexpectedToken, ILLEGAL$1);\n      }\n\n      ++index;\n      ch = scanHexEscape('u');\n\n      if (!ch || ch === '\\\\' || !isIdentifierStart(ch.charCodeAt(0))) {\n        throwError({}, MessageUnexpectedToken, ILLEGAL$1);\n      }\n\n      id = ch;\n    }\n\n    while (index < length) {\n      ch = source.charCodeAt(index);\n\n      if (!isIdentifierPart(ch)) {\n        break;\n      }\n\n      ++index;\n      id += String.fromCharCode(ch); // '\\u' (U+005C, U+0075) denotes an escaped character.\n\n      if (ch === 0x5C) {\n        id = id.substr(0, id.length - 1);\n\n        if (source.charCodeAt(index) !== 0x75) {\n          throwError({}, MessageUnexpectedToken, ILLEGAL$1);\n        }\n\n        ++index;\n        ch = scanHexEscape('u');\n\n        if (!ch || ch === '\\\\' || !isIdentifierPart(ch.charCodeAt(0))) {\n          throwError({}, MessageUnexpectedToken, ILLEGAL$1);\n        }\n\n        id += ch;\n      }\n    }\n\n    return id;\n  }\n\n  function getIdentifier() {\n    var start, ch;\n    start = index++;\n\n    while (index < length) {\n      ch = source.charCodeAt(index);\n\n      if (ch === 0x5C) {\n        // Blackslash (U+005C) marks Unicode escape sequence.\n        index = start;\n        return getEscapedIdentifier();\n      }\n\n      if (isIdentifierPart(ch)) {\n        ++index;\n      } else {\n        break;\n      }\n    }\n\n    return source.slice(start, index);\n  }\n\n  function scanIdentifier() {\n    var start, id, type;\n    start = index; // Backslash (U+005C) starts an escaped character.\n\n    id = source.charCodeAt(index) === 0x5C ? getEscapedIdentifier() : getIdentifier(); // There is no keyword or literal with only one character.\n    // Thus, it must be an identifier.\n\n    if (id.length === 1) {\n      type = TokenIdentifier;\n    } else if (keywords.hasOwnProperty(id)) {\n      // eslint-disable-line no-prototype-builtins\n      type = TokenKeyword;\n    } else if (id === 'null') {\n      type = TokenNullLiteral;\n    } else if (id === 'true' || id === 'false') {\n      type = TokenBooleanLiteral;\n    } else {\n      type = TokenIdentifier;\n    }\n\n    return {\n      type: type,\n      value: id,\n      start: start,\n      end: index\n    };\n  } // 7.7 Punctuators\n\n\n  function scanPunctuator() {\n    var start = index,\n        code = source.charCodeAt(index),\n        code2,\n        ch1 = source[index],\n        ch2,\n        ch3,\n        ch4;\n\n    switch (code) {\n      // Check for most common single-character punctuators.\n      case 0x2E: // . dot\n\n      case 0x28: // ( open bracket\n\n      case 0x29: // ) close bracket\n\n      case 0x3B: // ; semicolon\n\n      case 0x2C: // , comma\n\n      case 0x7B: // { open curly brace\n\n      case 0x7D: // } close curly brace\n\n      case 0x5B: // [\n\n      case 0x5D: // ]\n\n      case 0x3A: // :\n\n      case 0x3F: // ?\n\n      case 0x7E:\n        // ~\n        ++index;\n        return {\n          type: TokenPunctuator,\n          value: String.fromCharCode(code),\n          start: start,\n          end: index\n        };\n\n      default:\n        code2 = source.charCodeAt(index + 1); // '=' (U+003D) marks an assignment or comparison operator.\n\n        if (code2 === 0x3D) {\n          switch (code) {\n            case 0x2B: // +\n\n            case 0x2D: // -\n\n            case 0x2F: // /\n\n            case 0x3C: // <\n\n            case 0x3E: // >\n\n            case 0x5E: // ^\n\n            case 0x7C: // |\n\n            case 0x25: // %\n\n            case 0x26: // &\n\n            case 0x2A:\n              // *\n              index += 2;\n              return {\n                type: TokenPunctuator,\n                value: String.fromCharCode(code) + String.fromCharCode(code2),\n                start: start,\n                end: index\n              };\n\n            case 0x21: // !\n\n            case 0x3D:\n              // =\n              index += 2; // !== and ===\n\n              if (source.charCodeAt(index) === 0x3D) {\n                ++index;\n              }\n\n              return {\n                type: TokenPunctuator,\n                value: source.slice(start, index),\n                start: start,\n                end: index\n              };\n          }\n        }\n\n    } // 4-character punctuator: >>>=\n\n\n    ch4 = source.substr(index, 4);\n\n    if (ch4 === '>>>=') {\n      index += 4;\n      return {\n        type: TokenPunctuator,\n        value: ch4,\n        start: start,\n        end: index\n      };\n    } // 3-character punctuators: === !== >>> <<= >>=\n\n\n    ch3 = ch4.substr(0, 3);\n\n    if (ch3 === '>>>' || ch3 === '<<=' || ch3 === '>>=') {\n      index += 3;\n      return {\n        type: TokenPunctuator,\n        value: ch3,\n        start: start,\n        end: index\n      };\n    } // Other 2-character punctuators: ++ -- << >> && ||\n\n\n    ch2 = ch3.substr(0, 2);\n\n    if (ch1 === ch2[1] && '+-<>&|'.indexOf(ch1) >= 0 || ch2 === '=>') {\n      index += 2;\n      return {\n        type: TokenPunctuator,\n        value: ch2,\n        start: start,\n        end: index\n      };\n    } // 1-character punctuators: < > = ! + - * % & | ^ /\n\n\n    if ('<>=!+-*%&|^/'.indexOf(ch1) >= 0) {\n      ++index;\n      return {\n        type: TokenPunctuator,\n        value: ch1,\n        start: start,\n        end: index\n      };\n    }\n\n    throwError({}, MessageUnexpectedToken, ILLEGAL$1);\n  } // 7.8.3 Numeric Literals\n\n\n  function scanHexLiteral(start) {\n    let number = '';\n\n    while (index < length) {\n      if (!isHexDigit(source[index])) {\n        break;\n      }\n\n      number += source[index++];\n    }\n\n    if (number.length === 0) {\n      throwError({}, MessageUnexpectedToken, ILLEGAL$1);\n    }\n\n    if (isIdentifierStart(source.charCodeAt(index))) {\n      throwError({}, MessageUnexpectedToken, ILLEGAL$1);\n    }\n\n    return {\n      type: TokenNumericLiteral,\n      value: parseInt('0x' + number, 16),\n      start: start,\n      end: index\n    };\n  }\n\n  function scanOctalLiteral(start) {\n    let number = '0' + source[index++];\n\n    while (index < length) {\n      if (!isOctalDigit(source[index])) {\n        break;\n      }\n\n      number += source[index++];\n    }\n\n    if (isIdentifierStart(source.charCodeAt(index)) || isDecimalDigit(source.charCodeAt(index))) {\n      throwError({}, MessageUnexpectedToken, ILLEGAL$1);\n    }\n\n    return {\n      type: TokenNumericLiteral,\n      value: parseInt(number, 8),\n      octal: true,\n      start: start,\n      end: index\n    };\n  }\n\n  function scanNumericLiteral() {\n    var number, start, ch;\n    ch = source[index];\n    assert(isDecimalDigit(ch.charCodeAt(0)) || ch === '.', 'Numeric literal must start with a decimal digit or a decimal point');\n    start = index;\n    number = '';\n\n    if (ch !== '.') {\n      number = source[index++];\n      ch = source[index]; // Hex number starts with '0x'.\n      // Octal number starts with '0'.\n\n      if (number === '0') {\n        if (ch === 'x' || ch === 'X') {\n          ++index;\n          return scanHexLiteral(start);\n        }\n\n        if (isOctalDigit(ch)) {\n          return scanOctalLiteral(start);\n        } // decimal number starts with '0' such as '09' is illegal.\n\n\n        if (ch && isDecimalDigit(ch.charCodeAt(0))) {\n          throwError({}, MessageUnexpectedToken, ILLEGAL$1);\n        }\n      }\n\n      while (isDecimalDigit(source.charCodeAt(index))) {\n        number += source[index++];\n      }\n\n      ch = source[index];\n    }\n\n    if (ch === '.') {\n      number += source[index++];\n\n      while (isDecimalDigit(source.charCodeAt(index))) {\n        number += source[index++];\n      }\n\n      ch = source[index];\n    }\n\n    if (ch === 'e' || ch === 'E') {\n      number += source[index++];\n      ch = source[index];\n\n      if (ch === '+' || ch === '-') {\n        number += source[index++];\n      }\n\n      if (isDecimalDigit(source.charCodeAt(index))) {\n        while (isDecimalDigit(source.charCodeAt(index))) {\n          number += source[index++];\n        }\n      } else {\n        throwError({}, MessageUnexpectedToken, ILLEGAL$1);\n      }\n    }\n\n    if (isIdentifierStart(source.charCodeAt(index))) {\n      throwError({}, MessageUnexpectedToken, ILLEGAL$1);\n    }\n\n    return {\n      type: TokenNumericLiteral,\n      value: parseFloat(number),\n      start: start,\n      end: index\n    };\n  } // 7.8.4 String Literals\n\n\n  function scanStringLiteral() {\n    var str = '',\n        quote,\n        start,\n        ch,\n        code,\n        octal = false;\n    quote = source[index];\n    assert(quote === '\\'' || quote === '\"', 'String literal must starts with a quote');\n    start = index;\n    ++index;\n\n    while (index < length) {\n      ch = source[index++];\n\n      if (ch === quote) {\n        quote = '';\n        break;\n      } else if (ch === '\\\\') {\n        ch = source[index++];\n\n        if (!ch || !isLineTerminator(ch.charCodeAt(0))) {\n          switch (ch) {\n            case 'u':\n            case 'x':\n              if (source[index] === '{') {\n                ++index;\n                str += scanUnicodeCodePointEscape();\n              } else {\n                str += scanHexEscape(ch);\n              }\n\n              break;\n\n            case 'n':\n              str += '\\n';\n              break;\n\n            case 'r':\n              str += '\\r';\n              break;\n\n            case 't':\n              str += '\\t';\n              break;\n\n            case 'b':\n              str += '\\b';\n              break;\n\n            case 'f':\n              str += '\\f';\n              break;\n\n            case 'v':\n              str += '\\x0B';\n              break;\n\n            default:\n              if (isOctalDigit(ch)) {\n                code = '01234567'.indexOf(ch); // \\0 is not octal escape sequence\n\n                if (code !== 0) {\n                  octal = true;\n                }\n\n                if (index < length && isOctalDigit(source[index])) {\n                  octal = true;\n                  code = code * 8 + '01234567'.indexOf(source[index++]); // 3 digits are only allowed when string starts\n                  // with 0, 1, 2, 3\n\n                  if ('0123'.indexOf(ch) >= 0 && index < length && isOctalDigit(source[index])) {\n                    code = code * 8 + '01234567'.indexOf(source[index++]);\n                  }\n                }\n\n                str += String.fromCharCode(code);\n              } else {\n                str += ch;\n              }\n\n              break;\n          }\n        } else {\n          if (ch === '\\r' && source[index] === '\\n') {\n            ++index;\n          }\n        }\n      } else if (isLineTerminator(ch.charCodeAt(0))) {\n        break;\n      } else {\n        str += ch;\n      }\n    }\n\n    if (quote !== '') {\n      throwError({}, MessageUnexpectedToken, ILLEGAL$1);\n    }\n\n    return {\n      type: TokenStringLiteral,\n      value: str,\n      octal: octal,\n      start: start,\n      end: index\n    };\n  }\n\n  function testRegExp(pattern, flags) {\n    let tmp = pattern;\n\n    if (flags.indexOf('u') >= 0) {\n      // Replace each astral symbol and every Unicode code point\n      // escape sequence with a single ASCII symbol to avoid throwing on\n      // regular expressions that are only valid in combination with the\n      // `/u` flag.\n      // Note: replacing with the ASCII symbol `x` might cause false\n      // negatives in unlikely scenarios. For example, `[\\u{61}-b]` is a\n      // perfectly valid pattern that is equivalent to `[a-b]`, but it\n      // would be replaced by `[x-b]` which throws an error.\n      tmp = tmp.replace(/\\\\u\\{([0-9a-fA-F]+)\\}/g, ($0, $1) => {\n        if (parseInt($1, 16) <= 0x10FFFF) {\n          return 'x';\n        }\n\n        throwError({}, MessageInvalidRegExp);\n      }).replace(/[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g, 'x');\n    } // First, detect invalid regular expressions.\n\n\n    try {\n      new RegExp(tmp);\n    } catch (e) {\n      throwError({}, MessageInvalidRegExp);\n    } // Return a regular expression object for this pattern-flag pair, or\n    // `null` in case the current environment doesn't support the flags it\n    // uses.\n\n\n    try {\n      return new RegExp(pattern, flags);\n    } catch (exception) {\n      return null;\n    }\n  }\n\n  function scanRegExpBody() {\n    var ch, str, classMarker, terminated, body;\n    ch = source[index];\n    assert(ch === '/', 'Regular expression literal must start with a slash');\n    str = source[index++];\n    classMarker = false;\n    terminated = false;\n\n    while (index < length) {\n      ch = source[index++];\n      str += ch;\n\n      if (ch === '\\\\') {\n        ch = source[index++]; // ECMA-262 7.8.5\n\n        if (isLineTerminator(ch.charCodeAt(0))) {\n          throwError({}, MessageUnterminatedRegExp);\n        }\n\n        str += ch;\n      } else if (isLineTerminator(ch.charCodeAt(0))) {\n        throwError({}, MessageUnterminatedRegExp);\n      } else if (classMarker) {\n        if (ch === ']') {\n          classMarker = false;\n        }\n      } else {\n        if (ch === '/') {\n          terminated = true;\n          break;\n        } else if (ch === '[') {\n          classMarker = true;\n        }\n      }\n    }\n\n    if (!terminated) {\n      throwError({}, MessageUnterminatedRegExp);\n    } // Exclude leading and trailing slash.\n\n\n    body = str.substr(1, str.length - 2);\n    return {\n      value: body,\n      literal: str\n    };\n  }\n\n  function scanRegExpFlags() {\n    var ch, str, flags;\n    str = '';\n    flags = '';\n\n    while (index < length) {\n      ch = source[index];\n\n      if (!isIdentifierPart(ch.charCodeAt(0))) {\n        break;\n      }\n\n      ++index;\n\n      if (ch === '\\\\' && index < length) {\n        throwError({}, MessageUnexpectedToken, ILLEGAL$1);\n      } else {\n        flags += ch;\n        str += ch;\n      }\n    }\n\n    if (flags.search(/[^gimuy]/g) >= 0) {\n      throwError({}, MessageInvalidRegExp, flags);\n    }\n\n    return {\n      value: flags,\n      literal: str\n    };\n  }\n\n  function scanRegExp() {\n    var start, body, flags, value;\n    lookahead = null;\n    skipComment();\n    start = index;\n    body = scanRegExpBody();\n    flags = scanRegExpFlags();\n    value = testRegExp(body.value, flags.value);\n    return {\n      literal: body.literal + flags.literal,\n      value: value,\n      regex: {\n        pattern: body.value,\n        flags: flags.value\n      },\n      start: start,\n      end: index\n    };\n  }\n\n  function isIdentifierName(token) {\n    return token.type === TokenIdentifier || token.type === TokenKeyword || token.type === TokenBooleanLiteral || token.type === TokenNullLiteral;\n  }\n\n  function advance() {\n    skipComment();\n\n    if (index >= length) {\n      return {\n        type: TokenEOF,\n        start: index,\n        end: index\n      };\n    }\n\n    const ch = source.charCodeAt(index);\n\n    if (isIdentifierStart(ch)) {\n      return scanIdentifier();\n    } // Very common: ( and ) and ;\n\n\n    if (ch === 0x28 || ch === 0x29 || ch === 0x3B) {\n      return scanPunctuator();\n    } // String literal starts with single quote (U+0027) or double quote (U+0022).\n\n\n    if (ch === 0x27 || ch === 0x22) {\n      return scanStringLiteral();\n    } // Dot (.) U+002E can also start a floating-point number, hence the need\n    // to check the next character.\n\n\n    if (ch === 0x2E) {\n      if (isDecimalDigit(source.charCodeAt(index + 1))) {\n        return scanNumericLiteral();\n      }\n\n      return scanPunctuator();\n    }\n\n    if (isDecimalDigit(ch)) {\n      return scanNumericLiteral();\n    }\n\n    return scanPunctuator();\n  }\n\n  function lex() {\n    const token = lookahead;\n    index = token.end;\n    lookahead = advance();\n    index = token.end;\n    return token;\n  }\n\n  function peek() {\n    const pos = index;\n    lookahead = advance();\n    index = pos;\n  }\n\n  function finishArrayExpression(elements) {\n    const node = new ASTNode(SyntaxArrayExpression);\n    node.elements = elements;\n    return node;\n  }\n\n  function finishBinaryExpression(operator, left, right) {\n    const node = new ASTNode(operator === '||' || operator === '&&' ? SyntaxLogicalExpression : SyntaxBinaryExpression);\n    node.operator = operator;\n    node.left = left;\n    node.right = right;\n    return node;\n  }\n\n  function finishCallExpression(callee, args) {\n    const node = new ASTNode(SyntaxCallExpression);\n    node.callee = callee;\n    node.arguments = args;\n    return node;\n  }\n\n  function finishConditionalExpression(test, consequent, alternate) {\n    const node = new ASTNode(SyntaxConditionalExpression);\n    node.test = test;\n    node.consequent = consequent;\n    node.alternate = alternate;\n    return node;\n  }\n\n  function finishIdentifier(name) {\n    const node = new ASTNode(SyntaxIdentifier);\n    node.name = name;\n    return node;\n  }\n\n  function finishLiteral(token) {\n    const node = new ASTNode(SyntaxLiteral);\n    node.value = token.value;\n    node.raw = source.slice(token.start, token.end);\n\n    if (token.regex) {\n      if (node.raw === '//') {\n        node.raw = '/(?:)/';\n      }\n\n      node.regex = token.regex;\n    }\n\n    return node;\n  }\n\n  function finishMemberExpression(accessor, object, property) {\n    const node = new ASTNode(SyntaxMemberExpression);\n    node.computed = accessor === '[';\n    node.object = object;\n    node.property = property;\n    if (!node.computed) property.member = true;\n    return node;\n  }\n\n  function finishObjectExpression(properties) {\n    const node = new ASTNode(SyntaxObjectExpression);\n    node.properties = properties;\n    return node;\n  }\n\n  function finishProperty(kind, key, value) {\n    const node = new ASTNode(SyntaxProperty);\n    node.key = key;\n    node.value = value;\n    node.kind = kind;\n    return node;\n  }\n\n  function finishUnaryExpression(operator, argument) {\n    const node = new ASTNode(SyntaxUnaryExpression);\n    node.operator = operator;\n    node.argument = argument;\n    node.prefix = true;\n    return node;\n  } // Throw an exception\n\n\n  function throwError(token, messageFormat) {\n    var error,\n        args = Array.prototype.slice.call(arguments, 2),\n        msg = messageFormat.replace(/%(\\d)/g, (whole, index) => {\n      assert(index < args.length, 'Message reference must be in range');\n      return args[index];\n    });\n    error = new Error(msg);\n    error.index = index;\n    error.description = msg;\n    throw error;\n  } // Throw an exception because of the token.\n\n\n  function throwUnexpected(token) {\n    if (token.type === TokenEOF) {\n      throwError(token, MessageUnexpectedEOS);\n    }\n\n    if (token.type === TokenNumericLiteral) {\n      throwError(token, MessageUnexpectedNumber);\n    }\n\n    if (token.type === TokenStringLiteral) {\n      throwError(token, MessageUnexpectedString);\n    }\n\n    if (token.type === TokenIdentifier) {\n      throwError(token, MessageUnexpectedIdentifier);\n    }\n\n    if (token.type === TokenKeyword) {\n      throwError(token, MessageUnexpectedReserved);\n    } // BooleanLiteral, NullLiteral, or Punctuator.\n\n\n    throwError(token, MessageUnexpectedToken, token.value);\n  } // Expect the next token to match the specified punctuator.\n  // If not, an exception will be thrown.\n\n\n  function expect(value) {\n    const token = lex();\n\n    if (token.type !== TokenPunctuator || token.value !== value) {\n      throwUnexpected(token);\n    }\n  } // Return true if the next token matches the specified punctuator.\n\n\n  function match(value) {\n    return lookahead.type === TokenPunctuator && lookahead.value === value;\n  } // Return true if the next token matches the specified keyword\n\n\n  function matchKeyword(keyword) {\n    return lookahead.type === TokenKeyword && lookahead.value === keyword;\n  } // 11.1.4 Array Initialiser\n\n\n  function parseArrayInitialiser() {\n    const elements = [];\n    index = lookahead.start;\n    expect('[');\n\n    while (!match(']')) {\n      if (match(',')) {\n        lex();\n        elements.push(null);\n      } else {\n        elements.push(parseConditionalExpression());\n\n        if (!match(']')) {\n          expect(',');\n        }\n      }\n    }\n\n    lex();\n    return finishArrayExpression(elements);\n  } // 11.1.5 Object Initialiser\n\n\n  function parseObjectPropertyKey() {\n    index = lookahead.start;\n    const token = lex(); // Note: This function is called only from parseObjectProperty(), where\n    // EOF and Punctuator tokens are already filtered out.\n\n    if (token.type === TokenStringLiteral || token.type === TokenNumericLiteral) {\n      if (token.octal) {\n        throwError(token, MessageStrictOctalLiteral);\n      }\n\n      return finishLiteral(token);\n    }\n\n    return finishIdentifier(token.value);\n  }\n\n  function parseObjectProperty() {\n    var token, key, id, value;\n    index = lookahead.start;\n    token = lookahead;\n\n    if (token.type === TokenIdentifier) {\n      id = parseObjectPropertyKey();\n      expect(':');\n      value = parseConditionalExpression();\n      return finishProperty('init', id, value);\n    }\n\n    if (token.type === TokenEOF || token.type === TokenPunctuator) {\n      throwUnexpected(token);\n    } else {\n      key = parseObjectPropertyKey();\n      expect(':');\n      value = parseConditionalExpression();\n      return finishProperty('init', key, value);\n    }\n  }\n\n  function parseObjectInitialiser() {\n    var properties = [],\n        property,\n        name,\n        key,\n        map = {},\n        toString = String;\n    index = lookahead.start;\n    expect('{');\n\n    while (!match('}')) {\n      property = parseObjectProperty();\n\n      if (property.key.type === SyntaxIdentifier) {\n        name = property.key.name;\n      } else {\n        name = toString(property.key.value);\n      }\n\n      key = '$' + name;\n\n      if (Object.prototype.hasOwnProperty.call(map, key)) {\n        throwError({}, MessageStrictDuplicateProperty);\n      } else {\n        map[key] = true;\n      }\n\n      properties.push(property);\n\n      if (!match('}')) {\n        expect(',');\n      }\n    }\n\n    expect('}');\n    return finishObjectExpression(properties);\n  } // 11.1.6 The Grouping Operator\n\n\n  function parseGroupExpression() {\n    expect('(');\n    const expr = parseExpression();\n    expect(')');\n    return expr;\n  } // 11.1 Primary Expressions\n\n\n  const legalKeywords = {\n    'if': 1\n  };\n\n  function parsePrimaryExpression() {\n    var type, token, expr;\n\n    if (match('(')) {\n      return parseGroupExpression();\n    }\n\n    if (match('[')) {\n      return parseArrayInitialiser();\n    }\n\n    if (match('{')) {\n      return parseObjectInitialiser();\n    }\n\n    type = lookahead.type;\n    index = lookahead.start;\n\n    if (type === TokenIdentifier || legalKeywords[lookahead.value]) {\n      expr = finishIdentifier(lex().value);\n    } else if (type === TokenStringLiteral || type === TokenNumericLiteral) {\n      if (lookahead.octal) {\n        throwError(lookahead, MessageStrictOctalLiteral);\n      }\n\n      expr = finishLiteral(lex());\n    } else if (type === TokenKeyword) {\n      throw new Error(DISABLED);\n    } else if (type === TokenBooleanLiteral) {\n      token = lex();\n      token.value = token.value === 'true';\n      expr = finishLiteral(token);\n    } else if (type === TokenNullLiteral) {\n      token = lex();\n      token.value = null;\n      expr = finishLiteral(token);\n    } else if (match('/') || match('/=')) {\n      expr = finishLiteral(scanRegExp());\n      peek();\n    } else {\n      throwUnexpected(lex());\n    }\n\n    return expr;\n  } // 11.2 Left-Hand-Side Expressions\n\n\n  function parseArguments() {\n    const args = [];\n    expect('(');\n\n    if (!match(')')) {\n      while (index < length) {\n        args.push(parseConditionalExpression());\n\n        if (match(')')) {\n          break;\n        }\n\n        expect(',');\n      }\n    }\n\n    expect(')');\n    return args;\n  }\n\n  function parseNonComputedProperty() {\n    index = lookahead.start;\n    const token = lex();\n\n    if (!isIdentifierName(token)) {\n      throwUnexpected(token);\n    }\n\n    return finishIdentifier(token.value);\n  }\n\n  function parseNonComputedMember() {\n    expect('.');\n    return parseNonComputedProperty();\n  }\n\n  function parseComputedMember() {\n    expect('[');\n    const expr = parseExpression();\n    expect(']');\n    return expr;\n  }\n\n  function parseLeftHandSideExpressionAllowCall() {\n    var expr, args, property;\n    expr = parsePrimaryExpression();\n\n    for (;;) {\n      if (match('.')) {\n        property = parseNonComputedMember();\n        expr = finishMemberExpression('.', expr, property);\n      } else if (match('(')) {\n        args = parseArguments();\n        expr = finishCallExpression(expr, args);\n      } else if (match('[')) {\n        property = parseComputedMember();\n        expr = finishMemberExpression('[', expr, property);\n      } else {\n        break;\n      }\n    }\n\n    return expr;\n  } // 11.3 Postfix Expressions\n\n\n  function parsePostfixExpression() {\n    const expr = parseLeftHandSideExpressionAllowCall();\n\n    if (lookahead.type === TokenPunctuator) {\n      if (match('++') || match('--')) {\n        throw new Error(DISABLED);\n      }\n    }\n\n    return expr;\n  } // 11.4 Unary Operators\n\n\n  function parseUnaryExpression() {\n    var token, expr;\n\n    if (lookahead.type !== TokenPunctuator && lookahead.type !== TokenKeyword) {\n      expr = parsePostfixExpression();\n    } else if (match('++') || match('--')) {\n      throw new Error(DISABLED);\n    } else if (match('+') || match('-') || match('~') || match('!')) {\n      token = lex();\n      expr = parseUnaryExpression();\n      expr = finishUnaryExpression(token.value, expr);\n    } else if (matchKeyword('delete') || matchKeyword('void') || matchKeyword('typeof')) {\n      throw new Error(DISABLED);\n    } else {\n      expr = parsePostfixExpression();\n    }\n\n    return expr;\n  }\n\n  function binaryPrecedence(token) {\n    let prec = 0;\n\n    if (token.type !== TokenPunctuator && token.type !== TokenKeyword) {\n      return 0;\n    }\n\n    switch (token.value) {\n      case '||':\n        prec = 1;\n        break;\n\n      case '&&':\n        prec = 2;\n        break;\n\n      case '|':\n        prec = 3;\n        break;\n\n      case '^':\n        prec = 4;\n        break;\n\n      case '&':\n        prec = 5;\n        break;\n\n      case '==':\n      case '!=':\n      case '===':\n      case '!==':\n        prec = 6;\n        break;\n\n      case '<':\n      case '>':\n      case '<=':\n      case '>=':\n      case 'instanceof':\n      case 'in':\n        prec = 7;\n        break;\n\n      case '<<':\n      case '>>':\n      case '>>>':\n        prec = 8;\n        break;\n\n      case '+':\n      case '-':\n        prec = 9;\n        break;\n\n      case '*':\n      case '/':\n      case '%':\n        prec = 11;\n        break;\n    }\n\n    return prec;\n  } // 11.5 Multiplicative Operators\n  // 11.6 Additive Operators\n  // 11.7 Bitwise Shift Operators\n  // 11.8 Relational Operators\n  // 11.9 Equality Operators\n  // 11.10 Binary Bitwise Operators\n  // 11.11 Binary Logical Operators\n\n\n  function parseBinaryExpression() {\n    var marker, markers, expr, token, prec, stack, right, operator, left, i;\n    marker = lookahead;\n    left = parseUnaryExpression();\n    token = lookahead;\n    prec = binaryPrecedence(token);\n\n    if (prec === 0) {\n      return left;\n    }\n\n    token.prec = prec;\n    lex();\n    markers = [marker, lookahead];\n    right = parseUnaryExpression();\n    stack = [left, token, right];\n\n    while ((prec = binaryPrecedence(lookahead)) > 0) {\n      // Reduce: make a binary expression from the three topmost entries.\n      while (stack.length > 2 && prec <= stack[stack.length - 2].prec) {\n        right = stack.pop();\n        operator = stack.pop().value;\n        left = stack.pop();\n        markers.pop();\n        expr = finishBinaryExpression(operator, left, right);\n        stack.push(expr);\n      } // Shift.\n\n\n      token = lex();\n      token.prec = prec;\n      stack.push(token);\n      markers.push(lookahead);\n      expr = parseUnaryExpression();\n      stack.push(expr);\n    } // Final reduce to clean-up the stack.\n\n\n    i = stack.length - 1;\n    expr = stack[i];\n    markers.pop();\n\n    while (i > 1) {\n      markers.pop();\n      expr = finishBinaryExpression(stack[i - 1].value, stack[i - 2], expr);\n      i -= 2;\n    }\n\n    return expr;\n  } // 11.12 Conditional Operator\n\n\n  function parseConditionalExpression() {\n    var expr, consequent, alternate;\n    expr = parseBinaryExpression();\n\n    if (match('?')) {\n      lex();\n      consequent = parseConditionalExpression();\n      expect(':');\n      alternate = parseConditionalExpression();\n      expr = finishConditionalExpression(expr, consequent, alternate);\n    }\n\n    return expr;\n  } // 11.14 Comma Operator\n\n\n  function parseExpression() {\n    const expr = parseConditionalExpression();\n\n    if (match(',')) {\n      throw new Error(DISABLED); // no sequence expressions\n    }\n\n    return expr;\n  }\n\n  function parser(code) {\n    source = code;\n    index = 0;\n    length = source.length;\n    lookahead = null;\n    peek();\n    const expr = parseExpression();\n\n    if (lookahead.type !== TokenEOF) {\n      throw new Error('Unexpect token after expression.');\n    }\n\n    return expr;\n  }\n\n  function getName(node) {\n    const name = [];\n\n    if (node.type === 'Identifier') {\n      return [node.name];\n    }\n\n    if (node.type === 'Literal') {\n      return [node.value];\n    }\n\n    if (node.type === 'MemberExpression') {\n      name.push(...getName(node.object));\n      name.push(...getName(node.property));\n    }\n\n    return name;\n  }\n\n  function startsWithDatum(node) {\n    if (node.object.type === 'MemberExpression') {\n      return startsWithDatum(node.object);\n    }\n\n    return node.object.name === 'datum';\n  }\n\n  function getDependentFields(expression) {\n    const ast = parser(expression);\n    const dependents = new Set();\n    ast.visit(node => {\n      if (node.type === 'MemberExpression' && startsWithDatum(node)) {\n        dependents.add(getName(node).slice(1).join('.'));\n      }\n    });\n    return dependents;\n  }\n\n  class FilterNode extends DataFlowNode {\n    clone() {\n      return new FilterNode(null, this.model, duplicate(this.filter));\n    }\n\n    constructor(parent, model, filter) {\n      super(parent); // TODO: refactor this to not take a node and\n      // then add a static function makeFromOperand and make the constructor take only an expression\n\n      this.model = model;\n      this.filter = filter;\n\n      _defineProperty(this, \"expr\", void 0);\n\n      _defineProperty(this, \"_dependentFields\", void 0);\n\n      this.expr = expression(this.model, this.filter, this);\n      this._dependentFields = getDependentFields(this.expr);\n    }\n\n    dependentFields() {\n      return this._dependentFields;\n    }\n\n    producedFields() {\n      return new Set(); // filter does not produce any new fields\n    }\n\n    assemble() {\n      return {\n        type: 'filter',\n        expr: this.expr\n      };\n    }\n\n    hash() {\n      return \"Filter \".concat(this.expr);\n    }\n\n  }\n\n  function parseUnitSelection(model, selDefs) {\n    const selCmpts = {};\n    const selectionConfig = model.config.selection;\n\n    for (const name of keys(selDefs !== null && selDefs !== void 0 ? selDefs : {})) {\n      const selDef = duplicate(selDefs[name]);\n      const {\n        fields,\n        encodings,\n        ...cfg\n      } = selectionConfig[selDef.type]; // Project transform applies its defaults.\n      // Set default values from config if a property hasn't been specified,\n      // or if it is true. E.g., \"translate\": true should use the default\n      // event handlers for translate. However, true may be a valid value for\n      // a property (e.g., \"nearest\": true).\n\n      for (const key in cfg) {\n        // A selection should contain either `encodings` or `fields`, only use\n        // default values for these two values if neither of them is specified.\n        if (key === 'encodings' && selDef.fields || key === 'fields' && selDef.encodings) {\n          continue;\n        }\n\n        if (key === 'mark') {\n          selDef[key] = { ...cfg[key],\n            ...selDef[key]\n          };\n        }\n\n        if (selDef[key] === undefined || selDef[key] === true) {\n          var _cfg$key;\n\n          selDef[key] = (_cfg$key = cfg[key]) !== null && _cfg$key !== void 0 ? _cfg$key : selDef[key];\n        }\n      }\n\n      const safeName = varName(name);\n      const selCmpt = selCmpts[safeName] = { ...selDef,\n        name: safeName,\n        events: isString(selDef.on) ? eventSelector(selDef.on, 'scope') : duplicate(selDef.on)\n      };\n      forEachTransform(selCmpt, txCompiler => {\n        if (txCompiler.has(selCmpt) && txCompiler.parse) {\n          txCompiler.parse(model, selCmpt, selDef, selDefs[name]);\n        }\n      });\n    }\n\n    return selCmpts;\n  }\n  function parseSelectionPredicate(model, selections, dfnode, datum = 'datum') {\n    const stores = [];\n\n    function expr(name) {\n      const vname = varName(name);\n      const selCmpt = model.getSelectionComponent(vname, name);\n      const store = $(vname + STORE);\n\n      if (selCmpt.project.timeUnit) {\n        const child = dfnode !== null && dfnode !== void 0 ? dfnode : model.component.data.raw;\n        const tunode = selCmpt.project.timeUnit.clone();\n\n        if (child.parent) {\n          tunode.insertAsParentOf(child);\n        } else {\n          child.parent = tunode;\n        }\n      }\n\n      if (selCmpt.empty !== 'none') {\n        stores.push(store);\n      }\n\n      return \"vlSelectionTest(\".concat(store, \", \").concat(datum) + (selCmpt.resolve === 'global' ? ')' : \", \".concat($(selCmpt.resolve), \")\"));\n    }\n\n    const predicateStr = logicalExpr(selections, expr);\n    return (stores.length ? '!(' + stores.map(s => \"length(data(\".concat(s, \"))\")).join(' || ') + ') || ' : '') + \"(\".concat(predicateStr, \")\");\n  }\n  function parseSelectionBinExtent(selCmpt, extent) {\n    const encoding = extent['encoding'];\n    let field = extent['field'];\n\n    if (!encoding && !field) {\n      field = selCmpt.project.items[0].field;\n\n      if (selCmpt.project.items.length > 1) {\n        warn('A \"field\" or \"encoding\" must be specified when using a selection as a scale domain. ' + \"Using \\\"field\\\": \".concat($(field), \".\"));\n      }\n    } else if (encoding && !field) {\n      const encodings = selCmpt.project.items.filter(p => p.channel === encoding);\n\n      if (!encodings.length || encodings.length > 1) {\n        field = selCmpt.project.items[0].field;\n        warn((!encodings.length ? 'No ' : 'Multiple ') + \"matching \".concat($(encoding), \" encoding found for selection \").concat($(extent.selection), \". \") + \"Using \\\"field\\\": \".concat($(field), \".\"));\n      } else {\n        field = encodings[0].field;\n      }\n    }\n\n    return \"\".concat(selCmpt.name, \"[\").concat($(field), \"]\");\n  }\n  function materializeSelections(model, main) {\n    forEachSelection(model, selCmpt => {\n      const selection = selCmpt.name;\n      const lookupName = model.getName(\"lookup_\".concat(selection));\n      model.component.data.outputNodes[lookupName] = selCmpt.materialized = new OutputNode(new FilterNode(main, model, {\n        selection\n      }), lookupName, DataSourceType.Lookup, model.component.data.outputNodeRefCounts);\n    });\n  }\n\n  /**\n   * Converts a predicate into an expression.\n   */\n  // model is only used for selection filters.\n\n  function expression(model, filterOp, node) {\n    return logicalExpr(filterOp, predicate => {\n      if (isString(predicate)) {\n        return predicate;\n      } else if (isSelectionPredicate(predicate)) {\n        return parseSelectionPredicate(model, predicate.selection, node);\n      } else {\n        // Filter Object\n        return fieldFilterExpression(predicate);\n      }\n    });\n  }\n\n  function assembleTitle(title, config) {\n    if (!title) {\n      return undefined;\n    }\n\n    if (isArray(title) && !isText(title)) {\n      return title.map(fieldDef => defaultTitle(fieldDef, config)).join(', ');\n    }\n\n    return title;\n  }\n\n  function setAxisEncode(axis, part, vgProp, vgRef) {\n    var _axis$encode, _axis$encode$part, _axis$encode$part$upd;\n\n    axis.encode = (_axis$encode = axis.encode) !== null && _axis$encode !== void 0 ? _axis$encode : {};\n    axis.encode[part] = (_axis$encode$part = axis.encode[part]) !== null && _axis$encode$part !== void 0 ? _axis$encode$part : {};\n    axis.encode[part].update = (_axis$encode$part$upd = axis.encode[part].update) !== null && _axis$encode$part$upd !== void 0 ? _axis$encode$part$upd : {}; // TODO: remove as any after https://github.com/prisma/nexus-prisma/issues/291\n\n    axis.encode[part].update[vgProp] = vgRef;\n  }\n\n  function assembleAxis(axisCmpt, kind, config, opt = {\n    header: false\n  }) {\n    const {\n      disable,\n      orient,\n      scale,\n      labelExpr,\n      title,\n      zindex,\n      ...axis\n    } = axisCmpt.combine();\n\n    if (disable) {\n      return undefined;\n    }\n\n    for (const prop in axis) {\n      const propType = AXIS_PROPERTY_TYPE[prop];\n      const propValue = axis[prop];\n\n      if (propType && propType !== kind && propType !== 'both') {\n        // Remove properties that are not valid for this kind of axis\n        delete axis[prop];\n      } else if (isConditionalAxisValue(propValue)) {\n        // deal with conditional axis value\n        const {\n          condition,\n          ...valueOrSignalRef\n        } = propValue;\n        const conditions = array(condition);\n        const propIndex = CONDITIONAL_AXIS_PROP_INDEX[prop];\n\n        if (propIndex) {\n          const {\n            vgProp,\n            part\n          } = propIndex; // If there is a corresponding Vega property for the channel,\n          // use Vega's custom axis encoding and delete the original axis property to avoid conflicts\n\n          const vgRef = [...conditions.map(c => {\n            const {\n              test,\n              ...valueOrSignalCRef\n            } = c;\n            return {\n              test: expression(null, test),\n              ...valueOrSignalCRef\n            };\n          }), valueOrSignalRef];\n          setAxisEncode(axis, part, vgProp, vgRef);\n          delete axis[prop];\n        } else if (propIndex === null) {\n          // If propIndex is null, this means we support conditional axis property by converting the condition to signal instead.\n          const signalRef = {\n            signal: conditions.map(c => {\n              const {\n                test,\n                ...valueOrSignalCRef\n              } = c;\n              return \"\".concat(expression(null, test), \" ? \").concat(exprFromValueOrSignalRef(valueOrSignalCRef), \" : \");\n            }).join('') + exprFromValueOrSignalRef(valueOrSignalRef)\n          };\n          axis[prop] = signalRef;\n        }\n      } else if (isSignalRef(propValue)) {\n        const propIndex = CONDITIONAL_AXIS_PROP_INDEX[prop];\n\n        if (propIndex) {\n          const {\n            vgProp,\n            part\n          } = propIndex;\n          setAxisEncode(axis, part, vgProp, propValue);\n          delete axis[prop];\n        } // else do nothing since the property already supports signal\n\n      }\n    }\n\n    if (kind === 'grid') {\n      if (!axis.grid) {\n        return undefined;\n      } // Remove unnecessary encode block\n\n\n      if (axis.encode) {\n        // Only need to keep encode block for grid\n        const {\n          grid\n        } = axis.encode;\n        axis.encode = { ...(grid ? {\n            grid\n          } : {})\n        };\n\n        if (isEmpty(axis.encode)) {\n          delete axis.encode;\n        }\n      }\n\n      return {\n        scale,\n        orient,\n        ...axis,\n        domain: false,\n        labels: false,\n        aria: false,\n        // always hide grid axis\n        // Always set min/maxExtent to 0 to ensure that `config.axis*.minExtent` and `config.axis*.maxExtent`\n        // would not affect gridAxis\n        maxExtent: 0,\n        minExtent: 0,\n        ticks: false,\n        zindex: getFirstDefined(zindex, 0) // put grid behind marks by default\n\n      };\n    } else {\n      // kind === 'main'\n      if (!opt.header && axisCmpt.mainExtracted) {\n        // if mainExtracted has been extracted to a separate facet\n        return undefined;\n      }\n\n      if (labelExpr !== undefined) {\n        var _axis$encode2, _axis$encode2$labels;\n\n        let expr = labelExpr;\n\n        if (((_axis$encode2 = axis.encode) === null || _axis$encode2 === void 0 ? void 0 : (_axis$encode2$labels = _axis$encode2.labels) === null || _axis$encode2$labels === void 0 ? void 0 : _axis$encode2$labels.update) && isSignalRef(axis.encode.labels.update.text)) {\n          expr = replaceAll(labelExpr, 'datum.label', axis.encode.labels.update.text.signal);\n        }\n\n        setAxisEncode(axis, 'labels', 'text', {\n          signal: expr\n        });\n      }\n\n      if (axis.labelAlign === null) {\n        delete axis.labelAlign;\n      } // Remove unnecessary encode block\n\n\n      if (axis.encode) {\n        for (const part of AXIS_PARTS) {\n          if (!axisCmpt.hasAxisPart(part)) {\n            delete axis.encode[part];\n          }\n        }\n\n        if (isEmpty(axis.encode)) {\n          delete axis.encode;\n        }\n      }\n\n      const titleString = assembleTitle(title, config);\n      return {\n        scale,\n        orient,\n        grid: false,\n        ...(titleString ? {\n          title: titleString\n        } : {}),\n        ...axis,\n        ...(config.aria === false ? {\n          aria: false\n        } : {}),\n        zindex: getFirstDefined(zindex, 0) // put axis line above marks by default\n\n      };\n    }\n  }\n  /**\n   * Add axis signals so grid line works correctly\n   * (Fix https://github.com/vega/vega-lite/issues/4226)\n   */\n\n  function assembleAxisSignals(model) {\n    const {\n      axes\n    } = model.component;\n    const signals = [];\n\n    for (const channel of POSITION_SCALE_CHANNELS) {\n      if (axes[channel]) {\n        for (const axis of axes[channel]) {\n          if (!axis.get('disable') && !axis.get('gridScale')) {\n            // If there is x-axis but no y-scale for gridScale, need to set height/width so x-axis can draw the grid with the right height. Same for y-axis and width.\n            const sizeType = channel === 'x' ? 'height' : 'width';\n            const update = model.getSizeSignalRef(sizeType).signal;\n\n            if (sizeType !== update) {\n              signals.push({\n                name: sizeType,\n                update: update\n              });\n            }\n          }\n        }\n      }\n    }\n\n    return signals;\n  }\n  function assembleAxes(axisComponents, config) {\n    const {\n      x = [],\n      y = []\n    } = axisComponents;\n    return [...x.map(a => assembleAxis(a, 'grid', config)), ...y.map(a => assembleAxis(a, 'grid', config)), ...x.map(a => assembleAxis(a, 'main', config)), ...y.map(a => assembleAxis(a, 'main', config))].filter(a => a); // filter undefined\n  }\n\n  function getAxisConfigFromConfigTypes(configTypes, config, channel, orient) {\n    // TODO: add special casing to add conditional value based on orient signal\n    return Object.assign.apply(null, [{}, ...configTypes.map(configType => {\n      if (configType === 'axisOrient') {\n        const orient1 = channel === 'x' ? 'bottom' : 'left';\n        const orientConfig1 = config[channel === 'x' ? 'axisBottom' : 'axisLeft'] || {};\n        const orientConfig2 = config[channel === 'x' ? 'axisTop' : 'axisRight'] || {};\n        const props = new Set([...keys(orientConfig1), ...keys(orientConfig2)]);\n        const conditionalOrientAxisConfig = {};\n\n        for (const prop of props.values()) {\n          conditionalOrientAxisConfig[prop] = {\n            // orient is surely signal in this case\n            signal: \"\".concat(orient['signal'], \" === \\\"\").concat(orient1, \"\\\" ? \").concat(signalOrStringValue(orientConfig1[prop]), \" : \").concat(signalOrStringValue(orientConfig2[prop]))\n          };\n        }\n\n        return conditionalOrientAxisConfig;\n      }\n\n      return config[configType];\n    })]);\n  }\n\n  function getAxisConfigs(channel, scaleType, orient, config) {\n    const typeBasedConfigTypes = scaleType === 'band' ? ['axisDiscrete', 'axisBand'] : scaleType === 'point' ? ['axisDiscrete', 'axisPoint'] : isQuantitative(scaleType) ? ['axisQuantitative'] : scaleType === 'time' || scaleType === 'utc' ? ['axisTemporal'] : [];\n    const axisChannel = channel === 'x' ? 'axisX' : 'axisY';\n    const axisOrient = isSignalRef(orient) ? 'axisOrient' : 'axis' + titleCase(orient); // axisTop, axisBottom, ...\n\n    const vlOnlyConfigTypes = [// technically Vega does have axisBand, but if we make another separation here,\n    // it will further introduce complexity in the code\n    ...typeBasedConfigTypes, ...typeBasedConfigTypes.map(c => axisChannel + c.substr(4))];\n    const vgConfigTypes = ['axis', axisOrient, axisChannel];\n    return {\n      vlOnlyAxisConfig: getAxisConfigFromConfigTypes(vlOnlyConfigTypes, config, channel, orient),\n      vgAxisConfig: getAxisConfigFromConfigTypes(vgConfigTypes, config, channel, orient),\n      axisConfigStyle: getAxisConfigStyle([...vgConfigTypes, ...vlOnlyConfigTypes], config)\n    };\n  }\n  function getAxisConfigStyle(axisConfigTypes, config) {\n    const toMerge = [{}];\n\n    for (const configType of axisConfigTypes) {\n      var _config$configType;\n\n      // TODO: add special casing to add conditional value based on orient signal\n      let style = (_config$configType = config[configType]) === null || _config$configType === void 0 ? void 0 : _config$configType.style;\n\n      if (style) {\n        style = array(style);\n\n        for (const s of style) {\n          toMerge.push(config.style[s]);\n        }\n      }\n    }\n\n    return Object.assign.apply(null, toMerge);\n  }\n  function getAxisConfig(property, styleConfigIndex, style, axisConfigs = {}) {\n    const styleConfig = getStyleConfig(property, style, styleConfigIndex);\n\n    if (styleConfig !== undefined) {\n      return {\n        configFrom: 'style',\n        configValue: styleConfig\n      };\n    }\n\n    for (const configFrom of ['vlOnlyAxisConfig', 'vgAxisConfig', 'axisConfigStyle']) {\n      var _axisConfigs$configFr;\n\n      if (((_axisConfigs$configFr = axisConfigs[configFrom]) === null || _axisConfigs$configFr === void 0 ? void 0 : _axisConfigs$configFr[property]) !== undefined) {\n        return {\n          configFrom,\n          configValue: axisConfigs[configFrom][property]\n        };\n      }\n    }\n\n    return {};\n  }\n\n  const axisRules = {\n    scale: ({\n      model,\n      channel\n    }) => model.scaleName(channel),\n    format: ({\n      fieldOrDatumDef,\n      config,\n      axis\n    }) => {\n      const {\n        format,\n        formatType\n      } = axis;\n      return guideFormat(fieldOrDatumDef, fieldOrDatumDef.type, format, formatType, config, true);\n    },\n    formatType: ({\n      axis,\n      fieldOrDatumDef,\n      scaleType\n    }) => {\n      const {\n        formatType\n      } = axis;\n      return guideFormatType(formatType, fieldOrDatumDef, scaleType);\n    },\n    grid: ({\n      fieldOrDatumDef,\n      axis,\n      scaleType\n    }) => {\n      if (isFieldDef(fieldOrDatumDef) && isBinned(fieldOrDatumDef.bin)) {\n        return false;\n      } else {\n        var _axis$grid;\n\n        return (_axis$grid = axis.grid) !== null && _axis$grid !== void 0 ? _axis$grid : defaultGrid(scaleType, fieldOrDatumDef);\n      }\n    },\n    gridScale: ({\n      model,\n      channel\n    }) => gridScale(model, channel),\n    labelAlign: ({\n      axis,\n      labelAngle,\n      orient,\n      channel\n    }) => axis.labelAlign || defaultLabelAlign(labelAngle, orient, channel),\n    labelAngle: ({\n      labelAngle\n    }) => labelAngle,\n    // we already calculate this in parse\n    labelBaseline: ({\n      axis,\n      labelAngle,\n      orient,\n      channel\n    }) => axis.labelBaseline || defaultLabelBaseline(labelAngle, orient, channel),\n    labelFlush: ({\n      axis,\n      fieldOrDatumDef,\n      channel\n    }) => {\n      var _axis$labelFlush;\n\n      return (_axis$labelFlush = axis.labelFlush) !== null && _axis$labelFlush !== void 0 ? _axis$labelFlush : defaultLabelFlush(fieldOrDatumDef.type, channel);\n    },\n    labelOverlap: ({\n      axis,\n      fieldOrDatumDef,\n      scaleType\n    }) => {\n      var _axis$labelOverlap;\n\n      return (_axis$labelOverlap = axis.labelOverlap) !== null && _axis$labelOverlap !== void 0 ? _axis$labelOverlap : defaultLabelOverlap(fieldOrDatumDef.type, scaleType, isFieldDef(fieldOrDatumDef) && !!fieldOrDatumDef.timeUnit, isFieldDef(fieldOrDatumDef) ? fieldOrDatumDef.sort : undefined);\n    },\n    // we already calculate orient in parse\n    orient: ({\n      orient\n    }) => orient,\n    // Need to cast until Vega supports signal\n    tickCount: ({\n      channel,\n      model,\n      axis,\n      fieldOrDatumDef,\n      scaleType\n    }) => {\n      var _axis$tickCount;\n\n      const sizeType = channel === 'x' ? 'width' : channel === 'y' ? 'height' : undefined;\n      const size = sizeType ? model.getSizeSignalRef(sizeType) : undefined;\n      return (_axis$tickCount = axis.tickCount) !== null && _axis$tickCount !== void 0 ? _axis$tickCount : defaultTickCount({\n        fieldOrDatumDef,\n        scaleType,\n        size,\n        values: axis.values\n      });\n    },\n    title: ({\n      axis,\n      model,\n      channel\n    }) => {\n      if (axis.title !== undefined) {\n        return axis.title;\n      }\n\n      const fieldDefTitle = getFieldDefTitle(model, channel);\n\n      if (fieldDefTitle !== undefined) {\n        return fieldDefTitle;\n      }\n\n      const fieldDef = model.typedFieldDef(channel);\n      const channel2 = channel === 'x' ? 'x2' : 'y2';\n      const fieldDef2 = model.fieldDef(channel2); // If title not specified, store base parts of fieldDef (and fieldDef2 if exists)\n\n      return mergeTitleFieldDefs(fieldDef ? [toFieldDefBase(fieldDef)] : [], isFieldDef(fieldDef2) ? [toFieldDefBase(fieldDef2)] : []);\n    },\n    values: ({\n      axis,\n      fieldOrDatumDef\n    }) => values(axis, fieldOrDatumDef),\n    zindex: ({\n      axis,\n      fieldOrDatumDef,\n      mark\n    }) => {\n      var _axis$zindex;\n\n      return (_axis$zindex = axis.zindex) !== null && _axis$zindex !== void 0 ? _axis$zindex : defaultZindex(mark, fieldOrDatumDef);\n    }\n  }; // TODO: we need to refactor this method after we take care of config refactoring\n\n  /**\n   * Default rules for whether to show a grid should be shown for a channel.\n   * If `grid` is unspecified, the default value is `true` for ordinal scales that are not binned\n   */\n\n  function defaultGrid(scaleType, fieldDef) {\n    return !hasDiscreteDomain(scaleType) && isFieldDef(fieldDef) && !isBinning(fieldDef === null || fieldDef === void 0 ? void 0 : fieldDef.bin);\n  }\n  function gridScale(model, channel) {\n    const gridChannel = channel === 'x' ? 'y' : 'x';\n\n    if (model.getScaleComponent(gridChannel)) {\n      return model.scaleName(gridChannel);\n    }\n\n    return undefined;\n  }\n  function getLabelAngle(fieldOrDatumDef, axis, channel, styleConfig, axisConfigs) {\n    const labelAngle = axis === null || axis === void 0 ? void 0 : axis.labelAngle; // try axis value\n\n    if (labelAngle !== undefined) {\n      return isSignalRef(labelAngle) ? labelAngle : normalizeAngle(labelAngle);\n    } else {\n      // try axis config value\n      const {\n        configValue: angle\n      } = getAxisConfig('labelAngle', styleConfig, axis === null || axis === void 0 ? void 0 : axis.style, axisConfigs);\n\n      if (angle !== undefined) {\n        return normalizeAngle(angle);\n      } else {\n        // get default value\n        if (channel === X && contains([NOMINAL, ORDINAL], fieldOrDatumDef.type) && !(isFieldDef(fieldOrDatumDef) && fieldOrDatumDef.timeUnit)) {\n          return 270;\n        } // no default\n\n\n        return undefined;\n      }\n    }\n  }\n  function normalizeAngleExpr(angle) {\n    return \"(((\".concat(angle.signal, \" % 360) + 360) % 360)\");\n  }\n  function defaultLabelBaseline(angle, orient, channel, alwaysIncludeMiddle) {\n    if (angle !== undefined) {\n      if (channel === 'x') {\n        if (isSignalRef(angle)) {\n          const a = normalizeAngleExpr(angle);\n          const orientIsTop = isSignalRef(orient) ? \"(\".concat(orient.signal, \" === \\\"top\\\")\") : orient === 'top';\n          return {\n            signal: \"(45 < \".concat(a, \" && \").concat(a, \" < 135) || (225 < \").concat(a, \" && \").concat(a, \" < 315) ? \\\"middle\\\" :\") + \"(\".concat(a, \" <= 45 || 315 <= \").concat(a, \") === \").concat(orientIsTop, \" ? \\\"bottom\\\" : \\\"top\\\"\")\n          };\n        }\n\n        if (45 < angle && angle < 135 || 225 < angle && angle < 315) {\n          return 'middle';\n        }\n\n        if (isSignalRef(orient)) {\n          const op = angle <= 45 || 315 <= angle ? '===' : '!==';\n          return {\n            signal: \"\".concat(orient.signal, \" \").concat(op, \" \\\"top\\\" ? \\\"bottom\\\" : \\\"top\\\"\")\n          };\n        }\n\n        return (angle <= 45 || 315 <= angle) === (orient === 'top') ? 'bottom' : 'top';\n      } else {\n        if (isSignalRef(angle)) {\n          const a = normalizeAngleExpr(angle);\n          const orientIsLeft = isSignalRef(orient) ? \"(\".concat(orient.signal, \" === \\\"left\\\")\") : orient === 'left';\n          const middle = alwaysIncludeMiddle ? '\"middle\"' : 'null';\n          return {\n            signal: \"\".concat(a, \" <= 45 || 315 <= \").concat(a, \" || (135 <= \").concat(a, \" && \").concat(a, \" <= 225) ? \").concat(middle, \" : (45 <= \").concat(a, \" && \").concat(a, \" <= 135) === \").concat(orientIsLeft, \" ? \\\"top\\\" : \\\"bottom\\\"\")\n          };\n        }\n\n        if (angle <= 45 || 315 <= angle || 135 <= angle && angle <= 225) {\n          return alwaysIncludeMiddle ? 'middle' : null;\n        }\n\n        if (isSignalRef(orient)) {\n          const op = 45 <= angle && angle <= 135 ? '===' : '!==';\n          return {\n            signal: \"\".concat(orient.signal, \" \").concat(op, \" \\\"left\\\" ? \\\"top\\\" : \\\"bottom\\\"\")\n          };\n        }\n\n        return (45 <= angle && angle <= 135) === (orient === 'left') ? 'top' : 'bottom';\n      }\n    }\n\n    return undefined;\n  }\n  function defaultLabelAlign(angle, orient, channel) {\n    if (angle === undefined) {\n      return undefined;\n    }\n\n    const isX = channel === 'x';\n    const startAngle = isX ? 0 : 90;\n    const mainOrient = isX ? 'bottom' : 'left';\n\n    if (isSignalRef(angle)) {\n      const a = normalizeAngleExpr(angle);\n      const orientIsMain = isSignalRef(orient) ? \"(\".concat(orient.signal, \" === \\\"\").concat(mainOrient, \"\\\")\") : orient === mainOrient;\n      return {\n        signal: \"(\".concat(startAngle ? '(' + a + ' + 90)' : a, \" % 180 === 0) ? \").concat(isX ? null : '\"center\"', \" :\") + \"(\".concat(startAngle, \" < \").concat(a, \" && \").concat(a, \" < \").concat(180 + startAngle, \") === \").concat(orientIsMain, \" ? \\\"left\\\" : \\\"right\\\"\")\n      };\n    }\n\n    if ((angle + startAngle) % 180 === 0) {\n      // For bottom, use default label align so label flush still works\n      return isX ? null : 'center';\n    }\n\n    if (isSignalRef(orient)) {\n      const op = startAngle < angle && angle < 180 + startAngle ? '===' : '!==';\n      const orientIsMain = \"\".concat(orient.signal, \" \").concat(op, \" \\\"\").concat(mainOrient, \"\\\"\");\n      return {\n        signal: \"\".concat(orientIsMain, \" ? \\\"left\\\" : \\\"right\\\"\")\n      };\n    }\n\n    if ((startAngle < angle && angle < 180 + startAngle) === (orient === mainOrient)) {\n      return 'left';\n    }\n\n    return 'right';\n  }\n  function defaultLabelFlush(type, channel) {\n    if (channel === 'x' && contains(['quantitative', 'temporal'], type)) {\n      return true;\n    }\n\n    return undefined;\n  }\n  function defaultLabelOverlap(type, scaleType, hasTimeUnit, sort) {\n    // do not prevent overlap for nominal data because there is no way to infer what the missing labels are\n    if (hasTimeUnit && !isObject(sort) || type !== 'nominal' && type !== 'ordinal') {\n      if (scaleType === 'log' || scaleType === 'symlog') {\n        return 'greedy';\n      }\n\n      return true;\n    }\n\n    return undefined;\n  }\n  function defaultOrient(channel) {\n    return channel === 'x' ? 'bottom' : 'left';\n  }\n  function defaultTickCount({\n    fieldOrDatumDef,\n    scaleType,\n    size,\n    values: vals\n  }) {\n    if (!vals && !hasDiscreteDomain(scaleType) && scaleType !== 'log') {\n      if (isFieldDef(fieldOrDatumDef)) {\n        var _normalizeTimeUnit;\n\n        if (isBinning(fieldOrDatumDef.bin)) {\n          // for binned data, we don't want more ticks than maxbins\n          return {\n            signal: \"ceil(\".concat(size.signal, \"/10)\")\n          };\n        }\n\n        if (fieldOrDatumDef.timeUnit && contains(['month', 'hours', 'day', 'quarter'], (_normalizeTimeUnit = normalizeTimeUnit(fieldOrDatumDef.timeUnit)) === null || _normalizeTimeUnit === void 0 ? void 0 : _normalizeTimeUnit.unit)) {\n          return undefined;\n        }\n      }\n\n      return {\n        signal: \"ceil(\".concat(size.signal, \"/40)\")\n      };\n    }\n\n    return undefined;\n  }\n  function getFieldDefTitle(model, channel) {\n    const channel2 = channel === 'x' ? 'x2' : 'y2';\n    const fieldDef = model.fieldDef(channel);\n    const fieldDef2 = model.fieldDef(channel2);\n    const title1 = fieldDef ? fieldDef.title : undefined;\n    const title2 = fieldDef2 ? fieldDef2.title : undefined;\n\n    if (title1 && title2) {\n      return mergeTitle(title1, title2);\n    } else if (title1) {\n      return title1;\n    } else if (title2) {\n      return title2;\n    } else if (title1 !== undefined) {\n      // falsy value to disable config\n      return title1;\n    } else if (title2 !== undefined) {\n      // falsy value to disable config\n      return title2;\n    }\n\n    return undefined;\n  }\n  function values(axis, fieldOrDatumDef) {\n    const vals = axis.values;\n\n    if (isArray(vals)) {\n      return valueArray(fieldOrDatumDef, vals);\n    } else if (isSignalRef(vals)) {\n      return vals;\n    }\n\n    return undefined;\n  }\n  function defaultZindex(mark, fieldDef) {\n    if (mark === 'rect' && isDiscrete(fieldDef)) {\n      return 1;\n    }\n\n    return 0;\n  }\n\n  class CalculateNode extends DataFlowNode {\n    clone() {\n      return new CalculateNode(null, duplicate(this.transform));\n    }\n\n    constructor(parent, transform) {\n      super(parent);\n      this.transform = transform;\n\n      _defineProperty(this, \"_dependentFields\", void 0);\n\n      this._dependentFields = getDependentFields(this.transform.calculate);\n    }\n\n    static parseAllForSortIndex(parent, model) {\n      // get all the encoding with sort fields from model\n      model.forEachFieldDef((fieldDef, channel) => {\n        if (!isScaleFieldDef(fieldDef)) {\n          return;\n        }\n\n        if (isSortArray(fieldDef.sort)) {\n          const {\n            field,\n            timeUnit\n          } = fieldDef;\n          const sort = fieldDef.sort; // generate `datum[\"a\"] === val0 ? 0 : datum[\"a\"] === val1 ? 1 : ... : n` via FieldEqualPredicate\n\n          const calculate = sort.map((sortValue, i) => {\n            return \"\".concat(fieldFilterExpression({\n              field,\n              timeUnit,\n              equal: sortValue\n            }), \" ? \").concat(i, \" : \");\n          }).join('') + sort.length;\n          parent = new CalculateNode(parent, {\n            calculate,\n            as: sortArrayIndexField(fieldDef, channel, {\n              forAs: true\n            })\n          });\n        }\n      });\n      return parent;\n    }\n\n    producedFields() {\n      return new Set([this.transform.as]);\n    }\n\n    dependentFields() {\n      return this._dependentFields;\n    }\n\n    assemble() {\n      return {\n        type: 'formula',\n        expr: this.transform.calculate,\n        as: this.transform.as\n      };\n    }\n\n    hash() {\n      return \"Calculate \".concat(hash(this.transform));\n    }\n\n  }\n  function sortArrayIndexField(fieldDef, channel, opt) {\n    return vgField(fieldDef, {\n      prefix: channel,\n      suffix: 'sort_index',\n      ...(opt !== null && opt !== void 0 ? opt : {})\n    });\n  }\n\n  /**\n   * Get header channel, which can be different from facet channel when orient is specified or when the facet channel is facet.\n   */\n  function getHeaderChannel(channel, orient) {\n    if (contains(['top', 'bottom'], orient)) {\n      return 'column';\n    } else if (contains(['left', 'right'], orient)) {\n      return 'row';\n    }\n\n    return channel === 'row' ? 'row' : 'column';\n  }\n  function getHeaderProperty(prop, header, config, channel) {\n    const headerSpecificConfig = channel === 'row' ? config.headerRow : channel === 'column' ? config.headerColumn : config.headerFacet;\n    return getFirstDefined((header || {})[prop], headerSpecificConfig[prop], config.header[prop]);\n  }\n  function getHeaderProperties(properties, header, config, channel) {\n    const props = {};\n\n    for (const prop of properties) {\n      const value = getHeaderProperty(prop, header || {}, config, channel);\n\n      if (value !== undefined) {\n        props[prop] = value;\n      }\n    }\n\n    return props;\n  }\n\n  /**\n   * Utility for generating row / column headers\n   */\n  const HEADER_CHANNELS = ['row', 'column'];\n  const HEADER_TYPES = ['header', 'footer'];\n\n  /**\n   * Utility for generating row / column headers\n   */\n\n  function assembleTitleGroup(model, channel) {\n    const title = model.component.layoutHeaders[channel].title;\n    const config = model.config ? model.config : undefined;\n    const facetFieldDef = model.component.layoutHeaders[channel].facetFieldDef ? model.component.layoutHeaders[channel].facetFieldDef : undefined;\n    const {\n      titleAnchor,\n      titleAngle: ta,\n      titleOrient\n    } = getHeaderProperties(['titleAnchor', 'titleAngle', 'titleOrient'], facetFieldDef.header, config, channel);\n    const headerChannel = getHeaderChannel(channel, titleOrient);\n    const titleAngle = normalizeAngle(ta);\n    return {\n      name: \"\".concat(channel, \"-title\"),\n      type: 'group',\n      role: \"\".concat(headerChannel, \"-title\"),\n      title: {\n        text: title,\n        ...(channel === 'row' ? {\n          orient: 'left'\n        } : {}),\n        style: 'guide-title',\n        ...defaultHeaderGuideBaseline(titleAngle, headerChannel),\n        ...defaultHeaderGuideAlign(headerChannel, titleAngle, titleAnchor),\n        ...assembleHeaderProperties(config, facetFieldDef, channel, HEADER_TITLE_PROPERTIES, HEADER_TITLE_PROPERTIES_MAP)\n      }\n    };\n  }\n  function defaultHeaderGuideAlign(headerChannel, angle, anchor = 'middle') {\n    switch (anchor) {\n      case 'start':\n        return {\n          align: 'left'\n        };\n\n      case 'end':\n        return {\n          align: 'right'\n        };\n    }\n\n    const align = defaultLabelAlign(angle, headerChannel === 'row' ? 'left' : 'top', headerChannel === 'row' ? 'y' : 'x');\n    return align ? {\n      align\n    } : {};\n  }\n  function defaultHeaderGuideBaseline(angle, channel) {\n    const baseline = defaultLabelBaseline(angle, channel === 'row' ? 'left' : 'top', channel === 'row' ? 'y' : 'x', true);\n    return baseline ? {\n      baseline\n    } : {};\n  }\n  function assembleHeaderGroups(model, channel) {\n    const layoutHeader = model.component.layoutHeaders[channel];\n    const groups = [];\n\n    for (const headerType of HEADER_TYPES) {\n      if (layoutHeader[headerType]) {\n        for (const headerComponent of layoutHeader[headerType]) {\n          const group = assembleHeaderGroup(model, channel, headerType, layoutHeader, headerComponent);\n\n          if (group != null) {\n            groups.push(group);\n          }\n        }\n      }\n    }\n\n    return groups;\n  }\n\n  function getSort(facetFieldDef, channel) {\n    const {\n      sort\n    } = facetFieldDef;\n\n    if (isSortField(sort)) {\n      var _sort$order;\n\n      return {\n        field: vgField(sort, {\n          expr: 'datum'\n        }),\n        order: (_sort$order = sort.order) !== null && _sort$order !== void 0 ? _sort$order : 'ascending'\n      };\n    } else if (isArray(sort)) {\n      return {\n        field: sortArrayIndexField(facetFieldDef, channel, {\n          expr: 'datum'\n        }),\n        order: 'ascending'\n      };\n    } else {\n      return {\n        field: vgField(facetFieldDef, {\n          expr: 'datum'\n        }),\n        order: sort !== null && sort !== void 0 ? sort : 'ascending'\n      };\n    }\n  }\n\n  function assembleLabelTitle(facetFieldDef, channel, config) {\n    const {\n      format,\n      formatType,\n      labelAngle,\n      labelAnchor,\n      labelOrient,\n      labelExpr\n    } = getHeaderProperties(['format', 'formatType', 'labelAngle', 'labelAnchor', 'labelOrient', 'labelExpr'], facetFieldDef.header, config, channel);\n    const titleTextExpr = formatSignalRef({\n      fieldOrDatumDef: facetFieldDef,\n      format,\n      formatType,\n      expr: 'parent',\n      config\n    }).signal;\n    const headerChannel = getHeaderChannel(channel, labelOrient);\n    return {\n      text: {\n        signal: labelExpr ? replaceAll(replaceAll(labelExpr, 'datum.label', titleTextExpr), 'datum.value', vgField(facetFieldDef, {\n          expr: 'parent'\n        })) : titleTextExpr\n      },\n      ...(channel === 'row' ? {\n        orient: 'left'\n      } : {}),\n      style: 'guide-label',\n      frame: 'group',\n      ...defaultHeaderGuideBaseline(labelAngle, headerChannel),\n      ...defaultHeaderGuideAlign(headerChannel, labelAngle, labelAnchor),\n      ...assembleHeaderProperties(config, facetFieldDef, channel, HEADER_LABEL_PROPERTIES, HEADER_LABEL_PROPERTIES_MAP)\n    };\n  }\n  function assembleHeaderGroup(model, channel, headerType, layoutHeader, headerComponent) {\n    if (headerComponent) {\n      let title = null;\n      const {\n        facetFieldDef\n      } = layoutHeader;\n      const config = model.config ? model.config : undefined;\n\n      if (facetFieldDef && headerComponent.labels) {\n        const {\n          labelOrient\n        } = getHeaderProperties(['labelOrient'], facetFieldDef.header, config, channel); // Include label title in the header if orient aligns with the channel\n\n        if (channel === 'row' && !contains(['top', 'bottom'], labelOrient) || channel === 'column' && !contains(['left', 'right'], labelOrient)) {\n          title = assembleLabelTitle(facetFieldDef, channel, config);\n        }\n      }\n\n      const isFacetWithoutRowCol = isFacetModel(model) && !isFacetMapping(model.facet);\n      const axes = headerComponent.axes;\n      const hasAxes = (axes === null || axes === void 0 ? void 0 : axes.length) > 0;\n\n      if (title || hasAxes) {\n        const sizeChannel = channel === 'row' ? 'height' : 'width';\n        return {\n          name: model.getName(\"\".concat(channel, \"_\").concat(headerType)),\n          type: 'group',\n          role: \"\".concat(channel, \"-\").concat(headerType),\n          ...(layoutHeader.facetFieldDef ? {\n            from: {\n              data: model.getName(channel + '_domain')\n            },\n            sort: getSort(facetFieldDef, channel)\n          } : {}),\n          ...(hasAxes && isFacetWithoutRowCol ? {\n            from: {\n              data: model.getName(\"facet_domain_\".concat(channel))\n            }\n          } : {}),\n          ...(title ? {\n            title\n          } : {}),\n          ...(headerComponent.sizeSignal ? {\n            encode: {\n              update: {\n                [sizeChannel]: headerComponent.sizeSignal\n              }\n            }\n          } : {}),\n          ...(hasAxes ? {\n            axes\n          } : {})\n        };\n      }\n    }\n\n    return null;\n  }\n  const LAYOUT_TITLE_BAND = {\n    column: {\n      start: 0,\n      end: 1\n    },\n    row: {\n      start: 1,\n      end: 0\n    }\n  };\n  function getLayoutTitleBand(titleAnchor, headerChannel) {\n    return LAYOUT_TITLE_BAND[headerChannel][titleAnchor];\n  }\n  function assembleLayoutTitleBand(headerComponentIndex, config) {\n    const titleBand = {};\n\n    for (const channel of FACET_CHANNELS) {\n      const headerComponent = headerComponentIndex[channel];\n\n      if (headerComponent === null || headerComponent === void 0 ? void 0 : headerComponent.facetFieldDef) {\n        const {\n          titleAnchor,\n          titleOrient\n        } = getHeaderProperties(['titleAnchor', 'titleOrient'], headerComponent.facetFieldDef.header, config, channel);\n        const headerChannel = getHeaderChannel(channel, titleOrient);\n        const band = getLayoutTitleBand(titleAnchor, headerChannel);\n\n        if (band !== undefined) {\n          titleBand[headerChannel] = band;\n        }\n      }\n    }\n\n    return isEmpty(titleBand) ? undefined : titleBand;\n  }\n  function assembleHeaderProperties(config, facetFieldDef, channel, properties, propertiesMap) {\n    const props = {};\n\n    for (const prop of properties) {\n      if (!propertiesMap[prop]) {\n        continue;\n      }\n\n      const value = getHeaderProperty(prop, facetFieldDef === null || facetFieldDef === void 0 ? void 0 : facetFieldDef.header, config, channel);\n\n      if (value !== undefined) {\n        props[propertiesMap[prop]] = value;\n      }\n    }\n\n    return props;\n  }\n\n  function assembleLayoutSignals(model) {\n    return [...sizeSignals(model, 'width'), ...sizeSignals(model, 'height'), ...sizeSignals(model, 'childWidth'), ...sizeSignals(model, 'childHeight')];\n  }\n  function sizeSignals(model, sizeType) {\n    const channel = sizeType === 'width' ? 'x' : 'y';\n    const size = model.component.layoutSize.get(sizeType);\n\n    if (!size || size === 'merged') {\n      return [];\n    } // Read size signal name from name map, just in case it is the top-level size signal that got renamed.\n\n\n    const name = model.getSizeSignalRef(sizeType).signal;\n\n    if (size === 'step') {\n      const scaleComponent = model.getScaleComponent(channel);\n\n      if (scaleComponent) {\n        const type = scaleComponent.get('type');\n        const range = scaleComponent.get('range');\n\n        if (hasDiscreteDomain(type) && isVgRangeStep(range)) {\n          const scaleName = model.scaleName(channel);\n\n          if (isFacetModel(model.parent)) {\n            // If parent is facet and this is an independent scale, return only signal signal\n            // as the width/height will be calculated using the cardinality from\n            // facet's aggregate rather than reading from scale domain\n            const parentResolve = model.parent.component.resolve;\n\n            if (parentResolve.scale[channel] === 'independent') {\n              return [stepSignal(scaleName, range)];\n            }\n          }\n\n          return [stepSignal(scaleName, range), {\n            name,\n            update: sizeExpr(scaleName, scaleComponent, \"domain('\".concat(scaleName, \"').length\"))\n          }];\n        }\n      }\n      /* istanbul ignore next: Condition should not happen -- only for warning in development. */\n\n\n      throw new Error('layout size is step although width/height is not step.');\n    } else if (size == 'container') {\n      const isWidth = name.endsWith('width');\n      const expr = isWidth ? 'containerSize()[0]' : 'containerSize()[1]';\n      const defaultValue = getViewConfigContinuousSize(model.config.view, isWidth ? 'width' : 'height');\n      const safeExpr = \"isFinite(\".concat(expr, \") ? \").concat(expr, \" : \").concat(defaultValue);\n      return [{\n        name,\n        init: safeExpr,\n        on: [{\n          update: safeExpr,\n          events: 'window:resize'\n        }]\n      }];\n    } else {\n      return [{\n        name,\n        value: size\n      }];\n    }\n  }\n\n  function stepSignal(scaleName, range) {\n    return {\n      name: scaleName + '_step',\n      value: range.step\n    };\n  }\n\n  function sizeExpr(scaleName, scaleComponent, cardinality) {\n    const type = scaleComponent.get('type');\n    const padding = scaleComponent.get('padding');\n    const paddingOuter = getFirstDefined(scaleComponent.get('paddingOuter'), padding);\n    let paddingInner = scaleComponent.get('paddingInner');\n    paddingInner = type === 'band' ? // only band has real paddingInner\n    paddingInner !== undefined ? paddingInner : padding : // For point, as calculated in https://github.com/vega/vega-scale/blob/master/src/band.js#L128,\n    // it's equivalent to have paddingInner = 1 since there is only n-1 steps between n points.\n    1;\n    return \"bandspace(\".concat(cardinality, \", \").concat(signalOrStringValue(paddingInner), \", \").concat(signalOrStringValue(paddingOuter), \") * \").concat(scaleName, \"_step\");\n  }\n\n  function getSizeTypeFromLayoutSizeType(layoutSizeType) {\n    return layoutSizeType === 'childWidth' ? 'width' : layoutSizeType === 'childHeight' ? 'height' : layoutSizeType;\n  }\n\n  function guideEncodeEntry(encoding, model) {\n    return keys(encoding).reduce((encode, channel) => {\n      const valueDef = encoding[channel];\n      return { ...encode,\n        ...wrapCondition(model, valueDef, channel, def => signalOrValueRef(def.value))\n      };\n    }, {});\n  }\n\n  function defaultScaleResolve(channel, model) {\n    if (isLayerModel(model) || isFacetModel(model)) {\n      return 'shared';\n    } else if (isConcatModel(model)) {\n      return isXorY(channel) ? 'independent' : 'shared';\n    }\n    /* istanbul ignore next: should never reach here. */\n\n\n    throw new Error('invalid model type for resolve');\n  }\n  function parseGuideResolve(resolve, channel) {\n    const channelScaleResolve = resolve.scale[channel];\n    const guide = isXorY(channel) ? 'axis' : 'legend';\n\n    if (channelScaleResolve === 'independent') {\n      if (resolve[guide][channel] === 'shared') {\n        warn(independentScaleMeansIndependentGuide(channel));\n      }\n\n      return 'independent';\n    }\n\n    return resolve[guide][channel] || 'shared';\n  }\n\n  const LEGEND_COMPONENT_PROPERTY_INDEX = { ...COMMON_LEGEND_PROPERTY_INDEX,\n    disable: 1,\n    labelExpr: 1,\n    selections: 1,\n    // channel scales\n    opacity: 1,\n    shape: 1,\n    stroke: 1,\n    fill: 1,\n    size: 1,\n    strokeWidth: 1,\n    strokeDash: 1,\n    // encode\n    encode: 1\n  };\n  const LEGEND_COMPONENT_PROPERTIES = keys(LEGEND_COMPONENT_PROPERTY_INDEX);\n  class LegendComponent extends Split {}\n\n  const legendEncodeRules = {\n    symbols,\n    gradient,\n    labels,\n    entries: entries$1\n  };\n  function symbols(symbolsSpec, {\n    fieldOrDatumDef,\n    model,\n    channel,\n    legendCmpt,\n    legendType\n  }) {\n    var _legendCmpt$get, _legendCmpt$get2, _legendCmpt$get3, _getMaxValue;\n\n    if (legendType !== 'symbol') {\n      return undefined;\n    }\n\n    const {\n      markDef,\n      encoding,\n      config,\n      mark\n    } = model;\n    const filled = markDef.filled && mark !== 'trail';\n    let out = { ...applyMarkConfig({}, model, FILL_STROKE_CONFIG),\n      ...color(model, {\n        filled\n      })\n    }; // FIXME: remove this when VgEncodeEntry is compatible with SymbolEncodeEntry\n\n    const symbolOpacity = (_legendCmpt$get = legendCmpt.get('symbolOpacity')) !== null && _legendCmpt$get !== void 0 ? _legendCmpt$get : config.legend.symbolOpacity;\n    const symbolFillColor = (_legendCmpt$get2 = legendCmpt.get('symbolFillColor')) !== null && _legendCmpt$get2 !== void 0 ? _legendCmpt$get2 : config.legend.symbolFillColor;\n    const symbolStrokeColor = (_legendCmpt$get3 = legendCmpt.get('symbolStrokeColor')) !== null && _legendCmpt$get3 !== void 0 ? _legendCmpt$get3 : config.legend.symbolStrokeColor;\n    const opacity = symbolOpacity === undefined ? (_getMaxValue = getMaxValue(encoding.opacity)) !== null && _getMaxValue !== void 0 ? _getMaxValue : markDef.opacity : undefined;\n\n    if (out.fill) {\n      // for fill legend, we don't want any fill in symbol\n      if (channel === 'fill' || filled && channel === COLOR) {\n        delete out.fill;\n      } else {\n        if (out.fill['field']) {\n          // For others, set fill to some opaque value (or nothing if a color is already set)\n          if (symbolFillColor) {\n            delete out.fill;\n          } else {\n            var _config$legend$symbol;\n\n            out.fill = signalOrValueRef((_config$legend$symbol = config.legend.symbolBaseFillColor) !== null && _config$legend$symbol !== void 0 ? _config$legend$symbol : 'black');\n            out.fillOpacity = signalOrValueRef(opacity !== null && opacity !== void 0 ? opacity : 1);\n          }\n        } else if (isArray(out.fill)) {\n          var _ref, _getFirstConditionVal, _encoding$fill;\n\n          const fill = (_ref = (_getFirstConditionVal = getFirstConditionValue((_encoding$fill = encoding.fill) !== null && _encoding$fill !== void 0 ? _encoding$fill : encoding.color)) !== null && _getFirstConditionVal !== void 0 ? _getFirstConditionVal : markDef.fill) !== null && _ref !== void 0 ? _ref : filled && markDef.color;\n\n          if (fill) {\n            out.fill = signalOrValueRef(fill);\n          }\n        }\n      }\n    }\n\n    if (out.stroke) {\n      if (channel === 'stroke' || !filled && channel === COLOR) {\n        delete out.stroke;\n      } else {\n        if (out.stroke['field'] || symbolStrokeColor) {\n          // For others, remove stroke field\n          delete out.stroke;\n        } else if (isArray(out.stroke)) {\n          const stroke = getFirstDefined(getFirstConditionValue(encoding.stroke || encoding.color), markDef.stroke, filled ? markDef.color : undefined);\n\n          if (stroke) {\n            out.stroke = {\n              value: stroke\n            };\n          }\n        }\n      }\n    }\n\n    if (channel !== OPACITY) {\n      const condition = isFieldDef(fieldOrDatumDef) && selectedCondition(model, legendCmpt, fieldOrDatumDef);\n\n      if (condition) {\n        out.opacity = [{\n          test: condition,\n          ...signalOrValueRef(opacity !== null && opacity !== void 0 ? opacity : 1)\n        }, signalOrValueRef(config.legend.unselectedOpacity)];\n      } else if (opacity) {\n        out.opacity = signalOrValueRef(opacity);\n      }\n    }\n\n    out = { ...out,\n      ...symbolsSpec\n    };\n    return isEmpty(out) ? undefined : out;\n  }\n  function gradient(gradientSpec, {\n    model,\n    legendType,\n    legendCmpt\n  }) {\n    var _legendCmpt$get4;\n\n    if (legendType !== 'gradient') {\n      return undefined;\n    }\n\n    const {\n      config,\n      markDef,\n      encoding\n    } = model;\n    let out = {};\n    const gradientOpacity = (_legendCmpt$get4 = legendCmpt.get('gradientOpacity')) !== null && _legendCmpt$get4 !== void 0 ? _legendCmpt$get4 : config.legend.gradientOpacity;\n    const opacity = gradientOpacity === undefined ? getMaxValue(encoding.opacity) || markDef.opacity : undefined;\n\n    if (opacity) {\n      // only apply opacity if it is neither zero or undefined\n      out.opacity = signalOrValueRef(opacity);\n    }\n\n    out = { ...out,\n      ...gradientSpec\n    };\n    return isEmpty(out) ? undefined : out;\n  }\n  function labels(specifiedlabelsSpec, {\n    fieldOrDatumDef,\n    model,\n    channel,\n    legendCmpt\n  }) {\n    const legend = model.legend(channel) || {};\n    const config = model.config;\n    const condition = isFieldDef(fieldOrDatumDef) ? selectedCondition(model, legendCmpt, fieldOrDatumDef) : undefined;\n    const opacity = condition ? [{\n      test: condition,\n      value: 1\n    }, {\n      value: config.legend.unselectedOpacity\n    }] : undefined;\n    const {\n      format,\n      formatType\n    } = legend;\n    const text = isCustomFormatType(formatType) ? formatCustomType({\n      fieldOrDatumDef,\n      field: 'datum.value',\n      format,\n      formatType,\n      config\n    }) : undefined;\n    const labelsSpec = { ...(opacity ? {\n        opacity\n      } : {}),\n      ...(text ? {\n        text\n      } : {}),\n      ...specifiedlabelsSpec\n    };\n    return isEmpty(labelsSpec) ? undefined : labelsSpec;\n  }\n  function entries$1(entriesSpec, {\n    legendCmpt\n  }) {\n    const selections = legendCmpt.get('selections');\n    return (selections === null || selections === void 0 ? void 0 : selections.length) ? { ...entriesSpec,\n      fill: {\n        value: 'transparent'\n      }\n    } : entriesSpec;\n  }\n\n  function getMaxValue(channelDef) {\n    return getConditionValue(channelDef, (v, conditionalDef) => Math.max(v, conditionalDef.value));\n  }\n\n  function getFirstConditionValue(channelDef) {\n    return getConditionValue(channelDef, (v, conditionalDef) => {\n      return getFirstDefined(v, conditionalDef.value);\n    });\n  }\n\n  function getConditionValue(channelDef, reducer) {\n    if (hasConditionalValueDef(channelDef)) {\n      return array(channelDef.condition).reduce(reducer, channelDef.value);\n    } else if (isValueDef(channelDef)) {\n      return channelDef.value;\n    }\n\n    return undefined;\n  }\n\n  function selectedCondition(model, legendCmpt, fieldDef) {\n    const selections = legendCmpt.get('selections');\n    if (!(selections === null || selections === void 0 ? void 0 : selections.length)) return undefined;\n    const field = $(fieldDef.field);\n    return selections.map(name => {\n      const store = $(varName(name) + STORE);\n      return \"(!length(data(\".concat(store, \")) || (\").concat(name, \"[\").concat(field, \"] && indexof(\").concat(name, \"[\").concat(field, \"], datum.value) >= 0))\");\n    }).join(' || ');\n  }\n\n  const legendRules = {\n    direction: ({\n      direction\n    }) => direction,\n    format: ({\n      fieldOrDatumDef,\n      legend,\n      config\n    }) => {\n      const {\n        format,\n        formatType\n      } = legend;\n      return guideFormat(fieldOrDatumDef, fieldOrDatumDef.type, format, formatType, config, false);\n    },\n    formatType: ({\n      legend,\n      fieldOrDatumDef,\n      scaleType\n    }) => {\n      const {\n        formatType\n      } = legend;\n      return guideFormatType(formatType, fieldOrDatumDef, scaleType);\n    },\n    gradientLength: params => {\n      var _ref, _legend$gradientLengt;\n\n      const {\n        legend,\n        legendConfig\n      } = params;\n      return (_ref = (_legend$gradientLengt = legend.gradientLength) !== null && _legend$gradientLengt !== void 0 ? _legend$gradientLengt : legendConfig.gradientLength) !== null && _ref !== void 0 ? _ref : defaultGradientLength(params);\n    },\n    labelOverlap: ({\n      legend,\n      legendConfig,\n      scaleType\n    }) => {\n      var _ref2, _legend$labelOverlap;\n\n      return (_ref2 = (_legend$labelOverlap = legend.labelOverlap) !== null && _legend$labelOverlap !== void 0 ? _legend$labelOverlap : legendConfig.labelOverlap) !== null && _ref2 !== void 0 ? _ref2 : defaultLabelOverlap$1(scaleType);\n    },\n    symbolType: ({\n      legend,\n      markDef,\n      channel,\n      encoding\n    }) => {\n      var _legend$symbolType;\n\n      return (_legend$symbolType = legend.symbolType) !== null && _legend$symbolType !== void 0 ? _legend$symbolType : defaultSymbolType(markDef.type, channel, encoding.shape, markDef.shape);\n    },\n    title: ({\n      fieldOrDatumDef,\n      config\n    }) => title(fieldOrDatumDef, config, {\n      allowDisabling: true\n    }),\n    type: ({\n      legendType,\n      scaleType,\n      channel\n    }) => {\n      if (isColorChannel(channel) && isContinuousToContinuous(scaleType)) {\n        if (legendType === 'gradient') {\n          return undefined;\n        }\n      } else if (legendType === 'symbol') {\n        return undefined;\n      }\n\n      return legendType;\n    },\n    // depended by other property, let's define upfront\n    values: ({\n      fieldOrDatumDef,\n      legend\n    }) => values$1(legend, fieldOrDatumDef)\n  };\n  function values$1(legend, fieldOrDatumDef) {\n    const vals = legend.values;\n\n    if (isArray(vals)) {\n      return valueArray(fieldOrDatumDef, vals);\n    } else if (isSignalRef(vals)) {\n      return vals;\n    }\n\n    return undefined;\n  }\n  function defaultSymbolType(mark, channel, shapeChannelDef, markShape) {\n    if (channel !== 'shape') {\n      var _getFirstConditionVal;\n\n      // use the value from the shape encoding or the mark config if they exist\n      const shape = (_getFirstConditionVal = getFirstConditionValue(shapeChannelDef)) !== null && _getFirstConditionVal !== void 0 ? _getFirstConditionVal : markShape;\n\n      if (shape) {\n        return shape;\n      }\n    }\n\n    switch (mark) {\n      case 'bar':\n      case 'rect':\n      case 'image':\n      case 'square':\n        return 'square';\n\n      case 'line':\n      case 'trail':\n      case 'rule':\n        return 'stroke';\n\n      case 'arc':\n      case 'point':\n      case 'circle':\n      case 'tick':\n      case 'geoshape':\n      case 'area':\n      case 'text':\n        return 'circle';\n    }\n  }\n  function getLegendType(params) {\n    const {\n      legend\n    } = params;\n    return getFirstDefined(legend.type, defaultType$1(params));\n  }\n  function defaultType$1({\n    channel,\n    timeUnit,\n    scaleType\n  }) {\n    // Following the logic in https://github.com/vega/vega-parser/blob/master/src/parsers/legend.js\n    if (isColorChannel(channel)) {\n      if (contains(['quarter', 'month', 'day'], timeUnit)) {\n        return 'symbol';\n      }\n\n      if (isContinuousToContinuous(scaleType)) {\n        return 'gradient';\n      }\n    }\n\n    return 'symbol';\n  }\n  function getDirection({\n    legendConfig,\n    legendType,\n    orient,\n    legend\n  }) {\n    var _ref3, _legend$direction;\n\n    return (_ref3 = (_legend$direction = legend.direction) !== null && _legend$direction !== void 0 ? _legend$direction : legendConfig[legendType ? 'gradientDirection' : 'symbolDirection']) !== null && _ref3 !== void 0 ? _ref3 : defaultDirection(orient, legendType);\n  }\n  function defaultDirection(orient, legendType) {\n    switch (orient) {\n      case 'top':\n      case 'bottom':\n        return 'horizontal';\n\n      case 'left':\n      case 'right':\n      case 'none':\n      case undefined:\n        // undefined = \"right\" in Vega\n        return undefined;\n      // vertical is Vega's default\n\n      default:\n        // top-left / ...\n        // For inner legend, uses compact layout like Tableau\n        return legendType === 'gradient' ? 'horizontal' : undefined;\n    }\n  }\n  function defaultGradientLength({\n    legendConfig,\n    model,\n    direction,\n    orient,\n    scaleType\n  }) {\n    const {\n      gradientHorizontalMaxLength,\n      gradientHorizontalMinLength,\n      gradientVerticalMaxLength,\n      gradientVerticalMinLength\n    } = legendConfig;\n\n    if (isContinuousToContinuous(scaleType)) {\n      if (direction === 'horizontal') {\n        if (orient === 'top' || orient === 'bottom') {\n          return gradientLengthSignal(model, 'width', gradientHorizontalMinLength, gradientHorizontalMaxLength);\n        } else {\n          return gradientHorizontalMinLength;\n        }\n      } else {\n        // vertical / undefined (Vega uses vertical by default)\n        return gradientLengthSignal(model, 'height', gradientVerticalMinLength, gradientVerticalMaxLength);\n      }\n    }\n\n    return undefined;\n  }\n\n  function gradientLengthSignal(model, sizeType, min, max) {\n    const sizeSignal = model.getSizeSignalRef(sizeType).signal;\n    return {\n      signal: \"clamp(\".concat(sizeSignal, \", \").concat(min, \", \").concat(max, \")\")\n    };\n  }\n\n  function defaultLabelOverlap$1(scaleType) {\n    if (contains(['quantile', 'threshold', 'log', 'symlog'], scaleType)) {\n      return 'greedy';\n    }\n\n    return undefined;\n  }\n\n  function parseLegend(model) {\n    const legendComponent = isUnitModel(model) ? parseUnitLegend(model) : parseNonUnitLegend(model);\n    model.component.legends = legendComponent;\n    return legendComponent;\n  }\n\n  function parseUnitLegend(model) {\n    const {\n      encoding\n    } = model;\n    const legendComponent = {};\n\n    for (const channel of [COLOR, ...LEGEND_SCALE_CHANNELS]) {\n      const def = getFieldOrDatumDef(encoding[channel]);\n\n      if (!def || !model.getScaleComponent(channel)) {\n        continue;\n      }\n\n      if (channel === SHAPE && isFieldDef(def) && def.type === GEOJSON) {\n        continue;\n      }\n\n      legendComponent[channel] = parseLegendForChannel(model, channel);\n    }\n\n    return legendComponent;\n  }\n\n  function getLegendDefWithScale(model, channel) {\n    const scale = model.scaleName(channel);\n\n    if (model.mark === 'trail') {\n      if (channel === 'color') {\n        // trail is a filled mark, but its default symbolType (\"stroke\") should use \"stroke\"\n        return {\n          stroke: scale\n        };\n      } else if (channel === 'size') {\n        return {\n          strokeWidth: scale\n        };\n      }\n    }\n\n    if (channel === 'color') {\n      return model.markDef.filled ? {\n        fill: scale\n      } : {\n        stroke: scale\n      };\n    }\n\n    return {\n      [channel]: scale\n    };\n  } // eslint-disable-next-line @typescript-eslint/ban-types\n\n\n  function isExplicit(value, property, legend, fieldDef) {\n    switch (property) {\n      case 'disable':\n        return legend !== undefined;\n      // if axis is specified or null/false, then it's enable/disable state is explicit\n\n      case 'values':\n        // specified legend.values is already respected, but may get transformed.\n        return !!(legend === null || legend === void 0 ? void 0 : legend.values);\n\n      case 'title':\n        // title can be explicit if fieldDef.title is set\n        if (property === 'title' && value === (fieldDef === null || fieldDef === void 0 ? void 0 : fieldDef.title)) {\n          return true;\n        }\n\n    } // Otherwise, things are explicit if the returned value matches the specified property\n\n\n    return value === (legend || {})[property];\n  }\n\n  function parseLegendForChannel(model, channel) {\n    var _normalizeTimeUnit, _legend$encoding, _legend;\n\n    let legend = model.legend(channel);\n    const {\n      markDef,\n      encoding,\n      config\n    } = model;\n    const legendConfig = config.legend;\n    const legendCmpt = new LegendComponent({}, getLegendDefWithScale(model, channel));\n    parseInteractiveLegend(model, channel, legendCmpt);\n    const disable = legend !== undefined ? !legend : legendConfig.disable;\n    legendCmpt.set('disable', disable, legend !== undefined);\n\n    if (disable) {\n      return legendCmpt;\n    }\n\n    legend = legend || {};\n    const scaleType = model.getScaleComponent(channel).get('type');\n    const fieldOrDatumDef = getFieldOrDatumDef(encoding[channel]);\n    const timeUnit = isFieldDef(fieldOrDatumDef) ? (_normalizeTimeUnit = normalizeTimeUnit(fieldOrDatumDef.timeUnit)) === null || _normalizeTimeUnit === void 0 ? void 0 : _normalizeTimeUnit.unit : undefined;\n    const orient = legend.orient || config.legend.orient || 'right';\n    const legendType = getLegendType({\n      legend,\n      channel,\n      timeUnit,\n      scaleType\n    });\n    const direction = getDirection({\n      legend,\n      legendType,\n      orient,\n      legendConfig\n    });\n    const ruleParams = {\n      legend,\n      channel,\n      model,\n      markDef,\n      encoding,\n      fieldOrDatumDef,\n      legendConfig,\n      config,\n      scaleType,\n      orient,\n      legendType,\n      direction\n    };\n\n    for (const property of LEGEND_COMPONENT_PROPERTIES) {\n      if (legendType === 'gradient' && property.startsWith('symbol') || legendType === 'symbol' && property.startsWith('gradient')) {\n        continue;\n      }\n\n      const value = property in legendRules ? legendRules[property](ruleParams) : legend[property];\n\n      if (value !== undefined) {\n        const explicit = isExplicit(value, property, legend, model.fieldDef(channel));\n\n        if (explicit || config.legend[property] === undefined) {\n          legendCmpt.set(property, value, explicit);\n        }\n      }\n    }\n\n    const legendEncoding = (_legend$encoding = (_legend = legend) === null || _legend === void 0 ? void 0 : _legend.encoding) !== null && _legend$encoding !== void 0 ? _legend$encoding : {};\n    const selections = legendCmpt.get('selections');\n    const legendEncode = {};\n    const legendEncodeParams = {\n      fieldOrDatumDef,\n      model,\n      channel,\n      legendCmpt,\n      legendType\n    };\n\n    for (const part of ['labels', 'legend', 'title', 'symbols', 'gradient', 'entries']) {\n      var _legendEncoding$part;\n\n      const legendEncodingPart = guideEncodeEntry((_legendEncoding$part = legendEncoding[part]) !== null && _legendEncoding$part !== void 0 ? _legendEncoding$part : {}, model);\n      const value = part in legendEncodeRules ? legendEncodeRules[part](legendEncodingPart, legendEncodeParams) // apply rule\n      : legendEncodingPart; // no rule -- just default values\n\n      if (value !== undefined && !isEmpty(value)) {\n        legendEncode[part] = { ...((selections === null || selections === void 0 ? void 0 : selections.length) && isFieldDef(fieldOrDatumDef) ? {\n            name: \"\".concat(varName(fieldOrDatumDef.field), \"_legend_\").concat(part)\n          } : {}),\n          ...((selections === null || selections === void 0 ? void 0 : selections.length) ? {\n            interactive: !!selections\n          } : {}),\n          update: value\n        };\n      }\n    }\n\n    if (!isEmpty(legendEncode)) {\n      var _legend2;\n\n      legendCmpt.set('encode', legendEncode, !!((_legend2 = legend) === null || _legend2 === void 0 ? void 0 : _legend2.encoding));\n    }\n\n    return legendCmpt;\n  }\n\n  function parseNonUnitLegend(model) {\n    const {\n      legends,\n      resolve\n    } = model.component;\n\n    for (const child of model.children) {\n      parseLegend(child);\n\n      for (const channel of keys(child.component.legends)) {\n        resolve.legend[channel] = parseGuideResolve(model.component.resolve, channel);\n\n        if (resolve.legend[channel] === 'shared') {\n          // If the resolve says shared (and has not been overridden)\n          // We will try to merge and see if there is a conflict\n          legends[channel] = mergeLegendComponent(legends[channel], child.component.legends[channel]);\n\n          if (!legends[channel]) {\n            // If merge returns nothing, there is a conflict so we cannot make the legend shared.\n            // Thus, mark legend as independent and remove the legend component.\n            resolve.legend[channel] = 'independent';\n            delete legends[channel];\n          }\n        }\n      }\n    }\n\n    for (const channel of keys(legends)) {\n      for (const child of model.children) {\n        if (!child.component.legends[channel]) {\n          // skip if the child does not have a particular legend\n          continue;\n        }\n\n        if (resolve.legend[channel] === 'shared') {\n          // After merging shared legend, make sure to remove legend from child\n          delete child.component.legends[channel];\n        }\n      }\n    }\n\n    return legends;\n  }\n\n  function mergeLegendComponent(mergedLegend, childLegend) {\n    if (!mergedLegend) {\n      return childLegend.clone();\n    }\n\n    const mergedOrient = mergedLegend.getWithExplicit('orient');\n    const childOrient = childLegend.getWithExplicit('orient');\n\n    if (mergedOrient.explicit && childOrient.explicit && mergedOrient.value !== childOrient.value) {\n      // TODO: throw warning if resolve is explicit (We don't have info about explicit/implicit resolve yet.)\n      // Cannot merge due to inconsistent orient\n      return undefined;\n    }\n\n    let typeMerged = false; // Otherwise, let's merge\n\n    for (const prop of LEGEND_COMPONENT_PROPERTIES) {\n      const mergedValueWithExplicit = mergeValuesWithExplicit(mergedLegend.getWithExplicit(prop), childLegend.getWithExplicit(prop), prop, 'legend', // Tie breaker function\n      (v1, v2) => {\n        switch (prop) {\n          case 'symbolType':\n            return mergeSymbolType(v1, v2);\n\n          case 'title':\n            return mergeTitleComponent(v1, v2);\n\n          case 'type':\n            // There are only two types. If we have different types, then prefer symbol over gradient.\n            typeMerged = true;\n            return makeImplicit('symbol');\n        }\n\n        return defaultTieBreaker(v1, v2, prop, 'legend');\n      });\n      mergedLegend.setWithExplicit(prop, mergedValueWithExplicit);\n    }\n\n    if (typeMerged) {\n      var _mergedLegend$implici, _mergedLegend$implici2, _mergedLegend$explici, _mergedLegend$explici2;\n\n      if ((_mergedLegend$implici = mergedLegend.implicit) === null || _mergedLegend$implici === void 0 ? void 0 : (_mergedLegend$implici2 = _mergedLegend$implici.encode) === null || _mergedLegend$implici2 === void 0 ? void 0 : _mergedLegend$implici2.gradient) {\n        deleteNestedProperty(mergedLegend.implicit, ['encode', 'gradient']);\n      }\n\n      if ((_mergedLegend$explici = mergedLegend.explicit) === null || _mergedLegend$explici === void 0 ? void 0 : (_mergedLegend$explici2 = _mergedLegend$explici.encode) === null || _mergedLegend$explici2 === void 0 ? void 0 : _mergedLegend$explici2.gradient) {\n        deleteNestedProperty(mergedLegend.explicit, ['encode', 'gradient']);\n      }\n    }\n\n    return mergedLegend;\n  }\n\n  function mergeSymbolType(st1, st2) {\n    if (st2.value === 'circle') {\n      // prefer \"circle\" over \"stroke\"\n      return st2;\n    }\n\n    return st1;\n  }\n\n  function setLegendEncode(legend, part, vgProp, vgRef) {\n    var _legend$encode, _legend$encode$part, _legend$encode$part$u;\n\n    legend.encode = (_legend$encode = legend.encode) !== null && _legend$encode !== void 0 ? _legend$encode : {};\n    legend.encode[part] = (_legend$encode$part = legend.encode[part]) !== null && _legend$encode$part !== void 0 ? _legend$encode$part : {};\n    legend.encode[part].update = (_legend$encode$part$u = legend.encode[part].update) !== null && _legend$encode$part$u !== void 0 ? _legend$encode$part$u : {}; // TODO: remove as any after https://github.com/prisma/nexus-prisma/issues/291\n\n    legend.encode[part].update[vgProp] = vgRef;\n  }\n\n  function assembleLegends(model) {\n    const legendComponentIndex = model.component.legends;\n    const legendByDomain = {};\n\n    for (const channel of keys(legendComponentIndex)) {\n      const scaleComponent = model.getScaleComponent(channel);\n      const domainHash = stringify(scaleComponent.get('domains'));\n\n      if (legendByDomain[domainHash]) {\n        for (const mergedLegendComponent of legendByDomain[domainHash]) {\n          const merged = mergeLegendComponent(mergedLegendComponent, legendComponentIndex[channel]);\n\n          if (!merged) {\n            // If cannot merge, need to add this legend separately\n            legendByDomain[domainHash].push(legendComponentIndex[channel]);\n          }\n        }\n      } else {\n        legendByDomain[domainHash] = [legendComponentIndex[channel].clone()];\n      }\n    }\n\n    const legends = vals(legendByDomain).flat().map(l => assembleLegend(l, model.config)).filter(l => l !== undefined);\n    return legends;\n  }\n  function assembleLegend(legendCmpt, config) {\n    var _legend$encode2;\n\n    const {\n      disable,\n      labelExpr,\n      selections,\n      ...legend\n    } = legendCmpt.combine();\n\n    if (disable) {\n      return undefined;\n    }\n\n    if (config.aria === false && legend.aria == undefined) {\n      legend.aria = false;\n    }\n\n    if ((_legend$encode2 = legend.encode) === null || _legend$encode2 === void 0 ? void 0 : _legend$encode2.symbols) {\n      const out = legend.encode.symbols.update;\n\n      if (out.fill && out.fill['value'] !== 'transparent' && !out.stroke && !legend.stroke) {\n        // For non color channel's legend, we need to override symbol stroke config from Vega config if stroke channel is not used.\n        out.stroke = {\n          value: 'transparent'\n        };\n      } // Remove properties that the legend is encoding.\n\n\n      for (const property of LEGEND_SCALE_CHANNELS) {\n        if (legend[property]) {\n          delete out[property];\n        }\n      }\n    }\n\n    if (!legend.title) {\n      // title schema doesn't include null, ''\n      delete legend.title;\n    }\n\n    if (labelExpr !== undefined) {\n      var _legend$encode3, _legend$encode3$label;\n\n      let expr = labelExpr;\n\n      if (((_legend$encode3 = legend.encode) === null || _legend$encode3 === void 0 ? void 0 : (_legend$encode3$label = _legend$encode3.labels) === null || _legend$encode3$label === void 0 ? void 0 : _legend$encode3$label.update) && isSignalRef(legend.encode.labels.update.text)) {\n        expr = replaceAll(labelExpr, 'datum.label', legend.encode.labels.update.text.signal);\n      }\n\n      setLegendEncode(legend, 'labels', 'text', {\n        signal: expr\n      });\n    }\n\n    return legend;\n  }\n\n  function assembleProjections(model) {\n    if (isLayerModel(model) || isConcatModel(model)) {\n      return assembleProjectionsForModelAndChildren(model);\n    } else {\n      return assembleProjectionForModel(model);\n    }\n  }\n  function assembleProjectionsForModelAndChildren(model) {\n    return model.children.reduce((projections, child) => {\n      return projections.concat(child.assembleProjections());\n    }, assembleProjectionForModel(model));\n  }\n  function assembleProjectionForModel(model) {\n    const component = model.component.projection;\n\n    if (!component || component.merged) {\n      return [];\n    }\n\n    const projection = component.combine();\n    const {\n      name\n    } = projection; // we need to extract name so that it is always present in the output and pass TS type validation\n\n    if (!component.data) {\n      // generate custom projection, no automatic fitting\n      return [{\n        name,\n        // translate to center by default\n        ...{\n          translate: {\n            signal: '[width / 2, height / 2]'\n          }\n        },\n        // parameters, overwrite default translate if specified\n        ...projection\n      }];\n    } else {\n      // generate projection that uses extent fitting\n      const size = {\n        signal: \"[\".concat(component.size.map(ref => ref.signal).join(', '), \"]\")\n      };\n      const fits = component.data.reduce((sources, data) => {\n        const source = isSignalRef(data) ? data.signal : \"data('\".concat(model.lookupDataSource(data), \"')\");\n\n        if (!contains(sources, source)) {\n          // build a unique list of sources\n          sources.push(source);\n        }\n\n        return sources;\n      }, []);\n\n      if (fits.length <= 0) {\n        throw new Error(\"Projection's fit didn't find any data sources\");\n      }\n\n      return [{\n        name,\n        size,\n        fit: {\n          signal: fits.length > 1 ? \"[\".concat(fits.join(', '), \"]\") : fits[0]\n        },\n        ...projection\n      }];\n    }\n  }\n\n  /**\n   * Any property of Projection can be in config\n   */\n  const PROJECTION_PROPERTIES = ['type', 'clipAngle', 'clipExtent', 'center', 'rotate', 'precision', 'reflectX', 'reflectY', 'coefficient', 'distance', 'fraction', 'lobes', 'parallel', 'radius', 'ratio', 'spacing', 'tilt'];\n\n  class ProjectionComponent extends Split {\n    constructor(name, specifiedProjection, size, data) {\n      super({ ...specifiedProjection\n      }, // all explicit properties of projection\n      {\n        name\n      } // name as initial implicit property\n      );\n      this.specifiedProjection = specifiedProjection;\n      this.size = size;\n      this.data = data;\n\n      _defineProperty(this, \"merged\", false);\n    }\n    /**\n     * Whether the projection parameters should fit provided data.\n     */\n\n\n    get isFit() {\n      return !!this.data;\n    }\n\n  }\n\n  function parseProjection(model) {\n    model.component.projection = isUnitModel(model) ? parseUnitProjection(model) : parseNonUnitProjections(model);\n  }\n\n  function parseUnitProjection(model) {\n    if (model.hasProjection) {\n      var _model$config$project;\n\n      const proj = model.specifiedProjection;\n      const fit = !(proj && (proj.scale != null || proj.translate != null));\n      const size = fit ? [model.getSizeSignalRef('width'), model.getSizeSignalRef('height')] : undefined;\n      const data = fit ? gatherFitData(model) : undefined;\n      return new ProjectionComponent(model.projectionName(true), { ...((_model$config$project = model.config.projection) !== null && _model$config$project !== void 0 ? _model$config$project : {}),\n        ...(proj !== null && proj !== void 0 ? proj : {})\n      }, size, data);\n    }\n\n    return undefined;\n  }\n\n  function gatherFitData(model) {\n    const data = [];\n    const {\n      encoding\n    } = model;\n\n    for (const posssiblePair of [[LONGITUDE, LATITUDE], [LONGITUDE2, LATITUDE2]]) {\n      if (getFieldOrDatumDef(encoding[posssiblePair[0]]) || getFieldOrDatumDef(encoding[posssiblePair[1]])) {\n        data.push({\n          signal: model.getName(\"geojson_\".concat(data.length))\n        });\n      }\n    }\n\n    if (model.channelHasField(SHAPE) && model.typedFieldDef(SHAPE).type === GEOJSON) {\n      data.push({\n        signal: model.getName(\"geojson_\".concat(data.length))\n      });\n    }\n\n    if (data.length === 0) {\n      // main source is geojson, so we can just use that\n      data.push(model.requestDataName(DataSourceType.Main));\n    }\n\n    return data;\n  }\n\n  function mergeIfNoConflict(first, second) {\n    const allPropertiesShared = every(PROJECTION_PROPERTIES, prop => {\n      // neither has the property\n      if (!has(first.explicit, prop) && !has(second.explicit, prop)) {\n        return true;\n      } // both have property and an equal value for property\n\n\n      if (has(first.explicit, prop) && has(second.explicit, prop) && // some properties might be signals or objects and require hashing for comparison\n      stringify(first.get(prop)) === stringify(second.get(prop))) {\n        return true;\n      }\n\n      return false;\n    });\n    const size = stringify(first.size) === stringify(second.size);\n\n    if (size) {\n      if (allPropertiesShared) {\n        return first;\n      } else if (stringify(first.explicit) === stringify({})) {\n        return second;\n      } else if (stringify(second.explicit) === stringify({})) {\n        return first;\n      }\n    } // if all properties don't match, let each unit spec have its own projection\n\n\n    return null;\n  }\n\n  function parseNonUnitProjections(model) {\n    if (model.children.length === 0) {\n      return undefined;\n    }\n\n    let nonUnitProjection; // parse all children first\n\n    for (const child of model.children) {\n      parseProjection(child);\n    } // analyze parsed projections, attempt to merge\n\n\n    const mergable = every(model.children, child => {\n      const projection = child.component.projection;\n\n      if (!projection) {\n        // child layer does not use a projection\n        return true;\n      } else if (!nonUnitProjection) {\n        // cached 'projection' is null, cache this one\n        nonUnitProjection = projection;\n        return true;\n      } else {\n        const merge = mergeIfNoConflict(nonUnitProjection, projection);\n\n        if (merge) {\n          nonUnitProjection = merge;\n        }\n\n        return !!merge;\n      }\n    }); // if cached one and all other children share the same projection,\n\n    if (nonUnitProjection && mergable) {\n      // so we can elevate it to the layer level\n      const name = model.projectionName(true);\n      const modelProjection = new ProjectionComponent(name, nonUnitProjection.specifiedProjection, nonUnitProjection.size, duplicate(nonUnitProjection.data)); // rename and assign all others as merged\n\n      for (const child of model.children) {\n        const projection = child.component.projection;\n\n        if (projection) {\n          if (projection.isFit) {\n            modelProjection.data.push(...child.component.projection.data);\n          }\n\n          child.renameProjection(projection.get('name'), name);\n          projection.merged = true;\n        }\n      }\n\n      return modelProjection;\n    }\n\n    return undefined;\n  }\n\n  function rangeFormula(model, fieldDef, channel, config) {\n    if (binRequiresRange(fieldDef, channel)) {\n      var _ref, _model$axis;\n\n      // read format from axis or legend, if there is no format then use config.numberFormat\n      const guide = isUnitModel(model) ? (_ref = (_model$axis = model.axis(channel)) !== null && _model$axis !== void 0 ? _model$axis : model.legend(channel)) !== null && _ref !== void 0 ? _ref : {} : {};\n      const startField = vgField(fieldDef, {\n        expr: 'datum'\n      });\n      const endField = vgField(fieldDef, {\n        expr: 'datum',\n        binSuffix: 'end'\n      });\n      return {\n        formulaAs: vgField(fieldDef, {\n          binSuffix: 'range',\n          forAs: true\n        }),\n        formula: binFormatExpression(startField, endField, guide.format, guide.formatType, config)\n      };\n    }\n\n    return {};\n  }\n\n  function binKey(bin, field) {\n    return \"\".concat(binToString(bin), \"_\").concat(field);\n  }\n\n  function getSignalsFromModel(model, key) {\n    return {\n      signal: model.getName(\"\".concat(key, \"_bins\")),\n      extentSignal: model.getName(\"\".concat(key, \"_extent\"))\n    };\n  }\n\n  function getBinSignalName(model, field, bin) {\n    var _normalizeBin;\n\n    const normalizedBin = (_normalizeBin = normalizeBin(bin, undefined)) !== null && _normalizeBin !== void 0 ? _normalizeBin : {};\n    const key = binKey(normalizedBin, field);\n    return model.getName(\"\".concat(key, \"_bins\"));\n  }\n\n  function isBinTransform(t) {\n    return 'as' in t;\n  }\n\n  function createBinComponent(t, bin, model) {\n    let as;\n    let span;\n\n    if (isBinTransform(t)) {\n      as = isString(t.as) ? [t.as, \"\".concat(t.as, \"_end\")] : [t.as[0], t.as[1]];\n    } else {\n      as = [vgField(t, {\n        forAs: true\n      }), vgField(t, {\n        binSuffix: 'end',\n        forAs: true\n      })];\n    }\n\n    const normalizedBin = { ...normalizeBin(bin, undefined)\n    };\n    const key = binKey(normalizedBin, t.field);\n    const {\n      signal,\n      extentSignal\n    } = getSignalsFromModel(model, key);\n\n    if (isSelectionExtent(normalizedBin.extent)) {\n      const ext = normalizedBin.extent;\n      const selName = ext.selection;\n      span = parseSelectionBinExtent(model.getSelectionComponent(varName(selName), selName), ext);\n      delete normalizedBin.extent; // Vega-Lite selection extent map to Vega's span property.\n    }\n\n    const binComponent = {\n      bin: normalizedBin,\n      field: t.field,\n      as: [as],\n      ...(signal ? {\n        signal\n      } : {}),\n      ...(extentSignal ? {\n        extentSignal\n      } : {}),\n      ...(span ? {\n        span\n      } : {})\n    };\n    return {\n      key,\n      binComponent\n    };\n  }\n\n  class BinNode extends DataFlowNode {\n    clone() {\n      return new BinNode(null, duplicate(this.bins));\n    }\n\n    constructor(parent, bins) {\n      super(parent);\n      this.bins = bins;\n    }\n\n    static makeFromEncoding(parent, model) {\n      const bins = model.reduceFieldDef((binComponentIndex, fieldDef, channel) => {\n        if (isTypedFieldDef(fieldDef) && isBinning(fieldDef.bin)) {\n          const {\n            key,\n            binComponent\n          } = createBinComponent(fieldDef, fieldDef.bin, model);\n          binComponentIndex[key] = { ...binComponent,\n            ...binComponentIndex[key],\n            ...rangeFormula(model, fieldDef, channel, model.config)\n          };\n        }\n\n        return binComponentIndex;\n      }, {});\n\n      if (isEmpty(bins)) {\n        return null;\n      }\n\n      return new BinNode(parent, bins);\n    }\n    /**\n     * Creates a bin node from BinTransform.\n     * The optional parameter should provide\n     */\n\n\n    static makeFromTransform(parent, t, model) {\n      const {\n        key,\n        binComponent\n      } = createBinComponent(t, t.bin, model);\n      return new BinNode(parent, {\n        [key]: binComponent\n      });\n    }\n    /**\n     * Merge bin nodes. This method either integrates the bin config from the other node\n     * or if this node already has a bin config, renames the corresponding signal in the model.\n     */\n\n\n    merge(other, renameSignal) {\n      for (const key of keys(other.bins)) {\n        if (key in this.bins) {\n          renameSignal(other.bins[key].signal, this.bins[key].signal); // Ensure that we don't have duplicate names for signal pairs\n\n          this.bins[key].as = unique([...this.bins[key].as, ...other.bins[key].as], hash);\n        } else {\n          this.bins[key] = other.bins[key];\n        }\n      }\n\n      for (const child of other.children) {\n        other.removeChild(child);\n        child.parent = this;\n      }\n\n      other.remove();\n    }\n\n    producedFields() {\n      return new Set(vals(this.bins).map(c => c.as).flat(2));\n    }\n\n    dependentFields() {\n      return new Set(vals(this.bins).map(c => c.field));\n    }\n\n    hash() {\n      return \"Bin \".concat(hash(this.bins));\n    }\n\n    assemble() {\n      return vals(this.bins).flatMap(bin => {\n        const transform = [];\n        const [binAs, ...remainingAs] = bin.as;\n        const {\n          extent,\n          ...params\n        } = bin.bin;\n        const binTrans = {\n          type: 'bin',\n          field: replacePathInField(bin.field),\n          as: binAs,\n          signal: bin.signal,\n          ...(!isSelectionExtent(extent) ? {\n            extent\n          } : {\n            extent: null\n          }),\n          ...(bin.span ? {\n            span: {\n              signal: \"span(\".concat(bin.span, \")\")\n            }\n          } : {}),\n          ...params\n        };\n\n        if (!extent && bin.extentSignal) {\n          transform.push({\n            type: 'extent',\n            field: replacePathInField(bin.field),\n            signal: bin.extentSignal\n          });\n          binTrans.extent = {\n            signal: bin.extentSignal\n          };\n        }\n\n        transform.push(binTrans);\n\n        for (const as of remainingAs) {\n          for (let i = 0; i < 2; i++) {\n            transform.push({\n              type: 'formula',\n              expr: vgField({\n                field: binAs[i]\n              }, {\n                expr: 'datum'\n              }),\n              as: as[i]\n            });\n          }\n        }\n\n        if (bin.formula) {\n          transform.push({\n            type: 'formula',\n            expr: bin.formula,\n            as: bin.formulaAs\n          });\n        }\n\n        return transform;\n      });\n    }\n\n  }\n\n  function addDimension(dims, channel, fieldDef, model) {\n    const channelDef2 = isUnitModel(model) ? model.encoding[getSecondaryRangeChannel(channel)] : undefined;\n\n    if (isTypedFieldDef(fieldDef) && isUnitModel(model) && hasBand(channel, fieldDef, channelDef2, model.stack, model.markDef, model.config)) {\n      dims.add(vgField(fieldDef, {}));\n      dims.add(vgField(fieldDef, {\n        suffix: 'end'\n      }));\n\n      if (fieldDef.bin && binRequiresRange(fieldDef, channel)) {\n        dims.add(vgField(fieldDef, {\n          binSuffix: 'range'\n        }));\n      }\n    } else if (isGeoPositionChannel(channel)) {\n      const posChannel = getPositionChannelFromLatLong(channel);\n      dims.add(model.getName(posChannel));\n    } else {\n      dims.add(vgField(fieldDef));\n    }\n\n    return dims;\n  }\n\n  function mergeMeasures(parentMeasures, childMeasures) {\n    for (const field of keys(childMeasures)) {\n      // when we merge a measure, we either have to add an aggregation operator or even a new field\n      const ops = childMeasures[field];\n\n      for (const op of keys(ops)) {\n        if (field in parentMeasures) {\n          var _parentMeasures$field;\n\n          // add operator to existing measure field\n          parentMeasures[field][op] = new Set([...((_parentMeasures$field = parentMeasures[field][op]) !== null && _parentMeasures$field !== void 0 ? _parentMeasures$field : []), ...ops[op]]);\n        } else {\n          parentMeasures[field] = {\n            [op]: ops[op]\n          };\n        }\n      }\n    }\n  }\n\n  class AggregateNode extends DataFlowNode {\n    clone() {\n      return new AggregateNode(null, new Set(this.dimensions), duplicate(this.measures));\n    }\n    /**\n     * @param dimensions string set for dimensions\n     * @param measures dictionary mapping field name => dict of aggregation functions and names to use\n     */\n\n\n    constructor(parent, dimensions, measures) {\n      super(parent);\n      this.dimensions = dimensions;\n      this.measures = measures;\n    }\n\n    get groupBy() {\n      return this.dimensions;\n    }\n\n    static makeFromEncoding(parent, model) {\n      let isAggregate = false;\n      model.forEachFieldDef(fd => {\n        if (fd.aggregate) {\n          isAggregate = true;\n        }\n      });\n      const meas = {};\n      const dims = new Set();\n\n      if (!isAggregate) {\n        // no need to create this node if the model has no aggregation\n        return null;\n      }\n\n      model.forEachFieldDef((fieldDef, channel) => {\n        const {\n          aggregate,\n          field\n        } = fieldDef;\n\n        if (aggregate) {\n          if (aggregate === 'count') {\n            var _meas$;\n\n            meas['*'] = (_meas$ = meas['*']) !== null && _meas$ !== void 0 ? _meas$ : {};\n            meas['*']['count'] = new Set([vgField(fieldDef, {\n              forAs: true\n            })]);\n          } else {\n            if (isArgminDef(aggregate) || isArgmaxDef(aggregate)) {\n              var _meas$argField;\n\n              const op = isArgminDef(aggregate) ? 'argmin' : 'argmax';\n              const argField = aggregate[op];\n              meas[argField] = (_meas$argField = meas[argField]) !== null && _meas$argField !== void 0 ? _meas$argField : {};\n              meas[argField][op] = new Set([vgField({\n                op,\n                field: argField\n              }, {\n                forAs: true\n              })]);\n            } else {\n              var _meas$field;\n\n              meas[field] = (_meas$field = meas[field]) !== null && _meas$field !== void 0 ? _meas$field : {};\n              meas[field][aggregate] = new Set([vgField(fieldDef, {\n                forAs: true\n              })]);\n            } // For scale channel with domain === 'unaggregated', add min/max so we can use their union as unaggregated domain\n\n\n            if (isScaleChannel(channel) && model.scaleDomain(channel) === 'unaggregated') {\n              var _meas$field2;\n\n              meas[field] = (_meas$field2 = meas[field]) !== null && _meas$field2 !== void 0 ? _meas$field2 : {};\n              meas[field]['min'] = new Set([vgField({\n                field,\n                aggregate: 'min'\n              }, {\n                forAs: true\n              })]);\n              meas[field]['max'] = new Set([vgField({\n                field,\n                aggregate: 'max'\n              }, {\n                forAs: true\n              })]);\n            }\n          }\n        } else {\n          addDimension(dims, channel, fieldDef, model);\n        }\n      });\n\n      if (dims.size + keys(meas).length === 0) {\n        return null;\n      }\n\n      return new AggregateNode(parent, dims, meas);\n    }\n\n    static makeFromTransform(parent, t) {\n      const dims = new Set();\n      const meas = {};\n\n      for (const s of t.aggregate) {\n        const {\n          op,\n          field,\n          as\n        } = s;\n\n        if (op) {\n          if (op === 'count') {\n            var _meas$2;\n\n            meas['*'] = (_meas$2 = meas['*']) !== null && _meas$2 !== void 0 ? _meas$2 : {};\n            meas['*']['count'] = new Set([as ? as : vgField(s, {\n              forAs: true\n            })]);\n          } else {\n            var _meas$field3;\n\n            meas[field] = (_meas$field3 = meas[field]) !== null && _meas$field3 !== void 0 ? _meas$field3 : {};\n            meas[field][op] = new Set([as ? as : vgField(s, {\n              forAs: true\n            })]);\n          }\n        }\n      }\n\n      for (const s of (_t$groupby = t.groupby) !== null && _t$groupby !== void 0 ? _t$groupby : []) {\n        var _t$groupby;\n\n        dims.add(s);\n      }\n\n      if (dims.size + keys(meas).length === 0) {\n        return null;\n      }\n\n      return new AggregateNode(parent, dims, meas);\n    }\n\n    merge(other) {\n      if (setEqual(this.dimensions, other.dimensions)) {\n        mergeMeasures(this.measures, other.measures);\n        return true;\n      } else {\n        debug('different dimensions, cannot merge');\n        return false;\n      }\n    }\n\n    addDimensions(fields) {\n      fields.forEach(this.dimensions.add, this.dimensions);\n    }\n\n    dependentFields() {\n      return new Set([...this.dimensions, ...keys(this.measures)]);\n    }\n\n    producedFields() {\n      const out = new Set();\n\n      for (const field of keys(this.measures)) {\n        for (const op of keys(this.measures[field])) {\n          const m = this.measures[field][op];\n\n          if (m.size === 0) {\n            out.add(\"\".concat(op, \"_\").concat(field));\n          } else {\n            m.forEach(out.add, out);\n          }\n        }\n      }\n\n      return out;\n    }\n\n    hash() {\n      return \"Aggregate \".concat(hash({\n        dimensions: this.dimensions,\n        measures: this.measures\n      }));\n    }\n\n    assemble() {\n      const ops = [];\n      const fields = [];\n      const as = [];\n\n      for (const field of keys(this.measures)) {\n        for (const op of keys(this.measures[field])) {\n          for (const alias of this.measures[field][op]) {\n            as.push(alias);\n            ops.push(op);\n            fields.push(field === '*' ? null : replacePathInField(field));\n          }\n        }\n      }\n\n      const result = {\n        type: 'aggregate',\n        groupby: [...this.dimensions].map(replacePathInField),\n        ops,\n        fields,\n        as\n      };\n      return result;\n    }\n\n  }\n\n  /**\n   * A node that helps us track what fields we are faceting by.\n   */\n  class FacetNode extends DataFlowNode {\n    /**\n     * @param model The facet model.\n     * @param name The name that this facet source will have.\n     * @param data The source data for this facet data.\n     */\n    constructor(parent, model, name, data) {\n      super(parent);\n      this.model = model;\n      this.name = name;\n      this.data = data;\n\n      _defineProperty(this, \"column\", void 0);\n\n      _defineProperty(this, \"row\", void 0);\n\n      _defineProperty(this, \"facet\", void 0);\n\n      _defineProperty(this, \"childModel\", void 0);\n\n      for (const channel of FACET_CHANNELS) {\n        const fieldDef = model.facet[channel];\n\n        if (fieldDef) {\n          const {\n            bin,\n            sort\n          } = fieldDef;\n          this[channel] = {\n            name: model.getName(\"\".concat(channel, \"_domain\")),\n            fields: [vgField(fieldDef), ...(isBinning(bin) ? [vgField(fieldDef, {\n              binSuffix: 'end'\n            })] : [])],\n            ...(isSortField(sort) ? {\n              sortField: sort\n            } : isArray(sort) ? {\n              sortIndexField: sortArrayIndexField(fieldDef, channel)\n            } : {})\n          };\n        }\n      }\n\n      this.childModel = model.child;\n    }\n\n    hash() {\n      let out = \"Facet\";\n\n      for (const channel of FACET_CHANNELS) {\n        if (this[channel]) {\n          out += \" \".concat(channel.charAt(0), \":\").concat(hash(this[channel]));\n        }\n      }\n\n      return out;\n    }\n\n    get fields() {\n      const f = [];\n\n      for (const channel of FACET_CHANNELS) {\n        var _this$channel;\n\n        if ((_this$channel = this[channel]) === null || _this$channel === void 0 ? void 0 : _this$channel.fields) {\n          f.push(...this[channel].fields);\n        }\n      }\n\n      return f;\n    }\n\n    dependentFields() {\n      const depFields = new Set(this.fields);\n\n      for (const channel of FACET_CHANNELS) {\n        if (this[channel]) {\n          if (this[channel].sortField) {\n            depFields.add(this[channel].sortField.field);\n          }\n\n          if (this[channel].sortIndexField) {\n            depFields.add(this[channel].sortIndexField);\n          }\n        }\n      }\n\n      return depFields;\n    }\n\n    producedFields() {\n      return new Set(); // facet does not produce any new fields\n    }\n    /**\n     * The name to reference this source is its name.\n     */\n\n\n    getSource() {\n      return this.name;\n    }\n\n    getChildIndependentFieldsWithStep() {\n      const childIndependentFieldsWithStep = {};\n\n      for (const channel of POSITION_SCALE_CHANNELS) {\n        const childScaleComponent = this.childModel.component.scales[channel];\n\n        if (childScaleComponent && !childScaleComponent.merged) {\n          // independent scale\n          const type = childScaleComponent.get('type');\n          const range = childScaleComponent.get('range');\n\n          if (hasDiscreteDomain(type) && isVgRangeStep(range)) {\n            const domain = assembleDomain(this.childModel, channel);\n            const field = getFieldFromDomain(domain);\n\n            if (field) {\n              childIndependentFieldsWithStep[channel] = field;\n            } else {\n              warn(unknownField(channel));\n            }\n          }\n        }\n      }\n\n      return childIndependentFieldsWithStep;\n    }\n\n    assembleRowColumnHeaderData(channel, crossedDataName, childIndependentFieldsWithStep) {\n      const childChannel = {\n        row: 'y',\n        column: 'x'\n      }[channel];\n      const fields = [];\n      const ops = [];\n      const as = [];\n\n      if (childIndependentFieldsWithStep && childIndependentFieldsWithStep[childChannel]) {\n        if (crossedDataName) {\n          // If there is a crossed data, calculate max\n          fields.push(\"distinct_\".concat(childIndependentFieldsWithStep[childChannel]));\n          ops.push('max');\n        } else {\n          // If there is no crossed data, just calculate distinct\n          fields.push(childIndependentFieldsWithStep[childChannel]);\n          ops.push('distinct');\n        } // Although it is technically a max, just name it distinct so it's easier to refer to it\n\n\n        as.push(\"distinct_\".concat(childIndependentFieldsWithStep[childChannel]));\n      }\n\n      const {\n        sortField,\n        sortIndexField\n      } = this[channel];\n\n      if (sortField) {\n        const {\n          op = DEFAULT_SORT_OP,\n          field\n        } = sortField;\n        fields.push(field);\n        ops.push(op);\n        as.push(vgField(sortField, {\n          forAs: true\n        }));\n      } else if (sortIndexField) {\n        fields.push(sortIndexField);\n        ops.push('max');\n        as.push(sortIndexField);\n      }\n\n      return {\n        name: this[channel].name,\n        // Use data from the crossed one if it exist\n        source: crossedDataName !== null && crossedDataName !== void 0 ? crossedDataName : this.data,\n        transform: [{\n          type: 'aggregate',\n          groupby: this[channel].fields,\n          ...(fields.length ? {\n            fields,\n            ops,\n            as\n          } : {})\n        }]\n      };\n    }\n\n    assembleFacetHeaderData(childIndependentFieldsWithStep) {\n      const {\n        columns\n      } = this.model.layout;\n      const {\n        layoutHeaders\n      } = this.model.component;\n      const data = [];\n      const hasSharedAxis = {};\n\n      for (const headerChannel of HEADER_CHANNELS) {\n        for (const headerType of HEADER_TYPES) {\n          var _ref;\n\n          const headers = (_ref = layoutHeaders[headerChannel] && layoutHeaders[headerChannel][headerType]) !== null && _ref !== void 0 ? _ref : [];\n\n          for (const header of headers) {\n            var _header$axes;\n\n            if (((_header$axes = header.axes) === null || _header$axes === void 0 ? void 0 : _header$axes.length) > 0) {\n              hasSharedAxis[headerChannel] = true;\n              break;\n            }\n          }\n        }\n\n        if (hasSharedAxis[headerChannel]) {\n          const cardinality = \"length(data(\\\"\".concat(this.facet.name, \"\\\"))\");\n          const stop = headerChannel === 'row' ? columns ? {\n            signal: \"ceil(\".concat(cardinality, \" / \").concat(columns, \")\")\n          } : 1 : columns ? {\n            signal: \"min(\".concat(cardinality, \", \").concat(columns, \")\")\n          } : {\n            signal: cardinality\n          };\n          data.push({\n            name: \"\".concat(this.facet.name, \"_\").concat(headerChannel),\n            transform: [{\n              type: 'sequence',\n              start: 0,\n              stop\n            }]\n          });\n        }\n      }\n\n      const {\n        row,\n        column\n      } = hasSharedAxis;\n\n      if (row || column) {\n        data.unshift(this.assembleRowColumnHeaderData('facet', null, childIndependentFieldsWithStep));\n      }\n\n      return data;\n    }\n\n    assemble() {\n      const data = [];\n      let crossedDataName = null;\n      const childIndependentFieldsWithStep = this.getChildIndependentFieldsWithStep();\n      const {\n        column,\n        row,\n        facet\n      } = this;\n\n      if (column && row && (childIndependentFieldsWithStep.x || childIndependentFieldsWithStep.y)) {\n        var _childIndependentFiel, _childIndependentFiel2;\n\n        // Need to create a cross dataset to correctly calculate cardinality\n        crossedDataName = \"cross_\".concat(this.column.name, \"_\").concat(this.row.name);\n        const fields = [].concat((_childIndependentFiel = childIndependentFieldsWithStep.x) !== null && _childIndependentFiel !== void 0 ? _childIndependentFiel : [], (_childIndependentFiel2 = childIndependentFieldsWithStep.y) !== null && _childIndependentFiel2 !== void 0 ? _childIndependentFiel2 : []);\n        const ops = fields.map(() => 'distinct');\n        data.push({\n          name: crossedDataName,\n          source: this.data,\n          transform: [{\n            type: 'aggregate',\n            groupby: this.fields,\n            fields,\n            ops\n          }]\n        });\n      }\n\n      for (const channel of [COLUMN, ROW]) {\n        if (this[channel]) {\n          data.push(this.assembleRowColumnHeaderData(channel, crossedDataName, childIndependentFieldsWithStep));\n        }\n      }\n\n      if (facet) {\n        const facetData = this.assembleFacetHeaderData(childIndependentFieldsWithStep);\n\n        if (facetData) {\n          data.push(...facetData);\n        }\n      }\n\n      return data;\n    }\n\n  }\n\n  /**\n   * Remove quotes from a string.\n   */\n\n  function unquote(pattern) {\n    if (pattern[0] === \"'\" && pattern[pattern.length - 1] === \"'\" || pattern[0] === '\"' && pattern[pattern.length - 1] === '\"') {\n      return pattern.slice(1, -1);\n    }\n\n    return pattern;\n  }\n  /**\n   * @param field The field.\n   * @param parse What to parse the field as.\n   */\n\n\n  function parseExpression$1(field, parse) {\n    const f = accessPathWithDatum(field);\n\n    if (parse === 'number') {\n      return \"toNumber(\".concat(f, \")\");\n    } else if (parse === 'boolean') {\n      return \"toBoolean(\".concat(f, \")\");\n    } else if (parse === 'string') {\n      return \"toString(\".concat(f, \")\");\n    } else if (parse === 'date') {\n      return \"toDate(\".concat(f, \")\");\n    } else if (parse === 'flatten') {\n      return f;\n    } else if (parse.indexOf('date:') === 0) {\n      const specifier = unquote(parse.slice(5, parse.length));\n      return \"timeParse(\".concat(f, \",'\").concat(specifier, \"')\");\n    } else if (parse.indexOf('utc:') === 0) {\n      const specifier = unquote(parse.slice(4, parse.length));\n      return \"utcParse(\".concat(f, \",'\").concat(specifier, \"')\");\n    } else {\n      warn(unrecognizedParse(parse));\n      return null;\n    }\n  }\n\n  function getImplicitFromFilterTransform(transform) {\n    const implicit = {};\n    forEachLeaf(transform.filter, filter => {\n      if (isFieldPredicate(filter)) {\n        // Automatically add a parse node for filters with filter objects\n        let val = null; // For EqualFilter, just use the equal property.\n        // For RangeFilter and OneOfFilter, all array members should have\n        // the same type, so we only use the first one.\n\n        if (isFieldEqualPredicate(filter)) {\n          val = signalRefOrValue(filter.equal);\n        } else if (isFieldLTEPredicate(filter)) {\n          val = signalRefOrValue(filter.lte);\n        } else if (isFieldLTPredicate(filter)) {\n          val = signalRefOrValue(filter.lt);\n        } else if (isFieldGTPredicate(filter)) {\n          val = signalRefOrValue(filter.gt);\n        } else if (isFieldGTEPredicate(filter)) {\n          val = signalRefOrValue(filter.gte);\n        } else if (isFieldRangePredicate(filter)) {\n          val = filter.range[0];\n        } else if (isFieldOneOfPredicate(filter)) {\n          var _filter$oneOf;\n\n          val = ((_filter$oneOf = filter.oneOf) !== null && _filter$oneOf !== void 0 ? _filter$oneOf : filter['in'])[0];\n        } // else -- for filter expression, we can't infer anything\n\n\n        if (val) {\n          if (isDateTime(val)) {\n            implicit[filter.field] = 'date';\n          } else if (isNumber(val)) {\n            implicit[filter.field] = 'number';\n          } else if (isString(val)) {\n            implicit[filter.field] = 'string';\n          }\n        }\n\n        if (filter.timeUnit) {\n          implicit[filter.field] = 'date';\n        }\n      }\n    });\n    return implicit;\n  }\n  /**\n   * Creates a parse node for implicit parsing from a model and updates ancestorParse.\n   */\n\n  function getImplicitFromEncoding(model) {\n    const implicit = {};\n\n    function add(fieldDef) {\n      if (isFieldOrDatumDefForTimeFormat(fieldDef)) {\n        implicit[fieldDef.field] = 'date';\n      } else if (fieldDef.type === 'quantitative' && isMinMaxOp(fieldDef.aggregate) // we need to parse numbers to support correct min and max\n      ) {\n          implicit[fieldDef.field] = 'number';\n        } else if (accessPathDepth(fieldDef.field) > 1) {\n        // For non-date/non-number (strings and booleans), derive a flattened field for a referenced nested field.\n        // (Parsing numbers / dates already flattens numeric and temporal fields.)\n        if (!(fieldDef.field in implicit)) {\n          implicit[fieldDef.field] = 'flatten';\n        }\n      } else if (isScaleFieldDef(fieldDef) && isSortField(fieldDef.sort) && accessPathDepth(fieldDef.sort.field) > 1) {\n        // Flatten fields that we sort by but that are not otherwise flattened.\n        if (!(fieldDef.sort.field in implicit)) {\n          implicit[fieldDef.sort.field] = 'flatten';\n        }\n      }\n    }\n\n    if (isUnitModel(model) || isFacetModel(model)) {\n      // Parse encoded fields\n      model.forEachFieldDef((fieldDef, channel) => {\n        if (isTypedFieldDef(fieldDef)) {\n          add(fieldDef);\n        } else {\n          const mainChannel = getMainRangeChannel(channel);\n          const mainFieldDef = model.fieldDef(mainChannel);\n          add({ ...fieldDef,\n            type: mainFieldDef.type\n          });\n        }\n      });\n    } // Parse quantitative dimension fields of path marks as numbers so that we sort them correctly.\n\n\n    if (isUnitModel(model)) {\n      const {\n        mark,\n        markDef,\n        encoding\n      } = model;\n\n      if (isPathMark(mark) && // No need to sort by dimension if we have a connected scatterplot (order channel is present)\n      !model.encoding.order) {\n        const dimensionChannel = markDef.orient === 'horizontal' ? 'y' : 'x';\n        const dimensionChannelDef = encoding[dimensionChannel];\n\n        if (isFieldDef(dimensionChannelDef) && dimensionChannelDef.type === 'quantitative' && !(dimensionChannelDef.field in implicit)) {\n          implicit[dimensionChannelDef.field] = 'number';\n        }\n      }\n    }\n\n    return implicit;\n  }\n  /**\n   * Creates a parse node for implicit parsing from a model and updates ancestorParse.\n   */\n\n  function getImplicitFromSelection(model) {\n    const implicit = {};\n\n    if (isUnitModel(model) && model.component.selection) {\n      for (const name of keys(model.component.selection)) {\n        const selCmpt = model.component.selection[name];\n\n        for (const proj of selCmpt.project.items) {\n          if (!proj.channel && accessPathDepth(proj.field) > 1) {\n            implicit[proj.field] = 'flatten';\n          }\n        }\n      }\n    }\n\n    return implicit;\n  }\n  class ParseNode extends DataFlowNode {\n    clone() {\n      return new ParseNode(null, duplicate(this._parse));\n    }\n\n    constructor(parent, parse) {\n      super(parent);\n\n      _defineProperty(this, \"_parse\", void 0);\n\n      this._parse = parse;\n    }\n\n    hash() {\n      return \"Parse \".concat(hash(this._parse));\n    }\n    /**\n     * Creates a parse node from a data.format.parse and updates ancestorParse.\n     */\n\n\n    static makeExplicit(parent, model, ancestorParse) {\n      // Custom parse\n      let explicit = {};\n      const data = model.data;\n\n      if (!isGenerator(data) && data && data.format && data.format.parse) {\n        explicit = data.format.parse;\n      }\n\n      return this.makeWithAncestors(parent, explicit, {}, ancestorParse);\n    }\n    /**\n     * Creates a parse node from \"explicit\" parse and \"implicit\" parse and updates ancestorParse.\n     */\n\n\n    static makeWithAncestors(parent, explicit, implicit, ancestorParse) {\n      // We should not parse what has already been parsed in a parent (explicitly or implicitly) or what has been derived (maked as \"derived\"). We also don't need to flatten a field that has already been parsed.\n      for (const field of keys(implicit)) {\n        const parsedAs = ancestorParse.getWithExplicit(field);\n\n        if (parsedAs.value !== undefined) {\n          // We always ignore derived fields even if they are implicitly defined because we expect users to create the right types.\n          if (parsedAs.explicit || parsedAs.value === implicit[field] || parsedAs.value === 'derived' || implicit[field] === 'flatten') {\n            delete implicit[field];\n          } else {\n            warn(differentParse(field, implicit[field], parsedAs.value));\n          }\n        }\n      }\n\n      for (const field of keys(explicit)) {\n        const parsedAs = ancestorParse.get(field);\n\n        if (parsedAs !== undefined) {\n          // Don't parse a field again if it has been parsed with the same type already.\n          if (parsedAs === explicit[field]) {\n            delete explicit[field];\n          } else {\n            warn(differentParse(field, explicit[field], parsedAs));\n          }\n        }\n      }\n\n      const parse = new Split(explicit, implicit); // add the format parse from this model so that children don't parse the same field again\n\n      ancestorParse.copyAll(parse); // copy only non-null parses\n\n      const p = {};\n\n      for (const key of keys(parse.combine())) {\n        const val = parse.get(key);\n\n        if (val !== null) {\n          p[key] = val;\n        }\n      }\n\n      if (keys(p).length === 0 || ancestorParse.parseNothing) {\n        return null;\n      }\n\n      return new ParseNode(parent, p);\n    }\n\n    get parse() {\n      return this._parse;\n    }\n\n    merge(other) {\n      this._parse = { ...this._parse,\n        ...other.parse\n      };\n      other.remove();\n    }\n    /**\n     * Assemble an object for Vega's format.parse property.\n     */\n\n\n    assembleFormatParse() {\n      const formatParse = {};\n\n      for (const field of keys(this._parse)) {\n        const p = this._parse[field];\n\n        if (accessPathDepth(field) === 1) {\n          formatParse[field] = p;\n        }\n      }\n\n      return formatParse;\n    } // format parse depends and produces all fields in its parse\n\n\n    producedFields() {\n      return new Set(keys(this._parse));\n    }\n\n    dependentFields() {\n      return new Set(keys(this._parse));\n    }\n\n    assembleTransforms(onlyNested = false) {\n      return keys(this._parse).filter(field => onlyNested ? accessPathDepth(field) > 1 : true).map(field => {\n        const expr = parseExpression$1(field, this._parse[field]);\n\n        if (!expr) {\n          return null;\n        }\n\n        const formula = {\n          type: 'formula',\n          expr,\n          as: removePathFromField(field) // Vega output is always flattened\n\n        };\n        return formula;\n      }).filter(t => t !== null);\n    }\n\n  }\n\n  class IdentifierNode extends DataFlowNode {\n    clone() {\n      return new IdentifierNode(null);\n    }\n\n    constructor(parent) {\n      super(parent);\n    }\n\n    dependentFields() {\n      return new Set();\n    }\n\n    producedFields() {\n      return new Set([SELECTION_ID]);\n    }\n\n    hash() {\n      return 'Identifier';\n    }\n\n    assemble() {\n      return {\n        type: 'identifier',\n        as: SELECTION_ID\n      };\n    }\n\n  }\n\n  class GraticuleNode extends DataFlowNode {\n    clone() {\n      return new GraticuleNode(null, this.params);\n    }\n\n    constructor(parent, params) {\n      super(parent);\n      this.params = params;\n    }\n\n    dependentFields() {\n      return new Set();\n    }\n\n    producedFields() {\n      return undefined; // there should never be a node before graticule\n    }\n\n    hash() {\n      return \"Graticule \".concat(hash(this.params));\n    }\n\n    assemble() {\n      return {\n        type: 'graticule',\n        ...(this.params === true ? {} : this.params)\n      };\n    }\n\n  }\n\n  class SequenceNode extends DataFlowNode {\n    clone() {\n      return new SequenceNode(null, this.params);\n    }\n\n    constructor(parent, params) {\n      super(parent);\n      this.params = params;\n    }\n\n    dependentFields() {\n      return new Set();\n    }\n\n    producedFields() {\n      var _this$params$as;\n\n      return new Set([(_this$params$as = this.params.as) !== null && _this$params$as !== void 0 ? _this$params$as : 'data']);\n    }\n\n    hash() {\n      return \"Hash \".concat(hash(this.params));\n    }\n\n    assemble() {\n      return {\n        type: 'sequence',\n        ...this.params\n      };\n    }\n\n  }\n\n  class SourceNode extends DataFlowNode {\n    constructor(data) {\n      var _data;\n\n      super(null); // source cannot have parent\n\n      _defineProperty(this, \"_data\", void 0);\n\n      _defineProperty(this, \"_name\", void 0);\n\n      _defineProperty(this, \"_generator\", void 0);\n\n      data = (_data = data) !== null && _data !== void 0 ? _data : {\n        name: 'source'\n      };\n      let format;\n\n      if (!isGenerator(data)) {\n        format = data.format ? { ...omit(data.format, ['parse'])\n        } : {};\n      }\n\n      if (isInlineData(data)) {\n        this._data = {\n          values: data.values\n        };\n      } else if (isUrlData(data)) {\n        this._data = {\n          url: data.url\n        };\n\n        if (!format.type) {\n          // Extract extension from URL using snippet from\n          // http://stackoverflow.com/questions/680929/how-to-extract-extension-from-filename-string-in-javascript\n          let defaultExtension = /(?:\\.([^.]+))?$/.exec(data.url)[1];\n\n          if (!contains(['json', 'csv', 'tsv', 'dsv', 'topojson'], defaultExtension)) {\n            defaultExtension = 'json';\n          } // defaultExtension has type string but we ensure that it is DataFormatType above\n\n\n          format.type = defaultExtension;\n        }\n      } else if (isSphereGenerator(data)) {\n        // hardwire GeoJSON sphere data into output specification\n        this._data = {\n          values: [{\n            type: 'Sphere'\n          }]\n        };\n      } else if (isNamedData(data) || isGenerator(data)) {\n        this._data = {};\n      } // set flag to check if generator\n\n\n      this._generator = isGenerator(data); // any dataset can be named\n\n      if (data.name) {\n        this._name = data.name;\n      }\n\n      if (format && !isEmpty(format)) {\n        this._data.format = format;\n      }\n    }\n\n    dependentFields() {\n      return new Set();\n    }\n\n    producedFields() {\n      return undefined; // we don't know what this source produces\n    }\n\n    get data() {\n      return this._data;\n    }\n\n    hasName() {\n      return !!this._name;\n    }\n\n    get isGenerator() {\n      return this._generator;\n    }\n\n    get dataName() {\n      return this._name;\n    }\n\n    set dataName(name) {\n      this._name = name;\n    }\n\n    set parent(parent) {\n      throw new Error('Source nodes have to be roots.');\n    }\n\n    remove() {\n      throw new Error('Source nodes are roots and cannot be removed.');\n    }\n\n    hash() {\n      throw new Error('Cannot hash sources');\n    }\n\n    assemble() {\n      return {\n        name: this._name,\n        ...this._data,\n        transform: []\n      };\n    }\n\n  }\n\n  /**\n   * Whether this dataflow node is the source of the dataflow that produces data i.e. a source or a generator.\n   */\n\n  function isDataSourceNode(node) {\n    return node instanceof SourceNode || node instanceof GraticuleNode || node instanceof SequenceNode;\n  }\n  /**\n   * Abstract base class for Dataflow optimizers.\n   * Contains only mutation handling logic. Subclasses need to implement iteration logic.\n   */\n\n  var _modified = new WeakMap();\n\n  class Optimizer {\n    constructor() {\n      _modified.set(this, {\n        writable: true,\n        value: void 0\n      });\n\n      _classPrivateFieldSet(this, _modified, false);\n    } // Once true, #modified is never set to false\n\n\n    setModified() {\n      _classPrivateFieldSet(this, _modified, true);\n    }\n\n    get modifiedFlag() {\n      return _classPrivateFieldGet(this, _modified);\n    }\n    /**\n     * Run the optimization for the tree with the provided root.\n     */\n\n\n  }\n  /**\n   * Starts from a node and runs the optimization function (the \"run\" method) upwards to the root,\n   * depending on the continue and modified flag values returned by the optimization function.\n   */\n\n  class BottomUpOptimizer extends Optimizer {\n    /**\n     * Run the optimizer at the node. This method should not change the parent of the passed in node (it should only affect children).\n     */\n\n    /**\n     * Compute a map of node depths that we can use to determine a topological sort order.\n     */\n    getNodeDepths(node, depth, depths) {\n      depths.set(node, depth);\n\n      for (const child of node.children) {\n        this.getNodeDepths(child, depth + 1, depths);\n      }\n\n      return depths;\n    }\n    /**\n     * Run the optimizer on all nodes starting from the leaves.\n     */\n\n\n    optimize(node) {\n      const depths = this.getNodeDepths(node, 0, new Map());\n      const topologicalSort = [...depths.entries()].sort((a, b) => b[1] - a[1]);\n\n      for (const tuple of topologicalSort) {\n        this.run(tuple[0]);\n      }\n\n      return this.modifiedFlag;\n    }\n\n  }\n  /**\n   * The optimizer function (the \"run\" method), is invoked on the given node and then continues recursively.\n   */\n\n  class TopDownOptimizer extends Optimizer {\n    /**\n     * Run the optimizer at the node.\n     */\n\n    /**\n     * Run the optimizer depth first on all nodes starting from the roots.\n     */\n    optimize(node) {\n      this.run(node);\n\n      for (const child of node.children) {\n        this.optimize(child);\n      }\n\n      return this.modifiedFlag;\n    }\n\n  }\n\n  /**\n   * Merge identical nodes at forks by comparing hashes.\n   *\n   * Does not need to iterate from leaves so we implement this with recursion as it's a bit simpler.\n   */\n\n  class MergeIdenticalNodes extends TopDownOptimizer {\n    mergeNodes(parent, nodes) {\n      const mergedNode = nodes.shift();\n\n      for (const node of nodes) {\n        parent.removeChild(node);\n        node.parent = mergedNode;\n        node.remove();\n      }\n    }\n\n    run(node) {\n      const hashes = node.children.map(x => x.hash());\n      const buckets = {};\n\n      for (let i = 0; i < hashes.length; i++) {\n        if (buckets[hashes[i]] === undefined) {\n          buckets[hashes[i]] = [node.children[i]];\n        } else {\n          buckets[hashes[i]].push(node.children[i]);\n        }\n      }\n\n      for (const k of keys(buckets)) {\n        if (buckets[k].length > 1) {\n          this.setModified();\n          this.mergeNodes(node, buckets[k]);\n        }\n      }\n    }\n\n  }\n  /**\n   * Optimizer that removes identifier nodes that are not needed for selections.\n   */\n\n  class RemoveUnnecessaryIdentifierNodes extends TopDownOptimizer {\n    constructor(model) {\n      super();\n\n      _defineProperty(this, \"requiresSelectionId\", void 0);\n\n      this.requiresSelectionId = model && requiresSelectionId(model);\n    }\n\n    run(node) {\n      if (node instanceof IdentifierNode) {\n        // Only preserve IdentifierNodes if we have default discrete selections\n        // in our model tree, and if the nodes come after tuple producing nodes.\n        if (!(this.requiresSelectionId && (isDataSourceNode(node.parent) || node.parent instanceof AggregateNode || node.parent instanceof ParseNode))) {\n          this.setModified();\n          node.remove();\n        }\n      }\n    }\n\n  }\n  /**\n   * Removes duplicate time unit nodes (as determined by the name of the output field) that may be generated due to\n   * selections projected over time units. Only keeps the first time unit in any branch.\n   *\n   * This optimizer is a custom top down optimizer that keep track of produced fields in a branch.\n   */\n\n  class RemoveDuplicateTimeUnits extends Optimizer {\n    optimize(node) {\n      this.run(node, new Set());\n      return this.modifiedFlag;\n    }\n\n    run(node, timeUnitFields) {\n      let producedFields = new Set();\n\n      if (node instanceof TimeUnitNode) {\n        producedFields = node.producedFields();\n\n        if (hasIntersection(producedFields, timeUnitFields)) {\n          this.setModified();\n          node.removeFormulas(timeUnitFields);\n\n          if (node.producedFields.length === 0) {\n            node.remove();\n          }\n        }\n      }\n\n      for (const child of node.children) {\n        this.run(child, new Set([...timeUnitFields, ...producedFields]));\n      }\n    }\n\n  }\n  /**\n   * Remove output nodes that are not required.\n   */\n\n  class RemoveUnnecessaryOutputNodes extends TopDownOptimizer {\n    constructor() {\n      super();\n    }\n\n    run(node) {\n      if (node instanceof OutputNode && !node.isRequired()) {\n        this.setModified();\n        node.remove();\n      }\n    }\n\n  }\n  /**\n   * Move parse nodes up to forks and merges them if possible.\n   */\n\n  class MoveParseUp extends BottomUpOptimizer {\n    run(node) {\n      if (isDataSourceNode(node)) {\n        return;\n      }\n\n      if (node.numChildren() > 1) {\n        // Don't move parse further up but continue with parent.\n        return;\n      }\n\n      for (const child of node.children) {\n        if (child instanceof ParseNode) {\n          if (node instanceof ParseNode) {\n            this.setModified();\n            node.merge(child);\n          } else {\n            // Don't swap with nodes that produce something that the parse node depends on (e.g. lookup).\n            if (fieldIntersection(node.producedFields(), child.dependentFields())) {\n              continue;\n            }\n\n            this.setModified();\n            child.swapWithParent();\n          }\n        }\n      }\n\n      return;\n    }\n\n  }\n  /**\n   * Inserts an intermediate ParseNode containing all non-conflicting parse fields and removes the empty ParseNodes.\n   *\n   * We assume that dependent paths that do not have a parse node can be just merged.\n   */\n\n  class MergeParse extends BottomUpOptimizer {\n    run(node) {\n      const originalChildren = [...node.children];\n      const parseChildren = node.children.filter(child => child instanceof ParseNode);\n\n      if (node.numChildren() > 1 && parseChildren.length >= 1) {\n        const commonParse = {};\n        const conflictingParse = new Set();\n\n        for (const parseNode of parseChildren) {\n          const parse = parseNode.parse;\n\n          for (const k of keys(parse)) {\n            if (!(k in commonParse)) {\n              commonParse[k] = parse[k];\n            } else if (commonParse[k] !== parse[k]) {\n              conflictingParse.add(k);\n            }\n          }\n        }\n\n        for (const field of conflictingParse) {\n          delete commonParse[field];\n        }\n\n        if (!isEmpty(commonParse)) {\n          this.setModified();\n          const mergedParseNode = new ParseNode(node, commonParse);\n\n          for (const childNode of originalChildren) {\n            if (childNode instanceof ParseNode) {\n              for (const key of keys(commonParse)) {\n                delete childNode.parse[key];\n              }\n            }\n\n            node.removeChild(childNode);\n            childNode.parent = mergedParseNode; // remove empty parse nodes\n\n            if (childNode instanceof ParseNode && keys(childNode.parse).length === 0) {\n              childNode.remove();\n            }\n          }\n        }\n      }\n    }\n\n  }\n  /**\n   * Repeatedly remove leaf nodes that are not output or facet nodes.\n   * The reason is that we don't need subtrees that don't have any output nodes.\n   * Facet nodes are needed for the row or column domains.\n   */\n\n  class RemoveUnusedSubtrees extends BottomUpOptimizer {\n    run(node) {\n      if (node instanceof OutputNode || node.numChildren() > 0 || node instanceof FacetNode) ; else if (node instanceof SourceNode) ; else {\n        this.setModified();\n        node.remove();\n      }\n    }\n\n  }\n  /**\n   * Merge adjacent time unit nodes.\n   */\n\n  class MergeTimeUnits extends BottomUpOptimizer {\n    run(node) {\n      const timeUnitChildren = node.children.filter(x => x instanceof TimeUnitNode);\n      const combination = timeUnitChildren.pop();\n\n      for (const timeUnit of timeUnitChildren) {\n        this.setModified();\n        combination.merge(timeUnit);\n      }\n    }\n\n  }\n  class MergeAggregates extends BottomUpOptimizer {\n    run(node) {\n      const aggChildren = node.children.filter(child => child instanceof AggregateNode); // Object which we'll use to map the fields which an aggregate is grouped by to\n      // the set of aggregates with that grouping. This is useful as only aggregates\n      // with the same group by can be merged\n\n      const groupedAggregates = {}; // Build groupedAggregates\n\n      for (const agg of aggChildren) {\n        const groupBys = hash(agg.groupBy);\n\n        if (!(groupBys in groupedAggregates)) {\n          groupedAggregates[groupBys] = [];\n        }\n\n        groupedAggregates[groupBys].push(agg);\n      } // Merge aggregateNodes with same key in groupedAggregates\n\n\n      for (const group of keys(groupedAggregates)) {\n        const mergeableAggs = groupedAggregates[group];\n\n        if (mergeableAggs.length > 1) {\n          const mergedAggs = mergeableAggs.pop();\n\n          for (const agg of mergeableAggs) {\n            if (mergedAggs.merge(agg)) {\n              node.removeChild(agg);\n              agg.parent = mergedAggs;\n              agg.remove();\n              this.setModified();\n            }\n          }\n        }\n      }\n    }\n\n  }\n  /**\n   * Merge bin nodes and move them up through forks. Stop at filters, parse, identifier as we want them to stay before the bin node.\n   */\n\n  class MergeBins extends BottomUpOptimizer {\n    constructor(model) {\n      super();\n      this.model = model;\n    }\n\n    run(node) {\n      const moveBinsUp = !(isDataSourceNode(node) || node instanceof FilterNode || node instanceof ParseNode || node instanceof IdentifierNode);\n      const promotableBins = [];\n      const remainingBins = [];\n\n      for (const child of node.children) {\n        if (child instanceof BinNode) {\n          if (moveBinsUp && !fieldIntersection(node.producedFields(), child.dependentFields())) {\n            promotableBins.push(child);\n          } else {\n            remainingBins.push(child);\n          }\n        }\n      }\n\n      if (promotableBins.length > 0) {\n        const promotedBin = promotableBins.pop();\n\n        for (const bin of promotableBins) {\n          promotedBin.merge(bin, this.model.renameSignal.bind(this.model));\n        }\n\n        this.setModified();\n\n        if (node instanceof BinNode) {\n          node.merge(promotedBin, this.model.renameSignal.bind(this.model));\n        } else {\n          promotedBin.swapWithParent();\n        }\n      }\n\n      if (remainingBins.length > 1) {\n        const remainingBin = remainingBins.pop();\n\n        for (const bin of remainingBins) {\n          remainingBin.merge(bin, this.model.renameSignal.bind(this.model));\n        }\n\n        this.setModified();\n      }\n    }\n\n  }\n  /**\n   * This optimizer takes output nodes that are at a fork and moves them before the fork.\n   *\n   * The algorithm iterates over the children and tries to find the last output node in a chain of output nodes.\n   * It then moves all output nodes before that main output node. All other children (and the children of the output nodes)\n   * are inserted after the main output node.\n   */\n\n  class MergeOutputs extends BottomUpOptimizer {\n    run(node) {\n      const children = [...node.children];\n      const hasOutputChild = some(children, child => child instanceof OutputNode);\n\n      if (!hasOutputChild || node.numChildren() <= 1) {\n        return;\n      }\n\n      const otherChildren = []; // The output node we will connect all other nodes to.\n      // Output nodes will be added before the new node, other nodes after.\n\n      let mainOutput;\n\n      for (const child of children) {\n        if (child instanceof OutputNode) {\n          let lastOutput = child;\n\n          while (lastOutput.numChildren() === 1) {\n            const [theChild] = lastOutput.children;\n\n            if (theChild instanceof OutputNode) {\n              lastOutput = theChild;\n            } else {\n              break;\n            }\n          }\n\n          otherChildren.push(...lastOutput.children);\n\n          if (mainOutput) {\n            // Move the output nodes before the mainOutput. We do this by setting\n            // the parent of the first not to the parent of the main output and\n            // the main output's parent to the last output.\n            // note: the child is the first output\n            node.removeChild(child);\n            child.parent = mainOutput.parent;\n            mainOutput.parent.removeChild(mainOutput);\n            mainOutput.parent = lastOutput;\n            this.setModified();\n          } else {\n            mainOutput = lastOutput;\n          }\n        } else {\n          otherChildren.push(child);\n        }\n      }\n\n      if (otherChildren.length) {\n        this.setModified();\n\n        for (const child of otherChildren) {\n          child.parent.removeChild(child);\n          child.parent = mainOutput;\n        }\n      }\n    }\n\n  }\n\n  /**\n   * A class for the join aggregate transform nodes.\n   */\n\n  class JoinAggregateTransformNode extends DataFlowNode {\n    clone() {\n      return new JoinAggregateTransformNode(null, duplicate(this.transform));\n    }\n\n    constructor(parent, transform) {\n      super(parent);\n      this.transform = transform;\n    }\n\n    addDimensions(fields) {\n      this.transform.groupby = unique(this.transform.groupby.concat(fields), d => d);\n    }\n\n    dependentFields() {\n      const out = new Set();\n\n      if (this.transform.groupby) {\n        this.transform.groupby.forEach(out.add, out);\n      }\n\n      this.transform.joinaggregate.map(w => w.field).filter(f => f !== undefined).forEach(out.add, out);\n      return out;\n    }\n\n    producedFields() {\n      return new Set(this.transform.joinaggregate.map(this.getDefaultName));\n    }\n\n    getDefaultName(joinAggregateFieldDef) {\n      var _joinAggregateFieldDe;\n\n      return (_joinAggregateFieldDe = joinAggregateFieldDef.as) !== null && _joinAggregateFieldDe !== void 0 ? _joinAggregateFieldDe : vgField(joinAggregateFieldDef);\n    }\n\n    hash() {\n      return \"JoinAggregateTransform \".concat(hash(this.transform));\n    }\n\n    assemble() {\n      const fields = [];\n      const ops = [];\n      const as = [];\n\n      for (const joinaggregate of this.transform.joinaggregate) {\n        ops.push(joinaggregate.op);\n        as.push(this.getDefaultName(joinaggregate));\n        fields.push(joinaggregate.field === undefined ? null : joinaggregate.field);\n      }\n\n      const groupby = this.transform.groupby;\n      return {\n        type: 'joinaggregate',\n        as,\n        ops,\n        fields,\n        ...(groupby !== undefined ? {\n          groupby\n        } : {})\n      };\n    }\n\n  }\n\n  function getStackByFields(model) {\n    return model.stack.stackBy.reduce((fields, by) => {\n      const fieldDef = by.fieldDef;\n\n      const _field = vgField(fieldDef);\n\n      if (_field) {\n        fields.push(_field);\n      }\n\n      return fields;\n    }, []);\n  }\n\n  function isValidAsArray(as) {\n    return isArray(as) && as.every(s => isString(s)) && as.length > 1;\n  }\n\n  class StackNode extends DataFlowNode {\n    clone() {\n      return new StackNode(null, duplicate(this._stack));\n    }\n\n    constructor(parent, stack) {\n      super(parent);\n\n      _defineProperty(this, \"_stack\", void 0);\n\n      this._stack = stack;\n    }\n\n    static makeFromTransform(parent, stackTransform) {\n      const {\n        stack,\n        groupby,\n        as,\n        offset = 'zero'\n      } = stackTransform;\n      const sortFields = [];\n      const sortOrder = [];\n\n      if (stackTransform.sort !== undefined) {\n        for (const sortField of stackTransform.sort) {\n          sortFields.push(sortField.field);\n          sortOrder.push(getFirstDefined(sortField.order, 'ascending'));\n        }\n      }\n\n      const sort = {\n        field: sortFields,\n        order: sortOrder\n      };\n      let normalizedAs;\n\n      if (isValidAsArray(as)) {\n        normalizedAs = as;\n      } else if (isString(as)) {\n        normalizedAs = [as, as + '_end'];\n      } else {\n        normalizedAs = [stackTransform.stack + '_start', stackTransform.stack + '_end'];\n      }\n\n      return new StackNode(parent, {\n        stackField: stack,\n        groupby,\n        offset,\n        sort,\n        facetby: [],\n        as: normalizedAs\n      });\n    }\n\n    static makeFromEncoding(parent, model) {\n      const stackProperties = model.stack;\n      const {\n        encoding\n      } = model;\n\n      if (!stackProperties) {\n        return null;\n      }\n\n      const {\n        groupbyChannel,\n        fieldChannel,\n        offset,\n        impute\n      } = stackProperties;\n      let dimensionFieldDef;\n\n      if (groupbyChannel) {\n        const cDef = encoding[groupbyChannel];\n        dimensionFieldDef = getFieldDef(cDef); // Fair to cast as groupByChannel is always either x or y\n      }\n\n      const stackby = getStackByFields(model);\n      const orderDef = model.encoding.order;\n      let sort;\n\n      if (isArray(orderDef) || isFieldDef(orderDef)) {\n        sort = sortParams(orderDef);\n      } else {\n        // default = descending by stackFields\n        // FIXME is the default here correct for binned fields?\n        sort = stackby.reduce((s, field) => {\n          s.field.push(field);\n          s.order.push(fieldChannel === 'y' ? 'descending' : 'ascending');\n          return s;\n        }, {\n          field: [],\n          order: []\n        });\n      }\n\n      return new StackNode(parent, {\n        dimensionFieldDef,\n        stackField: model.vgField(fieldChannel),\n        facetby: [],\n        stackby,\n        sort,\n        offset,\n        impute,\n        as: [model.vgField(fieldChannel, {\n          suffix: 'start',\n          forAs: true\n        }), model.vgField(fieldChannel, {\n          suffix: 'end',\n          forAs: true\n        })]\n      });\n    }\n\n    get stack() {\n      return this._stack;\n    }\n\n    addDimensions(fields) {\n      this._stack.facetby.push(...fields);\n    }\n\n    dependentFields() {\n      const out = new Set();\n      out.add(this._stack.stackField);\n      this.getGroupbyFields().forEach(out.add, out);\n\n      this._stack.facetby.forEach(out.add, out);\n\n      this._stack.sort.field.forEach(out.add, out);\n\n      return out;\n    }\n\n    producedFields() {\n      return new Set(this._stack.as);\n    }\n\n    hash() {\n      return \"Stack \".concat(hash(this._stack));\n    }\n\n    getGroupbyFields() {\n      const {\n        dimensionFieldDef,\n        impute,\n        groupby\n      } = this._stack;\n\n      if (dimensionFieldDef) {\n        if (dimensionFieldDef.bin) {\n          if (impute) {\n            // For binned group by field with impute, we calculate bin_mid\n            // as we cannot impute two fields simultaneously\n            return [vgField(dimensionFieldDef, {\n              binSuffix: 'mid'\n            })];\n          }\n\n          return [// For binned group by field without impute, we need both bin (start) and bin_end\n          vgField(dimensionFieldDef, {}), vgField(dimensionFieldDef, {\n            binSuffix: 'end'\n          })];\n        }\n\n        return [vgField(dimensionFieldDef)];\n      }\n\n      return groupby !== null && groupby !== void 0 ? groupby : [];\n    }\n\n    assemble() {\n      const transform = [];\n      const {\n        facetby,\n        dimensionFieldDef,\n        stackField: field,\n        stackby,\n        sort,\n        offset,\n        impute,\n        as\n      } = this._stack; // Impute\n\n      if (impute && dimensionFieldDef) {\n        const {\n          band = 0.5,\n          bin\n        } = dimensionFieldDef;\n\n        if (bin) {\n          // As we can only impute one field at a time, we need to calculate\n          // mid point for a binned field\n          transform.push({\n            type: 'formula',\n            expr: \"\".concat(band, \"*\") + vgField(dimensionFieldDef, {\n              expr: 'datum'\n            }) + \"+\".concat(1 - band, \"*\") + vgField(dimensionFieldDef, {\n              expr: 'datum',\n              binSuffix: 'end'\n            }),\n            as: vgField(dimensionFieldDef, {\n              binSuffix: 'mid',\n              forAs: true\n            })\n          });\n        }\n\n        transform.push({\n          type: 'impute',\n          field,\n          groupby: [...stackby, ...facetby],\n          key: vgField(dimensionFieldDef, {\n            binSuffix: 'mid'\n          }),\n          method: 'value',\n          value: 0\n        });\n      } // Stack\n\n\n      transform.push({\n        type: 'stack',\n        groupby: [...this.getGroupbyFields(), ...facetby],\n        field,\n        sort,\n        as,\n        offset\n      });\n      return transform;\n    }\n\n  }\n\n  /**\n   * A class for the window transform nodes\n   */\n\n  class WindowTransformNode extends DataFlowNode {\n    clone() {\n      return new WindowTransformNode(null, duplicate(this.transform));\n    }\n\n    constructor(parent, transform) {\n      super(parent);\n      this.transform = transform;\n    }\n\n    addDimensions(fields) {\n      this.transform.groupby = unique(this.transform.groupby.concat(fields), d => d);\n    }\n\n    dependentFields() {\n      var _this$transform$group, _this$transform$sort;\n\n      const out = new Set();\n      ((_this$transform$group = this.transform.groupby) !== null && _this$transform$group !== void 0 ? _this$transform$group : []).forEach(out.add, out);\n      ((_this$transform$sort = this.transform.sort) !== null && _this$transform$sort !== void 0 ? _this$transform$sort : []).forEach(m => out.add(m.field));\n      this.transform.window.map(w => w.field).filter(f => f !== undefined).forEach(out.add, out);\n      return out;\n    }\n\n    producedFields() {\n      return new Set(this.transform.window.map(this.getDefaultName));\n    }\n\n    getDefaultName(windowFieldDef) {\n      var _windowFieldDef$as;\n\n      return (_windowFieldDef$as = windowFieldDef.as) !== null && _windowFieldDef$as !== void 0 ? _windowFieldDef$as : vgField(windowFieldDef);\n    }\n\n    hash() {\n      return \"WindowTransform \".concat(hash(this.transform));\n    }\n\n    assemble() {\n      const fields = [];\n      const ops = [];\n      const as = [];\n      const params = [];\n\n      for (const window of this.transform.window) {\n        ops.push(window.op);\n        as.push(this.getDefaultName(window));\n        params.push(window.param === undefined ? null : window.param);\n        fields.push(window.field === undefined ? null : window.field);\n      }\n\n      const frame = this.transform.frame;\n      const groupby = this.transform.groupby;\n\n      if (frame && frame[0] === null && frame[1] === null && ops.every(o => isAggregateOp(o))) {\n        // when the window does not rely on any particular window ops or frame, switch to a simpler and more efficient joinaggregate\n        return {\n          type: 'joinaggregate',\n          as,\n          ops: ops,\n          fields,\n          ...(groupby !== undefined ? {\n            groupby\n          } : {})\n        };\n      }\n\n      const sortFields = [];\n      const sortOrder = [];\n\n      if (this.transform.sort !== undefined) {\n        for (const sortField of this.transform.sort) {\n          var _sortField$order;\n\n          sortFields.push(sortField.field);\n          sortOrder.push((_sortField$order = sortField.order) !== null && _sortField$order !== void 0 ? _sortField$order : 'ascending');\n        }\n      }\n\n      const sort = {\n        field: sortFields,\n        order: sortOrder\n      };\n      const ignorePeers = this.transform.ignorePeers;\n      return {\n        type: 'window',\n        params,\n        as,\n        ops,\n        fields,\n        sort,\n        ...(ignorePeers !== undefined ? {\n          ignorePeers\n        } : {}),\n        ...(groupby !== undefined ? {\n          groupby\n        } : {}),\n        ...(frame !== undefined ? {\n          frame\n        } : {})\n      };\n    }\n\n  }\n\n  /**\n   * Clones the subtree and ignores output nodes except for the leaves, which are renamed.\n   */\n\n  function cloneSubtree(facet) {\n    function clone(node) {\n      if (!(node instanceof FacetNode)) {\n        const copy = node.clone();\n\n        if (copy instanceof OutputNode) {\n          const newName = FACET_SCALE_PREFIX + copy.getSource();\n          copy.setSource(newName);\n          facet.model.component.data.outputNodes[newName] = copy;\n        } else if (copy instanceof AggregateNode || copy instanceof StackNode || copy instanceof WindowTransformNode || copy instanceof JoinAggregateTransformNode) {\n          copy.addDimensions(facet.fields);\n        }\n\n        for (const n of node.children.flatMap(clone)) {\n          n.parent = copy;\n        }\n\n        return [copy];\n      }\n\n      return node.children.flatMap(clone);\n    }\n\n    return clone;\n  }\n  /**\n   * Move facet nodes down to the next fork or output node. Also pull the main output with the facet node.\n   * After moving down the facet node, make a copy of the subtree and make it a child of the main output.\n   */\n\n\n  function moveFacetDown(node) {\n    if (node instanceof FacetNode) {\n      if (node.numChildren() === 1 && !(node.children[0] instanceof OutputNode)) {\n        // move down until we hit a fork or output node\n        const child = node.children[0];\n\n        if (child instanceof AggregateNode || child instanceof StackNode || child instanceof WindowTransformNode || child instanceof JoinAggregateTransformNode) {\n          child.addDimensions(node.fields);\n        }\n\n        child.swapWithParent();\n        moveFacetDown(node);\n      } else {\n        // move main to facet\n        const facetMain = node.model.component.data.main;\n        moveMainDownToFacet(facetMain); // replicate the subtree and place it before the facet's main node\n\n        const cloner = cloneSubtree(node);\n        const copy = node.children.map(cloner).flat();\n\n        for (const c of copy) {\n          c.parent = facetMain;\n        }\n      }\n    } else {\n      node.children.map(moveFacetDown);\n    }\n  }\n\n  function moveMainDownToFacet(node) {\n    if (node instanceof OutputNode && node.type === DataSourceType.Main) {\n      if (node.numChildren() === 1) {\n        const child = node.children[0];\n\n        if (!(child instanceof FacetNode)) {\n          child.swapWithParent();\n          moveMainDownToFacet(node);\n        }\n      }\n    }\n  }\n\n  const FACET_SCALE_PREFIX = 'scale_';\n  const MAX_OPTIMIZATION_RUNS = 5;\n  /**\n   * Iterates over a dataflow graph and checks whether all links are consistent.\n   */\n\n  function checkLinks(nodes) {\n    for (const node of nodes) {\n      for (const child of node.children) {\n        if (child.parent !== node) {\n          // log.error('Dataflow graph is inconsistent.', node, child);\n          return false;\n        }\n      }\n\n      if (!checkLinks(node.children)) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n  /**\n   * Run the specified optimizer on the provided nodes.\n   *\n   * @param optimizer The optimizer instance to run.\n   * @param nodes A set of nodes to optimize.\n   */\n\n  function runOptimizer(optimizer, nodes) {\n    let modified = false;\n\n    for (const node of nodes) {\n      modified = optimizer.optimize(node) || modified;\n    }\n\n    return modified;\n  }\n\n  function optimizationDataflowHelper(dataComponent, model, firstPass) {\n    let roots = dataComponent.sources;\n    let modified = false;\n    modified = runOptimizer(new RemoveUnnecessaryOutputNodes(), roots) || modified;\n    modified = runOptimizer(new RemoveUnnecessaryIdentifierNodes(model), roots) || modified; // remove source nodes that don't have any children because they also don't have output nodes\n\n    roots = roots.filter(r => r.numChildren() > 0);\n    modified = runOptimizer(new RemoveUnusedSubtrees(), roots) || modified;\n    roots = roots.filter(r => r.numChildren() > 0);\n\n    if (!firstPass) {\n      // Only run these optimizations after the optimizer has moved down the facet node.\n      // With this change, we can be more aggressive in the optimizations.\n      modified = runOptimizer(new MoveParseUp(), roots) || modified;\n      modified = runOptimizer(new MergeBins(model), roots) || modified;\n      modified = runOptimizer(new RemoveDuplicateTimeUnits(), roots) || modified;\n      modified = runOptimizer(new MergeParse(), roots) || modified;\n      modified = runOptimizer(new MergeAggregates(), roots) || modified;\n      modified = runOptimizer(new MergeTimeUnits(), roots) || modified;\n      modified = runOptimizer(new MergeIdenticalNodes(), roots) || modified;\n      modified = runOptimizer(new MergeOutputs(), roots) || modified;\n    }\n\n    dataComponent.sources = roots;\n    return modified;\n  }\n  /**\n   * Optimizes the dataflow of the passed in data component.\n   */\n\n\n  function optimizeDataflow(data, model) {\n    // check before optimizations\n    checkLinks(data.sources);\n    let firstPassCounter = 0;\n    let secondPassCounter = 0;\n\n    for (let i = 0; i < MAX_OPTIMIZATION_RUNS; i++) {\n      if (!optimizationDataflowHelper(data, model, true)) {\n        break;\n      }\n\n      firstPassCounter++;\n    } // move facets down and make a copy of the subtree so that we can have scales at the top level\n\n\n    data.sources.map(moveFacetDown);\n\n    for (let i = 0; i < MAX_OPTIMIZATION_RUNS; i++) {\n      if (!optimizationDataflowHelper(data, model, false)) {\n        break;\n      }\n\n      secondPassCounter++;\n    } // check after optimizations\n\n\n    checkLinks(data.sources);\n\n    if (Math.max(firstPassCounter, secondPassCounter) === MAX_OPTIMIZATION_RUNS) {\n      warn(\"Maximum optimization runs(\".concat(MAX_OPTIMIZATION_RUNS, \") reached.\"));\n    }\n  }\n\n  /**\n   * A class that behaves like a SignalRef but lazily generates the signal.\n   * The provided generator function should use `Model.getSignalName` to use the correct signal name.\n   */\n  class SignalRefWrapper {\n    constructor(exprGenerator) {\n      _defineProperty(this, \"signal\", void 0);\n\n      Object.defineProperty(this, 'signal', {\n        enumerable: true,\n        get: exprGenerator\n      });\n    }\n\n    // for ts\n    static fromName(rename, signalName) {\n      return new SignalRefWrapper(() => rename(signalName));\n    }\n\n  }\n\n  function parseScaleDomain(model) {\n    if (isUnitModel(model)) {\n      parseUnitScaleDomain(model);\n    } else {\n      parseNonUnitScaleDomain(model);\n    }\n  }\n\n  function parseUnitScaleDomain(model) {\n    const localScaleComponents = model.component.scales;\n\n    for (const channel of keys(localScaleComponents)) {\n      const domains = parseDomainForChannel(model, channel);\n      const localScaleCmpt = localScaleComponents[channel];\n      localScaleCmpt.setWithExplicit('domains', domains);\n      parseSelectionDomain(model, channel);\n\n      if (model.component.data.isFaceted) {\n        // get resolve from closest facet parent as this decides whether we need to refer to cloned subtree or not\n        let facetParent = model;\n\n        while (!isFacetModel(facetParent) && facetParent.parent) {\n          facetParent = facetParent.parent;\n        }\n\n        const resolve = facetParent.component.resolve.scale[channel];\n\n        if (resolve === 'shared') {\n          for (const domain of domains.value) {\n            // Replace the scale domain with data output from a cloned subtree after the facet.\n            if (isDataRefDomain(domain)) {\n              // use data from cloned subtree (which is the same as data but with a prefix added once)\n              domain.data = FACET_SCALE_PREFIX + domain.data.replace(FACET_SCALE_PREFIX, '');\n            }\n          }\n        }\n      }\n    }\n  }\n\n  function parseNonUnitScaleDomain(model) {\n    for (const child of model.children) {\n      parseScaleDomain(child);\n    }\n\n    const localScaleComponents = model.component.scales;\n\n    for (const channel of keys(localScaleComponents)) {\n      let domains;\n      let selectionExtent = null;\n\n      for (const child of model.children) {\n        const childComponent = child.component.scales[channel];\n\n        if (childComponent) {\n          if (domains === undefined) {\n            domains = childComponent.getWithExplicit('domains');\n          } else {\n            domains = mergeValuesWithExplicit(domains, childComponent.getWithExplicit('domains'), 'domains', 'scale', domainsTieBreaker);\n          }\n\n          const se = childComponent.get('selectionExtent');\n\n          if (selectionExtent && se && selectionExtent.selection !== se.selection) {\n            warn(NEEDS_SAME_SELECTION);\n          }\n\n          selectionExtent = se;\n        }\n      }\n\n      localScaleComponents[channel].setWithExplicit('domains', domains);\n\n      if (selectionExtent) {\n        localScaleComponents[channel].set('selectionExtent', selectionExtent, true);\n      }\n    }\n  }\n  /**\n   * Remove unaggregated domain if it is not applicable\n   * Add unaggregated domain if domain is not specified and config.scale.useUnaggregatedDomain is true.\n   */\n\n\n  function normalizeUnaggregatedDomain(domain, fieldDef, scaleType, scaleConfig) {\n    if (domain === 'unaggregated') {\n      const {\n        valid,\n        reason\n      } = canUseUnaggregatedDomain(fieldDef, scaleType);\n\n      if (!valid) {\n        warn(reason);\n        return undefined;\n      }\n    } else if (domain === undefined && scaleConfig.useUnaggregatedDomain) {\n      // Apply config if domain is not specified.\n      const {\n        valid\n      } = canUseUnaggregatedDomain(fieldDef, scaleType);\n\n      if (valid) {\n        return 'unaggregated';\n      }\n    }\n\n    return domain;\n  }\n\n  function parseDomainForChannel(model, channel) {\n    const scaleType = model.getScaleComponent(channel).get('type');\n    const {\n      encoding\n    } = model;\n    const domain = normalizeUnaggregatedDomain(model.scaleDomain(channel), model.typedFieldDef(channel), scaleType, model.config.scale);\n\n    if (domain !== model.scaleDomain(channel)) {\n      model.specifiedScales[channel] = { ...model.specifiedScales[channel],\n        domain\n      };\n    } // If channel is either X or Y then union them with X2 & Y2 if they exist\n\n\n    if (channel === 'x' && getFieldOrDatumDef(encoding.x2)) {\n      if (getFieldOrDatumDef(encoding.x)) {\n        return mergeValuesWithExplicit(parseSingleChannelDomain(scaleType, domain, model, 'x'), parseSingleChannelDomain(scaleType, domain, model, 'x2'), 'domain', 'scale', domainsTieBreaker);\n      } else {\n        return parseSingleChannelDomain(scaleType, domain, model, 'x2');\n      }\n    } else if (channel === 'y' && getFieldOrDatumDef(encoding.y2)) {\n      if (getFieldOrDatumDef(encoding.y)) {\n        return mergeValuesWithExplicit(parseSingleChannelDomain(scaleType, domain, model, 'y'), parseSingleChannelDomain(scaleType, domain, model, 'y2'), 'domain', 'scale', domainsTieBreaker);\n      } else {\n        return parseSingleChannelDomain(scaleType, domain, model, 'y2');\n      }\n    }\n\n    return parseSingleChannelDomain(scaleType, domain, model, channel);\n  }\n\n  function mapDomainToDataSignal(domain, type, timeUnit) {\n    return domain.map(v => {\n      const data = valueExpr(v, {\n        timeUnit,\n        type\n      });\n      return {\n        signal: \"{data: \".concat(data, \"}\")\n      };\n    });\n  }\n\n  function convertDomainIfItIsDateTime(domain, type, timeUnit) {\n    var _normalizeTimeUnit;\n\n    // explicit value\n    const normalizedTimeUnit = (_normalizeTimeUnit = normalizeTimeUnit(timeUnit)) === null || _normalizeTimeUnit === void 0 ? void 0 : _normalizeTimeUnit.unit;\n\n    if (type === 'temporal' || normalizedTimeUnit) {\n      return mapDomainToDataSignal(domain, type, normalizedTimeUnit);\n    }\n\n    return [domain]; // Date time won't make sense\n  }\n\n  function parseSingleChannelDomain(scaleType, domain, model, channel) {\n    const {\n      encoding\n    } = model;\n    const fieldOrDatumDef = getFieldOrDatumDef(encoding[channel]);\n    const {\n      type\n    } = fieldOrDatumDef;\n    const timeUnit = fieldOrDatumDef['timeUnit'];\n\n    if (isDomainUnionWith(domain)) {\n      const defaultDomain = parseSingleChannelDomain(scaleType, undefined, model, channel);\n      const unionWith = convertDomainIfItIsDateTime(domain.unionWith, type, timeUnit);\n      return makeExplicit([...defaultDomain.value, ...unionWith]);\n    } else if (isSignalRef(domain)) {\n      return makeExplicit([domain]);\n    } else if (domain && domain !== 'unaggregated' && !isSelectionDomain(domain)) {\n      return makeExplicit(convertDomainIfItIsDateTime(domain, type, timeUnit));\n    }\n\n    const stack = model.stack;\n\n    if (stack && channel === stack.fieldChannel) {\n      if (stack.offset === 'normalize') {\n        return makeImplicit([[0, 1]]);\n      }\n\n      const data = model.requestDataName(DataSourceType.Main);\n      return makeImplicit([{\n        data,\n        field: model.vgField(channel, {\n          suffix: 'start'\n        })\n      }, {\n        data,\n        field: model.vgField(channel, {\n          suffix: 'end'\n        })\n      }]);\n    }\n\n    const sort = isScaleChannel(channel) && isFieldDef(fieldOrDatumDef) ? domainSort(model, channel, scaleType) : undefined;\n\n    if (isDatumDef(fieldOrDatumDef)) {\n      const d = convertDomainIfItIsDateTime([fieldOrDatumDef.datum], type, timeUnit);\n      return makeImplicit(d);\n    }\n\n    const fieldDef = fieldOrDatumDef; // now we can be sure it's a fieldDef\n\n    if (domain === 'unaggregated') {\n      const data = model.requestDataName(DataSourceType.Main);\n      const {\n        field\n      } = fieldOrDatumDef;\n      return makeImplicit([{\n        data,\n        field: vgField({\n          field,\n          aggregate: 'min'\n        })\n      }, {\n        data,\n        field: vgField({\n          field,\n          aggregate: 'max'\n        })\n      }]);\n    } else if (isBinning(fieldDef.bin)) {\n      if (hasDiscreteDomain(scaleType)) {\n        if (scaleType === 'bin-ordinal') {\n          // we can omit the domain as it is inferred from the `bins` property\n          return makeImplicit([]);\n        } // ordinal bin scale takes domain from bin_range, ordered by bin start\n        // This is useful for both axis-based scale (x/y) and legend-based scale (other channels).\n\n\n        return makeImplicit([{\n          // If sort by aggregation of a specified sort field, we need to use RAW table,\n          // so we can aggregate values for the scale independently from the main aggregation.\n          data: isBoolean$1(sort) ? model.requestDataName(DataSourceType.Main) : model.requestDataName(DataSourceType.Raw),\n          // Use range if we added it and the scale does not support computing a range as a signal.\n          field: model.vgField(channel, binRequiresRange(fieldDef, channel) ? {\n            binSuffix: 'range'\n          } : {}),\n          // we have to use a sort object if sort = true to make the sort correct by bin start\n          sort: sort === true || !isObject(sort) ? {\n            field: model.vgField(channel, {}),\n            op: 'min' // min or max doesn't matter since we sort by the start of the bin range\n\n          } : sort\n        }]);\n      } else {\n        // continuous scales\n        const {\n          bin\n        } = fieldDef;\n\n        if (isBinning(bin)) {\n          const binSignal = getBinSignalName(model, fieldDef.field, bin);\n          return makeImplicit([new SignalRefWrapper(() => {\n            const signal = model.getSignalName(binSignal);\n            return \"[\".concat(signal, \".start, \").concat(signal, \".stop]\");\n          })]);\n        } else {\n          return makeImplicit([{\n            data: model.requestDataName(DataSourceType.Main),\n            field: model.vgField(channel, {})\n          }]);\n        }\n      }\n    } else if (fieldDef.timeUnit && contains(['time', 'utc'], scaleType) && hasBand(channel, fieldDef, isUnitModel(model) ? model.encoding[getSecondaryRangeChannel(channel)] : undefined, model.stack, model.markDef, model.config)) {\n      const data = model.requestDataName(DataSourceType.Main);\n      return makeImplicit([{\n        data,\n        field: model.vgField(channel)\n      }, {\n        data,\n        field: model.vgField(channel, {\n          suffix: 'end'\n        })\n      }]);\n    } else if (sort) {\n      return makeImplicit([{\n        // If sort by aggregation of a specified sort field, we need to use RAW table,\n        // so we can aggregate values for the scale independently from the main aggregation.\n        data: isBoolean$1(sort) ? model.requestDataName(DataSourceType.Main) : model.requestDataName(DataSourceType.Raw),\n        field: model.vgField(channel),\n        sort: sort\n      }]);\n    } else {\n      return makeImplicit([{\n        data: model.requestDataName(DataSourceType.Main),\n        field: model.vgField(channel)\n      }]);\n    }\n  }\n\n  function normalizeSortField(sort, isStackedMeasure) {\n    const {\n      op,\n      field,\n      order\n    } = sort;\n    return {\n      // Apply default op\n      op: op !== null && op !== void 0 ? op : isStackedMeasure ? 'sum' : DEFAULT_SORT_OP,\n      // flatten nested fields\n      ...(field ? {\n        field: replacePathInField(field)\n      } : {}),\n      ...(order ? {\n        order\n      } : {})\n    };\n  }\n\n  function parseSelectionDomain(model, channel) {\n    var _model$fieldDef;\n\n    const scale = model.component.scales[channel];\n    const spec = model.specifiedScales[channel].domain;\n    const bin = (_model$fieldDef = model.fieldDef(channel)) === null || _model$fieldDef === void 0 ? void 0 : _model$fieldDef.bin;\n    const domain = isSelectionDomain(spec) && spec;\n    const extent = isBinParams(bin) && isSelectionExtent(bin.extent) && bin.extent;\n\n    if (domain || extent) {\n      // As scale parsing occurs before selection parsing, we cannot set\n      // domainRaw directly. So instead, we store the selectionExtent on\n      // the scale component, and then add domainRaw during scale assembly.\n      scale.set('selectionExtent', domain !== null && domain !== void 0 ? domain : extent, true);\n    }\n  }\n\n  function domainSort(model, channel, scaleType) {\n    if (!hasDiscreteDomain(scaleType)) {\n      return undefined;\n    } // save to cast as the only exception is the geojson type for shape, which would not generate a scale\n\n\n    const fieldDef = model.fieldDef(channel);\n    const sort = fieldDef.sort; // if the sort is specified with array, use the derived sort index field\n\n    if (isSortArray(sort)) {\n      return {\n        op: 'min',\n        field: sortArrayIndexField(fieldDef, channel),\n        order: 'ascending'\n      };\n    }\n\n    const {\n      stack\n    } = model;\n    const stackDimensions = stack ? [...(stack.groupbyField ? [stack.groupbyField] : []), ...stack.stackBy.map(s => s.fieldDef.field)] : undefined; // Sorted based on an aggregate calculation over a specified sort field (only for ordinal scale)\n\n    if (isSortField(sort)) {\n      const isStackedMeasure = stack && !contains(stackDimensions, sort.field);\n      return normalizeSortField(sort, isStackedMeasure);\n    } else if (isSortByEncoding(sort)) {\n      const {\n        encoding,\n        order\n      } = sort;\n      const fieldDefToSortBy = model.fieldDef(encoding);\n      const {\n        aggregate,\n        field\n      } = fieldDefToSortBy;\n      const isStackedMeasure = stack && !contains(stackDimensions, field);\n\n      if (isArgminDef(aggregate) || isArgmaxDef(aggregate)) {\n        return normalizeSortField({\n          field: vgField(fieldDefToSortBy),\n          order\n        }, isStackedMeasure);\n      } else if (isAggregateOp(aggregate) || !aggregate) {\n        return normalizeSortField({\n          op: aggregate,\n          // can't be argmin/argmax since we don't support them in encoding field def\n          field,\n          order\n        }, isStackedMeasure);\n      }\n    } else if (sort === 'descending') {\n      return {\n        op: 'min',\n        field: model.vgField(channel),\n        order: 'descending'\n      };\n    } else if (contains(['ascending', undefined\n    /* default =ascending*/\n    ], sort)) {\n      return true;\n    } // sort == null\n\n\n    return undefined;\n  }\n  /**\n   * Determine if a scale can use unaggregated domain.\n   * @return {Boolean} Returns true if all of the following conditions apply:\n   * 1. `scale.domain` is `unaggregated`\n   * 2. Aggregation function is not `count` or `sum`\n   * 3. The scale is quantitative or time scale.\n   */\n\n  function canUseUnaggregatedDomain(fieldDef, scaleType) {\n    const {\n      aggregate,\n      type\n    } = fieldDef;\n\n    if (!aggregate) {\n      return {\n        valid: false,\n        reason: unaggregateDomainHasNoEffectForRawField(fieldDef)\n      };\n    }\n\n    if (isString(aggregate) && !SHARED_DOMAIN_OP_INDEX[aggregate]) {\n      return {\n        valid: false,\n        reason: unaggregateDomainWithNonSharedDomainOp(aggregate)\n      };\n    }\n\n    if (type === 'quantitative') {\n      if (scaleType === 'log') {\n        return {\n          valid: false,\n          reason: unaggregatedDomainWithLogScale(fieldDef)\n        };\n      }\n    }\n\n    return {\n      valid: true\n    };\n  }\n  /**\n   * Tie breaker for mergeValuesWithExplicit for domains. We concat the specified values.\n   */\n\n  function domainsTieBreaker(v1, v2, property, propertyOf) {\n    if (v1.explicit && v2.explicit) {\n      warn(mergeConflictingDomainProperty(property, propertyOf, v1.value, v2.value));\n    } // If equal score, concat the domains so that we union them later.\n\n\n    return {\n      explicit: v1.explicit,\n      value: [...v1.value, ...v2.value]\n    };\n  }\n  /**\n   * Converts an array of domains to a single Vega scale domain.\n   */\n\n\n  function mergeDomains(domains) {\n    const uniqueDomains = unique(domains.map(domain => {\n      // ignore sort property when computing the unique domains\n      if (isDataRefDomain(domain)) {\n        const {\n          sort: _s,\n          ...domainWithoutSort\n        } = domain;\n        return domainWithoutSort;\n      }\n\n      return domain;\n    }), hash);\n    const sorts = unique(domains.map(d => {\n      if (isDataRefDomain(d)) {\n        const s = d.sort;\n\n        if (s !== undefined && !isBoolean$1(s)) {\n          if ('op' in s && s.op === 'count') {\n            // let's make sure that if op is count, we don't use a field\n            delete s.field;\n          }\n\n          if (s.order === 'ascending') {\n            // drop order: ascending as it is the default\n            delete s.order;\n          }\n        }\n\n        return s;\n      }\n\n      return undefined;\n    }).filter(s => s !== undefined), hash);\n\n    if (uniqueDomains.length === 0) {\n      return undefined;\n    } else if (uniqueDomains.length === 1) {\n      const domain = domains[0];\n\n      if (isDataRefDomain(domain) && sorts.length > 0) {\n        let sort = sorts[0];\n\n        if (sorts.length > 1) {\n          warn(MORE_THAN_ONE_SORT);\n          sort = true;\n        } else {\n          // Simplify domain sort by removing field and op when the field is the same as the domain field.\n          if (isObject(sort) && 'field' in sort) {\n            const sortField = sort.field;\n\n            if (domain.field === sortField) {\n              sort = sort.order ? {\n                order: sort.order\n              } : true;\n            }\n          }\n        }\n\n        return { ...domain,\n          sort\n        };\n      }\n\n      return domain;\n    } // only keep sort properties that work with unioned domains\n\n\n    const unionDomainSorts = unique(sorts.map(s => {\n      if (isBoolean$1(s) || !('op' in s) || isString(s.op) && s.op in MULTIDOMAIN_SORT_OP_INDEX) {\n        return s;\n      }\n\n      warn(domainSortDropped(s));\n      return true;\n    }), hash);\n    let sort;\n\n    if (unionDomainSorts.length === 1) {\n      sort = unionDomainSorts[0];\n    } else if (unionDomainSorts.length > 1) {\n      warn(MORE_THAN_ONE_SORT);\n      sort = true;\n    }\n\n    const allData = unique(domains.map(d => {\n      if (isDataRefDomain(d)) {\n        return d.data;\n      }\n\n      return null;\n    }), x => x);\n\n    if (allData.length === 1 && allData[0] !== null) {\n      // create a union domain of different fields with a single data source\n      const domain = {\n        data: allData[0],\n        fields: uniqueDomains.map(d => d.field),\n        ...(sort ? {\n          sort\n        } : {})\n      };\n      return domain;\n    }\n\n    return {\n      fields: uniqueDomains,\n      ...(sort ? {\n        sort\n      } : {})\n    };\n  }\n  /**\n   * Return a field if a scale uses a single field.\n   * Return `undefined` otherwise.\n   */\n\n  function getFieldFromDomain(domain) {\n    if (isDataRefDomain(domain) && isString(domain.field)) {\n      return domain.field;\n    } else if (isDataRefUnionedDomain(domain)) {\n      let field;\n\n      for (const nonUnionDomain of domain.fields) {\n        if (isDataRefDomain(nonUnionDomain) && isString(nonUnionDomain.field)) {\n          if (!field) {\n            field = nonUnionDomain.field;\n          } else if (field !== nonUnionDomain.field) {\n            warn(FACETED_INDEPENDENT_DIFFERENT_SOURCES);\n            return field;\n          }\n        }\n      }\n\n      warn(FACETED_INDEPENDENT_SAME_FIELDS_DIFFERENT_SOURCES);\n      return field;\n    } else if (isFieldRefUnionDomain(domain)) {\n      warn(FACETED_INDEPENDENT_SAME_SOURCE);\n      const field = domain.fields[0];\n      return isString(field) ? field : undefined;\n    }\n\n    return undefined;\n  }\n  function assembleDomain(model, channel) {\n    const scaleComponent = model.component.scales[channel];\n    const domains = scaleComponent.get('domains').map(domain => {\n      // Correct references to data as the original domain's data was determined\n      // in parseScale, which happens before parseData. Thus the original data\n      // reference can be incorrect.\n      if (isDataRefDomain(domain)) {\n        domain.data = model.lookupDataSource(domain.data);\n      }\n\n      return domain;\n    }); // domains is an array that has to be merged into a single vega domain\n\n    return mergeDomains(domains);\n  }\n\n  function assembleScales(model) {\n    if (isLayerModel(model) || isConcatModel(model)) {\n      // For concat and layer, include scales of children too\n      return model.children.reduce((scales, child) => {\n        return scales.concat(assembleScales(child));\n      }, assembleScalesForModel(model));\n    } else {\n      // For facet, child scales would not be included in the parent's scope.\n      // For unit, there is no child.\n      return assembleScalesForModel(model);\n    }\n  }\n  function assembleScalesForModel(model) {\n    return keys(model.component.scales).reduce((scales, channel) => {\n      const scaleComponent = model.component.scales[channel];\n\n      if (scaleComponent.merged) {\n        // Skipped merged scales\n        return scales;\n      }\n\n      const scale = scaleComponent.combine();\n      const {\n        name,\n        type,\n        selectionExtent,\n        domains: _d,\n        range: _r,\n        reverse,\n        ...otherScaleProps\n      } = scale;\n      const range = assembleScaleRange(scale.range, name, channel, model);\n      let domainRaw;\n\n      if (selectionExtent) {\n        domainRaw = assembleSelectionScaleDomain(model, selectionExtent);\n      }\n\n      const domain = assembleDomain(model, channel);\n      scales.push({\n        name,\n        type,\n        ...(domain ? {\n          domain\n        } : {}),\n        ...(domainRaw ? {\n          domainRaw\n        } : {}),\n        range,\n        ...(reverse !== undefined ? {\n          reverse: reverse\n        } : {}),\n        ...otherScaleProps\n      });\n      return scales;\n    }, []);\n  }\n  function assembleScaleRange(scaleRange, scaleName, channel, model) {\n    // add signals to x/y range\n    if (isXorY(channel)) {\n      if (isVgRangeStep(scaleRange)) {\n        // For width/height step, use a signal created in layout assemble instead of a constant step.\n        return {\n          step: {\n            signal: scaleName + '_step'\n          }\n        };\n      }\n    } else if (isObject(scaleRange) && isDataRefDomain(scaleRange)) {\n      return { ...scaleRange,\n        data: model.lookupDataSource(scaleRange.data)\n      };\n    }\n\n    return scaleRange;\n  }\n\n  /**\n   * All VgDomain property except domain.\n   * (We exclude domain as we have a special \"domains\" array that allow us merge them all at once in assemble.)\n   */\n\n  class ScaleComponent extends Split {\n    constructor(name, typeWithExplicit) {\n      super({}, // no initial explicit property\n      {\n        name\n      } // name as initial implicit property\n      );\n\n      _defineProperty(this, \"merged\", false);\n\n      this.setWithExplicit('type', typeWithExplicit);\n    }\n    /**\n     * Whether the scale definitely includes zero in the domain\n     */\n\n\n    domainDefinitelyIncludesZero() {\n      if (this.get('zero') !== false) {\n        return true;\n      }\n\n      return some(this.get('domains'), d => isArray(d) && d.length === 2 && d[0] <= 0 && d[1] >= 0);\n    }\n\n  }\n\n  const RANGE_PROPERTIES = ['range', 'scheme'];\n\n  function getSizeChannel$1(channel) {\n    return channel === 'x' ? 'width' : channel === 'y' ? 'height' : undefined;\n  }\n\n  function parseUnitScaleRange(model) {\n    const localScaleComponents = model.component.scales; // use SCALE_CHANNELS instead of scales[channel] to ensure that x, y come first!\n\n    for (const channel of SCALE_CHANNELS) {\n      const localScaleCmpt = localScaleComponents[channel];\n\n      if (!localScaleCmpt) {\n        continue;\n      }\n\n      const rangeWithExplicit = parseRangeForChannel(channel, model);\n      localScaleCmpt.setWithExplicit('range', rangeWithExplicit);\n    }\n  }\n\n  function getBinStepSignal(model, channel) {\n    const fieldDef = model.fieldDef(channel);\n\n    if (fieldDef && fieldDef.bin && isBinning(fieldDef.bin)) {\n      const binSignal = getBinSignalName(model, fieldDef.field, fieldDef.bin); // TODO: extract this to be range step signal\n\n      const sizeType = getSizeChannel$1(channel);\n      const sizeSignal = model.getName(sizeType);\n      return new SignalRefWrapper(() => {\n        const updatedName = model.getSignalName(binSignal);\n        const binCount = \"(\".concat(updatedName, \".stop - \").concat(updatedName, \".start) / \").concat(updatedName, \".step\");\n        return \"\".concat(model.getSignalName(sizeSignal), \" / (\").concat(binCount, \")\");\n      });\n    }\n\n    return undefined;\n  }\n  /**\n   * Return mixins that includes one of the Vega range types (explicit range, range.step, range.scheme).\n   */\n\n\n  function parseRangeForChannel(channel, model) {\n    const specifiedScale = model.specifiedScales[channel];\n    const {\n      size\n    } = model;\n    const mergedScaleCmpt = model.getScaleComponent(channel);\n    const scaleType = mergedScaleCmpt.get('type'); // Check if any of the range properties is specified.\n    // If so, check if it is compatible and make sure that we only output one of the properties\n\n    for (const property of RANGE_PROPERTIES) {\n      if (specifiedScale[property] !== undefined) {\n        const supportedByScaleType = scaleTypeSupportProperty(scaleType, property);\n        const channelIncompatability = channelScalePropertyIncompatability(channel, property);\n\n        if (!supportedByScaleType) {\n          warn(scalePropertyNotWorkWithScaleType(scaleType, property, channel));\n        } else if (channelIncompatability) {\n          // channel\n          warn(channelIncompatability);\n        } else {\n          switch (property) {\n            case 'range':\n              {\n                const range = specifiedScale.range;\n\n                if (isArray(range)) {\n                  if (isXorY(channel)) {\n                    return makeExplicit(range.map(v => {\n                      if (v === 'width' || v === 'height') {\n                        // get signal for width/height\n                        // Just like default range logic below, we use SignalRefWrapper to account for potential merges and renames.\n                        const sizeSignal = model.getName(v);\n                        const getSignalName = model.getSignalName.bind(model);\n                        return SignalRefWrapper.fromName(getSignalName, sizeSignal);\n                      }\n\n                      return v;\n                    }));\n                  }\n                } else if (isObject(range)) {\n                  return makeExplicit({\n                    data: model.requestDataName(DataSourceType.Main),\n                    field: range.field,\n                    sort: {\n                      op: 'min',\n                      field: model.vgField(channel)\n                    }\n                  });\n                }\n\n                return makeExplicit(range);\n              }\n\n            case 'scheme':\n              return makeExplicit(parseScheme(specifiedScale[property]));\n          }\n        }\n      }\n    }\n\n    if (channel === X || channel === Y) {\n      const sizeChannel = channel === X ? 'width' : 'height';\n      const sizeValue = size[sizeChannel];\n\n      if (isStep(sizeValue)) {\n        if (hasDiscreteDomain(scaleType)) {\n          return makeExplicit({\n            step: sizeValue.step\n          });\n        } else {\n          warn(stepDropped(sizeChannel));\n        }\n      }\n    }\n\n    const {\n      rangeMin,\n      rangeMax\n    } = specifiedScale;\n    const d = defaultRange(channel, model);\n\n    if ((rangeMin !== undefined || rangeMax !== undefined) && // it's ok to check just rangeMin's compatibility since rangeMin/rangeMax are the same\n    scaleTypeSupportProperty(scaleType, 'rangeMin') && isArray(d) && d.length === 2) {\n      return makeExplicit([rangeMin !== null && rangeMin !== void 0 ? rangeMin : d[0], rangeMax !== null && rangeMax !== void 0 ? rangeMax : d[1]]);\n    }\n\n    return makeImplicit(d);\n  }\n\n  function parseScheme(scheme) {\n    if (isExtendedScheme(scheme)) {\n      return {\n        scheme: scheme.name,\n        ...omit(scheme, ['name'])\n      };\n    }\n\n    return {\n      scheme: scheme\n    };\n  }\n\n  function defaultRange(channel, model) {\n    const {\n      size,\n      config,\n      mark,\n      encoding\n    } = model;\n    const getSignalName = model.getSignalName.bind(model);\n    const {\n      type\n    } = getFieldOrDatumDef(encoding[channel]);\n    const mergedScaleCmpt = model.getScaleComponent(channel);\n    const scaleType = mergedScaleCmpt.get('type');\n    const {\n      domain,\n      domainMid\n    } = model.specifiedScales[channel];\n\n    switch (channel) {\n      case X:\n      case Y:\n        {\n          // If there is no explicit width/height for discrete x/y scales\n          if (contains(['point', 'band'], scaleType)) {\n            if (channel === X && !size.width) {\n              const w = getViewConfigDiscreteSize(config.view, 'width');\n\n              if (isStep(w)) {\n                return w;\n              }\n            } else if (channel === Y && !size.height) {\n              const h = getViewConfigDiscreteSize(config.view, 'height');\n\n              if (isStep(h)) {\n                return h;\n              }\n            }\n          } // If step is null, use zero to width or height.\n          // Note that we use SignalRefWrapper to account for potential merges and renames.\n\n\n          const sizeType = getSizeChannel$1(channel);\n          const sizeSignal = model.getName(sizeType);\n\n          if (channel === Y && hasContinuousDomain(scaleType)) {\n            // For y continuous scale, we have to start from the height as the bottom part has the max value.\n            return [SignalRefWrapper.fromName(getSignalName, sizeSignal), 0];\n          } else {\n            return [0, SignalRefWrapper.fromName(getSignalName, sizeSignal)];\n          }\n        }\n\n      case SIZE:\n        {\n          // TODO: support custom rangeMin, rangeMax\n          const zero = model.component.scales[channel].get('zero');\n          const rangeMin = sizeRangeMin(mark, zero, config);\n          const rangeMax = sizeRangeMax(mark, size, model, config);\n\n          if (isContinuousToDiscrete(scaleType)) {\n            return interpolateRange(rangeMin, rangeMax, defaultContinuousToDiscreteCount(scaleType, config, domain, channel));\n          } else {\n            return [rangeMin, rangeMax];\n          }\n        }\n\n      case THETA:\n        return [0, Math.PI * 2];\n\n      case ANGLE:\n        // TODO: add config.scale.min/maxAngleDegree (for point and text) and config.scale.min/maxAngleRadian (for arc) once we add arc marks.\n        // (It's weird to add just config.scale.min/maxAngleDegree for now)\n        return [0, 360];\n\n      case RADIUS:\n        {\n          // max radius = half od min(width,height)\n          return [0, new SignalRefWrapper(() => {\n            const w = model.getSignalName('width');\n            const h = model.getSignalName('height');\n            return \"min(\".concat(w, \",\").concat(h, \")/2\");\n          })];\n        }\n\n      case STROKEWIDTH:\n        // TODO: support custom rangeMin, rangeMax\n        return [config.scale.minStrokeWidth, config.scale.maxStrokeWidth];\n\n      case STROKEDASH:\n        return [// TODO: add this to Vega's config.range?\n        [1, 0], [4, 2], [2, 1], [1, 1], [1, 2, 4, 2]];\n\n      case SHAPE:\n        return 'symbol';\n\n      case COLOR:\n      case FILL:\n      case STROKE:\n        if (scaleType === 'ordinal') {\n          // Only nominal data uses ordinal scale by default\n          return type === 'nominal' ? 'category' : 'ordinal';\n        } else {\n          if (domainMid !== undefined) {\n            return 'diverging';\n          } else {\n            return mark === 'rect' || mark === 'geoshape' ? 'heatmap' : 'ramp';\n          }\n        }\n\n      case OPACITY:\n      case FILLOPACITY:\n      case STROKEOPACITY:\n        // TODO: support custom rangeMin, rangeMax\n        return [config.scale.minOpacity, config.scale.maxOpacity];\n    }\n    /* istanbul ignore next: should never reach here */\n\n\n    throw new Error(\"Scale range undefined for channel \".concat(channel));\n  }\n\n  function defaultContinuousToDiscreteCount(scaleType, config, domain, channel) {\n    switch (scaleType) {\n      case 'quantile':\n        return config.scale.quantileCount;\n\n      case 'quantize':\n        return config.scale.quantizeCount;\n\n      case 'threshold':\n        if (domain !== undefined && isArray(domain)) {\n          return domain.length + 1;\n        } else {\n          warn(domainRequiredForThresholdScale(channel)); // default threshold boundaries for threshold scale since domain has cardinality of 2\n\n          return 3;\n        }\n\n    }\n  }\n  /**\n   * Returns the linear interpolation of the range according to the cardinality\n   *\n   * @param rangeMin start of the range\n   * @param rangeMax end of the range\n   * @param cardinality number of values in the output range\n   */\n\n  function interpolateRange(rangeMin, rangeMax, cardinality) {\n    // always return a signal since it's better to compute the sequence in Vega later\n    const f = () => {\n      const rMax = signalOrStringValue(rangeMax);\n      const rMin = signalOrStringValue(rangeMin);\n      const step = \"(\".concat(rMax, \" - \").concat(rMin, \") / (\").concat(cardinality, \" - 1)\");\n      return \"sequence(\".concat(rMin, \", \").concat(rMax, \" + \").concat(step, \", \").concat(step, \")\");\n    };\n\n    if (isSignalRef(rangeMax)) {\n      return new SignalRefWrapper(f);\n    } else {\n      return {\n        signal: f()\n      };\n    }\n  }\n\n  function sizeRangeMin(mark, zero, config) {\n    if (zero) {\n      if (isSignalRef(zero)) {\n        return {\n          signal: \"\".concat(zero.signal, \" ? 0 : \").concat(sizeRangeMin(mark, false, config))\n        };\n      } else {\n        return 0;\n      }\n    }\n\n    switch (mark) {\n      case 'bar':\n      case 'tick':\n        return config.scale.minBandSize;\n\n      case 'line':\n      case 'trail':\n      case 'rule':\n        return config.scale.minStrokeWidth;\n\n      case 'text':\n        return config.scale.minFontSize;\n\n      case 'point':\n      case 'square':\n      case 'circle':\n        return config.scale.minSize;\n    }\n    /* istanbul ignore next: should never reach here */\n    // sizeRangeMin not implemented for the mark\n\n\n    throw new Error(incompatibleChannel('size', mark));\n  }\n\n  const MAX_SIZE_RANGE_STEP_RATIO = 0.95;\n\n  function sizeRangeMax(mark, size, model, config) {\n    const xyStepSignals = {\n      x: getBinStepSignal(model, 'x'),\n      y: getBinStepSignal(model, 'y')\n    };\n\n    switch (mark) {\n      case 'bar':\n      case 'tick':\n        {\n          if (config.scale.maxBandSize !== undefined) {\n            return config.scale.maxBandSize;\n          }\n\n          const min = minXYStep(size, xyStepSignals, config.view);\n\n          if (isNumber(min)) {\n            return min - 1;\n          } else {\n            return new SignalRefWrapper(() => \"\".concat(min.signal, \" - 1\"));\n          }\n        }\n\n      case 'line':\n      case 'trail':\n      case 'rule':\n        return config.scale.maxStrokeWidth;\n\n      case 'text':\n        return config.scale.maxFontSize;\n\n      case 'point':\n      case 'square':\n      case 'circle':\n        {\n          if (config.scale.maxSize) {\n            return config.scale.maxSize;\n          }\n\n          const pointStep = minXYStep(size, xyStepSignals, config.view);\n\n          if (isNumber(pointStep)) {\n            return Math.pow(MAX_SIZE_RANGE_STEP_RATIO * pointStep, 2);\n          } else {\n            return new SignalRefWrapper(() => \"pow(\".concat(MAX_SIZE_RANGE_STEP_RATIO, \" * \").concat(pointStep.signal, \", 2)\"));\n          }\n        }\n    }\n    /* istanbul ignore next: should never reach here */\n    // sizeRangeMax not implemented for the mark\n\n\n    throw new Error(incompatibleChannel('size', mark));\n  }\n  /**\n   * @returns {number} Range step of x or y or minimum between the two if both are ordinal scale.\n   */\n\n\n  function minXYStep(size, xyStepSignals, viewConfig) {\n    const widthStep = isStep(size.width) ? size.width.step : getViewConfigDiscreteStep(viewConfig, 'width');\n    const heightStep = isStep(size.height) ? size.height.step : getViewConfigDiscreteStep(viewConfig, 'height');\n\n    if (xyStepSignals.x || xyStepSignals.y) {\n      return new SignalRefWrapper(() => {\n        const exprs = [xyStepSignals.x ? xyStepSignals.x.signal : widthStep, xyStepSignals.y ? xyStepSignals.y.signal : heightStep];\n        return \"min(\".concat(exprs.join(', '), \")\");\n      });\n    }\n\n    return Math.min(widthStep, heightStep);\n  }\n\n  function parseScaleProperty(model, property) {\n    if (isUnitModel(model)) {\n      parseUnitScaleProperty(model, property);\n    } else {\n      parseNonUnitScaleProperty(model, property);\n    }\n  }\n\n  function parseUnitScaleProperty(model, property) {\n    const localScaleComponents = model.component.scales;\n    const {\n      config,\n      encoding,\n      markDef,\n      specifiedScales\n    } = model;\n\n    for (const channel of keys(localScaleComponents)) {\n      const specifiedScale = specifiedScales[channel];\n      const localScaleCmpt = localScaleComponents[channel];\n      const mergedScaleCmpt = model.getScaleComponent(channel);\n      const fieldOrDatumDef = getFieldOrDatumDef(encoding[channel]);\n      const specifiedValue = specifiedScale[property];\n      const scaleType = mergedScaleCmpt.get('type');\n      const scalePadding = mergedScaleCmpt.get('padding');\n      const scalePaddingInner = mergedScaleCmpt.get('paddingInner');\n      const supportedByScaleType = scaleTypeSupportProperty(scaleType, property);\n      const channelIncompatability = channelScalePropertyIncompatability(channel, property);\n\n      if (specifiedValue !== undefined) {\n        // If there is a specified value, check if it is compatible with scale type and channel\n        if (!supportedByScaleType) {\n          warn(scalePropertyNotWorkWithScaleType(scaleType, property, channel));\n        } else if (channelIncompatability) {\n          // channel\n          warn(channelIncompatability);\n        }\n      }\n\n      if (supportedByScaleType && channelIncompatability === undefined) {\n        if (specifiedValue !== undefined) {\n          const timeUnit = fieldOrDatumDef['timeUnit'];\n          const type = fieldOrDatumDef.type;\n\n          switch (property) {\n            // domainMax/Min to signal if the value is a datetime object\n            case 'domainMax':\n            case 'domainMin':\n              if (isDateTime(specifiedScale[property]) || type === 'temporal' || timeUnit) {\n                localScaleCmpt.set(property, {\n                  signal: valueExpr(specifiedScale[property], {\n                    type,\n                    timeUnit\n                  })\n                }, true);\n              } else {\n                localScaleCmpt.set(property, specifiedScale[property], true);\n              }\n\n              break;\n\n            default:\n              localScaleCmpt.copyKeyFromObject(property, specifiedScale);\n          }\n        } else {\n          const value = property in scaleRules ? scaleRules[property]({\n            model,\n            channel,\n            fieldOrDatumDef,\n            scaleType,\n            scalePadding,\n            scalePaddingInner,\n            domain: specifiedScale.domain,\n            markDef,\n            config\n          }) : config.scale[property];\n\n          if (value !== undefined) {\n            localScaleCmpt.set(property, value, false);\n          }\n        }\n      }\n    }\n  }\n\n  const scaleRules = {\n    bins: ({\n      model,\n      fieldOrDatumDef\n    }) => isFieldDef(fieldOrDatumDef) ? bins(model, fieldOrDatumDef) : undefined,\n    interpolate: ({\n      channel,\n      fieldOrDatumDef\n    }) => interpolate(channel, fieldOrDatumDef.type),\n    nice: ({\n      scaleType,\n      channel,\n      fieldOrDatumDef\n    }) => nice(scaleType, channel, fieldOrDatumDef),\n    padding: ({\n      channel,\n      scaleType,\n      fieldOrDatumDef,\n      markDef,\n      config\n    }) => padding(channel, scaleType, config.scale, fieldOrDatumDef, markDef, config.bar),\n    paddingInner: ({\n      scalePadding,\n      channel,\n      markDef,\n      config\n    }) => paddingInner(scalePadding, channel, markDef.type, config.scale),\n    paddingOuter: ({\n      scalePadding,\n      channel,\n      scaleType,\n      markDef,\n      scalePaddingInner,\n      config\n    }) => paddingOuter(scalePadding, channel, scaleType, markDef.type, scalePaddingInner, config.scale),\n    reverse: ({\n      fieldOrDatumDef,\n      scaleType,\n      channel,\n      config\n    }) => {\n      const sort = isFieldDef(fieldOrDatumDef) ? fieldOrDatumDef.sort : undefined;\n      return reverse(scaleType, sort, channel, config.scale);\n    },\n    zero: ({\n      channel,\n      fieldOrDatumDef,\n      domain,\n      markDef,\n      scaleType\n    }) => zero$1(channel, fieldOrDatumDef, domain, markDef, scaleType)\n  }; // This method is here rather than in range.ts to avoid circular dependency.\n\n  function parseScaleRange(model) {\n    if (isUnitModel(model)) {\n      parseUnitScaleRange(model);\n    } else {\n      parseNonUnitScaleProperty(model, 'range');\n    }\n  }\n  function parseNonUnitScaleProperty(model, property) {\n    const localScaleComponents = model.component.scales;\n\n    for (const child of model.children) {\n      if (property === 'range') {\n        parseScaleRange(child);\n      } else {\n        parseScaleProperty(child, property);\n      }\n    }\n\n    for (const channel of keys(localScaleComponents)) {\n      let valueWithExplicit;\n\n      for (const child of model.children) {\n        const childComponent = child.component.scales[channel];\n\n        if (childComponent) {\n          const childValueWithExplicit = childComponent.getWithExplicit(property);\n          valueWithExplicit = mergeValuesWithExplicit(valueWithExplicit, childValueWithExplicit, property, 'scale', tieBreakByComparing((v1, v2) => {\n            switch (property) {\n              case 'range':\n                // For step, prefer larger step\n                if (v1.step && v2.step) {\n                  return v1.step - v2.step;\n                }\n\n                return 0;\n              // TODO: precedence rule for other properties\n            }\n\n            return 0;\n          }));\n        }\n      }\n\n      localScaleComponents[channel].setWithExplicit(property, valueWithExplicit);\n    }\n  }\n  function bins(model, fieldDef) {\n    const bin = fieldDef.bin;\n\n    if (isBinning(bin)) {\n      const binSignal = getBinSignalName(model, fieldDef.field, bin);\n      return new SignalRefWrapper(() => {\n        return model.getSignalName(binSignal);\n      });\n    } else if (isBinned(bin) && isBinParams(bin) && bin.step !== undefined) {\n      // start and stop will be determined from the scale domain\n      return {\n        step: bin.step\n      };\n    }\n\n    return undefined;\n  }\n  function interpolate(channel, type) {\n    if (contains([COLOR, FILL, STROKE], channel) && type !== 'nominal') {\n      return 'hcl';\n    }\n\n    return undefined;\n  }\n  function nice(scaleType, channel, fieldOrDatumDef) {\n    var _getFieldDef;\n\n    if (((_getFieldDef = getFieldDef(fieldOrDatumDef)) === null || _getFieldDef === void 0 ? void 0 : _getFieldDef.bin) || contains([ScaleType.TIME, ScaleType.UTC], scaleType)) {\n      return undefined;\n    }\n\n    return channel in POSITION_SCALE_CHANNEL_INDEX ? true : undefined;\n  }\n  function padding(channel, scaleType, scaleConfig, fieldOrDatumDef, markDef, barConfig) {\n    if (channel in POSITION_SCALE_CHANNEL_INDEX) {\n      if (isContinuousToContinuous(scaleType)) {\n        if (scaleConfig.continuousPadding !== undefined) {\n          return scaleConfig.continuousPadding;\n        }\n\n        const {\n          type,\n          orient\n        } = markDef;\n\n        if (type === 'bar' && !(isFieldDef(fieldOrDatumDef) && (fieldOrDatumDef.bin || fieldOrDatumDef.timeUnit))) {\n          if (orient === 'vertical' && channel === 'x' || orient === 'horizontal' && channel === 'y') {\n            return barConfig.continuousBandSize;\n          }\n        }\n      }\n\n      if (scaleType === ScaleType.POINT) {\n        return scaleConfig.pointPadding;\n      }\n    }\n\n    return undefined;\n  }\n  function paddingInner(paddingValue, channel, mark, scaleConfig) {\n    if (paddingValue !== undefined) {\n      // If user has already manually specified \"padding\", no need to add default paddingInner.\n      return undefined;\n    }\n\n    if (channel in POSITION_SCALE_CHANNEL_INDEX) {\n      // Padding is only set for X and Y by default.\n      // Basically it doesn't make sense to add padding for color and size.\n      // paddingOuter would only be called if it's a band scale, just return the default for bandScale.\n      const {\n        bandPaddingInner,\n        barBandPaddingInner,\n        rectBandPaddingInner\n      } = scaleConfig;\n      return getFirstDefined(bandPaddingInner, mark === 'bar' ? barBandPaddingInner : rectBandPaddingInner);\n    }\n\n    return undefined;\n  }\n  function paddingOuter(paddingValue, channel, scaleType, mark, paddingInnerValue, scaleConfig) {\n    if (paddingValue !== undefined) {\n      // If user has already manually specified \"padding\", no need to add default paddingOuter.\n      return undefined;\n    }\n\n    if (channel in POSITION_SCALE_CHANNEL_INDEX) {\n      // Padding is only set for X and Y by default.\n      // Basically it doesn't make sense to add padding for color and size.\n      if (scaleType === ScaleType.BAND) {\n        const {\n          bandPaddingOuter\n        } = scaleConfig;\n        return getFirstDefined(bandPaddingOuter,\n        /* By default, paddingOuter is paddingInner / 2. The reason is that\n          size (width/height) = step * (cardinality - paddingInner + 2 * paddingOuter).\n          and we want the width/height to be integer by default.\n          Note that step (by default) and cardinality are integers.) */\n        isSignalRef(paddingInnerValue) ? {\n          signal: \"\".concat(paddingInnerValue.signal, \"/2\")\n        } : paddingInnerValue / 2);\n      }\n    }\n\n    return undefined;\n  }\n  function reverse(scaleType, sort, channel, scaleConfig) {\n    if (channel === 'x' && scaleConfig.xReverse !== undefined) {\n      if (hasContinuousDomain(scaleType) && sort === 'descending') {\n        if (isSignalRef(scaleConfig.xReverse)) {\n          return {\n            signal: \"!\".concat(scaleConfig.xReverse.signal)\n          };\n        } else {\n          return !scaleConfig.xReverse;\n        }\n      }\n\n      return scaleConfig.xReverse;\n    }\n\n    if (hasContinuousDomain(scaleType) && sort === 'descending') {\n      // For continuous domain scales, Vega does not support domain sort.\n      // Thus, we reverse range instead if sort is descending\n      return true;\n    }\n\n    return undefined;\n  }\n  function zero$1(channel, fieldDef, specifiedDomain, markDef, scaleType) {\n    // If users explicitly provide a domain range, we should not augment zero as that will be unexpected.\n    const hasCustomDomain = !!specifiedDomain && specifiedDomain !== 'unaggregated';\n\n    if (hasCustomDomain) {\n      if (hasContinuousDomain(scaleType)) {\n        if (isArray(specifiedDomain)) {\n          const first = specifiedDomain[0];\n          const last = specifiedDomain[specifiedDomain.length - 1];\n\n          if (first <= 0 && last >= 0) {\n            // if the domain includes zero, make zero remains true\n            return true;\n          }\n        }\n\n        return false;\n      }\n    } // If there is no custom domain, return true only for the following cases:\n    // 1) using quantitative field with size\n    // While this can be either ratio or interval fields, our assumption is that\n    // ratio are more common. However, if the scaleType is discretizing scale, we want to return\n    // false so that range doesn't start at zero\n\n\n    if (channel === 'size' && fieldDef.type === 'quantitative' && !isContinuousToDiscrete(scaleType)) {\n      return true;\n    } // 2) non-binned, quantitative x-scale or y-scale\n    // (For binning, we should not include zero by default because binning are calculated without zero.)\n\n\n    if (!(isFieldDef(fieldDef) && fieldDef.bin) && contains([...POSITION_SCALE_CHANNELS, ...POLAR_POSITION_SCALE_CHANNELS], channel)) {\n      const {\n        orient,\n        type\n      } = markDef;\n\n      if (contains(['bar', 'area', 'line', 'trail'], type)) {\n        if (orient === 'horizontal' && channel === 'y' || orient === 'vertical' && channel === 'x') {\n          return false;\n        }\n      }\n\n      return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Determine if there is a specified scale type and if it is appropriate,\n   * or determine default type if type is unspecified or inappropriate.\n   */\n  // NOTE: CompassQL uses this method.\n  function scaleType(specifiedScale, channel, fieldDef, mark) {\n    const defaultScaleType = defaultType$2(channel, fieldDef, mark);\n    const {\n      type\n    } = specifiedScale;\n\n    if (!isScaleChannel(channel)) {\n      // There is no scale for these channels\n      return null;\n    }\n\n    if (type !== undefined) {\n      // Check if explicitly specified scale type is supported by the channel\n      if (!channelSupportScaleType(channel, type)) {\n        warn(scaleTypeNotWorkWithChannel(channel, type, defaultScaleType));\n        return defaultScaleType;\n      } // Check if explicitly specified scale type is supported by the data type\n\n\n      if (isFieldDef(fieldDef) && !scaleTypeSupportDataType(type, fieldDef.type)) {\n        warn(scaleTypeNotWorkWithFieldDef(type, defaultScaleType));\n        return defaultScaleType;\n      }\n\n      return type;\n    }\n\n    return defaultScaleType;\n  }\n  /**\n   * Determine appropriate default scale type.\n   */\n  // NOTE: Voyager uses this method.\n\n  function defaultType$2(channel, fieldDef, mark) {\n    var _fieldDef$axis;\n\n    switch (fieldDef.type) {\n      case 'nominal':\n      case 'ordinal':\n        if (isColorChannel(channel) || rangeType(channel) === 'discrete') {\n          if (channel === 'shape' && fieldDef.type === 'ordinal') {\n            warn(discreteChannelCannotEncode(channel, 'ordinal'));\n          }\n\n          return 'ordinal';\n        }\n\n        if (channel in POSITION_SCALE_CHANNEL_INDEX) {\n          if (contains(['rect', 'bar', 'image', 'rule'], mark)) {\n            // The rect/bar mark should fit into a band.\n            // For rule, using band scale to make rule align with axis ticks better https://github.com/vega/vega-lite/issues/3429\n            return 'band';\n          }\n        } else if (mark === 'arc' && channel in POLAR_POSITION_SCALE_CHANNEL_INDEX) {\n          return 'band';\n        }\n\n        if (fieldDef.band !== undefined || isPositionFieldOrDatumDef(fieldDef) && ((_fieldDef$axis = fieldDef.axis) === null || _fieldDef$axis === void 0 ? void 0 : _fieldDef$axis.tickBand)) {\n          return 'band';\n        } // Otherwise, use ordinal point scale so we can easily get center positions of the marks.\n\n\n        return 'point';\n\n      case 'temporal':\n        if (isColorChannel(channel)) {\n          return 'time';\n        } else if (rangeType(channel) === 'discrete') {\n          warn(discreteChannelCannotEncode(channel, 'temporal')); // TODO: consider using quantize (equivalent to binning) once we have it\n\n          return 'ordinal';\n        } else if (isFieldDef(fieldDef) && fieldDef.timeUnit && normalizeTimeUnit(fieldDef.timeUnit).utc) {\n          return 'utc';\n        }\n\n        return 'time';\n\n      case 'quantitative':\n        if (isColorChannel(channel)) {\n          if (isFieldDef(fieldDef) && isBinning(fieldDef.bin)) {\n            return 'bin-ordinal';\n          }\n\n          return 'linear';\n        } else if (rangeType(channel) === 'discrete') {\n          warn(discreteChannelCannotEncode(channel, 'quantitative')); // TODO: consider using quantize (equivalent to binning) once we have it\n\n          return 'ordinal';\n        }\n\n        return 'linear';\n\n      case 'geojson':\n        return undefined;\n    }\n    /* istanbul ignore next: should never reach this */\n\n\n    throw new Error(invalidFieldType(fieldDef.type));\n  }\n\n  function parseScales(model, {\n    ignoreRange\n  } = {}) {\n    parseScaleCore(model);\n    parseScaleDomain(model);\n\n    for (const prop of NON_TYPE_DOMAIN_RANGE_VEGA_SCALE_PROPERTIES) {\n      parseScaleProperty(model, prop);\n    }\n\n    if (!ignoreRange) {\n      // range depends on zero\n      parseScaleRange(model);\n    }\n  }\n  function parseScaleCore(model) {\n    if (isUnitModel(model)) {\n      model.component.scales = parseUnitScaleCore(model);\n    } else {\n      model.component.scales = parseNonUnitScaleCore(model);\n    }\n  }\n  /**\n   * Parse scales for all channels of a model.\n   */\n\n  function parseUnitScaleCore(model) {\n    const {\n      encoding,\n      mark\n    } = model;\n    return SCALE_CHANNELS.reduce((scaleComponents, channel) => {\n      const fieldOrDatumDef = getFieldOrDatumDef(encoding[channel]); // must be typed def to have scale\n      // Don't generate scale for shape of geoshape\n\n      if (fieldOrDatumDef && mark === GEOSHAPE && channel === SHAPE && fieldOrDatumDef.type === GEOJSON) {\n        return scaleComponents;\n      }\n\n      let specifiedScale = fieldOrDatumDef && fieldOrDatumDef['scale'];\n\n      if (fieldOrDatumDef && specifiedScale !== null && specifiedScale !== false) {\n        var _specifiedScale;\n\n        specifiedScale = (_specifiedScale = specifiedScale) !== null && _specifiedScale !== void 0 ? _specifiedScale : {};\n        const sType = scaleType(specifiedScale, channel, fieldOrDatumDef, mark);\n        scaleComponents[channel] = new ScaleComponent(model.scaleName(channel + '', true), {\n          value: sType,\n          explicit: specifiedScale.type === sType\n        });\n      }\n\n      return scaleComponents;\n    }, {});\n  }\n\n  const scaleTypeTieBreaker = tieBreakByComparing((st1, st2) => scaleTypePrecedence(st1) - scaleTypePrecedence(st2));\n\n  function parseNonUnitScaleCore(model) {\n    const scaleComponents = model.component.scales = {};\n    const scaleTypeWithExplicitIndex = {};\n    const resolve = model.component.resolve; // Parse each child scale and determine if a particular channel can be merged.\n\n    for (const child of model.children) {\n      parseScaleCore(child); // Instead of always merging right away -- check if it is compatible to merge first!\n\n      for (const channel of keys(child.component.scales)) {\n        var _resolve$scale$channe;\n\n        // if resolve is undefined, set default first\n        resolve.scale[channel] = (_resolve$scale$channe = resolve.scale[channel]) !== null && _resolve$scale$channe !== void 0 ? _resolve$scale$channe : defaultScaleResolve(channel, model);\n\n        if (resolve.scale[channel] === 'shared') {\n          const explicitScaleType = scaleTypeWithExplicitIndex[channel];\n          const childScaleType = child.component.scales[channel].getWithExplicit('type');\n\n          if (explicitScaleType) {\n            if (scaleCompatible(explicitScaleType.value, childScaleType.value)) {\n              // merge scale component if type are compatible\n              scaleTypeWithExplicitIndex[channel] = mergeValuesWithExplicit(explicitScaleType, childScaleType, 'type', 'scale', scaleTypeTieBreaker);\n            } else {\n              // Otherwise, update conflicting channel to be independent\n              resolve.scale[channel] = 'independent'; // Remove from the index so they don't get merged\n\n              delete scaleTypeWithExplicitIndex[channel];\n            }\n          } else {\n            scaleTypeWithExplicitIndex[channel] = childScaleType;\n          }\n        }\n      }\n    } // Merge each channel listed in the index\n\n\n    for (const channel of keys(scaleTypeWithExplicitIndex)) {\n      // Create new merged scale component\n      const name = model.scaleName(channel, true);\n      const typeWithExplicit = scaleTypeWithExplicitIndex[channel];\n      scaleComponents[channel] = new ScaleComponent(name, typeWithExplicit); // rename each child and mark them as merged\n\n      for (const child of model.children) {\n        const childScale = child.component.scales[channel];\n\n        if (childScale) {\n          child.renameScale(childScale.get('name'), name);\n          childScale.merged = true;\n        }\n      }\n    }\n\n    return scaleComponents;\n  }\n\n  class NameMap {\n    constructor() {\n      _defineProperty(this, \"nameMap\", void 0);\n\n      this.nameMap = {};\n    }\n\n    rename(oldName, newName) {\n      this.nameMap[oldName] = newName;\n    }\n\n    has(name) {\n      return this.nameMap[name] !== undefined;\n    }\n\n    get(name) {\n      // If the name appears in the _nameMap, we need to read its new name.\n      // We have to loop over the dict just in case the new name also gets renamed.\n      while (this.nameMap[name] && name !== this.nameMap[name]) {\n        name = this.nameMap[name];\n      }\n\n      return name;\n    }\n\n  }\n  /*\n    We use type guards instead of `instanceof` as `instanceof` makes\n    different parts of the compiler depend on the actual implementation of\n    the model classes, which in turn depend on different parts of the compiler.\n    Thus, `instanceof` leads to circular dependency problems.\n\n    On the other hand, type guards only make different parts of the compiler\n    depend on the type of the model classes, but not the actual implementation.\n  */\n\n  function isUnitModel(model) {\n    return (model === null || model === void 0 ? void 0 : model.type) === 'unit';\n  }\n  function isFacetModel(model) {\n    return (model === null || model === void 0 ? void 0 : model.type) === 'facet';\n  }\n  function isConcatModel(model) {\n    return (model === null || model === void 0 ? void 0 : model.type) === 'concat';\n  }\n  function isLayerModel(model) {\n    return (model === null || model === void 0 ? void 0 : model.type) === 'layer';\n  }\n  class Model {\n    /** Name map for scales, which can be renamed by a model's parent. */\n\n    /** Name map for projections, which can be renamed by a model's parent. */\n\n    /** Name map for signals, which can be renamed by a model's parent. */\n    constructor(spec, type, parent, parentGivenName, config, resolve, view) {\n      var _spec$name, _spec$transform;\n\n      this.type = type;\n      this.parent = parent;\n      this.config = config;\n\n      _defineProperty(this, \"name\", void 0);\n\n      _defineProperty(this, \"size\", void 0);\n\n      _defineProperty(this, \"title\", void 0);\n\n      _defineProperty(this, \"description\", void 0);\n\n      _defineProperty(this, \"data\", void 0);\n\n      _defineProperty(this, \"transforms\", void 0);\n\n      _defineProperty(this, \"layout\", void 0);\n\n      _defineProperty(this, \"scaleNameMap\", void 0);\n\n      _defineProperty(this, \"projectionNameMap\", void 0);\n\n      _defineProperty(this, \"signalNameMap\", void 0);\n\n      _defineProperty(this, \"component\", void 0);\n\n      _defineProperty(this, \"view\", void 0);\n\n      _defineProperty(this, \"children\", []);\n\n      _defineProperty(this, \"correctDataNames\", mark => {\n        // TODO: make this correct\n        // for normal data references\n        if (mark.from && mark.from.data) {\n          mark.from.data = this.lookupDataSource(mark.from.data);\n        } // for access to facet data\n\n\n        if (mark.from && mark.from.facet && mark.from.facet.data) {\n          mark.from.facet.data = this.lookupDataSource(mark.from.facet.data);\n        }\n\n        return mark;\n      });\n\n      this.parent = parent;\n      this.config = config;\n      this.view = replaceExprRefInIndex(view); // If name is not provided, always use parent's givenName to avoid name conflicts.\n\n      this.name = (_spec$name = spec.name) !== null && _spec$name !== void 0 ? _spec$name : parentGivenName;\n      this.title = isText(spec.title) ? {\n        text: spec.title\n      } : spec.title ? this.initTitle(spec.title) : undefined; // Shared name maps\n\n      this.scaleNameMap = parent ? parent.scaleNameMap : new NameMap();\n      this.projectionNameMap = parent ? parent.projectionNameMap : new NameMap();\n      this.signalNameMap = parent ? parent.signalNameMap : new NameMap();\n      this.data = spec.data;\n      this.description = spec.description;\n      this.transforms = normalizeTransform((_spec$transform = spec.transform) !== null && _spec$transform !== void 0 ? _spec$transform : []);\n      this.layout = type === 'layer' || type === 'unit' ? {} : extractCompositionLayout(spec, type, config);\n      this.component = {\n        data: {\n          sources: parent ? parent.component.data.sources : [],\n          outputNodes: parent ? parent.component.data.outputNodes : {},\n          outputNodeRefCounts: parent ? parent.component.data.outputNodeRefCounts : {},\n          // data is faceted if the spec is a facet spec or the parent has faceted data and data is undefined\n          isFaceted: isFacetSpec(spec) || parent && parent.component.data.isFaceted && spec.data === undefined\n        },\n        layoutSize: new Split(),\n        layoutHeaders: {\n          row: {},\n          column: {},\n          facet: {}\n        },\n        mark: null,\n        resolve: {\n          scale: {},\n          axis: {},\n          legend: {},\n          ...(resolve ? duplicate(resolve) : {})\n        },\n        selection: null,\n        scales: null,\n        projection: null,\n        axes: {},\n        legends: {}\n      };\n    }\n\n    initTitle(title) {\n      const props = keys(title);\n      const titleInternal = {\n        text: signalRefOrValue(title.text)\n      };\n\n      for (const prop of props) {\n        titleInternal[prop] = signalRefOrValue(title[prop]);\n      }\n\n      return titleInternal;\n    }\n\n    get width() {\n      return this.getSizeSignalRef('width');\n    }\n\n    get height() {\n      return this.getSizeSignalRef('height');\n    }\n\n    parse() {\n      this.parseScale();\n      this.parseLayoutSize(); // depends on scale\n\n      this.renameTopLevelLayoutSizeSignal();\n      this.parseSelections();\n      this.parseProjection();\n      this.parseData(); // (pathorder) depends on markDef; selection filters depend on parsed selections; depends on projection because some transforms require the finalized projection name.\n\n      this.parseAxesAndHeaders(); // depends on scale and layout size\n\n      this.parseLegends(); // depends on scale, markDef\n\n      this.parseMarkGroup(); // depends on data name, scale, layout size, axisGroup, and children's scale, axis, legend and mark.\n    }\n\n    parseScale() {\n      parseScales(this);\n    }\n\n    parseProjection() {\n      parseProjection(this);\n    }\n\n    /**\n     * Rename top-level spec's size to be just width / height, ignoring model name.\n     * This essentially merges the top-level spec's width/height signals with the width/height signals\n     * to help us reduce redundant signals declaration.\n     */\n    renameTopLevelLayoutSizeSignal() {\n      if (this.getName('width') !== 'width') {\n        this.renameSignal(this.getName('width'), 'width');\n      }\n\n      if (this.getName('height') !== 'height') {\n        this.renameSignal(this.getName('height'), 'height');\n      }\n    }\n\n    parseLegends() {\n      parseLegend(this);\n    }\n\n    assembleGroupStyle() {\n      if (this.type === 'unit' || this.type === 'layer') {\n        var _this$view$style, _this$view;\n\n        return (_this$view$style = (_this$view = this.view) === null || _this$view === void 0 ? void 0 : _this$view.style) !== null && _this$view$style !== void 0 ? _this$view$style : 'cell';\n      }\n\n      return undefined;\n    }\n\n    assembleEncodeFromView(view) {\n      // Exclude \"style\"\n      const {\n        style: _,\n        ...baseView\n      } = view;\n      const e = {};\n\n      for (const property of keys(baseView)) {\n        const value = baseView[property];\n\n        if (value !== undefined) {\n          e[property] = signalOrValueRef(value);\n        }\n      }\n\n      return e;\n    }\n\n    assembleGroupEncodeEntry(isTopLevel) {\n      let encodeEntry = {};\n\n      if (this.view) {\n        encodeEntry = this.assembleEncodeFromView(this.view);\n      }\n\n      if (!isTopLevel) {\n        // Descriptions are already added to the top-level description so we only need to add them to the inner views.\n        if (this.description) {\n          encodeEntry['description'] = signalOrValueRef(this.description);\n        } // For top-level spec, we can set the global width and height signal to adjust the group size.\n        // For other child specs, we have to manually set width and height in the encode entry.\n\n\n        if (this.type === 'unit' || this.type === 'layer') {\n          var _encodeEntry;\n\n          return {\n            width: this.getSizeSignalRef('width'),\n            height: this.getSizeSignalRef('height'),\n            ...((_encodeEntry = encodeEntry) !== null && _encodeEntry !== void 0 ? _encodeEntry : {})\n          };\n        }\n      }\n\n      return isEmpty(encodeEntry) ? undefined : encodeEntry;\n    }\n\n    assembleLayout() {\n      if (!this.layout) {\n        return undefined;\n      }\n\n      const {\n        spacing,\n        ...layout\n      } = this.layout;\n      const {\n        component,\n        config\n      } = this;\n      const titleBand = assembleLayoutTitleBand(component.layoutHeaders, config);\n      return {\n        padding: spacing,\n        ...this.assembleDefaultLayout(),\n        ...layout,\n        ...(titleBand ? {\n          titleBand\n        } : {})\n      };\n    }\n\n    assembleDefaultLayout() {\n      return {};\n    }\n\n    assembleHeaderMarks() {\n      const {\n        layoutHeaders\n      } = this.component;\n      let headerMarks = [];\n\n      for (const channel of FACET_CHANNELS) {\n        if (layoutHeaders[channel].title) {\n          headerMarks.push(assembleTitleGroup(this, channel));\n        }\n      }\n\n      for (const channel of HEADER_CHANNELS) {\n        headerMarks = headerMarks.concat(assembleHeaderGroups(this, channel));\n      }\n\n      return headerMarks;\n    }\n\n    assembleAxes() {\n      return assembleAxes(this.component.axes, this.config);\n    }\n\n    assembleLegends() {\n      return assembleLegends(this);\n    }\n\n    assembleProjections() {\n      return assembleProjections(this);\n    }\n\n    assembleTitle() {\n      var _this$title;\n\n      const {\n        encoding,\n        ...titleNoEncoding\n      } = (_this$title = this.title) !== null && _this$title !== void 0 ? _this$title : {};\n      const title = { ...extractTitleConfig(this.config.title).nonMark,\n        ...titleNoEncoding,\n        ...(encoding ? {\n          encode: {\n            update: encoding\n          }\n        } : {})\n      };\n\n      if (title.text) {\n        if (contains(['unit', 'layer'], this.type)) {\n          // Unit/Layer\n          if (contains(['middle', undefined], title.anchor)) {\n            var _title$frame;\n\n            title.frame = (_title$frame = title.frame) !== null && _title$frame !== void 0 ? _title$frame : 'group';\n          }\n        } else {\n          var _title$anchor;\n\n          // composition with Vega layout\n          // Set title = \"start\" by default for composition as \"middle\" does not look nice\n          // https://github.com/vega/vega/issues/960#issuecomment-471360328\n          title.anchor = (_title$anchor = title.anchor) !== null && _title$anchor !== void 0 ? _title$anchor : 'start';\n        }\n\n        return isEmpty(title) ? undefined : title;\n      }\n\n      return undefined;\n    }\n    /**\n     * Assemble the mark group for this model. We accept optional `signals` so that we can include concat top-level signals with the top-level model's local signals.\n     */\n\n\n    assembleGroup(signals = []) {\n      const group = {};\n      signals = signals.concat(this.assembleSignals());\n\n      if (signals.length > 0) {\n        group.signals = signals;\n      }\n\n      const layout = this.assembleLayout();\n\n      if (layout) {\n        group.layout = layout;\n      }\n\n      group.marks = [].concat(this.assembleHeaderMarks(), this.assembleMarks()); // Only include scales if this spec is top-level or if parent is facet.\n      // (Otherwise, it will be merged with upper-level's scope.)\n\n      const scales = !this.parent || isFacetModel(this.parent) ? assembleScales(this) : [];\n\n      if (scales.length > 0) {\n        group.scales = scales;\n      }\n\n      const axes = this.assembleAxes();\n\n      if (axes.length > 0) {\n        group.axes = axes;\n      }\n\n      const legends = this.assembleLegends();\n\n      if (legends.length > 0) {\n        group.legends = legends;\n      }\n\n      return group;\n    }\n\n    getName(text) {\n      return varName((this.name ? this.name + '_' : '') + text);\n    }\n\n    getDataName(type) {\n      return this.getName(DataSourceType[type].toLowerCase());\n    }\n    /**\n     * Request a data source name for the given data source type and mark that data source as required.\n     * This method should be called in parse, so that all used data source can be correctly instantiated in assembleData().\n     * You can lookup the correct dataset name in assemble with `lookupDataSource`.\n     */\n\n\n    requestDataName(name) {\n      const fullName = this.getDataName(name); // Increase ref count. This is critical because otherwise we won't create a data source.\n      // We also increase the ref counts on OutputNode.getSource() calls.\n\n      const refCounts = this.component.data.outputNodeRefCounts;\n      refCounts[fullName] = (refCounts[fullName] || 0) + 1;\n      return fullName;\n    }\n\n    getSizeSignalRef(layoutSizeType) {\n      if (isFacetModel(this.parent)) {\n        const sizeType = getSizeTypeFromLayoutSizeType(layoutSizeType);\n        const channel = getPositionScaleChannel(sizeType);\n        const scaleComponent = this.component.scales[channel];\n\n        if (scaleComponent && !scaleComponent.merged) {\n          // independent scale\n          const type = scaleComponent.get('type');\n          const range = scaleComponent.get('range');\n\n          if (hasDiscreteDomain(type) && isVgRangeStep(range)) {\n            const scaleName = scaleComponent.get('name');\n            const domain = assembleDomain(this, channel);\n            const field = getFieldFromDomain(domain);\n\n            if (field) {\n              const fieldRef = vgField({\n                aggregate: 'distinct',\n                field\n              }, {\n                expr: 'datum'\n              });\n              return {\n                signal: sizeExpr(scaleName, scaleComponent, fieldRef)\n              };\n            } else {\n              warn(unknownField(channel));\n              return null;\n            }\n          }\n        }\n      }\n\n      return {\n        signal: this.signalNameMap.get(this.getName(layoutSizeType))\n      };\n    }\n    /**\n     * Lookup the name of the datasource for an output node. You probably want to call this in assemble.\n     */\n\n\n    lookupDataSource(name) {\n      const node = this.component.data.outputNodes[name];\n\n      if (!node) {\n        // Name not found in map so let's just return what we got.\n        // This can happen if we already have the correct name.\n        return name;\n      }\n\n      return node.getSource();\n    }\n\n    getSignalName(oldSignalName) {\n      return this.signalNameMap.get(oldSignalName);\n    }\n\n    renameSignal(oldName, newName) {\n      this.signalNameMap.rename(oldName, newName);\n    }\n\n    renameScale(oldName, newName) {\n      this.scaleNameMap.rename(oldName, newName);\n    }\n\n    renameProjection(oldName, newName) {\n      this.projectionNameMap.rename(oldName, newName);\n    }\n    /**\n     * @return scale name for a given channel after the scale has been parsed and named.\n     */\n\n\n    scaleName(originalScaleName, parse) {\n      if (parse) {\n        // During the parse phase always return a value\n        // No need to refer to rename map because a scale can't be renamed\n        // before it has the original name.\n        return this.getName(originalScaleName);\n      } // If there is a scale for the channel, it should either\n      // be in the scale component or exist in the name map\n\n\n      if ( // If there is a scale for the channel, there should be a local scale component for it\n      isChannel(originalScaleName) && isScaleChannel(originalScaleName) && this.component.scales[originalScaleName] || // in the scale name map (the scale get merged by its parent)\n      this.scaleNameMap.has(this.getName(originalScaleName))) {\n        return this.scaleNameMap.get(this.getName(originalScaleName));\n      }\n\n      return undefined;\n    }\n    /**\n     * @return projection name after the projection has been parsed and named.\n     */\n\n\n    projectionName(parse) {\n      if (parse) {\n        // During the parse phase always return a value\n        // No need to refer to rename map because a projection can't be renamed\n        // before it has the original name.\n        return this.getName('projection');\n      }\n\n      if (this.component.projection && !this.component.projection.merged || this.projectionNameMap.has(this.getName('projection'))) {\n        return this.projectionNameMap.get(this.getName('projection'));\n      }\n\n      return undefined;\n    }\n    /**\n     * Corrects the data references in marks after assemble.\n     */\n\n\n    /**\n     * Traverse a model's hierarchy to get the scale component for a particular channel.\n     */\n    getScaleComponent(channel) {\n      /* istanbul ignore next: This is warning for debugging test */\n      if (!this.component.scales) {\n        throw new Error('getScaleComponent cannot be called before parseScale(). Make sure you have called parseScale or use parseUnitModelWithScale().');\n      }\n\n      const localScaleComponent = this.component.scales[channel];\n\n      if (localScaleComponent && !localScaleComponent.merged) {\n        return localScaleComponent;\n      }\n\n      return this.parent ? this.parent.getScaleComponent(channel) : undefined;\n    }\n    /**\n     * Traverse a model's hierarchy to get a particular selection component.\n     */\n\n\n    getSelectionComponent(variableName, origName) {\n      let sel = this.component.selection[variableName];\n\n      if (!sel && this.parent) {\n        sel = this.parent.getSelectionComponent(variableName, origName);\n      }\n\n      if (!sel) {\n        throw new Error(selectionNotFound(origName));\n      }\n\n      return sel;\n    }\n    /**\n     * Returns true if the model has a signalRef for an axis orient.\n     */\n\n\n    hasAxisOrientSignalRef() {\n      var _this$component$axes$, _this$component$axes$2;\n\n      return ((_this$component$axes$ = this.component.axes.x) === null || _this$component$axes$ === void 0 ? void 0 : _this$component$axes$.some(a => a.hasOrientSignalRef())) || ((_this$component$axes$2 = this.component.axes.y) === null || _this$component$axes$2 === void 0 ? void 0 : _this$component$axes$2.some(a => a.hasOrientSignalRef()));\n    }\n\n  }\n  /** Abstract class for UnitModel and FacetModel. Both of which can contain fieldDefs as a part of its own specification. */\n\n  class ModelWithField extends Model {\n    /** Get \"field\" reference for Vega */\n    vgField(channel, opt = {}) {\n      const fieldDef = this.fieldDef(channel);\n\n      if (!fieldDef) {\n        return undefined;\n      }\n\n      return vgField(fieldDef, opt);\n    }\n\n    reduceFieldDef(f, init) {\n      return reduce(this.getMapping(), (acc, cd, c) => {\n        const fieldDef = getFieldDef(cd);\n\n        if (fieldDef) {\n          return f(acc, fieldDef, c);\n        }\n\n        return acc;\n      }, init);\n    }\n\n    forEachFieldDef(f, t) {\n      forEach(this.getMapping(), (cd, c) => {\n        const fieldDef = getFieldDef(cd);\n\n        if (fieldDef) {\n          f(fieldDef, c);\n        }\n      }, t);\n    }\n\n  }\n\n  /**\n   * A class for density transform nodes\n   */\n\n  class DensityTransformNode extends DataFlowNode {\n    clone() {\n      return new DensityTransformNode(null, duplicate(this.transform));\n    }\n\n    constructor(parent, transform) {\n      var _this$transform$as, _specifiedAs$, _specifiedAs$2;\n\n      super(parent);\n      this.transform = transform;\n      this.transform = duplicate(transform); // duplicate to prevent side effects\n\n      const specifiedAs = (_this$transform$as = this.transform.as) !== null && _this$transform$as !== void 0 ? _this$transform$as : [undefined, undefined];\n      this.transform.as = [(_specifiedAs$ = specifiedAs[0]) !== null && _specifiedAs$ !== void 0 ? _specifiedAs$ : 'value', (_specifiedAs$2 = specifiedAs[1]) !== null && _specifiedAs$2 !== void 0 ? _specifiedAs$2 : 'density'];\n    }\n\n    dependentFields() {\n      var _this$transform$group;\n\n      return new Set([this.transform.density, ...((_this$transform$group = this.transform.groupby) !== null && _this$transform$group !== void 0 ? _this$transform$group : [])]);\n    }\n\n    producedFields() {\n      return new Set(this.transform.as);\n    }\n\n    hash() {\n      return \"DensityTransform \".concat(hash(this.transform));\n    }\n\n    assemble() {\n      const {\n        density,\n        ...rest\n      } = this.transform;\n      const result = {\n        type: 'kde',\n        field: density,\n        ...rest\n      };\n      return result;\n    }\n\n  }\n\n  class FilterInvalidNode extends DataFlowNode {\n    clone() {\n      return new FilterInvalidNode(null, { ...this.filter\n      });\n    }\n\n    constructor(parent, filter) {\n      super(parent);\n      this.filter = filter;\n    }\n\n    static make(parent, model) {\n      const {\n        config,\n        mark,\n        markDef\n      } = model;\n      const invalid = getMarkPropOrConfig('invalid', markDef, config);\n\n      if (invalid !== 'filter') {\n        return null;\n      }\n\n      const filter = model.reduceFieldDef((aggregator, fieldDef, channel) => {\n        const scaleComponent = isScaleChannel(channel) && model.getScaleComponent(channel);\n\n        if (scaleComponent) {\n          const scaleType = scaleComponent.get('type'); // While discrete domain scales can handle invalid values, continuous scales can't.\n          // Thus, for non-path marks, we have to filter null for scales with continuous domains.\n          // (For path marks, we will use \"defined\" property and skip these values instead.)\n\n          if (hasContinuousDomain(scaleType) && fieldDef.aggregate !== 'count' && !isPathMark(mark)) {\n            aggregator[fieldDef.field] = fieldDef; // we know that the fieldDef is a typed field def\n          }\n        }\n\n        return aggregator;\n      }, {});\n\n      if (!keys(filter).length) {\n        return null;\n      }\n\n      return new FilterInvalidNode(parent, filter);\n    }\n\n    dependentFields() {\n      return new Set(keys(this.filter));\n    }\n\n    producedFields() {\n      return new Set(); // filter does not produce any new fields\n    }\n\n    hash() {\n      return \"FilterInvalid \".concat(hash(this.filter));\n    }\n    /**\n     * Create the VgTransforms for each of the filtered fields.\n     */\n\n\n    assemble() {\n      const filters = keys(this.filter).reduce((vegaFilters, field) => {\n        const fieldDef = this.filter[field];\n        const ref = vgField(fieldDef, {\n          expr: 'datum'\n        });\n\n        if (fieldDef !== null) {\n          if (fieldDef.type === 'temporal') {\n            vegaFilters.push(\"(isDate(\".concat(ref, \") || (isValid(\").concat(ref, \") && isFinite(+\").concat(ref, \")))\"));\n          } else if (fieldDef.type === 'quantitative') {\n            vegaFilters.push(\"isValid(\".concat(ref, \")\"));\n            vegaFilters.push(\"isFinite(+\".concat(ref, \")\"));\n          } else ;\n        }\n\n        return vegaFilters;\n      }, []);\n      return filters.length > 0 ? {\n        type: 'filter',\n        expr: filters.join(' && ')\n      } : null;\n    }\n\n  }\n\n  /**\n   * A class for flatten transform nodes\n   */\n\n  class FlattenTransformNode extends DataFlowNode {\n    clone() {\n      return new FlattenTransformNode(this.parent, duplicate(this.transform));\n    }\n\n    constructor(parent, transform) {\n      super(parent);\n      this.transform = transform;\n      this.transform = duplicate(transform); // duplicate to prevent side effects\n\n      const {\n        flatten,\n        as = []\n      } = this.transform;\n      this.transform.as = flatten.map((f, i) => {\n        var _as$i;\n\n        return (_as$i = as[i]) !== null && _as$i !== void 0 ? _as$i : f;\n      });\n    }\n\n    dependentFields() {\n      return new Set(this.transform.flatten);\n    }\n\n    producedFields() {\n      return new Set(this.transform.as);\n    }\n\n    hash() {\n      return \"FlattenTransform \".concat(hash(this.transform));\n    }\n\n    assemble() {\n      const {\n        flatten: fields,\n        as\n      } = this.transform;\n      const result = {\n        type: 'flatten',\n        fields,\n        as\n      };\n      return result;\n    }\n\n  }\n\n  /**\n   * A class for flatten transform nodes\n   */\n\n  class FoldTransformNode extends DataFlowNode {\n    clone() {\n      return new FoldTransformNode(null, duplicate(this.transform));\n    }\n\n    constructor(parent, transform) {\n      var _this$transform$as, _specifiedAs$, _specifiedAs$2;\n\n      super(parent);\n      this.transform = transform;\n      this.transform = duplicate(transform); // duplicate to prevent side effects\n\n      const specifiedAs = (_this$transform$as = this.transform.as) !== null && _this$transform$as !== void 0 ? _this$transform$as : [undefined, undefined];\n      this.transform.as = [(_specifiedAs$ = specifiedAs[0]) !== null && _specifiedAs$ !== void 0 ? _specifiedAs$ : 'key', (_specifiedAs$2 = specifiedAs[1]) !== null && _specifiedAs$2 !== void 0 ? _specifiedAs$2 : 'value'];\n    }\n\n    dependentFields() {\n      return new Set(this.transform.fold);\n    }\n\n    producedFields() {\n      return new Set(this.transform.as);\n    }\n\n    hash() {\n      return \"FoldTransform \".concat(hash(this.transform));\n    }\n\n    assemble() {\n      const {\n        fold,\n        as\n      } = this.transform;\n      const result = {\n        type: 'fold',\n        fields: fold,\n        as\n      };\n      return result;\n    }\n\n  }\n\n  class GeoJSONNode extends DataFlowNode {\n    clone() {\n      return new GeoJSONNode(null, duplicate(this.fields), this.geojson, this.signal);\n    }\n\n    static parseAll(parent, model) {\n      if (model.component.projection && !model.component.projection.isFit) {\n        return parent;\n      }\n\n      let geoJsonCounter = 0;\n\n      for (const coordinates of [[LONGITUDE, LATITUDE], [LONGITUDE2, LATITUDE2]]) {\n        const pair = coordinates.map(channel => {\n          const def = getFieldOrDatumDef(model.encoding[channel]);\n          return isFieldDef(def) ? def.field : isDatumDef(def) ? {\n            expr: \"\".concat(def.datum)\n          } : isValueDef(def) ? {\n            expr: \"\".concat(def['value'])\n          } : undefined;\n        });\n\n        if (pair[0] || pair[1]) {\n          parent = new GeoJSONNode(parent, pair, null, model.getName(\"geojson_\".concat(geoJsonCounter++)));\n        }\n      }\n\n      if (model.channelHasField(SHAPE)) {\n        const fieldDef = model.typedFieldDef(SHAPE);\n\n        if (fieldDef.type === GEOJSON) {\n          parent = new GeoJSONNode(parent, null, fieldDef.field, model.getName(\"geojson_\".concat(geoJsonCounter++)));\n        }\n      }\n\n      return parent;\n    }\n\n    constructor(parent, fields, geojson, signal) {\n      super(parent);\n      this.fields = fields;\n      this.geojson = geojson;\n      this.signal = signal;\n    }\n\n    dependentFields() {\n      var _this$fields;\n\n      const fields = ((_this$fields = this.fields) !== null && _this$fields !== void 0 ? _this$fields : []).filter(isString);\n      return new Set([...(this.geojson ? [this.geojson] : []), ...fields]);\n    }\n\n    producedFields() {\n      return new Set();\n    }\n\n    hash() {\n      return \"GeoJSON \".concat(this.geojson, \" \").concat(this.signal, \" \").concat(hash(this.fields));\n    }\n\n    assemble() {\n      return {\n        type: 'geojson',\n        ...(this.fields ? {\n          fields: this.fields\n        } : {}),\n        ...(this.geojson ? {\n          geojson: this.geojson\n        } : {}),\n        signal: this.signal\n      };\n    }\n\n  }\n\n  class GeoPointNode extends DataFlowNode {\n    clone() {\n      return new GeoPointNode(null, this.projection, duplicate(this.fields), duplicate(this.as));\n    }\n\n    constructor(parent, projection, fields, as) {\n      super(parent);\n      this.projection = projection;\n      this.fields = fields;\n      this.as = as;\n    }\n\n    static parseAll(parent, model) {\n      if (!model.projectionName()) {\n        return parent;\n      }\n\n      for (const coordinates of [[LONGITUDE, LATITUDE], [LONGITUDE2, LATITUDE2]]) {\n        const pair = coordinates.map(channel => {\n          const def = getFieldOrDatumDef(model.encoding[channel]);\n          return isFieldDef(def) ? def.field : isDatumDef(def) ? {\n            expr: \"\".concat(def.datum)\n          } : isValueDef(def) ? {\n            expr: \"\".concat(def['value'])\n          } : undefined;\n        });\n        const suffix = coordinates[0] === LONGITUDE2 ? '2' : '';\n\n        if (pair[0] || pair[1]) {\n          parent = new GeoPointNode(parent, model.projectionName(), pair, [model.getName('x' + suffix), model.getName('y' + suffix)]);\n        }\n      }\n\n      return parent;\n    }\n\n    dependentFields() {\n      return new Set(this.fields.filter(isString));\n    }\n\n    producedFields() {\n      return new Set(this.as);\n    }\n\n    hash() {\n      return \"Geopoint \".concat(this.projection, \" \").concat(hash(this.fields), \" \").concat(hash(this.as));\n    }\n\n    assemble() {\n      return {\n        type: 'geopoint',\n        projection: this.projection,\n        fields: this.fields,\n        as: this.as\n      };\n    }\n\n  }\n\n  class ImputeNode extends DataFlowNode {\n    clone() {\n      return new ImputeNode(null, duplicate(this.transform));\n    }\n\n    constructor(parent, transform) {\n      super(parent);\n      this.transform = transform;\n    }\n\n    dependentFields() {\n      var _this$transform$group;\n\n      return new Set([this.transform.impute, this.transform.key, ...((_this$transform$group = this.transform.groupby) !== null && _this$transform$group !== void 0 ? _this$transform$group : [])]);\n    }\n\n    producedFields() {\n      return new Set([this.transform.impute]);\n    }\n\n    processSequence(keyvals) {\n      const {\n        start = 0,\n        stop,\n        step\n      } = keyvals;\n      const result = [start, stop, ...(step ? [step] : [])].join(',');\n      return {\n        signal: \"sequence(\".concat(result, \")\")\n      };\n    }\n\n    static makeFromTransform(parent, imputeTransform) {\n      return new ImputeNode(parent, imputeTransform);\n    }\n\n    static makeFromEncoding(parent, model) {\n      const encoding = model.encoding;\n      const xDef = encoding.x;\n      const yDef = encoding.y;\n\n      if (isFieldDef(xDef) && isFieldDef(yDef)) {\n        const imputedChannel = xDef.impute ? xDef : yDef.impute ? yDef : undefined;\n\n        if (imputedChannel === undefined) {\n          return undefined;\n        }\n\n        const keyChannel = xDef.impute ? yDef : yDef.impute ? xDef : undefined;\n        const {\n          method,\n          value,\n          frame,\n          keyvals\n        } = imputedChannel.impute;\n        const groupbyFields = pathGroupingFields(model.mark, encoding);\n        return new ImputeNode(parent, {\n          impute: imputedChannel.field,\n          key: keyChannel.field,\n          ...(method ? {\n            method\n          } : {}),\n          ...(value !== undefined ? {\n            value\n          } : {}),\n          ...(frame ? {\n            frame\n          } : {}),\n          ...(keyvals !== undefined ? {\n            keyvals\n          } : {}),\n          ...(groupbyFields.length ? {\n            groupby: groupbyFields\n          } : {})\n        });\n      }\n\n      return null;\n    }\n\n    hash() {\n      return \"Impute \".concat(hash(this.transform));\n    }\n\n    assemble() {\n      const {\n        impute,\n        key,\n        keyvals,\n        method,\n        groupby,\n        value,\n        frame = [null, null]\n      } = this.transform;\n      const imputeTransform = {\n        type: 'impute',\n        field: impute,\n        key,\n        ...(keyvals ? {\n          keyvals: isImputeSequence(keyvals) ? this.processSequence(keyvals) : keyvals\n        } : {}),\n        method: 'value',\n        ...(groupby ? {\n          groupby\n        } : {}),\n        value: !method || method === 'value' ? value : null\n      };\n\n      if (method && method !== 'value') {\n        const deriveNewField = {\n          type: 'window',\n          as: [\"imputed_\".concat(impute, \"_value\")],\n          ops: [method],\n          fields: [impute],\n          frame,\n          ignorePeers: false,\n          ...(groupby ? {\n            groupby\n          } : {})\n        };\n        const replaceOriginal = {\n          type: 'formula',\n          expr: \"datum.\".concat(impute, \" === null ? datum.imputed_\").concat(impute, \"_value : datum.\").concat(impute),\n          as: impute\n        };\n        return [imputeTransform, deriveNewField, replaceOriginal];\n      } else {\n        return [imputeTransform];\n      }\n    }\n\n  }\n\n  /**\n   * A class for loess transform nodes\n   */\n\n  class LoessTransformNode extends DataFlowNode {\n    clone() {\n      return new LoessTransformNode(null, duplicate(this.transform));\n    }\n\n    constructor(parent, transform) {\n      var _this$transform$as, _specifiedAs$, _specifiedAs$2;\n\n      super(parent);\n      this.transform = transform;\n      this.transform = duplicate(transform); // duplicate to prevent side effects\n\n      const specifiedAs = (_this$transform$as = this.transform.as) !== null && _this$transform$as !== void 0 ? _this$transform$as : [undefined, undefined];\n      this.transform.as = [(_specifiedAs$ = specifiedAs[0]) !== null && _specifiedAs$ !== void 0 ? _specifiedAs$ : transform.on, (_specifiedAs$2 = specifiedAs[1]) !== null && _specifiedAs$2 !== void 0 ? _specifiedAs$2 : transform.loess];\n    }\n\n    dependentFields() {\n      var _this$transform$group;\n\n      return new Set([this.transform.loess, this.transform.on, ...((_this$transform$group = this.transform.groupby) !== null && _this$transform$group !== void 0 ? _this$transform$group : [])]);\n    }\n\n    producedFields() {\n      return new Set(this.transform.as);\n    }\n\n    hash() {\n      return \"LoessTransform \".concat(hash(this.transform));\n    }\n\n    assemble() {\n      const {\n        loess,\n        on,\n        ...rest\n      } = this.transform;\n      const result = {\n        type: 'loess',\n        x: on,\n        y: loess,\n        ...rest\n      };\n      return result;\n    }\n\n  }\n\n  class LookupNode extends DataFlowNode {\n    clone() {\n      return new LookupNode(null, duplicate(this.transform), this.secondary);\n    }\n\n    constructor(parent, transform, secondary) {\n      super(parent);\n      this.transform = transform;\n      this.secondary = secondary;\n    }\n\n    static make(parent, model, transform, counter) {\n      const sources = model.component.data.sources;\n      const {\n        from\n      } = transform;\n      let fromOutputNode = null;\n\n      if (isLookupData(from)) {\n        let fromSource = findSource(from.data, sources);\n\n        if (!fromSource) {\n          fromSource = new SourceNode(from.data);\n          sources.push(fromSource);\n        }\n\n        const fromOutputName = model.getName(\"lookup_\".concat(counter));\n        fromOutputNode = new OutputNode(fromSource, fromOutputName, DataSourceType.Lookup, model.component.data.outputNodeRefCounts);\n        model.component.data.outputNodes[fromOutputName] = fromOutputNode;\n      } else if (isLookupSelection(from)) {\n        const selName = from.selection;\n        transform = {\n          as: selName,\n          ...transform\n        };\n        fromOutputNode = model.getSelectionComponent(varName(selName), selName).materialized;\n\n        if (!fromOutputNode) {\n          throw new Error(noSameUnitLookup(selName));\n        }\n      }\n\n      return new LookupNode(parent, transform, fromOutputNode.getSource());\n    }\n\n    dependentFields() {\n      return new Set([this.transform.lookup]);\n    }\n\n    producedFields() {\n      return new Set(this.transform.as ? array(this.transform.as) : this.transform.from.fields);\n    }\n\n    hash() {\n      return \"Lookup \".concat(hash({\n        transform: this.transform,\n        secondary: this.secondary\n      }));\n    }\n\n    assemble() {\n      let foreign;\n\n      if (this.transform.from.fields) {\n        // lookup a few fields and add create a flat output\n        foreign = {\n          values: this.transform.from.fields,\n          ...(this.transform.as ? {\n            as: array(this.transform.as)\n          } : {})\n        };\n      } else {\n        // lookup full record and nest it\n        let asName = this.transform.as;\n\n        if (!isString(asName)) {\n          warn(NO_FIELDS_NEEDS_AS);\n          asName = '_lookup';\n        }\n\n        foreign = {\n          as: [asName]\n        };\n      }\n\n      return {\n        type: 'lookup',\n        from: this.secondary,\n        key: this.transform.from.key,\n        fields: [this.transform.lookup],\n        ...foreign,\n        ...(this.transform.default ? {\n          default: this.transform.default\n        } : {})\n      };\n    }\n\n  }\n\n  /**\n   * A class for quantile transform nodes\n   */\n\n  class QuantileTransformNode extends DataFlowNode {\n    clone() {\n      return new QuantileTransformNode(null, duplicate(this.transform));\n    }\n\n    constructor(parent, transform) {\n      var _this$transform$as, _specifiedAs$, _specifiedAs$2;\n\n      super(parent);\n      this.transform = transform;\n      this.transform = duplicate(transform); // duplicate to prevent side effects\n\n      const specifiedAs = (_this$transform$as = this.transform.as) !== null && _this$transform$as !== void 0 ? _this$transform$as : [undefined, undefined];\n      this.transform.as = [(_specifiedAs$ = specifiedAs[0]) !== null && _specifiedAs$ !== void 0 ? _specifiedAs$ : 'prob', (_specifiedAs$2 = specifiedAs[1]) !== null && _specifiedAs$2 !== void 0 ? _specifiedAs$2 : 'value'];\n    }\n\n    dependentFields() {\n      var _this$transform$group;\n\n      return new Set([this.transform.quantile, ...((_this$transform$group = this.transform.groupby) !== null && _this$transform$group !== void 0 ? _this$transform$group : [])]);\n    }\n\n    producedFields() {\n      return new Set(this.transform.as);\n    }\n\n    hash() {\n      return \"QuantileTransform \".concat(hash(this.transform));\n    }\n\n    assemble() {\n      const {\n        quantile,\n        ...rest\n      } = this.transform;\n      const result = {\n        type: 'quantile',\n        field: quantile,\n        ...rest\n      };\n      return result;\n    }\n\n  }\n\n  /**\n   * A class for regression transform nodes\n   */\n\n  class RegressionTransformNode extends DataFlowNode {\n    clone() {\n      return new RegressionTransformNode(null, duplicate(this.transform));\n    }\n\n    constructor(parent, transform) {\n      var _this$transform$as, _specifiedAs$, _specifiedAs$2;\n\n      super(parent);\n      this.transform = transform;\n      this.transform = duplicate(transform); // duplicate to prevent side effects\n\n      const specifiedAs = (_this$transform$as = this.transform.as) !== null && _this$transform$as !== void 0 ? _this$transform$as : [undefined, undefined];\n      this.transform.as = [(_specifiedAs$ = specifiedAs[0]) !== null && _specifiedAs$ !== void 0 ? _specifiedAs$ : transform.on, (_specifiedAs$2 = specifiedAs[1]) !== null && _specifiedAs$2 !== void 0 ? _specifiedAs$2 : transform.regression];\n    }\n\n    dependentFields() {\n      var _this$transform$group;\n\n      return new Set([this.transform.regression, this.transform.on, ...((_this$transform$group = this.transform.groupby) !== null && _this$transform$group !== void 0 ? _this$transform$group : [])]);\n    }\n\n    producedFields() {\n      return new Set(this.transform.as);\n    }\n\n    hash() {\n      return \"RegressionTransform \".concat(hash(this.transform));\n    }\n\n    assemble() {\n      const {\n        regression,\n        on,\n        ...rest\n      } = this.transform;\n      const result = {\n        type: 'regression',\n        x: on,\n        y: regression,\n        ...rest\n      };\n      return result;\n    }\n\n  }\n\n  /**\n   * A class for pivot transform nodes.\n   */\n\n  class PivotTransformNode extends DataFlowNode {\n    clone() {\n      return new PivotTransformNode(null, duplicate(this.transform));\n    }\n\n    constructor(parent, transform) {\n      super(parent);\n      this.transform = transform;\n    }\n\n    addDimensions(fields) {\n      var _this$transform$group;\n\n      this.transform.groupby = unique(((_this$transform$group = this.transform.groupby) !== null && _this$transform$group !== void 0 ? _this$transform$group : []).concat(fields), d => d);\n    }\n\n    producedFields() {\n      return undefined; // return undefined so that potentially everything can depend on the pivot\n    }\n\n    dependentFields() {\n      var _this$transform$group2;\n\n      return new Set([this.transform.pivot, this.transform.value, ...((_this$transform$group2 = this.transform.groupby) !== null && _this$transform$group2 !== void 0 ? _this$transform$group2 : [])]);\n    }\n\n    hash() {\n      return \"PivotTransform \".concat(hash(this.transform));\n    }\n\n    assemble() {\n      const {\n        pivot,\n        value,\n        groupby,\n        limit,\n        op\n      } = this.transform;\n      return {\n        type: 'pivot',\n        field: pivot,\n        value,\n        ...(limit !== undefined ? {\n          limit\n        } : {}),\n        ...(op !== undefined ? {\n          op\n        } : {}),\n        ...(groupby !== undefined ? {\n          groupby\n        } : {})\n      };\n    }\n\n  }\n\n  /**\n   * A class for the sample transform nodes\n   */\n\n  class SampleTransformNode extends DataFlowNode {\n    clone() {\n      return new SampleTransformNode(null, duplicate(this.transform));\n    }\n\n    constructor(parent, transform) {\n      super(parent);\n      this.transform = transform;\n    }\n\n    dependentFields() {\n      return new Set();\n    }\n\n    producedFields() {\n      return new Set();\n    }\n\n    hash() {\n      return \"SampleTransform \".concat(hash(this.transform));\n    }\n\n    assemble() {\n      return {\n        type: 'sample',\n        size: this.transform.sample\n      };\n    }\n\n  }\n\n  function makeWalkTree(data) {\n    // to name datasources\n    let datasetIndex = 0;\n    /**\n     * Recursively walk down the tree.\n     */\n\n    function walkTree(node, dataSource) {\n      if (node instanceof SourceNode) {\n        // If the source is a named data source or a data source with values, we need\n        // to put it in a different data source. Otherwise, Vega may override the data.\n        if (!node.isGenerator && !isUrlData(node.data)) {\n          data.push(dataSource);\n          const newData = {\n            name: null,\n            source: dataSource.name,\n            transform: []\n          };\n          dataSource = newData;\n        }\n      }\n\n      if (node instanceof ParseNode) {\n        if (node.parent instanceof SourceNode && !dataSource.source) {\n          var _dataSource$format;\n\n          // If node's parent is a root source and the data source does not refer to another data source, use normal format parse\n          dataSource.format = { ...((_dataSource$format = dataSource.format) !== null && _dataSource$format !== void 0 ? _dataSource$format : {}),\n            parse: node.assembleFormatParse()\n          }; // add calculates for all nested fields\n\n          dataSource.transform.push(...node.assembleTransforms(true));\n        } else {\n          // Otherwise use Vega expression to parse\n          dataSource.transform.push(...node.assembleTransforms());\n        }\n      }\n\n      if (node instanceof FacetNode) {\n        if (!dataSource.name) {\n          dataSource.name = \"data_\".concat(datasetIndex++);\n        }\n\n        if (!dataSource.source || dataSource.transform.length > 0) {\n          data.push(dataSource);\n          node.data = dataSource.name;\n        } else {\n          node.data = dataSource.source;\n        }\n\n        for (const d of node.assemble()) {\n          data.push(d);\n        } // break here because the rest of the tree has to be taken care of by the facet.\n\n\n        return;\n      }\n\n      if (node instanceof GraticuleNode || node instanceof SequenceNode || node instanceof FilterInvalidNode || node instanceof FilterNode || node instanceof CalculateNode || node instanceof GeoPointNode || node instanceof GeoJSONNode || node instanceof AggregateNode || node instanceof LookupNode || node instanceof WindowTransformNode || node instanceof JoinAggregateTransformNode || node instanceof FoldTransformNode || node instanceof FlattenTransformNode || node instanceof DensityTransformNode || node instanceof LoessTransformNode || node instanceof QuantileTransformNode || node instanceof RegressionTransformNode || node instanceof IdentifierNode || node instanceof SampleTransformNode || node instanceof PivotTransformNode) {\n        dataSource.transform.push(node.assemble());\n      }\n\n      if (node instanceof BinNode || node instanceof TimeUnitNode || node instanceof ImputeNode || node instanceof StackNode) {\n        dataSource.transform.push(...node.assemble());\n      }\n\n      if (node instanceof OutputNode) {\n        if (dataSource.source && dataSource.transform.length === 0) {\n          node.setSource(dataSource.source);\n        } else if (node.parent instanceof OutputNode) {\n          // Note that an output node may be required but we still do not assemble a\n          // separate data source for it.\n          node.setSource(dataSource.name);\n        } else {\n          if (!dataSource.name) {\n            dataSource.name = \"data_\".concat(datasetIndex++);\n          } // Here we set the name of the datasource we generated. From now on\n          // other assemblers can use it.\n\n\n          node.setSource(dataSource.name); // if this node has more than one child, we will add a datasource automatically\n\n          if (node.numChildren() === 1) {\n            data.push(dataSource);\n            const newData = {\n              name: null,\n              source: dataSource.name,\n              transform: []\n            };\n            dataSource = newData;\n          }\n        }\n      }\n\n      switch (node.numChildren()) {\n        case 0:\n          // done\n          if (node instanceof OutputNode && (!dataSource.source || dataSource.transform.length > 0)) {\n            // do not push empty datasources that are simply references\n            data.push(dataSource);\n          }\n\n          break;\n\n        case 1:\n          walkTree(node.children[0], dataSource);\n          break;\n\n        default:\n          {\n            if (!dataSource.name) {\n              dataSource.name = \"data_\".concat(datasetIndex++);\n            }\n\n            let source = dataSource.name;\n\n            if (!dataSource.source || dataSource.transform.length > 0) {\n              data.push(dataSource);\n            } else {\n              source = dataSource.source;\n            }\n\n            for (const child of node.children) {\n              const newData = {\n                name: null,\n                source: source,\n                transform: []\n              };\n              walkTree(child, newData);\n            }\n\n            break;\n          }\n      }\n    }\n\n    return walkTree;\n  }\n  /**\n   * Assemble data sources that are derived from faceted data.\n   */\n\n\n  function assembleFacetData(root) {\n    const data = [];\n    const walkTree = makeWalkTree(data);\n\n    for (const child of root.children) {\n      walkTree(child, {\n        source: root.name,\n        name: null,\n        transform: []\n      });\n    }\n\n    return data;\n  }\n  /**\n   * Create Vega data array from a given compiled model and append all of them to the given array\n   *\n   * @param  model\n   * @param  data array\n   * @return modified data array\n   */\n\n  function assembleRootData(dataComponent, datasets) {\n    const data = []; // dataComponent.sources.forEach(debug);\n    // draw(dataComponent.sources);\n\n    const walkTree = makeWalkTree(data);\n    let sourceIndex = 0;\n\n    for (const root of dataComponent.sources) {\n      // assign a name if the source does not have a name yet\n      if (!root.hasName()) {\n        root.dataName = \"source_\".concat(sourceIndex++);\n      }\n\n      const newData = root.assemble();\n      walkTree(root, newData);\n    } // remove empty transform arrays for cleaner output\n\n\n    for (const d of data) {\n      if (d.transform.length === 0) {\n        delete d.transform;\n      }\n    } // move sources without transforms (the ones that are potentially used in lookups) to the beginning\n\n\n    let whereTo = 0;\n\n    for (const [i, d] of data.entries()) {\n      var _d$transform;\n\n      if (((_d$transform = d.transform) !== null && _d$transform !== void 0 ? _d$transform : []).length === 0 && !d.source) {\n        data.splice(whereTo++, 0, data.splice(i, 1)[0]);\n      }\n    } // now fix the from references in lookup transforms\n\n\n    for (const d of data) {\n      for (const t of (_d$transform2 = d.transform) !== null && _d$transform2 !== void 0 ? _d$transform2 : []) {\n        var _d$transform2;\n\n        if (t.type === 'lookup') {\n          t.from = dataComponent.outputNodes[t.from].getSource();\n        }\n      }\n    } // inline values for datasets that are in the datastore\n\n\n    for (const d of data) {\n      if (d.name in datasets) {\n        d.values = datasets[d.name];\n      }\n    }\n\n    return data;\n  }\n\n  function getHeaderType(orient) {\n    if (orient === 'top' || orient === 'left' || isSignalRef(orient)) {\n      // we always use header for orient signal since we can't dynamically make header becomes footer\n      return 'header';\n    }\n\n    return 'footer';\n  }\n  function parseFacetHeaders(model) {\n    for (const channel of FACET_CHANNELS) {\n      parseFacetHeader(model, channel);\n    }\n\n    mergeChildAxis(model, 'x');\n    mergeChildAxis(model, 'y');\n  }\n\n  function parseFacetHeader(model, channel) {\n    const {\n      facet,\n      config,\n      child,\n      component\n    } = model;\n\n    if (model.channelHasField(channel)) {\n      var _fieldDef$header;\n\n      const fieldDef = facet[channel];\n      const titleConfig = getHeaderProperty('title', null, config, channel);\n      let title$1 = title(fieldDef, config, {\n        allowDisabling: true,\n        includeDefault: titleConfig === undefined || !!titleConfig\n      });\n\n      if (child.component.layoutHeaders[channel].title) {\n        // TODO: better handle multiline titles\n        title$1 = isArray(title$1) ? title$1.join(', ') : title$1; // merge title with child to produce \"Title / Subtitle / Sub-subtitle\"\n\n        title$1 += ' / ' + child.component.layoutHeaders[channel].title;\n        child.component.layoutHeaders[channel].title = null;\n      }\n\n      const labelOrient = getHeaderProperty('labelOrient', fieldDef, config, channel);\n      const header = (_fieldDef$header = fieldDef.header) !== null && _fieldDef$header !== void 0 ? _fieldDef$header : {};\n      const labels = getFirstDefined(header.labels, config.header.labels, true);\n      const headerType = contains(['bottom', 'right'], labelOrient) ? 'footer' : 'header';\n      component.layoutHeaders[channel] = {\n        title: title$1,\n        facetFieldDef: fieldDef,\n        [headerType]: channel === 'facet' ? [] : [makeHeaderComponent(model, channel, labels)]\n      };\n    }\n  }\n\n  function makeHeaderComponent(model, channel, labels) {\n    const sizeType = channel === 'row' ? 'height' : 'width';\n    return {\n      labels,\n      sizeSignal: model.child.component.layoutSize.get(sizeType) ? model.child.getSizeSignalRef(sizeType) : undefined,\n      axes: []\n    };\n  }\n\n  function mergeChildAxis(model, channel) {\n    const {\n      child\n    } = model;\n\n    if (child.component.axes[channel]) {\n      const {\n        layoutHeaders,\n        resolve\n      } = model.component;\n      resolve.axis[channel] = parseGuideResolve(resolve, channel);\n\n      if (resolve.axis[channel] === 'shared') {\n        // For shared axis, move the axes to facet's header or footer\n        const headerChannel = channel === 'x' ? 'column' : 'row';\n        const layoutHeader = layoutHeaders[headerChannel];\n\n        for (const axisComponent of child.component.axes[channel]) {\n          var _layoutHeader$headerT;\n\n          const headerType = getHeaderType(axisComponent.get('orient'));\n          layoutHeader[headerType] = (_layoutHeader$headerT = layoutHeader[headerType]) !== null && _layoutHeader$headerT !== void 0 ? _layoutHeader$headerT : [makeHeaderComponent(model, headerChannel, false)]; // FIXME: assemble shouldn't be called here, but we do it this way so we only extract the main part of the axes\n\n          const mainAxis = assembleAxis(axisComponent, 'main', model.config, {\n            header: true\n          });\n\n          if (mainAxis) {\n            // LayoutHeader no longer keep track of property precedence, thus let's combine.\n            layoutHeader[headerType][0].axes.push(mainAxis);\n          }\n\n          axisComponent.mainExtracted = true;\n        }\n      }\n    }\n  }\n\n  function parseLayerLayoutSize(model) {\n    parseChildrenLayoutSize(model);\n    parseNonUnitLayoutSizeForChannel(model, 'width');\n    parseNonUnitLayoutSizeForChannel(model, 'height');\n  }\n  function parseConcatLayoutSize(model) {\n    parseChildrenLayoutSize(model); // for columns === 1 (vconcat), we can completely merge width. Otherwise, we can treat merged width as childWidth.\n\n    const widthType = model.layout.columns === 1 ? 'width' : 'childWidth'; // for columns === undefined (hconcat), we can completely merge height. Otherwise, we can treat merged height as childHeight.\n\n    const heightType = model.layout.columns === undefined ? 'height' : 'childHeight';\n    parseNonUnitLayoutSizeForChannel(model, widthType);\n    parseNonUnitLayoutSizeForChannel(model, heightType);\n  }\n  function parseChildrenLayoutSize(model) {\n    for (const child of model.children) {\n      child.parseLayoutSize();\n    }\n  }\n  /**\n   * Merge child layout size (width or height).\n   */\n\n  function parseNonUnitLayoutSizeForChannel(model, layoutSizeType) {\n    /*\n     * For concat, the parent width or height might not be the same as the children's shared height.\n     * For example, hconcat's subviews may share width, but the shared width is not the hconcat view's width.\n     *\n     * layoutSizeType represents the output of the view (could be childWidth/childHeight/width/height)\n     * while the sizeType represents the properties of the child.\n     */\n    const sizeType = getSizeTypeFromLayoutSizeType(layoutSizeType);\n    const channel = getPositionScaleChannel(sizeType);\n    const resolve = model.component.resolve;\n    const layoutSizeCmpt = model.component.layoutSize;\n    let mergedSize; // Try to merge layout size\n\n    for (const child of model.children) {\n      const childSize = child.component.layoutSize.getWithExplicit(sizeType);\n      const scaleResolve = resolve.scale[channel];\n\n      if (scaleResolve === 'independent' && childSize.value === 'step') {\n        // Do not merge independent scales with range-step as their size depends\n        // on the scale domains, which can be different between scales.\n        mergedSize = undefined;\n        break;\n      }\n\n      if (mergedSize) {\n        if (scaleResolve === 'independent' && mergedSize.value !== childSize.value) {\n          // For independent scale, only merge if all the sizes are the same.\n          // If the values are different, abandon the merge!\n          mergedSize = undefined;\n          break;\n        }\n\n        mergedSize = mergeValuesWithExplicit(mergedSize, childSize, sizeType, '');\n      } else {\n        mergedSize = childSize;\n      }\n    }\n\n    if (mergedSize) {\n      // If merged, rename size and set size of all children.\n      for (const child of model.children) {\n        model.renameSignal(child.getName(sizeType), model.getName(layoutSizeType));\n        child.component.layoutSize.set(sizeType, 'merged', false);\n      }\n\n      layoutSizeCmpt.setWithExplicit(layoutSizeType, mergedSize);\n    } else {\n      layoutSizeCmpt.setWithExplicit(layoutSizeType, {\n        explicit: false,\n        value: undefined\n      });\n    }\n  }\n\n  function parseUnitLayoutSize(model) {\n    const {\n      size,\n      component\n    } = model;\n\n    for (const channel of POSITION_SCALE_CHANNELS) {\n      const sizeType = getSizeChannel(channel);\n\n      if (size[sizeType]) {\n        const specifiedSize = size[sizeType];\n        component.layoutSize.set(sizeType, isStep(specifiedSize) ? 'step' : specifiedSize, true);\n      } else {\n        const defaultSize = defaultUnitSize(model, sizeType);\n        component.layoutSize.set(sizeType, defaultSize, false);\n      }\n    }\n  }\n\n  function defaultUnitSize(model, sizeType) {\n    const channel = sizeType === 'width' ? 'x' : 'y';\n    const config = model.config;\n    const scaleComponent = model.getScaleComponent(channel);\n\n    if (scaleComponent) {\n      const scaleType = scaleComponent.get('type');\n      const range = scaleComponent.get('range');\n\n      if (hasDiscreteDomain(scaleType)) {\n        const size = getViewConfigDiscreteSize(config.view, sizeType);\n\n        if (isVgRangeStep(range) || isStep(size)) {\n          // For discrete domain with range.step, use dynamic width/height\n          return 'step';\n        } else {\n          return size;\n        }\n      } else {\n        return getViewConfigContinuousSize(config.view, sizeType);\n      }\n    } else if (model.hasProjection || model.mark === 'arc') {\n      // arc should use continuous size by default otherwise the pie is extremely small\n      return getViewConfigContinuousSize(config.view, sizeType);\n    } else {\n      const size = getViewConfigDiscreteSize(config.view, sizeType);\n      return isStep(size) ? size.step : size;\n    }\n  }\n\n  function facetSortFieldName(fieldDef, sort, opt) {\n    return vgField(sort, {\n      suffix: \"by_\".concat(vgField(fieldDef)),\n      ...(opt !== null && opt !== void 0 ? opt : {})\n    });\n  }\n  class FacetModel extends ModelWithField {\n    constructor(spec, parent, parentGivenName, config) {\n      super(spec, 'facet', parent, parentGivenName, config, spec.resolve);\n\n      _defineProperty(this, \"facet\", void 0);\n\n      _defineProperty(this, \"child\", void 0);\n\n      _defineProperty(this, \"children\", void 0);\n\n      this.child = buildModel(spec.spec, this, this.getName('child'), undefined, config);\n      this.children = [this.child];\n      this.facet = this.initFacet(spec.facet);\n    }\n\n    initFacet(facet) {\n      // clone to prevent side effect to the original spec\n      if (!isFacetMapping(facet)) {\n        return {\n          facet: this.initFacetFieldDef(facet, 'facet')\n        };\n      }\n\n      const channels = keys(facet);\n      const normalizedFacet = {};\n\n      for (const channel of channels) {\n        if (!contains([ROW, COLUMN], channel)) {\n          // Drop unsupported channel\n          warn(incompatibleChannel(channel, 'facet'));\n          break;\n        }\n\n        const fieldDef = facet[channel];\n\n        if (fieldDef.field === undefined) {\n          warn(emptyFieldDef(fieldDef, channel));\n          break;\n        }\n\n        normalizedFacet[channel] = this.initFacetFieldDef(fieldDef, channel);\n      }\n\n      return normalizedFacet;\n    }\n\n    initFacetFieldDef(fieldDef, channel) {\n      const {\n        header,\n        ...rest\n      } = fieldDef; // Cast because we call initFieldDef, which assumes general FieldDef.\n      // However, FacetFieldDef is a bit more constrained than the general FieldDef\n\n      const facetFieldDef = initFieldDef(rest, channel);\n\n      if (header) {\n        facetFieldDef.header = replaceExprRefInIndex(header);\n      }\n\n      return facetFieldDef;\n    }\n\n    channelHasField(channel) {\n      return !!this.facet[channel];\n    }\n\n    fieldDef(channel) {\n      return this.facet[channel];\n    }\n\n    parseData() {\n      this.component.data = parseData(this);\n      this.child.parseData();\n    }\n\n    parseLayoutSize() {\n      parseChildrenLayoutSize(this);\n    }\n\n    parseSelections() {\n      // As a facet has a single child, the selection components are the same.\n      // The child maintains its selections to assemble signals, which remain\n      // within its unit.\n      this.child.parseSelections();\n      this.component.selection = this.child.component.selection;\n    }\n\n    parseMarkGroup() {\n      this.child.parseMarkGroup();\n    }\n\n    parseAxesAndHeaders() {\n      this.child.parseAxesAndHeaders();\n      parseFacetHeaders(this);\n    }\n\n    assembleSelectionTopLevelSignals(signals) {\n      return this.child.assembleSelectionTopLevelSignals(signals);\n    }\n\n    assembleSignals() {\n      this.child.assembleSignals();\n      return [];\n    }\n\n    assembleSelectionData(data) {\n      return this.child.assembleSelectionData(data);\n    }\n\n    getHeaderLayoutMixins() {\n      const layoutMixins = {};\n\n      for (const channel of FACET_CHANNELS) {\n        for (const headerType of HEADER_TYPES) {\n          const layoutHeaderComponent = this.component.layoutHeaders[channel];\n          const headerComponent = layoutHeaderComponent[headerType];\n          const {\n            facetFieldDef\n          } = layoutHeaderComponent;\n\n          if (facetFieldDef) {\n            const titleOrient = getHeaderProperty('titleOrient', facetFieldDef.header, this.config, channel);\n\n            if (contains(['right', 'bottom'], titleOrient)) {\n              var _layoutMixins$titleAn;\n\n              const headerChannel = getHeaderChannel(channel, titleOrient);\n              layoutMixins.titleAnchor = (_layoutMixins$titleAn = layoutMixins.titleAnchor) !== null && _layoutMixins$titleAn !== void 0 ? _layoutMixins$titleAn : {};\n              layoutMixins.titleAnchor[headerChannel] = 'end';\n            }\n          }\n\n          if (headerComponent === null || headerComponent === void 0 ? void 0 : headerComponent[0]) {\n            // set header/footerBand\n            const sizeType = channel === 'row' ? 'height' : 'width';\n            const bandType = headerType === 'header' ? 'headerBand' : 'footerBand';\n\n            if (channel !== 'facet' && !this.child.component.layoutSize.get(sizeType)) {\n              var _layoutMixins$bandTyp;\n\n              // If facet child does not have size signal, then apply headerBand\n              layoutMixins[bandType] = (_layoutMixins$bandTyp = layoutMixins[bandType]) !== null && _layoutMixins$bandTyp !== void 0 ? _layoutMixins$bandTyp : {};\n              layoutMixins[bandType][channel] = 0.5;\n            }\n\n            if (layoutHeaderComponent.title) {\n              var _layoutMixins$offset;\n\n              layoutMixins.offset = (_layoutMixins$offset = layoutMixins.offset) !== null && _layoutMixins$offset !== void 0 ? _layoutMixins$offset : {};\n              layoutMixins.offset[channel === 'row' ? 'rowTitle' : 'columnTitle'] = 10;\n            }\n          }\n        }\n      }\n\n      return layoutMixins;\n    }\n\n    assembleDefaultLayout() {\n      const {\n        column,\n        row\n      } = this.facet;\n      const columns = column ? this.columnDistinctSignal() : row ? 1 : undefined;\n      let align = 'all'; // Do not align the cells if the scale corresponding to the direction is indepent.\n      // We always align when we facet into both row and column.\n\n      if (!row && this.component.resolve.scale.x === 'independent') {\n        align = 'none';\n      } else if (!column && this.component.resolve.scale.y === 'independent') {\n        align = 'none';\n      }\n\n      return { ...this.getHeaderLayoutMixins(),\n        ...(columns ? {\n          columns\n        } : {}),\n        bounds: 'full',\n        align\n      };\n    }\n\n    assembleLayoutSignals() {\n      // FIXME(https://github.com/vega/vega-lite/issues/1193): this can be incorrect if we have independent scales.\n      return this.child.assembleLayoutSignals();\n    }\n\n    columnDistinctSignal() {\n      if (this.parent && this.parent instanceof FacetModel) {\n        // For nested facet, we will add columns to group mark instead\n        // See discussion in https://github.com/vega/vega/issues/952\n        // and https://github.com/vega/vega-view/releases/tag/v1.2.6\n        return undefined;\n      } else {\n        // In facetNode.assemble(), the name is always this.getName('column') + '_layout'.\n        const facetLayoutDataName = this.getName('column_domain');\n        return {\n          signal: \"length(data('\".concat(facetLayoutDataName, \"'))\")\n        };\n      }\n    }\n\n    assembleGroup(signals) {\n      if (this.parent && this.parent instanceof FacetModel) {\n        // Provide number of columns for layout.\n        // See discussion in https://github.com/vega/vega/issues/952\n        // and https://github.com/vega/vega-view/releases/tag/v1.2.6\n        return { ...(this.channelHasField('column') ? {\n            encode: {\n              update: {\n                // TODO(https://github.com/vega/vega-lite/issues/2759):\n                // Correct the signal for facet of concat of facet_column\n                columns: {\n                  field: vgField(this.facet.column, {\n                    prefix: 'distinct'\n                  })\n                }\n              }\n            }\n          } : {}),\n          ...super.assembleGroup(signals)\n        };\n      }\n\n      return super.assembleGroup(signals);\n    }\n    /**\n     * Aggregate cardinality for calculating size\n     */\n\n\n    getCardinalityAggregateForChild() {\n      const fields = [];\n      const ops = [];\n      const as = [];\n\n      if (this.child instanceof FacetModel) {\n        if (this.child.channelHasField('column')) {\n          const field = vgField(this.child.facet.column);\n          fields.push(field);\n          ops.push('distinct');\n          as.push(\"distinct_\".concat(field));\n        }\n      } else {\n        for (const channel of POSITION_SCALE_CHANNELS) {\n          const childScaleComponent = this.child.component.scales[channel];\n\n          if (childScaleComponent && !childScaleComponent.merged) {\n            const type = childScaleComponent.get('type');\n            const range = childScaleComponent.get('range');\n\n            if (hasDiscreteDomain(type) && isVgRangeStep(range)) {\n              const domain = assembleDomain(this.child, channel);\n              const field = getFieldFromDomain(domain);\n\n              if (field) {\n                fields.push(field);\n                ops.push('distinct');\n                as.push(\"distinct_\".concat(field));\n              } else {\n                warn(unknownField(channel));\n              }\n            }\n          }\n        }\n      }\n\n      return {\n        fields,\n        ops,\n        as\n      };\n    }\n\n    assembleFacet() {\n      const {\n        name,\n        data\n      } = this.component.data.facetRoot;\n      const {\n        row,\n        column\n      } = this.facet;\n      const {\n        fields,\n        ops,\n        as\n      } = this.getCardinalityAggregateForChild();\n      const groupby = [];\n\n      for (const channel of FACET_CHANNELS) {\n        const fieldDef = this.facet[channel];\n\n        if (fieldDef) {\n          groupby.push(vgField(fieldDef));\n          const {\n            bin,\n            sort\n          } = fieldDef;\n\n          if (isBinning(bin)) {\n            groupby.push(vgField(fieldDef, {\n              binSuffix: 'end'\n            }));\n          }\n\n          if (isSortField(sort)) {\n            const {\n              field,\n              op = DEFAULT_SORT_OP\n            } = sort;\n            const outputName = facetSortFieldName(fieldDef, sort);\n\n            if (row && column) {\n              // For crossed facet, use pre-calculate field as it requires a different groupby\n              // For each calculated field, apply max and assign them to the same name as\n              // all values of the same group should be the same anyway.\n              fields.push(outputName);\n              ops.push('max');\n              as.push(outputName);\n            } else {\n              fields.push(field);\n              ops.push(op);\n              as.push(outputName);\n            }\n          } else if (isArray(sort)) {\n            const outputName = sortArrayIndexField(fieldDef, channel);\n            fields.push(outputName);\n            ops.push('max');\n            as.push(outputName);\n          }\n        }\n      }\n\n      const cross = !!row && !!column;\n      return {\n        name,\n        data,\n        groupby,\n        ...(cross || fields.length > 0 ? {\n          aggregate: { ...(cross ? {\n              cross\n            } : {}),\n            ...(fields.length ? {\n              fields,\n              ops,\n              as\n            } : {})\n          }\n        } : {})\n      };\n    }\n\n    facetSortFields(channel) {\n      const {\n        facet\n      } = this;\n      const fieldDef = facet[channel];\n\n      if (fieldDef) {\n        if (isSortField(fieldDef.sort)) {\n          return [facetSortFieldName(fieldDef, fieldDef.sort, {\n            expr: 'datum'\n          })];\n        } else if (isArray(fieldDef.sort)) {\n          return [sortArrayIndexField(fieldDef, channel, {\n            expr: 'datum'\n          })];\n        }\n\n        return [vgField(fieldDef, {\n          expr: 'datum'\n        })];\n      }\n\n      return [];\n    }\n\n    facetSortOrder(channel) {\n      const {\n        facet\n      } = this;\n      const fieldDef = facet[channel];\n\n      if (fieldDef) {\n        const {\n          sort\n        } = fieldDef;\n        const order = (isSortField(sort) ? sort.order : !isArray(sort) && sort) || 'ascending';\n        return [order];\n      }\n\n      return [];\n    }\n\n    assembleLabelTitle() {\n      const {\n        facet,\n        config\n      } = this;\n\n      if (facet.facet) {\n        // Facet always uses title to display labels\n        return assembleLabelTitle(facet.facet, 'facet', config);\n      }\n\n      const ORTHOGONAL_ORIENT = {\n        row: ['top', 'bottom'],\n        column: ['left', 'right']\n      };\n\n      for (const channel of HEADER_CHANNELS) {\n        if (facet[channel]) {\n          var _facet$channel;\n\n          const labelOrient = getHeaderProperty('labelOrient', (_facet$channel = facet[channel]) === null || _facet$channel === void 0 ? void 0 : _facet$channel.header, config, channel);\n\n          if (contains(ORTHOGONAL_ORIENT[channel], labelOrient)) {\n            // Row/Column with orthogonal labelOrient must use title to display labels\n            return assembleLabelTitle(facet[channel], channel, config);\n          }\n        }\n      }\n\n      return undefined;\n    }\n\n    assembleMarks() {\n      const {\n        child\n      } = this; // If we facet by two dimensions, we need to add a cross operator to the aggregation\n      // so that we create all groups\n\n      const facetRoot = this.component.data.facetRoot;\n      const data = assembleFacetData(facetRoot);\n      const encodeEntry = child.assembleGroupEncodeEntry(false);\n      const title = this.assembleLabelTitle() || child.assembleTitle();\n      const style = child.assembleGroupStyle();\n      const markGroup = {\n        name: this.getName('cell'),\n        type: 'group',\n        ...(title ? {\n          title\n        } : {}),\n        ...(style ? {\n          style\n        } : {}),\n        from: {\n          facet: this.assembleFacet()\n        },\n        // TODO: move this to after data\n        sort: {\n          field: FACET_CHANNELS.map(c => this.facetSortFields(c)).flat(),\n          order: FACET_CHANNELS.map(c => this.facetSortOrder(c)).flat()\n        },\n        ...(data.length > 0 ? {\n          data: data\n        } : {}),\n        ...(encodeEntry ? {\n          encode: {\n            update: encodeEntry\n          }\n        } : {}),\n        ...child.assembleGroup(assembleFacetSignals(this, []))\n      };\n      return [markGroup];\n    }\n\n    getMapping() {\n      return this.facet;\n    }\n\n  }\n\n  function makeJoinAggregateFromFacet(parent, facet) {\n    const {\n      row,\n      column\n    } = facet;\n\n    if (row && column) {\n      let newParent = null; // only need to make one for crossed facet\n\n      for (const fieldDef of [row, column]) {\n        if (isSortField(fieldDef.sort)) {\n          const {\n            field,\n            op = DEFAULT_SORT_OP\n          } = fieldDef.sort;\n          parent = newParent = new JoinAggregateTransformNode(parent, {\n            joinaggregate: [{\n              op,\n              field,\n              as: facetSortFieldName(fieldDef, fieldDef.sort, {\n                forAs: true\n              })\n            }],\n            groupby: [vgField(fieldDef)]\n          });\n        }\n      }\n\n      return newParent;\n    }\n\n    return null;\n  }\n\n  function findSource(data, sources) {\n    for (const other of sources) {\n      var _data$format, _otherData$format, _data$format2, _otherData$format2;\n\n      const otherData = other.data; // if both datasets have a name defined, we cannot merge\n\n      if (data.name && other.hasName() && data.name !== other.dataName) {\n        continue;\n      }\n\n      const formatMesh = (_data$format = data['format']) === null || _data$format === void 0 ? void 0 : _data$format.mesh;\n      const otherFeature = (_otherData$format = otherData.format) === null || _otherData$format === void 0 ? void 0 : _otherData$format.feature; // feature and mesh are mutually exclusive\n\n      if (formatMesh && otherFeature) {\n        continue;\n      } // we have to extract the same feature or mesh\n\n\n      const formatFeature = (_data$format2 = data['format']) === null || _data$format2 === void 0 ? void 0 : _data$format2.feature;\n\n      if ((formatFeature || otherFeature) && formatFeature !== otherFeature) {\n        continue;\n      }\n\n      const otherMesh = (_otherData$format2 = otherData.format) === null || _otherData$format2 === void 0 ? void 0 : _otherData$format2.mesh;\n\n      if ((formatMesh || otherMesh) && formatMesh !== otherMesh) {\n        continue;\n      }\n\n      if (isInlineData(data) && isInlineData(otherData)) {\n        if (deepEqual(data.values, otherData.values)) {\n          return other;\n        }\n      } else if (isUrlData(data) && isUrlData(otherData)) {\n        if (data.url === otherData.url) {\n          return other;\n        }\n      } else if (isNamedData(data)) {\n        if (data.name === other.dataName) {\n          return other;\n        }\n      }\n    }\n\n    return null;\n  }\n\n  function parseRoot(model, sources) {\n    if (model.data || !model.parent) {\n      // if the model defines a data source or is the root, create a source node\n      if (model.data === null) {\n        // data: null means we should ignore the parent's data so we just create a new data source\n        const source = new SourceNode({\n          values: []\n        });\n        sources.push(source);\n        return source;\n      }\n\n      const existingSource = findSource(model.data, sources);\n\n      if (existingSource) {\n        if (!isGenerator(model.data)) {\n          existingSource.data.format = mergeDeep({}, model.data.format, existingSource.data.format);\n        } // if the new source has a name but the existing one does not, we can set it\n\n\n        if (!existingSource.hasName() && model.data.name) {\n          existingSource.dataName = model.data.name;\n        }\n\n        return existingSource;\n      } else {\n        const source = new SourceNode(model.data);\n        sources.push(source);\n        return source;\n      }\n    } else {\n      // If we don't have a source defined (overriding parent's data), use the parent's facet root or main.\n      return model.parent.component.data.facetRoot ? model.parent.component.data.facetRoot : model.parent.component.data.main;\n    }\n  }\n  /**\n   * Parses a transform array into a chain of connected dataflow nodes.\n   */\n\n\n  function parseTransformArray(head, model, ancestorParse) {\n    let lookupCounter = 0;\n\n    for (const t of model.transforms) {\n      let derivedType = undefined;\n      let transformNode;\n\n      if (isCalculate(t)) {\n        transformNode = head = new CalculateNode(head, t);\n        derivedType = 'derived';\n      } else if (isFilter(t)) {\n        var _ParseNode$makeWithAn;\n\n        const implicit = getImplicitFromFilterTransform(t);\n        transformNode = head = (_ParseNode$makeWithAn = ParseNode.makeWithAncestors(head, {}, implicit, ancestorParse)) !== null && _ParseNode$makeWithAn !== void 0 ? _ParseNode$makeWithAn : head;\n        head = new FilterNode(head, model, t.filter);\n      } else if (isBin(t)) {\n        transformNode = head = BinNode.makeFromTransform(head, t, model);\n        derivedType = 'number';\n      } else if (isTimeUnit(t)) {\n        derivedType = 'date';\n        const parsedAs = ancestorParse.getWithExplicit(t.field); // Create parse node because the input to time unit is always date.\n\n        if (parsedAs.value === undefined) {\n          head = new ParseNode(head, {\n            [t.field]: derivedType\n          });\n          ancestorParse.set(t.field, derivedType, false);\n        }\n\n        transformNode = head = TimeUnitNode.makeFromTransform(head, t);\n      } else if (isAggregate$1(t)) {\n        transformNode = head = AggregateNode.makeFromTransform(head, t);\n        derivedType = 'number';\n\n        if (requiresSelectionId(model)) {\n          head = new IdentifierNode(head);\n        }\n      } else if (isLookup(t)) {\n        transformNode = head = LookupNode.make(head, model, t, lookupCounter++);\n        derivedType = 'derived';\n      } else if (isWindow(t)) {\n        transformNode = head = new WindowTransformNode(head, t);\n        derivedType = 'number';\n      } else if (isJoinAggregate(t)) {\n        transformNode = head = new JoinAggregateTransformNode(head, t);\n        derivedType = 'number';\n      } else if (isStack(t)) {\n        transformNode = head = StackNode.makeFromTransform(head, t);\n        derivedType = 'derived';\n      } else if (isFold(t)) {\n        transformNode = head = new FoldTransformNode(head, t);\n        derivedType = 'derived';\n      } else if (isFlatten(t)) {\n        transformNode = head = new FlattenTransformNode(head, t);\n        derivedType = 'derived';\n      } else if (isPivot(t)) {\n        transformNode = head = new PivotTransformNode(head, t);\n        derivedType = 'derived';\n      } else if (isSample(t)) {\n        head = new SampleTransformNode(head, t);\n      } else if (isImpute(t)) {\n        transformNode = head = ImputeNode.makeFromTransform(head, t);\n        derivedType = 'derived';\n      } else if (isDensity(t)) {\n        transformNode = head = new DensityTransformNode(head, t);\n        derivedType = 'derived';\n      } else if (isQuantile(t)) {\n        transformNode = head = new QuantileTransformNode(head, t);\n        derivedType = 'derived';\n      } else if (isRegression(t)) {\n        transformNode = head = new RegressionTransformNode(head, t);\n        derivedType = 'derived';\n      } else if (isLoess(t)) {\n        transformNode = head = new LoessTransformNode(head, t);\n        derivedType = 'derived';\n      } else {\n        warn(invalidTransformIgnored(t));\n        continue;\n      }\n\n      if (transformNode && derivedType !== undefined) {\n        for (const field of (_transformNode$produc = transformNode.producedFields()) !== null && _transformNode$produc !== void 0 ? _transformNode$produc : []) {\n          var _transformNode$produc;\n\n          ancestorParse.set(field, derivedType, false);\n        }\n      }\n    }\n\n    return head;\n  }\n  /*\n  Description of the dataflow (http://asciiflow.com/):\n       +--------+\n       | Source |\n       +---+----+\n           |\n           v\n       FormatParse\n       (explicit)\n           |\n           v\n       Transforms\n  (Filter, Calculate, Binning, TimeUnit, Aggregate, Window, ...)\n           |\n           v\n       FormatParse\n       (implicit)\n           |\n           v\n   Binning (in `encoding`)\n           |\n           v\n   Timeunit (in `encoding`)\n           |\n           v\n  Formula From Sort Array\n           |\n           v\n        +--+--+\n        | Raw |\n        +-----+\n           |\n           v\n    Aggregate (in `encoding`)\n           |\n           v\n    Stack (in `encoding`)\n           |\n           v\n    Invalid Filter\n           |\n           v\n     +----------+\n     |   Main   |\n     +----------+\n           |\n           v\n       +-------+\n       | Facet |----> \"column\", \"column-layout\", and \"row\"\n       +-------+\n           |\n           v\n    ...Child data...\n  */\n\n  function parseData(model) {\n    var _data$format3, _ParseNode$makeExplic, _ParseNode$makeWithAn2;\n\n    let head = parseRoot(model, model.component.data.sources);\n    const {\n      outputNodes,\n      outputNodeRefCounts\n    } = model.component.data;\n    const ancestorParse = model.parent ? model.parent.component.data.ancestorParse.clone() : new AncestorParse();\n    const data = model.data;\n\n    if (isGenerator(data)) {\n      // insert generator transform\n      if (isSequenceGenerator(data)) {\n        head = new SequenceNode(head, data.sequence);\n      } else if (isGraticuleGenerator(data)) {\n        head = new GraticuleNode(head, data.graticule);\n      } // no parsing necessary for generator\n\n\n      ancestorParse.parseNothing = true;\n    } else if ((data === null || data === void 0 ? void 0 : (_data$format3 = data.format) === null || _data$format3 === void 0 ? void 0 : _data$format3.parse) === null) {\n      // format.parse: null means disable parsing\n      ancestorParse.parseNothing = true;\n    }\n\n    head = (_ParseNode$makeExplic = ParseNode.makeExplicit(head, model, ancestorParse)) !== null && _ParseNode$makeExplic !== void 0 ? _ParseNode$makeExplic : head; // Default discrete selections require an identifer transform to\n    // uniquely identify data points. Add this transform at the head of\n    // the pipeline such that the identifier field is available for all\n    // subsequent datasets. During optimization, we will remove this\n    // transform if it proves to be unnecessary. Additional identifier\n    // transforms will be necessary when new tuples are constructed\n    // (e.g., post-aggregation).\n\n    head = new IdentifierNode(head); // HACK: This is equivalent for merging bin extent for union scale.\n    // FIXME(https://github.com/vega/vega-lite/issues/2270): Correctly merge extent / bin node for shared bin scale\n\n    const parentIsLayer = model.parent && isLayerModel(model.parent);\n\n    if (isUnitModel(model) || isFacetModel(model)) {\n      if (parentIsLayer) {\n        var _BinNode$makeFromEnco;\n\n        head = (_BinNode$makeFromEnco = BinNode.makeFromEncoding(head, model)) !== null && _BinNode$makeFromEnco !== void 0 ? _BinNode$makeFromEnco : head;\n      }\n    }\n\n    if (model.transforms.length > 0) {\n      head = parseTransformArray(head, model, ancestorParse);\n    } // create parse nodes for fields that need to be parsed (or flattened) implicitly\n\n\n    const implicitSelection = getImplicitFromSelection(model);\n    const implicitEncoding = getImplicitFromEncoding(model);\n    head = (_ParseNode$makeWithAn2 = ParseNode.makeWithAncestors(head, {}, { ...implicitSelection,\n      ...implicitEncoding\n    }, ancestorParse)) !== null && _ParseNode$makeWithAn2 !== void 0 ? _ParseNode$makeWithAn2 : head;\n\n    if (isUnitModel(model)) {\n      head = GeoJSONNode.parseAll(head, model);\n      head = GeoPointNode.parseAll(head, model);\n    }\n\n    if (isUnitModel(model) || isFacetModel(model)) {\n      var _TimeUnitNode$makeFro;\n\n      if (!parentIsLayer) {\n        var _BinNode$makeFromEnco2;\n\n        head = (_BinNode$makeFromEnco2 = BinNode.makeFromEncoding(head, model)) !== null && _BinNode$makeFromEnco2 !== void 0 ? _BinNode$makeFromEnco2 : head;\n      }\n\n      head = (_TimeUnitNode$makeFro = TimeUnitNode.makeFromEncoding(head, model)) !== null && _TimeUnitNode$makeFro !== void 0 ? _TimeUnitNode$makeFro : head;\n      head = CalculateNode.parseAllForSortIndex(head, model);\n    } // add an output node pre aggregation\n\n\n    const rawName = model.getDataName(DataSourceType.Raw);\n    const raw = new OutputNode(head, rawName, DataSourceType.Raw, outputNodeRefCounts);\n    outputNodes[rawName] = raw;\n    head = raw;\n\n    if (isUnitModel(model)) {\n      var _ImputeNode$makeFromE, _StackNode$makeFromEn;\n\n      const agg = AggregateNode.makeFromEncoding(head, model);\n\n      if (agg) {\n        head = agg;\n\n        if (requiresSelectionId(model)) {\n          head = new IdentifierNode(head);\n        }\n      }\n\n      head = (_ImputeNode$makeFromE = ImputeNode.makeFromEncoding(head, model)) !== null && _ImputeNode$makeFromE !== void 0 ? _ImputeNode$makeFromE : head;\n      head = (_StackNode$makeFromEn = StackNode.makeFromEncoding(head, model)) !== null && _StackNode$makeFromEn !== void 0 ? _StackNode$makeFromEn : head;\n    }\n\n    if (isUnitModel(model)) {\n      var _FilterInvalidNode$ma;\n\n      head = (_FilterInvalidNode$ma = FilterInvalidNode.make(head, model)) !== null && _FilterInvalidNode$ma !== void 0 ? _FilterInvalidNode$ma : head;\n    } // output node for marks\n\n\n    const mainName = model.getDataName(DataSourceType.Main);\n    const main = new OutputNode(head, mainName, DataSourceType.Main, outputNodeRefCounts);\n    outputNodes[mainName] = main;\n    head = main;\n\n    if (isUnitModel(model)) {\n      materializeSelections(model, main);\n    } // add facet marker\n\n\n    let facetRoot = null;\n\n    if (isFacetModel(model)) {\n      var _makeJoinAggregateFro;\n\n      const facetName = model.getName('facet'); // Derive new aggregate for facet's sort field\n      // augment data source with new fields for crossed facet\n\n      head = (_makeJoinAggregateFro = makeJoinAggregateFromFacet(head, model.facet)) !== null && _makeJoinAggregateFro !== void 0 ? _makeJoinAggregateFro : head;\n      facetRoot = new FacetNode(head, model, facetName, main.getSource());\n      outputNodes[facetName] = facetRoot;\n    }\n\n    return { ...model.component.data,\n      outputNodes,\n      outputNodeRefCounts,\n      raw,\n      main,\n      facetRoot,\n      ancestorParse\n    };\n  }\n\n  class ConcatModel extends Model {\n    constructor(spec, parent, parentGivenName, config) {\n      var _spec$resolve, _spec$resolve$axis, _spec$resolve2, _spec$resolve2$axis;\n\n      super(spec, 'concat', parent, parentGivenName, config, spec.resolve);\n\n      _defineProperty(this, \"children\", void 0);\n\n      if (((_spec$resolve = spec.resolve) === null || _spec$resolve === void 0 ? void 0 : (_spec$resolve$axis = _spec$resolve.axis) === null || _spec$resolve$axis === void 0 ? void 0 : _spec$resolve$axis.x) === 'shared' || ((_spec$resolve2 = spec.resolve) === null || _spec$resolve2 === void 0 ? void 0 : (_spec$resolve2$axis = _spec$resolve2.axis) === null || _spec$resolve2$axis === void 0 ? void 0 : _spec$resolve2$axis.y) === 'shared') {\n        warn(CONCAT_CANNOT_SHARE_AXIS);\n      }\n\n      this.children = this.getChildren(spec).map((child, i) => {\n        return buildModel(child, this, this.getName('concat_' + i), undefined, config);\n      });\n    }\n\n    parseData() {\n      this.component.data = parseData(this);\n\n      for (const child of this.children) {\n        child.parseData();\n      }\n    }\n\n    parseSelections() {\n      // Merge selections up the hierarchy so that they may be referenced\n      // across unit specs. Persist their definitions within each child\n      // to assemble signals which remain within output Vega unit groups.\n      this.component.selection = {};\n\n      for (const child of this.children) {\n        child.parseSelections();\n\n        for (const key of keys(child.component.selection)) {\n          this.component.selection[key] = child.component.selection[key];\n        }\n      }\n    }\n\n    parseMarkGroup() {\n      for (const child of this.children) {\n        child.parseMarkGroup();\n      }\n    }\n\n    parseAxesAndHeaders() {\n      for (const child of this.children) {\n        child.parseAxesAndHeaders();\n      } // TODO(#2415): support shared axes\n\n    }\n\n    getChildren(spec) {\n      if (isVConcatSpec(spec)) {\n        return spec.vconcat;\n      } else if (isHConcatSpec(spec)) {\n        return spec.hconcat;\n      }\n\n      return spec.concat;\n    }\n\n    parseLayoutSize() {\n      parseConcatLayoutSize(this);\n    }\n\n    parseAxisGroup() {\n      return null;\n    }\n\n    assembleSelectionTopLevelSignals(signals) {\n      return this.children.reduce((sg, child) => child.assembleSelectionTopLevelSignals(sg), signals);\n    }\n\n    assembleSignals() {\n      this.children.forEach(child => child.assembleSignals());\n      return [];\n    }\n\n    assembleLayoutSignals() {\n      const layoutSignals = assembleLayoutSignals(this);\n\n      for (const child of this.children) {\n        layoutSignals.push(...child.assembleLayoutSignals());\n      }\n\n      return layoutSignals;\n    }\n\n    assembleSelectionData(data) {\n      return this.children.reduce((db, child) => child.assembleSelectionData(db), data);\n    }\n\n    assembleMarks() {\n      // only children have marks\n      return this.children.map(child => {\n        const title = child.assembleTitle();\n        const style = child.assembleGroupStyle();\n        const encodeEntry = child.assembleGroupEncodeEntry(false);\n        return {\n          type: 'group',\n          name: child.getName('group'),\n          ...(title ? {\n            title\n          } : {}),\n          ...(style ? {\n            style\n          } : {}),\n          ...(encodeEntry ? {\n            encode: {\n              update: encodeEntry\n            }\n          } : {}),\n          ...child.assembleGroup()\n        };\n      });\n    }\n\n    assembleDefaultLayout() {\n      const columns = this.layout.columns;\n      return { ...(columns != null ? {\n          columns: columns\n        } : {}),\n        bounds: 'full',\n        // Use align each so it can work with multiple plots with different size\n        align: 'each'\n      };\n    }\n\n  }\n\n  function isFalseOrNull(v) {\n    return v === false || v === null;\n  }\n\n  const AXIS_COMPONENT_PROPERTIES_INDEX = {\n    disable: 1,\n    gridScale: 1,\n    scale: 1,\n    ...COMMON_AXIS_PROPERTIES_INDEX,\n    labelExpr: 1,\n    encode: 1\n  };\n  const AXIS_COMPONENT_PROPERTIES = keys(AXIS_COMPONENT_PROPERTIES_INDEX);\n  class AxisComponent extends Split {\n    constructor(explicit = {}, implicit = {}, mainExtracted = false) {\n      super();\n      this.explicit = explicit;\n      this.implicit = implicit;\n      this.mainExtracted = mainExtracted;\n    }\n\n    clone() {\n      return new AxisComponent(duplicate(this.explicit), duplicate(this.implicit), this.mainExtracted);\n    }\n\n    hasAxisPart(part) {\n      // FIXME(https://github.com/vega/vega-lite/issues/2552) this method can be wrong if users use a Vega theme.\n      if (part === 'axis') {\n        // always has the axis container part\n        return true;\n      }\n\n      if (part === 'grid' || part === 'title') {\n        return !!this.get(part);\n      } // Other parts are enabled by default, so they should not be false or null.\n\n\n      return !isFalseOrNull(this.get(part));\n    }\n\n    hasOrientSignalRef() {\n      return isSignalRef(this.explicit.orient);\n    }\n\n  }\n\n  function labels$1(model, channel, specifiedLabelsSpec) {\n    var _getFieldOrDatumDef;\n\n    const {\n      encoding,\n      config\n    } = model;\n    const fieldOrDatumDef = (_getFieldOrDatumDef = getFieldOrDatumDef(encoding[channel])) !== null && _getFieldOrDatumDef !== void 0 ? _getFieldOrDatumDef : getFieldOrDatumDef(encoding[getSecondaryRangeChannel(channel)]);\n    const axis = model.axis(channel) || {};\n    const {\n      format,\n      formatType\n    } = axis;\n\n    if (isCustomFormatType(formatType)) {\n      return {\n        text: formatCustomType({\n          fieldOrDatumDef,\n          field: 'datum.value',\n          format,\n          formatType,\n          config\n        }),\n        ...specifiedLabelsSpec\n      };\n    }\n\n    return specifiedLabelsSpec;\n  }\n\n  function parseUnitAxes(model) {\n    return POSITION_SCALE_CHANNELS.reduce((axis, channel) => {\n      if (model.component.scales[channel]) {\n        axis[channel] = [parseAxis(channel, model)];\n      }\n\n      return axis;\n    }, {});\n  }\n  const OPPOSITE_ORIENT = {\n    bottom: 'top',\n    top: 'bottom',\n    left: 'right',\n    right: 'left'\n  };\n  function parseLayerAxes(model) {\n    const {\n      axes,\n      resolve\n    } = model.component;\n    const axisCount = {\n      top: 0,\n      bottom: 0,\n      right: 0,\n      left: 0\n    };\n\n    for (const child of model.children) {\n      child.parseAxesAndHeaders();\n\n      for (const channel of keys(child.component.axes)) {\n        resolve.axis[channel] = parseGuideResolve(model.component.resolve, channel);\n\n        if (resolve.axis[channel] === 'shared') {\n          // If the resolve says shared (and has not been overridden)\n          // We will try to merge and see if there is a conflict\n          axes[channel] = mergeAxisComponents(axes[channel], child.component.axes[channel]);\n\n          if (!axes[channel]) {\n            // If merge returns nothing, there is a conflict so we cannot make the axis shared.\n            // Thus, mark axis as independent and remove the axis component.\n            resolve.axis[channel] = 'independent';\n            delete axes[channel];\n          }\n        }\n      }\n    } // Move axes to layer's axis component and merge shared axes\n\n\n    for (const channel of POSITION_SCALE_CHANNELS) {\n      for (const child of model.children) {\n        if (!child.component.axes[channel]) {\n          // skip if the child does not have a particular axis\n          continue;\n        }\n\n        if (resolve.axis[channel] === 'independent') {\n          var _axes$channel;\n\n          // If axes are independent, concat the axisComponent array.\n          axes[channel] = ((_axes$channel = axes[channel]) !== null && _axes$channel !== void 0 ? _axes$channel : []).concat(child.component.axes[channel]); // Automatically adjust orient\n\n          for (const axisComponent of child.component.axes[channel]) {\n            const {\n              value: orient,\n              explicit\n            } = axisComponent.getWithExplicit('orient');\n\n            if (isSignalRef(orient)) {\n              continue;\n            }\n\n            if (axisCount[orient] > 0 && !explicit) {\n              // Change axis orient if the number do not match\n              const oppositeOrient = OPPOSITE_ORIENT[orient];\n\n              if (axisCount[orient] > axisCount[oppositeOrient]) {\n                axisComponent.set('orient', oppositeOrient, false);\n              }\n            }\n\n            axisCount[orient]++; // TODO(https://github.com/vega/vega-lite/issues/2634): automatically add extra offset?\n          }\n        } // After merging, make sure to remove axes from child\n\n\n        delete child.component.axes[channel];\n      } // Suppress grid lines for dual axis charts (https://github.com/vega/vega-lite/issues/4676)\n\n\n      if (resolve.axis[channel] === 'independent' && axes[channel] && axes[channel].length > 1) {\n        for (const axisCmpt of axes[channel]) {\n          if (!!axisCmpt.get('grid') && !axisCmpt.explicit.grid) {\n            axisCmpt.implicit.grid = false;\n          }\n        }\n      }\n    }\n  }\n\n  function mergeAxisComponents(mergedAxisCmpts, childAxisCmpts) {\n    if (mergedAxisCmpts) {\n      // FIXME: this is a bit wrong once we support multiple axes\n      if (mergedAxisCmpts.length !== childAxisCmpts.length) {\n        return undefined; // Cannot merge axis component with different number of axes.\n      }\n\n      const length = mergedAxisCmpts.length;\n\n      for (let i = 0; i < length; i++) {\n        const merged = mergedAxisCmpts[i];\n        const child = childAxisCmpts[i];\n\n        if (!!merged !== !!child) {\n          return undefined;\n        } else if (merged && child) {\n          const mergedOrient = merged.getWithExplicit('orient');\n          const childOrient = child.getWithExplicit('orient');\n\n          if (mergedOrient.explicit && childOrient.explicit && mergedOrient.value !== childOrient.value) {\n            // TODO: throw warning if resolve is explicit (We don't have info about explicit/implicit resolve yet.)\n            // Cannot merge due to inconsistent orient\n            return undefined;\n          } else {\n            mergedAxisCmpts[i] = mergeAxisComponent(merged, child);\n          }\n        }\n      }\n    } else {\n      // For first one, return a copy of the child\n      return childAxisCmpts.map(axisComponent => axisComponent.clone());\n    }\n\n    return mergedAxisCmpts;\n  }\n\n  function mergeAxisComponent(merged, child) {\n    for (const prop of AXIS_COMPONENT_PROPERTIES) {\n      const mergedValueWithExplicit = mergeValuesWithExplicit(merged.getWithExplicit(prop), child.getWithExplicit(prop), prop, 'axis', // Tie breaker function\n      (v1, v2) => {\n        switch (prop) {\n          case 'title':\n            return mergeTitleComponent(v1, v2);\n\n          case 'gridScale':\n            return {\n              explicit: v1.explicit,\n              // keep the old explicit\n              value: getFirstDefined(v1.value, v2.value)\n            };\n        }\n\n        return defaultTieBreaker(v1, v2, prop, 'axis');\n      });\n      merged.setWithExplicit(prop, mergedValueWithExplicit);\n    }\n\n    return merged;\n  } // eslint-disable-next-line @typescript-eslint/ban-types\n\n\n  function isExplicit$1(value, property, axis, model, channel) {\n    if (property === 'disable') {\n      return axis !== undefined; // if axis is specified or null/false, then it's enable/disable state is explicit\n    }\n\n    axis = axis || {};\n\n    switch (property) {\n      case 'titleAngle':\n      case 'labelAngle':\n        return value === (isSignalRef(axis.labelAngle) ? axis.labelAngle : normalizeAngle(axis.labelAngle));\n\n      case 'values':\n        return !!axis.values;\n      // specified axis.values is already respected, but may get transformed.\n\n      case 'encode':\n        // both VL axis.encoding and axis.labelAngle affect VG axis.encode\n        return !!axis.encoding || !!axis.labelAngle;\n\n      case 'title':\n        // title can be explicit if fieldDef.title is set\n        if (value === getFieldDefTitle(model, channel)) {\n          return true;\n        }\n\n    } // Otherwise, things are explicit if the returned value matches the specified property\n\n\n    return value === axis[property];\n  }\n  /**\n   * Properties to always include values from config\n   */\n\n\n  const propsToAlwaysIncludeConfig = new Set(['grid', // Grid is an exception because we need to set grid = true to generate another grid axis\n  'translate', // translate has dependent logic for bar's bin position and it's 0.5 by default in Vega. If a config overrides this value, we need to know.\n  // the rest are not axis configs in Vega, but are in VL, so we need to set too.\n  'format', 'formatType', 'orient', 'labelExpr', 'tickCount', 'position', 'tickMinStep']);\n\n  function parseAxis(channel, model) {\n    var _axis, _config, _config$axis, _axis2, _axis$encoding;\n\n    let axis = model.axis(channel);\n    const axisComponent = new AxisComponent();\n    const fieldOrDatumDef = getFieldOrDatumDef(model.encoding[channel]);\n    const {\n      mark,\n      config\n    } = model;\n    const orient = ((_axis = axis) === null || _axis === void 0 ? void 0 : _axis.orient) || ((_config = config[channel === 'x' ? 'axisX' : 'axisY']) === null || _config === void 0 ? void 0 : _config.orient) || ((_config$axis = config.axis) === null || _config$axis === void 0 ? void 0 : _config$axis.orient) || defaultOrient(channel);\n    const scaleType = model.getScaleComponent(channel).get('type');\n    const axisConfigs = getAxisConfigs(channel, scaleType, orient, model.config);\n    const disable = axis !== undefined ? !axis : getAxisConfig('disable', config.style, (_axis2 = axis) === null || _axis2 === void 0 ? void 0 : _axis2.style, axisConfigs).configValue;\n    axisComponent.set('disable', disable, axis !== undefined);\n\n    if (disable) {\n      return axisComponent;\n    }\n\n    axis = axis || {};\n    const labelAngle = getLabelAngle(fieldOrDatumDef, axis, channel, config.style, axisConfigs);\n    const ruleParams = {\n      fieldOrDatumDef,\n      axis,\n      channel,\n      model,\n      scaleType,\n      orient,\n      labelAngle,\n      mark,\n      config\n    }; // 1.2. Add properties\n\n    for (const property of AXIS_COMPONENT_PROPERTIES) {\n      const value = property in axisRules ? axisRules[property](ruleParams) : isAxisProperty(property) ? axis[property] : undefined;\n      const hasValue = value !== undefined;\n      const explicit = isExplicit$1(value, property, axis, model, channel);\n\n      if (hasValue && explicit) {\n        axisComponent.set(property, value, explicit);\n      } else {\n        const {\n          configValue = undefined,\n          configFrom = undefined\n        } = isAxisProperty(property) && property !== 'values' ? getAxisConfig(property, config.style, axis.style, axisConfigs) : {};\n        const hasConfigValue = configValue !== undefined;\n\n        if (hasValue && !hasConfigValue) {\n          // only set property if it is explicitly set or has no config value (otherwise we will accidentally override config)\n          axisComponent.set(property, value, explicit);\n        } else if ( // Cases need implicit values\n        // 1. Axis config that aren't available in Vega\n        !(configFrom === 'vgAxisConfig') || // 2. Certain properties are always included (see `propsToAlwaysIncludeConfig`'s declaration for more details)\n        propsToAlwaysIncludeConfig.has(property) && hasConfigValue || // 3. Conditional axis values and signals\n        isConditionalAxisValue(configValue) || isSignalRef(configValue)) {\n          // If a config is specified and is conditional, copy conditional value from axis config\n          axisComponent.set(property, configValue, false);\n        }\n      }\n    } // 2) Add guide encode definition groups\n\n\n    const axisEncoding = (_axis$encoding = axis.encoding) !== null && _axis$encoding !== void 0 ? _axis$encoding : {};\n    const axisEncode = AXIS_PARTS.reduce((e, part) => {\n      var _axisEncoding$part;\n\n      if (!axisComponent.hasAxisPart(part)) {\n        // No need to create encode for a disabled part.\n        return e;\n      }\n\n      const axisEncodingPart = guideEncodeEntry((_axisEncoding$part = axisEncoding[part]) !== null && _axisEncoding$part !== void 0 ? _axisEncoding$part : {}, model);\n      const value = part === 'labels' ? labels$1(model, channel, axisEncodingPart) : axisEncodingPart;\n\n      if (value !== undefined && !isEmpty(value)) {\n        e[part] = {\n          update: value\n        };\n      }\n\n      return e;\n    }, {}); // FIXME: By having encode as one property, we won't have fine grained encode merging.\n\n    if (!isEmpty(axisEncode)) {\n      axisComponent.set('encode', axisEncode, !!axis.encoding || axis.labelAngle !== undefined);\n    }\n\n    return axisComponent;\n  }\n\n  function initLayoutSize({\n    encoding,\n    size\n  }) {\n    for (const channel of POSITION_SCALE_CHANNELS) {\n      const sizeType = getSizeChannel(channel);\n\n      if (isStep(size[sizeType])) {\n        if (isContinuousFieldOrDatumDef(encoding[channel])) {\n          delete size[sizeType];\n          warn(stepDropped(sizeType));\n        }\n      }\n    }\n\n    return size;\n  }\n\n  function initMarkdef(originalMarkDef, encoding, config) {\n    const markDef = replaceExprRefInIndex(originalMarkDef); // set orient, which can be overridden by rules as sometimes the specified orient is invalid.\n\n    const specifiedOrient = getMarkPropOrConfig('orient', markDef, config);\n    markDef.orient = orient(markDef.type, encoding, specifiedOrient);\n\n    if (specifiedOrient !== undefined && specifiedOrient !== markDef.orient) {\n      warn(orientOverridden(markDef.orient, specifiedOrient));\n    }\n\n    if (markDef.type === 'bar' && markDef.orient) {\n      const cornerRadiusEnd = getMarkPropOrConfig('cornerRadiusEnd', markDef, config);\n\n      if (cornerRadiusEnd !== undefined) {\n        const newProps = markDef.orient === 'horizontal' && encoding.x2 || markDef.orient === 'vertical' && encoding.y2 ? ['cornerRadius'] : BAR_CORNER_RADIUS_INDEX[markDef.orient];\n\n        for (const newProp of newProps) {\n          markDef[newProp] = cornerRadiusEnd;\n        }\n\n        if (markDef.cornerRadiusEnd !== undefined) {\n          delete markDef.cornerRadiusEnd; // no need to keep the original cap cornerRadius\n        }\n      }\n    } // set opacity and filled if not specified in mark config\n\n\n    const specifiedOpacity = getMarkPropOrConfig('opacity', markDef, config);\n\n    if (specifiedOpacity === undefined) {\n      markDef.opacity = opacity(markDef.type, encoding);\n    } // set cursor, which should be pointer if href channel is present unless otherwise specified\n\n\n    const specifiedCursor = getMarkPropOrConfig('cursor', markDef, config);\n\n    if (specifiedCursor === undefined) {\n      markDef.cursor = cursor(markDef, encoding, config);\n    }\n\n    return markDef;\n  }\n\n  function cursor(markDef, encoding, config) {\n    if (encoding.href || markDef.href || getMarkPropOrConfig('href', markDef, config)) {\n      return 'pointer';\n    }\n\n    return markDef.cursor;\n  }\n\n  function opacity(mark, encoding) {\n    if (contains([POINT, TICK, CIRCLE, SQUARE], mark)) {\n      // point-based marks\n      if (!isAggregate(encoding)) {\n        return 0.7;\n      }\n    }\n\n    return undefined;\n  }\n\n  function defaultFilled(markDef, config, {\n    graticule\n  }) {\n    if (graticule) {\n      return false;\n    }\n\n    const filledConfig = getMarkConfig('filled', markDef, config);\n    const mark = markDef.type;\n    return getFirstDefined(filledConfig, mark !== POINT && mark !== LINE && mark !== RULE);\n  }\n\n  function orient(mark, encoding, specifiedOrient) {\n    switch (mark) {\n      case POINT:\n      case CIRCLE:\n      case SQUARE:\n      case TEXT$1:\n      case RECT:\n      case IMAGE:\n        // orient is meaningless for these marks.\n        return undefined;\n    }\n\n    const {\n      x,\n      y,\n      x2,\n      y2\n    } = encoding;\n\n    switch (mark) {\n      case BAR:\n        if (isFieldDef(x) && (isBinned(x.bin) || isFieldDef(y) && y.aggregate && !x.aggregate)) {\n          return 'vertical';\n        }\n\n        if (isFieldDef(y) && (isBinned(y.bin) || isFieldDef(x) && x.aggregate && !y.aggregate)) {\n          return 'horizontal';\n        }\n\n        if (y2 || x2) {\n          // Ranged bar does not always have clear orientation, so we allow overriding\n          if (specifiedOrient) {\n            return specifiedOrient;\n          } // If y is range and x is non-range, non-bin Q, y is likely a prebinned field\n\n\n          if (!x2) {\n            if (isFieldDef(x) && x.type === QUANTITATIVE && !isBinning(x.bin) || isNumericDataDef(x)) {\n              return 'horizontal';\n            }\n          } // If x is range and y is non-range, non-bin Q, x is likely a prebinned field\n\n\n          if (!y2) {\n            if (isFieldDef(y) && y.type === QUANTITATIVE && !isBinning(y.bin) || isNumericDataDef(y)) {\n              return 'vertical';\n            }\n          }\n        }\n\n      // falls through\n\n      case RULE:\n        // return undefined for line segment rule and bar with both axis ranged\n        // we have to ignore the case that the data are already binned\n        if (x2 && !(isFieldDef(x) && isBinned(x.bin)) && y2 && !(isFieldDef(y) && isBinned(y.bin))) {\n          return undefined;\n        }\n\n      // falls through\n\n      case AREA:\n        // If there are range for both x and y, y (vertical) has higher precedence.\n        if (y2) {\n          if (isFieldDef(y) && isBinned(y.bin)) {\n            return 'horizontal';\n          } else {\n            return 'vertical';\n          }\n        } else if (x2) {\n          if (isFieldDef(x) && isBinned(x.bin)) {\n            return 'vertical';\n          } else {\n            return 'horizontal';\n          }\n        } else if (mark === RULE) {\n          if (x && !y) {\n            return 'vertical';\n          } else if (y && !x) {\n            return 'horizontal';\n          }\n        }\n\n      // falls through\n\n      case LINE:\n      case TICK:\n        {\n          // Tick is opposite to bar, line, area and never have ranged mark.\n          const xIsContinuous = isContinuousFieldOrDatumDef(x);\n          const yIsContinuous = isContinuousFieldOrDatumDef(y);\n\n          if (xIsContinuous && !yIsContinuous) {\n            return mark !== 'tick' ? 'horizontal' : 'vertical';\n          } else if (!xIsContinuous && yIsContinuous) {\n            return mark !== 'tick' ? 'vertical' : 'horizontal';\n          } else if (xIsContinuous && yIsContinuous) {\n            const xDef = x; // we can cast here since they are surely fieldDef\n\n            const yDef = y;\n            const xIsTemporal = xDef.type === TEMPORAL;\n            const yIsTemporal = yDef.type === TEMPORAL; // temporal without timeUnit is considered continuous, but better serves as dimension\n\n            if (xIsTemporal && !yIsTemporal) {\n              return mark !== 'tick' ? 'vertical' : 'horizontal';\n            } else if (!xIsTemporal && yIsTemporal) {\n              return mark !== 'tick' ? 'horizontal' : 'vertical';\n            }\n\n            if (!xDef.aggregate && yDef.aggregate) {\n              return mark !== 'tick' ? 'vertical' : 'horizontal';\n            } else if (xDef.aggregate && !yDef.aggregate) {\n              return mark !== 'tick' ? 'horizontal' : 'vertical';\n            }\n\n            if (specifiedOrient) {\n              // When ambiguous, use user specified one.\n              return specifiedOrient;\n            }\n\n            return 'vertical';\n          } else {\n            // Discrete x Discrete case\n            if (specifiedOrient) {\n              // When ambiguous, use user specified one.\n              return specifiedOrient;\n            }\n\n            return undefined;\n          }\n        }\n    }\n\n    return 'vertical';\n  }\n\n  const arc = {\n    vgMark: 'arc',\n    encodeEntry: model => {\n      return { ...baseEncodeEntry(model, {\n          align: 'ignore',\n          baseline: 'ignore',\n          color: 'include',\n          size: 'ignore',\n          orient: 'ignore',\n          theta: 'ignore'\n        }),\n        ...pointPosition('x', model, {\n          defaultPos: 'mid'\n        }),\n        ...pointPosition('y', model, {\n          defaultPos: 'mid'\n        }),\n        // arcs are rectangles in polar coordinates\n        ...rectPosition(model, 'radius', 'arc'),\n        ...rectPosition(model, 'theta', 'arc')\n      };\n    }\n  };\n\n  const area = {\n    vgMark: 'area',\n    encodeEntry: model => {\n      return { ...baseEncodeEntry(model, {\n          align: 'ignore',\n          baseline: 'ignore',\n          color: 'include',\n          orient: 'include',\n          size: 'ignore',\n          theta: 'ignore'\n        }),\n        ...pointOrRangePosition('x', model, {\n          defaultPos: 'zeroOrMin',\n          defaultPos2: 'zeroOrMin',\n          range: model.markDef.orient === 'horizontal'\n        }),\n        ...pointOrRangePosition('y', model, {\n          defaultPos: 'zeroOrMin',\n          defaultPos2: 'zeroOrMin',\n          range: model.markDef.orient === 'vertical'\n        }),\n        ...defined(model)\n      };\n    }\n  };\n\n  const bar = {\n    vgMark: 'rect',\n    encodeEntry: model => {\n      return { ...baseEncodeEntry(model, {\n          align: 'ignore',\n          baseline: 'ignore',\n          color: 'include',\n          orient: 'ignore',\n          size: 'ignore',\n          theta: 'ignore'\n        }),\n        ...rectPosition(model, 'x', 'bar'),\n        ...rectPosition(model, 'y', 'bar')\n      };\n    }\n  };\n\n  const geoshape = {\n    vgMark: 'shape',\n    encodeEntry: model => {\n      return { ...baseEncodeEntry(model, {\n          align: 'ignore',\n          baseline: 'ignore',\n          color: 'include',\n          size: 'ignore',\n          orient: 'ignore',\n          theta: 'ignore'\n        })\n      };\n    },\n    postEncodingTransform: model => {\n      const {\n        encoding\n      } = model;\n      const shapeDef = encoding.shape;\n      const transform = {\n        type: 'geoshape',\n        projection: model.projectionName(),\n        // as: 'shape',\n        ...(shapeDef && isFieldDef(shapeDef) && shapeDef.type === GEOJSON ? {\n          field: vgField(shapeDef, {\n            expr: 'datum'\n          })\n        } : {})\n      };\n      return [transform];\n    }\n  };\n\n  const image = {\n    vgMark: 'image',\n    encodeEntry: model => {\n      return { ...baseEncodeEntry(model, {\n          align: 'ignore',\n          baseline: 'ignore',\n          color: 'ignore',\n          orient: 'ignore',\n          size: 'ignore',\n          theta: 'ignore'\n        }),\n        ...rectPosition(model, 'x', 'image'),\n        ...rectPosition(model, 'y', 'image'),\n        ...text(model, 'url')\n      };\n    }\n  };\n\n  const line = {\n    vgMark: 'line',\n    encodeEntry: model => {\n      return { ...baseEncodeEntry(model, {\n          align: 'ignore',\n          baseline: 'ignore',\n          color: 'include',\n          size: 'ignore',\n          orient: 'ignore',\n          theta: 'ignore'\n        }),\n        ...pointPosition('x', model, {\n          defaultPos: 'mid'\n        }),\n        ...pointPosition('y', model, {\n          defaultPos: 'mid'\n        }),\n        ...nonPosition('size', model, {\n          vgChannel: 'strokeWidth' // VL's line size is strokeWidth\n\n        }),\n        ...defined(model)\n      };\n    }\n  };\n  const trail = {\n    vgMark: 'trail',\n    encodeEntry: model => {\n      return { ...baseEncodeEntry(model, {\n          align: 'ignore',\n          baseline: 'ignore',\n          color: 'include',\n          size: 'include',\n          orient: 'ignore',\n          theta: 'ignore'\n        }),\n        ...pointPosition('x', model, {\n          defaultPos: 'mid'\n        }),\n        ...pointPosition('y', model, {\n          defaultPos: 'mid'\n        }),\n        ...nonPosition('size', model),\n        ...defined(model)\n      };\n    }\n  };\n\n  function encodeEntry(model, fixedShape) {\n    const {\n      config\n    } = model;\n    return { ...baseEncodeEntry(model, {\n        align: 'ignore',\n        baseline: 'ignore',\n        color: 'include',\n        size: 'include',\n        orient: 'ignore',\n        theta: 'ignore'\n      }),\n      ...pointPosition('x', model, {\n        defaultPos: 'mid'\n      }),\n      ...pointPosition('y', model, {\n        defaultPos: 'mid'\n      }),\n      ...nonPosition('size', model),\n      ...nonPosition('angle', model),\n      ...shapeMixins(model, config, fixedShape)\n    };\n  }\n\n  function shapeMixins(model, config, fixedShape) {\n    if (fixedShape) {\n      return {\n        shape: {\n          value: fixedShape\n        }\n      };\n    }\n\n    return nonPosition('shape', model);\n  }\n  const point = {\n    vgMark: 'symbol',\n    encodeEntry: model => {\n      return encodeEntry(model);\n    }\n  };\n  const circle = {\n    vgMark: 'symbol',\n    encodeEntry: model => {\n      return encodeEntry(model, 'circle');\n    }\n  };\n  const square = {\n    vgMark: 'symbol',\n    encodeEntry: model => {\n      return encodeEntry(model, 'square');\n    }\n  };\n\n  const rect = {\n    vgMark: 'rect',\n    encodeEntry: model => {\n      return { ...baseEncodeEntry(model, {\n          align: 'ignore',\n          baseline: 'ignore',\n          color: 'include',\n          orient: 'ignore',\n          size: 'ignore',\n          theta: 'ignore'\n        }),\n        ...rectPosition(model, 'x', 'rect'),\n        ...rectPosition(model, 'y', 'rect')\n      };\n    }\n  };\n\n  const rule = {\n    vgMark: 'rule',\n    encodeEntry: model => {\n      const {\n        markDef\n      } = model;\n      const orient = markDef.orient;\n\n      if (!model.encoding.x && !model.encoding.y && !model.encoding.latitude && !model.encoding.longitude) {\n        // Show nothing if we have none of x, y, lat, and long.\n        return {};\n      }\n\n      return { ...baseEncodeEntry(model, {\n          align: 'ignore',\n          baseline: 'ignore',\n          color: 'include',\n          orient: 'ignore',\n          size: 'ignore',\n          theta: 'ignore'\n        }),\n        ...pointOrRangePosition('x', model, {\n          defaultPos: orient === 'horizontal' ? 'zeroOrMax' : 'mid',\n          defaultPos2: 'zeroOrMin',\n          range: orient !== 'vertical' // include x2 for horizontal or line segment rule\n\n        }),\n        ...pointOrRangePosition('y', model, {\n          defaultPos: orient === 'vertical' ? 'zeroOrMax' : 'mid',\n          defaultPos2: 'zeroOrMin',\n          range: orient !== 'horizontal' // include y2 for vertical or line segment rule\n\n        }),\n        ...nonPosition('size', model, {\n          vgChannel: 'strokeWidth' // VL's rule size is strokeWidth\n\n        })\n      };\n    }\n  };\n\n  const text$1 = {\n    vgMark: 'text',\n    encodeEntry: model => {\n      const {\n        config,\n        encoding\n      } = model;\n      return { ...baseEncodeEntry(model, {\n          align: 'include',\n          baseline: 'include',\n          color: 'include',\n          size: 'ignore',\n          orient: 'ignore',\n          theta: 'include'\n        }),\n        ...pointPosition('x', model, {\n          defaultPos: 'mid'\n        }),\n        ...pointPosition('y', model, {\n          defaultPos: 'mid'\n        }),\n        ...text(model),\n        ...nonPosition('size', model, {\n          vgChannel: 'fontSize' // VL's text size is fontSize\n\n        }),\n        ...nonPosition('angle', model),\n        ...valueIfDefined('align', align(model.markDef, encoding, config)),\n        ...valueIfDefined('baseline', baseline(model.markDef, encoding, config)),\n        ...pointPosition('radius', model, {\n          defaultPos: null,\n          isMidPoint: true\n        }),\n        ...pointPosition('theta', model, {\n          defaultPos: null,\n          isMidPoint: true\n        })\n      };\n    }\n  };\n\n  function align(markDef, encoding, config) {\n    const a = getMarkPropOrConfig('align', markDef, config);\n\n    if (a === undefined) {\n      return 'center';\n    } // If there is a config, Vega-parser will process this already.\n\n\n    return undefined;\n  }\n\n  function baseline(markDef, encoding, config) {\n    const b = getMarkPropOrConfig('baseline', markDef, config);\n\n    if (b === undefined) {\n      return 'middle';\n    } // If there is a config, Vega-parser will process this already.\n\n\n    return undefined;\n  }\n\n  const tick = {\n    vgMark: 'rect',\n    encodeEntry: model => {\n      const {\n        config,\n        markDef\n      } = model;\n      const orient = markDef.orient;\n      const vgSizeChannel = orient === 'horizontal' ? 'width' : 'height';\n      const vgThicknessChannel = orient === 'horizontal' ? 'height' : 'width';\n      return { ...baseEncodeEntry(model, {\n          align: 'ignore',\n          baseline: 'ignore',\n          color: 'include',\n          orient: 'ignore',\n          size: 'ignore',\n          theta: 'ignore'\n        }),\n        ...pointPosition('x', model, {\n          defaultPos: 'mid',\n          vgChannel: 'xc'\n        }),\n        ...pointPosition('y', model, {\n          defaultPos: 'mid',\n          vgChannel: 'yc'\n        }),\n        // size / thickness => width / height\n        ...nonPosition('size', model, {\n          defaultValue: defaultSize(model),\n          vgChannel: vgSizeChannel\n        }),\n        [vgThicknessChannel]: signalOrValueRef(getMarkPropOrConfig('thickness', markDef, config))\n      };\n    }\n  };\n\n  function defaultSize(model) {\n    var _getMarkPropOrConfig;\n\n    const {\n      config,\n      markDef\n    } = model;\n    const {\n      orient\n    } = markDef;\n    const vgSizeChannel = orient === 'horizontal' ? 'width' : 'height';\n    const scale = model.getScaleComponent(orient === 'horizontal' ? 'x' : 'y');\n    const markPropOrConfig = (_getMarkPropOrConfig = getMarkPropOrConfig('size', markDef, config, {\n      vgChannel: vgSizeChannel\n    })) !== null && _getMarkPropOrConfig !== void 0 ? _getMarkPropOrConfig : config.tick.bandSize;\n\n    if (markPropOrConfig !== undefined) {\n      return markPropOrConfig;\n    } else {\n      const scaleRange = scale ? scale.get('range') : undefined;\n\n      if (scaleRange && isVgRangeStep(scaleRange) && isNumber(scaleRange.step)) {\n        return scaleRange.step * 3 / 4;\n      }\n\n      const defaultViewStep = getViewConfigDiscreteStep(config.view, vgSizeChannel);\n      return defaultViewStep * 3 / 4;\n    }\n  }\n\n  const markCompiler = {\n    arc,\n    area,\n    bar,\n    circle,\n    geoshape,\n    image,\n    line,\n    point,\n    rect,\n    rule,\n    square,\n    text: text$1,\n    tick,\n    trail\n  };\n  function parseMarkGroups(model) {\n    if (contains([LINE, AREA, TRAIL], model.mark)) {\n      const details = pathGroupingFields(model.mark, model.encoding);\n\n      if (details.length > 0) {\n        return getPathGroups(model, details);\n      } // otherwise use standard mark groups\n\n    } else if (contains([BAR], model.mark)) {\n      const hasCornerRadius = VG_CORNERRADIUS_CHANNELS.some(prop => getMarkPropOrConfig(prop, model.markDef, model.config));\n\n      if (model.stack && !model.fieldDef('size') && hasCornerRadius) {\n        return getGroupsForStackedBarWithCornerRadius(model);\n      }\n    }\n\n    return getMarkGroup(model);\n  }\n  const FACETED_PATH_PREFIX = 'faceted_path_';\n\n  function getPathGroups(model, details) {\n    // TODO: for non-stacked plot, map order to zindex. (Maybe rename order for layer to zindex?)\n    return [{\n      name: model.getName('pathgroup'),\n      type: 'group',\n      from: {\n        facet: {\n          name: FACETED_PATH_PREFIX + model.requestDataName(DataSourceType.Main),\n          data: model.requestDataName(DataSourceType.Main),\n          groupby: details\n        }\n      },\n      encode: {\n        update: {\n          width: {\n            field: {\n              group: 'width'\n            }\n          },\n          height: {\n            field: {\n              group: 'height'\n            }\n          }\n        }\n      },\n      // With subfacet for line/area group, need to use faceted data from above.\n      marks: getMarkGroup(model, {\n        fromPrefix: FACETED_PATH_PREFIX\n      })\n    }];\n  }\n\n  const STACK_GROUP_PREFIX = 'stack_group_';\n  /**\n   * We need to put stacked bars into groups in order to enable cornerRadius for stacks.\n   * If stack is used and the model doesn't have size encoding, we put the mark into groups,\n   * and apply cornerRadius properties at the group.\n   */\n\n  function getGroupsForStackedBarWithCornerRadius(model) {\n    // Generate the mark\n    const [mark] = getMarkGroup(model, {\n      fromPrefix: STACK_GROUP_PREFIX\n    }); // Get the scale for the stacked field\n\n    const fieldScale = model.scaleName(model.stack.fieldChannel);\n\n    const stackField = (opt = {}) => model.vgField(model.stack.fieldChannel, opt); // Find the min/max of the pixel value on the stacked direction\n\n\n    const stackFieldGroup = (func, expr) => {\n      const vgFieldMinMax = [stackField({\n        prefix: 'min',\n        suffix: 'start',\n        expr\n      }), stackField({\n        prefix: 'max',\n        suffix: 'start',\n        expr\n      }), stackField({\n        prefix: 'min',\n        suffix: 'end',\n        expr\n      }), stackField({\n        prefix: 'max',\n        suffix: 'end',\n        expr\n      })];\n      return \"\".concat(func, \"(\").concat(vgFieldMinMax.map(field => \"scale('\".concat(fieldScale, \"',\").concat(field, \")\")).join(','), \")\");\n    };\n\n    let groupUpdate;\n    let innerGroupUpdate; // Build the encoding for group and an inner group\n\n    if (model.stack.fieldChannel === 'x') {\n      // Move cornerRadius, y/yc/y2/height properties to group\n      // Group x/x2 should be the min/max of the marks within\n      groupUpdate = { ...pick(mark.encode.update, ['y', 'yc', 'y2', 'height', ...VG_CORNERRADIUS_CHANNELS]),\n        x: {\n          signal: stackFieldGroup('min', 'datum')\n        },\n        x2: {\n          signal: stackFieldGroup('max', 'datum')\n        },\n        clip: {\n          value: true\n        }\n      }; // Inner group should revert the x translation, and pass height through\n\n      innerGroupUpdate = {\n        x: {\n          field: {\n            group: 'x'\n          },\n          mult: -1\n        },\n        height: {\n          field: {\n            group: 'height'\n          }\n        }\n      }; // The marks should use the same height as group, without y/yc/y2 properties (because it's already done by group)\n      // This is why size encoding is not supported yet\n\n      mark.encode.update = { ...omit(mark.encode.update, ['y', 'yc', 'y2']),\n        height: {\n          field: {\n            group: 'height'\n          }\n        }\n      };\n    } else {\n      groupUpdate = { ...pick(mark.encode.update, ['x', 'xc', 'x2', 'width']),\n        y: {\n          signal: stackFieldGroup('min', 'datum')\n        },\n        y2: {\n          signal: stackFieldGroup('max', 'datum')\n        },\n        clip: {\n          value: true\n        }\n      };\n      innerGroupUpdate = {\n        y: {\n          field: {\n            group: 'y'\n          },\n          mult: -1\n        },\n        width: {\n          field: {\n            group: 'width'\n          }\n        }\n      };\n      mark.encode.update = { ...omit(mark.encode.update, ['x', 'xc', 'x2']),\n        width: {\n          field: {\n            group: 'width'\n          }\n        }\n      };\n    } // Deal with cornerRadius properties\n\n\n    for (const key of VG_CORNERRADIUS_CHANNELS) {\n      const configValue = getMarkConfig(key, model.markDef, model.config); // Move from mark to group\n\n      if (mark.encode.update[key]) {\n        groupUpdate[key] = mark.encode.update[key];\n        delete mark.encode.update[key];\n      } else if (configValue) {\n        groupUpdate[key] = signalOrValueRef(configValue);\n      } // Overwrite any cornerRadius on mark set by config --- they are already moved to the group\n\n\n      if (configValue) {\n        mark.encode.update[key] = {\n          value: 0\n        };\n      }\n    } // For bin and time unit, we have to add bin/timeunit -end channels.\n\n\n    const groupByField = model.fieldDef(model.stack.groupbyChannel);\n    const groupby = vgField(groupByField) ? [vgField(groupByField)] : [];\n\n    if ((groupByField === null || groupByField === void 0 ? void 0 : groupByField.bin) || (groupByField === null || groupByField === void 0 ? void 0 : groupByField.timeUnit)) {\n      groupby.push(vgField(groupByField, {\n        binSuffix: 'end'\n      }));\n    }\n\n    const strokeProperties = ['stroke', 'strokeWidth', 'strokeJoin', 'strokeCap', 'strokeDash', 'strokeDashOffset', 'strokeMiterLimit', 'strokeOpacity']; // Generate stroke properties for the group\n\n    groupUpdate = strokeProperties.reduce((encode, prop) => {\n      if (mark.encode.update[prop]) {\n        return { ...encode,\n          [prop]: mark.encode.update[prop]\n        };\n      } else {\n        const configValue = getMarkConfig(prop, model.markDef, model.config);\n\n        if (configValue !== undefined) {\n          return { ...encode,\n            [prop]: signalOrValueRef(configValue)\n          };\n        } else {\n          return encode;\n        }\n      }\n    }, groupUpdate); // Apply strokeForeground and strokeOffset if stroke is used\n\n    if (groupUpdate.stroke) {\n      groupUpdate.strokeForeground = {\n        value: true\n      };\n      groupUpdate.strokeOffset = {\n        value: 0\n      };\n    }\n\n    return [{\n      type: 'group',\n      from: {\n        facet: {\n          data: model.requestDataName(DataSourceType.Main),\n          name: STACK_GROUP_PREFIX + model.requestDataName(DataSourceType.Main),\n          groupby,\n          aggregate: {\n            fields: [stackField({\n              suffix: 'start'\n            }), stackField({\n              suffix: 'start'\n            }), stackField({\n              suffix: 'end'\n            }), stackField({\n              suffix: 'end'\n            })],\n            ops: ['min', 'max', 'min', 'max']\n          }\n        }\n      },\n      encode: {\n        update: groupUpdate\n      },\n      marks: [{\n        type: 'group',\n        encode: {\n          update: innerGroupUpdate\n        },\n        marks: [mark]\n      }]\n    }];\n  }\n\n  function getSort$1(model) {\n    const {\n      encoding,\n      stack,\n      mark,\n      markDef,\n      config\n    } = model;\n    const order = encoding.order;\n\n    if (!isArray(order) && isValueDef(order) && isNullOrFalse(order.value) || !order && isNullOrFalse(getMarkPropOrConfig('order', markDef, config))) {\n      return undefined;\n    } else if ((isArray(order) || isFieldDef(order)) && !stack) {\n      // Sort by the order field if it is specified and the field is not stacked. (For stacked field, order specify stack order.)\n      return sortParams(order, {\n        expr: 'datum'\n      });\n    } else if (isPathMark(mark)) {\n      // For both line and area, we sort values based on dimension by default\n      const dimensionChannel = markDef.orient === 'horizontal' ? 'y' : 'x';\n      const dimensionChannelDef = encoding[dimensionChannel];\n\n      if (isFieldDef(dimensionChannelDef)) {\n        const s = dimensionChannelDef.sort;\n\n        if (isArray(s)) {\n          return {\n            field: vgField(dimensionChannelDef, {\n              prefix: dimensionChannel,\n              suffix: 'sort_index',\n              expr: 'datum'\n            })\n          };\n        } else if (isSortField(s)) {\n          return {\n            field: vgField({\n              // FIXME: this op might not already exist?\n              // FIXME: what if dimensionChannel (x or y) contains custom domain?\n              aggregate: isAggregate(model.encoding) ? s.op : undefined,\n              field: s.field\n            }, {\n              expr: 'datum'\n            })\n          };\n        } else if (isSortByEncoding(s)) {\n          const fieldDefToSort = model.fieldDef(s.encoding);\n          return {\n            field: vgField(fieldDefToSort, {\n              expr: 'datum'\n            }),\n            order: s.order\n          };\n        } else if (s === null) {\n          return undefined;\n        } else {\n          return {\n            field: vgField(dimensionChannelDef, {\n              // For stack with imputation, we only have bin_mid\n              binSuffix: model.stack && model.stack.impute ? 'mid' : undefined,\n              expr: 'datum'\n            })\n          };\n        }\n      }\n\n      return undefined;\n    }\n\n    return undefined;\n  }\n\n  function getMarkGroup(model, opt = {\n    fromPrefix: ''\n  }) {\n    const {\n      mark,\n      markDef,\n      encoding,\n      config\n    } = model;\n    const clip = getFirstDefined(markDef.clip, scaleClip(model), projectionClip(model));\n    const style = getStyles(markDef);\n    const key = encoding.key;\n    const sort = getSort$1(model);\n    const interactive = interactiveFlag(model);\n    const aria = getMarkPropOrConfig('aria', markDef, config);\n    const postEncodingTransform = markCompiler[mark].postEncodingTransform ? markCompiler[mark].postEncodingTransform(model) : null;\n    return [{\n      name: model.getName('marks'),\n      type: markCompiler[mark].vgMark,\n      ...(clip ? {\n        clip: true\n      } : {}),\n      ...(style ? {\n        style\n      } : {}),\n      ...(key ? {\n        key: key.field\n      } : {}),\n      ...(sort ? {\n        sort\n      } : {}),\n      ...(interactive ? interactive : {}),\n      ...(aria === false ? {\n        aria\n      } : {}),\n      from: {\n        data: opt.fromPrefix + model.requestDataName(DataSourceType.Main)\n      },\n      encode: {\n        update: markCompiler[mark].encodeEntry(model)\n      },\n      ...(postEncodingTransform ? {\n        transform: postEncodingTransform\n      } : {})\n    }];\n  }\n  /**\n   * If scales are bound to interval selections, we want to automatically clip\n   * marks to account for panning/zooming interactions. We identify bound scales\n   * by the selectionExtent property, which gets added during scale parsing.\n   */\n\n\n  function scaleClip(model) {\n    const xScale = model.getScaleComponent('x');\n    const yScale = model.getScaleComponent('y');\n    return xScale && xScale.get('selectionExtent') || yScale && yScale.get('selectionExtent') ? true : undefined;\n  }\n  /**\n   * If we use a custom projection with auto-fitting to the geodata extent,\n   * we need to clip to ensure the chart size doesn't explode.\n   */\n\n\n  function projectionClip(model) {\n    const projection = model.component.projection;\n    return projection && !projection.isFit ? true : undefined;\n  }\n  /**\n   * Only output interactive flags if we have selections defined somewhere in our model hierarchy.\n   */\n\n\n  function interactiveFlag(model) {\n    if (!model.component.selection) return null;\n    const unitCount = keys(model.component.selection).length;\n    let parentCount = unitCount;\n    let parent = model.parent;\n\n    while (parent && parentCount === 0) {\n      parentCount = keys(parent.component.selection).length;\n      parent = parent.parent;\n    }\n\n    return parentCount ? {\n      interactive: unitCount > 0 || !!model.encoding.tooltip\n    } : null;\n  }\n\n  /**\n   * Internal model of Vega-Lite specification for the compiler.\n   */\n\n  class UnitModel extends ModelWithField {\n    constructor(spec, parent, parentGivenName, parentGivenSize = {}, config) {\n      super(spec, 'unit', parent, parentGivenName, config, undefined, isFrameMixins(spec) ? spec.view : undefined);\n\n      _defineProperty(this, \"markDef\", void 0);\n\n      _defineProperty(this, \"encoding\", void 0);\n\n      _defineProperty(this, \"specifiedScales\", {});\n\n      _defineProperty(this, \"stack\", void 0);\n\n      _defineProperty(this, \"specifiedAxes\", {});\n\n      _defineProperty(this, \"specifiedLegends\", {});\n\n      _defineProperty(this, \"specifiedProjection\", {});\n\n      _defineProperty(this, \"selection\", {});\n\n      _defineProperty(this, \"children\", []);\n\n      const markDef = isMarkDef(spec.mark) ? { ...spec.mark\n      } : {\n        type: spec.mark\n      };\n      const mark = markDef.type; // Need to init filled before other mark properties because encoding depends on filled but other mark properties depend on types inside encoding\n\n      if (markDef.filled === undefined) {\n        markDef.filled = defaultFilled(markDef, config, {\n          graticule: spec.data && isGraticuleGenerator(spec.data)\n        });\n      }\n\n      const encoding = this.encoding = initEncoding(spec.encoding || {}, mark, markDef.filled, config);\n      this.markDef = initMarkdef(markDef, encoding, config);\n      this.size = initLayoutSize({\n        encoding: encoding,\n        size: isFrameMixins(spec) ? { ...parentGivenSize,\n          ...(spec.width ? {\n            width: spec.width\n          } : {}),\n          ...(spec.height ? {\n            height: spec.height\n          } : {})\n        } : parentGivenSize\n      }); // calculate stack properties\n\n      this.stack = stack(mark, encoding);\n      this.specifiedScales = this.initScales(mark, encoding);\n      this.specifiedAxes = this.initAxes(encoding);\n      this.specifiedLegends = this.initLegends(encoding);\n      this.specifiedProjection = spec.projection; // Selections will be initialized upon parse.\n\n      this.selection = spec.selection;\n    }\n\n    get hasProjection() {\n      const {\n        encoding\n      } = this;\n      const isGeoShapeMark = this.mark === GEOSHAPE;\n      const hasGeoPosition = encoding && GEOPOSITION_CHANNELS.some(channel => isFieldOrDatumDef(encoding[channel]));\n      return isGeoShapeMark || hasGeoPosition;\n    }\n    /**\n     * Return specified Vega-Lite scale domain for a particular channel\n     * @param channel\n     */\n\n\n    scaleDomain(channel) {\n      const scale = this.specifiedScales[channel];\n      return scale ? scale.domain : undefined;\n    }\n\n    axis(channel) {\n      return this.specifiedAxes[channel];\n    }\n\n    legend(channel) {\n      return this.specifiedLegends[channel];\n    }\n\n    initScales(mark, encoding) {\n      return SCALE_CHANNELS.reduce((scales, channel) => {\n        const fieldOrDatumDef = getFieldOrDatumDef(encoding[channel]);\n\n        if (fieldOrDatumDef) {\n          var _fieldOrDatumDef$scal;\n\n          scales[channel] = this.initScale((_fieldOrDatumDef$scal = fieldOrDatumDef.scale) !== null && _fieldOrDatumDef$scal !== void 0 ? _fieldOrDatumDef$scal : {});\n        }\n\n        return scales;\n      }, {});\n    }\n\n    initScale(scale) {\n      const {\n        domain,\n        range\n      } = scale;\n      const scaleInternal = replaceExprRefInIndex(scale);\n\n      if (isArray(domain)) {\n        scaleInternal.domain = domain.map(signalRefOrValue);\n      }\n\n      if (isArray(range)) {\n        scaleInternal.range = range.map(signalRefOrValue);\n      }\n\n      return scaleInternal;\n    }\n\n    initAxes(encoding) {\n      return POSITION_SCALE_CHANNELS.reduce((_axis, channel) => {\n        // Position Axis\n        // TODO: handle ConditionFieldDef\n        const channelDef = encoding[channel];\n\n        if (isFieldOrDatumDef(channelDef) || channel === X && isFieldOrDatumDef(encoding.x2) || channel === Y && isFieldOrDatumDef(encoding.y2)) {\n          const axisSpec = isFieldOrDatumDef(channelDef) ? channelDef.axis : undefined;\n          _axis[channel] = axisSpec ? this.initAxis({ ...axisSpec\n          }) // convert truthy value to object\n          : axisSpec;\n        }\n\n        return _axis;\n      }, {});\n    }\n\n    initAxis(axis) {\n      const props = keys(axis);\n      const axisInternal = {};\n\n      for (const prop of props) {\n        const val = axis[prop];\n        axisInternal[prop] = isConditionalAxisValue(val) ? signalOrValueRefWithCondition(val) : signalRefOrValue(val);\n      }\n\n      return axisInternal;\n    }\n\n    initLegends(encoding) {\n      return NONPOSITION_SCALE_CHANNELS.reduce((_legend, channel) => {\n        const fieldOrDatumDef = getFieldOrDatumDef(encoding[channel]);\n\n        if (fieldOrDatumDef && supportLegend(channel)) {\n          const legend = fieldOrDatumDef.legend;\n          _legend[channel] = legend ? replaceExprRefInIndex(legend) // convert truthy value to object\n          : legend;\n        }\n\n        return _legend;\n      }, {});\n    }\n\n    parseData() {\n      this.component.data = parseData(this);\n    }\n\n    parseLayoutSize() {\n      parseUnitLayoutSize(this);\n    }\n\n    parseSelections() {\n      this.component.selection = parseUnitSelection(this, this.selection);\n    }\n\n    parseMarkGroup() {\n      this.component.mark = parseMarkGroups(this);\n    }\n\n    parseAxesAndHeaders() {\n      this.component.axes = parseUnitAxes(this);\n    }\n\n    assembleSelectionTopLevelSignals(signals) {\n      return assembleTopLevelSignals(this, signals);\n    }\n\n    assembleSignals() {\n      return [...assembleAxisSignals(this), ...assembleUnitSelectionSignals(this, [])];\n    }\n\n    assembleSelectionData(data) {\n      return assembleUnitSelectionData(this, data);\n    }\n\n    assembleLayout() {\n      return null;\n    }\n\n    assembleLayoutSignals() {\n      return assembleLayoutSignals(this);\n    }\n\n    assembleMarks() {\n      var _this$component$mark;\n\n      let marks = (_this$component$mark = this.component.mark) !== null && _this$component$mark !== void 0 ? _this$component$mark : []; // If this unit is part of a layer, selections should augment\n      // all in concert rather than each unit individually. This\n      // ensures correct interleaving of clipping and brushed marks.\n\n      if (!this.parent || !isLayerModel(this.parent)) {\n        marks = assembleUnitSelectionMarks(this, marks);\n      }\n\n      return marks.map(this.correctDataNames);\n    }\n\n    getMapping() {\n      return this.encoding;\n    }\n\n    get mark() {\n      return this.markDef.type;\n    }\n\n    channelHasField(channel) {\n      return channelHasField(this.encoding, channel);\n    }\n\n    fieldDef(channel) {\n      const channelDef = this.encoding[channel];\n      return getFieldDef(channelDef);\n    }\n\n    typedFieldDef(channel) {\n      const fieldDef = this.fieldDef(channel);\n\n      if (isTypedFieldDef(fieldDef)) {\n        return fieldDef;\n      }\n\n      return null;\n    }\n\n  }\n\n  class LayerModel extends Model {\n    // HACK: This should be (LayerModel | UnitModel)[], but setting the correct type leads to weird error.\n    // So I'm just putting generic Model for now\n    constructor(spec, parent, parentGivenName, parentGivenSize, config) {\n      super(spec, 'layer', parent, parentGivenName, config, spec.resolve, spec.view);\n\n      _defineProperty(this, \"children\", void 0);\n\n      const layoutSize = { ...parentGivenSize,\n        ...(spec.width ? {\n          width: spec.width\n        } : {}),\n        ...(spec.height ? {\n          height: spec.height\n        } : {})\n      };\n      this.children = spec.layer.map((layer, i) => {\n        if (isLayerSpec(layer)) {\n          return new LayerModel(layer, this, this.getName('layer_' + i), layoutSize, config);\n        } else if (isUnitSpec(layer)) {\n          return new UnitModel(layer, this, this.getName('layer_' + i), layoutSize, config);\n        }\n\n        throw new Error(invalidSpec(layer));\n      });\n    }\n\n    parseData() {\n      this.component.data = parseData(this);\n\n      for (const child of this.children) {\n        child.parseData();\n      }\n    }\n\n    parseLayoutSize() {\n      parseLayerLayoutSize(this);\n    }\n\n    parseSelections() {\n      // Merge selections up the hierarchy so that they may be referenced\n      // across unit specs. Persist their definitions within each child\n      // to assemble signals which remain within output Vega unit groups.\n      this.component.selection = {};\n\n      for (const child of this.children) {\n        child.parseSelections();\n\n        for (const key of keys(child.component.selection)) {\n          this.component.selection[key] = child.component.selection[key];\n        }\n      }\n    }\n\n    parseMarkGroup() {\n      for (const child of this.children) {\n        child.parseMarkGroup();\n      }\n    }\n\n    parseAxesAndHeaders() {\n      parseLayerAxes(this);\n    }\n\n    assembleSelectionTopLevelSignals(signals) {\n      return this.children.reduce((sg, child) => child.assembleSelectionTopLevelSignals(sg), signals);\n    } // TODO: Support same named selections across children.\n\n\n    assembleSignals() {\n      return this.children.reduce((signals, child) => {\n        return signals.concat(child.assembleSignals());\n      }, assembleAxisSignals(this));\n    }\n\n    assembleLayoutSignals() {\n      return this.children.reduce((signals, child) => {\n        return signals.concat(child.assembleLayoutSignals());\n      }, assembleLayoutSignals(this));\n    }\n\n    assembleSelectionData(data) {\n      return this.children.reduce((db, child) => child.assembleSelectionData(db), data);\n    }\n\n    assembleTitle() {\n      let title = super.assembleTitle();\n\n      if (title) {\n        return title;\n      } // If title does not provide layer, look into children\n\n\n      for (const child of this.children) {\n        title = child.assembleTitle();\n\n        if (title) {\n          return title;\n        }\n      }\n\n      return undefined;\n    }\n\n    assembleLayout() {\n      return null;\n    }\n\n    assembleMarks() {\n      return assembleLayerSelectionMarks(this, this.children.flatMap(child => {\n        return child.assembleMarks();\n      }));\n    }\n\n    assembleLegends() {\n      return this.children.reduce((legends, child) => {\n        return legends.concat(child.assembleLegends());\n      }, assembleLegends(this));\n    }\n\n  }\n\n  function buildModel(spec, parent, parentGivenName, unitSize, config) {\n    if (isFacetSpec(spec)) {\n      return new FacetModel(spec, parent, parentGivenName, config);\n    } else if (isLayerSpec(spec)) {\n      return new LayerModel(spec, parent, parentGivenName, unitSize, config);\n    } else if (isUnitSpec(spec)) {\n      return new UnitModel(spec, parent, parentGivenName, unitSize, config);\n    } else if (isAnyConcatSpec(spec)) {\n      return new ConcatModel(spec, parent, parentGivenName, config);\n    }\n\n    throw new Error(invalidSpec(spec));\n  }\n\n  /**\n   * Vega-Lite's main function, for compiling Vega-Lite spec into Vega spec.\n   *\n   * At a high-level, we make the following transformations in different phases:\n   *\n   * Input spec\n   *     |\n   *     |  (Normalization)\n   *     v\n   * Normalized Spec (Row/Column channels in single-view specs becomes faceted specs, composite marks becomes layered specs.)\n   *     |\n   *     |  (Build Model)\n   *     v\n   * A model tree of the spec\n   *     |\n   *     |  (Parse)\n   *     v\n   * A model tree with parsed components (intermediate structure of visualization primitives in a format that can be easily merged)\n   *     |\n   *     | (Optimize)\n   *     v\n   * A model tree with parsed components with the data component optimized\n   *     |\n   *     | (Assemble)\n   *     v\n   * Vega spec\n   *\n   * @param inputSpec The Vega-Lite specification.\n   * @param opt       Optional arguments passed to the Vega-Lite compiler.\n   * @returns         An object containing the compiled Vega spec and normalized Vega-Lite spec.\n   */\n  function compile(inputSpec, opt = {}) {\n    // 0. Augment opt with default opts\n    if (opt.logger) {\n      // set the singleton logger to the provided logger\n      set(opt.logger);\n    }\n\n    if (opt.fieldTitle) {\n      // set the singleton field title formatter\n      setTitleFormatter(opt.fieldTitle);\n    }\n\n    try {\n      // 1. Initialize config by deep merging default config with the config provided via option and the input spec.\n      const config = initConfig(mergeConfig(opt.config, inputSpec.config)); // 2. Normalize: Convert input spec -> normalized spec\n      // - Decompose all extended unit specs into composition of unit spec. For example, a box plot get expanded into multiple layers of bars, ticks, and rules. The shorthand row/column channel is also expanded to a facet spec.\n      // - Normalize autosize and width or height spec\n\n      const spec = normalize(inputSpec, config); // 3. Build Model: normalized spec -> Model (a tree structure)\n      // This phases instantiates the models with default config by doing a top-down traversal. This allows us to pass properties that child models derive from their parents via their constructors.\n      // See the abstract `Model` class and its children (UnitModel, LayerModel, FacetModel, ConcatModel) for different types of models.\n\n      const model = buildModel(spec, null, '', undefined, config); // 4 Parse: Model --> Model with components\n      // Note that components = intermediate representations that are equivalent to Vega specs.\n      // We need these intermediate representation because we need to merge many visualization \"components\" like projections, scales, axes, and legends.\n      // We will later convert these components into actual Vega specs in the assemble phase.\n      // In this phase, we do a bottom-up traversal over the whole tree to\n      // parse for each type of components once (e.g., data, layout, mark, scale).\n      // By doing bottom-up traversal, we start parsing components of unit specs and\n      // then merge child components of parent composite specs.\n      //\n      // Please see inside model.parse() for order of different components parsed.\n\n      model.parse(); // drawDataflow(model.component.data.sources);\n      // 5. Optimize the dataflow. This will modify the data component of the model.\n\n      optimizeDataflow(model.component.data, model); // drawDataflow(model.component.data.sources);\n      // 6. Assemble: convert model components --> Vega Spec.\n\n      const vgSpec = assembleTopLevelModel(model, getTopLevelProperties(inputSpec, spec.autosize, config, model), inputSpec.datasets, inputSpec.usermeta);\n      return {\n        spec: vgSpec,\n        normalized: spec\n      };\n    } finally {\n      // Reset the singleton logger if a logger is provided\n      if (opt.logger) {\n        reset();\n      } // Reset the singleton field title formatter if provided\n\n\n      if (opt.fieldTitle) {\n        resetTitleFormatter();\n      }\n    }\n  }\n\n  function getTopLevelProperties(inputSpec, autosize, config, model) {\n    const width = model.component.layoutSize.get('width');\n    const height = model.component.layoutSize.get('height');\n\n    if (autosize === undefined) {\n      autosize = {\n        type: 'pad'\n      };\n\n      if (model.hasAxisOrientSignalRef()) {\n        autosize.resize = true;\n      }\n    } else if (isString(autosize)) {\n      autosize = {\n        type: autosize\n      };\n    }\n\n    if (width && height && isFitType(autosize.type)) {\n      if (width === 'step' && height === 'step') {\n        warn(droppingFit());\n        autosize.type = 'pad';\n      } else if (width === 'step' || height === 'step') {\n        // effectively XOR, because else if\n        // get step dimension\n        const sizeType = width === 'step' ? 'width' : 'height'; // log that we're dropping fit for respective channel\n\n        warn(droppingFit(getPositionScaleChannel(sizeType))); // setting type to inverse fit (so if we dropped fit-x, type is now fit-y)\n\n        const inverseSizeType = sizeType === 'width' ? 'height' : 'width';\n        autosize.type = getFitType(inverseSizeType);\n      }\n    }\n\n    return { ...(keys(autosize).length === 1 && autosize.type ? autosize.type === 'pad' ? {} : {\n        autosize: autosize.type\n      } : {\n        autosize\n      }),\n      ...extractTopLevelProperties(config, false),\n      ...extractTopLevelProperties(inputSpec, true)\n    };\n  }\n  /*\n   * Assemble the top-level model to a Vega spec.\n   *\n   * Note: this couldn't be `model.assemble()` since the top-level model\n   * needs some special treatment to generate top-level properties.\n   */\n\n\n  function assembleTopLevelModel(model, topLevelProperties, datasets = {}, usermeta) {\n    // Config with Vega-Lite only config removed.\n    const vgConfig = model.config ? stripAndRedirectConfig(model.config) : undefined;\n    const data = [].concat(model.assembleSelectionData([]), // only assemble data in the root\n    assembleRootData(model.component.data, datasets));\n    const projections = model.assembleProjections();\n    const title = model.assembleTitle();\n    const style = model.assembleGroupStyle();\n    const encodeEntry = model.assembleGroupEncodeEntry(true);\n    let layoutSignals = model.assembleLayoutSignals(); // move width and height signals with values to top level\n\n    layoutSignals = layoutSignals.filter(signal => {\n      if ((signal.name === 'width' || signal.name === 'height') && signal.value !== undefined) {\n        topLevelProperties[signal.name] = +signal.value;\n        return false;\n      }\n\n      return true;\n    });\n    const {\n      params,\n      ...otherTopLevelProps\n    } = topLevelProperties;\n    return {\n      $schema: 'https://vega.github.io/schema/vega/v5.json',\n      ...(model.description ? {\n        description: model.description\n      } : {}),\n      ...otherTopLevelProps,\n      ...(title ? {\n        title\n      } : {}),\n      ...(style ? {\n        style\n      } : {}),\n      ...(encodeEntry ? {\n        encode: {\n          update: encodeEntry\n        }\n      } : {}),\n      data,\n      ...(projections.length > 0 ? {\n        projections: projections\n      } : {}),\n      ...model.assembleGroup([...layoutSignals, ...model.assembleSelectionTopLevelSignals([]), ...assembleParameterSignals(params)]),\n      ...(vgConfig ? {\n        config: vgConfig\n      } : {}),\n      ...(usermeta ? {\n        usermeta\n      } : {})\n    };\n  }\n\n  exports.accessPathDepth = accessPathDepth;\n  exports.accessPathWithDatum = accessPathWithDatum;\n  exports.compile = compile;\n  exports.contains = contains;\n  exports.deepEqual = deepEqual;\n  exports.deleteNestedProperty = deleteNestedProperty;\n  exports.duplicate = duplicate;\n  exports.entries = entries;\n  exports.every = every;\n  exports.fieldIntersection = fieldIntersection;\n  exports.flatAccessWithDatum = flatAccessWithDatum;\n  exports.getFirstDefined = getFirstDefined;\n  exports.hasIntersection = hasIntersection;\n  exports.hash = hash;\n  exports.internalField = internalField;\n  exports.isBoolean = isBoolean$1;\n  exports.isEmpty = isEmpty;\n  exports.isEqual = isEqual;\n  exports.isInternalField = isInternalField;\n  exports.isNullOrFalse = isNullOrFalse;\n  exports.isNumeric = isNumeric;\n  exports.keys = keys;\n  exports.logicalExpr = logicalExpr;\n  exports.mergeDeep = mergeDeep;\n  exports.normalize = normalize;\n  exports.normalizeAngle = normalizeAngle;\n  exports.omit = omit;\n  exports.pick = pick;\n  exports.prefixGenerator = prefixGenerator;\n  exports.removePathFromField = removePathFromField;\n  exports.replaceAll = replaceAll;\n  exports.replacePathInField = replacePathInField;\n  exports.resetIdCounter = resetIdCounter;\n  exports.setEqual = setEqual;\n  exports.some = some;\n  exports.stringify = stringify;\n  exports.titleCase = titleCase;\n  exports.unique = unique;\n  exports.uniqueId = uniqueId;\n  exports.vals = vals;\n  exports.varName = varName;\n  exports.version = version;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n//# sourceMappingURL=vega-lite.js.map\n\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$buffer$index"]],"~:properties",["^5",["tickColor","domainMax","blue","sources","trail","fillColor","stop","BAND","properties","headerFacet","interactive","maxFontSize","customTooltipWithoutAggregatedField","countTitle","flatAccessWithDatum","bar","role","timeUnit","vgAxisConfig","__isRegExp","parts","object","endPositionPrefix","range","symlog","cornerRadiusTopLeft","dimensionFieldDef","stackBy","consume","isNumeric","symbolOffset","member","innerRadius","stream","strokeOffset","SQRT","geoshape","domainMid","dayofyear","labelLineHeight","compositeMark","vgProp","values","gradientOpacity","projectionNameMap","gradientVerticalMinLength","prefixGenerator","padAngle","unique","min","channelDef","nameMap","tick","fit","titleFont","parseNothing","width","titlePrefix","rule","gray6","domainWidth","purple","spacing","url","debounce","right","expr","align","axisXTemporal","normalize","axisQuantitative","milliseconds","signalNameMap","axisTop","columnPadding","uniqueId","debugName","tickCap","top","keys","extraEncoding","blend","replaceAll","resolve","configFrom","symbolStrokeWidth","interpolate","strokeForeground","legends","keyvals","gradient","model","rangeMin","warning","clonePrototype","joinaggregate","index","continuousWidth","config","axisDiscrete","groupSubtitle","ordinal","gridDashOffset","barBandPaddingInner","aria","offset","_name","sequential","translate","axisYDiscrete","maxOpacity","strokeDashOffset","axisX","isEqual","params","labelOverlap","average","accessPathWithDatum","sortIndexField","columns","scaleName","strokeCap","prototype","height","fieldDef","labelBaseline","specifiedAxes","shape","part","errorband","prefix","scale","radius2","fieldChannel","grid","legendType","area","_parent","QUANTILE","outputNodeRefCounts","not","hours","constant","spec","gradientVerticalMaxLength","every","gradientHorizontalMinLength","group","titlePadding","clip","smooth","timezone","visit","argmax","tooltipEncoding","image","domainDashOffset","labelFlush","encodingWithoutContinuousAxis","mean","zoom","operator","child","gray0","internalField","autosize","stderr","maxbins","labelFontWeight","q1","BIN_ORDINAL","defaultPos2","sum","gray5","startAngle","domainMin","orange","reverse","maxStrokeWidth","fontStyle","tooltip","calculate","hash","bind","fontWeight","continuousHeight","suffix","ariaRole","varName","ops","cross","contains","method","cornerRadius","lineHeight","projections","pick","key","ancestorParse","repeat","parent","titleBand","children","gray10","project","longitude","ignoreVgConfig","gridWidth","tickOffset","logicalExpr","gradientStrokeWidth","__objToStr","headerRow","errorBarSpecificAggregate","component","x","tickMinStep","__esModule","dx","force","labelSeparation","secondary","titleLineHeight","ORDINAL","labelOffset","_data","flat","detail","max","labelAnchor","radius","defined","path","gridColor","boxOrient","padding","fieldDef2","normalizeStack","theta2","titleFontSize","mainExtracted","strokeDash","inputType","axis","subtitleFont","cell","labelOpacity","orient","groupby","regex","lastIndex","vertical","fieldPrefix","require","encoding","strokeJoin","guideLabel","implicit","pow","vconcat","domainCap","run","subtitleMarkConfig","facetFieldDef","transform","flags","condition","stdevp","clipHeight","legend","symbolDashOffset","labelFontSize","argmin","childModel","push","SEQUENTIAL","repeaterPrefix","base","includeDefault","zero","scaleNameMap","box","labelFont","band","count","binSuffix","update","quantile","hasIntersection","groupbyChannel","gradientStrokeColor","paddingOuter","mult","invalid","marks","fieldOrDatumDef","utc","sort","latitude","facetRoot","parentEncoding","log","continuousAxisChannelDefError","impute","minStrokeWidth","symbols","anchor","axisYBand","gridOpacity","outliers","gray15","axisPoint","hasChannel","continuousAxisChannelDef2","product","undefinedIfExprNotRequired","signal","subtitleFontStyle","duplicate","_children","continuousBandSize","escape","angle","distinct","position","fieldOrDatumDef2","yellow","hconcat","wrapTime","pointPadding","reactiveGeom","domainDash","href","name","IDENTITY","axisTemporal","configurable","boxplot","limit","scales","postEncodingTransform","THRESHOLD","stroke","strokeMiterLimit","style","groupbyField","tooltipSummary","symbolOpacity","main","_source","octal","labels","axes","signals","value","paddingInner","interval","minFontSize","_stack","tickBand","items","requiresSelectionId","span","fromPrefix","$schema","specifiedProjection","rangeMax","center","dimensions","axisY","valid","isFaceted","flatMap","outerSpec","vals","aggregate","POINT","enumerable","titleMarkConfig","gridCap","allowDisabling","symbolSize","linear","axisXDiscrete","pink","TIME","__getRegExpFlags","ignorePeers","direction","tickOpacity","gradientHorizontalMaxLength","minutes","legendX","hasField","vgMark","or","identity","teal","field","titleCase","gray14","start","timeUnits","axisBand","specifiedScales","binned","axisRight","modifyExpr","labelAlign","text","axisXQuantitative","normalizer","fill","disable","threshold","cursor","gray7","unselectedOpacity","fontSize","gray4","strokeWidth","clamp","seconds","defaultPos","layout","writable","omit","scaleType","green","minExtent","bin","gray11","on","week","continuousAxisChannelDef","domain","red","axisBottom","resetIdCounter","subtitle","strokeOpacity","variancep","filled","content","sqrt","dir","baseline","concat","units","symbolLimit","brown","filter","longitude2","symbol","consequent","property","time","titleFontStyle","empty","extentSignal","mergeDeep","endAngle","configValue","bandPosition","channel2Def","font","tickSize","compile","gradientLength","topLevelSignals","ticksOrient","arc","events","domainRaw","quantizeCount","stackField","axisYQuantitative","tension","isVoronoi","line","kind","filteredEncoding","quarter","titleFontWeight","legendY","titleLimit","replacePathInField","groupTitle","timeUnitBandPosition","callee","ticks","and","order","column","titleBaseline","explicit","headerColumn","ci0","title","gray2","entries","_generator","year","axisYTemporal","square","ellipsis","labelLimit","normalized","toggle","source","guideTitle","facetby","pattern","_hash","binComponent","UTC","type","symbolDash","titleColor","row","tickDash","normalizeAngle","labelFontStyle","continuousAxisChannelDefError2","projection","getFirstDefined","forAs","y","horizontal","between","specifiedLegends","axisConfigStyle","labelOrient","titleAnchor","stringify","borders","deepEqual","x2","usermeta","init","ref","version","minBandSize","positionPrefix","middle","gray3","vgChannel","fields","missing","argument","accessPathDepth","hasLegend","from","domainOpacity","marktype","isInternalField","repeater","_dependentFields","nonMark","dy","theta","cornerRadiusBottomLeft","fieldIntersection","reason","gray1","transforms","gray9","subtitleFontSize","tickExtra","__isDate","unit","axisTranslate","parse","errorbar","tickDashOffset","date","y2","tooltipTitleWithFieldName","vegaLite","arguments","outerRadius","postAggregateCalculates","continuousAxis","gradientThickness","channel","alternate","bounds","fillOpacity","labelExpr","bottom","startSuffix","single","variance","some","strokeColor","cornerRadiusTopRight","prec","bins","rect","gray12","selection","symbolType","deleteNestedProperty","selections","defaultValue","category","isEmpty","facet","LINEAR","month","markDef","POW","resize","size","_parse","axisYPoint","has","scalePadding","compatible","subtitlePadding","setEqual","layer","op","axisLeft","legendCmpt","geojson","clear","subtitleFontWeight","titleX","gridDash","gray13","titleOrient","titleOpacity","day","minOpacity","QUANTIZE","sortField","titleAlign","raw","graticule","formatType","frame","formula","equal","tickWidth","materialized","quantize","outputNodes","markname","labelBound","maxExtent","facetMapping","symbolFillColor","merged","mark","dataName","gray8","latitude2","circle","removePathFromField","round","tickRound","quantileCount","stackby","q3","vlOnlyAxisConfig","layoutSize","thickness","aspect","multi","exponent","fname","rowPadding","data","axisXBand","background","view","get","merge","throttle","isMidPoint","encodeEntry","labelAngle","extent","encode","parentProjection","color","scalePaddingInner","enter","formulaAs","labelColor","stdev","refCounts","scheme","default","as","legendConfig","literal","encodings","symbolStrokeColor","opacity","titleY","measures","end","ariaRoleDescription","gridAlign","ci1","point","subtitleColor","defaultRef","header","elements","zindex","left","minSize","description","labelPadding","sizeSignal","computed","partName","cornerRadiusBottomRight","test","nice","isNullOrFalse","stack","__isArray","axisXPoint","format","isBoolean","domainColor","binSpacing","layoutHeaders","rectBandPaddingInner","titleAngle","labelFlushOffset","gridScale","LOG","subtitleLineHeight","channels","tickCount","step","SYMLOG","timeUnitBand","cmp","timeFormat","median","lineBreak"]],"~:compiled-at",1621210442583,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$vega_lite$build$vega_lite.js\",\n\"lineCount\":883,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/vega-lite/build/vega-lite.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$vega_lite$build$vega_lite\\\"] = function(global,require,module,exports) {\\nvar Buffer = require('buffer').Buffer;\\n(function (global, factory) {\\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\\n  typeof define === 'function' && define.amd ? define(['exports'], factory) :\\n  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.vegaLite = {}));\\n}(this, (function (exports) { 'use strict';\\n\\n  var version = \\\"4.17.0\\\";\\n\\n  function accessor(fn, fields, name) {\\n    fn.fields = fields || [];\\n    fn.fname = name;\\n    return fn;\\n  }\\n\\n  function getter(path) {\\n    return path.length === 1 ? get1(path[0]) : getN(path);\\n  }\\n\\n  const get1 = field => function (obj) {\\n    return obj[field];\\n  };\\n\\n  const getN = path => {\\n    const len = path.length;\\n    return function (obj) {\\n      for (let i = 0; i < len; ++i) {\\n        obj = obj[path[i]];\\n      }\\n\\n      return obj;\\n    };\\n  };\\n\\n  function error(message) {\\n    throw Error(message);\\n  }\\n\\n  function splitAccessPath(p) {\\n    const path = [],\\n          n = p.length;\\n    let q = null,\\n        b = 0,\\n        s = '',\\n        i,\\n        j,\\n        c;\\n    p = p + '';\\n\\n    function push() {\\n      path.push(s + p.substring(i, j));\\n      s = '';\\n      i = j + 1;\\n    }\\n\\n    for (i = j = 0; j < n; ++j) {\\n      c = p[j];\\n\\n      if (c === '\\\\\\\\') {\\n        s += p.substring(i, j);\\n        s += p.substring(++j, ++j);\\n        i = j;\\n      } else if (c === q) {\\n        push();\\n        q = null;\\n        b = -1;\\n      } else if (q) {\\n        continue;\\n      } else if (i === b && c === '\\\"') {\\n        i = j + 1;\\n        q = c;\\n      } else if (i === b && c === \\\"'\\\") {\\n        i = j + 1;\\n        q = c;\\n      } else if (c === '.' && !b) {\\n        if (j > i) {\\n          push();\\n        } else {\\n          i = j + 1;\\n        }\\n      } else if (c === '[') {\\n        if (j > i) push();\\n        b = i = j + 1;\\n      } else if (c === ']') {\\n        if (!b) error('Access path missing open bracket: ' + p);\\n        if (b > 0) push();\\n        b = 0;\\n        i = j + 1;\\n      }\\n    }\\n\\n    if (b) error('Access path missing closing bracket: ' + p);\\n    if (q) error('Access path missing closing quote: ' + p);\\n\\n    if (j > i) {\\n      j++;\\n      push();\\n    }\\n\\n    return path;\\n  }\\n\\n  function field(field, name, opt) {\\n    const path = splitAccessPath(field);\\n    field = path.length === 1 ? path[0] : field;\\n    return accessor((opt && opt.get || getter)(path), [field], name || field);\\n  }\\n\\n  const id = field('id');\\n  const identity = accessor(_ => _, [], 'identity');\\n  const zero = accessor(() => 0, [], 'zero');\\n  const one = accessor(() => 1, [], 'one');\\n  const truthy = accessor(() => true, [], 'true');\\n  const falsy = accessor(() => false, [], 'false');\\n\\n  function log(method, level, input) {\\n    const args = [level].concat([].slice.call(input));\\n    console[method].apply(console, args); // eslint-disable-line no-console\\n  }\\n\\n  const None = 0;\\n  const Error$1 = 1;\\n  const Warn = 2;\\n  const Info = 3;\\n  const Debug = 4;\\n\\n  function logger(_, method) {\\n    let level = _ || None;\\n    return {\\n      level(_) {\\n        if (arguments.length) {\\n          level = +_;\\n          return this;\\n        } else {\\n          return level;\\n        }\\n      },\\n\\n      error() {\\n        if (level >= Error$1) log(method || 'error', 'ERROR', arguments);\\n        return this;\\n      },\\n\\n      warn() {\\n        if (level >= Warn) log(method || 'warn', 'WARN', arguments);\\n        return this;\\n      },\\n\\n      info() {\\n        if (level >= Info) log(method || 'log', 'INFO', arguments);\\n        return this;\\n      },\\n\\n      debug() {\\n        if (level >= Debug) log(method || 'log', 'DEBUG', arguments);\\n        return this;\\n      }\\n\\n    };\\n  }\\n\\n  var isArray = Array.isArray;\\n\\n  function isObject(_) {\\n    return _ === Object(_);\\n  }\\n\\n  const isLegalKey = key => key !== '__proto__';\\n\\n  function mergeConfig(...configs) {\\n    return configs.reduce((out, source) => {\\n      for (const key in source) {\\n        if (key === 'signals') {\\n          // for signals, we merge the signals arrays\\n          // source signals take precedence over\\n          // existing signals with the same name\\n          out.signals = mergeNamed(out.signals, source.signals);\\n        } else {\\n          // otherwise, merge objects subject to recursion constraints\\n          // for legend block, recurse for the layout entry only\\n          // for style block, recurse for all properties\\n          // otherwise, no recursion: objects overwrite, no merging\\n          const r = key === 'legend' ? {\\n            layout: 1\\n          } : key === 'style' ? true : null;\\n          writeConfig(out, key, source[key], r);\\n        }\\n      }\\n\\n      return out;\\n    }, {});\\n  }\\n\\n  function writeConfig(output, key, value, recurse) {\\n    if (!isLegalKey(key)) return;\\n    let k, o;\\n\\n    if (isObject(value) && !isArray(value)) {\\n      o = isObject(output[key]) ? output[key] : output[key] = {};\\n\\n      for (k in value) {\\n        if (recurse && (recurse === true || recurse[k])) {\\n          writeConfig(o, k, value[k]);\\n        } else if (isLegalKey(k)) {\\n          o[k] = value[k];\\n        }\\n      }\\n    } else {\\n      output[key] = value;\\n    }\\n  }\\n\\n  function mergeNamed(a, b) {\\n    if (a == null) return b;\\n    const map = {},\\n          out = [];\\n\\n    function add(_) {\\n      if (!map[_.name]) {\\n        map[_.name] = 1;\\n        out.push(_);\\n      }\\n    }\\n\\n    b.forEach(add);\\n    a.forEach(add);\\n    return out;\\n  }\\n\\n  function array(_) {\\n    return _ != null ? isArray(_) ? _ : [_] : [];\\n  }\\n\\n  function isFunction(_) {\\n    return typeof _ === 'function';\\n  }\\n\\n  const hop = Object.prototype.hasOwnProperty;\\n\\n  function has(object, property) {\\n    return hop.call(object, property);\\n  }\\n\\n  function isBoolean(_) {\\n    return typeof _ === 'boolean';\\n  }\\n\\n  function isNumber(_) {\\n    return typeof _ === 'number';\\n  }\\n\\n  function isString(_) {\\n    return typeof _ === 'string';\\n  }\\n\\n  function $(x) {\\n    return isArray(x) ? '[' + x.map($) + ']' : isObject(x) || isString(x) ? // Output valid JSON and JS source strings.\\n    // See http://timelessrepo.com/json-isnt-a-javascript-subset\\n    JSON.stringify(x).replace('\\\\u2028', '\\\\\\\\u2028').replace('\\\\u2029', '\\\\\\\\u2029') : x;\\n  }\\n\\n  function toSet(_) {\\n    const s = {},\\n          n = _.length;\\n\\n    for (let i = 0; i < n; ++i) s[_[i]] = true;\\n\\n    return s;\\n  }\\n\\n  Array.prototype.flat||Object.defineProperty(Array.prototype,\\\"flat\\\",{configurable:!0,value:function r(){var t=isNaN(arguments[0])?1:Number(arguments[0]);return t?Array.prototype.reduce.call(this,function(a,e){return Array.isArray(e)?a.push.apply(a,r.call(e,t-1)):a.push(e),a},[]):Array.prototype.slice.call(this)},writable:!0}),Array.prototype.flatMap||Object.defineProperty(Array.prototype,\\\"flatMap\\\",{configurable:!0,value:function(r){return Array.prototype.map.apply(this,arguments).flat()},writable:!0});\\n\\n  function createCommonjsModule(fn, basedir, module) {\\n  \\treturn module = {\\n  \\t\\tpath: basedir,\\n  \\t\\texports: {},\\n  \\t\\trequire: function (path, base) {\\n  \\t\\t\\treturn commonjsRequire(path, (base === undefined || base === null) ? module.path : base);\\n  \\t\\t}\\n  \\t}, fn(module, module.exports), module.exports;\\n  }\\n\\n  function commonjsRequire () {\\n  \\tthrow new Error('Dynamic requires are not currently supported by @rollup/plugin-commonjs');\\n  }\\n\\n  var clone_1 = createCommonjsModule(function (module) {\\n    var clone = function () {\\n\\n      function _instanceof(obj, type) {\\n        return type != null && obj instanceof type;\\n      }\\n\\n      var nativeMap;\\n\\n      try {\\n        nativeMap = Map;\\n      } catch (_) {\\n        // maybe a reference error because no `Map`. Give it a dummy value that no\\n        // value will ever be an instanceof.\\n        nativeMap = function () {};\\n      }\\n\\n      var nativeSet;\\n\\n      try {\\n        nativeSet = Set;\\n      } catch (_) {\\n        nativeSet = function () {};\\n      }\\n\\n      var nativePromise;\\n\\n      try {\\n        nativePromise = Promise;\\n      } catch (_) {\\n        nativePromise = function () {};\\n      }\\n      /**\\n       * Clones (copies) an Object using deep copying.\\n       *\\n       * This function supports circular references by default, but if you are certain\\n       * there are no circular references in your object, you can save some CPU time\\n       * by calling clone(obj, false).\\n       *\\n       * Caution: if `circular` is false and `parent` contains circular references,\\n       * your program may enter an infinite loop and crash.\\n       *\\n       * @param `parent` - the object to be cloned\\n       * @param `circular` - set to true if the object to be cloned may contain\\n       *    circular references. (optional - true by default)\\n       * @param `depth` - set to a number if the object is only to be cloned to\\n       *    a particular depth. (optional - defaults to Infinity)\\n       * @param `prototype` - sets the prototype to be used when cloning an object.\\n       *    (optional - defaults to parent prototype).\\n       * @param `includeNonEnumerable` - set to true if the non-enumerable properties\\n       *    should be cloned as well. Non-enumerable properties on the prototype\\n       *    chain will be ignored. (optional - false by default)\\n      */\\n\\n\\n      function clone(parent, circular, depth, prototype, includeNonEnumerable) {\\n        if (typeof circular === 'object') {\\n          depth = circular.depth;\\n          prototype = circular.prototype;\\n          includeNonEnumerable = circular.includeNonEnumerable;\\n          circular = circular.circular;\\n        } // maintain two arrays for circular references, where corresponding parents\\n        // and children have the same index\\n\\n\\n        var allParents = [];\\n        var allChildren = [];\\n        var useBuffer = typeof Buffer != 'undefined';\\n        if (typeof circular == 'undefined') circular = true;\\n        if (typeof depth == 'undefined') depth = Infinity; // recurse this function so we don't reset allParents and allChildren\\n\\n        function _clone(parent, depth) {\\n          // cloning null always returns null\\n          if (parent === null) return null;\\n          if (depth === 0) return parent;\\n          var child;\\n          var proto;\\n\\n          if (typeof parent != 'object') {\\n            return parent;\\n          }\\n\\n          if (_instanceof(parent, nativeMap)) {\\n            child = new nativeMap();\\n          } else if (_instanceof(parent, nativeSet)) {\\n            child = new nativeSet();\\n          } else if (_instanceof(parent, nativePromise)) {\\n            child = new nativePromise(function (resolve, reject) {\\n              parent.then(function (value) {\\n                resolve(_clone(value, depth - 1));\\n              }, function (err) {\\n                reject(_clone(err, depth - 1));\\n              });\\n            });\\n          } else if (clone.__isArray(parent)) {\\n            child = [];\\n          } else if (clone.__isRegExp(parent)) {\\n            child = new RegExp(parent.source, __getRegExpFlags(parent));\\n            if (parent.lastIndex) child.lastIndex = parent.lastIndex;\\n          } else if (clone.__isDate(parent)) {\\n            child = new Date(parent.getTime());\\n          } else if (useBuffer && Buffer.isBuffer(parent)) {\\n            if (Buffer.allocUnsafe) {\\n              // Node.js >= 4.5.0\\n              child = Buffer.allocUnsafe(parent.length);\\n            } else {\\n              // Older Node.js versions\\n              child = new Buffer(parent.length);\\n            }\\n\\n            parent.copy(child);\\n            return child;\\n          } else if (_instanceof(parent, Error)) {\\n            child = Object.create(parent);\\n          } else {\\n            if (typeof prototype == 'undefined') {\\n              proto = Object.getPrototypeOf(parent);\\n              child = Object.create(proto);\\n            } else {\\n              child = Object.create(prototype);\\n              proto = prototype;\\n            }\\n          }\\n\\n          if (circular) {\\n            var index = allParents.indexOf(parent);\\n\\n            if (index != -1) {\\n              return allChildren[index];\\n            }\\n\\n            allParents.push(parent);\\n            allChildren.push(child);\\n          }\\n\\n          if (_instanceof(parent, nativeMap)) {\\n            parent.forEach(function (value, key) {\\n              var keyChild = _clone(key, depth - 1);\\n\\n              var valueChild = _clone(value, depth - 1);\\n\\n              child.set(keyChild, valueChild);\\n            });\\n          }\\n\\n          if (_instanceof(parent, nativeSet)) {\\n            parent.forEach(function (value) {\\n              var entryChild = _clone(value, depth - 1);\\n\\n              child.add(entryChild);\\n            });\\n          }\\n\\n          for (var i in parent) {\\n            var attrs;\\n\\n            if (proto) {\\n              attrs = Object.getOwnPropertyDescriptor(proto, i);\\n            }\\n\\n            if (attrs && attrs.set == null) {\\n              continue;\\n            }\\n\\n            child[i] = _clone(parent[i], depth - 1);\\n          }\\n\\n          if (Object.getOwnPropertySymbols) {\\n            var symbols = Object.getOwnPropertySymbols(parent);\\n\\n            for (var i = 0; i < symbols.length; i++) {\\n              // Don't need to worry about cloning a symbol because it is a primitive,\\n              // like a number or string.\\n              var symbol = symbols[i];\\n              var descriptor = Object.getOwnPropertyDescriptor(parent, symbol);\\n\\n              if (descriptor && !descriptor.enumerable && !includeNonEnumerable) {\\n                continue;\\n              }\\n\\n              child[symbol] = _clone(parent[symbol], depth - 1);\\n\\n              if (!descriptor.enumerable) {\\n                Object.defineProperty(child, symbol, {\\n                  enumerable: false\\n                });\\n              }\\n            }\\n          }\\n\\n          if (includeNonEnumerable) {\\n            var allPropertyNames = Object.getOwnPropertyNames(parent);\\n\\n            for (var i = 0; i < allPropertyNames.length; i++) {\\n              var propertyName = allPropertyNames[i];\\n              var descriptor = Object.getOwnPropertyDescriptor(parent, propertyName);\\n\\n              if (descriptor && descriptor.enumerable) {\\n                continue;\\n              }\\n\\n              child[propertyName] = _clone(parent[propertyName], depth - 1);\\n              Object.defineProperty(child, propertyName, {\\n                enumerable: false\\n              });\\n            }\\n          }\\n\\n          return child;\\n        }\\n\\n        return _clone(parent, depth);\\n      }\\n      /**\\n       * Simple flat clone using prototype, accepts only objects, usefull for property\\n       * override on FLAT configuration object (no nested props).\\n       *\\n       * USE WITH CAUTION! This may not behave as you wish if you do not know how this\\n       * works.\\n       */\\n\\n\\n      clone.clonePrototype = function clonePrototype(parent) {\\n        if (parent === null) return null;\\n\\n        var c = function () {};\\n\\n        c.prototype = parent;\\n        return new c();\\n      }; // private utility functions\\n\\n\\n      function __objToStr(o) {\\n        return Object.prototype.toString.call(o);\\n      }\\n\\n      clone.__objToStr = __objToStr;\\n\\n      function __isDate(o) {\\n        return typeof o === 'object' && __objToStr(o) === '[object Date]';\\n      }\\n\\n      clone.__isDate = __isDate;\\n\\n      function __isArray(o) {\\n        return typeof o === 'object' && __objToStr(o) === '[object Array]';\\n      }\\n\\n      clone.__isArray = __isArray;\\n\\n      function __isRegExp(o) {\\n        return typeof o === 'object' && __objToStr(o) === '[object RegExp]';\\n      }\\n\\n      clone.__isRegExp = __isRegExp;\\n\\n      function __getRegExpFlags(re) {\\n        var flags = '';\\n        if (re.global) flags += 'g';\\n        if (re.ignoreCase) flags += 'i';\\n        if (re.multiline) flags += 'm';\\n        return flags;\\n      }\\n\\n      clone.__getRegExpFlags = __getRegExpFlags;\\n      return clone;\\n    }();\\n\\n    if ( module.exports) {\\n      module.exports = clone;\\n    }\\n  });\\n\\n  var fastDeepEqual = function equal(a, b) {\\n    if (a === b) return true;\\n\\n    if (a && b && typeof a == 'object' && typeof b == 'object') {\\n      if (a.constructor !== b.constructor) return false;\\n      var length, i, keys;\\n\\n      if (Array.isArray(a)) {\\n        length = a.length;\\n        if (length != b.length) return false;\\n\\n        for (i = length; i-- !== 0;) if (!equal(a[i], b[i])) return false;\\n\\n        return true;\\n      }\\n\\n      if (a.constructor === RegExp) return a.source === b.source && a.flags === b.flags;\\n      if (a.valueOf !== Object.prototype.valueOf) return a.valueOf() === b.valueOf();\\n      if (a.toString !== Object.prototype.toString) return a.toString() === b.toString();\\n      keys = Object.keys(a);\\n      length = keys.length;\\n      if (length !== Object.keys(b).length) return false;\\n\\n      for (i = length; i-- !== 0;) if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;\\n\\n      for (i = length; i-- !== 0;) {\\n        var key = keys[i];\\n        if (!equal(a[key], b[key])) return false;\\n      }\\n\\n      return true;\\n    } // true if both NaN, false otherwise\\n\\n\\n    return a !== a && b !== b;\\n  };\\n\\n  var fastJsonStableStringify = function (data, opts) {\\n    if (!opts) opts = {};\\n    if (typeof opts === 'function') opts = {\\n      cmp: opts\\n    };\\n    var cycles = typeof opts.cycles === 'boolean' ? opts.cycles : false;\\n\\n    var cmp = opts.cmp && function (f) {\\n      return function (node) {\\n        return function (a, b) {\\n          var aobj = {\\n            key: a,\\n            value: node[a]\\n          };\\n          var bobj = {\\n            key: b,\\n            value: node[b]\\n          };\\n          return f(aobj, bobj);\\n        };\\n      };\\n    }(opts.cmp);\\n\\n    var seen = [];\\n    return function stringify(node) {\\n      if (node && node.toJSON && typeof node.toJSON === 'function') {\\n        node = node.toJSON();\\n      }\\n\\n      if (node === undefined) return;\\n      if (typeof node == 'number') return isFinite(node) ? '' + node : 'null';\\n      if (typeof node !== 'object') return JSON.stringify(node);\\n      var i, out;\\n\\n      if (Array.isArray(node)) {\\n        out = '[';\\n\\n        for (i = 0; i < node.length; i++) {\\n          if (i) out += ',';\\n          out += stringify(node[i]) || 'null';\\n        }\\n\\n        return out + ']';\\n      }\\n\\n      if (node === null) return 'null';\\n\\n      if (seen.indexOf(node) !== -1) {\\n        if (cycles) return JSON.stringify('__cycle__');\\n        throw new TypeError('Converting circular structure to JSON');\\n      }\\n\\n      var seenIndex = seen.push(node) - 1;\\n      var keys = Object.keys(node).sort(cmp && cmp(node));\\n      out = '';\\n\\n      for (i = 0; i < keys.length; i++) {\\n        var key = keys[i];\\n        var value = stringify(node[key]);\\n        if (!value) continue;\\n        if (out) out += ',';\\n        out += JSON.stringify(key) + ':' + value;\\n      }\\n\\n      seen.splice(seenIndex, 1);\\n      return '{' + out + '}';\\n    }(data);\\n  };\\n\\n  function isLogicalOr(op) {\\n    return !!op.or;\\n  }\\n  function isLogicalAnd(op) {\\n    return !!op.and;\\n  }\\n  function isLogicalNot(op) {\\n    return !!op.not;\\n  }\\n  function forEachLeaf(op, fn) {\\n    if (isLogicalNot(op)) {\\n      forEachLeaf(op.not, fn);\\n    } else if (isLogicalAnd(op)) {\\n      for (const subop of op.and) {\\n        forEachLeaf(subop, fn);\\n      }\\n    } else if (isLogicalOr(op)) {\\n      for (const subop of op.or) {\\n        forEachLeaf(subop, fn);\\n      }\\n    } else {\\n      fn(op);\\n    }\\n  }\\n  function normalizeLogicalComposition(op, normalizer) {\\n    if (isLogicalNot(op)) {\\n      return {\\n        not: normalizeLogicalComposition(op.not, normalizer)\\n      };\\n    } else if (isLogicalAnd(op)) {\\n      return {\\n        and: op.and.map(o => normalizeLogicalComposition(o, normalizer))\\n      };\\n    } else if (isLogicalOr(op)) {\\n      return {\\n        or: op.or.map(o => normalizeLogicalComposition(o, normalizer))\\n      };\\n    } else {\\n      return normalizer(op);\\n    }\\n  }\\n\\n  const deepEqual = fastDeepEqual;\\n  const duplicate = clone_1;\\n  /**\\n   * Creates an object composed of the picked object properties.\\n   *\\n   * var object = {'a': 1, 'b': '2', 'c': 3};\\n   * pick(object, ['a', 'c']);\\n   * // \\u2192 {'a': 1, 'c': 3}\\n   */\\n  // eslint-disable-next-line @typescript-eslint/ban-types\\n\\n  function pick(obj, props) {\\n    const copy = {};\\n\\n    for (const prop of props) {\\n      if (has(obj, prop)) {\\n        copy[prop] = obj[prop];\\n      }\\n    }\\n\\n    return copy;\\n  }\\n  /**\\n   * The opposite of _.pick; this method creates an object composed of the own\\n   * and inherited enumerable string keyed properties of object that are not omitted.\\n   */\\n  // eslint-disable-next-line @typescript-eslint/ban-types\\n\\n  function omit(obj, props) {\\n    const copy = { ...obj\\n    };\\n\\n    for (const prop of props) {\\n      delete copy[prop];\\n    }\\n\\n    return copy;\\n  }\\n  /**\\n   * Monkey patch Set so that `stringify` produces a string representation of sets.\\n   */\\n\\n  Set.prototype['toJSON'] = function () {\\n    return \\\"Set(\\\".concat([...this].map(x => fastJsonStableStringify(x)).join(','), \\\")\\\");\\n  };\\n  /**\\n   * Converts any object to a string representation that can be consumed by humans.\\n   */\\n\\n\\n  const stringify = fastJsonStableStringify;\\n  /**\\n   * Converts any object to a string of limited size, or a number.\\n   */\\n\\n  function hash(a) {\\n    if (isNumber(a)) {\\n      return a;\\n    }\\n\\n    const str = isString(a) ? a : fastJsonStableStringify(a); // short strings can be used as hash directly, longer strings are hashed to reduce memory usage\\n\\n    if (str.length < 250) {\\n      return str;\\n    } // from http://werxltd.com/wp/2010/05/13/javascript-implementation-of-javas-string-hashcode-method/\\n\\n\\n    let h = 0;\\n\\n    for (let i = 0; i < str.length; i++) {\\n      const char = str.charCodeAt(i);\\n      h = (h << 5) - h + char;\\n      h = h & h; // Convert to 32bit integer\\n    }\\n\\n    return h;\\n  }\\n  function isNullOrFalse(x) {\\n    return x === false || x === null;\\n  }\\n  function contains(array, item) {\\n    return array.indexOf(item) > -1;\\n  }\\n  /**\\n   * Returns true if any item returns true.\\n   */\\n\\n  function some(arr, f) {\\n    let i = 0;\\n\\n    for (const [k, a] of arr.entries()) {\\n      if (f(a, k, i++)) {\\n        return true;\\n      }\\n    }\\n\\n    return false;\\n  }\\n  /**\\n   * Returns true if all items return true.\\n   */\\n\\n  function every(arr, f) {\\n    let i = 0;\\n\\n    for (const [k, a] of arr.entries()) {\\n      if (!f(a, k, i++)) {\\n        return false;\\n      }\\n    }\\n\\n    return true;\\n  }\\n  /**\\n   * Like TS Partial but applies recursively to all properties.\\n   */\\n\\n  /**\\n   * recursively merges src into dest\\n   */\\n  function mergeDeep(dest, ...src) {\\n    for (const s of src) {\\n      deepMerge_(dest, s !== null && s !== void 0 ? s : {});\\n    }\\n\\n    return dest;\\n  }\\n\\n  function deepMerge_(dest, src) {\\n    for (const property of keys(src)) {\\n      writeConfig(dest, property, src[property], true);\\n    }\\n  }\\n\\n  function unique(values, f) {\\n    const results = [];\\n    const u = {};\\n    let v;\\n\\n    for (const val of values) {\\n      v = f(val);\\n\\n      if (v in u) {\\n        continue;\\n      }\\n\\n      u[v] = 1;\\n      results.push(val);\\n    }\\n\\n    return results;\\n  }\\n\\n  /**\\n   * Returns true if the two dictionaries disagree. Applies only to defined values.\\n   */\\n  function isEqual(dict, other) {\\n    const dictKeys = keys(dict);\\n    const otherKeys = keys(other);\\n\\n    if (dictKeys.length !== otherKeys.length) {\\n      return false;\\n    }\\n\\n    for (const key of dictKeys) {\\n      if (dict[key] !== other[key]) {\\n        return false;\\n      }\\n    }\\n\\n    return true;\\n  }\\n  function setEqual(a, b) {\\n    if (a.size !== b.size) {\\n      return false;\\n    }\\n\\n    for (const e of a) {\\n      if (!b.has(e)) {\\n        return false;\\n      }\\n    }\\n\\n    return true;\\n  }\\n  function hasIntersection(a, b) {\\n    for (const key of a) {\\n      if (b.has(key)) {\\n        return true;\\n      }\\n    }\\n\\n    return false;\\n  }\\n  function prefixGenerator(a) {\\n    const prefixes = new Set();\\n\\n    for (const x of a) {\\n      const splitField = splitAccessPath(x); // Wrap every element other than the first in `[]`\\n\\n      const wrappedWithAccessors = splitField.map((y, i) => i === 0 ? y : \\\"[\\\".concat(y, \\\"]\\\"));\\n      const computedPrefixes = wrappedWithAccessors.map((_, i) => wrappedWithAccessors.slice(0, i + 1).join(''));\\n\\n      for (const y of computedPrefixes) {\\n        prefixes.add(y);\\n      }\\n    }\\n\\n    return prefixes;\\n  }\\n  /**\\n   * Returns true if a and b have an intersection. Also return true if a or b are undefined\\n   * since this means we don't know what fields a node produces or depends on.\\n   */\\n\\n  function fieldIntersection(a, b) {\\n    if (a === undefined || b === undefined) {\\n      return true;\\n    }\\n\\n    return hasIntersection(prefixGenerator(a), prefixGenerator(b));\\n  } // eslint-disable-next-line @typescript-eslint/ban-types\\n\\n  function isEmpty(obj) {\\n    return keys(obj).length === 0;\\n  } // This is a stricter version of Object.keys but with better types. See https://github.com/Microsoft/TypeScript/pull/12253#issuecomment-263132208\\n\\n  const keys = Object.keys;\\n  const vals = Object.values;\\n  const entries = Object.entries; // Using mapped type to declare a collect of flags for a string literal type S\\n  // https://www.typescriptlang.org/docs/handbook/advanced-types.html#mapped-types\\n\\n  function isBoolean$1(b) {\\n    return b === true || b === false;\\n  }\\n  /**\\n   * Convert a string into a valid variable name\\n   */\\n\\n  function varName(s) {\\n    // Replace non-alphanumeric characters (anything besides a-zA-Z0-9_) with _\\n    const alphanumericS = s.replace(/\\\\W/g, '_'); // Add _ if the string has leading numbers.\\n\\n    return (s.match(/^\\\\d+/) ? '_' : '') + alphanumericS;\\n  }\\n  function logicalExpr(op, cb) {\\n    if (isLogicalNot(op)) {\\n      return '!(' + logicalExpr(op.not, cb) + ')';\\n    } else if (isLogicalAnd(op)) {\\n      return '(' + op.and.map(and => logicalExpr(and, cb)).join(') && (') + ')';\\n    } else if (isLogicalOr(op)) {\\n      return '(' + op.or.map(or => logicalExpr(or, cb)).join(') || (') + ')';\\n    } else {\\n      return cb(op);\\n    }\\n  }\\n  /**\\n   * Delete nested property of an object, and delete the ancestors of the property if they become empty.\\n   */\\n\\n  function deleteNestedProperty(obj, orderedProps) {\\n    if (orderedProps.length === 0) {\\n      return true;\\n    }\\n\\n    const prop = orderedProps.shift(); // eslint-disable-line @typescript-eslint/no-non-null-assertion\\n\\n    if (prop in obj && deleteNestedProperty(obj[prop], orderedProps)) {\\n      delete obj[prop];\\n    }\\n\\n    return isEmpty(obj);\\n  }\\n  function titleCase(s) {\\n    return s.charAt(0).toUpperCase() + s.substr(1);\\n  }\\n  /**\\n   * Converts a path to an access path with datum.\\n   * @param path The field name.\\n   * @param datum The string to use for `datum`.\\n   */\\n\\n  function accessPathWithDatum(path, datum = 'datum') {\\n    const pieces = splitAccessPath(path);\\n    const prefixes = [];\\n\\n    for (let i = 1; i <= pieces.length; i++) {\\n      const prefix = \\\"[\\\".concat(pieces.slice(0, i).map($).join(']['), \\\"]\\\");\\n      prefixes.push(\\\"\\\".concat(datum).concat(prefix));\\n    }\\n\\n    return prefixes.join(' && ');\\n  }\\n  /**\\n   * Return access with datum to the flattened field.\\n   *\\n   * @param path The field name.\\n   * @param datum The string to use for `datum`.\\n   */\\n\\n  function flatAccessWithDatum(path, datum = 'datum') {\\n    return \\\"\\\".concat(datum, \\\"[\\\").concat($(splitAccessPath(path).join('.')), \\\"]\\\");\\n  }\\n\\n  function escapePathAccess(string) {\\n    return string.replace(/(\\\\[|\\\\]|\\\\.|'|\\\")/g, '\\\\\\\\$1');\\n  }\\n  /**\\n   * Replaces path accesses with access to non-nested field.\\n   * For example, `foo[\\\"bar\\\"].baz` becomes `foo\\\\\\\\.bar\\\\\\\\.baz`.\\n   */\\n\\n\\n  function replacePathInField(path) {\\n    return \\\"\\\".concat(splitAccessPath(path).map(escapePathAccess).join('\\\\\\\\.'));\\n  }\\n  /**\\n   * Replace all occurrences of a string with another string.\\n   *\\n   * @param string the string to replace in\\n   * @param find the string to replace\\n   * @param replacement the replacement\\n   */\\n\\n  function replaceAll(string, find, replacement) {\\n    return string.replace(new RegExp(find.replace(/[-/\\\\\\\\^$*+?.()|[\\\\]{}]/g, '\\\\\\\\$&'), 'g'), replacement);\\n  }\\n  /**\\n   * Remove path accesses with access from field.\\n   * For example, `foo[\\\"bar\\\"].baz` becomes `foo.bar.baz`.\\n   */\\n\\n  function removePathFromField(path) {\\n    return \\\"\\\".concat(splitAccessPath(path).join('.'));\\n  }\\n  /**\\n   * Count the depth of the path. Returns 1 for fields that are not nested.\\n   */\\n\\n  function accessPathDepth(path) {\\n    if (!path) {\\n      return 0;\\n    }\\n\\n    return splitAccessPath(path).length;\\n  }\\n  /**\\n   * This is a replacement for chained || for numeric properties or properties that respect null so that 0 will be included.\\n   */\\n\\n  function getFirstDefined(...args) {\\n    for (const arg of args) {\\n      if (arg !== undefined) {\\n        return arg;\\n      }\\n    }\\n\\n    return undefined;\\n  } // variable used to generate id\\n\\n  let idCounter = 42;\\n  /**\\n   * Returns a new random id every time it gets called.\\n   *\\n   * Has side effect!\\n   */\\n\\n  function uniqueId(prefix) {\\n    const id = ++idCounter;\\n    return prefix ? String(prefix) + id : id;\\n  }\\n  /**\\n   * Resets the id counter used in uniqueId. This can be useful for testing.\\n   */\\n\\n  function resetIdCounter() {\\n    idCounter = 42;\\n  }\\n  function internalField(name) {\\n    return isInternalField(name) ? name : \\\"__\\\".concat(name);\\n  }\\n  function isInternalField(name) {\\n    return name.indexOf('__') === 0;\\n  }\\n  /**\\n   * Normalize angle to be within [0,360).\\n   */\\n\\n  function normalizeAngle(angle) {\\n    if (angle === undefined) {\\n      return undefined;\\n    }\\n\\n    return (angle % 360 + 360) % 360;\\n  }\\n  /**\\n   * Returns whether the passed in value is a valid number.\\n   */\\n\\n  function isNumeric(value) {\\n    if (isNumber(value)) {\\n      return true;\\n    }\\n\\n    return !isNaN(value) && !isNaN(parseFloat(value));\\n  }\\n\\n  const CONDITIONAL_AXIS_PROP_INDEX = {\\n    labelAlign: {\\n      part: 'labels',\\n      vgProp: 'align'\\n    },\\n    labelBaseline: {\\n      part: 'labels',\\n      vgProp: 'baseline'\\n    },\\n    labelColor: {\\n      part: 'labels',\\n      vgProp: 'fill'\\n    },\\n    labelFont: {\\n      part: 'labels',\\n      vgProp: 'font'\\n    },\\n    labelFontSize: {\\n      part: 'labels',\\n      vgProp: 'fontSize'\\n    },\\n    labelFontStyle: {\\n      part: 'labels',\\n      vgProp: 'fontStyle'\\n    },\\n    labelFontWeight: {\\n      part: 'labels',\\n      vgProp: 'fontWeight'\\n    },\\n    labelOpacity: {\\n      part: 'labels',\\n      vgProp: 'opacity'\\n    },\\n    labelOffset: null,\\n    labelPadding: null,\\n    // There is no fixed vgProp for tickSize, need to use signal.\\n    gridColor: {\\n      part: 'grid',\\n      vgProp: 'stroke'\\n    },\\n    gridDash: {\\n      part: 'grid',\\n      vgProp: 'strokeDash'\\n    },\\n    gridDashOffset: {\\n      part: 'grid',\\n      vgProp: 'strokeDashOffset'\\n    },\\n    gridOpacity: {\\n      part: 'grid',\\n      vgProp: 'opacity'\\n    },\\n    gridWidth: {\\n      part: 'grid',\\n      vgProp: 'strokeWidth'\\n    },\\n    tickColor: {\\n      part: 'ticks',\\n      vgProp: 'stroke'\\n    },\\n    tickDash: {\\n      part: 'ticks',\\n      vgProp: 'strokeDash'\\n    },\\n    tickDashOffset: {\\n      part: 'ticks',\\n      vgProp: 'strokeDashOffset'\\n    },\\n    tickOpacity: {\\n      part: 'ticks',\\n      vgProp: 'opacity'\\n    },\\n    tickSize: null,\\n    // There is no fixed vgProp for tickSize, need to use signal.\\n    tickWidth: {\\n      part: 'ticks',\\n      vgProp: 'strokeWidth'\\n    }\\n  };\\n  function isConditionalAxisValue(v) {\\n    return v && v['condition'];\\n  }\\n  const AXIS_PARTS = ['domain', 'grid', 'labels', 'ticks', 'title'];\\n  /**\\n   * A dictionary listing whether a certain axis property is applicable for only main axes or only grid axes.\\n   */\\n\\n  const AXIS_PROPERTY_TYPE = {\\n    grid: 'grid',\\n    gridCap: 'grid',\\n    gridColor: 'grid',\\n    gridDash: 'grid',\\n    gridDashOffset: 'grid',\\n    gridOpacity: 'grid',\\n    gridScale: 'grid',\\n    gridWidth: 'grid',\\n    orient: 'main',\\n    bandPosition: 'both',\\n    // Need to be applied to grid axis too, so the grid will align with ticks.\\n    aria: 'main',\\n    description: 'main',\\n    domain: 'main',\\n    domainCap: 'main',\\n    domainColor: 'main',\\n    domainDash: 'main',\\n    domainDashOffset: 'main',\\n    domainOpacity: 'main',\\n    domainWidth: 'main',\\n    format: 'main',\\n    formatType: 'main',\\n    labelAlign: 'main',\\n    labelAngle: 'main',\\n    labelBaseline: 'main',\\n    labelBound: 'main',\\n    labelColor: 'main',\\n    labelFlush: 'main',\\n    labelFlushOffset: 'main',\\n    labelFont: 'main',\\n    labelFontSize: 'main',\\n    labelFontStyle: 'main',\\n    labelFontWeight: 'main',\\n    labelLimit: 'main',\\n    labelLineHeight: 'main',\\n    labelOffset: 'main',\\n    labelOpacity: 'main',\\n    labelOverlap: 'main',\\n    labelPadding: 'main',\\n    labels: 'main',\\n    labelSeparation: 'main',\\n    maxExtent: 'main',\\n    minExtent: 'main',\\n    offset: 'both',\\n    position: 'main',\\n    tickCap: 'main',\\n    tickColor: 'main',\\n    tickDash: 'main',\\n    tickDashOffset: 'main',\\n    tickMinStep: 'main',\\n    tickOffset: 'both',\\n    // Need to be applied to grid axis too, so the grid will align with ticks.\\n    tickOpacity: 'main',\\n    tickRound: 'both',\\n    // Apply rounding to grid and ticks so they are aligned.\\n    ticks: 'main',\\n    tickSize: 'main',\\n    tickWidth: 'both',\\n    title: 'main',\\n    titleAlign: 'main',\\n    titleAnchor: 'main',\\n    titleAngle: 'main',\\n    titleBaseline: 'main',\\n    titleColor: 'main',\\n    titleFont: 'main',\\n    titleFontSize: 'main',\\n    titleFontStyle: 'main',\\n    titleFontWeight: 'main',\\n    titleLimit: 'main',\\n    titleLineHeight: 'main',\\n    titleOpacity: 'main',\\n    titlePadding: 'main',\\n    titleX: 'main',\\n    titleY: 'main',\\n    encode: 'both',\\n    // we hide this in Vega-Lite\\n    scale: 'both',\\n    tickBand: 'both',\\n    tickCount: 'both',\\n    tickExtra: 'both',\\n    translate: 'both',\\n    values: 'both',\\n    zindex: 'both' // this is actually set afterward, so it doesn't matter\\n\\n  };\\n  const COMMON_AXIS_PROPERTIES_INDEX = {\\n    orient: 1,\\n    // other things can depend on orient\\n    aria: 1,\\n    bandPosition: 1,\\n    description: 1,\\n    domain: 1,\\n    domainCap: 1,\\n    domainColor: 1,\\n    domainDash: 1,\\n    domainDashOffset: 1,\\n    domainOpacity: 1,\\n    domainWidth: 1,\\n    format: 1,\\n    formatType: 1,\\n    grid: 1,\\n    gridCap: 1,\\n    gridColor: 1,\\n    gridDash: 1,\\n    gridDashOffset: 1,\\n    gridOpacity: 1,\\n    gridWidth: 1,\\n    labelAlign: 1,\\n    labelAngle: 1,\\n    labelBaseline: 1,\\n    labelBound: 1,\\n    labelColor: 1,\\n    labelFlush: 1,\\n    labelFlushOffset: 1,\\n    labelFont: 1,\\n    labelFontSize: 1,\\n    labelFontStyle: 1,\\n    labelFontWeight: 1,\\n    labelLimit: 1,\\n    labelLineHeight: 1,\\n    labelOffset: 1,\\n    labelOpacity: 1,\\n    labelOverlap: 1,\\n    labelPadding: 1,\\n    labels: 1,\\n    labelSeparation: 1,\\n    maxExtent: 1,\\n    minExtent: 1,\\n    offset: 1,\\n    position: 1,\\n    tickBand: 1,\\n    tickCap: 1,\\n    tickColor: 1,\\n    tickCount: 1,\\n    tickDash: 1,\\n    tickDashOffset: 1,\\n    tickExtra: 1,\\n    tickMinStep: 1,\\n    tickOffset: 1,\\n    tickOpacity: 1,\\n    tickRound: 1,\\n    ticks: 1,\\n    tickSize: 1,\\n    tickWidth: 1,\\n    title: 1,\\n    titleAlign: 1,\\n    titleAnchor: 1,\\n    titleAngle: 1,\\n    titleBaseline: 1,\\n    titleColor: 1,\\n    titleFont: 1,\\n    titleFontSize: 1,\\n    titleFontStyle: 1,\\n    titleFontWeight: 1,\\n    titleLimit: 1,\\n    titleLineHeight: 1,\\n    titleOpacity: 1,\\n    titlePadding: 1,\\n    titleX: 1,\\n    titleY: 1,\\n    translate: 1,\\n    values: 1,\\n    zindex: 1\\n  };\\n  const AXIS_PROPERTIES_INDEX = { ...COMMON_AXIS_PROPERTIES_INDEX,\\n    style: 1,\\n    labelExpr: 1,\\n    encoding: 1\\n  };\\n  function isAxisProperty(prop) {\\n    return !!AXIS_PROPERTIES_INDEX[prop];\\n  } // Export for dependent projects\\n  const AXIS_CONFIGS_INDEX = {\\n    axis: 1,\\n    axisBand: 1,\\n    axisBottom: 1,\\n    axisDiscrete: 1,\\n    axisLeft: 1,\\n    axisPoint: 1,\\n    axisQuantitative: 1,\\n    axisRight: 1,\\n    axisTemporal: 1,\\n    axisTop: 1,\\n    axisX: 1,\\n    axisXBand: 1,\\n    axisXDiscrete: 1,\\n    axisXPoint: 1,\\n    axisXQuantitative: 1,\\n    axisXTemporal: 1,\\n    axisY: 1,\\n    axisYBand: 1,\\n    axisYDiscrete: 1,\\n    axisYPoint: 1,\\n    axisYQuantitative: 1,\\n    axisYTemporal: 1\\n  };\\n  const AXIS_CONFIGS = keys(AXIS_CONFIGS_INDEX);\\n\\n  const AGGREGATE_OP_INDEX = {\\n    argmax: 1,\\n    argmin: 1,\\n    average: 1,\\n    count: 1,\\n    distinct: 1,\\n    product: 1,\\n    max: 1,\\n    mean: 1,\\n    median: 1,\\n    min: 1,\\n    missing: 1,\\n    q1: 1,\\n    q3: 1,\\n    ci0: 1,\\n    ci1: 1,\\n    stderr: 1,\\n    stdev: 1,\\n    stdevp: 1,\\n    sum: 1,\\n    valid: 1,\\n    values: 1,\\n    variance: 1,\\n    variancep: 1\\n  };\\n  const MULTIDOMAIN_SORT_OP_INDEX = {\\n    count: 1,\\n    min: 1,\\n    max: 1\\n  };\\n  function isArgminDef(a) {\\n    return !!a && !!a['argmin'];\\n  }\\n  function isArgmaxDef(a) {\\n    return !!a && !!a['argmax'];\\n  }\\n  function isAggregateOp(a) {\\n    return isString(a) && !!AGGREGATE_OP_INDEX[a];\\n  }\\n  const COUNTING_OPS = ['count', 'valid', 'missing', 'distinct'];\\n  function isCountingAggregateOp(aggregate) {\\n    return isString(aggregate) && contains(COUNTING_OPS, aggregate);\\n  }\\n  function isMinMaxOp(aggregate) {\\n    return isString(aggregate) && contains(['min', 'max'], aggregate);\\n  }\\n  /** Additive-based aggregation operations. These can be applied to stack. */\\n\\n  const SUM_OPS = ['count', 'sum', 'distinct', 'valid', 'missing'];\\n  /**\\n   * Aggregation operators that always produce values within the range [domainMin, domainMax].\\n   */\\n\\n  const SHARED_DOMAIN_OPS = ['mean', 'average', 'median', 'q1', 'q3', 'min', 'max'];\\n  const SHARED_DOMAIN_OP_INDEX = toSet(SHARED_DOMAIN_OPS);\\n\\n  /*\\n   * Constants and utilities for encoding channels (Visual variables)\\n   * such as 'x', 'y', 'color'.\\n   */\\n  // Facet\\n  const ROW = 'row';\\n  const COLUMN = 'column';\\n  const FACET = 'facet'; // Position\\n\\n  const X = 'x';\\n  const Y = 'y';\\n  const X2 = 'x2';\\n  const Y2 = 'y2'; // Arc-Position\\n\\n  const RADIUS = 'radius';\\n  const RADIUS2 = 'radius2';\\n  const THETA = 'theta';\\n  const THETA2 = 'theta2'; // Geo Position\\n\\n  const LATITUDE = 'latitude';\\n  const LONGITUDE = 'longitude';\\n  const LATITUDE2 = 'latitude2';\\n  const LONGITUDE2 = 'longitude2'; // Mark property with scale\\n\\n  const COLOR = 'color';\\n  const FILL = 'fill';\\n  const STROKE = 'stroke';\\n  const SHAPE = 'shape';\\n  const SIZE = 'size';\\n  const ANGLE = 'angle';\\n  const OPACITY = 'opacity';\\n  const FILLOPACITY = 'fillOpacity';\\n  const STROKEOPACITY = 'strokeOpacity';\\n  const STROKEWIDTH = 'strokeWidth';\\n  const STROKEDASH = 'strokeDash'; // Non-scale channel\\n\\n  const TEXT = 'text';\\n  const ORDER = 'order';\\n  const DETAIL = 'detail';\\n  const KEY = 'key';\\n  const TOOLTIP = 'tooltip';\\n  const HREF = 'href';\\n  const URL = 'url';\\n  const DESCRIPTION = 'description';\\n  const POSITION_CHANNEL_INDEX = {\\n    x: 1,\\n    y: 1,\\n    x2: 1,\\n    y2: 1\\n  };\\n  const POLAR_POSITION_CHANNEL_INDEX = {\\n    theta: 1,\\n    theta2: 1,\\n    radius: 1,\\n    radius2: 1\\n  };\\n  function isPolarPositionChannel(c) {\\n    return c in POLAR_POSITION_CHANNEL_INDEX;\\n  }\\n  const GEO_POSIITON_CHANNEL_INDEX = {\\n    longitude: 1,\\n    longitude2: 1,\\n    latitude: 1,\\n    latitude2: 1\\n  };\\n  function getPositionChannelFromLatLong(channel) {\\n    switch (channel) {\\n      case LATITUDE:\\n        return 'y';\\n\\n      case LATITUDE2:\\n        return 'y2';\\n\\n      case LONGITUDE:\\n        return 'x';\\n\\n      case LONGITUDE2:\\n        return 'x2';\\n    }\\n  }\\n  function isGeoPositionChannel(c) {\\n    return c in GEO_POSIITON_CHANNEL_INDEX;\\n  }\\n  const GEOPOSITION_CHANNELS = keys(GEO_POSIITON_CHANNEL_INDEX);\\n  const UNIT_CHANNEL_INDEX = { ...POSITION_CHANNEL_INDEX,\\n    ...POLAR_POSITION_CHANNEL_INDEX,\\n    ...GEO_POSIITON_CHANNEL_INDEX,\\n    // color\\n    color: 1,\\n    fill: 1,\\n    stroke: 1,\\n    // other non-position with scale\\n    opacity: 1,\\n    fillOpacity: 1,\\n    strokeOpacity: 1,\\n    strokeWidth: 1,\\n    strokeDash: 1,\\n    size: 1,\\n    angle: 1,\\n    shape: 1,\\n    // channels without scales\\n    order: 1,\\n    text: 1,\\n    detail: 1,\\n    key: 1,\\n    tooltip: 1,\\n    href: 1,\\n    url: 1,\\n    description: 1\\n  };\\n  function isColorChannel(channel) {\\n    return channel === COLOR || channel === FILL || channel === STROKE;\\n  }\\n  const FACET_CHANNEL_INDEX = {\\n    row: 1,\\n    column: 1,\\n    facet: 1\\n  };\\n  const FACET_CHANNELS = keys(FACET_CHANNEL_INDEX);\\n  const CHANNEL_INDEX = { ...UNIT_CHANNEL_INDEX,\\n    ...FACET_CHANNEL_INDEX\\n  };\\n  const CHANNELS = keys(CHANNEL_INDEX);\\n  const {\\n    order: _o,\\n    detail: _d,\\n    tooltip: _tt1,\\n    ...SINGLE_DEF_CHANNEL_INDEX\\n  } = CHANNEL_INDEX;\\n  const {\\n    row: _r,\\n    column: _c,\\n    facet: _f,\\n    ...SINGLE_DEF_UNIT_CHANNEL_INDEX\\n  } = SINGLE_DEF_CHANNEL_INDEX;\\n  function isSingleDefUnitChannel(str) {\\n    return !!SINGLE_DEF_UNIT_CHANNEL_INDEX[str];\\n  }\\n  function isChannel(str) {\\n    return !!CHANNEL_INDEX[str];\\n  }\\n  const SECONDARY_RANGE_CHANNEL = [X2, Y2, LATITUDE2, LONGITUDE2, THETA2, RADIUS2];\\n  function isSecondaryRangeChannel(c) {\\n    const main = getMainRangeChannel(c);\\n    return main !== c;\\n  }\\n\\n  /**\\n   * Get the main channel for a range channel. E.g. `x` for `x2`.\\n   */\\n  function getMainRangeChannel(channel) {\\n    switch (channel) {\\n      case X2:\\n        return X;\\n\\n      case Y2:\\n        return Y;\\n\\n      case LATITUDE2:\\n        return LATITUDE;\\n\\n      case LONGITUDE2:\\n        return LONGITUDE;\\n\\n      case THETA2:\\n        return THETA;\\n\\n      case RADIUS2:\\n        return RADIUS;\\n    }\\n\\n    return channel;\\n  }\\n  function getVgPositionChannel(channel) {\\n    if (isPolarPositionChannel(channel)) {\\n      switch (channel) {\\n        case THETA:\\n          return 'startAngle';\\n\\n        case THETA2:\\n          return 'endAngle';\\n\\n        case RADIUS:\\n          return 'outerRadius';\\n\\n        case RADIUS2:\\n          return 'innerRadius';\\n      }\\n    }\\n\\n    return channel;\\n  }\\n  /**\\n   * Get the main channel for a range channel. E.g. `x` for `x2`.\\n   */\\n\\n  function getSecondaryRangeChannel(channel) {\\n    switch (channel) {\\n      case X:\\n        return X2;\\n\\n      case Y:\\n        return Y2;\\n\\n      case LATITUDE:\\n        return LATITUDE2;\\n\\n      case LONGITUDE:\\n        return LONGITUDE2;\\n\\n      case THETA:\\n        return THETA2;\\n\\n      case RADIUS:\\n        return RADIUS2;\\n    }\\n\\n    return undefined;\\n  }\\n  function getSizeChannel(channel) {\\n    switch (channel) {\\n      case X:\\n      case X2:\\n        return 'width';\\n\\n      case Y:\\n      case Y2:\\n        return 'height';\\n    }\\n\\n    return undefined;\\n  }\\n  /**\\n   * Get the main channel for a range channel. E.g. `x` for `x2`.\\n   */\\n\\n  function getOffsetChannel(channel) {\\n    switch (channel) {\\n      case X:\\n        return 'xOffset';\\n\\n      case Y:\\n        return 'yOffset';\\n\\n      case X2:\\n        return 'x2Offset';\\n\\n      case Y2:\\n        return 'y2Offset';\\n\\n      case THETA:\\n        return 'thetaOffset';\\n\\n      case RADIUS:\\n        return 'radiusOffset';\\n\\n      case THETA2:\\n        return 'theta2Offset';\\n\\n      case RADIUS2:\\n        return 'radius2Offset';\\n    }\\n\\n    return undefined;\\n  } // CHANNELS without COLUMN, ROW\\n\\n  const {\\n    x: _x,\\n    y: _y,\\n    // x2 and y2 share the same scale as x and y\\n    x2: _x2,\\n    y2: _y2,\\n    latitude: _latitude,\\n    longitude: _longitude,\\n    latitude2: _latitude2,\\n    longitude2: _longitude2,\\n    theta: _theta,\\n    theta2: _theta2,\\n    radius: _radius,\\n    radius2: _radius2,\\n    // The rest of unit channels then have scale\\n    ...NONPOSITION_CHANNEL_INDEX\\n  } = UNIT_CHANNEL_INDEX;\\n  const NONPOSITION_CHANNELS = keys(NONPOSITION_CHANNEL_INDEX);\\n  const POSITION_SCALE_CHANNEL_INDEX = {\\n    x: 1,\\n    y: 1\\n  };\\n  const POSITION_SCALE_CHANNELS = keys(POSITION_SCALE_CHANNEL_INDEX);\\n  function isXorY(channel) {\\n    return channel in POSITION_SCALE_CHANNEL_INDEX;\\n  }\\n  const POLAR_POSITION_SCALE_CHANNEL_INDEX = {\\n    theta: 1,\\n    radius: 1\\n  };\\n  const POLAR_POSITION_SCALE_CHANNELS = keys(POLAR_POSITION_SCALE_CHANNEL_INDEX);\\n  function getPositionScaleChannel(sizeType) {\\n    return sizeType === 'width' ? X : Y;\\n  } // NON_POSITION_SCALE_CHANNEL = SCALE_CHANNELS without X, Y\\n\\n  const {\\n    // x2 and y2 share the same scale as x and y\\n    // text and tooltip have format instead of scale,\\n    // href has neither format, nor scale\\n    text: _t,\\n    tooltip: _tt,\\n    href: _hr,\\n    url: _u,\\n    description: _al,\\n    // detail and order have no scale\\n    detail: _dd,\\n    key: _k,\\n    order: _oo,\\n    ...NONPOSITION_SCALE_CHANNEL_INDEX\\n  } = NONPOSITION_CHANNEL_INDEX;\\n  const NONPOSITION_SCALE_CHANNELS = keys(NONPOSITION_SCALE_CHANNEL_INDEX);\\n  function isNonPositionScaleChannel(channel) {\\n    return !!NONPOSITION_CHANNEL_INDEX[channel];\\n  }\\n  /**\\n   * @returns whether Vega supports legends for a particular channel\\n   */\\n\\n  function supportLegend(channel) {\\n    switch (channel) {\\n      case COLOR:\\n      case FILL:\\n      case STROKE:\\n      case SIZE:\\n      case SHAPE:\\n      case OPACITY:\\n      case STROKEWIDTH:\\n      case STROKEDASH:\\n        return true;\\n\\n      case FILLOPACITY:\\n      case STROKEOPACITY:\\n      case ANGLE:\\n        return false;\\n    }\\n  } // Declare SCALE_CHANNEL_INDEX\\n\\n  const SCALE_CHANNEL_INDEX = { ...POSITION_SCALE_CHANNEL_INDEX,\\n    ...POLAR_POSITION_SCALE_CHANNEL_INDEX,\\n    ...NONPOSITION_SCALE_CHANNEL_INDEX\\n  };\\n  /** List of channels with scales */\\n\\n  const SCALE_CHANNELS = keys(SCALE_CHANNEL_INDEX);\\n  function isScaleChannel(channel) {\\n    return !!SCALE_CHANNEL_INDEX[channel];\\n  }\\n\\n  /**\\n   * Return whether a channel supports a particular mark type.\\n   * @param channel  channel name\\n   * @param mark the mark type\\n   * @return whether the mark supports the channel\\n   */\\n  function supportMark(channel, mark) {\\n    return getSupportedMark(channel)[mark];\\n  }\\n  const ALL_MARKS = {\\n    // all marks\\n    arc: 'always',\\n    area: 'always',\\n    bar: 'always',\\n    circle: 'always',\\n    geoshape: 'always',\\n    image: 'always',\\n    line: 'always',\\n    rule: 'always',\\n    point: 'always',\\n    rect: 'always',\\n    square: 'always',\\n    trail: 'always',\\n    text: 'always',\\n    tick: 'always'\\n  };\\n  const {\\n    geoshape: _g,\\n    ...ALL_MARKS_EXCEPT_GEOSHAPE\\n  } = ALL_MARKS;\\n  /**\\n   * Return a dictionary showing whether a channel supports mark type.\\n   * @param channel\\n   * @return A dictionary mapping mark types to 'always', 'binned', or undefined\\n   */\\n\\n  function getSupportedMark(channel) {\\n    switch (channel) {\\n      case COLOR:\\n      case FILL:\\n      case STROKE: // falls through\\n\\n      case DESCRIPTION:\\n      case DETAIL:\\n      case KEY:\\n      case TOOLTIP:\\n      case HREF:\\n      case ORDER: // TODO: revise (order might not support rect, which is not stackable?)\\n\\n      case OPACITY:\\n      case FILLOPACITY:\\n      case STROKEOPACITY:\\n      case STROKEWIDTH: // falls through\\n\\n      case FACET:\\n      case ROW: // falls through\\n\\n      case COLUMN:\\n        return ALL_MARKS;\\n\\n      case X:\\n      case Y:\\n      case LATITUDE:\\n      case LONGITUDE:\\n        // all marks except geoshape. geoshape does not use X, Y -- it uses a projection\\n        return ALL_MARKS_EXCEPT_GEOSHAPE;\\n\\n      case X2:\\n      case Y2:\\n      case LATITUDE2:\\n      case LONGITUDE2:\\n        return {\\n          area: 'always',\\n          bar: 'always',\\n          image: 'always',\\n          rect: 'always',\\n          rule: 'always',\\n          circle: 'binned',\\n          point: 'binned',\\n          square: 'binned',\\n          tick: 'binned',\\n          line: 'binned',\\n          trail: 'binned'\\n        };\\n\\n      case SIZE:\\n        return {\\n          point: 'always',\\n          tick: 'always',\\n          rule: 'always',\\n          circle: 'always',\\n          square: 'always',\\n          bar: 'always',\\n          text: 'always',\\n          line: 'always',\\n          trail: 'always'\\n        };\\n\\n      case STROKEDASH:\\n        return {\\n          line: 'always',\\n          point: 'always',\\n          tick: 'always',\\n          rule: 'always',\\n          circle: 'always',\\n          square: 'always',\\n          bar: 'always',\\n          geoshape: 'always'\\n        };\\n\\n      case SHAPE:\\n        return {\\n          point: 'always',\\n          geoshape: 'always'\\n        };\\n\\n      case TEXT:\\n        return {\\n          text: 'always'\\n        };\\n\\n      case ANGLE:\\n        return {\\n          point: 'always',\\n          square: 'always',\\n          text: 'always'\\n        };\\n\\n      case URL:\\n        return {\\n          image: 'always'\\n        };\\n\\n      case THETA:\\n        return {\\n          text: 'always',\\n          arc: 'always'\\n        };\\n\\n      case RADIUS:\\n        return {\\n          text: 'always',\\n          arc: 'always'\\n        };\\n\\n      case THETA2:\\n      case RADIUS2:\\n        return {\\n          arc: 'always'\\n        };\\n    }\\n  }\\n\\n  function rangeType(channel) {\\n    switch (channel) {\\n      case X:\\n      case Y:\\n      case THETA:\\n      case RADIUS:\\n      case SIZE:\\n      case ANGLE:\\n      case STROKEWIDTH:\\n      case OPACITY:\\n      case FILLOPACITY:\\n      case STROKEOPACITY: // X2 and Y2 use X and Y scales, so they similarly have continuous range. [falls through]\\n\\n      case X2:\\n      case Y2:\\n      case THETA2:\\n      case RADIUS2:\\n        return undefined;\\n\\n      case FACET:\\n      case ROW:\\n      case COLUMN:\\n      case SHAPE:\\n      case STROKEDASH: // TEXT, TOOLTIP, URL, and HREF have no scale but have discrete output [falls through]\\n\\n      case TEXT:\\n      case TOOLTIP:\\n      case HREF:\\n      case URL:\\n      case DESCRIPTION:\\n        return 'discrete';\\n      // Color can be either continuous or discrete, depending on scale type.\\n\\n      case COLOR:\\n      case FILL:\\n      case STROKE:\\n        return 'flexible';\\n      // No scale, no range type.\\n\\n      case LATITUDE:\\n      case LONGITUDE:\\n      case LATITUDE2:\\n      case LONGITUDE2:\\n      case DETAIL:\\n      case KEY:\\n      case ORDER:\\n        return undefined;\\n    }\\n  }\\n\\n  /**\\n   * Create a key for the bin configuration. Not for prebinned bin.\\n   */\\n  function binToString(bin) {\\n    if (isBoolean(bin)) {\\n      bin = normalizeBin(bin, undefined);\\n    }\\n\\n    return 'bin' + keys(bin).map(p => isSelectionExtent(bin[p]) ? varName(\\\"_\\\".concat(p, \\\"_\\\").concat(entries(bin[p]))) : varName(\\\"_\\\".concat(p, \\\"_\\\").concat(bin[p]))).join('');\\n  }\\n  /**\\n   * Vega-Lite should bin the data.\\n   */\\n\\n  function isBinning(bin) {\\n    return bin === true || isBinParams(bin) && !bin.binned;\\n  }\\n  /**\\n   * The data is already binned and so Vega-Lite should not bin it again.\\n   */\\n\\n  function isBinned(bin) {\\n    return bin === 'binned' || isBinParams(bin) && bin.binned === true;\\n  }\\n  function isBinParams(bin) {\\n    return isObject(bin);\\n  }\\n  function isSelectionExtent(extent) {\\n    return extent === null || extent === void 0 ? void 0 : extent['selection'];\\n  }\\n  function autoMaxBins(channel) {\\n    switch (channel) {\\n      case ROW:\\n      case COLUMN:\\n      case SIZE:\\n      case COLOR:\\n      case FILL:\\n      case STROKE:\\n      case STROKEWIDTH:\\n      case OPACITY:\\n      case FILLOPACITY:\\n      case STROKEOPACITY: // Facets and Size shouldn't have too many bins\\n      // We choose 6 like shape to simplify the rule [falls through]\\n\\n      case SHAPE:\\n        return 6;\\n      // Vega's \\\"shape\\\" has 6 distinct values\\n\\n      case STROKEDASH:\\n        return 4;\\n      // We only provide 5 different stroke dash values (but 4 is more effective)\\n\\n      default:\\n        return 10;\\n    }\\n  }\\n\\n  function _defineProperty(obj, key, value) {\\n    if (key in obj) {\\n      Object.defineProperty(obj, key, {\\n        value: value,\\n        enumerable: true,\\n        configurable: true,\\n        writable: true\\n      });\\n    } else {\\n      obj[key] = value;\\n    }\\n\\n    return obj;\\n  }\\n\\n  function _classPrivateFieldGet(receiver, privateMap) {\\n    var descriptor = privateMap.get(receiver);\\n\\n    if (!descriptor) {\\n      throw new TypeError(\\\"attempted to get private field on non-instance\\\");\\n    }\\n\\n    if (descriptor.get) {\\n      return descriptor.get.call(receiver);\\n    }\\n\\n    return descriptor.value;\\n  }\\n\\n  function _classPrivateFieldSet(receiver, privateMap, value) {\\n    var descriptor = privateMap.get(receiver);\\n\\n    if (!descriptor) {\\n      throw new TypeError(\\\"attempted to set private field on non-instance\\\");\\n    }\\n\\n    if (descriptor.set) {\\n      descriptor.set.call(receiver, value);\\n    } else {\\n      if (!descriptor.writable) {\\n        throw new TypeError(\\\"attempted to set read only private field\\\");\\n      }\\n\\n      descriptor.value = value;\\n    }\\n\\n    return value;\\n  }\\n\\n  /**\\n   * Collection of all Vega-Lite Error Messages\\n   */\\n  function invalidSpec(spec) {\\n    return \\\"Invalid specification \\\".concat(JSON.stringify(spec), \\\". Make sure the specification includes at least one of the following properties: \\\\\\\"mark\\\\\\\", \\\\\\\"layer\\\\\\\", \\\\\\\"facet\\\\\\\", \\\\\\\"hconcat\\\\\\\", \\\\\\\"vconcat\\\\\\\", \\\\\\\"concat\\\\\\\", or \\\\\\\"repeat\\\\\\\".\\\");\\n  } // FIT\\n\\n  const FIT_NON_SINGLE = 'Autosize \\\"fit\\\" only works for single views and layered views.';\\n  function containerSizeNonSingle(name) {\\n    const uName = name == 'width' ? 'Width' : 'Height';\\n    return \\\"\\\".concat(uName, \\\" \\\\\\\"container\\\\\\\" only works for single views and layered views.\\\");\\n  }\\n  function containerSizeNotCompatibleWithAutosize(name) {\\n    const uName = name == 'width' ? 'Width' : 'Height';\\n    const fitDirection = name == 'width' ? 'x' : 'y';\\n    return \\\"\\\".concat(uName, \\\" \\\\\\\"container\\\\\\\" only works well with autosize \\\\\\\"fit\\\\\\\" or \\\\\\\"fit-\\\").concat(fitDirection, \\\"\\\\\\\".\\\");\\n  }\\n  function droppingFit(channel) {\\n    return channel ? \\\"Dropping \\\\\\\"fit-\\\".concat(channel, \\\"\\\\\\\" because spec has discrete \\\").concat(getSizeChannel(channel), \\\".\\\") : \\\"Dropping \\\\\\\"fit\\\\\\\" because spec has discrete size.\\\";\\n  } // VIEW SIZE\\n\\n  function unknownField(channel) {\\n    return \\\"Unknown field for \\\".concat(channel, \\\". Cannot calculate view size.\\\");\\n  } // SELECTION\\n\\n  function cannotProjectOnChannelWithoutField(channel) {\\n    return \\\"Cannot project a selection on encoding channel \\\\\\\"\\\".concat(channel, \\\"\\\\\\\", which has no field.\\\");\\n  }\\n  function cannotProjectAggregate(channel, aggregate) {\\n    return \\\"Cannot project a selection on encoding channel \\\\\\\"\\\".concat(channel, \\\"\\\\\\\" as it uses an aggregate function (\\\\\\\"\\\").concat(aggregate, \\\"\\\\\\\").\\\");\\n  }\\n  function nearestNotSupportForContinuous(mark) {\\n    return \\\"The \\\\\\\"nearest\\\\\\\" transform is not supported for \\\".concat(mark, \\\" marks.\\\");\\n  }\\n  function selectionNotSupported(mark) {\\n    return \\\"Selection not supported for \\\".concat(mark, \\\" yet.\\\");\\n  }\\n  function selectionNotFound(name) {\\n    return \\\"Cannot find a selection named \\\\\\\"\\\".concat(name, \\\"\\\\\\\".\\\");\\n  }\\n  const SCALE_BINDINGS_CONTINUOUS = 'Scale bindings are currently only supported for scales with unbinned, continuous domains.';\\n  const LEGEND_BINDINGS_MUST_HAVE_PROJECTION = 'Legend bindings are only supported for selections over an individual field or encoding channel.';\\n  function noSameUnitLookup(name) {\\n    return \\\"Cannot define and lookup the \\\\\\\"\\\".concat(name, \\\"\\\\\\\" selection in the same view. \\\") + \\\"Try moving the lookup into a second, layered view?\\\";\\n  }\\n  const NEEDS_SAME_SELECTION = 'The same selection must be used to override scale domains in a layered view.';\\n  const INTERVAL_INITIALIZED_WITH_X_Y = 'Interval selections should be initialized using \\\"x\\\" and/or \\\"y\\\" keys.'; // REPEAT\\n\\n  function noSuchRepeatedValue(field) {\\n    return \\\"Unknown repeated value \\\\\\\"\\\".concat(field, \\\"\\\\\\\".\\\");\\n  }\\n  function columnsNotSupportByRowCol(type) {\\n    return \\\"The \\\\\\\"columns\\\\\\\" property cannot be used when \\\\\\\"\\\".concat(type, \\\"\\\\\\\" has nested row/column.\\\");\\n  } // CONCAT / REPEAT\\n\\n  const CONCAT_CANNOT_SHARE_AXIS = 'Axes cannot be shared in concatenated or repeated views yet (https://github.com/vega/vega-lite/issues/2415).'; // DATA\\n\\n  function unrecognizedParse(p) {\\n    return \\\"Unrecognized parse \\\\\\\"\\\".concat(p, \\\"\\\\\\\".\\\");\\n  }\\n  function differentParse(field, local, ancestor) {\\n    return \\\"An ancestor parsed field \\\\\\\"\\\".concat(field, \\\"\\\\\\\" as \\\").concat(ancestor, \\\" but a child wants to parse the field as \\\").concat(local, \\\".\\\");\\n  }\\n  const ADD_SAME_CHILD_TWICE = 'Attempt to add the same child twice.'; // TRANSFORMS\\n\\n  function invalidTransformIgnored(transform) {\\n    return \\\"Ignoring an invalid transform: \\\".concat(stringify(transform), \\\".\\\");\\n  }\\n  const NO_FIELDS_NEEDS_AS = 'If \\\"from.fields\\\" is not specified, \\\"as\\\" has to be a string that specifies the key to be used for the data from the secondary source.'; // ENCODING & FACET\\n\\n  function customFormatTypeNotAllowed(channel) {\\n    return \\\"Config.customFormatTypes is not true, thus custom format type and format for channel \\\".concat(channel, \\\" are dropped.\\\");\\n  }\\n  function projectionOverridden(opt) {\\n    const {\\n      parentProjection,\\n      projection\\n    } = opt;\\n    return \\\"Layer's shared projection \\\".concat(stringify(parentProjection), \\\" is overridden by a child projection \\\").concat(stringify(projection), \\\".\\\");\\n  }\\n  const REPLACE_ANGLE_WITH_THETA = 'Arc marks uses theta channel rather than angle, replacing angle with theta.';\\n  function primitiveChannelDef(channel, type, value) {\\n    return \\\"Channel \\\".concat(channel, \\\" is a \\\").concat(type, \\\". Converted to {value: \\\").concat(stringify(value), \\\"}.\\\");\\n  }\\n  function invalidFieldType(type) {\\n    return \\\"Invalid field type \\\\\\\"\\\".concat(type, \\\"\\\\\\\".\\\");\\n  }\\n  function invalidFieldTypeForCountAggregate(type, aggregate) {\\n    return \\\"Invalid field type \\\\\\\"\\\".concat(type, \\\"\\\\\\\" for aggregate: \\\\\\\"\\\").concat(aggregate, \\\"\\\\\\\", using \\\\\\\"quantitative\\\\\\\" instead.\\\");\\n  }\\n  function invalidAggregate(aggregate) {\\n    return \\\"Invalid aggregation operator \\\\\\\"\\\".concat(aggregate, \\\"\\\\\\\".\\\");\\n  }\\n  function droppingColor(type, opt) {\\n    const {\\n      fill,\\n      stroke\\n    } = opt;\\n    return \\\"Dropping color \\\".concat(type, \\\" as the plot also has \\\").concat(fill && stroke ? 'fill and stroke' : fill ? 'fill' : 'stroke', \\\".\\\");\\n  }\\n  function emptyFieldDef(fieldDef, channel) {\\n    return \\\"Dropping \\\".concat(stringify(fieldDef), \\\" from channel \\\\\\\"\\\").concat(channel, \\\"\\\\\\\" since it does not contain any data field, datum, value, or signal.\\\");\\n  }\\n  const LINE_WITH_VARYING_SIZE = 'Line marks cannot encode size with a non-groupby field. You may want to use trail marks instead.';\\n  function incompatibleChannel(channel, markOrFacet, when) {\\n    return \\\"\\\".concat(channel, \\\" dropped as it is incompatible with \\\\\\\"\\\").concat(markOrFacet, \\\"\\\\\\\"\\\").concat(when ? \\\" when \\\".concat(when) : '', \\\".\\\");\\n  }\\n  function invalidEncodingChannel(channel) {\\n    return \\\"\\\".concat(channel, \\\"-encoding is dropped as \\\").concat(channel, \\\" is not a valid encoding channel.\\\");\\n  }\\n  function facetChannelShouldBeDiscrete(channel) {\\n    return \\\"\\\".concat(channel, \\\" encoding should be discrete (ordinal / nominal / binned).\\\");\\n  }\\n  function facetChannelDropped(channels) {\\n    return \\\"Facet encoding dropped as \\\".concat(channels.join(' and '), \\\" \\\").concat(channels.length > 1 ? 'are' : 'is', \\\" also specified.\\\");\\n  }\\n  function discreteChannelCannotEncode(channel, type) {\\n    return \\\"Using discrete channel \\\\\\\"\\\".concat(channel, \\\"\\\\\\\" to encode \\\\\\\"\\\").concat(type, \\\"\\\\\\\" field can be misleading as it does not encode \\\").concat(type === 'ordinal' ? 'order' : 'magnitude', \\\".\\\");\\n  } // MARK\\n\\n  function rangeMarkAlignmentCannotBeExpression(align) {\\n    return \\\"The \\\".concat(align, \\\" for range marks cannot be an expression\\\");\\n  }\\n  function lineWithRange(hasX2, hasY2) {\\n    const channels = hasX2 && hasY2 ? 'x2 and y2' : hasX2 ? 'x2' : 'y2';\\n    return \\\"Line mark is for continuous lines and thus cannot be used with \\\".concat(channels, \\\". We will use the rule mark (line segments) instead.\\\");\\n  }\\n  function orientOverridden(original, actual) {\\n    return \\\"Specified orient \\\\\\\"\\\".concat(original, \\\"\\\\\\\" overridden with \\\\\\\"\\\").concat(actual, \\\"\\\\\\\".\\\");\\n  } // SCALE\\n  const RANGE_STEP_DEPRECATED = \\\"Scale's \\\\\\\"rangeStep\\\\\\\" is deprecated and will be removed in Vega-Lite 5.0. Please use \\\\\\\"width\\\\\\\"/\\\\\\\"height\\\\\\\": {\\\\\\\"step\\\\\\\": ...} instead. See https://vega.github.io/vega-lite/docs/size.html.\\\";\\n  function cannotUseScalePropertyWithNonColor(prop) {\\n    return \\\"Cannot use the scale property \\\\\\\"\\\".concat(prop, \\\"\\\\\\\" with non-color channel.\\\");\\n  }\\n  function unaggregateDomainHasNoEffectForRawField(fieldDef) {\\n    return \\\"Using unaggregated domain with raw field has no effect (\\\".concat(stringify(fieldDef), \\\").\\\");\\n  }\\n  function unaggregateDomainWithNonSharedDomainOp(aggregate) {\\n    return \\\"Unaggregated domain not applicable for \\\\\\\"\\\".concat(aggregate, \\\"\\\\\\\" since it produces values outside the origin domain of the source data.\\\");\\n  }\\n  function unaggregatedDomainWithLogScale(fieldDef) {\\n    return \\\"Unaggregated domain is currently unsupported for log scale (\\\".concat(stringify(fieldDef), \\\").\\\");\\n  }\\n  function cannotApplySizeToNonOrientedMark(mark) {\\n    return \\\"Cannot apply size to non-oriented mark \\\\\\\"\\\".concat(mark, \\\"\\\\\\\".\\\");\\n  }\\n  function scaleTypeNotWorkWithChannel(channel, scaleType, defaultScaleType) {\\n    return \\\"Channel \\\\\\\"\\\".concat(channel, \\\"\\\\\\\" does not work with \\\\\\\"\\\").concat(scaleType, \\\"\\\\\\\" scale. We are using \\\\\\\"\\\").concat(defaultScaleType, \\\"\\\\\\\" scale instead.\\\");\\n  }\\n  function scaleTypeNotWorkWithFieldDef(scaleType, defaultScaleType) {\\n    return \\\"FieldDef does not work with \\\\\\\"\\\".concat(scaleType, \\\"\\\\\\\" scale. We are using \\\\\\\"\\\").concat(defaultScaleType, \\\"\\\\\\\" scale instead.\\\");\\n  }\\n  function scalePropertyNotWorkWithScaleType(scaleType, propName, channel) {\\n    return \\\"\\\".concat(channel, \\\"-scale's \\\\\\\"\\\").concat(propName, \\\"\\\\\\\" is dropped as it does not work with \\\").concat(scaleType, \\\" scale.\\\");\\n  }\\n  function stepDropped(channel) {\\n    return \\\"The step for \\\\\\\"\\\".concat(channel, \\\"\\\\\\\" is dropped because the \\\").concat(channel === 'width' ? 'x' : 'y', \\\" is continuous.\\\");\\n  }\\n  function mergeConflictingProperty(property, propertyOf, v1, v2) {\\n    return \\\"Conflicting \\\".concat(propertyOf.toString(), \\\" property \\\\\\\"\\\").concat(property.toString(), \\\"\\\\\\\" (\\\").concat(stringify(v1), \\\" and \\\").concat(stringify(v2), \\\"). Using \\\").concat(stringify(v1), \\\".\\\");\\n  }\\n  function mergeConflictingDomainProperty(property, propertyOf, v1, v2) {\\n    return \\\"Conflicting \\\".concat(propertyOf.toString(), \\\" property \\\\\\\"\\\").concat(property.toString(), \\\"\\\\\\\" (\\\").concat(stringify(v1), \\\" and \\\").concat(stringify(v2), \\\"). Using the union of the two domains.\\\");\\n  }\\n  function independentScaleMeansIndependentGuide(channel) {\\n    return \\\"Setting the scale to be independent for \\\\\\\"\\\".concat(channel, \\\"\\\\\\\" means we also have to set the guide (axis or legend) to be independent.\\\");\\n  }\\n  function domainSortDropped(sort) {\\n    return \\\"Dropping sort property \\\".concat(stringify(sort), \\\" as unioned domains only support boolean or op \\\\\\\"count\\\\\\\", \\\\\\\"min\\\\\\\", and \\\\\\\"max\\\\\\\".\\\");\\n  }\\n  const MORE_THAN_ONE_SORT = 'Domains that should be unioned has conflicting sort properties. Sort will be set to true.';\\n  const FACETED_INDEPENDENT_DIFFERENT_SOURCES = 'Detected faceted independent scales that union domain of multiple fields from different data sources. We will use the first field. The result view size may be incorrect.';\\n  const FACETED_INDEPENDENT_SAME_FIELDS_DIFFERENT_SOURCES = 'Detected faceted independent scales that union domain of the same fields from different source. We will assume that this is the same field from a different fork of the same data source. However, if this is not the case, the result view size may be incorrect.';\\n  const FACETED_INDEPENDENT_SAME_SOURCE = 'Detected faceted independent scales that union domain of multiple fields from the same data source. We will use the first field. The result view size may be incorrect.'; // AXIS\\n\\n  function cannotStackRangedMark(channel) {\\n    return \\\"Cannot stack \\\\\\\"\\\".concat(channel, \\\"\\\\\\\" if there is already \\\\\\\"\\\").concat(channel, \\\"2\\\\\\\".\\\");\\n  }\\n  function cannotStackNonLinearScale(scaleType) {\\n    return \\\"Cannot stack non-linear scale (\\\".concat(scaleType, \\\").\\\");\\n  }\\n  function stackNonSummativeAggregate(aggregate) {\\n    return \\\"Stacking is applied even though the aggregate function is non-summative (\\\\\\\"\\\".concat(aggregate, \\\"\\\\\\\").\\\");\\n  } // TIMEUNIT\\n\\n  function invalidTimeUnit(unitName, value) {\\n    return \\\"Invalid \\\".concat(unitName, \\\": \\\").concat(stringify(value), \\\".\\\");\\n  }\\n  function droppedDay(d) {\\n    return \\\"Dropping day from datetime \\\".concat(stringify(d), \\\" as day cannot be combined with other units.\\\");\\n  }\\n  function errorBarCenterAndExtentAreNotNeeded(center, extent) {\\n    return \\\"\\\".concat(extent ? 'extent ' : '').concat(extent && center ? 'and ' : '').concat(center ? 'center ' : '').concat(extent && center ? 'are ' : 'is ', \\\"not needed when data are aggregated.\\\");\\n  }\\n  function errorBarCenterIsUsedWithWrongExtent(center, extent, mark) {\\n    return \\\"\\\".concat(center, \\\" is not usually used with \\\").concat(extent, \\\" for \\\").concat(mark, \\\".\\\");\\n  }\\n  function errorBarContinuousAxisHasCustomizedAggregate(aggregate, compositeMark) {\\n    return \\\"Continuous axis should not have customized aggregation function \\\".concat(aggregate, \\\"; \\\").concat(compositeMark, \\\" already agregates the axis.\\\");\\n  }\\n  function errorBand1DNotSupport(property) {\\n    return \\\"1D error band does not support \\\".concat(property, \\\".\\\");\\n  } // CHANNEL\\n\\n  function channelRequiredForBinned(channel) {\\n    return \\\"Channel \\\".concat(channel, \\\" is required for \\\\\\\"binned\\\\\\\" bin.\\\");\\n  }\\n  function channelShouldNotBeUsedForBinned(channel) {\\n    return \\\"Channel \\\".concat(channel, \\\" should not be used with \\\\\\\"binned\\\\\\\" bin.\\\");\\n  }\\n  function domainRequiredForThresholdScale(channel) {\\n    return \\\"Domain for \\\".concat(channel, \\\" is required for threshold scale.\\\");\\n  }\\n\\n  /**\\n   * Main (default) Vega Logger instance for Vega-Lite.\\n   */\\n\\n  const main = logger(Warn);\\n  let current = main;\\n  /**\\n   * Set the singleton logger to be a custom logger.\\n   */\\n\\n  function set(newLogger) {\\n    current = newLogger;\\n    return current;\\n  }\\n  /**\\n   * Reset the main logger to use the default Vega Logger.\\n   */\\n\\n  function reset() {\\n    current = main;\\n    return current;\\n  }\\n  function warn(...args) {\\n    current.warn(...args);\\n  }\\n  function debug(...args) {\\n    current.debug(...args);\\n  }\\n\\n  // DateTime definition object\\n  /**\\n   * @minimum 1\\n   * @maximum 12\\n   * @TJS-type integer\\n   */\\n\\n  function isDateTime(o) {\\n    if (o && isObject(o)) {\\n      for (const part of TIMEUNIT_PARTS) {\\n        if (part in o) {\\n          return true;\\n        }\\n      }\\n    }\\n\\n    return false;\\n  }\\n  const MONTHS = ['january', 'february', 'march', 'april', 'may', 'june', 'july', 'august', 'september', 'october', 'november', 'december'];\\n  const SHORT_MONTHS = MONTHS.map(m => m.substr(0, 3));\\n  const DAYS = ['sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday'];\\n  const SHORT_DAYS = DAYS.map(d => d.substr(0, 3));\\n\\n  function normalizeQuarter(q) {\\n    if (isNumeric(q)) {\\n      q = +q;\\n    }\\n\\n    if (isNumber(q)) {\\n      if (q > 4) {\\n        warn(invalidTimeUnit('quarter', q));\\n      } // We accept 1-based quarter, so need to readjust to 0-based quarter\\n\\n\\n      return q - 1;\\n    } else {\\n      // Invalid quarter\\n      throw new Error(invalidTimeUnit('quarter', q));\\n    }\\n  }\\n\\n  function normalizeMonth(m) {\\n    if (isNumeric(m)) {\\n      m = +m;\\n    }\\n\\n    if (isNumber(m)) {\\n      // We accept 1-based month, so need to readjust to 0-based month\\n      return m - 1;\\n    } else {\\n      const lowerM = m.toLowerCase();\\n      const monthIndex = MONTHS.indexOf(lowerM);\\n\\n      if (monthIndex !== -1) {\\n        return monthIndex; // 0 for january, ...\\n      }\\n\\n      const shortM = lowerM.substr(0, 3);\\n      const shortMonthIndex = SHORT_MONTHS.indexOf(shortM);\\n\\n      if (shortMonthIndex !== -1) {\\n        return shortMonthIndex;\\n      } // Invalid month\\n\\n\\n      throw new Error(invalidTimeUnit('month', m));\\n    }\\n  }\\n\\n  function normalizeDay(d) {\\n    if (isNumeric(d)) {\\n      d = +d;\\n    }\\n\\n    if (isNumber(d)) {\\n      // mod so that this can be both 0-based where 0 = sunday\\n      // and 1-based where 7=sunday\\n      return d % 7;\\n    } else {\\n      const lowerD = d.toLowerCase();\\n      const dayIndex = DAYS.indexOf(lowerD);\\n\\n      if (dayIndex !== -1) {\\n        return dayIndex; // 0 for january, ...\\n      }\\n\\n      const shortD = lowerD.substr(0, 3);\\n      const shortDayIndex = SHORT_DAYS.indexOf(shortD);\\n\\n      if (shortDayIndex !== -1) {\\n        return shortDayIndex;\\n      } // Invalid day\\n\\n\\n      throw new Error(invalidTimeUnit('day', d));\\n    }\\n  }\\n  /**\\n   * @param d the date.\\n   * @param normalize whether to normalize quarter, month, day. This should probably be true if d is a DateTime.\\n   * @returns array of date time parts [year, month, day, hours, minutes, seconds, milliseconds]\\n   */\\n\\n\\n  function dateTimeParts(d, normalize) {\\n    const parts = [];\\n\\n    if (normalize && d.day !== undefined) {\\n      if (keys(d).length > 1) {\\n        warn(droppedDay(d));\\n        d = duplicate(d);\\n        delete d.day;\\n      }\\n    }\\n\\n    if (d.year !== undefined) {\\n      parts.push(d.year);\\n    } else {\\n      // Just like Vega's timeunit transform, set default year to 2012, so domain conversion will be compatible with Vega\\n      // Note: 2012 is a leap year (and so the date February 29 is respected) that begins on a Sunday (and so days of the week will order properly at the beginning of the year).\\n      parts.push(2012);\\n    }\\n\\n    if (d.month !== undefined) {\\n      const month = normalize ? normalizeMonth(d.month) : d.month;\\n      parts.push(month);\\n    } else if (d.quarter !== undefined) {\\n      const quarter = normalize ? normalizeQuarter(d.quarter) : d.quarter;\\n      parts.push(isNumber(quarter) ? quarter * 3 : quarter + '*3');\\n    } else {\\n      parts.push(0); // months start at zero in JS\\n    }\\n\\n    if (d.date !== undefined) {\\n      parts.push(d.date);\\n    } else if (d.day !== undefined) {\\n      // HACK: Day only works as a standalone unit\\n      // This is only correct because we always set year to 2006 for day\\n      const day = normalize ? normalizeDay(d.day) : d.day;\\n      parts.push(isNumber(day) ? day + 1 : day + '+1');\\n    } else {\\n      parts.push(1); // Date starts at 1 in JS\\n    } // Note: can't use TimeUnit enum here as importing it will create\\n    // circular dependency problem!\\n\\n\\n    for (const timeUnit of ['hours', 'minutes', 'seconds', 'milliseconds']) {\\n      const unit = d[timeUnit];\\n      parts.push(typeof unit === 'undefined' ? 0 : unit);\\n    }\\n\\n    return parts;\\n  }\\n  /**\\n   * Return Vega expression for a date time.\\n   *\\n   * @param d the date time.\\n   * @returns the Vega expression.\\n   */\\n\\n\\n  function dateTimeToExpr(d) {\\n    const parts = dateTimeParts(d, true);\\n    const string = parts.join(', ');\\n\\n    if (d.utc) {\\n      return \\\"utc(\\\".concat(string, \\\")\\\");\\n    } else {\\n      return \\\"datetime(\\\".concat(string, \\\")\\\");\\n    }\\n  }\\n  /**\\n   * Return Vega expression for a date time expression.\\n   *\\n   * @param d the internal date time object with expression.\\n   * @returns the Vega expression.\\n   */\\n\\n  function dateTimeExprToExpr(d) {\\n    const parts = dateTimeParts(d, false);\\n    const string = parts.join(', ');\\n\\n    if (d.utc) {\\n      return \\\"utc(\\\".concat(string, \\\")\\\");\\n    } else {\\n      return \\\"datetime(\\\".concat(string, \\\")\\\");\\n    }\\n  }\\n  /**\\n   * @param d the date time.\\n   * @returns the timestamp.\\n   */\\n\\n  function dateTimeToTimestamp(d) {\\n    const parts = dateTimeParts(d, true);\\n\\n    if (d.utc) {\\n      return +new Date(Date.UTC(...parts));\\n    } else {\\n      return +new Date(...parts);\\n    }\\n  }\\n\\n  /** Time Unit that only corresponds to only one part of Date objects. */\\n\\n  const LOCAL_SINGLE_TIMEUNIT_INDEX = {\\n    year: 1,\\n    quarter: 1,\\n    month: 1,\\n    week: 1,\\n    day: 1,\\n    dayofyear: 1,\\n    date: 1,\\n    hours: 1,\\n    minutes: 1,\\n    seconds: 1,\\n    milliseconds: 1\\n  };\\n  const TIMEUNIT_PARTS = keys(LOCAL_SINGLE_TIMEUNIT_INDEX);\\n  function isLocalSingleTimeUnit(timeUnit) {\\n    return !!LOCAL_SINGLE_TIMEUNIT_INDEX[timeUnit];\\n  }\\n  function isUTCTimeUnit(t) {\\n    return t.startsWith('utc');\\n  }\\n  function getLocalTimeUnit(t) {\\n    return t.substr(3);\\n  }\\n  // In order of increasing specificity\\n  const VEGALITE_TIMEFORMAT = {\\n    'year-month': '%b %Y ',\\n    'year-month-date': '%b %d, %Y '\\n  };\\n  function getTimeUnitParts(timeUnit) {\\n    const parts = [];\\n\\n    for (const part of TIMEUNIT_PARTS) {\\n      if (containsTimeUnit(timeUnit, part)) {\\n        parts.push(part);\\n      }\\n    }\\n\\n    return parts;\\n  }\\n  /** Returns true if fullTimeUnit contains the timeUnit, false otherwise. */\\n\\n  function containsTimeUnit(fullTimeUnit, timeUnit) {\\n    const index = fullTimeUnit.indexOf(timeUnit);\\n\\n    if (index < 0) {\\n      return false;\\n    } // exclude milliseconds\\n\\n\\n    if (index > 0 && timeUnit === 'seconds' && fullTimeUnit.charAt(index - 1) === 'i') {\\n      return false;\\n    } // exclude dayofyear\\n\\n\\n    if (fullTimeUnit.length > index + 3 && timeUnit === 'day' && fullTimeUnit.charAt(index + 3) === 'o') {\\n      return false;\\n    }\\n\\n    if (index > 0 && timeUnit === 'year' && fullTimeUnit.charAt(index - 1) === 'f') {\\n      return false;\\n    }\\n\\n    return true;\\n  }\\n  /**\\n   * Returns Vega expression for a given timeUnit and fieldRef\\n   */\\n\\n  function fieldExpr(fullTimeUnit, field, {\\n    end\\n  } = {\\n    end: false\\n  }) {\\n    const fieldRef = accessPathWithDatum(field);\\n    const utc = isUTCTimeUnit(fullTimeUnit) ? 'utc' : '';\\n\\n    function func(timeUnit) {\\n      if (timeUnit === 'quarter') {\\n        // quarter starting at 0 (0,3,6,9).\\n        return \\\"(\\\".concat(utc, \\\"quarter(\\\").concat(fieldRef, \\\")-1)\\\");\\n      } else {\\n        return \\\"\\\".concat(utc).concat(timeUnit, \\\"(\\\").concat(fieldRef, \\\")\\\");\\n      }\\n    }\\n\\n    let lastTimeUnit;\\n    const dateExpr = {};\\n\\n    for (const part of TIMEUNIT_PARTS) {\\n      if (containsTimeUnit(fullTimeUnit, part)) {\\n        dateExpr[part] = func(part);\\n        lastTimeUnit = part;\\n      }\\n    }\\n\\n    if (end) {\\n      dateExpr[lastTimeUnit] += '+1';\\n    }\\n\\n    return dateTimeExprToExpr(dateExpr);\\n  }\\n  function timeUnitSpecifierExpression(timeUnit) {\\n    if (!timeUnit) {\\n      return undefined;\\n    }\\n\\n    const timeUnitParts = getTimeUnitParts(timeUnit);\\n    return \\\"timeUnitSpecifier(\\\".concat(fastJsonStableStringify(timeUnitParts), \\\", \\\").concat(fastJsonStableStringify(VEGALITE_TIMEFORMAT), \\\")\\\");\\n  }\\n  /**\\n   * Returns the signal expression used for axis labels for a time unit.\\n   */\\n\\n  function formatExpression(timeUnit, field, isUTCScale) {\\n    if (!timeUnit) {\\n      return undefined;\\n    }\\n\\n    const expr = timeUnitSpecifierExpression(timeUnit); // We only use utcFormat for utc scale\\n    // For utc time units, the data is already converted as a part of timeUnit transform.\\n    // Thus, utc time units should use timeFormat to avoid shifting the time twice.\\n\\n    const utc = isUTCScale || isUTCTimeUnit(timeUnit);\\n    return \\\"\\\".concat(utc ? 'utc' : 'time', \\\"Format(\\\").concat(field, \\\", \\\").concat(expr, \\\")\\\");\\n  }\\n  function normalizeTimeUnit(timeUnit) {\\n    if (!timeUnit) {\\n      return undefined;\\n    }\\n\\n    let params;\\n\\n    if (isString(timeUnit)) {\\n      params = {\\n        unit: timeUnit\\n      };\\n    } else if (isObject(timeUnit)) {\\n      params = { ...timeUnit,\\n        ...(timeUnit.unit ? {\\n          unit: timeUnit.unit\\n        } : {})\\n      };\\n    }\\n\\n    if (isUTCTimeUnit(params.unit)) {\\n      params.utc = true;\\n      params.unit = getLocalTimeUnit(params.unit);\\n    }\\n\\n    return params;\\n  }\\n  function timeUnitToString(tu) {\\n    const {\\n      utc,\\n      ...rest\\n    } = normalizeTimeUnit(tu);\\n\\n    if (rest.unit) {\\n      return (utc ? 'utc' : '') + keys(rest).map(p => varName(\\\"\\\".concat(p === 'unit' ? '' : \\\"_\\\".concat(p, \\\"_\\\")).concat(rest[p]))).join('');\\n    } else {\\n      // when maxbins is specified instead of units\\n      return (utc ? 'utc' : '') + 'timeunit' + keys(rest).map(p => varName(\\\"_\\\".concat(p, \\\"_\\\").concat(rest[p]))).join('');\\n    }\\n  }\\n\\n  function isSignalRef(o) {\\n    return o && !!o['signal'];\\n  } // TODO: add type of value (Make it VgValueRef<V extends ValueOrGradient> {value?:V ...})\\n\\n  function isVgRangeStep(range) {\\n    return !!range['step'];\\n  }\\n  function isDataRefUnionedDomain(domain) {\\n    if (!isArray(domain)) {\\n      return 'fields' in domain && !('data' in domain);\\n    }\\n\\n    return false;\\n  }\\n  function isFieldRefUnionDomain(domain) {\\n    if (!isArray(domain)) {\\n      return 'fields' in domain && 'data' in domain;\\n    }\\n\\n    return false;\\n  }\\n  function isDataRefDomain(domain) {\\n    if (!isArray(domain)) {\\n      return 'field' in domain && 'data' in domain;\\n    }\\n\\n    return false;\\n  }\\n  const VG_MARK_CONFIG_INDEX = {\\n    aria: 1,\\n    description: 1,\\n    ariaRole: 1,\\n    ariaRoleDescription: 1,\\n    blend: 1,\\n    opacity: 1,\\n    fill: 1,\\n    fillOpacity: 1,\\n    stroke: 1,\\n    strokeCap: 1,\\n    strokeWidth: 1,\\n    strokeOpacity: 1,\\n    strokeDash: 1,\\n    strokeDashOffset: 1,\\n    strokeJoin: 1,\\n    strokeOffset: 1,\\n    strokeMiterLimit: 1,\\n    startAngle: 1,\\n    endAngle: 1,\\n    padAngle: 1,\\n    innerRadius: 1,\\n    outerRadius: 1,\\n    size: 1,\\n    shape: 1,\\n    interpolate: 1,\\n    tension: 1,\\n    orient: 1,\\n    align: 1,\\n    baseline: 1,\\n    text: 1,\\n    dir: 1,\\n    dx: 1,\\n    dy: 1,\\n    ellipsis: 1,\\n    limit: 1,\\n    radius: 1,\\n    theta: 1,\\n    angle: 1,\\n    font: 1,\\n    fontSize: 1,\\n    fontWeight: 1,\\n    fontStyle: 1,\\n    lineBreak: 1,\\n    lineHeight: 1,\\n    cursor: 1,\\n    href: 1,\\n    tooltip: 1,\\n    cornerRadius: 1,\\n    cornerRadiusTopLeft: 1,\\n    cornerRadiusTopRight: 1,\\n    cornerRadiusBottomLeft: 1,\\n    cornerRadiusBottomRight: 1,\\n    aspect: 1,\\n    width: 1,\\n    height: 1,\\n    url: 1,\\n    smooth: 1 // commented below are vg channel that do not have mark config.\\n    // x: 1,\\n    // y: 1,\\n    // x2: 1,\\n    // y2: 1,\\n    // xc'|'yc'\\n    // clip: 1,\\n    // path: 1,\\n    // url: 1,\\n\\n  };\\n  const VG_MARK_CONFIGS = keys(VG_MARK_CONFIG_INDEX);\\n  const VG_MARK_INDEX = {\\n    arc: 1,\\n    area: 1,\\n    group: 1,\\n    image: 1,\\n    line: 1,\\n    path: 1,\\n    rect: 1,\\n    rule: 1,\\n    shape: 1,\\n    symbol: 1,\\n    text: 1,\\n    trail: 1\\n  }; // Vega's cornerRadius channels.\\n\\n  const VG_CORNERRADIUS_CHANNELS = ['cornerRadius', 'cornerRadiusTopLeft', 'cornerRadiusTopRight', 'cornerRadiusBottomLeft', 'cornerRadiusBottomRight'];\\n\\n  function isSelectionPredicate(predicate) {\\n    return predicate === null || predicate === void 0 ? void 0 : predicate['selection'];\\n  }\\n  function isFieldEqualPredicate(predicate) {\\n    return predicate && !!predicate.field && predicate.equal !== undefined;\\n  }\\n  function isFieldLTPredicate(predicate) {\\n    return predicate && !!predicate.field && predicate.lt !== undefined;\\n  }\\n  function isFieldLTEPredicate(predicate) {\\n    return predicate && !!predicate.field && predicate.lte !== undefined;\\n  }\\n  function isFieldGTPredicate(predicate) {\\n    return predicate && !!predicate.field && predicate.gt !== undefined;\\n  }\\n  function isFieldGTEPredicate(predicate) {\\n    return predicate && !!predicate.field && predicate.gte !== undefined;\\n  }\\n  function isFieldRangePredicate(predicate) {\\n    if (predicate && predicate.field) {\\n      if (isArray(predicate.range) && predicate.range.length === 2) {\\n        return true;\\n      } else if (isSignalRef(predicate.range)) {\\n        return true;\\n      }\\n    }\\n\\n    return false;\\n  }\\n  function isFieldOneOfPredicate(predicate) {\\n    return predicate && !!predicate.field && (isArray(predicate.oneOf) || isArray(predicate.in)) // backward compatibility\\n    ;\\n  }\\n  function isFieldValidPredicate(predicate) {\\n    return predicate && !!predicate.field && predicate.valid !== undefined;\\n  }\\n  function isFieldPredicate(predicate) {\\n    return isFieldOneOfPredicate(predicate) || isFieldEqualPredicate(predicate) || isFieldRangePredicate(predicate) || isFieldLTPredicate(predicate) || isFieldGTPredicate(predicate) || isFieldLTEPredicate(predicate) || isFieldGTEPredicate(predicate);\\n  }\\n\\n  function predicateValueExpr(v, timeUnit) {\\n    return valueExpr(v, {\\n      timeUnit,\\n      wrapTime: true\\n    });\\n  }\\n\\n  function predicateValuesExpr(vals, timeUnit) {\\n    return vals.map(v => predicateValueExpr(v, timeUnit));\\n  } // This method is used by Voyager. Do not change its behavior without changing Voyager.\\n\\n\\n  function fieldFilterExpression(predicate, useInRange = true) {\\n    var _normalizeTimeUnit;\\n\\n    const {\\n      field\\n    } = predicate;\\n    const timeUnit = (_normalizeTimeUnit = normalizeTimeUnit(predicate.timeUnit)) === null || _normalizeTimeUnit === void 0 ? void 0 : _normalizeTimeUnit.unit;\\n    const fieldExpr$1 = timeUnit ? // For timeUnit, cast into integer with time() so we can use ===, inrange, indexOf to compare values directly.\\n    // TODO: We calculate timeUnit on the fly here. Consider if we would like to consolidate this with timeUnit pipeline\\n    // TODO: support utc\\n    'time(' + fieldExpr(timeUnit, field) + ')' : vgField(predicate, {\\n      expr: 'datum'\\n    });\\n\\n    if (isFieldEqualPredicate(predicate)) {\\n      return fieldExpr$1 + '===' + predicateValueExpr(predicate.equal, timeUnit);\\n    } else if (isFieldLTPredicate(predicate)) {\\n      const upper = predicate.lt;\\n      return \\\"\\\".concat(fieldExpr$1, \\\"<\\\").concat(predicateValueExpr(upper, timeUnit));\\n    } else if (isFieldGTPredicate(predicate)) {\\n      const lower = predicate.gt;\\n      return \\\"\\\".concat(fieldExpr$1, \\\">\\\").concat(predicateValueExpr(lower, timeUnit));\\n    } else if (isFieldLTEPredicate(predicate)) {\\n      const upper = predicate.lte;\\n      return \\\"\\\".concat(fieldExpr$1, \\\"<=\\\").concat(predicateValueExpr(upper, timeUnit));\\n    } else if (isFieldGTEPredicate(predicate)) {\\n      const lower = predicate.gte;\\n      return \\\"\\\".concat(fieldExpr$1, \\\">=\\\").concat(predicateValueExpr(lower, timeUnit));\\n    } else if (isFieldOneOfPredicate(predicate)) {\\n      return \\\"indexof([\\\".concat(predicateValuesExpr(predicate.oneOf, timeUnit).join(','), \\\"], \\\").concat(fieldExpr$1, \\\") !== -1\\\");\\n    } else if (isFieldValidPredicate(predicate)) {\\n      return fieldValidPredicate(fieldExpr$1, predicate.valid);\\n    } else if (isFieldRangePredicate(predicate)) {\\n      const {\\n        range\\n      } = predicate;\\n      const lower = isSignalRef(range) ? {\\n        signal: \\\"\\\".concat(range.signal, \\\"[0]\\\")\\n      } : range[0];\\n      const upper = isSignalRef(range) ? {\\n        signal: \\\"\\\".concat(range.signal, \\\"[1]\\\")\\n      } : range[1];\\n\\n      if (lower !== null && upper !== null && useInRange) {\\n        return 'inrange(' + fieldExpr$1 + ', [' + predicateValueExpr(lower, timeUnit) + ', ' + predicateValueExpr(upper, timeUnit) + '])';\\n      }\\n\\n      const exprs = [];\\n\\n      if (lower !== null) {\\n        exprs.push(\\\"\\\".concat(fieldExpr$1, \\\" >= \\\").concat(predicateValueExpr(lower, timeUnit)));\\n      }\\n\\n      if (upper !== null) {\\n        exprs.push(\\\"\\\".concat(fieldExpr$1, \\\" <= \\\").concat(predicateValueExpr(upper, timeUnit)));\\n      }\\n\\n      return exprs.length > 0 ? exprs.join(' && ') : 'true';\\n    }\\n    /* istanbul ignore next: it should never reach here */\\n\\n\\n    throw new Error(\\\"Invalid field predicate: \\\".concat(JSON.stringify(predicate)));\\n  }\\n  function fieldValidPredicate(fieldExpr, valid = true) {\\n    if (valid) {\\n      return \\\"isValid(\\\".concat(fieldExpr, \\\") && isFinite(+\\\").concat(fieldExpr, \\\")\\\");\\n    } else {\\n      return \\\"!isValid(\\\".concat(fieldExpr, \\\") || !isFinite(+\\\").concat(fieldExpr, \\\")\\\");\\n    }\\n  }\\n  function normalizePredicate(f) {\\n    if (isFieldPredicate(f) && f.timeUnit) {\\n      var _normalizeTimeUnit2;\\n\\n      return { ...f,\\n        timeUnit: (_normalizeTimeUnit2 = normalizeTimeUnit(f.timeUnit)) === null || _normalizeTimeUnit2 === void 0 ? void 0 : _normalizeTimeUnit2.unit\\n      };\\n    }\\n\\n    return f;\\n  }\\n\\n  /**\\n   * Data type based on level of measurement\\n   */\\n\\n  const Type = {\\n    quantitative: 'quantitative',\\n    ordinal: 'ordinal',\\n    temporal: 'temporal',\\n    nominal: 'nominal',\\n    geojson: 'geojson'\\n  };\\n  const QUANTITATIVE = Type.quantitative;\\n  const ORDINAL = Type.ordinal;\\n  const TEMPORAL = Type.temporal;\\n  const NOMINAL = Type.nominal;\\n  const GEOJSON = Type.geojson;\\n  /**\\n   * Get full, lowercase type name for a given type.\\n   * @param  type\\n   * @return Full type name.\\n   */\\n\\n  function getFullName(type) {\\n    if (type) {\\n      type = type.toLowerCase();\\n\\n      switch (type) {\\n        case 'q':\\n        case QUANTITATIVE:\\n          return 'quantitative';\\n\\n        case 't':\\n        case TEMPORAL:\\n          return 'temporal';\\n\\n        case 'o':\\n        case ORDINAL:\\n          return 'ordinal';\\n\\n        case 'n':\\n        case NOMINAL:\\n          return 'nominal';\\n\\n        case GEOJSON:\\n          return 'geojson';\\n      }\\n    } // If we get invalid input, return undefined type.\\n\\n\\n    return undefined;\\n  }\\n\\n  const ScaleType = {\\n    // Continuous - Quantitative\\n    LINEAR: 'linear',\\n    LOG: 'log',\\n    POW: 'pow',\\n    SQRT: 'sqrt',\\n    SYMLOG: 'symlog',\\n    IDENTITY: 'identity',\\n    SEQUENTIAL: 'sequential',\\n    // Continuous - Time\\n    TIME: 'time',\\n    UTC: 'utc',\\n    // Discretizing scales\\n    QUANTILE: 'quantile',\\n    QUANTIZE: 'quantize',\\n    THRESHOLD: 'threshold',\\n    BIN_ORDINAL: 'bin-ordinal',\\n    // Discrete scales\\n    ORDINAL: 'ordinal',\\n    POINT: 'point',\\n    BAND: 'band'\\n  };\\n\\n  /**\\n   * Index for scale categories -- only scale of the same categories can be merged together.\\n   * Current implementation is trying to be conservative and avoid merging scale type that might not work together\\n   */\\n  const SCALE_CATEGORY_INDEX = {\\n    linear: 'numeric',\\n    log: 'numeric',\\n    pow: 'numeric',\\n    sqrt: 'numeric',\\n    symlog: 'numeric',\\n    identity: 'numeric',\\n    sequential: 'numeric',\\n    time: 'time',\\n    utc: 'time',\\n    ordinal: 'ordinal',\\n    'bin-ordinal': 'bin-ordinal',\\n    // TODO: should bin-ordinal support merging with other\\n    point: 'ordinal-position',\\n    band: 'ordinal-position',\\n    quantile: 'discretizing',\\n    quantize: 'discretizing',\\n    threshold: 'discretizing'\\n  };\\n  /**\\n   * Whether the two given scale types can be merged together.\\n   */\\n\\n  function scaleCompatible(scaleType1, scaleType2) {\\n    const scaleCategory1 = SCALE_CATEGORY_INDEX[scaleType1];\\n    const scaleCategory2 = SCALE_CATEGORY_INDEX[scaleType2];\\n    return scaleCategory1 === scaleCategory2 || scaleCategory1 === 'ordinal-position' && scaleCategory2 === 'time' || scaleCategory2 === 'ordinal-position' && scaleCategory1 === 'time';\\n  }\\n  /**\\n   * Index for scale precedence -- high score = higher priority for merging.\\n   */\\n\\n  const SCALE_PRECEDENCE_INDEX = {\\n    // numeric\\n    linear: 0,\\n    log: 1,\\n    pow: 1,\\n    sqrt: 1,\\n    symlog: 1,\\n    identity: 1,\\n    sequential: 1,\\n    // time\\n    time: 0,\\n    utc: 0,\\n    // ordinal-position -- these have higher precedence than continuous scales as they support more types of data\\n    point: 10,\\n    band: 11,\\n    // band has higher precedence as it is better for interaction\\n    // non grouped types\\n    ordinal: 0,\\n    'bin-ordinal': 0,\\n    quantile: 0,\\n    quantize: 0,\\n    threshold: 0\\n  };\\n  /**\\n   * Return scale categories -- only scale of the same categories can be merged together.\\n   */\\n\\n  function scaleTypePrecedence(scaleType) {\\n    return SCALE_PRECEDENCE_INDEX[scaleType];\\n  }\\n  const CONTINUOUS_TO_CONTINUOUS_SCALES = ['linear', 'log', 'pow', 'sqrt', 'symlog', 'time', 'utc'];\\n  const CONTINUOUS_TO_CONTINUOUS_INDEX = toSet(CONTINUOUS_TO_CONTINUOUS_SCALES);\\n  const QUANTITATIVE_SCALES = ['linear', 'log', 'pow', 'sqrt', 'symlog'];\\n  const QUANTITATIVE_SCALES_INDEX = toSet(QUANTITATIVE_SCALES);\\n  function isQuantitative(type) {\\n    return type in QUANTITATIVE_SCALES_INDEX;\\n  }\\n  const CONTINUOUS_TO_DISCRETE_SCALES = ['quantile', 'quantize', 'threshold'];\\n  const CONTINUOUS_TO_DISCRETE_INDEX = toSet(CONTINUOUS_TO_DISCRETE_SCALES);\\n  const CONTINUOUS_DOMAIN_SCALES = CONTINUOUS_TO_CONTINUOUS_SCALES.concat(['quantile', 'quantize', 'threshold', 'sequential', 'identity']);\\n  const CONTINUOUS_DOMAIN_INDEX = toSet(CONTINUOUS_DOMAIN_SCALES);\\n  const DISCRETE_DOMAIN_SCALES = ['ordinal', 'bin-ordinal', 'point', 'band'];\\n  const DISCRETE_DOMAIN_INDEX = toSet(DISCRETE_DOMAIN_SCALES);\\n  function hasDiscreteDomain(type) {\\n    return type in DISCRETE_DOMAIN_INDEX;\\n  }\\n  function hasContinuousDomain(type) {\\n    return type in CONTINUOUS_DOMAIN_INDEX;\\n  }\\n  function isContinuousToContinuous(type) {\\n    return type in CONTINUOUS_TO_CONTINUOUS_INDEX;\\n  }\\n  function isContinuousToDiscrete(type) {\\n    return type in CONTINUOUS_TO_DISCRETE_INDEX;\\n  }\\n  const defaultScaleConfig = {\\n    pointPadding: 0.5,\\n    barBandPaddingInner: 0.1,\\n    rectBandPaddingInner: 0,\\n    minBandSize: 2,\\n    minFontSize: 8,\\n    maxFontSize: 40,\\n    minOpacity: 0.3,\\n    maxOpacity: 0.8,\\n    // FIXME: revise if these *can* become ratios of width/height step\\n    minSize: 9,\\n    // Point size is area. For square point, 9 = 3 pixel ^ 2, not too small!\\n    minStrokeWidth: 1,\\n    maxStrokeWidth: 4,\\n    quantileCount: 4,\\n    quantizeCount: 4\\n  };\\n  function isExtendedScheme(scheme) {\\n    return !isString(scheme) && !!scheme['name'];\\n  }\\n  function isSelectionDomain(domain) {\\n    return domain === null || domain === void 0 ? void 0 : domain['selection'];\\n  }\\n  function isDomainUnionWith(domain) {\\n    return domain && domain['unionWith'];\\n  }\\n  const SCALE_PROPERTY_INDEX = {\\n    type: 1,\\n    domain: 1,\\n    domainMax: 1,\\n    domainMin: 1,\\n    domainMid: 1,\\n    align: 1,\\n    range: 1,\\n    rangeMax: 1,\\n    rangeMin: 1,\\n    scheme: 1,\\n    bins: 1,\\n    // Other properties\\n    reverse: 1,\\n    round: 1,\\n    // quantitative / time\\n    clamp: 1,\\n    nice: 1,\\n    // quantitative\\n    base: 1,\\n    exponent: 1,\\n    constant: 1,\\n    interpolate: 1,\\n    zero: 1,\\n    // zero depends on domain\\n    // band/point\\n    padding: 1,\\n    paddingInner: 1,\\n    paddingOuter: 1\\n  };\\n  const {\\n    type,\\n    domain,\\n    range,\\n    rangeMax,\\n    rangeMin,\\n    scheme,\\n    ...NON_TYPE_DOMAIN_RANGE_VEGA_SCALE_PROPERTY_INDEX\\n  } = SCALE_PROPERTY_INDEX;\\n  const NON_TYPE_DOMAIN_RANGE_VEGA_SCALE_PROPERTIES = keys(NON_TYPE_DOMAIN_RANGE_VEGA_SCALE_PROPERTY_INDEX);\\n  function scaleTypeSupportProperty(scaleType, propName) {\\n    switch (propName) {\\n      case 'type':\\n      case 'domain':\\n      case 'reverse':\\n      case 'range':\\n        return true;\\n\\n      case 'scheme':\\n      case 'interpolate':\\n        return !contains(['point', 'band', 'identity'], scaleType);\\n\\n      case 'bins':\\n        return !contains(['point', 'band', 'identity', 'ordinal'], scaleType);\\n\\n      case 'round':\\n        return isContinuousToContinuous(scaleType) || scaleType === 'band' || scaleType === 'point';\\n\\n      case 'padding':\\n      case 'rangeMin':\\n      case 'rangeMax':\\n        return isContinuousToContinuous(scaleType) || contains(['point', 'band'], scaleType);\\n\\n      case 'paddingOuter':\\n      case 'align':\\n        return contains(['point', 'band'], scaleType);\\n\\n      case 'paddingInner':\\n        return scaleType === 'band';\\n\\n      case 'domainMax':\\n      case 'domainMid':\\n      case 'domainMin':\\n      case 'clamp':\\n        return isContinuousToContinuous(scaleType);\\n\\n      case 'nice':\\n        return isContinuousToContinuous(scaleType) || scaleType === 'quantize' || scaleType === 'threshold';\\n\\n      case 'exponent':\\n        return scaleType === 'pow';\\n\\n      case 'base':\\n        return scaleType === 'log';\\n\\n      case 'constant':\\n        return scaleType === 'symlog';\\n\\n      case 'zero':\\n        return hasContinuousDomain(scaleType) && !contains(['log', // log scale cannot have zero value\\n        'time', 'utc', // zero is not meaningful for time\\n        'threshold', // threshold requires custom domain so zero does not matter\\n        'quantile' // quantile depends on distribution so zero does not matter\\n        ], scaleType);\\n    }\\n  }\\n  /**\\n   * Returns undefined if the input channel supports the input scale property name\\n   */\\n\\n  function channelScalePropertyIncompatability(channel, propName) {\\n    switch (propName) {\\n      case 'interpolate':\\n      case 'scheme':\\n      case 'domainMid':\\n        if (!isColorChannel(channel)) {\\n          return cannotUseScalePropertyWithNonColor(channel);\\n        }\\n\\n        return undefined;\\n\\n      case 'align':\\n      case 'type':\\n      case 'bins':\\n      case 'domain':\\n      case 'domainMax':\\n      case 'domainMin':\\n      case 'range':\\n      case 'base':\\n      case 'exponent':\\n      case 'constant':\\n      case 'nice':\\n      case 'padding':\\n      case 'paddingInner':\\n      case 'paddingOuter':\\n      case 'rangeMax':\\n      case 'rangeMin':\\n      case 'reverse':\\n      case 'round':\\n      case 'clamp':\\n      case 'zero':\\n        return undefined;\\n      // GOOD!\\n    }\\n  }\\n  function scaleTypeSupportDataType(specifiedType, fieldDefType) {\\n    if (contains([ORDINAL, NOMINAL], fieldDefType)) {\\n      return specifiedType === undefined || hasDiscreteDomain(specifiedType);\\n    } else if (fieldDefType === TEMPORAL) {\\n      return contains([ScaleType.TIME, ScaleType.UTC, undefined], specifiedType);\\n    } else if (fieldDefType === QUANTITATIVE) {\\n      return contains([ScaleType.LOG, ScaleType.POW, ScaleType.SQRT, ScaleType.SYMLOG, ScaleType.QUANTILE, ScaleType.QUANTIZE, ScaleType.THRESHOLD, ScaleType.LINEAR, undefined], specifiedType);\\n    }\\n\\n    return true;\\n  }\\n  function channelSupportScaleType(channel, scaleType) {\\n    if (!isScaleChannel(channel)) {\\n      return false;\\n    }\\n\\n    switch (channel) {\\n      case X:\\n      case Y:\\n      case THETA:\\n      case RADIUS:\\n        return isContinuousToContinuous(scaleType) || contains(['band', 'point'], scaleType);\\n\\n      case SIZE: // TODO: size and opacity can support ordinal with more modification\\n\\n      case STROKEWIDTH:\\n      case OPACITY:\\n      case FILLOPACITY:\\n      case STROKEOPACITY:\\n      case ANGLE:\\n        // Although it generally doesn't make sense to use band with size and opacity,\\n        // it can also work since we use band: 0.5 to get midpoint.\\n        return isContinuousToContinuous(scaleType) || isContinuousToDiscrete(scaleType) || contains(['band', 'point', 'ordinal'], scaleType);\\n\\n      case COLOR:\\n      case FILL:\\n      case STROKE:\\n        return scaleType !== 'band';\\n      // band does not make sense with color\\n\\n      case STROKEDASH:\\n        return scaleType === 'ordinal' || isContinuousToDiscrete(scaleType);\\n\\n      case SHAPE:\\n        return scaleType === 'ordinal';\\n      // shape = lookup only\\n    }\\n  }\\n\\n  function isExprRef(o) {\\n    return o && !!o['expr'];\\n  }\\n  function replaceExprRefInIndex(index) {\\n    const props = keys(index || {});\\n    const newIndex = {};\\n\\n    for (const prop of props) {\\n      newIndex[prop] = signalRefOrValue(index[prop]);\\n    }\\n\\n    return newIndex;\\n  }\\n\\n  /**\\n   * All types of primitive marks.\\n   */\\n  const Mark = {\\n    arc: 'arc',\\n    area: 'area',\\n    bar: 'bar',\\n    image: 'image',\\n    line: 'line',\\n    point: 'point',\\n    rect: 'rect',\\n    rule: 'rule',\\n    text: 'text',\\n    tick: 'tick',\\n    trail: 'trail',\\n    circle: 'circle',\\n    square: 'square',\\n    geoshape: 'geoshape'\\n  };\\n  const ARC = Mark.arc;\\n  const AREA = Mark.area;\\n  const BAR = Mark.bar;\\n  const IMAGE = Mark.image;\\n  const LINE = Mark.line;\\n  const POINT = Mark.point;\\n  const RECT = Mark.rect;\\n  const RULE = Mark.rule;\\n  const TEXT$1 = Mark.text;\\n  const TICK = Mark.tick;\\n  const TRAIL = Mark.trail;\\n  const CIRCLE = Mark.circle;\\n  const SQUARE = Mark.square;\\n  const GEOSHAPE = Mark.geoshape;\\n  function isPathMark(m) {\\n    return contains(['line', 'area', 'trail'], m);\\n  }\\n  function isRectBasedMark(m) {\\n    return contains(['rect', 'bar', 'image', 'arc'\\n    /* arc is rect/interval in polar coordinate */\\n    ], m);\\n  }\\n  const PRIMITIVE_MARKS = keys(Mark);\\n  function isMarkDef(mark) {\\n    return mark['type'];\\n  }\\n  const PRIMITIVE_MARK_INDEX = toSet(PRIMITIVE_MARKS);\\n  const STROKE_CONFIG = ['stroke', 'strokeWidth', 'strokeDash', 'strokeDashOffset', 'strokeOpacity', 'strokeJoin', 'strokeMiterLimit'];\\n  const FILL_CONFIG = ['fill', 'fillOpacity'];\\n  const FILL_STROKE_CONFIG = [...STROKE_CONFIG, ...FILL_CONFIG];\\n  const VL_ONLY_MARK_CONFIG_INDEX = {\\n    color: 1,\\n    filled: 1,\\n    invalid: 1,\\n    order: 1,\\n    radius2: 1,\\n    theta2: 1,\\n    timeUnitBand: 1,\\n    timeUnitBandPosition: 1\\n  };\\n  const VL_ONLY_MARK_CONFIG_PROPERTIES = keys(VL_ONLY_MARK_CONFIG_INDEX);\\n  const VL_ONLY_MARK_SPECIFIC_CONFIG_PROPERTY_INDEX = {\\n    area: ['line', 'point'],\\n    bar: ['binSpacing', 'continuousBandSize', 'discreteBandSize'],\\n    rect: ['binSpacing', 'continuousBandSize', 'discreteBandSize'],\\n    line: ['point'],\\n    tick: ['bandSize', 'thickness']\\n  };\\n  const defaultMarkConfig = {\\n    color: '#4c78a8',\\n    invalid: 'filter',\\n    timeUnitBand: 1\\n  }; // TODO: replace with MarkConfigMixins[Mark] once https://github.com/vega/ts-json-schema-generator/issues/344 is fixed\\n\\n  const MARK_CONFIG_INDEX = {\\n    mark: 1,\\n    arc: 1,\\n    area: 1,\\n    bar: 1,\\n    circle: 1,\\n    image: 1,\\n    line: 1,\\n    point: 1,\\n    rect: 1,\\n    rule: 1,\\n    square: 1,\\n    text: 1,\\n    tick: 1,\\n    trail: 1,\\n    geoshape: 1\\n  };\\n  const MARK_CONFIGS = keys(MARK_CONFIG_INDEX);\\n  const BAR_CORNER_RADIUS_INDEX = {\\n    horizontal: ['cornerRadiusTopRight', 'cornerRadiusBottomRight'],\\n    vertical: ['cornerRadiusTopLeft', 'cornerRadiusTopRight']\\n  };\\n  const DEFAULT_RECT_BAND_SIZE = 5;\\n  const defaultBarConfig = {\\n    binSpacing: 1,\\n    continuousBandSize: DEFAULT_RECT_BAND_SIZE,\\n    timeUnitBandPosition: 0.5\\n  };\\n  const defaultRectConfig = {\\n    binSpacing: 0,\\n    continuousBandSize: DEFAULT_RECT_BAND_SIZE,\\n    timeUnitBandPosition: 0.5\\n  };\\n  const defaultTickConfig = {\\n    thickness: 1\\n  };\\n  function getMarkType(m) {\\n    return isMarkDef(m) ? m.type : m;\\n  }\\n\\n  /**\\n   * Utility files for producing Vega ValueRef for marks\\n   */\\n  function midPointRefWithPositionInvalidTest(params) {\\n    const {\\n      channel,\\n      channelDef,\\n      markDef,\\n      scale,\\n      config\\n    } = params;\\n    const ref = midPoint(params); // Wrap to check if the positional value is invalid, if so, plot the point on the min value\\n\\n    if ( // Only this for field def without counting aggregate (as count wouldn't be null)\\n    isFieldDef(channelDef) && !isCountingAggregateOp(channelDef.aggregate) && // and only for continuous scale without zero (otherwise, null / invalid will be interpreted as zero, which doesn't cause layout problem)\\n    scale && isContinuousToContinuous(scale.get('type')) && scale.get('zero') === false) {\\n      return wrapPositionInvalidTest({\\n        fieldDef: channelDef,\\n        channel,\\n        markDef,\\n        ref,\\n        config\\n      });\\n    }\\n\\n    return ref;\\n  }\\n  function wrapPositionInvalidTest({\\n    fieldDef,\\n    channel,\\n    markDef,\\n    ref,\\n    config\\n  }) {\\n    if (isPathMark(markDef.type)) {\\n      // path mark already use defined to skip points, no need to do it here.\\n      return ref;\\n    }\\n\\n    const invalid = getMarkPropOrConfig('invalid', markDef, config);\\n\\n    if (invalid === null) {\\n      // if there is no invalid filter, don't do the invalid test\\n      return ref;\\n    }\\n\\n    return [fieldInvalidTestValueRef(fieldDef, channel), ref];\\n  }\\n  function fieldInvalidTestValueRef(fieldDef, channel) {\\n    const test = fieldInvalidPredicate(fieldDef, true);\\n    const mainChannel = getMainRangeChannel(channel); // we can cast here as the output can't be other things.\\n\\n    const zeroValueRef = mainChannel === 'y' ? {\\n      field: {\\n        group: 'height'\\n      }\\n    } : // x / angle / radius can all use 0\\n    {\\n      value: 0\\n    };\\n    return {\\n      test,\\n      ...zeroValueRef\\n    };\\n  }\\n  function fieldInvalidPredicate(field, invalid = true) {\\n    return fieldValidPredicate(isString(field) ? field : vgField(field, {\\n      expr: 'datum'\\n    }), !invalid);\\n  }\\n  function datumDefToExpr(datumDef) {\\n    const {\\n      datum\\n    } = datumDef;\\n\\n    if (isDateTime(datum)) {\\n      return dateTimeToExpr(datum);\\n    }\\n\\n    return \\\"\\\".concat(JSON.stringify(datum));\\n  }\\n  function valueRefForFieldOrDatumDef(fieldDef, scaleName, opt, encode) {\\n    const ref = {};\\n\\n    if (scaleName) {\\n      ref.scale = scaleName;\\n    }\\n\\n    if (isDatumDef(fieldDef)) {\\n      const {\\n        datum\\n      } = fieldDef;\\n\\n      if (isDateTime(datum)) {\\n        ref.signal = dateTimeToExpr(datum);\\n      } else if (isSignalRef(datum)) {\\n        ref.signal = datum.signal;\\n      } else if (isExprRef(datum)) {\\n        ref.signal = datum.expr;\\n      } else {\\n        ref.value = datum;\\n      }\\n    } else {\\n      ref.field = vgField(fieldDef, opt);\\n    }\\n\\n    if (encode) {\\n      const {\\n        offset,\\n        band\\n      } = encode;\\n\\n      if (offset) {\\n        ref.offset = offset;\\n      }\\n\\n      if (band) {\\n        ref.band = band;\\n      }\\n    }\\n\\n    return ref;\\n  }\\n  /**\\n   * Signal that returns the middle of a bin from start and end field. Should only be used with x and y.\\n   */\\n\\n  function interpolatedSignalRef({\\n    scaleName,\\n    fieldOrDatumDef,\\n    fieldOrDatumDef2,\\n    offset,\\n    startSuffix,\\n    band = 0.5\\n  }) {\\n    const expr = 0 < band && band < 1 ? 'datum' : undefined;\\n    const start = vgField(fieldOrDatumDef, {\\n      expr,\\n      suffix: startSuffix\\n    });\\n    const end = fieldOrDatumDef2 !== undefined ? vgField(fieldOrDatumDef2, {\\n      expr\\n    }) : vgField(fieldOrDatumDef, {\\n      suffix: 'end',\\n      expr\\n    });\\n    const ref = {};\\n\\n    if (band === 0 || band === 1) {\\n      ref.scale = scaleName;\\n      const val = band === 0 ? start : end;\\n      ref.field = val;\\n    } else {\\n      const datum = \\\"\\\".concat(band, \\\" * \\\").concat(start, \\\" + \\\").concat(1 - band, \\\" * \\\").concat(end);\\n      ref.signal = \\\"scale(\\\\\\\"\\\".concat(scaleName, \\\"\\\\\\\", \\\").concat(datum, \\\")\\\");\\n    }\\n\\n    if (offset) {\\n      ref.offset = offset;\\n    }\\n\\n    return ref;\\n  }\\n\\n  /**\\n   * @returns {VgValueRef} Value Ref for xc / yc or mid point for other channels.\\n   */\\n  function midPoint({\\n    channel,\\n    channelDef,\\n    channel2Def,\\n    markDef,\\n    config,\\n    scaleName,\\n    scale,\\n    stack,\\n    offset,\\n    defaultRef,\\n    band\\n  }) {\\n    // TODO: datum support\\n    if (channelDef) {\\n      /* istanbul ignore else */\\n      if (isFieldOrDatumDef(channelDef)) {\\n        var _ref, _band2;\\n\\n        if (isTypedFieldDef(channelDef)) {\\n          var _band;\\n\\n          band = (_band = band) !== null && _band !== void 0 ? _band : getBand({\\n            channel,\\n            fieldDef: channelDef,\\n            fieldDef2: channel2Def,\\n            markDef,\\n            stack,\\n            config,\\n            isMidPoint: true\\n          });\\n          const {\\n            bin,\\n            timeUnit,\\n            type\\n          } = channelDef;\\n\\n          if (isBinning(bin) || band && timeUnit && type === TEMPORAL) {\\n            // Use middle only for x an y to place marks in the center between start and end of the bin range.\\n            // We do not use the mid point for other channels (e.g. size) so that properties of legends and marks match.\\n            if (stack && stack.impute) {\\n              // For stack, we computed bin_mid so we can impute.\\n              return valueRefForFieldOrDatumDef(channelDef, scaleName, {\\n                binSuffix: 'mid'\\n              }, {\\n                offset\\n              });\\n            }\\n\\n            if (band) {\\n              // if band = 0, no need to call interpolation\\n              // For non-stack, we can just calculate bin mid on the fly using signal.\\n              return interpolatedSignalRef({\\n                scaleName,\\n                fieldOrDatumDef: channelDef,\\n                band,\\n                offset\\n              });\\n            }\\n\\n            return valueRefForFieldOrDatumDef(channelDef, scaleName, binRequiresRange(channelDef, channel) ? {\\n              binSuffix: 'range'\\n            } : {}, {\\n              offset\\n            });\\n          } else if (isBinned(bin)) {\\n            if (isFieldDef(channel2Def)) {\\n              return interpolatedSignalRef({\\n                scaleName,\\n                fieldOrDatumDef: channelDef,\\n                fieldOrDatumDef2: channel2Def,\\n                band,\\n                offset\\n              });\\n            } else {\\n              const channel2 = channel === X ? X2 : Y2;\\n              warn(channelRequiredForBinned(channel2));\\n            }\\n          }\\n        }\\n\\n        const scaleType = scale === null || scale === void 0 ? void 0 : scale.get('type');\\n        return valueRefForFieldOrDatumDef(channelDef, scaleName, hasDiscreteDomain(scaleType) ? {\\n          binSuffix: 'range'\\n        } : {}, // no need for bin suffix if there is no scale\\n        {\\n          offset,\\n          // For band, to get mid point, need to offset by half of the band\\n          band: scaleType === 'band' ? (_ref = (_band2 = band) !== null && _band2 !== void 0 ? _band2 : channelDef.band) !== null && _ref !== void 0 ? _ref : 0.5 : undefined\\n        });\\n      } else if (isValueDef(channelDef)) {\\n        const value = channelDef.value;\\n        const offsetMixins = offset ? {\\n          offset\\n        } : {};\\n        return { ...widthHeightValueOrSignalRef(channel, value),\\n          ...offsetMixins\\n        };\\n      } // If channelDef is neither field def or value def, it's a condition-only def.\\n      // In such case, we will use default ref.\\n\\n    }\\n\\n    if (isFunction(defaultRef)) {\\n      defaultRef = defaultRef();\\n    }\\n\\n    if (defaultRef) {\\n      // for non-position, ref could be undefined.\\n      return { ...defaultRef,\\n        // only include offset when it is non-zero (zero = no offset)\\n        ...(offset ? {\\n          offset\\n        } : {})\\n      };\\n    }\\n\\n    return defaultRef;\\n  }\\n  /**\\n   * Convert special \\\"width\\\" and \\\"height\\\" values in Vega-Lite into Vega value ref.\\n   */\\n\\n  function widthHeightValueOrSignalRef(channel, value) {\\n    if (contains(['x', 'x2'], channel) && value === 'width') {\\n      return {\\n        field: {\\n          group: 'width'\\n        }\\n      };\\n    } else if (contains(['y', 'y2'], channel) && value === 'height') {\\n      return {\\n        field: {\\n          group: 'height'\\n        }\\n      };\\n    }\\n\\n    return signalOrValueRef(value);\\n  }\\n\\n  function isCustomFormatType(formatType) {\\n    return formatType && formatType !== 'number' && formatType !== 'time';\\n  }\\n\\n  function customFormatExpr(formatType, field, format) {\\n    return \\\"\\\".concat(formatType, \\\"(\\\").concat(field).concat(format ? \\\", \\\".concat(JSON.stringify(format)) : '', \\\")\\\");\\n  }\\n\\n  const BIN_RANGE_DELIMITER = ' \\\\u2013 ';\\n  function formatSignalRef({\\n    fieldOrDatumDef,\\n    format,\\n    formatType,\\n    expr,\\n    normalizeStack,\\n    config\\n  }) {\\n    if (isCustomFormatType(formatType)) {\\n      return formatCustomType({\\n        fieldOrDatumDef,\\n        format,\\n        formatType,\\n        expr,\\n        config\\n      });\\n    }\\n\\n    const field = fieldToFormat(fieldOrDatumDef, expr, normalizeStack);\\n\\n    if (isFieldOrDatumDefForTimeFormat(fieldOrDatumDef)) {\\n      var _normalizeTimeUnit, _fieldOrDatumDef$scal;\\n\\n      const signal = timeFormatExpression(field, isFieldDef(fieldOrDatumDef) ? (_normalizeTimeUnit = normalizeTimeUnit(fieldOrDatumDef.timeUnit)) === null || _normalizeTimeUnit === void 0 ? void 0 : _normalizeTimeUnit.unit : undefined, format, config.timeFormat, isScaleFieldDef(fieldOrDatumDef) && ((_fieldOrDatumDef$scal = fieldOrDatumDef.scale) === null || _fieldOrDatumDef$scal === void 0 ? void 0 : _fieldOrDatumDef$scal.type) === ScaleType.UTC);\\n      return signal ? {\\n        signal\\n      } : undefined;\\n    }\\n\\n    format = numberFormat(channelDefType(fieldOrDatumDef), format, config);\\n\\n    if (isFieldDef(fieldOrDatumDef) && isBinning(fieldOrDatumDef.bin)) {\\n      const endField = vgField(fieldOrDatumDef, {\\n        expr,\\n        binSuffix: 'end'\\n      });\\n      return {\\n        signal: binFormatExpression(field, endField, format, formatType, config)\\n      };\\n    } else if (format || channelDefType(fieldOrDatumDef) === 'quantitative') {\\n      return {\\n        signal: \\\"\\\".concat(formatExpr(field, format))\\n      };\\n    } else {\\n      return {\\n        signal: \\\"isValid(\\\".concat(field, \\\") ? \\\").concat(field, \\\" : \\\\\\\"\\\\\\\"+\\\").concat(field)\\n      };\\n    }\\n  }\\n\\n  function fieldToFormat(fieldOrDatumDef, expr, normalizeStack) {\\n    if (isFieldDef(fieldOrDatumDef)) {\\n      if (normalizeStack) {\\n        return \\\"\\\".concat(vgField(fieldOrDatumDef, {\\n          expr,\\n          suffix: 'end'\\n        }), \\\"-\\\").concat(vgField(fieldOrDatumDef, {\\n          expr,\\n          suffix: 'start'\\n        }));\\n      } else {\\n        return vgField(fieldOrDatumDef, {\\n          expr\\n        });\\n      }\\n    } else {\\n      return datumDefToExpr(fieldOrDatumDef);\\n    }\\n  }\\n\\n  function formatCustomType({\\n    fieldOrDatumDef,\\n    format,\\n    formatType,\\n    expr,\\n    normalizeStack,\\n    config,\\n    field\\n  }) {\\n    var _field;\\n\\n    field = (_field = field) !== null && _field !== void 0 ? _field : fieldToFormat(fieldOrDatumDef, expr, normalizeStack);\\n\\n    if (isFieldDef(fieldOrDatumDef) && isBinning(fieldOrDatumDef.bin)) {\\n      const endField = vgField(fieldOrDatumDef, {\\n        expr,\\n        binSuffix: 'end'\\n      });\\n      return {\\n        signal: binFormatExpression(field, endField, format, formatType, config)\\n      };\\n    }\\n\\n    return {\\n      signal: customFormatExpr(formatType, field, format)\\n    };\\n  }\\n  function guideFormat(fieldOrDatumDef, type, format, formatType, config, omitTimeFormatConfig) // axis doesn't use config.timeFormat\\n  {\\n    if (isCustomFormatType(formatType)) {\\n      return undefined; // handled in encode block\\n    }\\n\\n    if (isFieldOrDatumDefForTimeFormat(fieldOrDatumDef)) {\\n      var _normalizeTimeUnit2;\\n\\n      const timeUnit = isFieldDef(fieldOrDatumDef) ? (_normalizeTimeUnit2 = normalizeTimeUnit(fieldOrDatumDef.timeUnit)) === null || _normalizeTimeUnit2 === void 0 ? void 0 : _normalizeTimeUnit2.unit : undefined;\\n      return timeFormat(format, timeUnit, config, omitTimeFormatConfig);\\n    }\\n\\n    return numberFormat(type, format, config);\\n  }\\n  function guideFormatType(formatType, fieldOrDatumDef, scaleType) {\\n    if (formatType && (isSignalRef(formatType) || formatType === 'number' || formatType === 'time')) {\\n      return formatType;\\n    }\\n\\n    if (isFieldOrDatumDefForTimeFormat(fieldOrDatumDef) && scaleType !== 'time' && scaleType !== 'utc') {\\n      return 'time';\\n    }\\n\\n    return undefined;\\n  }\\n  /**\\n   * Returns number format for a fieldDef.\\n   */\\n\\n  function numberFormat(type, specifiedFormat, config) {\\n    // Specified format in axis/legend has higher precedence than fieldDef.format\\n    if (isString(specifiedFormat)) {\\n      return specifiedFormat;\\n    }\\n\\n    if (type === QUANTITATIVE) {\\n      // we only apply the default if the field is quantitative\\n      return config.numberFormat;\\n    }\\n\\n    return undefined;\\n  }\\n  /**\\n   * Returns time format for a fieldDef for use in guides.\\n   */\\n\\n  function timeFormat(specifiedFormat, timeUnit, config, omitTimeFormatConfig) {\\n    if (specifiedFormat) {\\n      return specifiedFormat;\\n    }\\n\\n    if (timeUnit) {\\n      return {\\n        signal: timeUnitSpecifierExpression(timeUnit)\\n      };\\n    }\\n\\n    return omitTimeFormatConfig ? undefined : config.timeFormat;\\n  }\\n\\n  function formatExpr(field, format) {\\n    return \\\"format(\\\".concat(field, \\\", \\\\\\\"\\\").concat(format || '', \\\"\\\\\\\")\\\");\\n  }\\n\\n  function binNumberFormatExpr(field, format, formatType, config) {\\n    var _ref;\\n\\n    if (isCustomFormatType(formatType)) {\\n      return customFormatExpr(formatType, field, format);\\n    }\\n\\n    return formatExpr(field, (_ref = isString(format) ? format : undefined) !== null && _ref !== void 0 ? _ref : config.numberFormat);\\n  }\\n\\n  function binFormatExpression(startField, endField, format, formatType, config) {\\n    const start = binNumberFormatExpr(startField, format, formatType, config);\\n    const end = binNumberFormatExpr(endField, format, formatType, config);\\n    return \\\"\\\".concat(fieldValidPredicate(startField, false), \\\" ? \\\\\\\"null\\\\\\\" : \\\").concat(start, \\\" + \\\\\\\"\\\").concat(BIN_RANGE_DELIMITER, \\\"\\\\\\\" + \\\").concat(end);\\n  }\\n  /**\\n   * Returns the time expression used for axis/legend labels or text mark for a temporal field\\n   */\\n\\n  function timeFormatExpression(field, timeUnit, format, rawTimeFormat, // should be provided only for actual text and headers, not axis/legend labels\\n  isUTCScale) {\\n    if (!timeUnit || format) {\\n      // If there is no time unit, or if user explicitly specifies format for axis/legend/text.\\n      format = isString(format) ? format : rawTimeFormat; // only use provided timeFormat if there is no timeUnit.\\n\\n      return \\\"\\\".concat(isUTCScale ? 'utc' : 'time', \\\"Format(\\\").concat(field, \\\", '\\\").concat(format, \\\"')\\\");\\n    } else {\\n      return formatExpression(timeUnit, field, isUTCScale);\\n    }\\n  }\\n\\n  const DEFAULT_SORT_OP = 'min';\\n  /**\\n   * A sort definition for sorting a discrete scale in an encoding field definition.\\n   */\\n\\n  const SORT_BY_CHANNEL_INDEX = {\\n    x: 1,\\n    y: 1,\\n    color: 1,\\n    fill: 1,\\n    stroke: 1,\\n    strokeWidth: 1,\\n    size: 1,\\n    shape: 1,\\n    fillOpacity: 1,\\n    strokeOpacity: 1,\\n    opacity: 1,\\n    text: 1\\n  };\\n  function isSortByChannel(c) {\\n    return c in SORT_BY_CHANNEL_INDEX;\\n  }\\n  function isSortByEncoding(sort) {\\n    return !!sort && !!sort['encoding'];\\n  }\\n  function isSortField(sort) {\\n    return !!sort && (sort['op'] === 'count' || !!sort['field']);\\n  }\\n  function isSortArray(sort) {\\n    return !!sort && isArray(sort);\\n  }\\n\\n  function isFacetMapping(f) {\\n    return 'row' in f || 'column' in f;\\n  }\\n  /**\\n   * Facet mapping for encoding macro\\n   */\\n\\n  function isFacetFieldDef(channelDef) {\\n    return !!channelDef && 'header' in channelDef;\\n  }\\n  /**\\n   * Base interface for a facet specification.\\n   */\\n\\n  function isFacetSpec(spec) {\\n    return 'facet' in spec;\\n  }\\n\\n  function isConditionalSelection(c) {\\n    return c['selection'];\\n  }\\n  function isRepeatRef(field) {\\n    return field && !isString(field) && 'repeat' in field;\\n  }\\n  /** @@hidden */\\n\\n  function toFieldDefBase(fieldDef) {\\n    const {\\n      field,\\n      timeUnit,\\n      bin,\\n      aggregate\\n    } = fieldDef;\\n    return { ...(timeUnit ? {\\n        timeUnit\\n      } : {}),\\n      ...(bin ? {\\n        bin\\n      } : {}),\\n      ...(aggregate ? {\\n        aggregate\\n      } : {}),\\n      field\\n    };\\n  }\\n  function isSortableFieldDef(fieldDef) {\\n    return 'sort' in fieldDef;\\n  }\\n  function getBand({\\n    channel,\\n    fieldDef,\\n    fieldDef2,\\n    markDef: mark,\\n    stack,\\n    config,\\n    isMidPoint\\n  }) {\\n    if (isFieldOrDatumDef(fieldDef) && fieldDef.band !== undefined) {\\n      return fieldDef.band;\\n    }\\n\\n    if (isFieldDef(fieldDef)) {\\n      const {\\n        timeUnit,\\n        bin\\n      } = fieldDef;\\n\\n      if (timeUnit && !fieldDef2) {\\n        if (isMidPoint) {\\n          return getMarkConfig('timeUnitBandPosition', mark, config);\\n        } else {\\n          return isRectBasedMark(mark.type) ? getMarkConfig('timeUnitBand', mark, config) : 0;\\n        }\\n      } else if (isBinning(bin)) {\\n        return isRectBasedMark(mark.type) && !isMidPoint ? 1 : 0.5;\\n      }\\n    }\\n\\n    if ((stack === null || stack === void 0 ? void 0 : stack.fieldChannel) === channel && isMidPoint) {\\n      return 0.5;\\n    }\\n\\n    return undefined;\\n  }\\n  function hasBand(channel, fieldDef, fieldDef2, stack, markDef, config) {\\n    if (isBinning(fieldDef.bin) || fieldDef.timeUnit && isTypedFieldDef(fieldDef) && fieldDef.type === 'temporal') {\\n      return !!getBand({\\n        channel,\\n        fieldDef,\\n        fieldDef2,\\n        stack,\\n        markDef,\\n        config\\n      });\\n    }\\n\\n    return false;\\n  }\\n  /**\\n   * Field definition of a mark property, which can contain a legend.\\n   */\\n\\n  function isConditionalDef(channelDef) {\\n    return !!channelDef && 'condition' in channelDef;\\n  }\\n  /**\\n   * Return if a channelDef is a ConditionalValueDef with ConditionFieldDef\\n   */\\n\\n  function hasConditionalFieldDef(channelDef) {\\n    const condition = channelDef && channelDef['condition'];\\n    return !!condition && !isArray(condition) && isFieldDef(condition);\\n  }\\n  function hasConditionalFieldOrDatumDef(channelDef) {\\n    const condition = channelDef && channelDef['condition'];\\n    return !!condition && !isArray(condition) && isFieldOrDatumDef(condition);\\n  }\\n  function hasConditionalValueDef(channelDef) {\\n    const condition = channelDef && channelDef['condition'];\\n    return !!condition && (isArray(condition) || isValueDef(condition));\\n  }\\n  function isFieldDef(channelDef) {\\n    // TODO: we can't use field in channelDef here as it's somehow failing runtime test\\n    return !!channelDef && (!!channelDef['field'] || channelDef['aggregate'] === 'count');\\n  }\\n  function channelDefType(channelDef) {\\n    return channelDef && channelDef['type'];\\n  }\\n  function isDatumDef(channelDef) {\\n    return !!channelDef && 'datum' in channelDef;\\n  }\\n  function isContinuousFieldOrDatumDef(cd) {\\n    // TODO: make datum support DateTime object\\n    return isTypedFieldDef(cd) && isContinuous(cd) || isNumericDataDef(cd);\\n  }\\n  function isNumericDataDef(cd) {\\n    return isDatumDef(cd) && isNumber(cd.datum);\\n  }\\n  function isFieldOrDatumDef(channelDef) {\\n    return isFieldDef(channelDef) || isDatumDef(channelDef);\\n  }\\n  function isTypedFieldDef(channelDef) {\\n    return !!channelDef && ('field' in channelDef || channelDef['aggregate'] === 'count') && 'type' in channelDef;\\n  }\\n  function isValueDef(channelDef) {\\n    return channelDef && 'value' in channelDef && 'value' in channelDef;\\n  }\\n  function isScaleFieldDef(channelDef) {\\n    return !!channelDef && ('scale' in channelDef || 'sort' in channelDef);\\n  }\\n  function isPositionFieldOrDatumDef(channelDef) {\\n    return channelDef && ('axis' in channelDef || 'stack' in channelDef || 'impute' in channelDef);\\n  }\\n  function isMarkPropFieldOrDatumDef(channelDef) {\\n    return !!channelDef && 'legend' in channelDef;\\n  }\\n  function isStringFieldOrDatumDef(channelDef) {\\n    return !!channelDef && ('format' in channelDef || 'formatType' in channelDef);\\n  }\\n  function toStringFieldDef(fieldDef) {\\n    // omit properties that don't exist in string field defs\\n    return omit(fieldDef, ['legend', 'axis', 'header', 'scale']);\\n  }\\n\\n  function isOpFieldDef(fieldDef) {\\n    return 'op' in fieldDef;\\n  }\\n  /**\\n   * Get a Vega field reference from a Vega-Lite field def.\\n   */\\n\\n\\n  function vgField(fieldDef, opt = {}) {\\n    let field = fieldDef.field;\\n    const prefix = opt.prefix;\\n    let suffix = opt.suffix;\\n    let argAccessor = ''; // for accessing argmin/argmax field at the end without getting escaped\\n\\n    if (isCount(fieldDef)) {\\n      field = internalField('count');\\n    } else {\\n      let fn;\\n\\n      if (!opt.nofn) {\\n        if (isOpFieldDef(fieldDef)) {\\n          fn = fieldDef.op;\\n        } else {\\n          const {\\n            bin,\\n            aggregate,\\n            timeUnit\\n          } = fieldDef;\\n\\n          if (isBinning(bin)) {\\n            var _opt$binSuffix, _opt$suffix;\\n\\n            fn = binToString(bin);\\n            suffix = ((_opt$binSuffix = opt.binSuffix) !== null && _opt$binSuffix !== void 0 ? _opt$binSuffix : '') + ((_opt$suffix = opt.suffix) !== null && _opt$suffix !== void 0 ? _opt$suffix : '');\\n          } else if (aggregate) {\\n            if (isArgmaxDef(aggregate)) {\\n              argAccessor = \\\"[\\\\\\\"\\\".concat(field, \\\"\\\\\\\"]\\\");\\n              field = \\\"argmax_\\\".concat(aggregate.argmax);\\n            } else if (isArgminDef(aggregate)) {\\n              argAccessor = \\\"[\\\\\\\"\\\".concat(field, \\\"\\\\\\\"]\\\");\\n              field = \\\"argmin_\\\".concat(aggregate.argmin);\\n            } else {\\n              fn = String(aggregate);\\n            }\\n          } else if (timeUnit) {\\n            var _opt$suffix2;\\n\\n            fn = timeUnitToString(timeUnit);\\n            suffix = (!contains(['range', 'mid'], opt.binSuffix) && opt.binSuffix || '') + ((_opt$suffix2 = opt.suffix) !== null && _opt$suffix2 !== void 0 ? _opt$suffix2 : '');\\n          }\\n        }\\n      }\\n\\n      if (fn) {\\n        field = field ? \\\"\\\".concat(fn, \\\"_\\\").concat(field) : fn;\\n      }\\n    }\\n\\n    if (suffix) {\\n      field = \\\"\\\".concat(field, \\\"_\\\").concat(suffix);\\n    }\\n\\n    if (prefix) {\\n      field = \\\"\\\".concat(prefix, \\\"_\\\").concat(field);\\n    }\\n\\n    if (opt.forAs) {\\n      return removePathFromField(field);\\n    } else if (opt.expr) {\\n      // Expression to access flattened field. No need to escape dots.\\n      return flatAccessWithDatum(field, opt.expr) + argAccessor;\\n    } else {\\n      // We flattened all fields so paths should have become dot.\\n      return replacePathInField(field) + argAccessor;\\n    }\\n  }\\n  function isDiscrete(def) {\\n    switch (def.type) {\\n      case 'nominal':\\n      case 'ordinal':\\n      case 'geojson':\\n        return true;\\n\\n      case 'quantitative':\\n        return isFieldDef(def) && !!def.bin;\\n\\n      case 'temporal':\\n        return false;\\n    }\\n\\n    throw new Error(invalidFieldType(def.type));\\n  }\\n  function isContinuous(fieldDef) {\\n    return !isDiscrete(fieldDef);\\n  }\\n  function isCount(fieldDef) {\\n    return fieldDef.aggregate === 'count';\\n  }\\n  function verbalTitleFormatter(fieldDef, config) {\\n    const {\\n      field,\\n      bin,\\n      timeUnit,\\n      aggregate\\n    } = fieldDef;\\n\\n    if (aggregate === 'count') {\\n      return config.countTitle;\\n    } else if (isBinning(bin)) {\\n      return \\\"\\\".concat(field, \\\" (binned)\\\");\\n    } else if (timeUnit) {\\n      var _normalizeTimeUnit;\\n\\n      const unit = (_normalizeTimeUnit = normalizeTimeUnit(timeUnit)) === null || _normalizeTimeUnit === void 0 ? void 0 : _normalizeTimeUnit.unit;\\n\\n      if (unit) {\\n        return \\\"\\\".concat(field, \\\" (\\\").concat(getTimeUnitParts(unit).join('-'), \\\")\\\");\\n      }\\n    } else if (aggregate) {\\n      if (isArgmaxDef(aggregate)) {\\n        return \\\"\\\".concat(field, \\\" for max \\\").concat(aggregate.argmax);\\n      } else if (isArgminDef(aggregate)) {\\n        return \\\"\\\".concat(field, \\\" for min \\\").concat(aggregate.argmin);\\n      } else {\\n        return \\\"\\\".concat(titleCase(aggregate), \\\" of \\\").concat(field);\\n      }\\n    }\\n\\n    return field;\\n  }\\n  function functionalTitleFormatter(fieldDef) {\\n    const {\\n      aggregate,\\n      bin,\\n      timeUnit,\\n      field\\n    } = fieldDef;\\n\\n    if (isArgmaxDef(aggregate)) {\\n      return \\\"\\\".concat(field, \\\" for argmax(\\\").concat(aggregate.argmax, \\\")\\\");\\n    } else if (isArgminDef(aggregate)) {\\n      return \\\"\\\".concat(field, \\\" for argmin(\\\").concat(aggregate.argmin, \\\")\\\");\\n    }\\n\\n    const timeUnitParams = normalizeTimeUnit(timeUnit);\\n    const fn = aggregate || (timeUnitParams === null || timeUnitParams === void 0 ? void 0 : timeUnitParams.unit) || (timeUnitParams === null || timeUnitParams === void 0 ? void 0 : timeUnitParams.maxbins) && 'timeunit' || isBinning(bin) && 'bin';\\n\\n    if (fn) {\\n      return fn.toUpperCase() + '(' + field + ')';\\n    } else {\\n      return field;\\n    }\\n  }\\n  const defaultTitleFormatter = (fieldDef, config) => {\\n    switch (config.fieldTitle) {\\n      case 'plain':\\n        return fieldDef.field;\\n\\n      case 'functional':\\n        return functionalTitleFormatter(fieldDef);\\n\\n      default:\\n        return verbalTitleFormatter(fieldDef, config);\\n    }\\n  };\\n  let titleFormatter = defaultTitleFormatter;\\n  function setTitleFormatter(formatter) {\\n    titleFormatter = formatter;\\n  }\\n  function resetTitleFormatter() {\\n    setTitleFormatter(defaultTitleFormatter);\\n  }\\n  function title(fieldOrDatumDef, config, {\\n    allowDisabling,\\n    includeDefault = true\\n  }) {\\n    var _getGuide;\\n\\n    const guideTitle = (_getGuide = getGuide(fieldOrDatumDef)) === null || _getGuide === void 0 ? void 0 : _getGuide.title;\\n\\n    if (!isFieldDef(fieldOrDatumDef)) {\\n      return guideTitle;\\n    }\\n\\n    const fieldDef = fieldOrDatumDef;\\n    const def = includeDefault ? defaultTitle(fieldDef, config) : undefined;\\n\\n    if (allowDisabling) {\\n      return getFirstDefined(guideTitle, fieldDef.title, def);\\n    } else {\\n      var _ref;\\n\\n      return (_ref = guideTitle !== null && guideTitle !== void 0 ? guideTitle : fieldDef.title) !== null && _ref !== void 0 ? _ref : def;\\n    }\\n  }\\n  function getGuide(fieldDef) {\\n    if (isPositionFieldOrDatumDef(fieldDef) && fieldDef.axis) {\\n      return fieldDef.axis;\\n    } else if (isMarkPropFieldOrDatumDef(fieldDef) && fieldDef.legend) {\\n      return fieldDef.legend;\\n    } else if (isFacetFieldDef(fieldDef) && fieldDef.header) {\\n      return fieldDef.header;\\n    }\\n\\n    return undefined;\\n  }\\n  function defaultTitle(fieldDef, config) {\\n    return titleFormatter(fieldDef, config);\\n  }\\n  function getFormatMixins(fieldDef) {\\n    if (isStringFieldOrDatumDef(fieldDef)) {\\n      const {\\n        format,\\n        formatType\\n      } = fieldDef;\\n      return {\\n        format,\\n        formatType\\n      };\\n    } else {\\n      var _getGuide2;\\n\\n      const guide = (_getGuide2 = getGuide(fieldDef)) !== null && _getGuide2 !== void 0 ? _getGuide2 : {};\\n      const {\\n        format,\\n        formatType\\n      } = guide;\\n      return {\\n        format,\\n        formatType\\n      };\\n    }\\n  }\\n  function defaultType(fieldDef, channel) {\\n    var _fieldDef$scale;\\n\\n    switch (channel) {\\n      case 'latitude':\\n      case 'longitude':\\n        return 'quantitative';\\n\\n      case 'row':\\n      case 'column':\\n      case 'facet':\\n      case 'shape':\\n      case 'strokeDash':\\n        return 'nominal';\\n\\n      case 'order':\\n        return 'ordinal';\\n    }\\n\\n    if (isSortableFieldDef(fieldDef) && isArray(fieldDef.sort)) {\\n      return 'ordinal';\\n    }\\n\\n    const {\\n      aggregate,\\n      bin,\\n      timeUnit\\n    } = fieldDef;\\n\\n    if (timeUnit) {\\n      return 'temporal';\\n    }\\n\\n    if (bin || aggregate && !isArgmaxDef(aggregate) && !isArgminDef(aggregate)) {\\n      return 'quantitative';\\n    }\\n\\n    if (isScaleFieldDef(fieldDef) && ((_fieldDef$scale = fieldDef.scale) === null || _fieldDef$scale === void 0 ? void 0 : _fieldDef$scale.type)) {\\n      switch (SCALE_CATEGORY_INDEX[fieldDef.scale.type]) {\\n        case 'numeric':\\n        case 'discretizing':\\n          return 'quantitative';\\n\\n        case 'time':\\n          return 'temporal';\\n      }\\n    }\\n\\n    return 'nominal';\\n  }\\n  /**\\n   * Returns the fieldDef -- either from the outer channelDef or from the condition of channelDef.\\n   * @param channelDef\\n   */\\n\\n  function getFieldDef(channelDef) {\\n    if (isFieldDef(channelDef)) {\\n      return channelDef;\\n    } else if (hasConditionalFieldDef(channelDef)) {\\n      return channelDef.condition;\\n    }\\n\\n    return undefined;\\n  }\\n  function getFieldOrDatumDef(channelDef) {\\n    if (isFieldOrDatumDef(channelDef)) {\\n      return channelDef;\\n    } else if (hasConditionalFieldOrDatumDef(channelDef)) {\\n      return channelDef.condition;\\n    }\\n\\n    return undefined;\\n  }\\n  /**\\n   * Convert type to full, lowercase type, or augment the fieldDef with a default type if missing.\\n   */\\n\\n  function initChannelDef(channelDef, channel, config, opt = {}) {\\n    if (isString(channelDef) || isNumber(channelDef) || isBoolean(channelDef)) {\\n      const primitiveType = isString(channelDef) ? 'string' : isNumber(channelDef) ? 'number' : 'boolean';\\n      warn(primitiveChannelDef(channel, primitiveType, channelDef));\\n      return {\\n        value: channelDef\\n      };\\n    } // If a fieldDef contains a field, we need type.\\n\\n\\n    if (isFieldOrDatumDef(channelDef)) {\\n      return initFieldOrDatumDef(channelDef, channel, config, opt);\\n    } else if (hasConditionalFieldOrDatumDef(channelDef)) {\\n      return { ...channelDef,\\n        // Need to cast as normalizeFieldDef normally return FieldDef, but here we know that it is definitely Condition<FieldDef>\\n        condition: initFieldOrDatumDef(channelDef.condition, channel, config, opt)\\n      };\\n    }\\n\\n    return channelDef;\\n  }\\n  function initFieldOrDatumDef(fd, channel, config, opt) {\\n    if (isStringFieldOrDatumDef(fd)) {\\n      const {\\n        format,\\n        formatType,\\n        ...rest\\n      } = fd;\\n\\n      if (isCustomFormatType(formatType) && !config.customFormatTypes) {\\n        warn(customFormatTypeNotAllowed(channel));\\n        return initFieldOrDatumDef(rest, channel, config, opt);\\n      }\\n    } else {\\n      const guideType = isPositionFieldOrDatumDef(fd) ? 'axis' : isMarkPropFieldOrDatumDef(fd) ? 'legend' : isFacetFieldDef(fd) ? 'header' : null;\\n\\n      if (guideType && fd[guideType]) {\\n        const {\\n          format,\\n          formatType,\\n          ...newGuide\\n        } = fd[guideType];\\n\\n        if (isCustomFormatType(formatType) && !config.customFormatTypes) {\\n          warn(customFormatTypeNotAllowed(channel));\\n          return initFieldOrDatumDef({ ...fd,\\n            [guideType]: newGuide\\n          }, channel, config, opt);\\n        }\\n      }\\n    }\\n\\n    if (isFieldDef(fd)) {\\n      return initFieldDef(fd, channel, opt);\\n    }\\n\\n    return initDatumDef(fd);\\n  }\\n\\n  function initDatumDef(datumDef) {\\n    let type = datumDef['type'];\\n\\n    if (type) {\\n      return datumDef;\\n    }\\n\\n    const {\\n      datum\\n    } = datumDef;\\n    type = isNumber(datum) ? 'quantitative' : isString(datum) ? 'nominal' : isDateTime(datum) ? 'temporal' : undefined;\\n    return { ...datumDef,\\n      type\\n    };\\n  }\\n\\n  function initFieldDef(fd, channel, {\\n    compositeMark = false\\n  } = {}) {\\n    const {\\n      aggregate,\\n      timeUnit,\\n      bin,\\n      field\\n    } = fd;\\n    const fieldDef = { ...fd\\n    }; // Drop invalid aggregate\\n\\n    if (!compositeMark && aggregate && !isAggregateOp(aggregate) && !isArgmaxDef(aggregate) && !isArgminDef(aggregate)) {\\n      warn(invalidAggregate(aggregate));\\n      delete fieldDef.aggregate;\\n    } // Normalize Time Unit\\n\\n\\n    if (timeUnit) {\\n      fieldDef.timeUnit = normalizeTimeUnit(timeUnit);\\n    }\\n\\n    if (field) {\\n      fieldDef.field = \\\"\\\".concat(field);\\n    } // Normalize bin\\n\\n\\n    if (isBinning(bin)) {\\n      fieldDef.bin = normalizeBin(bin, channel);\\n    }\\n\\n    if (isBinned(bin) && !isXorY(channel)) {\\n      warn(channelShouldNotBeUsedForBinned(channel));\\n    } // Normalize Type\\n\\n\\n    if (isTypedFieldDef(fieldDef)) {\\n      const {\\n        type\\n      } = fieldDef;\\n      const fullType = getFullName(type);\\n\\n      if (type !== fullType) {\\n        // convert short type to full type\\n        fieldDef.type = fullType;\\n      }\\n\\n      if (type !== 'quantitative') {\\n        if (isCountingAggregateOp(aggregate)) {\\n          warn(invalidFieldTypeForCountAggregate(type, aggregate));\\n          fieldDef.type = 'quantitative';\\n        }\\n      }\\n    } else if (!isSecondaryRangeChannel(channel)) {\\n      // If type is empty / invalid, then augment with default type\\n      const newType = defaultType(fieldDef, channel);\\n      fieldDef['type'] = newType;\\n    }\\n\\n    if (isTypedFieldDef(fieldDef)) {\\n      const {\\n        compatible,\\n        warning\\n      } = channelCompatibility(fieldDef, channel) || {};\\n\\n      if (compatible === false) {\\n        warn(warning);\\n      }\\n    }\\n\\n    if (isSortableFieldDef(fieldDef) && isString(fieldDef.sort)) {\\n      const {\\n        sort\\n      } = fieldDef;\\n\\n      if (isSortByChannel(sort)) {\\n        return { ...fieldDef,\\n          sort: {\\n            encoding: sort\\n          }\\n        };\\n      }\\n\\n      const sub = sort.substr(1);\\n\\n      if (sort.charAt(0) === '-' && isSortByChannel(sub)) {\\n        return { ...fieldDef,\\n          sort: {\\n            encoding: sub,\\n            order: 'descending'\\n          }\\n        };\\n      }\\n    }\\n\\n    if (isFacetFieldDef(fieldDef)) {\\n      const {\\n        header\\n      } = fieldDef;\\n      const {\\n        orient,\\n        ...rest\\n      } = header;\\n\\n      if (orient) {\\n        return { ...fieldDef,\\n          header: { ...rest,\\n            labelOrient: header.labelOrient || orient,\\n            titleOrient: header.titleOrient || orient\\n          }\\n        };\\n      }\\n    }\\n\\n    return fieldDef;\\n  }\\n  function normalizeBin(bin, channel) {\\n    if (isBoolean(bin)) {\\n      return {\\n        maxbins: autoMaxBins(channel)\\n      };\\n    } else if (bin === 'binned') {\\n      return {\\n        binned: true\\n      };\\n    } else if (!bin.maxbins && !bin.step) {\\n      return { ...bin,\\n        maxbins: autoMaxBins(channel)\\n      };\\n    } else {\\n      return bin;\\n    }\\n  }\\n  const COMPATIBLE = {\\n    compatible: true\\n  };\\n  function channelCompatibility(fieldDef, channel) {\\n    const type = fieldDef.type;\\n\\n    if (type === 'geojson' && channel !== 'shape') {\\n      return {\\n        compatible: false,\\n        warning: \\\"Channel \\\".concat(channel, \\\" should not be used with a geojson data.\\\")\\n      };\\n    }\\n\\n    switch (channel) {\\n      case ROW:\\n      case COLUMN:\\n      case FACET:\\n        if (isContinuous(fieldDef)) {\\n          return {\\n            compatible: false,\\n            warning: facetChannelShouldBeDiscrete(channel)\\n          };\\n        }\\n\\n        return COMPATIBLE;\\n\\n      case X:\\n      case Y:\\n      case COLOR:\\n      case FILL:\\n      case STROKE:\\n      case TEXT:\\n      case DETAIL:\\n      case KEY:\\n      case TOOLTIP:\\n      case HREF:\\n      case URL:\\n      case ANGLE:\\n      case THETA:\\n      case RADIUS:\\n      case DESCRIPTION:\\n        return COMPATIBLE;\\n\\n      case LONGITUDE:\\n      case LONGITUDE2:\\n      case LATITUDE:\\n      case LATITUDE2:\\n        if (type !== QUANTITATIVE) {\\n          return {\\n            compatible: false,\\n            warning: \\\"Channel \\\".concat(channel, \\\" should be used with a quantitative field only, not \\\").concat(fieldDef.type, \\\" field.\\\")\\n          };\\n        }\\n\\n        return COMPATIBLE;\\n\\n      case OPACITY:\\n      case FILLOPACITY:\\n      case STROKEOPACITY:\\n      case STROKEWIDTH:\\n      case SIZE:\\n      case THETA2:\\n      case RADIUS2:\\n      case X2:\\n      case Y2:\\n        if (type === 'nominal' && !fieldDef['sort']) {\\n          return {\\n            compatible: false,\\n            warning: \\\"Channel \\\".concat(channel, \\\" should not be used with an unsorted discrete field.\\\")\\n          };\\n        }\\n\\n        return COMPATIBLE;\\n\\n      case STROKEDASH:\\n        if (!contains(['ordinal', 'nominal'], fieldDef.type)) {\\n          return {\\n            compatible: false,\\n            warning: 'StrokeDash channel should be used with only discrete data.'\\n          };\\n        }\\n\\n        return COMPATIBLE;\\n\\n      case SHAPE:\\n        if (!contains(['ordinal', 'nominal', 'geojson'], fieldDef.type)) {\\n          return {\\n            compatible: false,\\n            warning: 'Shape channel should be used with only either discrete or geojson data.'\\n          };\\n        }\\n\\n        return COMPATIBLE;\\n\\n      case ORDER:\\n        if (fieldDef.type === 'nominal' && !('sort' in fieldDef)) {\\n          return {\\n            compatible: false,\\n            warning: \\\"Channel order is inappropriate for nominal field, which has no inherent order.\\\"\\n          };\\n        }\\n\\n        return COMPATIBLE;\\n    }\\n  }\\n  /**\\n   * Check if the field def uses a time format or does not use any format but is temporal\\n   * (this does not cover field defs that are temporal but use a number format).\\n   */\\n\\n  function isFieldOrDatumDefForTimeFormat(fieldOrDatumDef) {\\n    const {\\n      formatType\\n    } = getFormatMixins(fieldOrDatumDef);\\n    return formatType === 'time' || !formatType && isTimeFieldDef(fieldOrDatumDef);\\n  }\\n  /**\\n   * Check if field def has type `temporal`. If you want to also cover field defs that use a time format, use `isTimeFormatFieldDef`.\\n   */\\n\\n  function isTimeFieldDef(def) {\\n    return def && (def['type'] === 'temporal' || isFieldDef(def) && !!def.timeUnit);\\n  }\\n  /**\\n   * Getting a value associated with a fielddef.\\n   * Convert the value to Vega expression if applicable (for datetime object, or string if the field def is temporal or has timeUnit)\\n   */\\n\\n  function valueExpr(v, {\\n    timeUnit,\\n    type,\\n    wrapTime,\\n    undefinedIfExprNotRequired\\n  }) {\\n    var _normalizeTimeUnit2;\\n\\n    const unit = timeUnit && ((_normalizeTimeUnit2 = normalizeTimeUnit(timeUnit)) === null || _normalizeTimeUnit2 === void 0 ? void 0 : _normalizeTimeUnit2.unit);\\n    let isTime = unit || type === 'temporal';\\n    let expr;\\n\\n    if (isExprRef(v)) {\\n      expr = v.expr;\\n    } else if (isSignalRef(v)) {\\n      expr = v.signal;\\n    } else if (isDateTime(v)) {\\n      isTime = true;\\n      expr = dateTimeToExpr(v);\\n    } else if (isString(v) || isNumber(v)) {\\n      if (isTime) {\\n        expr = \\\"datetime(\\\".concat(JSON.stringify(v), \\\")\\\");\\n\\n        if (isLocalSingleTimeUnit(unit)) {\\n          // for single timeUnit, we will use dateTimeToExpr to convert number/string to match the timeUnit\\n          if (isNumber(v) && v < 10000 || isString(v) && isNaN(Date.parse(v))) {\\n            expr = dateTimeToExpr({\\n              [unit]: v\\n            });\\n          }\\n        }\\n      }\\n    }\\n\\n    if (expr) {\\n      return wrapTime && isTime ? \\\"time(\\\".concat(expr, \\\")\\\") : expr;\\n    } // number or boolean or normal string\\n\\n\\n    return undefinedIfExprNotRequired ? undefined : JSON.stringify(v);\\n  }\\n  /**\\n   * Standardize value array -- convert each value to Vega expression if applicable\\n   */\\n\\n  function valueArray(fieldOrDatumDef, values) {\\n    const {\\n      type\\n    } = fieldOrDatumDef;\\n    return values.map(v => {\\n      const expr = valueExpr(v, {\\n        timeUnit: isFieldDef(fieldOrDatumDef) ? fieldOrDatumDef.timeUnit : undefined,\\n        type,\\n        undefinedIfExprNotRequired: true\\n      }); // return signal for the expression if we need an expression\\n\\n      if (expr !== undefined) {\\n        return {\\n          signal: expr\\n        };\\n      } // otherwise just return the original value\\n\\n\\n      return v;\\n    });\\n  }\\n  /**\\n   * Checks whether a fieldDef for a particular channel requires a computed bin range.\\n   */\\n\\n  function binRequiresRange(fieldDef, channel) {\\n    if (!isBinning(fieldDef.bin)) {\\n      console.warn('Only call this method for binned field defs.');\\n      return false;\\n    } // We need the range only when the user explicitly forces a binned field to be use discrete scale. In this case, bin range is used in axis and legend labels.\\n    // We could check whether the axis or legend exists (not disabled) but that seems overkill.\\n\\n\\n    return isScaleChannel(channel) && contains(['ordinal', 'nominal'], fieldDef.type);\\n  }\\n\\n  function extractTitleConfig(titleConfig) {\\n    const {\\n      // These are non-mark title config that need to be hardcoded\\n      anchor,\\n      frame,\\n      offset,\\n      orient,\\n      // color needs to be redirect to fill\\n      color,\\n      // subtitle properties\\n      subtitleColor,\\n      subtitleFont,\\n      subtitleFontSize,\\n      subtitleFontStyle,\\n      subtitleFontWeight,\\n      subtitleLineHeight,\\n      subtitlePadding,\\n      // The rest are mark config.\\n      ...rest\\n    } = titleConfig;\\n    const titleMarkConfig = { ...rest,\\n      ...(color ? {\\n        fill: color\\n      } : {})\\n    }; // These are non-mark title config that need to be hardcoded\\n\\n    const nonMark = { ...(anchor ? {\\n        anchor\\n      } : {}),\\n      ...(frame ? {\\n        frame\\n      } : {}),\\n      ...(offset ? {\\n        offset\\n      } : {}),\\n      ...(orient ? {\\n        orient\\n      } : {})\\n    }; // subtitle part can stay in config.title since header titles do not use subtitle\\n\\n    const subtitle = { ...(subtitleColor ? {\\n        subtitleColor\\n      } : {}),\\n      ...(subtitleFont ? {\\n        subtitleFont\\n      } : {}),\\n      ...(subtitleFontSize ? {\\n        subtitleFontSize\\n      } : {}),\\n      ...(subtitleFontStyle ? {\\n        subtitleFontStyle\\n      } : {}),\\n      ...(subtitleFontWeight ? {\\n        subtitleFontWeight\\n      } : {}),\\n      ...(subtitleLineHeight ? {\\n        subtitleLineHeight\\n      } : {}),\\n      ...(subtitlePadding ? {\\n        subtitlePadding\\n      } : {})\\n    };\\n    const subtitleMarkConfig = pick(titleMarkConfig, ['align', 'baseline', 'dx', 'dy', 'limit']);\\n    return {\\n      titleMarkConfig,\\n      subtitleMarkConfig,\\n      nonMark,\\n      subtitle\\n    };\\n  }\\n  function isText(v) {\\n    return isString(v) || isArray(v) && isString(v[0]);\\n  }\\n\\n  function signalOrValueRefWithCondition(val) {\\n    const condition = isArray(val.condition) ? val.condition.map(conditionalSignalRefOrValue) : conditionalSignalRefOrValue(val.condition);\\n    return { ...signalRefOrValue(val),\\n      condition\\n    };\\n  }\\n  function signalRefOrValue(value) {\\n    if (isExprRef(value)) {\\n      const {\\n        expr,\\n        ...rest\\n      } = value;\\n      return {\\n        signal: expr,\\n        ...rest\\n      };\\n    }\\n\\n    return value;\\n  }\\n  function conditionalSignalRefOrValue(value) {\\n    if (isExprRef(value)) {\\n      const {\\n        expr,\\n        ...rest\\n      } = value;\\n      return {\\n        signal: expr,\\n        ...rest\\n      };\\n    }\\n\\n    return value;\\n  }\\n  function signalOrValueRef(value) {\\n    if (isExprRef(value)) {\\n      const {\\n        expr,\\n        ...rest\\n      } = value;\\n      return {\\n        signal: expr,\\n        ...rest\\n      };\\n    }\\n\\n    if (isSignalRef(value)) {\\n      return value;\\n    }\\n\\n    return value !== undefined ? {\\n      value\\n    } : undefined;\\n  }\\n  function exprFromValueOrSignalRef(ref) {\\n    if (isSignalRef(ref)) {\\n      return ref.signal;\\n    }\\n\\n    return $(ref.value);\\n  }\\n  function signalOrStringValue(v) {\\n    if (isSignalRef(v)) {\\n      return v.signal;\\n    }\\n\\n    return v == null ? null : $(v);\\n  }\\n  function applyMarkConfig(e, model, propsList) {\\n    for (const property of propsList) {\\n      const value = getMarkConfig(property, model.markDef, model.config);\\n\\n      if (value !== undefined) {\\n        e[property] = signalOrValueRef(value);\\n      }\\n    }\\n\\n    return e;\\n  }\\n  function getStyles(mark) {\\n    var _mark$style;\\n\\n    return [].concat(mark.type, (_mark$style = mark.style) !== null && _mark$style !== void 0 ? _mark$style : []);\\n  }\\n  function getMarkPropOrConfig(channel, mark, config, opt = {}) {\\n    const {\\n      vgChannel,\\n      ignoreVgConfig\\n    } = opt;\\n\\n    if (vgChannel && mark[vgChannel] !== undefined) {\\n      return mark[vgChannel];\\n    } else if (mark[channel] !== undefined) {\\n      return mark[channel];\\n    } else if (ignoreVgConfig && (!vgChannel || vgChannel === channel)) {\\n      return undefined;\\n    }\\n\\n    return getMarkConfig(channel, mark, config, opt);\\n  }\\n  /**\\n   * Return property value from style or mark specific config property if exists.\\n   * Otherwise, return general mark specific config.\\n   */\\n\\n  function getMarkConfig(channel, mark, config, {\\n    vgChannel\\n  } = {}) {\\n    return getFirstDefined( // style config has highest precedence\\n    vgChannel ? getMarkStyleConfig(channel, mark, config.style) : undefined, getMarkStyleConfig(channel, mark, config.style), // then mark-specific config\\n    vgChannel ? config[mark.type][vgChannel] : undefined, config[mark.type][channel], // Need to cast because MarkDef doesn't perfectly match with AnyMarkConfig, but if the type isn't available, we'll get nothing here, which is fine\\n    // If there is vgChannel, skip vl channel.\\n    // For example, vl size for text is vg fontSize, but config.mark.size is only for point size.\\n    vgChannel ? config.mark[vgChannel] : config.mark[channel] // Need to cast for the same reason as above\\n    );\\n  }\\n  function getMarkStyleConfig(prop, mark, styleConfigIndex) {\\n    return getStyleConfig(prop, getStyles(mark), styleConfigIndex);\\n  }\\n  function getStyleConfig(p, styles, styleConfigIndex) {\\n    styles = array(styles);\\n    let value;\\n\\n    for (const style of styles) {\\n      const styleConfig = styleConfigIndex[style];\\n\\n      if (styleConfig && styleConfig[p] !== undefined) {\\n        value = styleConfig[p];\\n      }\\n    }\\n\\n    return value;\\n  }\\n  /**\\n   * Return Vega sort parameters (tuple of field and order).\\n   */\\n\\n  function sortParams(orderDef, fieldRefOption) {\\n    return array(orderDef).reduce((s, orderChannelDef) => {\\n      var _orderChannelDef$sort;\\n\\n      s.field.push(vgField(orderChannelDef, fieldRefOption));\\n      s.order.push((_orderChannelDef$sort = orderChannelDef.sort) !== null && _orderChannelDef$sort !== void 0 ? _orderChannelDef$sort : 'ascending');\\n      return s;\\n    }, {\\n      field: [],\\n      order: []\\n    });\\n  }\\n  function mergeTitleFieldDefs(f1, f2) {\\n    const merged = [...f1];\\n    f2.forEach(fdToMerge => {\\n      for (const fieldDef1 of merged) {\\n        // If already exists, no need to append to merged array\\n        if (deepEqual(fieldDef1, fdToMerge)) {\\n          return;\\n        }\\n      }\\n\\n      merged.push(fdToMerge);\\n    });\\n    return merged;\\n  }\\n  function mergeTitle(title1, title2) {\\n    if (deepEqual(title1, title2) || !title2) {\\n      // if titles are the same or title2 is falsy\\n      return title1;\\n    } else if (!title1) {\\n      // if title1 is falsy\\n      return title2;\\n    } else {\\n      return [...array(title1), ...array(title2)].join(', ');\\n    }\\n  }\\n  function mergeTitleComponent(v1, v2) {\\n    const v1Val = v1.value;\\n    const v2Val = v2.value;\\n\\n    if (v1Val == null || v2Val === null) {\\n      return {\\n        explicit: v1.explicit,\\n        value: null\\n      };\\n    } else if ((isText(v1Val) || isSignalRef(v1Val)) && (isText(v2Val) || isSignalRef(v2Val))) {\\n      return {\\n        explicit: v1.explicit,\\n        value: mergeTitle(v1Val, v2Val)\\n      };\\n    } else if (isText(v1Val) || isSignalRef(v1Val)) {\\n      return {\\n        explicit: v1.explicit,\\n        value: v1Val\\n      };\\n    } else if (isText(v2Val) || isSignalRef(v2Val)) {\\n      return {\\n        explicit: v1.explicit,\\n        value: v2Val\\n      };\\n    } else if (!isText(v1Val) && !isSignalRef(v1Val) && !isText(v2Val) && !isSignalRef(v2Val)) {\\n      return {\\n        explicit: v1.explicit,\\n        value: mergeTitleFieldDefs(v1Val, v2Val)\\n      };\\n    }\\n    /* istanbul ignore next: Condition should not happen -- only for warning in development. */\\n\\n\\n    throw new Error('It should never reach here');\\n  }\\n\\n  /**\\n   * Base interface for a unit (single-view) specification.\\n   */\\n\\n  /**\\n   * A unit specification without any shortcut/expansion syntax.\\n   */\\n\\n  /**\\n   * A unit specification, which can contain either [primitive marks or composite marks](https://vega.github.io/vega-lite/docs/mark.html#types).\\n   */\\n\\n  /**\\n   * Unit spec that can have a composite mark and row or column channels (shorthand for a facet spec).\\n   */\\n  function isUnitSpec(spec) {\\n    return 'mark' in spec;\\n  }\\n\\n  class CompositeMarkNormalizer {\\n    constructor(name, run) {\\n      this.name = name;\\n      this.run = run;\\n    }\\n\\n    hasMatchingType(spec) {\\n      if (isUnitSpec(spec)) {\\n        return getMarkType(spec.mark) === this.name;\\n      }\\n\\n      return false;\\n    }\\n\\n  }\\n\\n  function channelHasField(encoding, channel) {\\n    const channelDef = encoding && encoding[channel];\\n\\n    if (channelDef) {\\n      if (isArray(channelDef)) {\\n        return some(channelDef, fieldDef => !!fieldDef.field);\\n      } else {\\n        return isFieldDef(channelDef) || hasConditionalFieldDef(channelDef);\\n      }\\n    }\\n\\n    return false;\\n  }\\n  function isAggregate(encoding) {\\n    return some(CHANNELS, channel => {\\n      if (channelHasField(encoding, channel)) {\\n        const channelDef = encoding[channel];\\n\\n        if (isArray(channelDef)) {\\n          return some(channelDef, fieldDef => !!fieldDef.aggregate);\\n        } else {\\n          const fieldDef = getFieldDef(channelDef);\\n          return fieldDef && !!fieldDef.aggregate;\\n        }\\n      }\\n\\n      return false;\\n    });\\n  }\\n  function extractTransformsFromEncoding(oldEncoding, config) {\\n    const groupby = [];\\n    const bins = [];\\n    const timeUnits = [];\\n    const aggregate = [];\\n    const encoding = {};\\n    forEach(oldEncoding, (channelDef, channel) => {\\n      // Extract potential embedded transformations along with remaining properties\\n      if (isFieldDef(channelDef)) {\\n        const {\\n          field,\\n          aggregate: aggOp,\\n          bin,\\n          timeUnit,\\n          ...remaining\\n        } = channelDef;\\n\\n        if (aggOp || timeUnit || bin) {\\n          const guide = getGuide(channelDef);\\n          const isTitleDefined = guide && guide.title;\\n          let newField = vgField(channelDef, {\\n            forAs: true\\n          });\\n          const newFieldDef = { // Only add title if it doesn't exist\\n            ...(isTitleDefined ? [] : {\\n              title: title(channelDef, config, {\\n                allowDisabling: true\\n              })\\n            }),\\n            ...remaining,\\n            // Always overwrite field\\n            field: newField\\n          };\\n\\n          if (aggOp) {\\n            let op;\\n\\n            if (isArgmaxDef(aggOp)) {\\n              op = 'argmax';\\n              newField = vgField({\\n                op: 'argmax',\\n                field: aggOp.argmax\\n              }, {\\n                forAs: true\\n              });\\n              newFieldDef.field = \\\"\\\".concat(newField, \\\".\\\").concat(field);\\n            } else if (isArgminDef(aggOp)) {\\n              op = 'argmin';\\n              newField = vgField({\\n                op: 'argmin',\\n                field: aggOp.argmin\\n              }, {\\n                forAs: true\\n              });\\n              newFieldDef.field = \\\"\\\".concat(newField, \\\".\\\").concat(field);\\n            } else if (aggOp !== 'boxplot' && aggOp !== 'errorbar' && aggOp !== 'errorband') {\\n              op = aggOp;\\n            }\\n\\n            if (op) {\\n              const aggregateEntry = {\\n                op,\\n                as: newField\\n              };\\n\\n              if (field) {\\n                aggregateEntry.field = field;\\n              }\\n\\n              aggregate.push(aggregateEntry);\\n            }\\n          } else {\\n            groupby.push(newField);\\n\\n            if (isTypedFieldDef(channelDef) && isBinning(bin)) {\\n              bins.push({\\n                bin,\\n                field,\\n                as: newField\\n              }); // Add additional groupbys for range and end of bins\\n\\n              groupby.push(vgField(channelDef, {\\n                binSuffix: 'end'\\n              }));\\n\\n              if (binRequiresRange(channelDef, channel)) {\\n                groupby.push(vgField(channelDef, {\\n                  binSuffix: 'range'\\n                }));\\n              } // Create accompanying 'x2' or 'y2' field if channel is 'x' or 'y' respectively\\n\\n\\n              if (isXorY(channel)) {\\n                const secondaryChannel = {\\n                  field: newField + '_end'\\n                };\\n                encoding[channel + '2'] = secondaryChannel;\\n              }\\n\\n              newFieldDef.bin = 'binned';\\n\\n              if (!isSecondaryRangeChannel(channel)) {\\n                newFieldDef['type'] = QUANTITATIVE;\\n              }\\n            } else if (timeUnit) {\\n              timeUnits.push({\\n                timeUnit,\\n                field,\\n                as: newField\\n              }); // define the format type for later compilation\\n\\n              const formatType = isTypedFieldDef(channelDef) && channelDef.type !== TEMPORAL && 'time';\\n\\n              if (formatType) {\\n                if (channel === TEXT || channel === TOOLTIP) {\\n                  newFieldDef['formatType'] = formatType;\\n                } else if (isNonPositionScaleChannel(channel)) {\\n                  newFieldDef['legend'] = {\\n                    formatType,\\n                    ...newFieldDef['legend']\\n                  };\\n                } else if (isXorY(channel)) {\\n                  newFieldDef['axis'] = {\\n                    formatType,\\n                    ...newFieldDef['axis']\\n                  };\\n                }\\n              }\\n            }\\n          } // now the field should refer to post-transformed field instead\\n\\n\\n          encoding[channel] = newFieldDef;\\n        } else {\\n          groupby.push(field);\\n          encoding[channel] = oldEncoding[channel];\\n        }\\n      } else {\\n        // For value def / signal ref / datum def, just copy\\n        encoding[channel] = oldEncoding[channel];\\n      }\\n    });\\n    return {\\n      bins,\\n      timeUnits,\\n      aggregate,\\n      groupby,\\n      encoding\\n    };\\n  }\\n  function markChannelCompatible(encoding, channel, mark) {\\n    const markSupported = supportMark(channel, mark);\\n\\n    if (!markSupported) {\\n      return false;\\n    } else if (markSupported === 'binned') {\\n      const primaryFieldDef = encoding[channel === X2 ? X : Y]; // circle, point, square and tick only support x2/y2 when their corresponding x/y fieldDef\\n      // has \\\"binned\\\" data and thus need x2/y2 to specify the bin-end field.\\n\\n      if (isFieldDef(primaryFieldDef) && isFieldDef(encoding[channel]) && isBinned(primaryFieldDef.bin)) {\\n        return true;\\n      } else {\\n        return false;\\n      }\\n    }\\n\\n    return true;\\n  }\\n  function initEncoding(encoding, mark, filled, config) {\\n    return keys(encoding).reduce((normalizedEncoding, channel) => {\\n      if (!isChannel(channel)) {\\n        // Drop invalid channel\\n        warn(invalidEncodingChannel(channel));\\n        return normalizedEncoding;\\n      }\\n\\n      const channelDef = encoding[channel];\\n\\n      if (channel === 'angle' && mark === 'arc' && !encoding.theta) {\\n        warn(REPLACE_ANGLE_WITH_THETA);\\n        channel = THETA;\\n      }\\n\\n      if (!markChannelCompatible(encoding, channel, mark)) {\\n        // Drop unsupported channel\\n        warn(incompatibleChannel(channel, mark));\\n        return normalizedEncoding;\\n      } // Drop line's size if the field is aggregated.\\n\\n\\n      if (channel === SIZE && mark === 'line') {\\n        const fieldDef = getFieldDef(encoding[channel]);\\n\\n        if (fieldDef === null || fieldDef === void 0 ? void 0 : fieldDef.aggregate) {\\n          warn(LINE_WITH_VARYING_SIZE);\\n          return normalizedEncoding;\\n        }\\n      } // Drop color if either fill or stroke is specified\\n\\n\\n      if (channel === COLOR && (filled ? 'fill' in encoding : 'stroke' in encoding)) {\\n        warn(droppingColor('encoding', {\\n          fill: 'fill' in encoding,\\n          stroke: 'stroke' in encoding\\n        }));\\n        return normalizedEncoding;\\n      }\\n\\n      if (channel === DETAIL || channel === ORDER && !isArray(channelDef) && !isValueDef(channelDef) || channel === TOOLTIP && isArray(channelDef)) {\\n        if (channelDef) {\\n          // Array of fieldDefs for detail channel (or production rule)\\n          normalizedEncoding[channel] = array(channelDef).reduce((defs, fieldDef) => {\\n            if (!isFieldDef(fieldDef)) {\\n              warn(emptyFieldDef(fieldDef, channel));\\n            } else {\\n              defs.push(initFieldDef(fieldDef, channel));\\n            }\\n\\n            return defs;\\n          }, []);\\n        }\\n      } else {\\n        if (channel === TOOLTIP && channelDef === null) {\\n          // Preserve null so we can use it to disable tooltip\\n          normalizedEncoding[channel] = null;\\n        } else if (!isFieldDef(channelDef) && !isDatumDef(channelDef) && !isValueDef(channelDef) && !isConditionalDef(channelDef) && !isSignalRef(channelDef)) {\\n          warn(emptyFieldDef(channelDef, channel));\\n          return normalizedEncoding;\\n        }\\n\\n        normalizedEncoding[channel] = initChannelDef(channelDef, channel, config);\\n      }\\n\\n      return normalizedEncoding;\\n    }, {});\\n  }\\n  /**\\n   * For composite marks, we have to call initChannelDef during init so we can infer types earlier.\\n   */\\n\\n  function normalizeEncoding(encoding, config) {\\n    const normalizedEncoding = {};\\n\\n    for (const channel of keys(encoding)) {\\n      const newChannelDef = initChannelDef(encoding[channel], channel, config, {\\n        compositeMark: true\\n      });\\n      normalizedEncoding[channel] = newChannelDef;\\n    }\\n\\n    return normalizedEncoding;\\n  }\\n  function fieldDefs(encoding) {\\n    const arr = [];\\n\\n    for (const channel of keys(encoding)) {\\n      if (channelHasField(encoding, channel)) {\\n        const channelDef = encoding[channel];\\n        const channelDefArray = array(channelDef);\\n\\n        for (const def of channelDefArray) {\\n          if (isFieldDef(def)) {\\n            arr.push(def);\\n          } else if (hasConditionalFieldDef(def)) {\\n            arr.push(def.condition);\\n          }\\n        }\\n      }\\n    }\\n\\n    return arr;\\n  }\\n  function forEach(mapping, f, thisArg) {\\n    if (!mapping) {\\n      return;\\n    }\\n\\n    for (const channel of keys(mapping)) {\\n      const el = mapping[channel];\\n\\n      if (isArray(el)) {\\n        for (const channelDef of el) {\\n          f.call(thisArg, channelDef, channel);\\n        }\\n      } else {\\n        f.call(thisArg, el, channel);\\n      }\\n    }\\n  }\\n  function reduce(mapping, f, init, thisArg) {\\n    if (!mapping) {\\n      return init;\\n    }\\n\\n    return keys(mapping).reduce((r, channel) => {\\n      const map = mapping[channel];\\n\\n      if (isArray(map)) {\\n        return map.reduce((r1, channelDef) => {\\n          return f.call(thisArg, r1, channelDef, channel);\\n        }, r);\\n      } else {\\n        return f.call(thisArg, r, map, channel);\\n      }\\n    }, init);\\n  }\\n  /**\\n   * Returns list of path grouping fields for the given encoding\\n   */\\n\\n  function pathGroupingFields(mark, encoding) {\\n    return keys(encoding).reduce((details, channel) => {\\n      switch (channel) {\\n        // x, y, x2, y2, lat, long, lat1, long2, order, tooltip, href, aria label, cursor should not cause lines to group\\n        case X:\\n        case Y:\\n        case HREF:\\n        case DESCRIPTION:\\n        case URL:\\n        case X2:\\n        case Y2:\\n        case THETA:\\n        case THETA2:\\n        case RADIUS:\\n        case RADIUS2: // falls through\\n\\n        case LATITUDE:\\n        case LONGITUDE:\\n        case LATITUDE2:\\n        case LONGITUDE2: // TODO: case 'cursor':\\n        // text, shape, shouldn't be a part of line/trail/area [falls through]\\n\\n        case TEXT:\\n        case SHAPE:\\n        case ANGLE: // falls through\\n        // tooltip fields should not be added to group by [falls through]\\n\\n        case TOOLTIP:\\n          return details;\\n\\n        case ORDER:\\n          // order should not group line / trail\\n          if (mark === 'line' || mark === 'trail') {\\n            return details;\\n          }\\n\\n        // but order should group area for stacking (falls through)\\n\\n        case DETAIL:\\n        case KEY:\\n          {\\n            const channelDef = encoding[channel];\\n\\n            if (isArray(channelDef) || isFieldDef(channelDef)) {\\n              for (const fieldDef of array(channelDef)) {\\n                if (!fieldDef.aggregate) {\\n                  details.push(vgField(fieldDef, {}));\\n                }\\n              }\\n            }\\n\\n            return details;\\n          }\\n\\n        case SIZE:\\n          if (mark === 'trail') {\\n            // For trail, size should not group trail lines.\\n            return details;\\n          }\\n\\n        // For line, size should group lines.\\n        // falls through\\n\\n        case COLOR:\\n        case FILL:\\n        case STROKE:\\n        case OPACITY:\\n        case FILLOPACITY:\\n        case STROKEOPACITY:\\n        case STROKEDASH:\\n        case STROKEWIDTH:\\n          {\\n            // TODO strokeDashOffset:\\n            // falls through\\n            const fieldDef = getFieldDef(encoding[channel]);\\n\\n            if (fieldDef && !fieldDef.aggregate) {\\n              details.push(vgField(fieldDef, {}));\\n            }\\n\\n            return details;\\n          }\\n      }\\n    }, []);\\n  }\\n\\n  function filterTooltipWithAggregatedField(oldEncoding) {\\n    const {\\n      tooltip,\\n      ...filteredEncoding\\n    } = oldEncoding;\\n\\n    if (!tooltip) {\\n      return {\\n        filteredEncoding\\n      };\\n    }\\n\\n    let customTooltipWithAggregatedField;\\n    let customTooltipWithoutAggregatedField;\\n\\n    if (isArray(tooltip)) {\\n      for (const t of tooltip) {\\n        if (t.aggregate) {\\n          if (!customTooltipWithAggregatedField) {\\n            customTooltipWithAggregatedField = [];\\n          }\\n\\n          customTooltipWithAggregatedField.push(t);\\n        } else {\\n          if (!customTooltipWithoutAggregatedField) {\\n            customTooltipWithoutAggregatedField = [];\\n          }\\n\\n          customTooltipWithoutAggregatedField.push(t);\\n        }\\n      }\\n\\n      if (customTooltipWithAggregatedField) {\\n        filteredEncoding.tooltip = customTooltipWithAggregatedField;\\n      }\\n    } else {\\n      if (tooltip['aggregate']) {\\n        filteredEncoding.tooltip = tooltip;\\n      } else {\\n        customTooltipWithoutAggregatedField = tooltip;\\n      }\\n    }\\n\\n    if (isArray(customTooltipWithoutAggregatedField) && customTooltipWithoutAggregatedField.length === 1) {\\n      customTooltipWithoutAggregatedField = customTooltipWithoutAggregatedField[0];\\n    }\\n\\n    return {\\n      customTooltipWithoutAggregatedField,\\n      filteredEncoding\\n    };\\n  }\\n  function getCompositeMarkTooltip(tooltipSummary, continuousAxisChannelDef, encodingWithoutContinuousAxis, withFieldName = true) {\\n    if ('tooltip' in encodingWithoutContinuousAxis) {\\n      return {\\n        tooltip: encodingWithoutContinuousAxis.tooltip\\n      };\\n    }\\n\\n    const fiveSummaryTooltip = tooltipSummary.map(({\\n      fieldPrefix,\\n      titlePrefix\\n    }) => {\\n      const mainTitle = withFieldName ? \\\" of \\\".concat(getTitle(continuousAxisChannelDef)) : '';\\n      return {\\n        field: fieldPrefix + continuousAxisChannelDef.field,\\n        type: continuousAxisChannelDef.type,\\n        title: isSignalRef(titlePrefix) ? {\\n          signal: titlePrefix + \\\"\\\\\\\"\\\".concat(escape(mainTitle), \\\"\\\\\\\"\\\")\\n        } : titlePrefix + mainTitle\\n      };\\n    });\\n    const tooltipFieldDefs = fieldDefs(encodingWithoutContinuousAxis).map(toStringFieldDef);\\n    return {\\n      tooltip: [...fiveSummaryTooltip, // need to cast because TextFieldDef supports fewer types of bin\\n      ...unique(tooltipFieldDefs, hash)]\\n    };\\n  }\\n  function getTitle(continuousAxisChannelDef) {\\n    const {\\n      title,\\n      field\\n    } = continuousAxisChannelDef;\\n    return getFirstDefined(title, field);\\n  }\\n  function makeCompositeAggregatePartFactory(compositeMarkDef, continuousAxis, continuousAxisChannelDef, sharedEncoding, compositeMarkConfig) {\\n    const {\\n      scale,\\n      axis\\n    } = continuousAxisChannelDef;\\n    return ({\\n      partName,\\n      mark,\\n      positionPrefix,\\n      endPositionPrefix = undefined,\\n      extraEncoding = {}\\n    }) => {\\n      const title = getTitle(continuousAxisChannelDef);\\n      return partLayerMixins(compositeMarkDef, partName, compositeMarkConfig, {\\n        mark,\\n        // TODO better remove this method and just have mark as a parameter of the method\\n        encoding: {\\n          [continuousAxis]: {\\n            field: positionPrefix + '_' + continuousAxisChannelDef.field,\\n            type: continuousAxisChannelDef.type,\\n            ...(title !== undefined ? {\\n              title\\n            } : {}),\\n            ...(scale !== undefined ? {\\n              scale\\n            } : {}),\\n            ...(axis !== undefined ? {\\n              axis\\n            } : {})\\n          },\\n          ...(isString(endPositionPrefix) ? {\\n            [continuousAxis + '2']: {\\n              field: endPositionPrefix + '_' + continuousAxisChannelDef.field\\n            }\\n          } : {}),\\n          ...sharedEncoding,\\n          ...extraEncoding\\n        }\\n      });\\n    };\\n  }\\n  function partLayerMixins(markDef, part, compositeMarkConfig, partBaseSpec) {\\n    const {\\n      clip,\\n      color,\\n      opacity\\n    } = markDef;\\n    const mark = markDef.type;\\n\\n    if (markDef[part] || markDef[part] === undefined && compositeMarkConfig[part]) {\\n      return [{ ...partBaseSpec,\\n        mark: { ...compositeMarkConfig[part],\\n          ...(clip ? {\\n            clip\\n          } : {}),\\n          ...(color ? {\\n            color\\n          } : {}),\\n          ...(opacity ? {\\n            opacity\\n          } : {}),\\n          ...(isMarkDef(partBaseSpec.mark) ? partBaseSpec.mark : {\\n            type: partBaseSpec.mark\\n          }),\\n          style: \\\"\\\".concat(mark, \\\"-\\\").concat(part),\\n          ...(isBoolean(markDef[part]) ? {} : markDef[part])\\n        }\\n      }];\\n    }\\n\\n    return [];\\n  }\\n  function compositeMarkContinuousAxis(spec, orient, compositeMark) {\\n    const {\\n      encoding\\n    } = spec;\\n    const continuousAxis = orient === 'vertical' ? 'y' : 'x';\\n    const continuousAxisChannelDef = encoding[continuousAxis]; // Safe to cast because if x is not continuous fielddef, the orient would not be horizontal.\\n\\n    const continuousAxisChannelDef2 = encoding[continuousAxis + '2'];\\n    const continuousAxisChannelDefError = encoding[continuousAxis + 'Error'];\\n    const continuousAxisChannelDefError2 = encoding[continuousAxis + 'Error2'];\\n    return {\\n      continuousAxisChannelDef: filterAggregateFromChannelDef(continuousAxisChannelDef, compositeMark),\\n      continuousAxisChannelDef2: filterAggregateFromChannelDef(continuousAxisChannelDef2, compositeMark),\\n      continuousAxisChannelDefError: filterAggregateFromChannelDef(continuousAxisChannelDefError, compositeMark),\\n      continuousAxisChannelDefError2: filterAggregateFromChannelDef(continuousAxisChannelDefError2, compositeMark),\\n      continuousAxis\\n    };\\n  }\\n\\n  function filterAggregateFromChannelDef(continuousAxisChannelDef, compositeMark) {\\n    if (continuousAxisChannelDef && continuousAxisChannelDef.aggregate) {\\n      const {\\n        aggregate,\\n        ...continuousAxisWithoutAggregate\\n      } = continuousAxisChannelDef;\\n\\n      if (aggregate !== compositeMark) {\\n        warn(errorBarContinuousAxisHasCustomizedAggregate(aggregate, compositeMark));\\n      }\\n\\n      return continuousAxisWithoutAggregate;\\n    } else {\\n      return continuousAxisChannelDef;\\n    }\\n  }\\n\\n  function compositeMarkOrient(spec, compositeMark) {\\n    const {\\n      mark,\\n      encoding\\n    } = spec;\\n    const {\\n      x,\\n      y\\n    } = encoding;\\n\\n    if (isMarkDef(mark) && mark.orient) {\\n      return mark.orient;\\n    }\\n\\n    if (isContinuousFieldOrDatumDef(x)) {\\n      // x is continuous\\n      if (isContinuousFieldOrDatumDef(y)) {\\n        // both x and y are continuous\\n        const xAggregate = isFieldDef(x) && x.aggregate;\\n        const yAggregate = isFieldDef(y) && y.aggregate;\\n\\n        if (!xAggregate && yAggregate === compositeMark) {\\n          return 'vertical';\\n        } else if (!yAggregate && xAggregate === compositeMark) {\\n          return 'horizontal';\\n        } else if (xAggregate === compositeMark && yAggregate === compositeMark) {\\n          throw new Error('Both x and y cannot have aggregate');\\n        } else {\\n          if (isFieldOrDatumDefForTimeFormat(y) && !isFieldOrDatumDefForTimeFormat(x)) {\\n            // y is temporal but x is not\\n            return 'horizontal';\\n          } // default orientation for two continuous\\n\\n\\n          return 'vertical';\\n        }\\n      }\\n\\n      return 'horizontal';\\n    } else if (isContinuousFieldOrDatumDef(y)) {\\n      // y is continuous but x is not\\n      return 'vertical';\\n    } else {\\n      // Neither x nor y is continuous.\\n      throw new Error(\\\"Need a valid continuous axis for \\\".concat(compositeMark, \\\"s\\\"));\\n    }\\n  }\\n\\n  const BOXPLOT = 'boxplot';\\n  const BOXPLOT_PARTS = ['box', 'median', 'outliers', 'rule', 'ticks'];\\n  const boxPlotNormalizer = new CompositeMarkNormalizer(BOXPLOT, normalizeBoxPlot);\\n  function getBoxPlotType(extent) {\\n    if (isNumber(extent)) {\\n      return 'tukey';\\n    } // Ham: If we ever want to, we could add another extent syntax `{kIQR: number}` for the original [Q1-k*IQR, Q3+k*IQR] whisker and call this boxPlotType = `kIQR`. However, I'm not exposing this for now.\\n\\n\\n    return extent;\\n  }\\n  function normalizeBoxPlot(spec, {\\n    config\\n  }) {\\n    var _markDef$extent;\\n\\n    // Need to initEncoding first so we can infer type\\n    spec = { ...spec,\\n      encoding: normalizeEncoding(spec.encoding, config)\\n    };\\n    const {\\n      mark,\\n      encoding: _encoding,\\n      selection,\\n      projection: _p,\\n      ...outerSpec\\n    } = spec;\\n    const markDef = isMarkDef(mark) ? mark : {\\n      type: mark\\n    }; // TODO(https://github.com/vega/vega-lite/issues/3702): add selection support\\n\\n    if (selection) {\\n      warn(selectionNotSupported('boxplot'));\\n    }\\n\\n    const extent = (_markDef$extent = markDef.extent) !== null && _markDef$extent !== void 0 ? _markDef$extent : config.boxplot.extent;\\n    const sizeValue = getMarkPropOrConfig('size', markDef, // TODO: https://github.com/vega/vega-lite/issues/6245\\n    config);\\n    const boxPlotType = getBoxPlotType(extent);\\n    const {\\n      bins,\\n      timeUnits,\\n      transform,\\n      continuousAxisChannelDef,\\n      continuousAxis,\\n      groupby,\\n      aggregate,\\n      encodingWithoutContinuousAxis,\\n      ticksOrient,\\n      boxOrient,\\n      customTooltipWithoutAggregatedField\\n    } = boxParams(spec, extent, config);\\n    const {\\n      color,\\n      size,\\n      ...encodingWithoutSizeColorAndContinuousAxis\\n    } = encodingWithoutContinuousAxis;\\n\\n    const makeBoxPlotPart = sharedEncoding => {\\n      return makeCompositeAggregatePartFactory(markDef, continuousAxis, continuousAxisChannelDef, sharedEncoding, config.boxplot);\\n    };\\n\\n    const makeBoxPlotExtent = makeBoxPlotPart(encodingWithoutSizeColorAndContinuousAxis);\\n    const makeBoxPlotBox = makeBoxPlotPart(encodingWithoutContinuousAxis);\\n    const makeBoxPlotMidTick = makeBoxPlotPart({ ...encodingWithoutSizeColorAndContinuousAxis,\\n      ...(size ? {\\n        size\\n      } : {})\\n    });\\n    const fiveSummaryTooltipEncoding = getCompositeMarkTooltip([{\\n      fieldPrefix: boxPlotType === 'min-max' ? 'upper_whisker_' : 'max_',\\n      titlePrefix: 'Max'\\n    }, {\\n      fieldPrefix: 'upper_box_',\\n      titlePrefix: 'Q3'\\n    }, {\\n      fieldPrefix: 'mid_box_',\\n      titlePrefix: 'Median'\\n    }, {\\n      fieldPrefix: 'lower_box_',\\n      titlePrefix: 'Q1'\\n    }, {\\n      fieldPrefix: boxPlotType === 'min-max' ? 'lower_whisker_' : 'min_',\\n      titlePrefix: 'Min'\\n    }], continuousAxisChannelDef, encodingWithoutContinuousAxis); // ## Whisker Layers\\n\\n    const endTick = {\\n      type: 'tick',\\n      color: 'black',\\n      opacity: 1,\\n      orient: ticksOrient,\\n      invalid: null,\\n      aria: false\\n    };\\n    const whiskerTooltipEncoding = boxPlotType === 'min-max' ? fiveSummaryTooltipEncoding // for min-max, show five-summary tooltip for whisker\\n    : // for tukey / k-IQR, just show upper/lower-whisker\\n    getCompositeMarkTooltip([{\\n      fieldPrefix: 'upper_whisker_',\\n      titlePrefix: 'Upper Whisker'\\n    }, {\\n      fieldPrefix: 'lower_whisker_',\\n      titlePrefix: 'Lower Whisker'\\n    }], continuousAxisChannelDef, encodingWithoutContinuousAxis);\\n    const whiskerLayers = [...makeBoxPlotExtent({\\n      partName: 'rule',\\n      mark: {\\n        type: 'rule',\\n        invalid: null,\\n        aria: false\\n      },\\n      positionPrefix: 'lower_whisker',\\n      endPositionPrefix: 'lower_box',\\n      extraEncoding: whiskerTooltipEncoding\\n    }), ...makeBoxPlotExtent({\\n      partName: 'rule',\\n      mark: {\\n        type: 'rule',\\n        invalid: null,\\n        aria: false\\n      },\\n      positionPrefix: 'upper_box',\\n      endPositionPrefix: 'upper_whisker',\\n      extraEncoding: whiskerTooltipEncoding\\n    }), ...makeBoxPlotExtent({\\n      partName: 'ticks',\\n      mark: endTick,\\n      positionPrefix: 'lower_whisker',\\n      extraEncoding: whiskerTooltipEncoding\\n    }), ...makeBoxPlotExtent({\\n      partName: 'ticks',\\n      mark: endTick,\\n      positionPrefix: 'upper_whisker',\\n      extraEncoding: whiskerTooltipEncoding\\n    })]; // ## Box Layers\\n    // TODO: support hiding certain mark parts\\n\\n    const boxLayers = [...(boxPlotType !== 'tukey' ? whiskerLayers : []), ...makeBoxPlotBox({\\n      partName: 'box',\\n      mark: {\\n        type: 'bar',\\n        ...(sizeValue ? {\\n          size: sizeValue\\n        } : {}),\\n        orient: boxOrient,\\n        invalid: null,\\n        ariaRoleDescription: 'box'\\n      },\\n      positionPrefix: 'lower_box',\\n      endPositionPrefix: 'upper_box',\\n      extraEncoding: fiveSummaryTooltipEncoding\\n    }), ...makeBoxPlotMidTick({\\n      partName: 'median',\\n      mark: {\\n        type: 'tick',\\n        invalid: null,\\n        ...(isObject(config.boxplot.median) && config.boxplot.median.color ? {\\n          color: config.boxplot.median.color\\n        } : {}),\\n        ...(sizeValue ? {\\n          size: sizeValue\\n        } : {}),\\n        orient: ticksOrient,\\n        aria: false\\n      },\\n      positionPrefix: 'mid_box',\\n      extraEncoding: fiveSummaryTooltipEncoding\\n    })];\\n\\n    if (boxPlotType === 'min-max') {\\n      var _outerSpec$transform;\\n\\n      return { ...outerSpec,\\n        transform: ((_outerSpec$transform = outerSpec.transform) !== null && _outerSpec$transform !== void 0 ? _outerSpec$transform : []).concat(transform),\\n        layer: boxLayers\\n      };\\n    } // Tukey Box Plot\\n\\n\\n    const lowerBoxExpr = \\\"datum[\\\\\\\"lower_box_\\\".concat(continuousAxisChannelDef.field, \\\"\\\\\\\"]\\\");\\n    const upperBoxExpr = \\\"datum[\\\\\\\"upper_box_\\\".concat(continuousAxisChannelDef.field, \\\"\\\\\\\"]\\\");\\n    const iqrExpr = \\\"(\\\".concat(upperBoxExpr, \\\" - \\\").concat(lowerBoxExpr, \\\")\\\");\\n    const lowerWhiskerExpr = \\\"\\\".concat(lowerBoxExpr, \\\" - \\\").concat(extent, \\\" * \\\").concat(iqrExpr);\\n    const upperWhiskerExpr = \\\"\\\".concat(upperBoxExpr, \\\" + \\\").concat(extent, \\\" * \\\").concat(iqrExpr);\\n    const fieldExpr = \\\"datum[\\\\\\\"\\\".concat(continuousAxisChannelDef.field, \\\"\\\\\\\"]\\\");\\n    const joinaggregateTransform = {\\n      joinaggregate: boxParamsQuartiles(continuousAxisChannelDef.field),\\n      groupby\\n    };\\n    const filteredWhiskerSpec = {\\n      transform: [{\\n        filter: \\\"(\\\".concat(lowerWhiskerExpr, \\\" <= \\\").concat(fieldExpr, \\\") && (\\\").concat(fieldExpr, \\\" <= \\\").concat(upperWhiskerExpr, \\\")\\\")\\n      }, {\\n        aggregate: [{\\n          op: 'min',\\n          field: continuousAxisChannelDef.field,\\n          as: 'lower_whisker_' + continuousAxisChannelDef.field\\n        }, {\\n          op: 'max',\\n          field: continuousAxisChannelDef.field,\\n          as: 'upper_whisker_' + continuousAxisChannelDef.field\\n        }, // preserve lower_box / upper_box\\n        {\\n          op: 'min',\\n          field: 'lower_box_' + continuousAxisChannelDef.field,\\n          as: 'lower_box_' + continuousAxisChannelDef.field\\n        }, {\\n          op: 'max',\\n          field: 'upper_box_' + continuousAxisChannelDef.field,\\n          as: 'upper_box_' + continuousAxisChannelDef.field\\n        }, ...aggregate],\\n        groupby\\n      }],\\n      layer: whiskerLayers\\n    };\\n    const {\\n      tooltip,\\n      ...encodingWithoutSizeColorContinuousAxisAndTooltip\\n    } = encodingWithoutSizeColorAndContinuousAxis;\\n    const {\\n      scale,\\n      axis\\n    } = continuousAxisChannelDef;\\n    const title = getTitle(continuousAxisChannelDef);\\n    const axisWithoutTitle = omit(axis, ['title']);\\n    const outlierLayersMixins = partLayerMixins(markDef, 'outliers', config.boxplot, {\\n      transform: [{\\n        filter: \\\"(\\\".concat(fieldExpr, \\\" < \\\").concat(lowerWhiskerExpr, \\\") || (\\\").concat(fieldExpr, \\\" > \\\").concat(upperWhiskerExpr, \\\")\\\")\\n      }],\\n      mark: 'point',\\n      encoding: {\\n        [continuousAxis]: {\\n          field: continuousAxisChannelDef.field,\\n          type: continuousAxisChannelDef.type,\\n          ...(title !== undefined ? {\\n            title\\n          } : {}),\\n          ...(scale !== undefined ? {\\n            scale\\n          } : {}),\\n          // add axis without title since we already added the title above\\n          ...(isEmpty(axisWithoutTitle) ? {} : {\\n            axis: axisWithoutTitle\\n          })\\n        },\\n        ...encodingWithoutSizeColorContinuousAxisAndTooltip,\\n        ...(color ? {\\n          color\\n        } : {}),\\n        ...(customTooltipWithoutAggregatedField ? {\\n          tooltip: customTooltipWithoutAggregatedField\\n        } : {})\\n      }\\n    })[0];\\n    let filteredLayersMixins;\\n    const filteredLayersMixinsTransforms = [...bins, ...timeUnits, joinaggregateTransform];\\n\\n    if (outlierLayersMixins) {\\n      filteredLayersMixins = {\\n        transform: filteredLayersMixinsTransforms,\\n        layer: [outlierLayersMixins, filteredWhiskerSpec]\\n      };\\n    } else {\\n      filteredLayersMixins = filteredWhiskerSpec;\\n      filteredLayersMixins.transform.unshift(...filteredLayersMixinsTransforms);\\n    }\\n\\n    return { ...outerSpec,\\n      layer: [filteredLayersMixins, {\\n        // boxplot\\n        transform,\\n        layer: boxLayers\\n      }]\\n    };\\n  }\\n\\n  function boxParamsQuartiles(continousAxisField) {\\n    return [{\\n      op: 'q1',\\n      field: continousAxisField,\\n      as: 'lower_box_' + continousAxisField\\n    }, {\\n      op: 'q3',\\n      field: continousAxisField,\\n      as: 'upper_box_' + continousAxisField\\n    }];\\n  }\\n\\n  function boxParams(spec, extent, config) {\\n    const orient = compositeMarkOrient(spec, BOXPLOT);\\n    const {\\n      continuousAxisChannelDef,\\n      continuousAxis\\n    } = compositeMarkContinuousAxis(spec, orient, BOXPLOT);\\n    const continuousFieldName = continuousAxisChannelDef.field;\\n    const boxPlotType = getBoxPlotType(extent);\\n    const boxplotSpecificAggregate = [...boxParamsQuartiles(continuousFieldName), {\\n      op: 'median',\\n      field: continuousFieldName,\\n      as: 'mid_box_' + continuousFieldName\\n    }, {\\n      op: 'min',\\n      field: continuousFieldName,\\n      as: (boxPlotType === 'min-max' ? 'lower_whisker_' : 'min_') + continuousFieldName\\n    }, {\\n      op: 'max',\\n      field: continuousFieldName,\\n      as: (boxPlotType === 'min-max' ? 'upper_whisker_' : 'max_') + continuousFieldName\\n    }];\\n    const postAggregateCalculates = boxPlotType === 'min-max' || boxPlotType === 'tukey' ? [] : [// This is for the  original k-IQR, which we do not expose\\n    {\\n      calculate: \\\"datum[\\\\\\\"upper_box_\\\".concat(continuousFieldName, \\\"\\\\\\\"] - datum[\\\\\\\"lower_box_\\\").concat(continuousFieldName, \\\"\\\\\\\"]\\\"),\\n      as: 'iqr_' + continuousFieldName\\n    }, {\\n      calculate: \\\"min(datum[\\\\\\\"upper_box_\\\".concat(continuousFieldName, \\\"\\\\\\\"] + datum[\\\\\\\"iqr_\\\").concat(continuousFieldName, \\\"\\\\\\\"] * \\\").concat(extent, \\\", datum[\\\\\\\"max_\\\").concat(continuousFieldName, \\\"\\\\\\\"])\\\"),\\n      as: 'upper_whisker_' + continuousFieldName\\n    }, {\\n      calculate: \\\"max(datum[\\\\\\\"lower_box_\\\".concat(continuousFieldName, \\\"\\\\\\\"] - datum[\\\\\\\"iqr_\\\").concat(continuousFieldName, \\\"\\\\\\\"] * \\\").concat(extent, \\\", datum[\\\\\\\"min_\\\").concat(continuousFieldName, \\\"\\\\\\\"])\\\"),\\n      as: 'lower_whisker_' + continuousFieldName\\n    }];\\n    const {\\n      [continuousAxis]: oldContinuousAxisChannelDef,\\n      ...oldEncodingWithoutContinuousAxis\\n    } = spec.encoding;\\n    const {\\n      customTooltipWithoutAggregatedField,\\n      filteredEncoding\\n    } = filterTooltipWithAggregatedField(oldEncodingWithoutContinuousAxis);\\n    const {\\n      bins,\\n      timeUnits,\\n      aggregate,\\n      groupby,\\n      encoding: encodingWithoutContinuousAxis\\n    } = extractTransformsFromEncoding(filteredEncoding, config);\\n    const ticksOrient = orient === 'vertical' ? 'horizontal' : 'vertical';\\n    const boxOrient = orient;\\n    const transform = [...bins, ...timeUnits, {\\n      aggregate: [...aggregate, ...boxplotSpecificAggregate],\\n      groupby\\n    }, ...postAggregateCalculates];\\n    return {\\n      bins,\\n      timeUnits,\\n      transform,\\n      groupby,\\n      aggregate,\\n      continuousAxisChannelDef,\\n      continuousAxis,\\n      encodingWithoutContinuousAxis,\\n      ticksOrient,\\n      boxOrient,\\n      customTooltipWithoutAggregatedField\\n    };\\n  }\\n\\n  const ERRORBAR = 'errorbar';\\n  const ERRORBAR_PARTS = ['ticks', 'rule'];\\n  const errorBarNormalizer = new CompositeMarkNormalizer(ERRORBAR, normalizeErrorBar);\\n  function normalizeErrorBar(spec, {\\n    config\\n  }) {\\n    // Need to initEncoding first so we can infer type\\n    spec = { ...spec,\\n      encoding: normalizeEncoding(spec.encoding, config)\\n    };\\n    const {\\n      transform,\\n      continuousAxisChannelDef,\\n      continuousAxis,\\n      encodingWithoutContinuousAxis,\\n      ticksOrient,\\n      markDef,\\n      outerSpec,\\n      tooltipEncoding\\n    } = errorBarParams(spec, ERRORBAR, config);\\n    delete encodingWithoutContinuousAxis['size'];\\n    const makeErrorBarPart = makeCompositeAggregatePartFactory(markDef, continuousAxis, continuousAxisChannelDef, encodingWithoutContinuousAxis, config.errorbar);\\n    const thickness = markDef.thickness;\\n    const size = markDef.size;\\n    const tick = {\\n      type: 'tick',\\n      orient: ticksOrient,\\n      aria: false,\\n      ...(thickness !== undefined ? {\\n        thickness\\n      } : {}),\\n      ...(size !== undefined ? {\\n        size\\n      } : {})\\n    };\\n    const layer = [...makeErrorBarPart({\\n      partName: 'ticks',\\n      mark: tick,\\n      positionPrefix: 'lower',\\n      extraEncoding: tooltipEncoding\\n    }), ...makeErrorBarPart({\\n      partName: 'ticks',\\n      mark: tick,\\n      positionPrefix: 'upper',\\n      extraEncoding: tooltipEncoding\\n    }), ...makeErrorBarPart({\\n      partName: 'rule',\\n      mark: {\\n        type: 'rule',\\n        ariaRoleDescription: 'errorbar',\\n        ...(thickness !== undefined ? {\\n          size: thickness\\n        } : {})\\n      },\\n      positionPrefix: 'lower',\\n      endPositionPrefix: 'upper',\\n      extraEncoding: tooltipEncoding\\n    })];\\n    return { ...outerSpec,\\n      transform,\\n      ...(layer.length > 1 ? {\\n        layer\\n      } : { ...layer[0]\\n      })\\n    };\\n  }\\n\\n  function errorBarOrientAndInputType(spec, compositeMark) {\\n    const {\\n      encoding\\n    } = spec;\\n\\n    if (errorBarIsInputTypeRaw(encoding)) {\\n      return {\\n        orient: compositeMarkOrient(spec, compositeMark),\\n        inputType: 'raw'\\n      };\\n    }\\n\\n    const isTypeAggregatedUpperLower = errorBarIsInputTypeAggregatedUpperLower(encoding);\\n    const isTypeAggregatedError = errorBarIsInputTypeAggregatedError(encoding);\\n    const x = encoding.x;\\n    const y = encoding.y;\\n\\n    if (isTypeAggregatedUpperLower) {\\n      // type is aggregated-upper-lower\\n      if (isTypeAggregatedError) {\\n        throw new Error(\\\"\\\".concat(compositeMark, \\\" cannot be both type aggregated-upper-lower and aggregated-error\\\"));\\n      }\\n\\n      const x2 = encoding.x2;\\n      const y2 = encoding.y2;\\n\\n      if (isFieldOrDatumDef(x2) && isFieldOrDatumDef(y2)) {\\n        // having both x, x2 and y, y2\\n        throw new Error(\\\"\\\".concat(compositeMark, \\\" cannot have both x2 and y2\\\"));\\n      } else if (isFieldOrDatumDef(x2)) {\\n        if (isContinuousFieldOrDatumDef(x)) {\\n          // having x, x2 quantitative and field y, y2 are not specified\\n          return {\\n            orient: 'horizontal',\\n            inputType: 'aggregated-upper-lower'\\n          };\\n        } else {\\n          // having x, x2 that are not both quantitative\\n          throw new Error(\\\"Both x and x2 have to be quantitative in \\\".concat(compositeMark));\\n        }\\n      } else if (isFieldOrDatumDef(y2)) {\\n        // y2 is a FieldDef\\n        if (isContinuousFieldOrDatumDef(y)) {\\n          // having y, y2 quantitative and field x, x2 are not specified\\n          return {\\n            orient: 'vertical',\\n            inputType: 'aggregated-upper-lower'\\n          };\\n        } else {\\n          // having y, y2 that are not both quantitative\\n          throw new Error(\\\"Both y and y2 have to be quantitative in \\\".concat(compositeMark));\\n        }\\n      }\\n\\n      throw new Error('No ranged axis');\\n    } else {\\n      // type is aggregated-error\\n      const xError = encoding.xError;\\n      const xError2 = encoding.xError2;\\n      const yError = encoding.yError;\\n      const yError2 = encoding.yError2;\\n\\n      if (isFieldOrDatumDef(xError2) && !isFieldOrDatumDef(xError)) {\\n        // having xError2 without xError\\n        throw new Error(\\\"\\\".concat(compositeMark, \\\" cannot have xError2 without xError\\\"));\\n      }\\n\\n      if (isFieldOrDatumDef(yError2) && !isFieldOrDatumDef(yError)) {\\n        // having yError2 without yError\\n        throw new Error(\\\"\\\".concat(compositeMark, \\\" cannot have yError2 without yError\\\"));\\n      }\\n\\n      if (isFieldOrDatumDef(xError) && isFieldOrDatumDef(yError)) {\\n        // having both xError and yError\\n        throw new Error(\\\"\\\".concat(compositeMark, \\\" cannot have both xError and yError with both are quantiative\\\"));\\n      } else if (isFieldOrDatumDef(xError)) {\\n        if (isContinuousFieldOrDatumDef(x)) {\\n          // having x and xError that are all quantitative\\n          return {\\n            orient: 'horizontal',\\n            inputType: 'aggregated-error'\\n          };\\n        } else {\\n          // having x, xError, and xError2 that are not all quantitative\\n          throw new Error('All x, xError, and xError2 (if exist) have to be quantitative');\\n        }\\n      } else if (isFieldOrDatumDef(yError)) {\\n        if (isContinuousFieldOrDatumDef(y)) {\\n          // having y and yError that are all quantitative\\n          return {\\n            orient: 'vertical',\\n            inputType: 'aggregated-error'\\n          };\\n        } else {\\n          // having y, yError, and yError2 that are not all quantitative\\n          throw new Error('All y, yError, and yError2 (if exist) have to be quantitative');\\n        }\\n      }\\n\\n      throw new Error('No ranged axis');\\n    }\\n  }\\n\\n  function errorBarIsInputTypeRaw(encoding) {\\n    return (isFieldOrDatumDef(encoding.x) || isFieldOrDatumDef(encoding.y)) && !isFieldOrDatumDef(encoding.x2) && !isFieldOrDatumDef(encoding.y2) && !isFieldOrDatumDef(encoding.xError) && !isFieldOrDatumDef(encoding.xError2) && !isFieldOrDatumDef(encoding.yError) && !isFieldOrDatumDef(encoding.yError2);\\n  }\\n\\n  function errorBarIsInputTypeAggregatedUpperLower(encoding) {\\n    return isFieldOrDatumDef(encoding.x2) || isFieldOrDatumDef(encoding.y2);\\n  }\\n\\n  function errorBarIsInputTypeAggregatedError(encoding) {\\n    return isFieldOrDatumDef(encoding.xError) || isFieldOrDatumDef(encoding.xError2) || isFieldOrDatumDef(encoding.yError) || isFieldOrDatumDef(encoding.yError2);\\n  }\\n\\n  function errorBarParams(spec, compositeMark, config) {\\n    var _outerSpec$transform;\\n\\n    // TODO: use selection\\n    const {\\n      mark,\\n      encoding,\\n      selection,\\n      projection: _p,\\n      ...outerSpec\\n    } = spec;\\n    const markDef = isMarkDef(mark) ? mark : {\\n      type: mark\\n    }; // TODO(https://github.com/vega/vega-lite/issues/3702): add selection support\\n\\n    if (selection) {\\n      warn(selectionNotSupported(compositeMark));\\n    }\\n\\n    const {\\n      orient,\\n      inputType\\n    } = errorBarOrientAndInputType(spec, compositeMark);\\n    const {\\n      continuousAxisChannelDef,\\n      continuousAxisChannelDef2,\\n      continuousAxisChannelDefError,\\n      continuousAxisChannelDefError2,\\n      continuousAxis\\n    } = compositeMarkContinuousAxis(spec, orient, compositeMark);\\n    const {\\n      errorBarSpecificAggregate,\\n      postAggregateCalculates,\\n      tooltipSummary,\\n      tooltipTitleWithFieldName\\n    } = errorBarAggregationAndCalculation(markDef, continuousAxisChannelDef, continuousAxisChannelDef2, continuousAxisChannelDefError, continuousAxisChannelDefError2, inputType, compositeMark, config);\\n    const {\\n      [continuousAxis]: oldContinuousAxisChannelDef,\\n      [continuousAxis === 'x' ? 'x2' : 'y2']: oldContinuousAxisChannelDef2,\\n      [continuousAxis === 'x' ? 'xError' : 'yError']: oldContinuousAxisChannelDefError,\\n      [continuousAxis === 'x' ? 'xError2' : 'yError2']: oldContinuousAxisChannelDefError2,\\n      ...oldEncodingWithoutContinuousAxis\\n    } = encoding;\\n    const {\\n      bins,\\n      timeUnits,\\n      aggregate: oldAggregate,\\n      groupby: oldGroupBy,\\n      encoding: encodingWithoutContinuousAxis\\n    } = extractTransformsFromEncoding(oldEncodingWithoutContinuousAxis, config);\\n    const aggregate = [...oldAggregate, ...errorBarSpecificAggregate];\\n    const groupby = inputType !== 'raw' ? [] : oldGroupBy;\\n    const tooltipEncoding = getCompositeMarkTooltip(tooltipSummary, continuousAxisChannelDef, encodingWithoutContinuousAxis, tooltipTitleWithFieldName);\\n    return {\\n      transform: [...((_outerSpec$transform = outerSpec.transform) !== null && _outerSpec$transform !== void 0 ? _outerSpec$transform : []), ...bins, ...timeUnits, ...(aggregate.length === 0 ? [] : [{\\n        aggregate,\\n        groupby\\n      }]), ...postAggregateCalculates],\\n      groupby,\\n      continuousAxisChannelDef,\\n      continuousAxis,\\n      encodingWithoutContinuousAxis,\\n      ticksOrient: orient === 'vertical' ? 'horizontal' : 'vertical',\\n      markDef,\\n      outerSpec,\\n      tooltipEncoding\\n    };\\n  }\\n\\n  function errorBarAggregationAndCalculation(markDef, continuousAxisChannelDef, continuousAxisChannelDef2, continuousAxisChannelDefError, continuousAxisChannelDefError2, inputType, compositeMark, config) {\\n    let errorBarSpecificAggregate = [];\\n    let postAggregateCalculates = [];\\n    const continuousFieldName = continuousAxisChannelDef.field;\\n    let tooltipSummary;\\n    let tooltipTitleWithFieldName = false;\\n\\n    if (inputType === 'raw') {\\n      const center = markDef.center ? markDef.center : markDef.extent ? markDef.extent === 'iqr' ? 'median' : 'mean' : config.errorbar.center;\\n      const extent = markDef.extent ? markDef.extent : center === 'mean' ? 'stderr' : 'iqr';\\n\\n      if (center === 'median' !== (extent === 'iqr')) {\\n        warn(errorBarCenterIsUsedWithWrongExtent(center, extent, compositeMark));\\n      }\\n\\n      if (extent === 'stderr' || extent === 'stdev') {\\n        errorBarSpecificAggregate = [{\\n          op: extent,\\n          field: continuousFieldName,\\n          as: 'extent_' + continuousFieldName\\n        }, {\\n          op: center,\\n          field: continuousFieldName,\\n          as: 'center_' + continuousFieldName\\n        }];\\n        postAggregateCalculates = [{\\n          calculate: \\\"datum[\\\\\\\"center_\\\".concat(continuousFieldName, \\\"\\\\\\\"] + datum[\\\\\\\"extent_\\\").concat(continuousFieldName, \\\"\\\\\\\"]\\\"),\\n          as: 'upper_' + continuousFieldName\\n        }, {\\n          calculate: \\\"datum[\\\\\\\"center_\\\".concat(continuousFieldName, \\\"\\\\\\\"] - datum[\\\\\\\"extent_\\\").concat(continuousFieldName, \\\"\\\\\\\"]\\\"),\\n          as: 'lower_' + continuousFieldName\\n        }];\\n        tooltipSummary = [{\\n          fieldPrefix: 'center_',\\n          titlePrefix: titleCase(center)\\n        }, {\\n          fieldPrefix: 'upper_',\\n          titlePrefix: getTitlePrefix(center, extent, '+')\\n        }, {\\n          fieldPrefix: 'lower_',\\n          titlePrefix: getTitlePrefix(center, extent, '-')\\n        }];\\n        tooltipTitleWithFieldName = true;\\n      } else {\\n        let centerOp;\\n        let lowerExtentOp;\\n        let upperExtentOp;\\n\\n        if (extent === 'ci') {\\n          centerOp = 'mean';\\n          lowerExtentOp = 'ci0';\\n          upperExtentOp = 'ci1';\\n        } else {\\n          centerOp = 'median';\\n          lowerExtentOp = 'q1';\\n          upperExtentOp = 'q3';\\n        }\\n\\n        errorBarSpecificAggregate = [{\\n          op: lowerExtentOp,\\n          field: continuousFieldName,\\n          as: 'lower_' + continuousFieldName\\n        }, {\\n          op: upperExtentOp,\\n          field: continuousFieldName,\\n          as: 'upper_' + continuousFieldName\\n        }, {\\n          op: centerOp,\\n          field: continuousFieldName,\\n          as: 'center_' + continuousFieldName\\n        }];\\n        tooltipSummary = [{\\n          fieldPrefix: 'upper_',\\n          titlePrefix: title({\\n            field: continuousFieldName,\\n            aggregate: upperExtentOp,\\n            type: 'quantitative'\\n          }, config, {\\n            allowDisabling: false\\n          })\\n        }, {\\n          fieldPrefix: 'lower_',\\n          titlePrefix: title({\\n            field: continuousFieldName,\\n            aggregate: lowerExtentOp,\\n            type: 'quantitative'\\n          }, config, {\\n            allowDisabling: false\\n          })\\n        }, {\\n          fieldPrefix: 'center_',\\n          titlePrefix: title({\\n            field: continuousFieldName,\\n            aggregate: centerOp,\\n            type: 'quantitative'\\n          }, config, {\\n            allowDisabling: false\\n          })\\n        }];\\n      }\\n    } else {\\n      if (markDef.center || markDef.extent) {\\n        warn(errorBarCenterAndExtentAreNotNeeded(markDef.center, markDef.extent));\\n      }\\n\\n      if (inputType === 'aggregated-upper-lower') {\\n        tooltipSummary = [];\\n        postAggregateCalculates = [{\\n          calculate: \\\"datum[\\\\\\\"\\\".concat(continuousAxisChannelDef2.field, \\\"\\\\\\\"]\\\"),\\n          as: 'upper_' + continuousFieldName\\n        }, {\\n          calculate: \\\"datum[\\\\\\\"\\\".concat(continuousFieldName, \\\"\\\\\\\"]\\\"),\\n          as: 'lower_' + continuousFieldName\\n        }];\\n      } else if (inputType === 'aggregated-error') {\\n        tooltipSummary = [{\\n          fieldPrefix: '',\\n          titlePrefix: continuousFieldName\\n        }];\\n        postAggregateCalculates = [{\\n          calculate: \\\"datum[\\\\\\\"\\\".concat(continuousFieldName, \\\"\\\\\\\"] + datum[\\\\\\\"\\\").concat(continuousAxisChannelDefError.field, \\\"\\\\\\\"]\\\"),\\n          as: 'upper_' + continuousFieldName\\n        }];\\n\\n        if (continuousAxisChannelDefError2) {\\n          postAggregateCalculates.push({\\n            calculate: \\\"datum[\\\\\\\"\\\".concat(continuousFieldName, \\\"\\\\\\\"] + datum[\\\\\\\"\\\").concat(continuousAxisChannelDefError2.field, \\\"\\\\\\\"]\\\"),\\n            as: 'lower_' + continuousFieldName\\n          });\\n        } else {\\n          postAggregateCalculates.push({\\n            calculate: \\\"datum[\\\\\\\"\\\".concat(continuousFieldName, \\\"\\\\\\\"] - datum[\\\\\\\"\\\").concat(continuousAxisChannelDefError.field, \\\"\\\\\\\"]\\\"),\\n            as: 'lower_' + continuousFieldName\\n          });\\n        }\\n      }\\n\\n      for (const postAggregateCalculate of postAggregateCalculates) {\\n        tooltipSummary.push({\\n          fieldPrefix: postAggregateCalculate.as.substring(0, 6),\\n          titlePrefix: replaceAll(replaceAll(postAggregateCalculate.calculate, 'datum[\\\"', ''), '\\\"]', '')\\n        });\\n      }\\n    }\\n\\n    return {\\n      postAggregateCalculates,\\n      errorBarSpecificAggregate,\\n      tooltipSummary,\\n      tooltipTitleWithFieldName\\n    };\\n  }\\n\\n  function getTitlePrefix(center, extent, operation) {\\n    return titleCase(center) + ' ' + operation + ' ' + extent;\\n  }\\n\\n  const ERRORBAND = 'errorband';\\n  const ERRORBAND_PARTS = ['band', 'borders'];\\n  const errorBandNormalizer = new CompositeMarkNormalizer(ERRORBAND, normalizeErrorBand);\\n  function normalizeErrorBand(spec, {\\n    config\\n  }) {\\n    // Need to initEncoding first so we can infer type\\n    spec = { ...spec,\\n      encoding: normalizeEncoding(spec.encoding, config)\\n    };\\n    const {\\n      transform,\\n      continuousAxisChannelDef,\\n      continuousAxis,\\n      encodingWithoutContinuousAxis,\\n      markDef,\\n      outerSpec,\\n      tooltipEncoding\\n    } = errorBarParams(spec, ERRORBAND, config);\\n    const errorBandDef = markDef;\\n    const makeErrorBandPart = makeCompositeAggregatePartFactory(errorBandDef, continuousAxis, continuousAxisChannelDef, encodingWithoutContinuousAxis, config.errorband);\\n    const is2D = spec.encoding.x !== undefined && spec.encoding.y !== undefined;\\n    let bandMark = {\\n      type: is2D ? 'area' : 'rect'\\n    };\\n    let bordersMark = {\\n      type: is2D ? 'line' : 'rule'\\n    };\\n    const interpolate = { ...(errorBandDef.interpolate ? {\\n        interpolate: errorBandDef.interpolate\\n      } : {}),\\n      ...(errorBandDef.tension && errorBandDef.interpolate ? {\\n        tension: errorBandDef.tension\\n      } : {})\\n    };\\n\\n    if (is2D) {\\n      bandMark = { ...bandMark,\\n        ...interpolate,\\n        ariaRoleDescription: 'errorband'\\n      };\\n      bordersMark = { ...bordersMark,\\n        ...interpolate,\\n        aria: false\\n      };\\n    } else if (errorBandDef.interpolate) {\\n      warn(errorBand1DNotSupport('interpolate'));\\n    } else if (errorBandDef.tension) {\\n      warn(errorBand1DNotSupport('tension'));\\n    }\\n\\n    return { ...outerSpec,\\n      transform,\\n      layer: [...makeErrorBandPart({\\n        partName: 'band',\\n        mark: bandMark,\\n        positionPrefix: 'lower',\\n        endPositionPrefix: 'upper',\\n        extraEncoding: tooltipEncoding\\n      }), ...makeErrorBandPart({\\n        partName: 'borders',\\n        mark: bordersMark,\\n        positionPrefix: 'lower',\\n        extraEncoding: tooltipEncoding\\n      }), ...makeErrorBandPart({\\n        partName: 'borders',\\n        mark: bordersMark,\\n        positionPrefix: 'upper',\\n        extraEncoding: tooltipEncoding\\n      })]\\n    };\\n  }\\n\\n  /**\\n   * Registry index for all composite mark's normalizer\\n   */\\n  const compositeMarkRegistry = {};\\n  function add(mark, run, parts) {\\n    const normalizer = new CompositeMarkNormalizer(mark, run);\\n    compositeMarkRegistry[mark] = {\\n      normalizer,\\n      parts\\n    };\\n  }\\n  function getAllCompositeMarks() {\\n    return keys(compositeMarkRegistry);\\n  }\\n  add(BOXPLOT, normalizeBoxPlot, BOXPLOT_PARTS);\\n  add(ERRORBAR, normalizeErrorBar, ERRORBAR_PARTS);\\n  add(ERRORBAND, normalizeErrorBand, ERRORBAND_PARTS);\\n\\n  const VL_ONLY_LEGEND_CONFIG = ['gradientHorizontalMaxLength', 'gradientHorizontalMinLength', 'gradientVerticalMaxLength', 'gradientVerticalMinLength', 'unselectedOpacity'];\\n\\n  const HEADER_TITLE_PROPERTIES_MAP = {\\n    titleAlign: 'align',\\n    titleAnchor: 'anchor',\\n    titleAngle: 'angle',\\n    titleBaseline: 'baseline',\\n    titleColor: 'color',\\n    titleFont: 'font',\\n    titleFontSize: 'fontSize',\\n    titleFontStyle: 'fontStyle',\\n    titleFontWeight: 'fontWeight',\\n    titleLimit: 'limit',\\n    titleLineHeight: 'lineHeight',\\n    titleOrient: 'orient',\\n    titlePadding: 'offset'\\n  };\\n  const HEADER_LABEL_PROPERTIES_MAP = {\\n    labelAlign: 'align',\\n    labelAnchor: 'anchor',\\n    labelAngle: 'angle',\\n    labelBaseline: 'baseline',\\n    labelColor: 'color',\\n    labelFont: 'font',\\n    labelFontSize: 'fontSize',\\n    labelFontStyle: 'fontStyle',\\n    labelFontWeight: 'fontWeight',\\n    labelLimit: 'limit',\\n    labelLineHeight: 'lineHeight',\\n    labelOrient: 'orient',\\n    labelPadding: 'offset'\\n  };\\n  const HEADER_TITLE_PROPERTIES = keys(HEADER_TITLE_PROPERTIES_MAP);\\n  const HEADER_LABEL_PROPERTIES = keys(HEADER_LABEL_PROPERTIES_MAP);\\n  const HEADER_CONFIGS_INDEX = {\\n    header: 1,\\n    headerRow: 1,\\n    headerColumn: 1,\\n    headerFacet: 1\\n  };\\n  const HEADER_CONFIGS = keys(HEADER_CONFIGS_INDEX);\\n\\n  const LEGEND_SCALE_CHANNELS = ['size', 'shape', 'fill', 'stroke', 'strokeDash', 'strokeWidth', 'opacity'];\\n  const defaultLegendConfig = {\\n    gradientHorizontalMaxLength: 200,\\n    gradientHorizontalMinLength: 100,\\n    gradientVerticalMaxLength: 200,\\n    gradientVerticalMinLength: 64,\\n    // This is Vega's minimum.\\n    unselectedOpacity: 0.35\\n  };\\n  const COMMON_LEGEND_PROPERTY_INDEX = {\\n    aria: 1,\\n    clipHeight: 1,\\n    columnPadding: 1,\\n    columns: 1,\\n    cornerRadius: 1,\\n    description: 1,\\n    direction: 1,\\n    fillColor: 1,\\n    format: 1,\\n    formatType: 1,\\n    gradientLength: 1,\\n    gradientOpacity: 1,\\n    gradientStrokeColor: 1,\\n    gradientStrokeWidth: 1,\\n    gradientThickness: 1,\\n    gridAlign: 1,\\n    labelAlign: 1,\\n    labelBaseline: 1,\\n    labelColor: 1,\\n    labelFont: 1,\\n    labelFontSize: 1,\\n    labelFontStyle: 1,\\n    labelFontWeight: 1,\\n    labelLimit: 1,\\n    labelOffset: 1,\\n    labelOpacity: 1,\\n    labelOverlap: 1,\\n    labelPadding: 1,\\n    labelSeparation: 1,\\n    legendX: 1,\\n    legendY: 1,\\n    offset: 1,\\n    orient: 1,\\n    padding: 1,\\n    rowPadding: 1,\\n    strokeColor: 1,\\n    symbolDash: 1,\\n    symbolDashOffset: 1,\\n    symbolFillColor: 1,\\n    symbolLimit: 1,\\n    symbolOffset: 1,\\n    symbolOpacity: 1,\\n    symbolSize: 1,\\n    symbolStrokeColor: 1,\\n    symbolStrokeWidth: 1,\\n    symbolType: 1,\\n    tickCount: 1,\\n    tickMinStep: 1,\\n    title: 1,\\n    titleAlign: 1,\\n    titleAnchor: 1,\\n    titleBaseline: 1,\\n    titleColor: 1,\\n    titleFont: 1,\\n    titleFontSize: 1,\\n    titleFontStyle: 1,\\n    titleFontWeight: 1,\\n    titleLimit: 1,\\n    titleLineHeight: 1,\\n    titleOpacity: 1,\\n    titleOrient: 1,\\n    titlePadding: 1,\\n    type: 1,\\n    values: 1,\\n    zindex: 1\\n  };\\n\\n  function assembleParameterSignals(params) {\\n    const signals = [];\\n\\n    for (const param of params || []) {\\n      const {\\n        expr,\\n        bind,\\n        ...rest\\n      } = param;\\n\\n      if (bind && expr) {\\n        // Vega's InitSignal -- apply expr to \\\"init\\\"\\n        const signal = { ...rest,\\n          bind,\\n          init: expr\\n        };\\n        signals.push(signal);\\n      } else {\\n        const signal = { ...rest,\\n          ...(expr ? {\\n            update: expr\\n          } : {}),\\n          ...(bind ? {\\n            bind\\n          } : {})\\n        };\\n        signals.push(signal);\\n      }\\n    }\\n\\n    return signals;\\n  }\\n\\n  const SELECTION_ID = '_vgsid_';\\n  const defaultConfig = {\\n    single: {\\n      on: 'click',\\n      fields: [SELECTION_ID],\\n      resolve: 'global',\\n      empty: 'all',\\n      clear: 'dblclick'\\n    },\\n    multi: {\\n      on: 'click',\\n      fields: [SELECTION_ID],\\n      toggle: 'event.shiftKey',\\n      resolve: 'global',\\n      empty: 'all',\\n      clear: 'dblclick'\\n    },\\n    interval: {\\n      on: '[mousedown, window:mouseup] > window:mousemove!',\\n      encodings: ['x', 'y'],\\n      translate: '[mousedown, window:mouseup] > window:mousemove!',\\n      zoom: 'wheel!',\\n      mark: {\\n        fill: '#333',\\n        fillOpacity: 0.125,\\n        stroke: 'white'\\n      },\\n      resolve: 'global',\\n      clear: 'dblclick'\\n    }\\n  };\\n  function isLegendBinding(bind) {\\n    return !!bind && (bind === 'legend' || !!bind.legend);\\n  }\\n  function isLegendStreamBinding(bind) {\\n    return isLegendBinding(bind) && isObject(bind);\\n  }\\n\\n  /**\\n   * Base layout mixins for V/HConcatSpec, which should not have RowCol<T> generic fo its property.\\n   */\\n\\n  /**\\n   * Base interface for a generalized concatenation specification.\\n   */\\n\\n  /**\\n   * Base interface for a vertical concatenation specification.\\n   */\\n\\n  /**\\n   * Base interface for a horizontal concatenation specification.\\n   */\\n\\n  /** A concat spec without any shortcut/expansion syntax */\\n  function isAnyConcatSpec(spec) {\\n    return isVConcatSpec(spec) || isHConcatSpec(spec) || isConcatSpec(spec);\\n  }\\n  function isConcatSpec(spec) {\\n    return 'concat' in spec;\\n  }\\n  function isVConcatSpec(spec) {\\n    return 'vconcat' in spec;\\n  }\\n  function isHConcatSpec(spec) {\\n    return 'hconcat' in spec;\\n  }\\n\\n  function isFitType(autoSizeType) {\\n    return autoSizeType === 'fit' || autoSizeType === 'fit-x' || autoSizeType === 'fit-y';\\n  }\\n  function getFitType(sizeType) {\\n    return sizeType ? \\\"fit-\\\".concat(getPositionScaleChannel(sizeType)) : 'fit';\\n  }\\n  const TOP_LEVEL_PROPERTIES = ['background', 'padding' // We do not include \\\"autosize\\\" here as it is supported by only unit and layer specs and thus need to be normalized\\n  ];\\n  function extractTopLevelProperties(t, includeParams) {\\n    const o = {};\\n\\n    for (const p of TOP_LEVEL_PROPERTIES) {\\n      if (t && t[p] !== undefined) {\\n        o[p] = signalRefOrValue(t[p]);\\n      }\\n    }\\n\\n    if (includeParams) {\\n      o.params = t.params;\\n    }\\n\\n    return o;\\n  }\\n\\n  /**\\n   * Common properties for all types of specification\\n   */\\n\\n  function isStep(size) {\\n    return isObject(size) && size['step'] !== undefined;\\n  } // TODO(https://github.com/vega/vega-lite/issues/2503): Make this generic so we can support some form of top-down sizing.\\n\\n  /**\\n   * Common properties for specifying width and height of unit and layer specifications.\\n   */\\n\\n  function isFrameMixins(o) {\\n    return o['view'] || o['width'] || o['height'];\\n  }\\n  const DEFAULT_SPACING = 20;\\n  const COMPOSITION_LAYOUT_INDEX = {\\n    align: 1,\\n    bounds: 1,\\n    center: 1,\\n    columns: 1,\\n    spacing: 1\\n  };\\n  const COMPOSITION_LAYOUT_PROPERTIES = keys(COMPOSITION_LAYOUT_INDEX);\\n  function extractCompositionLayout(spec, specType, config) {\\n    const compositionConfig = config[specType];\\n    const layout = {}; // Apply config first\\n\\n    const {\\n      spacing: spacingConfig,\\n      columns\\n    } = compositionConfig;\\n\\n    if (spacingConfig !== undefined) {\\n      layout.spacing = spacingConfig;\\n    }\\n\\n    if (columns !== undefined) {\\n      if (isFacetSpec(spec) && !isFacetMapping(spec.facet) || isConcatSpec(spec)) {\\n        layout.columns = columns;\\n      }\\n    }\\n\\n    if (isVConcatSpec(spec)) {\\n      layout.columns = 1;\\n    } // Then copy properties from the spec\\n\\n\\n    for (const prop of COMPOSITION_LAYOUT_PROPERTIES) {\\n      if (spec[prop] !== undefined) {\\n        if (prop === 'spacing') {\\n          var _spacing$row, _spacing$column;\\n\\n          const spacing = spec[prop];\\n          layout[prop] = isNumber(spacing) ? spacing : {\\n            row: (_spacing$row = spacing.row) !== null && _spacing$row !== void 0 ? _spacing$row : spacingConfig,\\n            column: (_spacing$column = spacing.column) !== null && _spacing$column !== void 0 ? _spacing$column : spacingConfig\\n          };\\n        } else {\\n          layout[prop] = spec[prop];\\n        }\\n      }\\n    }\\n\\n    return layout;\\n  }\\n\\n  function getViewConfigContinuousSize(viewConfig, channel) {\\n    var _viewConfig$channel;\\n\\n    return (_viewConfig$channel = viewConfig[channel]) !== null && _viewConfig$channel !== void 0 ? _viewConfig$channel : viewConfig[channel === 'width' ? 'continuousWidth' : 'continuousHeight']; // get width/height for backwards compatibility\\n  }\\n  function getViewConfigDiscreteStep(viewConfig, channel) {\\n    const size = getViewConfigDiscreteSize(viewConfig, channel);\\n    return isStep(size) ? size.step : DEFAULT_STEP;\\n  }\\n  function getViewConfigDiscreteSize(viewConfig, channel) {\\n    var _viewConfig$channel2;\\n\\n    const size = (_viewConfig$channel2 = viewConfig[channel]) !== null && _viewConfig$channel2 !== void 0 ? _viewConfig$channel2 : viewConfig[channel === 'width' ? 'discreteWidth' : 'discreteHeight']; // get width/height for backwards compatibility\\n\\n    return getFirstDefined(size, {\\n      step: viewConfig.step\\n    });\\n  }\\n  const DEFAULT_STEP = 20;\\n  const defaultViewConfig = {\\n    continuousWidth: 200,\\n    continuousHeight: 200,\\n    step: DEFAULT_STEP\\n  };\\n  const defaultConfig$1 = {\\n    background: 'white',\\n    padding: 5,\\n    timeFormat: '%b %d, %Y',\\n    countTitle: 'Count of Records',\\n    view: defaultViewConfig,\\n    mark: defaultMarkConfig,\\n    arc: {},\\n    area: {},\\n    bar: defaultBarConfig,\\n    circle: {},\\n    geoshape: {},\\n    image: {},\\n    line: {},\\n    point: {},\\n    rect: defaultRectConfig,\\n    rule: {\\n      color: 'black'\\n    },\\n    // Need this to override default color in mark config\\n    square: {},\\n    text: {\\n      color: 'black'\\n    },\\n    // Need this to override default color in mark config\\n    tick: defaultTickConfig,\\n    trail: {},\\n    boxplot: {\\n      size: 14,\\n      extent: 1.5,\\n      box: {},\\n      median: {\\n        color: 'white'\\n      },\\n      outliers: {},\\n      rule: {},\\n      ticks: null\\n    },\\n    errorbar: {\\n      center: 'mean',\\n      rule: true,\\n      ticks: false\\n    },\\n    errorband: {\\n      band: {\\n        opacity: 0.3\\n      },\\n      borders: false\\n    },\\n    scale: defaultScaleConfig,\\n    projection: {},\\n    legend: defaultLegendConfig,\\n    header: {\\n      titlePadding: 10,\\n      labelPadding: 10\\n    },\\n    headerColumn: {},\\n    headerRow: {},\\n    headerFacet: {},\\n    selection: defaultConfig,\\n    style: {},\\n    title: {},\\n    facet: {\\n      spacing: DEFAULT_SPACING\\n    },\\n    concat: {\\n      spacing: DEFAULT_SPACING\\n    }\\n  }; // Tableau10 color palette, copied from `vegaScale.scheme('tableau10')`\\n\\n  const tab10 = ['#4c78a8', '#f58518', '#e45756', '#72b7b2', '#54a24b', '#eeca3b', '#b279a2', '#ff9da6', '#9d755d', '#bab0ac'];\\n  const DEFAULT_FONT_SIZE = {\\n    text: 11,\\n    guideLabel: 10,\\n    guideTitle: 11,\\n    groupTitle: 13,\\n    groupSubtitle: 12\\n  };\\n  const DEFAULT_COLOR = {\\n    blue: tab10[0],\\n    orange: tab10[1],\\n    red: tab10[2],\\n    teal: tab10[3],\\n    green: tab10[4],\\n    yellow: tab10[5],\\n    purple: tab10[6],\\n    pink: tab10[7],\\n    brown: tab10[8],\\n    gray0: '#000',\\n    gray1: '#111',\\n    gray2: '#222',\\n    gray3: '#333',\\n    gray4: '#444',\\n    gray5: '#555',\\n    gray6: '#666',\\n    gray7: '#777',\\n    gray8: '#888',\\n    gray9: '#999',\\n    gray10: '#aaa',\\n    gray11: '#bbb',\\n    gray12: '#ccc',\\n    gray13: '#ddd',\\n    gray14: '#eee',\\n    gray15: '#fff'\\n  };\\n  function colorSignalConfig(color = {}) {\\n    return {\\n      signals: [{\\n        name: 'color',\\n        value: isObject(color) ? { ...DEFAULT_COLOR,\\n          ...color\\n        } : DEFAULT_COLOR\\n      }],\\n      mark: {\\n        color: {\\n          signal: 'color.blue'\\n        }\\n      },\\n      rule: {\\n        color: {\\n          signal: 'color.gray0'\\n        }\\n      },\\n      text: {\\n        color: {\\n          signal: 'color.gray0'\\n        }\\n      },\\n      style: {\\n        'guide-label': {\\n          fill: {\\n            signal: 'color.gray0'\\n          }\\n        },\\n        'guide-title': {\\n          fill: {\\n            signal: 'color.gray0'\\n          }\\n        },\\n        'group-title': {\\n          fill: {\\n            signal: 'color.gray0'\\n          }\\n        },\\n        'group-subtitle': {\\n          fill: {\\n            signal: 'color.gray0'\\n          }\\n        },\\n        cell: {\\n          stroke: {\\n            signal: 'color.gray8'\\n          }\\n        }\\n      },\\n      axis: {\\n        domainColor: {\\n          signal: 'color.gray13'\\n        },\\n        gridColor: {\\n          signal: 'color.gray8'\\n        },\\n        tickColor: {\\n          signal: 'color.gray13'\\n        }\\n      },\\n      range: {\\n        category: [{\\n          signal: 'color.blue'\\n        }, {\\n          signal: 'color.orange'\\n        }, {\\n          signal: 'color.red'\\n        }, {\\n          signal: 'color.teal'\\n        }, {\\n          signal: 'color.green'\\n        }, {\\n          signal: 'color.yellow'\\n        }, {\\n          signal: 'color.purple'\\n        }, {\\n          signal: 'color.pink'\\n        }, {\\n          signal: 'color.brown'\\n        }, {\\n          signal: 'color.grey8'\\n        }]\\n      }\\n    };\\n  }\\n  function fontSizeSignalConfig(fontSize) {\\n    return {\\n      signals: [{\\n        name: 'fontSize',\\n        value: isObject(fontSize) ? { ...DEFAULT_FONT_SIZE,\\n          ...fontSize\\n        } : DEFAULT_FONT_SIZE\\n      }],\\n      text: {\\n        fontSize: {\\n          signal: 'fontSize.text'\\n        }\\n      },\\n      style: {\\n        'guide-label': {\\n          fontSize: {\\n            signal: 'fontSize.guideLabel'\\n          }\\n        },\\n        'guide-title': {\\n          fontSize: {\\n            signal: 'fontSize.guideTitle'\\n          }\\n        },\\n        'group-title': {\\n          fontSize: {\\n            signal: 'fontSize.groupTitle'\\n          }\\n        },\\n        'group-subtitle': {\\n          fontSize: {\\n            signal: 'fontSize.groupSubtitle'\\n          }\\n        }\\n      }\\n    };\\n  }\\n  function fontConfig(font) {\\n    return {\\n      text: {\\n        font\\n      },\\n      style: {\\n        'guide-label': {\\n          font\\n        },\\n        'guide-title': {\\n          font\\n        },\\n        'group-title': {\\n          font\\n        },\\n        'group-subtitle': {\\n          font\\n        }\\n      }\\n    };\\n  }\\n\\n  function getAxisConfigInternal(axisConfig) {\\n    const props = keys(axisConfig || {});\\n    const axisConfigInternal = {};\\n\\n    for (const prop of props) {\\n      const val = axisConfig[prop];\\n      axisConfigInternal[prop] = isConditionalAxisValue(val) ? signalOrValueRefWithCondition(val) : signalRefOrValue(val);\\n    }\\n\\n    return axisConfigInternal;\\n  }\\n\\n  function getStyleConfigInternal(styleConfig) {\\n    const props = keys(styleConfig);\\n    const styleConfigInternal = {};\\n\\n    for (const prop of props) {\\n      // We need to cast to cheat a bit here since styleConfig can be either mark config or axis config\\n      styleConfigInternal[prop] = getAxisConfigInternal(styleConfig[prop]);\\n    }\\n\\n    return styleConfigInternal;\\n  }\\n\\n  const configPropsWithExpr = [...MARK_CONFIGS, ...AXIS_CONFIGS, ...HEADER_CONFIGS, 'background', 'padding', 'legend', 'lineBreak', 'scale', 'style', 'title', 'view'];\\n  /**\\n   * Merge specified config with default config and config for the `color` flag,\\n   * then replace all expressions with signals\\n   */\\n\\n  function initConfig(specifiedConfig = {}) {\\n    const {\\n      color,\\n      font,\\n      fontSize,\\n      ...restConfig\\n    } = specifiedConfig;\\n    const mergedConfig = mergeConfig({}, defaultConfig$1, font ? fontConfig(font) : {}, color ? colorSignalConfig(color) : {}, fontSize ? fontSizeSignalConfig(fontSize) : {}, restConfig || {});\\n    const outputConfig = omit(mergedConfig, configPropsWithExpr);\\n\\n    for (const prop of ['background', 'lineBreak', 'padding']) {\\n      if (mergedConfig[prop]) {\\n        outputConfig[prop] = signalRefOrValue(mergedConfig[prop]);\\n      }\\n    }\\n\\n    for (const markConfigType of MARK_CONFIGS) {\\n      if (mergedConfig[markConfigType]) {\\n        outputConfig[markConfigType] = replaceExprRefInIndex(mergedConfig[markConfigType]);\\n      }\\n    }\\n\\n    for (const axisConfigType of AXIS_CONFIGS) {\\n      if (mergedConfig[axisConfigType]) {\\n        outputConfig[axisConfigType] = getAxisConfigInternal(mergedConfig[axisConfigType]);\\n      }\\n    }\\n\\n    for (const headerConfigType of HEADER_CONFIGS) {\\n      if (mergedConfig[headerConfigType]) {\\n        outputConfig[headerConfigType] = replaceExprRefInIndex(mergedConfig[headerConfigType]);\\n      }\\n    }\\n\\n    if (mergedConfig.legend) {\\n      outputConfig.legend = replaceExprRefInIndex(mergedConfig.legend);\\n    }\\n\\n    if (mergedConfig.scale) {\\n      outputConfig.scale = replaceExprRefInIndex(mergedConfig.scale);\\n    }\\n\\n    if (mergedConfig.style) {\\n      outputConfig.style = getStyleConfigInternal(mergedConfig.style);\\n    }\\n\\n    if (mergedConfig.title) {\\n      outputConfig.title = replaceExprRefInIndex(mergedConfig.title);\\n    }\\n\\n    if (mergedConfig.view) {\\n      outputConfig.view = replaceExprRefInIndex(mergedConfig.view);\\n    }\\n\\n    return outputConfig;\\n  }\\n  const MARK_STYLES = ['view', ...PRIMITIVE_MARKS];\\n  const VL_ONLY_CONFIG_PROPERTIES = ['color', 'fontSize', 'background', // We apply background to the spec directly.\\n  'padding', 'facet', 'concat', 'numberFormat', 'timeFormat', 'countTitle', 'header', 'axisQuantitative', 'axisTemporal', 'axisDiscrete', 'axisPoint', 'axisXBand', 'axisXPoint', 'axisXDiscrete', 'axisXQuantitative', 'axisXTemporal', 'axisYBand', 'axisYPoint', 'axisYDiscrete', 'axisYQuantitative', 'axisYTemporal', 'scale', 'selection', 'overlay' // FIXME: Redesign and unhide this\\n  ];\\n  const VL_ONLY_ALL_MARK_SPECIFIC_CONFIG_PROPERTY_INDEX = {\\n    view: ['continuousWidth', 'continuousHeight', 'discreteWidth', 'discreteHeight', 'step'],\\n    ...VL_ONLY_MARK_SPECIFIC_CONFIG_PROPERTY_INDEX\\n  };\\n  function stripAndRedirectConfig(config) {\\n    config = duplicate(config);\\n\\n    for (const prop of VL_ONLY_CONFIG_PROPERTIES) {\\n      delete config[prop];\\n    }\\n\\n    if (config.axis) {\\n      // delete condition axis config\\n      for (const prop in config.axis) {\\n        if (isConditionalAxisValue(config.axis[prop])) {\\n          delete config.axis[prop];\\n        }\\n      }\\n    }\\n\\n    if (config.legend) {\\n      for (const prop of VL_ONLY_LEGEND_CONFIG) {\\n        delete config.legend[prop];\\n      }\\n    } // Remove Vega-Lite only generic mark config\\n\\n\\n    if (config.mark) {\\n      for (const prop of VL_ONLY_MARK_CONFIG_PROPERTIES) {\\n        delete config.mark[prop];\\n      }\\n\\n      if (config.mark.tooltip && isObject(config.mark.tooltip)) {\\n        delete config.mark.tooltip;\\n      }\\n    }\\n\\n    if (config.params) {\\n      config.signals = (config.signals || []).concat(assembleParameterSignals(config.params));\\n      delete config.params;\\n    }\\n\\n    for (const markType of MARK_STYLES) {\\n      // Remove Vega-Lite-only mark config\\n      for (const prop of VL_ONLY_MARK_CONFIG_PROPERTIES) {\\n        delete config[markType][prop];\\n      } // Remove Vega-Lite only mark-specific config\\n\\n\\n      const vlOnlyMarkSpecificConfigs = VL_ONLY_ALL_MARK_SPECIFIC_CONFIG_PROPERTY_INDEX[markType];\\n\\n      if (vlOnlyMarkSpecificConfigs) {\\n        for (const prop of vlOnlyMarkSpecificConfigs) {\\n          delete config[markType][prop];\\n        }\\n      } // Redirect mark config to config.style so that mark config only affect its own mark type\\n      // without affecting other marks that share the same underlying Vega marks.\\n      // For example, config.rect should not affect bar marks.\\n\\n\\n      redirectConfigToStyleConfig(config, markType);\\n    }\\n\\n    for (const m of getAllCompositeMarks()) {\\n      // Clean up the composite mark config as we don't need them in the output specs anymore\\n      delete config[m];\\n    }\\n\\n    redirectTitleConfig(config); // Remove empty config objects.\\n\\n    for (const prop in config) {\\n      if (isObject(config[prop]) && isEmpty(config[prop])) {\\n        delete config[prop];\\n      }\\n    }\\n\\n    return isEmpty(config) ? undefined : config;\\n  }\\n  /**\\n   *\\n   * Redirect config.title -- so that title config do not affect header labels,\\n   * which also uses `title` directive to implement.\\n   *\\n   * For subtitle configs in config.title, keep them in config.title as header titles never have subtitles.\\n   */\\n\\n  function redirectTitleConfig(config) {\\n    const {\\n      titleMarkConfig,\\n      subtitleMarkConfig,\\n      subtitle\\n    } = extractTitleConfig(config.title); // set config.style if title/subtitleMarkConfig is not an empty object\\n\\n    if (!isEmpty(titleMarkConfig)) {\\n      config.style['group-title'] = { ...config.style['group-title'],\\n        ...titleMarkConfig // config.title has higher precedence than config.style.group-title in Vega\\n\\n      };\\n    }\\n\\n    if (!isEmpty(subtitleMarkConfig)) {\\n      config.style['group-subtitle'] = { ...config.style['group-subtitle'],\\n        ...subtitleMarkConfig\\n      };\\n    } // subtitle part can stay in config.title since header titles do not use subtitle\\n\\n\\n    if (!isEmpty(subtitle)) {\\n      config.title = subtitle;\\n    } else {\\n      delete config.title;\\n    }\\n  }\\n\\n  function redirectConfigToStyleConfig(config, prop, // string = composite mark\\n  toProp, compositeMarkPart) {\\n    var _toProp;\\n\\n    const propConfig = compositeMarkPart ? config[prop][compositeMarkPart] : config[prop];\\n\\n    if (prop === 'view') {\\n      toProp = 'cell'; // View's default style is \\\"cell\\\"\\n    }\\n\\n    const style = { ...propConfig,\\n      ...config.style[(_toProp = toProp) !== null && _toProp !== void 0 ? _toProp : prop]\\n    }; // set config.style if it is not an empty object\\n\\n    if (!isEmpty(style)) {\\n      var _toProp2;\\n\\n      config.style[(_toProp2 = toProp) !== null && _toProp2 !== void 0 ? _toProp2 : prop] = style;\\n    }\\n\\n    if (!compositeMarkPart) {\\n      // For composite mark, so don't delete the whole config yet as we have to do multiple redirections.\\n      delete config[prop];\\n    }\\n  }\\n\\n  /**\\n   * Base interface for a layer specification.\\n   */\\n\\n  /**\\n   * A full layered plot specification, which may contains `encoding` and `projection` properties that will be applied to underlying unit (single-view) specifications.\\n   */\\n\\n  /**\\n   * A layered specification without any shortcut/expansion syntax.\\n   */\\n  function isLayerSpec(spec) {\\n    return 'layer' in spec;\\n  }\\n\\n  function isRepeatSpec(spec) {\\n    return 'repeat' in spec;\\n  }\\n  function isLayerRepeatSpec(spec) {\\n    return !isArray(spec.repeat) && spec.repeat['layer'];\\n  }\\n\\n  class SpecMapper {\\n    map(spec, params) {\\n      if (isFacetSpec(spec)) {\\n        return this.mapFacet(spec, params);\\n      } else if (isRepeatSpec(spec)) {\\n        return this.mapRepeat(spec, params);\\n      } else if (isHConcatSpec(spec)) {\\n        return this.mapHConcat(spec, params);\\n      } else if (isVConcatSpec(spec)) {\\n        return this.mapVConcat(spec, params);\\n      } else if (isConcatSpec(spec)) {\\n        return this.mapConcat(spec, params);\\n      } else {\\n        return this.mapLayerOrUnit(spec, params);\\n      }\\n    }\\n\\n    mapLayerOrUnit(spec, params) {\\n      if (isLayerSpec(spec)) {\\n        return this.mapLayer(spec, params);\\n      } else if (isUnitSpec(spec)) {\\n        return this.mapUnit(spec, params);\\n      }\\n\\n      throw new Error(invalidSpec(spec));\\n    }\\n\\n    mapLayer(spec, params) {\\n      return { ...spec,\\n        layer: spec.layer.map(subspec => this.mapLayerOrUnit(subspec, params))\\n      };\\n    }\\n\\n    mapHConcat(spec, params) {\\n      return { ...spec,\\n        hconcat: spec.hconcat.map(subspec => this.map(subspec, params))\\n      };\\n    }\\n\\n    mapVConcat(spec, params) {\\n      return { ...spec,\\n        vconcat: spec.vconcat.map(subspec => this.map(subspec, params))\\n      };\\n    }\\n\\n    mapConcat(spec, params) {\\n      const {\\n        concat,\\n        ...rest\\n      } = spec;\\n      return { ...rest,\\n        concat: concat.map(subspec => this.map(subspec, params))\\n      };\\n    }\\n\\n    mapFacet(spec, params) {\\n      return { // as any is required here since TS cannot infer that FO may only be FieldName or Field, but not RepeatRef\\n        ...spec,\\n        // TODO: remove \\\"any\\\" once we support all facet listed in https://github.com/vega/vega-lite/issues/2760\\n        spec: this.map(spec.spec, params)\\n      };\\n    }\\n\\n    mapRepeat(spec, params) {\\n      return { ...spec,\\n        // as any is required here since TS cannot infer that the output type satisfies the input type\\n        spec: this.map(spec.spec, params)\\n      };\\n    }\\n\\n  }\\n\\n  const STACK_OFFSET_INDEX = {\\n    zero: 1,\\n    center: 1,\\n    normalize: 1\\n  };\\n  function isStackOffset(s) {\\n    return s in STACK_OFFSET_INDEX;\\n  }\\n  const STACKABLE_MARKS = new Set([ARC, BAR, AREA, RULE, POINT, CIRCLE, SQUARE, LINE, TEXT$1, TICK]);\\n  const STACK_BY_DEFAULT_MARKS = new Set([BAR, AREA, ARC]);\\n\\n  function potentialStackedChannel(encoding, x) {\\n    const y = x === 'x' ? 'y' : 'radius';\\n    const xDef = encoding[x];\\n    const yDef = encoding[y];\\n\\n    if (isFieldDef(xDef) && isFieldDef(yDef)) {\\n      if (channelDefType(xDef) === 'quantitative' && channelDefType(yDef) === 'quantitative') {\\n        if (xDef.stack) {\\n          return x;\\n        } else if (yDef.stack) {\\n          return y;\\n        }\\n\\n        const xAggregate = isFieldDef(xDef) && !!xDef.aggregate;\\n        const yAggregate = isFieldDef(yDef) && !!yDef.aggregate; // if there is no explicit stacking, only apply stack if there is only one aggregate for x or y\\n\\n        if (xAggregate !== yAggregate) {\\n          return xAggregate ? x : y;\\n        } else {\\n          var _xDef$scale, _yDef$scale;\\n\\n          const xScale = (_xDef$scale = xDef.scale) === null || _xDef$scale === void 0 ? void 0 : _xDef$scale.type;\\n          const yScale = (_yDef$scale = yDef.scale) === null || _yDef$scale === void 0 ? void 0 : _yDef$scale.type;\\n\\n          if (xScale && xScale !== 'linear') {\\n            return y;\\n          } else if (yScale && yScale !== 'linear') {\\n            return x;\\n          }\\n        }\\n      } else if (channelDefType(xDef) === 'quantitative') {\\n        return x;\\n      } else if (channelDefType(yDef) === 'quantitative') {\\n        return y;\\n      }\\n    } else if (channelDefType(xDef) === 'quantitative') {\\n      return x;\\n    } else if (channelDefType(yDef) === 'quantitative') {\\n      return y;\\n    }\\n\\n    return undefined;\\n  }\\n\\n  function getDimensionChannel(channel) {\\n    switch (channel) {\\n      case 'x':\\n        return 'y';\\n\\n      case 'y':\\n        return 'x';\\n\\n      case 'theta':\\n        return 'radius';\\n\\n      case 'radius':\\n        return 'theta';\\n    }\\n  } // Note: CompassQL uses this method and only pass in required properties of each argument object.\\n  // If required properties change, make sure to update CompassQL.\\n\\n\\n  function stack(m, encoding, opt = {}) {\\n    const mark = isMarkDef(m) ? m.type : m; // Should have stackable mark\\n\\n    if (!STACKABLE_MARKS.has(mark)) {\\n      return null;\\n    } // Run potential stacked twice, one for Cartesian and another for Polar,\\n    // so text marks can be stacked in any of the coordinates.\\n    // Note: The logic here is not perfectly correct.  If we want to support stacked dot plots where each dot is a pie chart with label, we have to change the stack logic here to separate Cartesian stacking for polar stacking.\\n    // However, since we probably never want to do that, let's just note the limitation here.\\n\\n\\n    const fieldChannel = potentialStackedChannel(encoding, 'x') || potentialStackedChannel(encoding, 'theta');\\n\\n    if (!fieldChannel) {\\n      return null;\\n    }\\n\\n    const stackedFieldDef = encoding[fieldChannel];\\n    const stackedField = isFieldDef(stackedFieldDef) ? vgField(stackedFieldDef, {}) : undefined;\\n    let dimensionChannel = getDimensionChannel(fieldChannel);\\n    let dimensionDef = encoding[dimensionChannel];\\n    let dimensionField = isFieldDef(dimensionDef) ? vgField(dimensionDef, {}) : undefined; // avoid grouping by the stacked field\\n\\n    if (dimensionField === stackedField) {\\n      dimensionField = undefined;\\n      dimensionDef = undefined;\\n      dimensionChannel = undefined;\\n    } // Should have grouping level of detail that is different from the dimension field\\n\\n\\n    const stackBy = NONPOSITION_CHANNELS.reduce((sc, channel) => {\\n      // Ignore tooltip in stackBy (https://github.com/vega/vega-lite/issues/4001)\\n      if (channel !== 'tooltip' && channelHasField(encoding, channel)) {\\n        const channelDef = encoding[channel];\\n\\n        for (const cDef of array(channelDef)) {\\n          const fieldDef = getFieldDef(cDef);\\n\\n          if (fieldDef.aggregate) {\\n            continue;\\n          } // Check whether the channel's field is identical to x/y's field or if the channel is a repeat\\n\\n\\n          const f = vgField(fieldDef, {});\\n\\n          if ( // if fielddef is a repeat, just include it in the stack by\\n          !f || // otherwise, the field must be different from x and y fields.\\n          f !== dimensionField) {\\n            sc.push({\\n              channel,\\n              fieldDef\\n            });\\n          }\\n        }\\n      }\\n\\n      return sc;\\n    }, []); // Automatically determine offset\\n\\n    let offset;\\n\\n    if (stackedFieldDef.stack !== undefined) {\\n      if (isBoolean(stackedFieldDef.stack)) {\\n        offset = stackedFieldDef.stack ? 'zero' : null;\\n      } else {\\n        offset = stackedFieldDef.stack;\\n      }\\n    } else if (stackBy.length > 0 && STACK_BY_DEFAULT_MARKS.has(mark)) {\\n      // Bar and Area with sum ops are automatically stacked by default\\n      offset = 'zero';\\n    }\\n\\n    if (!offset || !isStackOffset(offset)) {\\n      return null;\\n    }\\n\\n    if (isAggregate(encoding) && stackBy.length === 0) {\\n      return null;\\n    } // warn when stacking non-linear\\n\\n\\n    if (stackedFieldDef.scale && stackedFieldDef.scale.type && stackedFieldDef.scale.type !== ScaleType.LINEAR) {\\n      if (opt.disallowNonLinearStack) {\\n        return null;\\n      } else {\\n        warn(cannotStackNonLinearScale(stackedFieldDef.scale.type));\\n      }\\n    } // Check if it is a ranged mark\\n\\n\\n    if (isFieldOrDatumDef(encoding[getSecondaryRangeChannel(fieldChannel)])) {\\n      if (stackedFieldDef.stack !== undefined) {\\n        warn(cannotStackRangedMark(fieldChannel));\\n      }\\n\\n      return null;\\n    } // Warn if stacking non-summative aggregate\\n\\n\\n    if (isFieldDef(stackedFieldDef) && stackedFieldDef.aggregate && !contains(SUM_OPS, stackedFieldDef.aggregate)) {\\n      warn(stackNonSummativeAggregate(stackedFieldDef.aggregate));\\n    }\\n\\n    return {\\n      groupbyChannel: dimensionDef ? dimensionChannel : undefined,\\n      groupbyField: dimensionField,\\n      fieldChannel,\\n      impute: stackedFieldDef.impute === null ? false : isPathMark(mark),\\n      stackBy,\\n      offset\\n    };\\n  }\\n\\n  function dropLineAndPoint(markDef) {\\n    const {\\n      point: _point,\\n      line: _line,\\n      ...mark\\n    } = markDef;\\n    return keys(mark).length > 1 ? mark : mark.type;\\n  }\\n\\n  function dropLineAndPointFromConfig(config) {\\n    for (const mark of ['line', 'area', 'rule', 'trail']) {\\n      if (config[mark]) {\\n        config = { ...config,\\n          // TODO: remove as any\\n          [mark]: omit(config[mark], ['point', 'line'])\\n        };\\n      }\\n    }\\n\\n    return config;\\n  }\\n\\n  function getPointOverlay(markDef, markConfig = {}, encoding) {\\n    if (markDef.point === 'transparent') {\\n      return {\\n        opacity: 0\\n      };\\n    } else if (markDef.point) {\\n      // truthy : true or object\\n      return isObject(markDef.point) ? markDef.point : {};\\n    } else if (markDef.point !== undefined) {\\n      // false or null\\n      return null;\\n    } else {\\n      // undefined (not disabled)\\n      if (markConfig.point || encoding.shape) {\\n        // enable point overlay if config[mark].point is truthy or if encoding.shape is provided\\n        return isObject(markConfig.point) ? markConfig.point : {};\\n      } // markDef.point is defined as falsy\\n\\n\\n      return undefined;\\n    }\\n  }\\n\\n  function getLineOverlay(markDef, markConfig = {}) {\\n    if (markDef.line) {\\n      // true or object\\n      return markDef.line === true ? {} : markDef.line;\\n    } else if (markDef.line !== undefined) {\\n      // false or null\\n      return null;\\n    } else {\\n      // undefined (not disabled)\\n      if (markConfig.line) {\\n        // enable line overlay if config[mark].line is truthy\\n        return markConfig.line === true ? {} : markConfig.line;\\n      } // markDef.point is defined as falsy\\n\\n\\n      return undefined;\\n    }\\n  }\\n\\n  class PathOverlayNormalizer {\\n    constructor() {\\n      _defineProperty(this, \\\"name\\\", 'path-overlay');\\n    }\\n\\n    hasMatchingType(spec, config) {\\n      if (isUnitSpec(spec)) {\\n        const {\\n          mark,\\n          encoding\\n        } = spec;\\n        const markDef = isMarkDef(mark) ? mark : {\\n          type: mark\\n        };\\n\\n        switch (markDef.type) {\\n          case 'line':\\n          case 'rule':\\n          case 'trail':\\n            return !!getPointOverlay(markDef, config[markDef.type], encoding);\\n\\n          case 'area':\\n            return (// false / null are also included as we want to remove the properties\\n              !!getPointOverlay(markDef, config[markDef.type], encoding) || !!getLineOverlay(markDef, config[markDef.type])\\n            );\\n        }\\n      }\\n\\n      return false;\\n    }\\n\\n    run(spec, params, normalize) {\\n      const {\\n        config\\n      } = params;\\n      const {\\n        selection,\\n        projection,\\n        mark,\\n        encoding: e,\\n        ...outerSpec\\n      } = spec; // Need to call normalizeEncoding because we need the inferred types to correctly determine stack\\n\\n      const encoding = normalizeEncoding(e, config);\\n      const markDef = isMarkDef(mark) ? mark : {\\n        type: mark\\n      };\\n      const pointOverlay = getPointOverlay(markDef, config[markDef.type], encoding);\\n      const lineOverlay = markDef.type === 'area' && getLineOverlay(markDef, config[markDef.type]);\\n      const layer = [{ ...(selection ? {\\n          selection\\n        } : {}),\\n        mark: dropLineAndPoint({ // TODO: extract this 0.7 to be shared with default opacity for point/tick/...\\n          ...(markDef.type === 'area' && markDef.opacity === undefined && markDef.fillOpacity === undefined ? {\\n            opacity: 0.7\\n          } : {}),\\n          ...markDef\\n        }),\\n        // drop shape from encoding as this might be used to trigger point overlay\\n        encoding: omit(encoding, ['shape'])\\n      }]; // FIXME: determine rules for applying selections.\\n      // Need to copy stack config to overlayed layer\\n\\n      const stackProps = stack(markDef, encoding);\\n      let overlayEncoding = encoding;\\n\\n      if (stackProps) {\\n        const {\\n          fieldChannel: stackFieldChannel,\\n          offset\\n        } = stackProps;\\n        overlayEncoding = { ...encoding,\\n          [stackFieldChannel]: { ...encoding[stackFieldChannel],\\n            ...(offset ? {\\n              stack: offset\\n            } : {})\\n          }\\n        };\\n      }\\n\\n      if (lineOverlay) {\\n        layer.push({ ...(projection ? {\\n            projection\\n          } : {}),\\n          mark: {\\n            type: 'line',\\n            ...pick(markDef, ['clip', 'interpolate', 'tension', 'tooltip']),\\n            ...lineOverlay\\n          },\\n          encoding: overlayEncoding\\n        });\\n      }\\n\\n      if (pointOverlay) {\\n        layer.push({ ...(projection ? {\\n            projection\\n          } : {}),\\n          mark: {\\n            type: 'point',\\n            opacity: 1,\\n            filled: true,\\n            ...pick(markDef, ['clip', 'tooltip']),\\n            ...pointOverlay\\n          },\\n          encoding: overlayEncoding\\n        });\\n      }\\n\\n      return normalize({ ...outerSpec,\\n        layer\\n      }, { ...params,\\n        config: dropLineAndPointFromConfig(config)\\n      });\\n    }\\n\\n  }\\n\\n  // this is not accurate, but it's not worth making it accurate\\n  class RangeStepNormalizer {\\n    constructor() {\\n      _defineProperty(this, \\\"name\\\", 'RangeStep');\\n    }\\n\\n    hasMatchingType(spec) {\\n      if (isUnitSpec(spec) && spec.encoding) {\\n        for (const channel of POSITION_SCALE_CHANNELS) {\\n          const def = spec.encoding[channel];\\n\\n          if (def && isFieldOrDatumDef(def)) {\\n            var _def$scale;\\n\\n            if (def === null || def === void 0 ? void 0 : (_def$scale = def.scale) === null || _def$scale === void 0 ? void 0 : _def$scale['rangeStep']) {\\n              return true;\\n            }\\n          }\\n        }\\n      }\\n\\n      return false;\\n    }\\n\\n    run(spec) {\\n      const sizeMixins = {};\\n      let encoding = { ...spec.encoding\\n      };\\n\\n      for (const channel of POSITION_SCALE_CHANNELS) {\\n        const sizeType = getSizeChannel(channel);\\n        const def = encoding[channel];\\n\\n        if (def && isFieldOrDatumDef(def)) {\\n          var _def$scale2;\\n\\n          if (def === null || def === void 0 ? void 0 : (_def$scale2 = def.scale) === null || _def$scale2 === void 0 ? void 0 : _def$scale2['rangeStep']) {\\n            const {\\n              scale,\\n              ...defWithoutScale\\n            } = def;\\n            const {\\n              rangeStep,\\n              ...scaleWithoutRangeStep\\n            } = scale;\\n            sizeMixins[sizeType] = {\\n              step: scale['rangeStep']\\n            };\\n            warn(RANGE_STEP_DEPRECATED);\\n            encoding = { ...encoding,\\n              [channel]: { ...defWithoutScale,\\n                ...(isEmpty(scaleWithoutRangeStep) ? {} : {\\n                  scale: scaleWithoutRangeStep\\n                })\\n              }\\n            };\\n          }\\n        }\\n      }\\n\\n      return { ...sizeMixins,\\n        ...spec,\\n        encoding\\n      };\\n    }\\n\\n  }\\n\\n  function replaceRepeaterInFacet(facet, repeater) {\\n    if (!repeater) {\\n      return facet;\\n    }\\n\\n    if (isFacetMapping(facet)) {\\n      return replaceRepeaterInMapping(facet, repeater);\\n    }\\n\\n    return replaceRepeaterInFieldDef(facet, repeater);\\n  }\\n  function replaceRepeaterInEncoding(encoding, repeater) {\\n    if (!repeater) {\\n      return encoding;\\n    }\\n\\n    return replaceRepeaterInMapping(encoding, repeater);\\n  }\\n  /**\\n   * Replaces repeated value and returns if the repeated value is valid.\\n   */\\n\\n  function replaceRepeatInProp(prop, o, repeater) {\\n    const val = o[prop];\\n\\n    if (isRepeatRef(val)) {\\n      if (val.repeat in repeater) {\\n        return { ...o,\\n          [prop]: repeater[val.repeat]\\n        };\\n      } else {\\n        warn(noSuchRepeatedValue(val.repeat));\\n        return undefined;\\n      }\\n    }\\n\\n    return o;\\n  }\\n  /**\\n   * Replace repeater values in a field def with the concrete field name.\\n   */\\n\\n\\n  function replaceRepeaterInFieldDef(fieldDef, repeater) {\\n    fieldDef = replaceRepeatInProp('field', fieldDef, repeater);\\n\\n    if (fieldDef === undefined) {\\n      // the field def should be ignored\\n      return undefined;\\n    } else if (fieldDef === null) {\\n      return null;\\n    }\\n\\n    if (isSortableFieldDef(fieldDef) && isSortField(fieldDef.sort)) {\\n      const sort = replaceRepeatInProp('field', fieldDef.sort, repeater);\\n      fieldDef = { ...fieldDef,\\n        ...(sort ? {\\n          sort\\n        } : {})\\n      };\\n    }\\n\\n    return fieldDef;\\n  }\\n\\n  function replaceRepeaterInFieldOrDatumDef(def, repeater) {\\n    if (isFieldDef(def)) {\\n      return replaceRepeaterInFieldDef(def, repeater);\\n    } else {\\n      const datumDef = replaceRepeatInProp('datum', def, repeater);\\n\\n      if (datumDef !== def && !datumDef.type) {\\n        datumDef.type = 'nominal';\\n      }\\n\\n      return datumDef;\\n    }\\n  }\\n\\n  function replaceRepeaterInChannelDef(channelDef, repeater) {\\n    if (isFieldOrDatumDef(channelDef)) {\\n      const fd = replaceRepeaterInFieldOrDatumDef(channelDef, repeater);\\n\\n      if (fd) {\\n        return fd;\\n      } else if (isConditionalDef(channelDef)) {\\n        return {\\n          condition: channelDef.condition\\n        };\\n      }\\n    } else {\\n      if (hasConditionalFieldOrDatumDef(channelDef)) {\\n        const fd = replaceRepeaterInFieldOrDatumDef(channelDef.condition, repeater);\\n\\n        if (fd) {\\n          return { ...channelDef,\\n            condition: fd\\n          };\\n        } else {\\n          const {\\n            condition,\\n            ...channelDefWithoutCondition\\n          } = channelDef;\\n          return channelDefWithoutCondition;\\n        }\\n      }\\n\\n      return channelDef;\\n    }\\n\\n    return undefined;\\n  }\\n\\n  function replaceRepeaterInMapping(mapping, repeater) {\\n    const out = {};\\n\\n    for (const channel in mapping) {\\n      if (has(mapping, channel)) {\\n        const channelDef = mapping[channel];\\n\\n        if (isArray(channelDef)) {\\n          // array cannot have condition\\n          out[channel] = channelDef. // somehow we need to cast it here\\n          map(cd => replaceRepeaterInChannelDef(cd, repeater)).filter(cd => cd);\\n        } else {\\n          const cd = replaceRepeaterInChannelDef(channelDef, repeater);\\n\\n          if (cd !== undefined) {\\n            out[channel] = cd;\\n          }\\n        }\\n      }\\n    }\\n\\n    return out;\\n  }\\n\\n  class RuleForRangedLineNormalizer {\\n    constructor() {\\n      _defineProperty(this, \\\"name\\\", 'RuleForRangedLine');\\n    }\\n\\n    hasMatchingType(spec) {\\n      if (isUnitSpec(spec)) {\\n        const {\\n          encoding,\\n          mark\\n        } = spec;\\n\\n        if (mark === 'line') {\\n          for (const channel of SECONDARY_RANGE_CHANNEL) {\\n            const mainChannel = getMainRangeChannel(channel);\\n            const mainChannelDef = encoding[mainChannel];\\n\\n            if (encoding[channel]) {\\n              if (isFieldDef(mainChannelDef) && !isBinned(mainChannelDef.bin) || isDatumDef(mainChannelDef)) {\\n                return true;\\n              }\\n            }\\n          }\\n        }\\n      }\\n\\n      return false;\\n    }\\n\\n    run(spec, params, normalize) {\\n      const {\\n        encoding\\n      } = spec;\\n      warn(lineWithRange(!!encoding.x2, !!encoding.y2));\\n      return normalize({ ...spec,\\n        mark: 'rule'\\n      }, params);\\n    }\\n\\n  }\\n\\n  class CoreNormalizer extends SpecMapper {\\n    constructor(...args) {\\n      super(...args);\\n\\n      _defineProperty(this, \\\"nonFacetUnitNormalizers\\\", [boxPlotNormalizer, errorBarNormalizer, errorBandNormalizer, new PathOverlayNormalizer(), new RuleForRangedLineNormalizer(), new RangeStepNormalizer()]);\\n    }\\n\\n    map(spec, params) {\\n      // Special handling for a faceted unit spec as it can return a facet spec, not just a layer or unit spec like a normal unit spec.\\n      if (isUnitSpec(spec)) {\\n        const hasRow = channelHasField(spec.encoding, ROW);\\n        const hasColumn = channelHasField(spec.encoding, COLUMN);\\n        const hasFacet = channelHasField(spec.encoding, FACET);\\n\\n        if (hasRow || hasColumn || hasFacet) {\\n          return this.mapFacetedUnit(spec, params);\\n        }\\n      }\\n\\n      return super.map(spec, params);\\n    } // This is for normalizing non-facet unit\\n\\n\\n    mapUnit(spec, params) {\\n      const {\\n        parentEncoding,\\n        parentProjection\\n      } = params;\\n      const encoding = replaceRepeaterInEncoding(spec.encoding, params.repeater);\\n      const specWithReplacedEncoding = { ...spec,\\n        ...(encoding ? {\\n          encoding\\n        } : {})\\n      };\\n\\n      if (parentEncoding || parentProjection) {\\n        return this.mapUnitWithParentEncodingOrProjection(specWithReplacedEncoding, params);\\n      }\\n\\n      const normalizeLayerOrUnit = this.mapLayerOrUnit.bind(this);\\n\\n      for (const unitNormalizer of this.nonFacetUnitNormalizers) {\\n        if (unitNormalizer.hasMatchingType(specWithReplacedEncoding, params.config)) {\\n          return unitNormalizer.run(specWithReplacedEncoding, params, normalizeLayerOrUnit);\\n        }\\n      }\\n\\n      return specWithReplacedEncoding;\\n    }\\n\\n    mapRepeat(spec, params) {\\n      if (isLayerRepeatSpec(spec)) {\\n        return this.mapLayerRepeat(spec, params);\\n      } else {\\n        return this.mapNonLayerRepeat(spec, params);\\n      }\\n    }\\n\\n    mapLayerRepeat(spec, params) {\\n      const {\\n        repeat,\\n        spec: childSpec,\\n        ...rest\\n      } = spec;\\n      const {\\n        row,\\n        column,\\n        layer\\n      } = repeat;\\n      const {\\n        repeater = {},\\n        repeaterPrefix = ''\\n      } = params;\\n\\n      if (row || column) {\\n        return this.mapRepeat({ ...spec,\\n          repeat: { ...(row ? {\\n              row\\n            } : {}),\\n            ...(column ? {\\n              column\\n            } : {})\\n          },\\n          spec: {\\n            repeat: {\\n              layer\\n            },\\n            spec: childSpec\\n          }\\n        }, params);\\n      } else {\\n        return { ...rest,\\n          layer: layer.map(layerValue => {\\n            const childRepeater = { ...repeater,\\n              layer: layerValue\\n            };\\n            const childName = (childSpec.name || '') + repeaterPrefix + \\\"child__layer_\\\".concat(varName(layerValue));\\n            const child = this.mapLayerOrUnit(childSpec, { ...params,\\n              repeater: childRepeater,\\n              repeaterPrefix: childName\\n            });\\n            child.name = childName;\\n            return child;\\n          })\\n        };\\n      }\\n    }\\n\\n    mapNonLayerRepeat(spec, params) {\\n      var _childSpec$data;\\n\\n      const {\\n        repeat,\\n        spec: childSpec,\\n        data,\\n        ...remainingProperties\\n      } = spec;\\n\\n      if (!isArray(repeat) && spec.columns) {\\n        // is repeat with row/column\\n        spec = omit(spec, ['columns']);\\n        warn(columnsNotSupportByRowCol('repeat'));\\n      }\\n\\n      const concat = [];\\n      const {\\n        repeater = {},\\n        repeaterPrefix = ''\\n      } = params;\\n      const row = !isArray(repeat) && repeat.row || [repeater ? repeater.row : null];\\n      const column = !isArray(repeat) && repeat.column || [repeater ? repeater.column : null];\\n      const repeatValues = isArray(repeat) && repeat || [repeater ? repeater.repeat : null]; // cross product\\n\\n      for (const repeatValue of repeatValues) {\\n        for (const rowValue of row) {\\n          for (const columnValue of column) {\\n            const childRepeater = {\\n              repeat: repeatValue,\\n              row: rowValue,\\n              column: columnValue,\\n              layer: repeater.layer\\n            };\\n            const childName = (childSpec.name || '') + repeaterPrefix + 'child__' + (isArray(repeat) ? \\\"\\\".concat(varName(repeatValue)) : (repeat.row ? \\\"row_\\\".concat(varName(rowValue)) : '') + (repeat.column ? \\\"column_\\\".concat(varName(columnValue)) : ''));\\n            const child = this.map(childSpec, { ...params,\\n              repeater: childRepeater,\\n              repeaterPrefix: childName\\n            });\\n            child.name = childName; // we move data up\\n\\n            concat.push(omit(child, ['data']));\\n          }\\n        }\\n      }\\n\\n      const columns = isArray(repeat) ? spec.columns : repeat.column ? repeat.column.length : 1;\\n      return {\\n        data: (_childSpec$data = childSpec.data) !== null && _childSpec$data !== void 0 ? _childSpec$data : data,\\n        // data from child spec should have precedence\\n        align: 'all',\\n        ...remainingProperties,\\n        columns,\\n        concat\\n      };\\n    }\\n\\n    mapFacet(spec, params) {\\n      const {\\n        facet\\n      } = spec;\\n\\n      if (isFacetMapping(facet) && spec.columns) {\\n        // is facet with row/column\\n        spec = omit(spec, ['columns']);\\n        warn(columnsNotSupportByRowCol('facet'));\\n      }\\n\\n      return super.mapFacet(spec, params);\\n    }\\n\\n    mapUnitWithParentEncodingOrProjection(spec, params) {\\n      const {\\n        encoding,\\n        projection\\n      } = spec;\\n      const {\\n        parentEncoding,\\n        parentProjection,\\n        config\\n      } = params;\\n      const mergedProjection = mergeProjection({\\n        parentProjection,\\n        projection\\n      });\\n      const mergedEncoding = mergeEncoding({\\n        parentEncoding,\\n        encoding: replaceRepeaterInEncoding(encoding, params.repeater)\\n      });\\n      return this.mapUnit({ ...spec,\\n        ...(mergedProjection ? {\\n          projection: mergedProjection\\n        } : {}),\\n        ...(mergedEncoding ? {\\n          encoding: mergedEncoding\\n        } : {})\\n      }, {\\n        config\\n      });\\n    }\\n\\n    mapFacetedUnit(spec, params) {\\n      // New encoding in the inside spec should not contain row / column\\n      // as row/column should be moved to facet\\n      const {\\n        row,\\n        column,\\n        facet,\\n        ...encoding\\n      } = spec.encoding; // Mark and encoding should be moved into the inner spec\\n\\n      const {\\n        mark,\\n        width,\\n        projection,\\n        height,\\n        view,\\n        selection,\\n        encoding: _,\\n        ...outerSpec\\n      } = spec;\\n      const {\\n        facetMapping,\\n        layout\\n      } = this.getFacetMappingAndLayout({\\n        row,\\n        column,\\n        facet\\n      }, params);\\n      const newEncoding = replaceRepeaterInEncoding(encoding, params.repeater);\\n      return this.mapFacet({ ...outerSpec,\\n        ...layout,\\n        // row / column has higher precedence than facet\\n        facet: facetMapping,\\n        spec: { ...(width ? {\\n            width\\n          } : {}),\\n          ...(height ? {\\n            height\\n          } : {}),\\n          ...(view ? {\\n            view\\n          } : {}),\\n          ...(projection ? {\\n            projection\\n          } : {}),\\n          mark,\\n          encoding: newEncoding,\\n          ...(selection ? {\\n            selection\\n          } : {})\\n        }\\n      }, params);\\n    }\\n\\n    getFacetMappingAndLayout(facets, params) {\\n      const {\\n        row,\\n        column,\\n        facet\\n      } = facets;\\n\\n      if (row || column) {\\n        if (facet) {\\n          warn(facetChannelDropped([...(row ? [ROW] : []), ...(column ? [COLUMN] : [])]));\\n        }\\n\\n        const facetMapping = {};\\n        const layout = {};\\n\\n        for (const channel of [ROW, COLUMN]) {\\n          const def = facets[channel];\\n\\n          if (def) {\\n            const {\\n              align,\\n              center,\\n              spacing,\\n              columns,\\n              ...defWithoutLayout\\n            } = def;\\n            facetMapping[channel] = defWithoutLayout;\\n\\n            for (const prop of ['align', 'center', 'spacing']) {\\n              if (def[prop] !== undefined) {\\n                var _layout$prop;\\n\\n                layout[prop] = (_layout$prop = layout[prop]) !== null && _layout$prop !== void 0 ? _layout$prop : {};\\n                layout[prop][channel] = def[prop];\\n              }\\n            }\\n          }\\n        }\\n\\n        return {\\n          facetMapping,\\n          layout\\n        };\\n      } else {\\n        const {\\n          align,\\n          center,\\n          spacing,\\n          columns,\\n          ...facetMapping\\n        } = facet;\\n        return {\\n          facetMapping: replaceRepeaterInFacet(facetMapping, params.repeater),\\n          layout: { ...(align ? {\\n              align\\n            } : {}),\\n            ...(center ? {\\n              center\\n            } : {}),\\n            ...(spacing ? {\\n              spacing\\n            } : {}),\\n            ...(columns ? {\\n              columns\\n            } : {})\\n          }\\n        };\\n      }\\n    }\\n\\n    mapLayer(spec, {\\n      parentEncoding,\\n      parentProjection,\\n      ...otherParams\\n    }) {\\n      // Special handling for extended layer spec\\n      const {\\n        encoding,\\n        projection,\\n        ...rest\\n      } = spec;\\n      const params = { ...otherParams,\\n        parentEncoding: mergeEncoding({\\n          parentEncoding,\\n          encoding,\\n          layer: true\\n        }),\\n        parentProjection: mergeProjection({\\n          parentProjection,\\n          projection\\n        })\\n      };\\n      return super.mapLayer(rest, params);\\n    }\\n\\n  }\\n\\n  function mergeEncoding({\\n    parentEncoding,\\n    encoding = {},\\n    layer\\n  }) {\\n    let merged = {};\\n\\n    if (parentEncoding) {\\n      const channels = new Set([...keys(parentEncoding), ...keys(encoding)]);\\n\\n      for (const channel of channels) {\\n        const channelDef = encoding[channel];\\n        const parentChannelDef = parentEncoding[channel];\\n\\n        if (isFieldOrDatumDef(channelDef)) {\\n          // Field/Datum Def can inherit properties from its parent\\n          // Note that parentChannelDef doesn't have to be a field/datum def if the channelDef is already one.\\n          const mergedChannelDef = { ...parentChannelDef,\\n            ...channelDef\\n          };\\n          merged[channel] = mergedChannelDef;\\n        } else if (hasConditionalFieldOrDatumDef(channelDef)) {\\n          merged[channel] = { ...channelDef,\\n            condition: { ...parentChannelDef,\\n              ...channelDef.condition\\n            }\\n          };\\n        } else if (channelDef || channelDef === null) {\\n          merged[channel] = channelDef;\\n        } else if (layer || isValueDef(parentChannelDef) || isSignalRef(parentChannelDef) || isFieldOrDatumDef(parentChannelDef) || isArray(parentChannelDef)) {\\n          merged[channel] = parentChannelDef;\\n        }\\n      }\\n    } else {\\n      merged = encoding;\\n    }\\n\\n    return !merged || isEmpty(merged) ? undefined : merged;\\n  }\\n\\n  function mergeProjection(opt) {\\n    const {\\n      parentProjection,\\n      projection\\n    } = opt;\\n\\n    if (parentProjection && projection) {\\n      warn(projectionOverridden({\\n        parentProjection,\\n        projection\\n      }));\\n    }\\n\\n    return projection !== null && projection !== void 0 ? projection : parentProjection;\\n  }\\n\\n  function normalize(spec, config) {\\n    if (config === undefined) {\\n      config = initConfig(spec.config);\\n    }\\n\\n    const normalizedSpec = normalizeGenericSpec(spec, config);\\n    const {\\n      width,\\n      height\\n    } = spec;\\n    const autosize = normalizeAutoSize(normalizedSpec, {\\n      width,\\n      height,\\n      autosize: spec.autosize\\n    }, config);\\n    return { ...normalizedSpec,\\n      ...(autosize ? {\\n        autosize\\n      } : {})\\n    };\\n  }\\n  const normalizer = new CoreNormalizer();\\n  /**\\n   * Decompose extended unit specs into composition of pure unit specs.\\n   */\\n\\n  function normalizeGenericSpec(spec, config = {}) {\\n    return normalizer.map(spec, {\\n      config\\n    });\\n  }\\n\\n  function _normalizeAutoSize(autosize) {\\n    return isString(autosize) ? {\\n      type: autosize\\n    } : autosize !== null && autosize !== void 0 ? autosize : {};\\n  }\\n  /**\\n   * Normalize autosize and deal with width or height == \\\"container\\\".\\n   */\\n\\n\\n  function normalizeAutoSize(spec, sizeInfo, config) {\\n    let {\\n      width,\\n      height\\n    } = sizeInfo;\\n    const isFitCompatible = isUnitSpec(spec) || isLayerSpec(spec);\\n    const autosizeDefault = {};\\n\\n    if (!isFitCompatible) {\\n      // If spec is not compatible with autosize == \\\"fit\\\", discard width/height == container\\n      if (width == 'container') {\\n        warn(containerSizeNonSingle('width'));\\n        width = undefined;\\n      }\\n\\n      if (height == 'container') {\\n        warn(containerSizeNonSingle('height'));\\n        height = undefined;\\n      }\\n    } else {\\n      // Default autosize parameters to fit when width/height is \\\"container\\\"\\n      if (width == 'container' && height == 'container') {\\n        autosizeDefault.type = 'fit';\\n        autosizeDefault.contains = 'padding';\\n      } else if (width == 'container') {\\n        autosizeDefault.type = 'fit-x';\\n        autosizeDefault.contains = 'padding';\\n      } else if (height == 'container') {\\n        autosizeDefault.type = 'fit-y';\\n        autosizeDefault.contains = 'padding';\\n      }\\n    }\\n\\n    const autosize = {\\n      type: 'pad',\\n      ...autosizeDefault,\\n      ...(config ? _normalizeAutoSize(config.autosize) : {}),\\n      ..._normalizeAutoSize(spec.autosize)\\n    };\\n\\n    if (autosize.type === 'fit' && !isFitCompatible) {\\n      warn(FIT_NON_SINGLE);\\n      autosize.type = 'pad';\\n    }\\n\\n    if (width == 'container' && !(autosize.type == 'fit' || autosize.type == 'fit-x')) {\\n      warn(containerSizeNotCompatibleWithAutosize('width'));\\n    }\\n\\n    if (height == 'container' && !(autosize.type == 'fit' || autosize.type == 'fit-y')) {\\n      warn(containerSizeNotCompatibleWithAutosize('height'));\\n    } // Delete autosize property if it's Vega's default\\n\\n\\n    if (deepEqual(autosize, {\\n      type: 'pad'\\n    })) {\\n      return undefined;\\n    }\\n\\n    return autosize;\\n  }\\n\\n  /**\\n   * Generic class for storing properties that are explicitly specified\\n   * and implicitly determined by the compiler.\\n   * This is important for scale/axis/legend merging as\\n   * we want to prioritize properties that users explicitly specified.\\n   */\\n  // eslint-disable-next-line @typescript-eslint/ban-types\\n\\n  class Split {\\n    constructor(explicit = {}, implicit = {}) {\\n      this.explicit = explicit;\\n      this.implicit = implicit;\\n    }\\n\\n    clone() {\\n      return new Split(duplicate(this.explicit), duplicate(this.implicit));\\n    }\\n\\n    combine() {\\n      // FIXME remove \\\"as any\\\".\\n      // Add \\\"as any\\\" to avoid an error \\\"Spread types may only be created from object types\\\".\\n      return { ...this.explicit,\\n        // Explicit properties comes first\\n        ...this.implicit\\n      };\\n    }\\n\\n    get(key) {\\n      // Explicit has higher precedence\\n      return getFirstDefined(this.explicit[key], this.implicit[key]);\\n    }\\n\\n    getWithExplicit(key) {\\n      // Explicit has higher precedence\\n      if (this.explicit[key] !== undefined) {\\n        return {\\n          explicit: true,\\n          value: this.explicit[key]\\n        };\\n      } else if (this.implicit[key] !== undefined) {\\n        return {\\n          explicit: false,\\n          value: this.implicit[key]\\n        };\\n      }\\n\\n      return {\\n        explicit: false,\\n        value: undefined\\n      };\\n    }\\n\\n    setWithExplicit(key, value) {\\n      if (value.value !== undefined) {\\n        this.set(key, value.value, value.explicit);\\n      }\\n    }\\n\\n    set(key, value, explicit) {\\n      delete this[explicit ? 'implicit' : 'explicit'][key];\\n      this[explicit ? 'explicit' : 'implicit'][key] = value;\\n      return this;\\n    }\\n\\n    copyKeyFromSplit(key, s) {\\n      // Explicit has higher precedence\\n      if (s.explicit[key] !== undefined) {\\n        this.set(key, s.explicit[key], true);\\n      } else if (s.implicit[key] !== undefined) {\\n        this.set(key, s.implicit[key], false);\\n      }\\n    }\\n\\n    copyKeyFromObject(key, s) {\\n      // Explicit has higher precedence\\n      if (s[key] !== undefined) {\\n        this.set(key, s[key], true);\\n      }\\n    }\\n    /**\\n     * Merge split object into this split object. Properties from the other split\\n     * overwrite properties from this split.\\n     */\\n\\n\\n    copyAll(other) {\\n      for (const key of keys(other.combine())) {\\n        const val = other.getWithExplicit(key);\\n        this.setWithExplicit(key, val);\\n      }\\n    }\\n\\n  }\\n  function makeExplicit(value) {\\n    return {\\n      explicit: true,\\n      value\\n    };\\n  }\\n  function makeImplicit(value) {\\n    return {\\n      explicit: false,\\n      value\\n    };\\n  }\\n  function tieBreakByComparing(compare) {\\n    return (v1, v2, property, propertyOf) => {\\n      const diff = compare(v1.value, v2.value);\\n\\n      if (diff > 0) {\\n        return v1;\\n      } else if (diff < 0) {\\n        return v2;\\n      }\\n\\n      return defaultTieBreaker(v1, v2, property, propertyOf);\\n    };\\n  }\\n  function defaultTieBreaker(v1, v2, property, propertyOf) {\\n    if (v1.explicit && v2.explicit) {\\n      warn(mergeConflictingProperty(property, propertyOf, v1.value, v2.value));\\n    } // If equal score, prefer v1.\\n\\n\\n    return v1;\\n  }\\n  function mergeValuesWithExplicit(v1, v2, property, propertyOf, tieBreaker = defaultTieBreaker) {\\n    if (v1 === undefined || v1.value === undefined) {\\n      // For first run\\n      return v2;\\n    }\\n\\n    if (v1.explicit && !v2.explicit) {\\n      return v1;\\n    } else if (v2.explicit && !v1.explicit) {\\n      return v2;\\n    } else if (deepEqual(v1.value, v2.value)) {\\n      return v1;\\n    } else {\\n      return tieBreaker(v1, v2, property, propertyOf);\\n    }\\n  }\\n\\n  /**\\n   * Class to track interesting properties (see https://15721.courses.cs.cmu.edu/spring2016/papers/graefe-ieee1995.pdf)\\n   * about how fields have been parsed or whether they have been derived in a transform. We use this to not parse the\\n   * same field again (or differently).\\n   */\\n  class AncestorParse extends Split {\\n    constructor(explicit = {}, implicit = {}, parseNothing = false) {\\n      super(explicit, implicit);\\n      this.explicit = explicit;\\n      this.implicit = implicit;\\n      this.parseNothing = parseNothing;\\n    }\\n\\n    clone() {\\n      const clone = super.clone();\\n      clone.parseNothing = this.parseNothing;\\n      return clone;\\n    }\\n\\n  }\\n\\n  /*\\n   * Constants and utilities for data.\\n   */\\n  // eslint-disable-next-line @typescript-eslint/ban-types\\n  function isUrlData(data) {\\n    return 'url' in data;\\n  }\\n  function isInlineData(data) {\\n    return 'values' in data;\\n  }\\n  function isNamedData(data) {\\n    return 'name' in data && !isUrlData(data) && !isInlineData(data) && !isGenerator(data);\\n  }\\n  function isGenerator(data) {\\n    return data && (isSequenceGenerator(data) || isSphereGenerator(data) || isGraticuleGenerator(data));\\n  }\\n  function isSequenceGenerator(data) {\\n    return 'sequence' in data;\\n  }\\n  function isSphereGenerator(data) {\\n    return 'sphere' in data;\\n  }\\n  function isGraticuleGenerator(data) {\\n    return 'graticule' in data;\\n  }\\n  let DataSourceType;\\n\\n  (function (DataSourceType) {\\n    DataSourceType[DataSourceType[\\\"Raw\\\"] = 0] = \\\"Raw\\\";\\n    DataSourceType[DataSourceType[\\\"Main\\\"] = 1] = \\\"Main\\\";\\n    DataSourceType[DataSourceType[\\\"Row\\\"] = 2] = \\\"Row\\\";\\n    DataSourceType[DataSourceType[\\\"Column\\\"] = 3] = \\\"Column\\\";\\n    DataSourceType[DataSourceType[\\\"Lookup\\\"] = 4] = \\\"Lookup\\\";\\n  })(DataSourceType || (DataSourceType = {}));\\n\\n  function isFilter(t) {\\n    return 'filter' in t;\\n  }\\n  function isImputeSequence(t) {\\n    return (t === null || t === void 0 ? void 0 : t['stop']) !== undefined;\\n  }\\n  function isLookup(t) {\\n    return 'lookup' in t;\\n  }\\n  function isLookupData(from) {\\n    return 'data' in from;\\n  }\\n  function isLookupSelection(from) {\\n    return 'selection' in from;\\n  }\\n  function isPivot(t) {\\n    return 'pivot' in t;\\n  }\\n  function isDensity(t) {\\n    return 'density' in t;\\n  }\\n  function isQuantile(t) {\\n    return 'quantile' in t;\\n  }\\n  function isRegression(t) {\\n    return 'regression' in t;\\n  }\\n  function isLoess(t) {\\n    return 'loess' in t;\\n  }\\n  function isSample(t) {\\n    return 'sample' in t;\\n  }\\n  function isWindow(t) {\\n    return 'window' in t;\\n  }\\n  function isJoinAggregate(t) {\\n    return 'joinaggregate' in t;\\n  }\\n  function isFlatten(t) {\\n    return 'flatten' in t;\\n  }\\n  function isCalculate(t) {\\n    return 'calculate' in t;\\n  }\\n  function isBin(t) {\\n    return 'bin' in t;\\n  }\\n  function isImpute(t) {\\n    return 'impute' in t;\\n  }\\n  function isTimeUnit(t) {\\n    return 'timeUnit' in t;\\n  }\\n  function isAggregate$1(t) {\\n    return 'aggregate' in t;\\n  }\\n  function isStack(t) {\\n    return 'stack' in t;\\n  }\\n  function isFold(t) {\\n    return 'fold' in t;\\n  }\\n  function normalizeTransform(transform) {\\n    return transform.map(t => {\\n      if (isFilter(t)) {\\n        return {\\n          filter: normalizeLogicalComposition(t.filter, normalizePredicate)\\n        };\\n      }\\n\\n      return t;\\n    });\\n  }\\n\\n  const VIEW = 'view',\\n        LBRACK = '[',\\n        RBRACK = ']',\\n        LBRACE = '{',\\n        RBRACE = '}',\\n        COLON = ':',\\n        COMMA = ',',\\n        NAME = '@',\\n        GT = '>',\\n        ILLEGAL = /[[\\\\]{}]/,\\n        DEFAULT_MARKS = {\\n    '*': 1,\\n    arc: 1,\\n    area: 1,\\n    group: 1,\\n    image: 1,\\n    line: 1,\\n    path: 1,\\n    rect: 1,\\n    rule: 1,\\n    shape: 1,\\n    symbol: 1,\\n    text: 1,\\n    trail: 1\\n  };\\n  let DEFAULT_SOURCE, MARKS;\\n  /**\\n   * Parse an event selector string.\\n   * Returns an array of event stream definitions.\\n   */\\n\\n  function eventSelector(selector, source, marks) {\\n    DEFAULT_SOURCE = source || VIEW;\\n    MARKS = marks || DEFAULT_MARKS;\\n    return parseMerge(selector.trim()).map(parseSelector);\\n  }\\n\\n  function isMarkType(type) {\\n    return MARKS[type];\\n  }\\n\\n  function find(s, i, endChar, pushChar, popChar) {\\n    const n = s.length;\\n    let count = 0,\\n        c;\\n\\n    for (; i < n; ++i) {\\n      c = s[i];\\n      if (!count && c === endChar) return i;else if (popChar && popChar.indexOf(c) >= 0) --count;else if (pushChar && pushChar.indexOf(c) >= 0) ++count;\\n    }\\n\\n    return i;\\n  }\\n\\n  function parseMerge(s) {\\n    const output = [],\\n          n = s.length;\\n    let start = 0,\\n        i = 0;\\n\\n    while (i < n) {\\n      i = find(s, i, COMMA, LBRACK + LBRACE, RBRACK + RBRACE);\\n      output.push(s.substring(start, i).trim());\\n      start = ++i;\\n    }\\n\\n    if (output.length === 0) {\\n      throw 'Empty event selector: ' + s;\\n    }\\n\\n    return output;\\n  }\\n\\n  function parseSelector(s) {\\n    return s[0] === '[' ? parseBetween(s) : parseStream(s);\\n  }\\n\\n  function parseBetween(s) {\\n    const n = s.length;\\n    let i = 1,\\n        b;\\n    i = find(s, i, RBRACK, LBRACK, RBRACK);\\n\\n    if (i === n) {\\n      throw 'Empty between selector: ' + s;\\n    }\\n\\n    b = parseMerge(s.substring(1, i));\\n\\n    if (b.length !== 2) {\\n      throw 'Between selector must have two elements: ' + s;\\n    }\\n\\n    s = s.slice(i + 1).trim();\\n\\n    if (s[0] !== GT) {\\n      throw 'Expected \\\\'>\\\\' after between selector: ' + s;\\n    }\\n\\n    b = b.map(parseSelector);\\n    const stream = parseSelector(s.slice(1).trim());\\n\\n    if (stream.between) {\\n      return {\\n        between: b,\\n        stream: stream\\n      };\\n    } else {\\n      stream.between = b;\\n    }\\n\\n    return stream;\\n  }\\n\\n  function parseStream(s) {\\n    const stream = {\\n      source: DEFAULT_SOURCE\\n    },\\n          source = [];\\n    let throttle = [0, 0],\\n        markname = 0,\\n        start = 0,\\n        n = s.length,\\n        i = 0,\\n        j,\\n        filter; // extract throttle from end\\n\\n    if (s[n - 1] === RBRACE) {\\n      i = s.lastIndexOf(LBRACE);\\n\\n      if (i >= 0) {\\n        try {\\n          throttle = parseThrottle(s.substring(i + 1, n - 1));\\n        } catch (e) {\\n          throw 'Invalid throttle specification: ' + s;\\n        }\\n\\n        s = s.slice(0, i).trim();\\n        n = s.length;\\n      } else throw 'Unmatched right brace: ' + s;\\n\\n      i = 0;\\n    }\\n\\n    if (!n) throw s; // set name flag based on first char\\n\\n    if (s[0] === NAME) markname = ++i; // extract first part of multi-part stream selector\\n\\n    j = find(s, i, COLON);\\n\\n    if (j < n) {\\n      source.push(s.substring(start, j).trim());\\n      start = i = ++j;\\n    } // extract remaining part of stream selector\\n\\n\\n    i = find(s, i, LBRACK);\\n\\n    if (i === n) {\\n      source.push(s.substring(start, n).trim());\\n    } else {\\n      source.push(s.substring(start, i).trim());\\n      filter = [];\\n      start = ++i;\\n      if (start === n) throw 'Unmatched left bracket: ' + s;\\n    } // extract filters\\n\\n\\n    while (i < n) {\\n      i = find(s, i, RBRACK);\\n      if (i === n) throw 'Unmatched left bracket: ' + s;\\n      filter.push(s.substring(start, i).trim());\\n      if (i < n - 1 && s[++i] !== LBRACK) throw 'Expected left bracket: ' + s;\\n      start = ++i;\\n    } // marshall event stream specification\\n\\n\\n    if (!(n = source.length) || ILLEGAL.test(source[n - 1])) {\\n      throw 'Invalid event selector: ' + s;\\n    }\\n\\n    if (n > 1) {\\n      stream.type = source[1];\\n\\n      if (markname) {\\n        stream.markname = source[0].slice(1);\\n      } else if (isMarkType(source[0])) {\\n        stream.marktype = source[0];\\n      } else {\\n        stream.source = source[0];\\n      }\\n    } else {\\n      stream.type = source[0];\\n    }\\n\\n    if (stream.type.slice(-1) === '!') {\\n      stream.consume = true;\\n      stream.type = stream.type.slice(0, -1);\\n    }\\n\\n    if (filter != null) stream.filter = filter;\\n    if (throttle[0]) stream.throttle = throttle[0];\\n    if (throttle[1]) stream.debounce = throttle[1];\\n    return stream;\\n  }\\n\\n  function parseThrottle(s) {\\n    const a = s.split(COMMA);\\n    if (!s.length || a.length > 2) throw s;\\n    return a.map(_ => {\\n      const x = +_;\\n      if (x !== x) throw s;\\n      return x;\\n    });\\n  }\\n\\n  /**\\n   * Return a mixin that includes a Vega production rule for a Vega-Lite conditional channel definition\\n   * or a simple mixin if channel def has no condition.\\n   */\\n  function wrapCondition(model, channelDef, vgChannel, refFn) {\\n    const condition = isConditionalDef(channelDef) && channelDef.condition;\\n    const valueRef = refFn(channelDef);\\n\\n    if (condition) {\\n      const conditions = array(condition);\\n      const vgConditions = conditions.map(c => {\\n        const conditionValueRef = refFn(c);\\n        const test = isConditionalSelection(c) ? parseSelectionPredicate(model, c.selection) // FIXME: remove casting once TS is no longer dumb about it\\n        : expression(model, c.test); // FIXME: remove casting once TS is no longer dumb about it\\n\\n        return {\\n          test,\\n          ...conditionValueRef\\n        };\\n      });\\n      return {\\n        [vgChannel]: [...vgConditions, ...(valueRef !== undefined ? [valueRef] : [])]\\n      };\\n    } else {\\n      return valueRef !== undefined ? {\\n        [vgChannel]: valueRef\\n      } : {};\\n    }\\n  }\\n\\n  function text(model, channel = 'text') {\\n    const channelDef = model.encoding[channel];\\n    return wrapCondition(model, channelDef, channel, cDef => textRef(cDef, model.config));\\n  }\\n  function textRef(channelDef, config, expr = 'datum') {\\n    // text\\n    if (channelDef) {\\n      if (isValueDef(channelDef)) {\\n        return signalOrValueRef(channelDef.value);\\n      }\\n\\n      if (isFieldOrDatumDef(channelDef)) {\\n        const {\\n          format,\\n          formatType\\n        } = getFormatMixins(channelDef);\\n        return formatSignalRef({\\n          fieldOrDatumDef: channelDef,\\n          format,\\n          formatType,\\n          expr,\\n          config\\n        });\\n      }\\n    }\\n\\n    return undefined;\\n  }\\n\\n  function tooltip(model, opt = {}) {\\n    const {\\n      encoding,\\n      markDef,\\n      config,\\n      stack\\n    } = model;\\n    const channelDef = encoding.tooltip;\\n\\n    if (isArray(channelDef)) {\\n      return {\\n        tooltip: tooltipRefForEncoding({\\n          tooltip: channelDef\\n        }, stack, config, opt)\\n      };\\n    } else {\\n      const datum = opt.reactiveGeom ? 'datum.datum' : 'datum';\\n      return wrapCondition(model, channelDef, 'tooltip', cDef => {\\n        // use valueRef based on channelDef first\\n        const tooltipRefFromChannelDef = textRef(cDef, config, datum);\\n\\n        if (tooltipRefFromChannelDef) {\\n          return tooltipRefFromChannelDef;\\n        }\\n\\n        if (cDef === null) {\\n          // Allow using encoding.tooltip = null to disable tooltip\\n          return undefined;\\n        }\\n\\n        let markTooltip = getMarkPropOrConfig('tooltip', markDef, config);\\n\\n        if (markTooltip === true) {\\n          markTooltip = {\\n            content: 'encoding'\\n          };\\n        }\\n\\n        if (isString(markTooltip)) {\\n          return {\\n            value: markTooltip\\n          };\\n        } else if (isObject(markTooltip)) {\\n          // `tooltip` is `{fields: 'encodings' | 'fields'}`\\n          if (isSignalRef(markTooltip)) {\\n            return markTooltip;\\n          } else if (markTooltip.content === 'encoding') {\\n            return tooltipRefForEncoding(encoding, stack, config, opt);\\n          } else {\\n            return {\\n              signal: datum\\n            };\\n          }\\n        }\\n\\n        return undefined;\\n      });\\n    }\\n  }\\n  function tooltipData(encoding, stack, config, {\\n    reactiveGeom\\n  } = {}) {\\n    const toSkip = {};\\n    const expr = reactiveGeom ? 'datum.datum' : 'datum';\\n    const tuples = [];\\n\\n    function add(fDef, channel) {\\n      var _value;\\n\\n      const mainChannel = getMainRangeChannel(channel);\\n      const fieldDef = isTypedFieldDef(fDef) ? fDef : { ...fDef,\\n        type: encoding[mainChannel].type // for secondary field def, copy type from main channel\\n\\n      };\\n      const title = fieldDef.title || defaultTitle(fieldDef, config);\\n      const key = array(title).join(', ');\\n      let value;\\n\\n      if (isXorY(channel)) {\\n        const channel2 = channel === 'x' ? 'x2' : 'y2';\\n        const fieldDef2 = getFieldDef(encoding[channel2]);\\n\\n        if (isBinned(fieldDef.bin) && fieldDef2) {\\n          const startField = vgField(fieldDef, {\\n            expr\\n          });\\n          const endField = vgField(fieldDef2, {\\n            expr\\n          });\\n          const {\\n            format,\\n            formatType\\n          } = getFormatMixins(fieldDef);\\n          value = binFormatExpression(startField, endField, format, formatType, config);\\n          toSkip[channel2] = true;\\n        } else if (stack && stack.fieldChannel === channel && stack.offset === 'normalize') {\\n          const {\\n            format,\\n            formatType\\n          } = getFormatMixins(fieldDef);\\n          value = formatSignalRef({\\n            fieldOrDatumDef: fieldDef,\\n            format,\\n            formatType,\\n            expr,\\n            config,\\n            normalizeStack: true\\n          }).signal;\\n        }\\n      }\\n\\n      value = (_value = value) !== null && _value !== void 0 ? _value : textRef(fieldDef, config, expr).signal;\\n      tuples.push({\\n        channel,\\n        key,\\n        value\\n      });\\n    }\\n\\n    forEach(encoding, (channelDef, channel) => {\\n      if (isFieldDef(channelDef)) {\\n        add(channelDef, channel);\\n      } else if (hasConditionalFieldDef(channelDef)) {\\n        add(channelDef.condition, channel);\\n      }\\n    });\\n    const out = {};\\n\\n    for (const {\\n      channel,\\n      key,\\n      value\\n    } of tuples) {\\n      if (!toSkip[channel] && !out[key]) {\\n        out[key] = value;\\n      }\\n    }\\n\\n    return out;\\n  }\\n  function tooltipRefForEncoding(encoding, stack, config, {\\n    reactiveGeom\\n  } = {}) {\\n    const data = tooltipData(encoding, stack, config, {\\n      reactiveGeom\\n    });\\n    const keyValues = entries(data).map(([key, value]) => \\\"\\\\\\\"\\\".concat(key, \\\"\\\\\\\": \\\").concat(value));\\n    return keyValues.length > 0 ? {\\n      signal: \\\"{\\\".concat(keyValues.join(', '), \\\"}\\\")\\n    } : undefined;\\n  }\\n\\n  function aria(model) {\\n    const {\\n      markDef,\\n      config\\n    } = model;\\n    const enableAria = getMarkPropOrConfig('aria', markDef, config); // We can ignore other aria properties if ariaHidden is true.\\n\\n    if (enableAria === false) {\\n      // getMarkGroups sets aria to false already so we don't have to set it in the encode block\\n      return {};\\n    }\\n\\n    return { ...(enableAria ? {\\n        aria: enableAria\\n      } : {}),\\n      ...ariaRoleDescription(model),\\n      ...description(model)\\n    };\\n  }\\n\\n  function ariaRoleDescription(model) {\\n    const {\\n      mark,\\n      markDef,\\n      config\\n    } = model;\\n\\n    if (config.aria === false) {\\n      return {};\\n    }\\n\\n    const ariaRoleDesc = getMarkPropOrConfig('ariaRoleDescription', markDef, config);\\n\\n    if (ariaRoleDesc != null) {\\n      return {\\n        ariaRoleDescription: {\\n          value: ariaRoleDesc\\n        }\\n      };\\n    }\\n\\n    return mark in VG_MARK_INDEX ? {} : {\\n      ariaRoleDescription: {\\n        value: mark\\n      }\\n    };\\n  }\\n\\n  function description(model) {\\n    const {\\n      encoding,\\n      markDef,\\n      config,\\n      stack\\n    } = model;\\n    const channelDef = encoding.description;\\n\\n    if (channelDef) {\\n      return wrapCondition(model, channelDef, 'description', cDef => textRef(cDef, model.config));\\n    } // Use default from mark def or config if defined.\\n    // Functions in encode usually just return undefined but since we are defining a default below, we need to check the default here.\\n\\n\\n    const descriptionValue = getMarkPropOrConfig('description', markDef, config);\\n\\n    if (descriptionValue != null) {\\n      return {\\n        description: signalOrValueRef(descriptionValue)\\n      };\\n    }\\n\\n    if (config.aria === false) {\\n      return {};\\n    }\\n\\n    const data = tooltipData(encoding, stack, config);\\n\\n    if (isEmpty(data)) {\\n      return undefined;\\n    }\\n\\n    return {\\n      description: {\\n        signal: entries(data).map(([key, value], index) => \\\"\\\\\\\"\\\".concat(index > 0 ? '; ' : '').concat(key, \\\": \\\\\\\" + (\\\").concat(value, \\\")\\\")).join(' + ')\\n      }\\n    };\\n  }\\n\\n  /**\\n   * Return encode for non-positional channels with scales. (Text doesn't have scale.)\\n   */\\n\\n  function nonPosition(channel, model, opt = {}) {\\n    const {\\n      markDef,\\n      encoding,\\n      config\\n    } = model;\\n    const {\\n      vgChannel\\n    } = opt;\\n    let {\\n      defaultRef,\\n      defaultValue\\n    } = opt;\\n\\n    if (defaultRef === undefined) {\\n      var _defaultValue;\\n\\n      // prettier-ignore\\n      defaultValue = (_defaultValue = defaultValue) !== null && _defaultValue !== void 0 ? _defaultValue : getMarkPropOrConfig(channel, markDef, config, {\\n        vgChannel,\\n        ignoreVgConfig: true\\n      });\\n\\n      if (defaultValue !== undefined) {\\n        defaultRef = signalOrValueRef(defaultValue);\\n      }\\n    }\\n\\n    const channelDef = encoding[channel];\\n    return wrapCondition(model, channelDef, vgChannel !== null && vgChannel !== void 0 ? vgChannel : channel, cDef => {\\n      return midPoint({\\n        channel,\\n        channelDef: cDef,\\n        markDef,\\n        config,\\n        scaleName: model.scaleName(channel),\\n        scale: model.getScaleComponent(channel),\\n        stack: null,\\n        // No need to provide stack for non-position as it does not affect mid point\\n        defaultRef\\n      });\\n    });\\n  }\\n\\n  function color(model, opt = {\\n    filled: undefined\\n  }) {\\n    var _opt$filled, _ref, _getMarkPropOrConfig, _getMarkPropOrConfig2;\\n\\n    const {\\n      markDef,\\n      encoding,\\n      config\\n    } = model;\\n    const {\\n      type: markType\\n    } = markDef; // Allow filled to be overridden (for trail's \\\"filled\\\")\\n\\n    const filled = (_opt$filled = opt.filled) !== null && _opt$filled !== void 0 ? _opt$filled : getMarkPropOrConfig('filled', markDef, config);\\n    const transparentIfNeeded = contains(['bar', 'point', 'circle', 'square', 'geoshape'], markType) ? 'transparent' : undefined;\\n    const defaultFill = (_ref = (_getMarkPropOrConfig = getMarkPropOrConfig(filled === true ? 'color' : undefined, markDef, config, {\\n      vgChannel: 'fill'\\n    })) !== null && _getMarkPropOrConfig !== void 0 ? _getMarkPropOrConfig : // need to add this manually as getMarkConfig normally drops config.mark[channel] if vgChannel is specified\\n    config.mark[filled === true && 'color']) !== null && _ref !== void 0 ? _ref : // If there is no fill, always fill symbols, bar, geoshape\\n    // with transparent fills https://github.com/vega/vega-lite/issues/1316\\n    transparentIfNeeded;\\n    const defaultStroke = (_getMarkPropOrConfig2 = getMarkPropOrConfig(filled === false ? 'color' : undefined, markDef, config, {\\n      vgChannel: 'stroke'\\n    })) !== null && _getMarkPropOrConfig2 !== void 0 ? _getMarkPropOrConfig2 : // need to add this manually as getMarkConfig normally drops config.mark[channel] if vgChannel is specified\\n    config.mark[filled === false && 'color'];\\n    const colorVgChannel = filled ? 'fill' : 'stroke';\\n    const fillStrokeMarkDefAndConfig = { ...(defaultFill ? {\\n        fill: signalOrValueRef(defaultFill)\\n      } : {}),\\n      ...(defaultStroke ? {\\n        stroke: signalOrValueRef(defaultStroke)\\n      } : {})\\n    };\\n\\n    if (markDef.color && (filled ? markDef.fill : markDef.stroke)) {\\n      warn(droppingColor('property', {\\n        fill: 'fill' in markDef,\\n        stroke: 'stroke' in markDef\\n      }));\\n    }\\n\\n    return { ...fillStrokeMarkDefAndConfig,\\n      ...nonPosition('color', model, {\\n        vgChannel: colorVgChannel,\\n        defaultValue: filled ? defaultFill : defaultStroke\\n      }),\\n      ...nonPosition('fill', model, {\\n        // if there is encoding.fill, include default fill just in case we have conditional-only fill encoding\\n        defaultValue: encoding.fill ? defaultFill : undefined\\n      }),\\n      ...nonPosition('stroke', model, {\\n        // if there is encoding.stroke, include default fill just in case we have conditional-only stroke encoding\\n        defaultValue: encoding.stroke ? defaultStroke : undefined\\n      })\\n    };\\n  }\\n\\n  function zindex(model) {\\n    const {\\n      encoding,\\n      mark\\n    } = model;\\n    const order = encoding.order;\\n\\n    if (!isPathMark(mark) && isValueDef(order)) {\\n      return wrapCondition(model, order, 'zindex', cd => signalOrValueRef(cd.value));\\n    }\\n\\n    return {};\\n  }\\n\\n  /**\\n   * Utility files for producing Vega ValueRef for marks\\n   */\\n  function getOffset(channel, markDef) {\\n    const offsetChannel = getOffsetChannel(channel); // TODO: in the future read from encoding channel too\\n\\n    const markDefOffsetValue = markDef[offsetChannel];\\n\\n    if (markDefOffsetValue) {\\n      return markDefOffsetValue;\\n    }\\n\\n    return undefined;\\n  }\\n\\n  /**\\n   * Return encode for point (non-band) position channels.\\n   */\\n\\n  function pointPosition(channel, model, {\\n    defaultPos,\\n    vgChannel,\\n    isMidPoint\\n  }) {\\n    const {\\n      encoding,\\n      markDef,\\n      config,\\n      stack\\n    } = model;\\n    const channelDef = encoding[channel];\\n    const channel2Def = encoding[getSecondaryRangeChannel(channel)];\\n    const scaleName = model.scaleName(channel);\\n    const scale = model.getScaleComponent(channel);\\n    const offset = getOffset(channel, markDef); // Get default position or position from mark def\\n\\n    const defaultRef = pointPositionDefaultRef({\\n      model,\\n      defaultPos,\\n      channel,\\n      scaleName,\\n      scale\\n    });\\n    const valueRef = !channelDef && isXorY(channel) && (encoding.latitude || encoding.longitude) ? // use geopoint output if there are lat/long and there is no point position overriding lat/long.\\n    {\\n      field: model.getName(channel)\\n    } : positionRef({\\n      channel,\\n      channelDef,\\n      channel2Def,\\n      markDef,\\n      config,\\n      isMidPoint,\\n      scaleName,\\n      scale,\\n      stack,\\n      offset,\\n      defaultRef\\n    });\\n    return valueRef ? {\\n      [vgChannel || channel]: valueRef\\n    } : undefined;\\n  } // TODO: we need to find a way to refactor these so that scaleName is a part of scale\\n  // but that's complicated. For now, this is a huge step moving forward.\\n\\n  /**\\n   * @return Vega ValueRef for normal x- or y-position without projection\\n   */\\n\\n  function positionRef(params) {\\n    const {\\n      channel,\\n      channelDef,\\n      isMidPoint,\\n      scaleName,\\n      stack,\\n      offset,\\n      markDef,\\n      config\\n    } = params; // This isn't a part of midPoint because we use midPoint for non-position too\\n\\n    if (isFieldOrDatumDef(channelDef) && stack && channel === stack.fieldChannel) {\\n      if (isFieldDef(channelDef)) {\\n        const band = getBand({\\n          channel,\\n          fieldDef: channelDef,\\n          isMidPoint,\\n          markDef,\\n          stack,\\n          config\\n        });\\n\\n        if (band !== undefined) {\\n          return interpolatedSignalRef({\\n            scaleName,\\n            fieldOrDatumDef: channelDef,\\n            // positionRef always have type\\n            startSuffix: 'start',\\n            band,\\n            offset\\n          });\\n        }\\n      } // x or y use stack_end so that stacked line's point mark use stack_end too.\\n\\n\\n      return valueRefForFieldOrDatumDef(channelDef, scaleName, {\\n        suffix: 'end'\\n      }, {\\n        offset\\n      });\\n    }\\n\\n    return midPointRefWithPositionInvalidTest(params);\\n  }\\n  function pointPositionDefaultRef({\\n    model,\\n    defaultPos,\\n    channel,\\n    scaleName,\\n    scale\\n  }) {\\n    const {\\n      markDef,\\n      config\\n    } = model;\\n    return () => {\\n      const mainChannel = getMainRangeChannel(channel);\\n      const vgChannel = getVgPositionChannel(channel);\\n      const definedValueOrConfig = getMarkPropOrConfig(channel, markDef, config, {\\n        vgChannel\\n      });\\n\\n      if (definedValueOrConfig !== undefined) {\\n        return widthHeightValueOrSignalRef(channel, definedValueOrConfig);\\n      }\\n\\n      switch (defaultPos) {\\n        case 'zeroOrMin':\\n        case 'zeroOrMax':\\n          if (scaleName) {\\n            const scaleType = scale.get('type');\\n\\n            if (contains([ScaleType.LOG, ScaleType.TIME, ScaleType.UTC], scaleType)) ; else {\\n              if (scale.domainDefinitelyIncludesZero()) {\\n                return {\\n                  scale: scaleName,\\n                  value: 0\\n                };\\n              }\\n            }\\n          }\\n\\n          if (defaultPos === 'zeroOrMin') {\\n            return mainChannel === 'y' ? {\\n              field: {\\n                group: 'height'\\n              }\\n            } : {\\n              value: 0\\n            };\\n          } else {\\n            // zeroOrMax\\n            switch (mainChannel) {\\n              case 'radius':\\n                // max of radius is min(width, height) / 2\\n                return {\\n                  signal: \\\"min(\\\".concat(model.width.signal, \\\",\\\").concat(model.height.signal, \\\")/2\\\")\\n                };\\n\\n              case 'theta':\\n                return {\\n                  signal: '2*PI'\\n                };\\n\\n              case 'x':\\n                return {\\n                  field: {\\n                    group: 'width'\\n                  }\\n                };\\n\\n              case 'y':\\n                return {\\n                  value: 0\\n                };\\n            }\\n          }\\n\\n          break;\\n\\n        case 'mid':\\n          {\\n            const sizeRef = model[getSizeChannel(channel)];\\n            return { ...sizeRef,\\n              mult: 0.5\\n            };\\n          }\\n      } // defaultPos === null\\n\\n\\n      return undefined;\\n    };\\n  }\\n\\n  const ALIGNED_X_CHANNEL = {\\n    left: 'x',\\n    center: 'xc',\\n    right: 'x2'\\n  };\\n  const BASELINED_Y_CHANNEL = {\\n    top: 'y',\\n    middle: 'yc',\\n    bottom: 'y2'\\n  };\\n  function vgAlignedPositionChannel(channel, markDef, config, defaultAlign = 'middle') {\\n    if (channel === 'radius' || channel === 'theta') {\\n      return getVgPositionChannel(channel);\\n    }\\n\\n    const alignChannel = channel === 'x' ? 'align' : 'baseline';\\n    const align = getMarkPropOrConfig(alignChannel, markDef, config);\\n    let alignExcludingSignal;\\n\\n    if (isSignalRef(align)) {\\n      warn(rangeMarkAlignmentCannotBeExpression(alignChannel));\\n      alignExcludingSignal = undefined;\\n    } else {\\n      alignExcludingSignal = align;\\n    }\\n\\n    if (channel === 'x') {\\n      return ALIGNED_X_CHANNEL[alignExcludingSignal || (defaultAlign === 'top' ? 'left' : 'center')];\\n    } else {\\n      return BASELINED_Y_CHANNEL[alignExcludingSignal || defaultAlign];\\n    }\\n  }\\n\\n  /**\\n   * Utility for area/rule position, which can be either point or range. (One of the axes should be point and the other should be range.)\\n   */\\n\\n  function pointOrRangePosition(channel, model, {\\n    defaultPos,\\n    defaultPos2,\\n    range\\n  }) {\\n    if (range) {\\n      return rangePosition(channel, model, {\\n        defaultPos,\\n        defaultPos2\\n      });\\n    }\\n\\n    return pointPosition(channel, model, {\\n      defaultPos\\n    });\\n  }\\n  function rangePosition(channel, model, {\\n    defaultPos,\\n    defaultPos2\\n  }) {\\n    const {\\n      markDef,\\n      config\\n    } = model;\\n    const channel2 = getSecondaryRangeChannel(channel);\\n    const sizeChannel = getSizeChannel(channel);\\n    const pos2Mixins = pointPosition2OrSize(model, defaultPos2, channel2);\\n    const vgChannel = pos2Mixins[sizeChannel] ? // If there is width/height, we need to position the marks based on the alignment.\\n    vgAlignedPositionChannel(channel, markDef, config) : // Otherwise, make sure to apply to the right Vg Channel (for arc mark)\\n    getVgPositionChannel(channel);\\n    return { ...pointPosition(channel, model, {\\n        defaultPos,\\n        vgChannel\\n      }),\\n      ...pos2Mixins\\n    };\\n  }\\n  /**\\n   * Return encode for x2, y2.\\n   * If channel is not specified, return one channel based on orientation.\\n   */\\n\\n  function pointPosition2OrSize(model, defaultPos, channel) {\\n    const {\\n      encoding,\\n      mark,\\n      markDef,\\n      stack,\\n      config\\n    } = model;\\n    const baseChannel = getMainRangeChannel(channel);\\n    const sizeChannel = getSizeChannel(channel);\\n    const vgChannel = getVgPositionChannel(channel);\\n    const channelDef = encoding[baseChannel];\\n    const scaleName = model.scaleName(baseChannel);\\n    const scale = model.getScaleComponent(baseChannel);\\n    const offset = channel in encoding || channel in markDef ? getOffset(channel, model.markDef) : getOffset(baseChannel, model.markDef);\\n\\n    if (!channelDef && (channel === 'x2' || channel === 'y2') && (encoding.latitude || encoding.longitude)) {\\n      // use geopoint output if there are lat2/long2 and there is no point position2 overriding lat2/long2.\\n      return {\\n        [vgChannel]: {\\n          field: model.getName(channel)\\n        }\\n      };\\n    }\\n\\n    const valueRef = position2Ref({\\n      channel,\\n      channelDef,\\n      channel2Def: encoding[channel],\\n      markDef,\\n      config,\\n      scaleName,\\n      scale,\\n      stack,\\n      offset,\\n      defaultRef: undefined\\n    });\\n\\n    if (valueRef !== undefined) {\\n      return {\\n        [vgChannel]: valueRef\\n      };\\n    } // TODO: check width/height encoding here once we add them\\n    // no x2/y2 encoding, then try to read x2/y2 or width/height based on precedence:\\n    // markDef > config.style > mark-specific config (config[mark]) > general mark config (config.mark)\\n\\n\\n    return position2orSize(channel, markDef) || position2orSize(channel, {\\n      [channel]: getMarkStyleConfig(channel, markDef, config.style),\\n      [sizeChannel]: getMarkStyleConfig(sizeChannel, markDef, config.style)\\n    }) || position2orSize(channel, config[mark]) || position2orSize(channel, config.mark) || {\\n      [vgChannel]: pointPositionDefaultRef({\\n        model,\\n        defaultPos,\\n        channel,\\n        scaleName,\\n        scale\\n      })()\\n    };\\n  }\\n\\n  function position2Ref({\\n    channel,\\n    channelDef,\\n    channel2Def,\\n    markDef,\\n    config,\\n    scaleName,\\n    scale,\\n    stack,\\n    offset,\\n    defaultRef\\n  }) {\\n    if (isFieldOrDatumDef(channelDef) && stack && // If fieldChannel is X and channel is X2 (or Y and Y2)\\n    channel.charAt(0) === stack.fieldChannel.charAt(0)) {\\n      return valueRefForFieldOrDatumDef(channelDef, scaleName, {\\n        suffix: 'start'\\n      }, {\\n        offset\\n      });\\n    }\\n\\n    return midPointRefWithPositionInvalidTest({\\n      channel,\\n      channelDef: channel2Def,\\n      scaleName,\\n      scale,\\n      stack,\\n      markDef,\\n      config,\\n      offset,\\n      defaultRef\\n    });\\n  }\\n\\n  function position2orSize(channel, markDef) {\\n    const sizeChannel = getSizeChannel(channel);\\n    const vgChannel = getVgPositionChannel(channel);\\n\\n    if (markDef[vgChannel] !== undefined) {\\n      return {\\n        [vgChannel]: widthHeightValueOrSignalRef(channel, markDef[vgChannel])\\n      };\\n    } else if (markDef[channel] !== undefined) {\\n      return {\\n        [vgChannel]: widthHeightValueOrSignalRef(channel, markDef[channel])\\n      };\\n    } else if (markDef[sizeChannel]) {\\n      return {\\n        [sizeChannel]: widthHeightValueOrSignalRef(channel, markDef[sizeChannel])\\n      };\\n    }\\n\\n    return undefined;\\n  }\\n\\n  function rectPosition(model, channel, mark) {\\n    var _ref, _encoding$sizeChannel;\\n\\n    const {\\n      config,\\n      encoding,\\n      markDef,\\n      stack\\n    } = model;\\n    const channel2 = getSecondaryRangeChannel(channel);\\n    const sizeChannel = getSizeChannel(channel);\\n    const channelDef = encoding[channel];\\n    const channelDef2 = encoding[channel2];\\n    const scale = model.getScaleComponent(channel);\\n    const scaleType = scale ? scale.get('type') : undefined;\\n    const scaleName = model.scaleName(channel);\\n    const orient = markDef.orient;\\n    const hasSizeDef = (_ref = (_encoding$sizeChannel = encoding[sizeChannel]) !== null && _encoding$sizeChannel !== void 0 ? _encoding$sizeChannel : encoding.size) !== null && _ref !== void 0 ? _ref : getMarkPropOrConfig('size', markDef, config, {\\n      vgChannel: sizeChannel\\n    });\\n    const isBarBand = mark === 'bar' && (channel === 'x' ? orient === 'vertical' : orient === 'horizontal'); // x, x2, and width -- we must specify two of these in all conditions\\n\\n    if (isFieldDef(channelDef) && (isBinning(channelDef.bin) || isBinned(channelDef.bin) || channelDef.timeUnit && !channelDef2) && !hasSizeDef && !hasDiscreteDomain(scaleType)) {\\n      var _model$component$axes, _axis$get;\\n\\n      const band = getBand({\\n        channel,\\n        fieldDef: channelDef,\\n        stack,\\n        markDef,\\n        config\\n      });\\n      const axis = (_model$component$axes = model.component.axes[channel]) === null || _model$component$axes === void 0 ? void 0 : _model$component$axes[0];\\n      const axisTranslate = (_axis$get = axis === null || axis === void 0 ? void 0 : axis.get('translate')) !== null && _axis$get !== void 0 ? _axis$get : 0.5; // vega default is 0.5\\n\\n      return rectBinPosition({\\n        fieldDef: channelDef,\\n        fieldDef2: channelDef2,\\n        channel,\\n        markDef,\\n        scaleName,\\n        band,\\n        axisTranslate,\\n        spacing: isXorY(channel) ? getMarkPropOrConfig('binSpacing', markDef, config) : undefined,\\n        reverse: scale.get('reverse'),\\n        config\\n      });\\n    } else if ((isFieldOrDatumDef(channelDef) && hasDiscreteDomain(scaleType) || isBarBand) && !channelDef2) {\\n      return positionAndSize(mark, channelDef, channel, model);\\n    } else {\\n      return rangePosition(channel, model, {\\n        defaultPos: 'zeroOrMax',\\n        defaultPos2: 'zeroOrMin'\\n      });\\n    }\\n  }\\n\\n  function defaultSizeRef(mark, sizeChannel, scaleName, scale, config, band) {\\n    if (scale) {\\n      const scaleType = scale.get('type');\\n\\n      if (scaleType === 'point' || scaleType === 'band') {\\n        if (config[mark].discreteBandSize !== undefined) {\\n          return {\\n            value: config[mark].discreteBandSize\\n          };\\n        }\\n\\n        if (scaleType === ScaleType.POINT) {\\n          const scaleRange = scale.get('range');\\n\\n          if (isVgRangeStep(scaleRange) && isNumber(scaleRange.step)) {\\n            return {\\n              value: scaleRange.step - 2\\n            };\\n          }\\n\\n          return {\\n            value: DEFAULT_STEP - 2\\n          };\\n        } else {\\n          // BAND\\n          return {\\n            scale: scaleName,\\n            band\\n          };\\n        }\\n      } else {\\n        // continuous scale\\n        return {\\n          value: config[mark].continuousBandSize\\n        };\\n      }\\n    } // No Scale\\n\\n\\n    const step = getViewConfigDiscreteStep(config.view, sizeChannel);\\n    const value = getFirstDefined( // No scale is like discrete bar (with one item)\\n    config[mark].discreteBandSize, step - 2);\\n    return value !== undefined ? {\\n      value\\n    } : undefined;\\n  }\\n  /**\\n   * Output position encoding and its size encoding for continuous, point, and band scales.\\n   */\\n\\n\\n  function positionAndSize(mark, fieldDef, channel, model) {\\n    var _ref2;\\n\\n    const {\\n      markDef,\\n      encoding,\\n      config,\\n      stack\\n    } = model;\\n    const orient = markDef.orient;\\n    const scaleName = model.scaleName(channel);\\n    const scale = model.getScaleComponent(channel);\\n    const vgSizeChannel = getSizeChannel(channel);\\n    const channel2 = getSecondaryRangeChannel(channel); // use \\\"size\\\" channel for bars, if there is orient and the channel matches the right orientation\\n\\n    const useVlSizeChannel = orient === 'horizontal' && channel === 'y' || orient === 'vertical' && channel === 'x';\\n    const sizeFromMarkOrConfig = getMarkPropOrConfig(useVlSizeChannel ? 'size' : vgSizeChannel, markDef, config, {\\n      vgChannel: vgSizeChannel\\n    }); // Use size encoding / mark property / config if it exists\\n\\n    let sizeMixins;\\n\\n    if (encoding.size || sizeFromMarkOrConfig !== undefined) {\\n      if (useVlSizeChannel) {\\n        sizeMixins = nonPosition('size', model, {\\n          vgChannel: vgSizeChannel,\\n          defaultValue: sizeFromMarkOrConfig\\n        });\\n      } else {\\n        warn(cannotApplySizeToNonOrientedMark(markDef.type));\\n      }\\n    } // Otherwise, apply default value\\n\\n\\n    const band = (_ref2 = isFieldOrDatumDef(fieldDef) ? getBand({\\n      channel,\\n      fieldDef,\\n      markDef,\\n      stack,\\n      config\\n    }) : undefined) !== null && _ref2 !== void 0 ? _ref2 : 1;\\n    sizeMixins = sizeMixins || {\\n      [vgSizeChannel]: defaultSizeRef(mark, vgSizeChannel, scaleName, scale, config, band)\\n    };\\n    /*\\n      Band scales with size value and all point scales, use xc/yc + band=0.5\\n       Otherwise (band scales that has size based on a band ref), use x/y with position band = (1 - size_band) / 2.\\n      In this case, size_band is the band specified in the x/y-encoding.\\n      By default band is 1, so `(1 - band) / 2` = 0.\\n      If band is 0.6, the the x/y position in such case should be `(1 - band) / 2` = 0.2\\n     */\\n\\n    const center = (scale === null || scale === void 0 ? void 0 : scale.get('type')) !== 'band' || !('band' in sizeMixins[vgSizeChannel]);\\n    const vgChannel = vgAlignedPositionChannel(channel, markDef, config, center ? 'middle' : 'top');\\n    const offset = getOffset(channel, markDef);\\n    const posRef = midPointRefWithPositionInvalidTest({\\n      channel,\\n      channelDef: fieldDef,\\n      markDef,\\n      config,\\n      scaleName,\\n      scale,\\n      stack,\\n      offset,\\n      defaultRef: pointPositionDefaultRef({\\n        model,\\n        defaultPos: 'mid',\\n        channel,\\n        scaleName,\\n        scale\\n      }),\\n      band: center ? 0.5 : (1 - band) / 2\\n    });\\n\\n    if (vgSizeChannel) {\\n      return {\\n        [vgChannel]: posRef,\\n        ...sizeMixins\\n      };\\n    } else {\\n      // otherwise, we must simulate size by setting position2 = position + size\\n      // (for theta/radius since Vega doesn't have thetaWidth/radiusWidth)\\n      const vgChannel2 = getVgPositionChannel(channel2);\\n      const sizeRef = sizeMixins[vgSizeChannel];\\n      const sizeOffset = offset ? { ...sizeRef,\\n        offset\\n      } : sizeRef;\\n      return {\\n        [vgChannel]: posRef,\\n        // posRef might be an array that wraps position invalid test\\n        [vgChannel2]: isArray(posRef) ? [posRef[0], { ...posRef[1],\\n          offset: sizeOffset\\n        }] : { ...posRef,\\n          offset: sizeOffset\\n        }\\n      };\\n    }\\n  }\\n\\n  function getBinSpacing(channel, spacing, reverse, translate, offset) {\\n    if (isPolarPositionChannel(channel)) {\\n      return 0;\\n    }\\n\\n    const spacingOffset = channel === 'x' || channel === 'y2' ? -spacing / 2 : spacing / 2;\\n\\n    if (isSignalRef(reverse) || isSignalRef(offset) || isSignalRef(translate)) {\\n      const reverseExpr = signalOrStringValue(reverse);\\n      const offsetExpr = signalOrStringValue(offset);\\n      const translateExpr = signalOrStringValue(translate);\\n      const t = translateExpr ? \\\"\\\".concat(translateExpr, \\\" + \\\") : '';\\n      const r = reverseExpr ? \\\"(\\\".concat(reverseExpr, \\\" ? -1 : 1) * \\\") : '';\\n      const o = offsetExpr ? \\\"(\\\".concat(offsetExpr, \\\" + \\\").concat(spacingOffset, \\\")\\\") : spacingOffset;\\n      return {\\n        signal: t + r + o\\n      };\\n    } else {\\n      offset = offset || 0;\\n      return translate + (reverse ? -offset - spacingOffset : +offset + spacingOffset);\\n    }\\n  }\\n\\n  function rectBinPosition({\\n    fieldDef,\\n    fieldDef2,\\n    channel,\\n    band,\\n    scaleName,\\n    markDef,\\n    spacing = 0,\\n    axisTranslate,\\n    reverse,\\n    config\\n  }) {\\n    const channel2 = getSecondaryRangeChannel(channel);\\n    const vgChannel = getVgPositionChannel(channel);\\n    const vgChannel2 = getVgPositionChannel(channel2);\\n    const offset = getOffset(channel, markDef);\\n\\n    if (isBinning(fieldDef.bin) || fieldDef.timeUnit) {\\n      return {\\n        [vgChannel2]: rectBinRef({\\n          channel,\\n          fieldDef,\\n          scaleName,\\n          markDef,\\n          band: (1 - band) / 2,\\n          offset: getBinSpacing(channel2, spacing, reverse, axisTranslate, offset),\\n          config\\n        }),\\n        [vgChannel]: rectBinRef({\\n          channel,\\n          fieldDef,\\n          scaleName,\\n          markDef,\\n          band: 1 - (1 - band) / 2,\\n          offset: getBinSpacing(channel, spacing, reverse, axisTranslate, offset),\\n          config\\n        })\\n      };\\n    } else if (isBinned(fieldDef.bin)) {\\n      const startRef = valueRefForFieldOrDatumDef(fieldDef, scaleName, {}, {\\n        offset: getBinSpacing(channel2, spacing, reverse, axisTranslate, offset)\\n      });\\n\\n      if (isFieldDef(fieldDef2)) {\\n        return {\\n          [vgChannel2]: startRef,\\n          [vgChannel]: valueRefForFieldOrDatumDef(fieldDef2, scaleName, {}, {\\n            offset: getBinSpacing(channel, spacing, reverse, axisTranslate, offset)\\n          })\\n        };\\n      } else if (isBinParams(fieldDef.bin) && fieldDef.bin.step) {\\n        return {\\n          [vgChannel2]: startRef,\\n          [vgChannel]: {\\n            signal: \\\"scale(\\\\\\\"\\\".concat(scaleName, \\\"\\\\\\\", \\\").concat(vgField(fieldDef, {\\n              expr: 'datum'\\n            }), \\\" + \\\").concat(fieldDef.bin.step, \\\")\\\"),\\n            offset: getBinSpacing(channel, spacing, reverse, axisTranslate, offset)\\n          }\\n        };\\n      }\\n    }\\n\\n    warn(channelRequiredForBinned(channel2));\\n    return undefined;\\n  }\\n  /**\\n   * Value Ref for binned fields\\n   */\\n\\n  function rectBinRef({\\n    channel,\\n    fieldDef,\\n    scaleName,\\n    markDef,\\n    band,\\n    offset,\\n    config\\n  }) {\\n    const r = interpolatedSignalRef({\\n      scaleName,\\n      fieldOrDatumDef: fieldDef,\\n      band,\\n      offset\\n    });\\n    return wrapPositionInvalidTest({\\n      fieldDef,\\n      channel,\\n      markDef,\\n      ref: r,\\n      config\\n    });\\n  }\\n\\n  const ALWAYS_IGNORE = new Set(['aria']);\\n  function baseEncodeEntry(model, ignore) {\\n    const {\\n      fill = undefined,\\n      stroke = undefined\\n    } = ignore.color === 'include' ? color(model) : {};\\n    return { ...markDefProperties(model.markDef, ignore),\\n      ...wrapAllFieldsInvalid(model, 'fill', fill),\\n      ...wrapAllFieldsInvalid(model, 'stroke', stroke),\\n      ...nonPosition('opacity', model),\\n      ...nonPosition('fillOpacity', model),\\n      ...nonPosition('strokeOpacity', model),\\n      ...nonPosition('strokeWidth', model),\\n      ...nonPosition('strokeDash', model),\\n      ...zindex(model),\\n      ...tooltip(model),\\n      ...text(model, 'href'),\\n      ...aria(model)\\n    };\\n  } // TODO: mark VgValueRef[] as readonly after https://github.com/vega/vega/pull/1987\\n\\n  function wrapAllFieldsInvalid(model, channel, valueRef) {\\n    const {\\n      config,\\n      mark,\\n      markDef\\n    } = model;\\n    const invalid = getMarkPropOrConfig('invalid', markDef, config);\\n\\n    if (invalid === 'hide' && valueRef && !isPathMark(mark)) {\\n      // For non-path marks, we have to exclude invalid values (null and NaN) for scales with continuous domains.\\n      // For path marks, we will use \\\"defined\\\" property and skip these values instead.\\n      const test = allFieldsInvalidPredicate(model, {\\n        invalid: true,\\n        channels: SCALE_CHANNELS\\n      });\\n\\n      if (test) {\\n        return {\\n          [channel]: [// prepend the invalid case\\n          // TODO: support custom value\\n          {\\n            test,\\n            value: null\\n          }, ...array(valueRef)]\\n        };\\n      }\\n    }\\n\\n    return valueRef ? {\\n      [channel]: valueRef\\n    } : {};\\n  }\\n\\n  function markDefProperties(mark, ignore) {\\n    return VG_MARK_CONFIGS.reduce((m, prop) => {\\n      if (!ALWAYS_IGNORE.has(prop) && mark[prop] !== undefined && ignore[prop] !== 'ignore') {\\n        m[prop] = signalOrValueRef(mark[prop]);\\n      }\\n\\n      return m;\\n    }, {});\\n  }\\n\\n  function allFieldsInvalidPredicate(model, {\\n    invalid = false,\\n    channels\\n  }) {\\n    const filterIndex = channels.reduce((aggregator, channel) => {\\n      const scaleComponent = model.getScaleComponent(channel);\\n\\n      if (scaleComponent) {\\n        const scaleType = scaleComponent.get('type');\\n        const field = model.vgField(channel, {\\n          expr: 'datum'\\n        }); // While discrete domain scales can handle invalid values, continuous scales can't.\\n\\n        if (field && hasContinuousDomain(scaleType)) {\\n          aggregator[field] = true;\\n        }\\n      }\\n\\n      return aggregator;\\n    }, {});\\n    const fields = keys(filterIndex);\\n\\n    if (fields.length > 0) {\\n      const op = invalid ? '||' : '&&';\\n      return fields.map(field => fieldInvalidPredicate(field, invalid)).join(\\\" \\\".concat(op, \\\" \\\"));\\n    }\\n\\n    return undefined;\\n  }\\n\\n  function defined(model) {\\n    const {\\n      config,\\n      markDef\\n    } = model;\\n    const invalid = getMarkPropOrConfig('invalid', markDef, config);\\n\\n    if (invalid) {\\n      const signal = allFieldsInvalidPredicate$1(model, {\\n        channels: POSITION_SCALE_CHANNELS\\n      });\\n\\n      if (signal) {\\n        return {\\n          defined: {\\n            signal\\n          }\\n        };\\n      }\\n    }\\n\\n    return {};\\n  }\\n\\n  function allFieldsInvalidPredicate$1(model, {\\n    invalid = false,\\n    channels\\n  }) {\\n    const filterIndex = channels.reduce((aggregator, channel) => {\\n      const scaleComponent = model.getScaleComponent(channel);\\n\\n      if (scaleComponent) {\\n        const scaleType = scaleComponent.get('type');\\n        const field = model.vgField(channel, {\\n          expr: 'datum'\\n        }); // While discrete domain scales can handle invalid values, continuous scales can't.\\n\\n        if (field && hasContinuousDomain(scaleType)) {\\n          aggregator[field] = true;\\n        }\\n      }\\n\\n      return aggregator;\\n    }, {});\\n    const fields = keys(filterIndex);\\n\\n    if (fields.length > 0) {\\n      const op = invalid ? '||' : '&&';\\n      return fields.map(field => fieldInvalidPredicate(field, invalid)).join(\\\" \\\".concat(op, \\\" \\\"));\\n    }\\n\\n    return undefined;\\n  }\\n\\n  function valueIfDefined(prop, value) {\\n    if (value !== undefined) {\\n      return {\\n        [prop]: signalOrValueRef(value)\\n      };\\n    }\\n\\n    return undefined;\\n  }\\n\\n  const VORONOI = 'voronoi';\\n  const nearest = {\\n    has: selCmpt => {\\n      return selCmpt.type !== 'interval' && selCmpt.nearest;\\n    },\\n    parse: (model, selCmpt) => {\\n      // Scope selection events to the voronoi mark to prevent capturing\\n      // events that occur on the group mark (https://github.com/vega/vega/issues/2112).\\n      if (selCmpt.events) {\\n        for (const s of selCmpt.events) {\\n          s.markname = model.getName(VORONOI);\\n        }\\n      }\\n    },\\n    marks: (model, selCmpt, marks) => {\\n      const {\\n        x,\\n        y\\n      } = selCmpt.project.hasChannel;\\n      const markType = model.mark;\\n\\n      if (isPathMark(markType)) {\\n        warn(nearestNotSupportForContinuous(markType));\\n        return marks;\\n      }\\n\\n      const cellDef = {\\n        name: model.getName(VORONOI),\\n        type: 'path',\\n        interactive: true,\\n        from: {\\n          data: model.getName('marks')\\n        },\\n        encode: {\\n          update: {\\n            fill: {\\n              value: 'transparent'\\n            },\\n            strokeWidth: {\\n              value: 0.35\\n            },\\n            stroke: {\\n              value: 'transparent'\\n            },\\n            isVoronoi: {\\n              value: true\\n            },\\n            ...tooltip(model, {\\n              reactiveGeom: true\\n            })\\n          }\\n        },\\n        transform: [{\\n          type: 'voronoi',\\n          x: {\\n            expr: x || !y ? 'datum.datum.x || 0' : '0'\\n          },\\n          y: {\\n            expr: y || !x ? 'datum.datum.y || 0' : '0'\\n          },\\n          size: [model.getSizeSignalRef('width'), model.getSizeSignalRef('height')]\\n        }]\\n      };\\n      let index = 0;\\n      let exists = false;\\n      marks.forEach((mark, i) => {\\n        var _mark$name;\\n\\n        const name = (_mark$name = mark.name) !== null && _mark$name !== void 0 ? _mark$name : '';\\n\\n        if (name === model.component.mark[0].name) {\\n          index = i;\\n        } else if (name.indexOf(VORONOI) >= 0) {\\n          exists = true;\\n        }\\n      });\\n\\n      if (!exists) {\\n        marks.splice(index + 1, 0, cellDef);\\n      }\\n\\n      return marks;\\n    }\\n  };\\n\\n  /**\\n   * A node in the dataflow tree.\\n   */\\n\\n  class DataFlowNode {\\n    constructor(parent, debugName) {\\n      this.debugName = debugName;\\n\\n      _defineProperty(this, \\\"_children\\\", []);\\n\\n      _defineProperty(this, \\\"_parent\\\", null);\\n\\n      _defineProperty(this, \\\"_hash\\\", void 0);\\n\\n      if (parent) {\\n        this.parent = parent;\\n      }\\n    }\\n    /**\\n     * Clone this node with a deep copy but don't clone links to children or parents.\\n     */\\n\\n\\n    clone() {\\n      throw new Error('Cannot clone node');\\n    }\\n    /**\\n     * Return a hash of the node.\\n     */\\n\\n\\n    get parent() {\\n      return this._parent;\\n    }\\n    /**\\n     * Set the parent of the node and also add this node to the parent's children.\\n     */\\n\\n\\n    set parent(parent) {\\n      this._parent = parent;\\n\\n      if (parent) {\\n        parent.addChild(this);\\n      }\\n    }\\n\\n    get children() {\\n      return this._children;\\n    }\\n\\n    numChildren() {\\n      return this._children.length;\\n    }\\n\\n    addChild(child, loc) {\\n      // do not add the same child twice\\n      if (this._children.indexOf(child) > -1) {\\n        warn(ADD_SAME_CHILD_TWICE);\\n        return;\\n      }\\n\\n      if (loc !== undefined) {\\n        this._children.splice(loc, 0, child);\\n      } else {\\n        this._children.push(child);\\n      }\\n    }\\n\\n    removeChild(oldChild) {\\n      const loc = this._children.indexOf(oldChild);\\n\\n      this._children.splice(loc, 1);\\n\\n      return loc;\\n    }\\n    /**\\n     * Remove node from the dataflow.\\n     */\\n\\n\\n    remove() {\\n      let loc = this._parent.removeChild(this);\\n\\n      for (const child of this._children) {\\n        // do not use the set method because we want to insert at a particular location\\n        child._parent = this._parent;\\n\\n        this._parent.addChild(child, loc++);\\n      }\\n    }\\n    /**\\n     * Insert another node as a parent of this node.\\n     */\\n\\n\\n    insertAsParentOf(other) {\\n      const parent = other.parent;\\n      parent.removeChild(this);\\n      this.parent = parent;\\n      other.parent = this;\\n    }\\n\\n    swapWithParent() {\\n      const parent = this._parent;\\n      const newParent = parent.parent; // reconnect the children\\n\\n      for (const child of this._children) {\\n        child.parent = parent;\\n      } // remove old links\\n\\n\\n      this._children = []; // equivalent to removing every child link one by one\\n\\n      parent.removeChild(this);\\n      parent.parent.removeChild(parent); // swap two nodes\\n\\n      this.parent = newParent;\\n      parent.parent = this;\\n    }\\n\\n  }\\n  class OutputNode extends DataFlowNode {\\n    clone() {\\n      const cloneObj = new this.constructor();\\n      cloneObj.debugName = 'clone_' + this.debugName;\\n      cloneObj._source = this._source;\\n      cloneObj._name = 'clone_' + this._name;\\n      cloneObj.type = this.type;\\n      cloneObj.refCounts = this.refCounts;\\n      cloneObj.refCounts[cloneObj._name] = 0;\\n      return cloneObj;\\n    }\\n    /**\\n     * @param source The name of the source. Will change in assemble.\\n     * @param type The type of the output node.\\n     * @param refCounts A global ref counter map.\\n     */\\n\\n\\n    constructor(parent, source, type, refCounts) {\\n      super(parent, source);\\n      this.type = type;\\n      this.refCounts = refCounts;\\n\\n      _defineProperty(this, \\\"_source\\\", void 0);\\n\\n      _defineProperty(this, \\\"_name\\\", void 0);\\n\\n      this._source = this._name = source;\\n\\n      if (this.refCounts && !(this._name in this.refCounts)) {\\n        this.refCounts[this._name] = 0;\\n      }\\n    }\\n\\n    dependentFields() {\\n      return new Set();\\n    }\\n\\n    producedFields() {\\n      return new Set();\\n    }\\n\\n    hash() {\\n      if (this._hash === undefined) {\\n        this._hash = \\\"Output \\\".concat(uniqueId());\\n      }\\n\\n      return this._hash;\\n    }\\n    /**\\n     * Request the datasource name and increase the ref counter.\\n     *\\n     * During the parsing phase, this will return the simple name such as 'main' or 'raw'.\\n     * It is crucial to request the name from an output node to mark it as a required node.\\n     * If nobody ever requests the name, this datasource will not be instantiated in the assemble phase.\\n     *\\n     * In the assemble phase, this will return the correct name.\\n     */\\n\\n\\n    getSource() {\\n      this.refCounts[this._name]++;\\n      return this._source;\\n    }\\n\\n    isRequired() {\\n      return !!this.refCounts[this._name];\\n    }\\n\\n    setSource(source) {\\n      this._source = source;\\n    }\\n\\n  }\\n\\n  class TimeUnitNode extends DataFlowNode {\\n    clone() {\\n      return new TimeUnitNode(null, duplicate(this.formula));\\n    }\\n\\n    constructor(parent, formula) {\\n      super(parent);\\n      this.formula = formula;\\n    }\\n\\n    static makeFromEncoding(parent, model) {\\n      const formula = model.reduceFieldDef((timeUnitComponent, fieldDef, channel) => {\\n        const {\\n          field,\\n          timeUnit\\n        } = fieldDef;\\n        const channelDef2 = isUnitModel(model) ? model.encoding[getSecondaryRangeChannel(channel)] : undefined;\\n        const band = isUnitModel(model) && hasBand(channel, fieldDef, channelDef2, model.stack, model.markDef, model.config);\\n\\n        if (timeUnit) {\\n          const as = vgField(fieldDef, {\\n            forAs: true\\n          });\\n          timeUnitComponent[hash({\\n            as,\\n            field,\\n            timeUnit\\n          })] = {\\n            as,\\n            field,\\n            timeUnit,\\n            ...(band ? {\\n              band: true\\n            } : {})\\n          };\\n        }\\n\\n        return timeUnitComponent;\\n      }, {});\\n\\n      if (isEmpty(formula)) {\\n        return null;\\n      }\\n\\n      return new TimeUnitNode(parent, formula);\\n    }\\n\\n    static makeFromTransform(parent, t) {\\n      const {\\n        timeUnit,\\n        ...other\\n      } = { ...t\\n      };\\n      const normalizedTimeUnit = normalizeTimeUnit(timeUnit);\\n      const component = { ...other,\\n        timeUnit: normalizedTimeUnit\\n      };\\n      return new TimeUnitNode(parent, {\\n        [hash(component)]: component\\n      });\\n    }\\n    /**\\n     * Merge together TimeUnitNodes assigning the children of `other` to `this`\\n     * and removing `other`.\\n     */\\n\\n\\n    merge(other) {\\n      this.formula = { ...this.formula\\n      }; // if the same hash happen twice, merge \\\"band\\\"\\n\\n      for (const key in other.formula) {\\n        if (!this.formula[key] || other.formula[key].band) {\\n          // copy if it's not a duplicate or if we need to copy band over\\n          this.formula[key] = other.formula[key];\\n        }\\n      }\\n\\n      for (const child of other.children) {\\n        other.removeChild(child);\\n        child.parent = this;\\n      }\\n\\n      other.remove();\\n    }\\n    /**\\n     * Remove time units coming from the other node.\\n     */\\n\\n\\n    removeFormulas(fields) {\\n      const newFormula = {};\\n\\n      for (const [key, timeUnit] of entries(this.formula)) {\\n        if (!fields.has(timeUnit.as)) {\\n          newFormula[key] = timeUnit;\\n        }\\n      }\\n\\n      this.formula = newFormula;\\n    }\\n\\n    producedFields() {\\n      return new Set(vals(this.formula).map(f => f.as));\\n    }\\n\\n    dependentFields() {\\n      return new Set(vals(this.formula).map(f => f.field));\\n    }\\n\\n    hash() {\\n      return \\\"TimeUnit \\\".concat(hash(this.formula));\\n    }\\n\\n    assemble() {\\n      const transforms = [];\\n\\n      for (const f of vals(this.formula)) {\\n        const {\\n          field,\\n          as,\\n          timeUnit\\n        } = f;\\n        const {\\n          unit,\\n          utc,\\n          ...params\\n        } = normalizeTimeUnit(timeUnit);\\n        transforms.push({\\n          field: replacePathInField(field),\\n          type: 'timeunit',\\n          ...(unit ? {\\n            units: getTimeUnitParts(unit)\\n          } : {}),\\n          ...(utc ? {\\n            timezone: 'utc'\\n          } : {}),\\n          ...params,\\n          as: [as, \\\"\\\".concat(as, \\\"_end\\\")]\\n        });\\n      }\\n\\n      return transforms;\\n    }\\n\\n  }\\n\\n  const TUPLE_FIELDS = '_tuple_fields';\\n  /**\\n   * Whether the selection tuples hold enumerated or ranged values for a field.\\n   */\\n\\n  class SelectionProjectionComponent {\\n    constructor(...items) {\\n      _defineProperty(this, \\\"hasChannel\\\", void 0);\\n\\n      _defineProperty(this, \\\"hasField\\\", void 0);\\n\\n      _defineProperty(this, \\\"timeUnit\\\", void 0);\\n\\n      _defineProperty(this, \\\"items\\\", void 0);\\n\\n      this.items = items;\\n      this.hasChannel = {};\\n      this.hasField = {};\\n    }\\n\\n  }\\n  const project = {\\n    has: () => {\\n      return true; // This transform handles its own defaults, so always run parse.\\n    },\\n    parse: (model, selCmpt, selDef) => {\\n      var _selCmpt$project;\\n\\n      const name = selCmpt.name;\\n      const proj = (_selCmpt$project = selCmpt.project) !== null && _selCmpt$project !== void 0 ? _selCmpt$project : selCmpt.project = new SelectionProjectionComponent();\\n      const parsed = {};\\n      const timeUnits = {};\\n      const signals = new Set();\\n\\n      const signalName = (p, range) => {\\n        const suffix = range === 'visual' ? p.channel : p.field;\\n        let sg = varName(\\\"\\\".concat(name, \\\"_\\\").concat(suffix));\\n\\n        for (let counter = 1; signals.has(sg); counter++) {\\n          sg = varName(\\\"\\\".concat(name, \\\"_\\\").concat(suffix, \\\"_\\\").concat(counter));\\n        }\\n\\n        signals.add(sg);\\n        return {\\n          [range]: sg\\n        };\\n      }; // If no explicit projection (either fields or encodings) is specified, set some defaults.\\n      // If an initial value is set, try to infer projections.\\n      // Otherwise, use the default configuration.\\n\\n\\n      if (!selDef.fields && !selDef.encodings) {\\n        const cfg = model.config.selection[selDef.type];\\n\\n        if (selDef.init) {\\n          for (const init of array(selDef.init)) {\\n            for (const key of keys(init)) {\\n              if (isSingleDefUnitChannel(key)) {\\n                (selDef.encodings || (selDef.encodings = [])).push(key);\\n              } else {\\n                if (selDef.type === 'interval') {\\n                  warn(INTERVAL_INITIALIZED_WITH_X_Y);\\n                  selDef.encodings = cfg.encodings;\\n                } else {\\n                  (selDef.fields || (selDef.fields = [])).push(key);\\n                }\\n              }\\n            }\\n          }\\n        } else {\\n          selDef.encodings = cfg.encodings;\\n          selDef.fields = cfg.fields;\\n        }\\n      } // TODO: find a possible channel mapping for these fields.\\n\\n\\n      for (const field of (_selDef$fields = selDef.fields) !== null && _selDef$fields !== void 0 ? _selDef$fields : []) {\\n        var _selDef$fields;\\n\\n        const p = {\\n          type: 'E',\\n          field\\n        };\\n        p.signals = { ...signalName(p, 'data')\\n        };\\n        proj.items.push(p);\\n        proj.hasField[field] = p;\\n      }\\n\\n      for (const channel of (_selDef$encodings = selDef.encodings) !== null && _selDef$encodings !== void 0 ? _selDef$encodings : []) {\\n        var _selDef$encodings;\\n\\n        const fieldDef = model.fieldDef(channel);\\n\\n        if (fieldDef) {\\n          let field = fieldDef.field;\\n\\n          if (fieldDef.aggregate) {\\n            warn(cannotProjectAggregate(channel, fieldDef.aggregate));\\n            continue;\\n          } else if (!field) {\\n            warn(cannotProjectOnChannelWithoutField(channel));\\n            continue;\\n          }\\n\\n          if (fieldDef.timeUnit) {\\n            field = model.vgField(channel); // Construct TimeUnitComponents which will be combined into a\\n            // TimeUnitNode. This node may need to be inserted into the\\n            // dataflow if the selection is used across views that do not\\n            // have these time units defined.\\n\\n            const component = {\\n              timeUnit: fieldDef.timeUnit,\\n              as: field,\\n              field: fieldDef.field\\n            };\\n            timeUnits[hash(component)] = component;\\n          } // Prevent duplicate projections on the same field.\\n          // TODO: what if the same field is bound to multiple channels (e.g., SPLOM diag).\\n\\n\\n          if (!parsed[field]) {\\n            // Determine whether the tuple will store enumerated or ranged values.\\n            // Interval selections store ranges for continuous scales, and enumerations otherwise.\\n            // Single/multi selections store ranges for binned fields, and enumerations otherwise.\\n            let type = 'E';\\n\\n            if (selCmpt.type === 'interval') {\\n              const scaleType = model.getScaleComponent(channel).get('type');\\n\\n              if (hasContinuousDomain(scaleType)) {\\n                type = 'R';\\n              }\\n            } else if (fieldDef.bin) {\\n              type = 'R-RE';\\n            }\\n\\n            const p = {\\n              field,\\n              channel,\\n              type\\n            };\\n            p.signals = { ...signalName(p, 'data'),\\n              ...signalName(p, 'visual')\\n            };\\n            proj.items.push(parsed[field] = p);\\n            proj.hasField[field] = proj.hasChannel[channel] = parsed[field];\\n          }\\n        } else {\\n          warn(cannotProjectOnChannelWithoutField(channel));\\n        }\\n      }\\n\\n      if (selDef.init) {\\n        const parseInit = i => {\\n          return proj.items.map(p => i[p.channel] !== undefined ? i[p.channel] : i[p.field]);\\n        };\\n\\n        if (selDef.type === 'interval') {\\n          selCmpt.init = parseInit(selDef.init);\\n        } else {\\n          const init = array(selDef.init);\\n          selCmpt.init = init.map(parseInit);\\n        }\\n      }\\n\\n      if (!isEmpty(timeUnits)) {\\n        proj.timeUnit = new TimeUnitNode(null, timeUnits);\\n      }\\n    },\\n    signals: (model, selCmpt, allSignals) => {\\n      const name = selCmpt.name + TUPLE_FIELDS;\\n      const hasSignal = allSignals.filter(s => s.name === name);\\n      return hasSignal.length > 0 ? allSignals : allSignals.concat({\\n        name,\\n        value: selCmpt.project.items.map(proj => {\\n          const {\\n            signals,\\n            hasLegend,\\n            ...rest\\n          } = proj;\\n          rest.field = replacePathInField(rest.field);\\n          return rest;\\n        })\\n      });\\n    }\\n  };\\n\\n  const inputBindings = {\\n    has: selCmpt => {\\n      return selCmpt.type === 'single' && selCmpt.resolve === 'global' && selCmpt.bind && selCmpt.bind !== 'scales' && !isLegendBinding(selCmpt.bind);\\n    },\\n    parse: (model, selCmpt, selDef, origDef) => {\\n      // Binding a selection to input widgets disables default direct manipulation interaction.\\n      // A user can choose to re-enable it by explicitly specifying triggering input events.\\n      if (!origDef.on) delete selCmpt.events;\\n      if (!origDef.clear) delete selCmpt.clear;\\n    },\\n    topLevelSignals: (model, selCmpt, signals) => {\\n      const name = selCmpt.name;\\n      const proj = selCmpt.project;\\n      const bind = selCmpt.bind;\\n      const init = selCmpt.init && selCmpt.init[0]; // Can only exist on single selections (one initial value).\\n\\n      const datum = nearest.has(selCmpt) ? '(item().isVoronoi ? datum.datum : datum)' : 'datum';\\n      proj.items.forEach((p, i) => {\\n        const sgname = varName(\\\"\\\".concat(name, \\\"_\\\").concat(p.field));\\n        const hasSignal = signals.filter(s => s.name === sgname);\\n\\n        if (!hasSignal.length) {\\n          var _ref, _bind$p$field;\\n\\n          signals.unshift({\\n            name: sgname,\\n            ...(init ? {\\n              init: assembleInit(init[i])\\n            } : {\\n              value: null\\n            }),\\n            on: selCmpt.events ? [{\\n              events: selCmpt.events,\\n              update: \\\"datum && item().mark.marktype !== 'group' ? \\\".concat(datum, \\\"[\\\").concat($(p.field), \\\"] : null\\\")\\n            }] : [],\\n            bind: (_ref = (_bind$p$field = bind[p.field]) !== null && _bind$p$field !== void 0 ? _bind$p$field : bind[p.channel]) !== null && _ref !== void 0 ? _ref : bind\\n          });\\n        }\\n      });\\n      return signals;\\n    },\\n    signals: (model, selCmpt, signals) => {\\n      const name = selCmpt.name;\\n      const proj = selCmpt.project;\\n      const signal = signals.filter(s => s.name === name + TUPLE)[0];\\n      const fields = name + TUPLE_FIELDS;\\n      const values = proj.items.map(p => varName(\\\"\\\".concat(name, \\\"_\\\").concat(p.field)));\\n      const valid = values.map(v => \\\"\\\".concat(v, \\\" !== null\\\")).join(' && ');\\n\\n      if (values.length) {\\n        signal.update = \\\"\\\".concat(valid, \\\" ? {fields: \\\").concat(fields, \\\", values: [\\\").concat(values.join(', '), \\\"]} : null\\\");\\n      }\\n\\n      delete signal.value;\\n      delete signal.on;\\n      return signals;\\n    }\\n  };\\n\\n  const TOGGLE = '_toggle';\\n  const toggle = {\\n    has: selCmpt => {\\n      return selCmpt.type === 'multi' && !!selCmpt.toggle;\\n    },\\n    signals: (model, selCmpt, signals) => {\\n      return signals.concat({\\n        name: selCmpt.name + TOGGLE,\\n        value: false,\\n        on: [{\\n          events: selCmpt.events,\\n          update: selCmpt.toggle\\n        }]\\n      });\\n    },\\n    modifyExpr: (model, selCmpt) => {\\n      const tpl = selCmpt.name + TUPLE;\\n      const signal = selCmpt.name + TOGGLE;\\n      return \\\"\\\".concat(signal, \\\" ? null : \\\").concat(tpl, \\\", \\\") + (selCmpt.resolve === 'global' ? \\\"\\\".concat(signal, \\\" ? null : true, \\\") : \\\"\\\".concat(signal, \\\" ? null : {unit: \\\").concat(unitName(model), \\\"}, \\\")) + \\\"\\\".concat(signal, \\\" ? \\\").concat(tpl, \\\" : null\\\");\\n    }\\n  };\\n\\n  const clear = {\\n    has: selCmpt => {\\n      return selCmpt.clear !== undefined && selCmpt.clear !== false;\\n    },\\n    parse: (model, selCmpt, selDef) => {\\n      if (selDef.clear) {\\n        selCmpt.clear = isString(selDef.clear) ? eventSelector(selDef.clear, 'scope') : selDef.clear;\\n      }\\n    },\\n    topLevelSignals: (model, selCmpt, signals) => {\\n      if (inputBindings.has(selCmpt)) {\\n        for (const proj of selCmpt.project.items) {\\n          const idx = signals.findIndex(n => n.name === varName(\\\"\\\".concat(selCmpt.name, \\\"_\\\").concat(proj.field)));\\n\\n          if (idx !== -1) {\\n            signals[idx].on.push({\\n              events: selCmpt.clear,\\n              update: 'null'\\n            });\\n          }\\n        }\\n      }\\n\\n      return signals;\\n    },\\n    signals: (model, selCmpt, signals) => {\\n      function addClear(idx, update) {\\n        if (idx !== -1 && signals[idx].on) {\\n          signals[idx].on.push({\\n            events: selCmpt.clear,\\n            update\\n          });\\n        }\\n      } // Be as minimalist as possible when adding clear triggers to minimize dataflow execution.\\n\\n\\n      if (selCmpt.type === 'interval') {\\n        for (const proj of selCmpt.project.items) {\\n          const vIdx = signals.findIndex(n => n.name === proj.signals.visual);\\n          addClear(vIdx, '[0, 0]');\\n\\n          if (vIdx === -1) {\\n            const dIdx = signals.findIndex(n => n.name === proj.signals.data);\\n            addClear(dIdx, 'null');\\n          }\\n        }\\n      } else {\\n        let tIdx = signals.findIndex(n => n.name === selCmpt.name + TUPLE);\\n        addClear(tIdx, 'null');\\n\\n        if (toggle.has(selCmpt)) {\\n          tIdx = signals.findIndex(n => n.name === selCmpt.name + TOGGLE);\\n          addClear(tIdx, 'false');\\n        }\\n      }\\n\\n      return signals;\\n    }\\n  };\\n\\n  const scaleBindings = {\\n    has: selCmpt => {\\n      return selCmpt.type === 'interval' && selCmpt.resolve === 'global' && selCmpt.bind && selCmpt.bind === 'scales';\\n    },\\n    parse: (model, selCmpt) => {\\n      const bound = selCmpt.scales = [];\\n\\n      for (const proj of selCmpt.project.items) {\\n        const channel = proj.channel;\\n\\n        if (!isScaleChannel(channel)) {\\n          continue;\\n        }\\n\\n        const scale = model.getScaleComponent(channel);\\n        const scaleType = scale ? scale.get('type') : undefined;\\n\\n        if (!scale || !hasContinuousDomain(scaleType)) {\\n          warn(SCALE_BINDINGS_CONTINUOUS);\\n          continue;\\n        }\\n\\n        const extent = {\\n          selection: selCmpt.name,\\n          field: proj.field\\n        };\\n        scale.set('selectionExtent', extent, true);\\n        bound.push(proj);\\n      }\\n    },\\n    topLevelSignals: (model, selCmpt, signals) => {\\n      const bound = selCmpt.scales.filter(proj => signals.filter(s => s.name === proj.signals.data).length === 0); // Top-level signals are only needed for multiview displays and if this\\n      // view's top-level signals haven't already been generated.\\n\\n      if (!model.parent || isTopLevelLayer(model) || bound.length === 0) {\\n        return signals;\\n      } // vlSelectionResolve does not account for the behavior of bound scales in\\n      // multiview displays. Each unit view adds a tuple to the store, but the\\n      // state of the selection is the unit selection most recently updated. This\\n      // state is captured by the top-level signals that we insert and \\\"push\\n      // outer\\\" to from within the units. We need to reassemble this state into\\n      // the top-level named signal, except no single selCmpt has a global view.\\n\\n\\n      const namedSg = signals.filter(s => s.name === selCmpt.name)[0];\\n      let update = namedSg.update;\\n\\n      if (update.indexOf(VL_SELECTION_RESOLVE) >= 0) {\\n        namedSg.update = \\\"{\\\".concat(bound.map(proj => \\\"\\\".concat($(proj.field), \\\": \\\").concat(proj.signals.data)).join(', '), \\\"}\\\");\\n      } else {\\n        for (const proj of bound) {\\n          const mapping = \\\"\\\".concat($(proj.field), \\\": \\\").concat(proj.signals.data);\\n\\n          if (update.indexOf(mapping) < 0) {\\n            update = \\\"\\\".concat(update.substring(0, update.length - 1), \\\", \\\").concat(mapping, \\\"}\\\");\\n          }\\n        }\\n\\n        namedSg.update = update;\\n      }\\n\\n      return signals.concat(bound.map(proj => ({\\n        name: proj.signals.data\\n      })));\\n    },\\n    signals: (model, selCmpt, signals) => {\\n      // Nested signals need only push to top-level signals with multiview displays.\\n      if (model.parent && !isTopLevelLayer(model)) {\\n        for (const proj of selCmpt.scales) {\\n          const signal = signals.filter(s => s.name === proj.signals.data)[0];\\n          signal.push = 'outer';\\n          delete signal.value;\\n          delete signal.update;\\n        }\\n      }\\n\\n      return signals;\\n    }\\n  };\\n  function domain$1(model, channel) {\\n    const scale = $(model.scaleName(channel));\\n    return \\\"domain(\\\".concat(scale, \\\")\\\");\\n  }\\n\\n  function isTopLevelLayer(model) {\\n    var _model$parent$parent;\\n\\n    return model.parent && isLayerModel(model.parent) && ((_model$parent$parent = !model.parent.parent) !== null && _model$parent$parent !== void 0 ? _model$parent$parent : isTopLevelLayer(model.parent.parent));\\n  }\\n\\n  const legendBindings = {\\n    has: selCmpt => {\\n      const spec = selCmpt.resolve === 'global' && selCmpt.bind && isLegendBinding(selCmpt.bind);\\n      const projLen = selCmpt.project.items.length === 1 && selCmpt.project.items[0].field !== SELECTION_ID;\\n\\n      if (spec && !projLen) {\\n        warn(LEGEND_BINDINGS_MUST_HAVE_PROJECTION);\\n      }\\n\\n      return spec && projLen;\\n    },\\n    parse: (model, selCmpt, selDef, origDef) => {\\n      // Binding a selection to a legend disables default direct manipulation interaction.\\n      // A user can choose to re-enable it by explicitly specifying triggering input events.\\n      if (!origDef.on) delete selCmpt.events;\\n      if (!origDef.clear) delete selCmpt.clear;\\n\\n      if (origDef.on || origDef.clear) {\\n        const legendFilter = 'event.item && indexof(event.item.mark.role, \\\"legend\\\") < 0';\\n\\n        for (const evt of selCmpt.events) {\\n          var _evt$filter;\\n\\n          evt.filter = array((_evt$filter = evt.filter) !== null && _evt$filter !== void 0 ? _evt$filter : []);\\n\\n          if (evt.filter.indexOf(legendFilter) < 0) {\\n            evt.filter.push(legendFilter);\\n          }\\n        }\\n      }\\n\\n      const evt = isLegendStreamBinding(selCmpt.bind) ? selCmpt.bind.legend : 'click';\\n      const stream = isString(evt) ? eventSelector(evt, 'view') : array(evt);\\n      selCmpt.bind = {\\n        legend: {\\n          merge: stream\\n        }\\n      };\\n    },\\n    topLevelSignals: (model, selCmpt, signals) => {\\n      const selName = selCmpt.name;\\n      const stream = isLegendStreamBinding(selCmpt.bind) && selCmpt.bind.legend;\\n\\n      const markName = name => s => {\\n        const ds = duplicate(s);\\n        ds.markname = name;\\n        return ds;\\n      };\\n\\n      for (const proj of selCmpt.project.items) {\\n        if (!proj.hasLegend) continue;\\n        const prefix = \\\"\\\".concat(varName(proj.field), \\\"_legend\\\");\\n        const sgName = \\\"\\\".concat(selName, \\\"_\\\").concat(prefix);\\n        const hasSignal = signals.filter(s => s.name === sgName);\\n\\n        if (hasSignal.length === 0) {\\n          const events = stream.merge.map(markName(\\\"\\\".concat(prefix, \\\"_symbols\\\"))).concat(stream.merge.map(markName(\\\"\\\".concat(prefix, \\\"_labels\\\")))).concat(stream.merge.map(markName(\\\"\\\".concat(prefix, \\\"_entries\\\"))));\\n          signals.unshift({\\n            name: sgName,\\n            ...(!selCmpt.init ? {\\n              value: null\\n            } : {}),\\n            on: [// Legend entries do not store values, so we need to walk the scenegraph to the symbol datum.\\n            {\\n              events,\\n              update: 'datum.value || item().items[0].items[0].datum.value',\\n              force: true\\n            }, {\\n              events: stream.merge,\\n              update: \\\"!event.item || !datum ? null : \\\".concat(sgName),\\n              force: true\\n            }]\\n          });\\n        }\\n      }\\n\\n      return signals;\\n    },\\n    signals: (model, selCmpt, signals) => {\\n      const name = selCmpt.name;\\n      const proj = selCmpt.project;\\n      const tuple = signals.find(s => s.name === name + TUPLE);\\n      const fields = name + TUPLE_FIELDS;\\n      const values = proj.items.filter(p => p.hasLegend).map(p => varName(\\\"\\\".concat(name, \\\"_\\\").concat(varName(p.field), \\\"_legend\\\")));\\n      const valid = values.map(v => \\\"\\\".concat(v, \\\" !== null\\\")).join(' && ');\\n      const update = \\\"\\\".concat(valid, \\\" ? {fields: \\\").concat(fields, \\\", values: [\\\").concat(values.join(', '), \\\"]} : null\\\");\\n\\n      if (selCmpt.events && values.length > 0) {\\n        tuple.on.push({\\n          events: values.map(signal => ({\\n            signal\\n          })),\\n          update\\n        });\\n      } else if (values.length > 0) {\\n        tuple.update = update;\\n        delete tuple.value;\\n        delete tuple.on;\\n      }\\n\\n      const toggle = signals.find(s => s.name === name + TOGGLE);\\n      const events = isLegendStreamBinding(selCmpt.bind) && selCmpt.bind.legend;\\n\\n      if (toggle) {\\n        if (!selCmpt.events) toggle.on[0].events = events;else toggle.on.push({ ...toggle.on[0],\\n          events\\n        });\\n      }\\n\\n      return signals;\\n    }\\n  };\\n  function parseInteractiveLegend(model, channel, legendCmpt) {\\n    var _model$fieldDef;\\n\\n    const field = (_model$fieldDef = model.fieldDef(channel)) === null || _model$fieldDef === void 0 ? void 0 : _model$fieldDef.field;\\n    forEachSelection(model, selCmpt => {\\n      var _selCmpt$project$hasF;\\n\\n      const proj = (_selCmpt$project$hasF = selCmpt.project.hasField[field]) !== null && _selCmpt$project$hasF !== void 0 ? _selCmpt$project$hasF : selCmpt.project.hasChannel[channel];\\n\\n      if (proj && legendBindings.has(selCmpt)) {\\n        var _legendCmpt$get;\\n\\n        const legendSelections = (_legendCmpt$get = legendCmpt.get('selections')) !== null && _legendCmpt$get !== void 0 ? _legendCmpt$get : [];\\n        legendSelections.push(selCmpt.name);\\n        legendCmpt.set('selections', legendSelections, false);\\n        proj.hasLegend = true;\\n      }\\n    });\\n  }\\n\\n  const ANCHOR = '_translate_anchor';\\n  const DELTA = '_translate_delta';\\n  const translate = {\\n    has: selCmpt => {\\n      return selCmpt.type === 'interval' && selCmpt.translate;\\n    },\\n    signals: (model, selCmpt, signals) => {\\n      const name = selCmpt.name;\\n      const hasScales = scaleBindings.has(selCmpt);\\n      const anchor = name + ANCHOR;\\n      const {\\n        x,\\n        y\\n      } = selCmpt.project.hasChannel;\\n      let events = eventSelector(selCmpt.translate, 'scope');\\n\\n      if (!hasScales) {\\n        events = events.map(e => (e.between[0].markname = name + BRUSH, e));\\n      }\\n\\n      signals.push({\\n        name: anchor,\\n        value: {},\\n        on: [{\\n          events: events.map(e => e.between[0]),\\n          update: '{x: x(unit), y: y(unit)' + (x !== undefined ? ', extent_x: ' + (hasScales ? domain$1(model, X) : \\\"slice(\\\".concat(x.signals.visual, \\\")\\\")) : '') + (y !== undefined ? ', extent_y: ' + (hasScales ? domain$1(model, Y) : \\\"slice(\\\".concat(y.signals.visual, \\\")\\\")) : '') + '}'\\n        }]\\n      }, {\\n        name: name + DELTA,\\n        value: {},\\n        on: [{\\n          events: events,\\n          update: \\\"{x: \\\".concat(anchor, \\\".x - x(unit), y: \\\").concat(anchor, \\\".y - y(unit)}\\\")\\n        }]\\n      });\\n\\n      if (x !== undefined) {\\n        onDelta(model, selCmpt, x, 'width', signals);\\n      }\\n\\n      if (y !== undefined) {\\n        onDelta(model, selCmpt, y, 'height', signals);\\n      }\\n\\n      return signals;\\n    }\\n  };\\n\\n  function onDelta(model, selCmpt, proj, size, signals) {\\n    var _scaleCmpt$get;\\n\\n    const name = selCmpt.name;\\n    const anchor = name + ANCHOR;\\n    const delta = name + DELTA;\\n    const channel = proj.channel;\\n    const hasScales = scaleBindings.has(selCmpt);\\n    const signal = signals.filter(s => s.name === proj.signals[hasScales ? 'data' : 'visual'])[0];\\n    const sizeSg = model.getSizeSignalRef(size).signal;\\n    const scaleCmpt = model.getScaleComponent(channel);\\n    const scaleType = scaleCmpt.get('type');\\n    const sign = hasScales && channel === X ? '-' : ''; // Invert delta when panning x-scales.\\n\\n    const extent = \\\"\\\".concat(anchor, \\\".extent_\\\").concat(channel);\\n    const offset = \\\"\\\".concat(sign).concat(delta, \\\".\\\").concat(channel, \\\" / \\\") + (hasScales ? \\\"\\\".concat(sizeSg) : \\\"span(\\\".concat(extent, \\\")\\\"));\\n    const panFn = !hasScales ? 'panLinear' : scaleType === 'log' ? 'panLog' : scaleType === 'pow' ? 'panPow' : 'panLinear';\\n    const update = \\\"\\\".concat(panFn, \\\"(\\\").concat(extent, \\\", \\\").concat(offset) + (hasScales && scaleType === 'pow' ? \\\", \\\".concat((_scaleCmpt$get = scaleCmpt.get('exponent')) !== null && _scaleCmpt$get !== void 0 ? _scaleCmpt$get : 1) : '') + ')';\\n    signal.on.push({\\n      events: {\\n        signal: delta\\n      },\\n      update: hasScales ? update : \\\"clampRange(\\\".concat(update, \\\", 0, \\\").concat(sizeSg, \\\")\\\")\\n    });\\n  }\\n\\n  const ANCHOR$1 = '_zoom_anchor';\\n  const DELTA$1 = '_zoom_delta';\\n  const zoom = {\\n    has: selCmpt => {\\n      return selCmpt.type === 'interval' && selCmpt.zoom;\\n    },\\n    signals: (model, selCmpt, signals) => {\\n      const name = selCmpt.name;\\n      const hasScales = scaleBindings.has(selCmpt);\\n      const delta = name + DELTA$1;\\n      const {\\n        x,\\n        y\\n      } = selCmpt.project.hasChannel;\\n      const sx = $(model.scaleName(X));\\n      const sy = $(model.scaleName(Y));\\n      let events = eventSelector(selCmpt.zoom, 'scope');\\n\\n      if (!hasScales) {\\n        events = events.map(e => (e.markname = name + BRUSH, e));\\n      }\\n\\n      signals.push({\\n        name: name + ANCHOR$1,\\n        on: [{\\n          events: events,\\n          update: !hasScales ? \\\"{x: x(unit), y: y(unit)}\\\" : '{' + [sx ? \\\"x: invert(\\\".concat(sx, \\\", x(unit))\\\") : '', sy ? \\\"y: invert(\\\".concat(sy, \\\", y(unit))\\\") : ''].filter(expr => !!expr).join(', ') + '}'\\n        }]\\n      }, {\\n        name: delta,\\n        on: [{\\n          events: events,\\n          force: true,\\n          update: 'pow(1.001, event.deltaY * pow(16, event.deltaMode))'\\n        }]\\n      });\\n\\n      if (x !== undefined) {\\n        onDelta$1(model, selCmpt, x, 'width', signals);\\n      }\\n\\n      if (y !== undefined) {\\n        onDelta$1(model, selCmpt, y, 'height', signals);\\n      }\\n\\n      return signals;\\n    }\\n  };\\n\\n  function onDelta$1(model, selCmpt, proj, size, signals) {\\n    var _scaleCmpt$get;\\n\\n    const name = selCmpt.name;\\n    const channel = proj.channel;\\n    const hasScales = scaleBindings.has(selCmpt);\\n    const signal = signals.filter(s => s.name === proj.signals[hasScales ? 'data' : 'visual'])[0];\\n    const sizeSg = model.getSizeSignalRef(size).signal;\\n    const scaleCmpt = model.getScaleComponent(channel);\\n    const scaleType = scaleCmpt.get('type');\\n    const base = hasScales ? domain$1(model, channel) : signal.name;\\n    const delta = name + DELTA$1;\\n    const anchor = \\\"\\\".concat(name).concat(ANCHOR$1, \\\".\\\").concat(channel);\\n    const zoomFn = !hasScales ? 'zoomLinear' : scaleType === 'log' ? 'zoomLog' : scaleType === 'pow' ? 'zoomPow' : 'zoomLinear';\\n    const update = \\\"\\\".concat(zoomFn, \\\"(\\\").concat(base, \\\", \\\").concat(anchor, \\\", \\\").concat(delta) + (hasScales && scaleType === 'pow' ? \\\", \\\".concat((_scaleCmpt$get = scaleCmpt.get('exponent')) !== null && _scaleCmpt$get !== void 0 ? _scaleCmpt$get : 1) : '') + ')';\\n    signal.on.push({\\n      events: {\\n        signal: delta\\n      },\\n      update: hasScales ? update : \\\"clampRange(\\\".concat(update, \\\", 0, \\\").concat(sizeSg, \\\")\\\")\\n    });\\n  }\\n\\n  const compilers = [project, toggle, scaleBindings, legendBindings, translate, zoom, inputBindings, nearest, clear];\\n  function forEachTransform(selCmpt, cb) {\\n    for (const t of compilers) {\\n      if (t.has(selCmpt)) {\\n        cb(t);\\n      }\\n    }\\n  }\\n\\n  function assembleInit(init, isExpr = true, wrap = identity) {\\n    if (isArray(init)) {\\n      const assembled = init.map(v => assembleInit(v, isExpr, wrap));\\n      return isExpr ? \\\"[\\\".concat(assembled.join(', '), \\\"]\\\") : assembled;\\n    } else if (isDateTime(init)) {\\n      if (isExpr) {\\n        return wrap(dateTimeToExpr(init));\\n      } else {\\n        return wrap(dateTimeToTimestamp(init));\\n      }\\n    }\\n\\n    return isExpr ? wrap(JSON.stringify(init)) : init;\\n  }\\n  function assembleUnitSelectionSignals(model, signals) {\\n    forEachSelection(model, (selCmpt, selCompiler) => {\\n      const name = selCmpt.name;\\n      let modifyExpr = selCompiler.modifyExpr(model, selCmpt);\\n      signals.push(...selCompiler.signals(model, selCmpt));\\n      forEachTransform(selCmpt, txCompiler => {\\n        if (txCompiler.signals) {\\n          signals = txCompiler.signals(model, selCmpt, signals);\\n        }\\n\\n        if (txCompiler.modifyExpr) {\\n          modifyExpr = txCompiler.modifyExpr(model, selCmpt, modifyExpr);\\n        }\\n      });\\n      signals.push({\\n        name: name + MODIFY,\\n        on: [{\\n          events: {\\n            signal: selCmpt.name + TUPLE\\n          },\\n          update: \\\"modify(\\\".concat($(selCmpt.name + STORE), \\\", \\\").concat(modifyExpr, \\\")\\\")\\n        }]\\n      });\\n    });\\n    return cleanupEmptyOnArray(signals);\\n  }\\n  function assembleFacetSignals(model, signals) {\\n    if (model.component.selection && keys(model.component.selection).length) {\\n      const name = $(model.getName('cell'));\\n      signals.unshift({\\n        name: 'facet',\\n        value: {},\\n        on: [{\\n          events: eventSelector('mousemove', 'scope'),\\n          update: \\\"isTuple(facet) ? facet : group(\\\".concat(name, \\\").datum\\\")\\n        }]\\n      });\\n    }\\n\\n    return cleanupEmptyOnArray(signals);\\n  }\\n  function assembleTopLevelSignals(model, signals) {\\n    let hasSelections = false;\\n    forEachSelection(model, (selCmpt, selCompiler) => {\\n      const name = selCmpt.name;\\n      const store = $(name + STORE);\\n      const hasSg = signals.filter(s => s.name === name);\\n\\n      if (hasSg.length === 0) {\\n        const resolve = selCmpt.resolve === 'global' ? 'union' : selCmpt.resolve;\\n        const isMulti = selCmpt.type === 'multi' ? ', true)' : ')';\\n        signals.push({\\n          name: selCmpt.name,\\n          update: \\\"\\\".concat(VL_SELECTION_RESOLVE, \\\"(\\\").concat(store, \\\", \\\").concat($(resolve)).concat(isMulti)\\n        });\\n      }\\n\\n      hasSelections = true;\\n\\n      if (selCompiler.topLevelSignals) {\\n        signals = selCompiler.topLevelSignals(model, selCmpt, signals);\\n      }\\n\\n      forEachTransform(selCmpt, txCompiler => {\\n        if (txCompiler.topLevelSignals) {\\n          signals = txCompiler.topLevelSignals(model, selCmpt, signals);\\n        }\\n      });\\n    });\\n\\n    if (hasSelections) {\\n      const hasUnit = signals.filter(s => s.name === 'unit');\\n\\n      if (hasUnit.length === 0) {\\n        signals.unshift({\\n          name: 'unit',\\n          value: {},\\n          on: [{\\n            events: 'mousemove',\\n            update: 'isTuple(group()) ? group() : unit'\\n          }]\\n        });\\n      }\\n    }\\n\\n    return cleanupEmptyOnArray(signals);\\n  }\\n  function assembleUnitSelectionData(model, data) {\\n    const dataCopy = [...data];\\n    forEachSelection(model, selCmpt => {\\n      const init = {\\n        name: selCmpt.name + STORE\\n      };\\n\\n      if (selCmpt.init) {\\n        const fields = selCmpt.project.items.map(proj => {\\n          const {\\n            signals,\\n            ...rest\\n          } = proj;\\n          return rest;\\n        });\\n        const insert = selCmpt.init.map(i => assembleInit(i, false));\\n        init.values = selCmpt.type === 'interval' ? [{\\n          unit: unitName(model, {\\n            escape: false\\n          }),\\n          fields,\\n          values: insert\\n        }] : insert.map(i => ({\\n          unit: unitName(model, {\\n            escape: false\\n          }),\\n          fields,\\n          values: i\\n        }));\\n      }\\n\\n      const contains = dataCopy.filter(d => d.name === selCmpt.name + STORE);\\n\\n      if (!contains.length) {\\n        dataCopy.push(init);\\n      }\\n    });\\n    return dataCopy;\\n  }\\n  function assembleUnitSelectionMarks(model, marks) {\\n    forEachSelection(model, (selCmpt, selCompiler) => {\\n      marks = selCompiler.marks ? selCompiler.marks(model, selCmpt, marks) : marks;\\n      forEachTransform(selCmpt, txCompiler => {\\n        if (txCompiler.marks) {\\n          marks = txCompiler.marks(model, selCmpt, marks);\\n        }\\n      });\\n    });\\n    return marks;\\n  }\\n  function assembleLayerSelectionMarks(model, marks) {\\n    for (const child of model.children) {\\n      if (isUnitModel(child)) {\\n        marks = assembleUnitSelectionMarks(child, marks);\\n      }\\n    }\\n\\n    return marks;\\n  }\\n  function assembleSelectionScaleDomain(model, extent) {\\n    const name = extent.selection;\\n    const selCmpt = model.getSelectionComponent(name, varName(name));\\n    return {\\n      signal: parseSelectionBinExtent(selCmpt, extent)\\n    };\\n  }\\n\\n  function cleanupEmptyOnArray(signals) {\\n    return signals.map(s => {\\n      if (s.on && !s.on.length) delete s.on;\\n      return s;\\n    });\\n  }\\n\\n  const BRUSH = '_brush';\\n  const SCALE_TRIGGER = '_scale_trigger';\\n  const interval = {\\n    signals: (model, selCmpt) => {\\n      const name = selCmpt.name;\\n      const fieldsSg = name + TUPLE_FIELDS;\\n      const hasScales = scaleBindings.has(selCmpt);\\n      const signals = [];\\n      const dataSignals = [];\\n      const scaleTriggers = [];\\n\\n      if (selCmpt.translate && !hasScales) {\\n        const filterExpr = \\\"!event.item || event.item.mark.name !== \\\".concat($(name + BRUSH));\\n        events(selCmpt, (on, evt) => {\\n          var _evt$between$0$filter;\\n\\n          const filters = array((_evt$between$0$filter = evt.between[0].filter) !== null && _evt$between$0$filter !== void 0 ? _evt$between$0$filter : evt.between[0].filter = []);\\n\\n          if (filters.indexOf(filterExpr) < 0) {\\n            filters.push(filterExpr);\\n          }\\n\\n          return on;\\n        });\\n      }\\n\\n      selCmpt.project.items.forEach((proj, i) => {\\n        const channel = proj.channel;\\n\\n        if (channel !== X && channel !== Y) {\\n          warn('Interval selections only support x and y encoding channels.');\\n          return;\\n        }\\n\\n        const init = selCmpt.init ? selCmpt.init[i] : null;\\n        const cs = channelSignals(model, selCmpt, proj, init);\\n        const dname = proj.signals.data;\\n        const vname = proj.signals.visual;\\n        const scaleName = $(model.scaleName(channel));\\n        const scaleType = model.getScaleComponent(channel).get('type');\\n        const toNum = hasContinuousDomain(scaleType) ? '+' : '';\\n        signals.push(...cs);\\n        dataSignals.push(dname);\\n        scaleTriggers.push({\\n          scaleName: model.scaleName(channel),\\n          expr: \\\"(!isArray(\\\".concat(dname, \\\") || \\\") + \\\"(\\\".concat(toNum, \\\"invert(\\\").concat(scaleName, \\\", \\\").concat(vname, \\\")[0] === \\\").concat(toNum).concat(dname, \\\"[0] && \\\") + \\\"\\\".concat(toNum, \\\"invert(\\\").concat(scaleName, \\\", \\\").concat(vname, \\\")[1] === \\\").concat(toNum).concat(dname, \\\"[1]))\\\")\\n        });\\n      }); // Proxy scale reactions to ensure that an infinite loop doesn't occur\\n      // when an interval selection filter touches the scale.\\n\\n      if (!hasScales) {\\n        signals.push({\\n          name: name + SCALE_TRIGGER,\\n          value: {},\\n          on: [{\\n            events: scaleTriggers.map(t => ({\\n              scale: t.scaleName\\n            })),\\n            update: scaleTriggers.map(t => t.expr).join(' && ') + \\\" ? \\\".concat(name + SCALE_TRIGGER, \\\" : {}\\\")\\n          }]\\n        });\\n      } // Only add an interval to the store if it has valid data extents. Data extents\\n      // are set to null if pixel extents are equal to account for intervals over\\n      // ordinal/nominal domains which, when inverted, will still produce a valid datum.\\n\\n\\n      const init = selCmpt.init;\\n      const update = \\\"unit: \\\".concat(unitName(model), \\\", fields: \\\").concat(fieldsSg, \\\", values\\\");\\n      return signals.concat({\\n        name: name + TUPLE,\\n        ...(init ? {\\n          init: \\\"{\\\".concat(update, \\\": \\\").concat(assembleInit(init), \\\"}\\\")\\n        } : {}),\\n        on: [{\\n          events: [{\\n            signal: dataSignals.join(' || ')\\n          }],\\n          // Prevents double invocation, see https://github.com/vega/vega#1672.\\n          update: dataSignals.join(' && ') + \\\" ? {\\\".concat(update, \\\": [\\\").concat(dataSignals, \\\"]} : null\\\")\\n        }]\\n      });\\n    },\\n    modifyExpr: (model, selCmpt) => {\\n      const tpl = selCmpt.name + TUPLE;\\n      return tpl + ', ' + (selCmpt.resolve === 'global' ? 'true' : \\\"{unit: \\\".concat(unitName(model), \\\"}\\\"));\\n    },\\n    marks: (model, selCmpt, marks) => {\\n      const name = selCmpt.name;\\n      const {\\n        x,\\n        y\\n      } = selCmpt.project.hasChannel;\\n      const xvname = x && x.signals.visual;\\n      const yvname = y && y.signals.visual;\\n      const store = \\\"data(\\\".concat($(selCmpt.name + STORE), \\\")\\\"); // Do not add a brush if we're binding to scales.\\n\\n      if (scaleBindings.has(selCmpt)) {\\n        return marks;\\n      }\\n\\n      const update = {\\n        x: x !== undefined ? {\\n          signal: \\\"\\\".concat(xvname, \\\"[0]\\\")\\n        } : {\\n          value: 0\\n        },\\n        y: y !== undefined ? {\\n          signal: \\\"\\\".concat(yvname, \\\"[0]\\\")\\n        } : {\\n          value: 0\\n        },\\n        x2: x !== undefined ? {\\n          signal: \\\"\\\".concat(xvname, \\\"[1]\\\")\\n        } : {\\n          field: {\\n            group: 'width'\\n          }\\n        },\\n        y2: y !== undefined ? {\\n          signal: \\\"\\\".concat(yvname, \\\"[1]\\\")\\n        } : {\\n          field: {\\n            group: 'height'\\n          }\\n        }\\n      }; // If the selection is resolved to global, only a single interval is in\\n      // the store. Wrap brush mark's encodings with a production rule to test\\n      // this based on the `unit` property. Hide the brush mark if it corresponds\\n      // to a unit different from the one in the store.\\n\\n      if (selCmpt.resolve === 'global') {\\n        for (const key of keys(update)) {\\n          update[key] = [{\\n            test: \\\"\\\".concat(store, \\\".length && \\\").concat(store, \\\"[0].unit === \\\").concat(unitName(model)),\\n            ...update[key]\\n          }, {\\n            value: 0\\n          }];\\n        }\\n      } // Two brush marks ensure that fill colors and other aesthetic choices do\\n      // not interefere with the core marks, but that the brushed region can still\\n      // be interacted with (e.g., dragging it around).\\n\\n\\n      const {\\n        fill,\\n        fillOpacity,\\n        cursor,\\n        ...stroke\\n      } = selCmpt.mark;\\n      const vgStroke = keys(stroke).reduce((def, k) => {\\n        def[k] = [{\\n          test: [x !== undefined && \\\"\\\".concat(xvname, \\\"[0] !== \\\").concat(xvname, \\\"[1]\\\"), y !== undefined && \\\"\\\".concat(yvname, \\\"[0] !== \\\").concat(yvname, \\\"[1]\\\")].filter(t => t).join(' && '),\\n          value: stroke[k]\\n        }, {\\n          value: null\\n        }];\\n        return def;\\n      }, {});\\n      return [{\\n        name: name + BRUSH + '_bg',\\n        type: 'rect',\\n        clip: true,\\n        encode: {\\n          enter: {\\n            fill: {\\n              value: fill\\n            },\\n            fillOpacity: {\\n              value: fillOpacity\\n            }\\n          },\\n          update: update\\n        }\\n      }, ...marks, {\\n        name: name + BRUSH,\\n        type: 'rect',\\n        clip: true,\\n        encode: {\\n          enter: { ...(cursor ? {\\n              cursor: {\\n                value: cursor\\n              }\\n            } : {}),\\n            fill: {\\n              value: 'transparent'\\n            }\\n          },\\n          update: { ...update,\\n            ...vgStroke\\n          }\\n        }\\n      }];\\n    }\\n  };\\n  /**\\n   * Returns the visual and data signals for an interval selection.\\n   */\\n\\n  function channelSignals(model, selCmpt, proj, init) {\\n    const channel = proj.channel;\\n    const vname = proj.signals.visual;\\n    const dname = proj.signals.data;\\n    const hasScales = scaleBindings.has(selCmpt);\\n    const scaleName = $(model.scaleName(channel));\\n    const scale = model.getScaleComponent(channel);\\n    const scaleType = scale ? scale.get('type') : undefined;\\n\\n    const scaled = str => \\\"scale(\\\".concat(scaleName, \\\", \\\").concat(str, \\\")\\\");\\n\\n    const size = model.getSizeSignalRef(channel === X ? 'width' : 'height').signal;\\n    const coord = \\\"\\\".concat(channel, \\\"(unit)\\\");\\n    const on = events(selCmpt, (def, evt) => {\\n      return [...def, {\\n        events: evt.between[0],\\n        update: \\\"[\\\".concat(coord, \\\", \\\").concat(coord, \\\"]\\\")\\n      }, // Brush Start\\n      {\\n        events: evt,\\n        update: \\\"[\\\".concat(vname, \\\"[0], clamp(\\\").concat(coord, \\\", 0, \\\").concat(size, \\\")]\\\")\\n      } // Brush End\\n      ];\\n    }); // React to pan/zooms of continuous scales. Non-continuous scales\\n    // (band, point) cannot be pan/zoomed and any other changes\\n    // to their domains (e.g., filtering) should clear the brushes.\\n\\n    on.push({\\n      events: {\\n        signal: selCmpt.name + SCALE_TRIGGER\\n      },\\n      update: hasContinuousDomain(scaleType) ? \\\"[\\\".concat(scaled(\\\"\\\".concat(dname, \\\"[0]\\\")), \\\", \\\").concat(scaled(\\\"\\\".concat(dname, \\\"[1]\\\")), \\\"]\\\") : \\\"[0, 0]\\\"\\n    });\\n    return hasScales ? [{\\n      name: dname,\\n      on: []\\n    }] : [{\\n      name: vname,\\n      ...(init ? {\\n        init: assembleInit(init, true, scaled)\\n      } : {\\n        value: []\\n      }),\\n      on: on\\n    }, {\\n      name: dname,\\n      ...(init ? {\\n        init: assembleInit(init)\\n      } : {}),\\n      // Cannot be `value` as `init` may require datetime exprs.\\n      on: [{\\n        events: {\\n          signal: vname\\n        },\\n        update: \\\"\\\".concat(vname, \\\"[0] === \\\").concat(vname, \\\"[1] ? null : invert(\\\").concat(scaleName, \\\", \\\").concat(vname, \\\")\\\")\\n      }]\\n    }];\\n  }\\n\\n  function events(selCmpt, cb) {\\n    return selCmpt.events.reduce((on, evt) => {\\n      if (!evt.between) {\\n        warn(\\\"\\\".concat(evt, \\\" is not an ordered event stream for interval selections.\\\"));\\n        return on;\\n      }\\n\\n      return cb(on, evt);\\n    }, []);\\n  }\\n\\n  function singleOrMultiSignals(model, selCmpt) {\\n    const name = selCmpt.name;\\n    const fieldsSg = name + TUPLE_FIELDS;\\n    const project = selCmpt.project;\\n    const datum = '(item().isVoronoi ? datum.datum : datum)';\\n    const values = project.items.map(p => {\\n      const fieldDef = model.fieldDef(p.channel); // Binned fields should capture extents, for a range test against the raw field.\\n\\n      return fieldDef && fieldDef.bin ? \\\"[\\\".concat(datum, \\\"[\\\").concat($(model.vgField(p.channel, {})), \\\"], \\\") + \\\"\\\".concat(datum, \\\"[\\\").concat($(model.vgField(p.channel, {\\n        binSuffix: 'end'\\n      })), \\\"]]\\\") : \\\"\\\".concat(datum, \\\"[\\\").concat($(p.field), \\\"]\\\");\\n    }).join(', '); // Only add a discrete selection to the store if a datum is present _and_\\n    // the interaction isn't occurring on a group mark. This guards against\\n    // polluting interactive state with invalid values in faceted displays\\n    // as the group marks are also data-driven. We force the update to account\\n    // for constant null states but varying toggles (e.g., shift-click in\\n    // whitespace followed by a click in whitespace; the store should only\\n    // be cleared on the second click).\\n\\n    const update = \\\"unit: \\\".concat(unitName(model), \\\", fields: \\\").concat(fieldsSg, \\\", values\\\");\\n    const events = selCmpt.events;\\n    return [{\\n      name: name + TUPLE,\\n      on: events ? [{\\n        events,\\n        update: \\\"datum && item().mark.marktype !== 'group' ? {\\\".concat(update, \\\": [\\\").concat(values, \\\"]} : null\\\"),\\n        force: true\\n      }] : []\\n    }];\\n  }\\n  const multi = {\\n    signals: singleOrMultiSignals,\\n    modifyExpr: (model, selCmpt) => {\\n      const tpl = selCmpt.name + TUPLE;\\n      return tpl + ', ' + (selCmpt.resolve === 'global' ? 'null' : \\\"{unit: \\\".concat(unitName(model), \\\"}\\\"));\\n    }\\n  };\\n\\n  const single = {\\n    signals: singleOrMultiSignals,\\n    modifyExpr: (model, selCmpt) => {\\n      const tpl = selCmpt.name + TUPLE;\\n      return tpl + ', ' + (selCmpt.resolve === 'global' ? 'true' : \\\"{unit: \\\".concat(unitName(model), \\\"}\\\"));\\n    }\\n  };\\n\\n  const STORE = '_store';\\n  const TUPLE = '_tuple';\\n  const MODIFY = '_modify';\\n  const VL_SELECTION_RESOLVE = 'vlSelectionResolve';\\n  const compilers$1 = {\\n    single,\\n    multi,\\n    interval\\n  };\\n  function forEachSelection(model, cb) {\\n    const selections = model.component.selection;\\n\\n    if (selections) {\\n      for (const sel of vals(selections)) {\\n        const success = cb(sel, compilers$1[sel.type]);\\n        if (success === true) break;\\n      }\\n    }\\n  }\\n\\n  function getFacetModel(model) {\\n    let parent = model.parent;\\n\\n    while (parent) {\\n      if (isFacetModel(parent)) {\\n        break;\\n      }\\n\\n      parent = parent.parent;\\n    }\\n\\n    return parent;\\n  }\\n\\n  function unitName(model, {\\n    escape\\n  } = {\\n    escape: true\\n  }) {\\n    let name = escape ? $(model.name) : model.name;\\n    const facetModel = getFacetModel(model);\\n\\n    if (facetModel) {\\n      const {\\n        facet\\n      } = facetModel;\\n\\n      for (const channel of FACET_CHANNELS) {\\n        if (facet[channel]) {\\n          name += \\\" + '__facet_\\\".concat(channel, \\\"_' + (facet[\\\").concat($(facetModel.vgField(channel)), \\\"])\\\");\\n        }\\n      }\\n    }\\n\\n    return name;\\n  }\\n  function requiresSelectionId(model) {\\n    let identifier = false;\\n    forEachSelection(model, selCmpt => {\\n      identifier = identifier || selCmpt.project.items.some(proj => proj.field === SELECTION_ID);\\n    });\\n    return identifier;\\n  }\\n\\n  const RawCode = 'RawCode';\\n  const Literal = 'Literal';\\n  const Property = 'Property';\\n  const Identifier = 'Identifier';\\n  const ArrayExpression = 'ArrayExpression';\\n  const BinaryExpression = 'BinaryExpression';\\n  const CallExpression = 'CallExpression';\\n  const ConditionalExpression = 'ConditionalExpression';\\n  const LogicalExpression = 'LogicalExpression';\\n  const MemberExpression = 'MemberExpression';\\n  const ObjectExpression = 'ObjectExpression';\\n  const UnaryExpression = 'UnaryExpression';\\n\\n  function ASTNode(type) {\\n    this.type = type;\\n  }\\n\\n  ASTNode.prototype.visit = function (visitor) {\\n    let c, i, n;\\n    if (visitor(this)) return 1;\\n\\n    for (c = children(this), i = 0, n = c.length; i < n; ++i) {\\n      if (c[i].visit(visitor)) return 1;\\n    }\\n  };\\n\\n  function children(node) {\\n    switch (node.type) {\\n      case ArrayExpression:\\n        return node.elements;\\n\\n      case BinaryExpression:\\n      case LogicalExpression:\\n        return [node.left, node.right];\\n\\n      case CallExpression:\\n        return [node.callee].concat(node.arguments);\\n\\n      case ConditionalExpression:\\n        return [node.test, node.consequent, node.alternate];\\n\\n      case MemberExpression:\\n        return [node.object, node.property];\\n\\n      case ObjectExpression:\\n        return node.properties;\\n\\n      case Property:\\n        return [node.key, node.value];\\n\\n      case UnaryExpression:\\n        return [node.argument];\\n\\n      case Identifier:\\n      case Literal:\\n      case RawCode:\\n      default:\\n        return [];\\n    }\\n  }\\n  /*\\n    The following expression parser is based on Esprima (http://esprima.org/).\\n    Original header comment and license for Esprima is included here:\\n\\n    Copyright (C) 2013 Ariya Hidayat <ariya.hidayat@gmail.com>\\n    Copyright (C) 2013 Thaddee Tyl <thaddee.tyl@gmail.com>\\n    Copyright (C) 2013 Mathias Bynens <mathias@qiwi.be>\\n    Copyright (C) 2012 Ariya Hidayat <ariya.hidayat@gmail.com>\\n    Copyright (C) 2012 Mathias Bynens <mathias@qiwi.be>\\n    Copyright (C) 2012 Joost-Wim Boekesteijn <joost-wim@boekesteijn.nl>\\n    Copyright (C) 2012 Kris Kowal <kris.kowal@cixar.com>\\n    Copyright (C) 2012 Yusuke Suzuki <utatane.tea@gmail.com>\\n    Copyright (C) 2012 Arpad Borsos <arpad.borsos@googlemail.com>\\n    Copyright (C) 2011 Ariya Hidayat <ariya.hidayat@gmail.com>\\n\\n    Redistribution and use in source and binary forms, with or without\\n    modification, are permitted provided that the following conditions are met:\\n\\n      * Redistributions of source code must retain the above copyright\\n        notice, this list of conditions and the following disclaimer.\\n      * Redistributions in binary form must reproduce the above copyright\\n        notice, this list of conditions and the following disclaimer in the\\n        documentation and/or other materials provided with the distribution.\\n\\n    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \\\"AS IS\\\"\\n    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\\n    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\\n    ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY\\n    DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\\n    (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\\n    LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\\n    ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\\n    (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\\n    THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\\n  */\\n\\n\\n  var TokenName, source, index, length, lookahead;\\n  var TokenBooleanLiteral = 1,\\n      TokenEOF = 2,\\n      TokenIdentifier = 3,\\n      TokenKeyword = 4,\\n      TokenNullLiteral = 5,\\n      TokenNumericLiteral = 6,\\n      TokenPunctuator = 7,\\n      TokenStringLiteral = 8,\\n      TokenRegularExpression = 9;\\n  TokenName = {};\\n  TokenName[TokenBooleanLiteral] = 'Boolean';\\n  TokenName[TokenEOF] = '<end>';\\n  TokenName[TokenIdentifier] = 'Identifier';\\n  TokenName[TokenKeyword] = 'Keyword';\\n  TokenName[TokenNullLiteral] = 'Null';\\n  TokenName[TokenNumericLiteral] = 'Numeric';\\n  TokenName[TokenPunctuator] = 'Punctuator';\\n  TokenName[TokenStringLiteral] = 'String';\\n  TokenName[TokenRegularExpression] = 'RegularExpression';\\n  var SyntaxArrayExpression = 'ArrayExpression',\\n      SyntaxBinaryExpression = 'BinaryExpression',\\n      SyntaxCallExpression = 'CallExpression',\\n      SyntaxConditionalExpression = 'ConditionalExpression',\\n      SyntaxIdentifier = 'Identifier',\\n      SyntaxLiteral = 'Literal',\\n      SyntaxLogicalExpression = 'LogicalExpression',\\n      SyntaxMemberExpression = 'MemberExpression',\\n      SyntaxObjectExpression = 'ObjectExpression',\\n      SyntaxProperty = 'Property',\\n      SyntaxUnaryExpression = 'UnaryExpression'; // Error messages should be identical to V8.\\n\\n  var MessageUnexpectedToken = 'Unexpected token %0',\\n      MessageUnexpectedNumber = 'Unexpected number',\\n      MessageUnexpectedString = 'Unexpected string',\\n      MessageUnexpectedIdentifier = 'Unexpected identifier',\\n      MessageUnexpectedReserved = 'Unexpected reserved word',\\n      MessageUnexpectedEOS = 'Unexpected end of input',\\n      MessageInvalidRegExp = 'Invalid regular expression',\\n      MessageUnterminatedRegExp = 'Invalid regular expression: missing /',\\n      MessageStrictOctalLiteral = 'Octal literals are not allowed in strict mode.',\\n      MessageStrictDuplicateProperty = 'Duplicate data property in object literal not allowed in strict mode';\\n  var ILLEGAL$1 = 'ILLEGAL',\\n      DISABLED = 'Disabled.'; // See also tools/generate-unicode-regex.py.\\n\\n  var RegexNonAsciiIdentifierStart = new RegExp('[\\\\\\\\xAA\\\\\\\\xB5\\\\\\\\xBA\\\\\\\\xC0-\\\\\\\\xD6\\\\\\\\xD8-\\\\\\\\xF6\\\\\\\\xF8-\\\\\\\\u02C1\\\\\\\\u02C6-\\\\\\\\u02D1\\\\\\\\u02E0-\\\\\\\\u02E4\\\\\\\\u02EC\\\\\\\\u02EE\\\\\\\\u0370-\\\\\\\\u0374\\\\\\\\u0376\\\\\\\\u0377\\\\\\\\u037A-\\\\\\\\u037D\\\\\\\\u037F\\\\\\\\u0386\\\\\\\\u0388-\\\\\\\\u038A\\\\\\\\u038C\\\\\\\\u038E-\\\\\\\\u03A1\\\\\\\\u03A3-\\\\\\\\u03F5\\\\\\\\u03F7-\\\\\\\\u0481\\\\\\\\u048A-\\\\\\\\u052F\\\\\\\\u0531-\\\\\\\\u0556\\\\\\\\u0559\\\\\\\\u0561-\\\\\\\\u0587\\\\\\\\u05D0-\\\\\\\\u05EA\\\\\\\\u05F0-\\\\\\\\u05F2\\\\\\\\u0620-\\\\\\\\u064A\\\\\\\\u066E\\\\\\\\u066F\\\\\\\\u0671-\\\\\\\\u06D3\\\\\\\\u06D5\\\\\\\\u06E5\\\\\\\\u06E6\\\\\\\\u06EE\\\\\\\\u06EF\\\\\\\\u06FA-\\\\\\\\u06FC\\\\\\\\u06FF\\\\\\\\u0710\\\\\\\\u0712-\\\\\\\\u072F\\\\\\\\u074D-\\\\\\\\u07A5\\\\\\\\u07B1\\\\\\\\u07CA-\\\\\\\\u07EA\\\\\\\\u07F4\\\\\\\\u07F5\\\\\\\\u07FA\\\\\\\\u0800-\\\\\\\\u0815\\\\\\\\u081A\\\\\\\\u0824\\\\\\\\u0828\\\\\\\\u0840-\\\\\\\\u0858\\\\\\\\u08A0-\\\\\\\\u08B2\\\\\\\\u0904-\\\\\\\\u0939\\\\\\\\u093D\\\\\\\\u0950\\\\\\\\u0958-\\\\\\\\u0961\\\\\\\\u0971-\\\\\\\\u0980\\\\\\\\u0985-\\\\\\\\u098C\\\\\\\\u098F\\\\\\\\u0990\\\\\\\\u0993-\\\\\\\\u09A8\\\\\\\\u09AA-\\\\\\\\u09B0\\\\\\\\u09B2\\\\\\\\u09B6-\\\\\\\\u09B9\\\\\\\\u09BD\\\\\\\\u09CE\\\\\\\\u09DC\\\\\\\\u09DD\\\\\\\\u09DF-\\\\\\\\u09E1\\\\\\\\u09F0\\\\\\\\u09F1\\\\\\\\u0A05-\\\\\\\\u0A0A\\\\\\\\u0A0F\\\\\\\\u0A10\\\\\\\\u0A13-\\\\\\\\u0A28\\\\\\\\u0A2A-\\\\\\\\u0A30\\\\\\\\u0A32\\\\\\\\u0A33\\\\\\\\u0A35\\\\\\\\u0A36\\\\\\\\u0A38\\\\\\\\u0A39\\\\\\\\u0A59-\\\\\\\\u0A5C\\\\\\\\u0A5E\\\\\\\\u0A72-\\\\\\\\u0A74\\\\\\\\u0A85-\\\\\\\\u0A8D\\\\\\\\u0A8F-\\\\\\\\u0A91\\\\\\\\u0A93-\\\\\\\\u0AA8\\\\\\\\u0AAA-\\\\\\\\u0AB0\\\\\\\\u0AB2\\\\\\\\u0AB3\\\\\\\\u0AB5-\\\\\\\\u0AB9\\\\\\\\u0ABD\\\\\\\\u0AD0\\\\\\\\u0AE0\\\\\\\\u0AE1\\\\\\\\u0B05-\\\\\\\\u0B0C\\\\\\\\u0B0F\\\\\\\\u0B10\\\\\\\\u0B13-\\\\\\\\u0B28\\\\\\\\u0B2A-\\\\\\\\u0B30\\\\\\\\u0B32\\\\\\\\u0B33\\\\\\\\u0B35-\\\\\\\\u0B39\\\\\\\\u0B3D\\\\\\\\u0B5C\\\\\\\\u0B5D\\\\\\\\u0B5F-\\\\\\\\u0B61\\\\\\\\u0B71\\\\\\\\u0B83\\\\\\\\u0B85-\\\\\\\\u0B8A\\\\\\\\u0B8E-\\\\\\\\u0B90\\\\\\\\u0B92-\\\\\\\\u0B95\\\\\\\\u0B99\\\\\\\\u0B9A\\\\\\\\u0B9C\\\\\\\\u0B9E\\\\\\\\u0B9F\\\\\\\\u0BA3\\\\\\\\u0BA4\\\\\\\\u0BA8-\\\\\\\\u0BAA\\\\\\\\u0BAE-\\\\\\\\u0BB9\\\\\\\\u0BD0\\\\\\\\u0C05-\\\\\\\\u0C0C\\\\\\\\u0C0E-\\\\\\\\u0C10\\\\\\\\u0C12-\\\\\\\\u0C28\\\\\\\\u0C2A-\\\\\\\\u0C39\\\\\\\\u0C3D\\\\\\\\u0C58\\\\\\\\u0C59\\\\\\\\u0C60\\\\\\\\u0C61\\\\\\\\u0C85-\\\\\\\\u0C8C\\\\\\\\u0C8E-\\\\\\\\u0C90\\\\\\\\u0C92-\\\\\\\\u0CA8\\\\\\\\u0CAA-\\\\\\\\u0CB3\\\\\\\\u0CB5-\\\\\\\\u0CB9\\\\\\\\u0CBD\\\\\\\\u0CDE\\\\\\\\u0CE0\\\\\\\\u0CE1\\\\\\\\u0CF1\\\\\\\\u0CF2\\\\\\\\u0D05-\\\\\\\\u0D0C\\\\\\\\u0D0E-\\\\\\\\u0D10\\\\\\\\u0D12-\\\\\\\\u0D3A\\\\\\\\u0D3D\\\\\\\\u0D4E\\\\\\\\u0D60\\\\\\\\u0D61\\\\\\\\u0D7A-\\\\\\\\u0D7F\\\\\\\\u0D85-\\\\\\\\u0D96\\\\\\\\u0D9A-\\\\\\\\u0DB1\\\\\\\\u0DB3-\\\\\\\\u0DBB\\\\\\\\u0DBD\\\\\\\\u0DC0-\\\\\\\\u0DC6\\\\\\\\u0E01-\\\\\\\\u0E30\\\\\\\\u0E32\\\\\\\\u0E33\\\\\\\\u0E40-\\\\\\\\u0E46\\\\\\\\u0E81\\\\\\\\u0E82\\\\\\\\u0E84\\\\\\\\u0E87\\\\\\\\u0E88\\\\\\\\u0E8A\\\\\\\\u0E8D\\\\\\\\u0E94-\\\\\\\\u0E97\\\\\\\\u0E99-\\\\\\\\u0E9F\\\\\\\\u0EA1-\\\\\\\\u0EA3\\\\\\\\u0EA5\\\\\\\\u0EA7\\\\\\\\u0EAA\\\\\\\\u0EAB\\\\\\\\u0EAD-\\\\\\\\u0EB0\\\\\\\\u0EB2\\\\\\\\u0EB3\\\\\\\\u0EBD\\\\\\\\u0EC0-\\\\\\\\u0EC4\\\\\\\\u0EC6\\\\\\\\u0EDC-\\\\\\\\u0EDF\\\\\\\\u0F00\\\\\\\\u0F40-\\\\\\\\u0F47\\\\\\\\u0F49-\\\\\\\\u0F6C\\\\\\\\u0F88-\\\\\\\\u0F8C\\\\\\\\u1000-\\\\\\\\u102A\\\\\\\\u103F\\\\\\\\u1050-\\\\\\\\u1055\\\\\\\\u105A-\\\\\\\\u105D\\\\\\\\u1061\\\\\\\\u1065\\\\\\\\u1066\\\\\\\\u106E-\\\\\\\\u1070\\\\\\\\u1075-\\\\\\\\u1081\\\\\\\\u108E\\\\\\\\u10A0-\\\\\\\\u10C5\\\\\\\\u10C7\\\\\\\\u10CD\\\\\\\\u10D0-\\\\\\\\u10FA\\\\\\\\u10FC-\\\\\\\\u1248\\\\\\\\u124A-\\\\\\\\u124D\\\\\\\\u1250-\\\\\\\\u1256\\\\\\\\u1258\\\\\\\\u125A-\\\\\\\\u125D\\\\\\\\u1260-\\\\\\\\u1288\\\\\\\\u128A-\\\\\\\\u128D\\\\\\\\u1290-\\\\\\\\u12B0\\\\\\\\u12B2-\\\\\\\\u12B5\\\\\\\\u12B8-\\\\\\\\u12BE\\\\\\\\u12C0\\\\\\\\u12C2-\\\\\\\\u12C5\\\\\\\\u12C8-\\\\\\\\u12D6\\\\\\\\u12D8-\\\\\\\\u1310\\\\\\\\u1312-\\\\\\\\u1315\\\\\\\\u1318-\\\\\\\\u135A\\\\\\\\u1380-\\\\\\\\u138F\\\\\\\\u13A0-\\\\\\\\u13F4\\\\\\\\u1401-\\\\\\\\u166C\\\\\\\\u166F-\\\\\\\\u167F\\\\\\\\u1681-\\\\\\\\u169A\\\\\\\\u16A0-\\\\\\\\u16EA\\\\\\\\u16EE-\\\\\\\\u16F8\\\\\\\\u1700-\\\\\\\\u170C\\\\\\\\u170E-\\\\\\\\u1711\\\\\\\\u1720-\\\\\\\\u1731\\\\\\\\u1740-\\\\\\\\u1751\\\\\\\\u1760-\\\\\\\\u176C\\\\\\\\u176E-\\\\\\\\u1770\\\\\\\\u1780-\\\\\\\\u17B3\\\\\\\\u17D7\\\\\\\\u17DC\\\\\\\\u1820-\\\\\\\\u1877\\\\\\\\u1880-\\\\\\\\u18A8\\\\\\\\u18AA\\\\\\\\u18B0-\\\\\\\\u18F5\\\\\\\\u1900-\\\\\\\\u191E\\\\\\\\u1950-\\\\\\\\u196D\\\\\\\\u1970-\\\\\\\\u1974\\\\\\\\u1980-\\\\\\\\u19AB\\\\\\\\u19C1-\\\\\\\\u19C7\\\\\\\\u1A00-\\\\\\\\u1A16\\\\\\\\u1A20-\\\\\\\\u1A54\\\\\\\\u1AA7\\\\\\\\u1B05-\\\\\\\\u1B33\\\\\\\\u1B45-\\\\\\\\u1B4B\\\\\\\\u1B83-\\\\\\\\u1BA0\\\\\\\\u1BAE\\\\\\\\u1BAF\\\\\\\\u1BBA-\\\\\\\\u1BE5\\\\\\\\u1C00-\\\\\\\\u1C23\\\\\\\\u1C4D-\\\\\\\\u1C4F\\\\\\\\u1C5A-\\\\\\\\u1C7D\\\\\\\\u1CE9-\\\\\\\\u1CEC\\\\\\\\u1CEE-\\\\\\\\u1CF1\\\\\\\\u1CF5\\\\\\\\u1CF6\\\\\\\\u1D00-\\\\\\\\u1DBF\\\\\\\\u1E00-\\\\\\\\u1F15\\\\\\\\u1F18-\\\\\\\\u1F1D\\\\\\\\u1F20-\\\\\\\\u1F45\\\\\\\\u1F48-\\\\\\\\u1F4D\\\\\\\\u1F50-\\\\\\\\u1F57\\\\\\\\u1F59\\\\\\\\u1F5B\\\\\\\\u1F5D\\\\\\\\u1F5F-\\\\\\\\u1F7D\\\\\\\\u1F80-\\\\\\\\u1FB4\\\\\\\\u1FB6-\\\\\\\\u1FBC\\\\\\\\u1FBE\\\\\\\\u1FC2-\\\\\\\\u1FC4\\\\\\\\u1FC6-\\\\\\\\u1FCC\\\\\\\\u1FD0-\\\\\\\\u1FD3\\\\\\\\u1FD6-\\\\\\\\u1FDB\\\\\\\\u1FE0-\\\\\\\\u1FEC\\\\\\\\u1FF2-\\\\\\\\u1FF4\\\\\\\\u1FF6-\\\\\\\\u1FFC\\\\\\\\u2071\\\\\\\\u207F\\\\\\\\u2090-\\\\\\\\u209C\\\\\\\\u2102\\\\\\\\u2107\\\\\\\\u210A-\\\\\\\\u2113\\\\\\\\u2115\\\\\\\\u2119-\\\\\\\\u211D\\\\\\\\u2124\\\\\\\\u2126\\\\\\\\u2128\\\\\\\\u212A-\\\\\\\\u212D\\\\\\\\u212F-\\\\\\\\u2139\\\\\\\\u213C-\\\\\\\\u213F\\\\\\\\u2145-\\\\\\\\u2149\\\\\\\\u214E\\\\\\\\u2160-\\\\\\\\u2188\\\\\\\\u2C00-\\\\\\\\u2C2E\\\\\\\\u2C30-\\\\\\\\u2C5E\\\\\\\\u2C60-\\\\\\\\u2CE4\\\\\\\\u2CEB-\\\\\\\\u2CEE\\\\\\\\u2CF2\\\\\\\\u2CF3\\\\\\\\u2D00-\\\\\\\\u2D25\\\\\\\\u2D27\\\\\\\\u2D2D\\\\\\\\u2D30-\\\\\\\\u2D67\\\\\\\\u2D6F\\\\\\\\u2D80-\\\\\\\\u2D96\\\\\\\\u2DA0-\\\\\\\\u2DA6\\\\\\\\u2DA8-\\\\\\\\u2DAE\\\\\\\\u2DB0-\\\\\\\\u2DB6\\\\\\\\u2DB8-\\\\\\\\u2DBE\\\\\\\\u2DC0-\\\\\\\\u2DC6\\\\\\\\u2DC8-\\\\\\\\u2DCE\\\\\\\\u2DD0-\\\\\\\\u2DD6\\\\\\\\u2DD8-\\\\\\\\u2DDE\\\\\\\\u2E2F\\\\\\\\u3005-\\\\\\\\u3007\\\\\\\\u3021-\\\\\\\\u3029\\\\\\\\u3031-\\\\\\\\u3035\\\\\\\\u3038-\\\\\\\\u303C\\\\\\\\u3041-\\\\\\\\u3096\\\\\\\\u309D-\\\\\\\\u309F\\\\\\\\u30A1-\\\\\\\\u30FA\\\\\\\\u30FC-\\\\\\\\u30FF\\\\\\\\u3105-\\\\\\\\u312D\\\\\\\\u3131-\\\\\\\\u318E\\\\\\\\u31A0-\\\\\\\\u31BA\\\\\\\\u31F0-\\\\\\\\u31FF\\\\\\\\u3400-\\\\\\\\u4DB5\\\\\\\\u4E00-\\\\\\\\u9FCC\\\\\\\\uA000-\\\\\\\\uA48C\\\\\\\\uA4D0-\\\\\\\\uA4FD\\\\\\\\uA500-\\\\\\\\uA60C\\\\\\\\uA610-\\\\\\\\uA61F\\\\\\\\uA62A\\\\\\\\uA62B\\\\\\\\uA640-\\\\\\\\uA66E\\\\\\\\uA67F-\\\\\\\\uA69D\\\\\\\\uA6A0-\\\\\\\\uA6EF\\\\\\\\uA717-\\\\\\\\uA71F\\\\\\\\uA722-\\\\\\\\uA788\\\\\\\\uA78B-\\\\\\\\uA78E\\\\\\\\uA790-\\\\\\\\uA7AD\\\\\\\\uA7B0\\\\\\\\uA7B1\\\\\\\\uA7F7-\\\\\\\\uA801\\\\\\\\uA803-\\\\\\\\uA805\\\\\\\\uA807-\\\\\\\\uA80A\\\\\\\\uA80C-\\\\\\\\uA822\\\\\\\\uA840-\\\\\\\\uA873\\\\\\\\uA882-\\\\\\\\uA8B3\\\\\\\\uA8F2-\\\\\\\\uA8F7\\\\\\\\uA8FB\\\\\\\\uA90A-\\\\\\\\uA925\\\\\\\\uA930-\\\\\\\\uA946\\\\\\\\uA960-\\\\\\\\uA97C\\\\\\\\uA984-\\\\\\\\uA9B2\\\\\\\\uA9CF\\\\\\\\uA9E0-\\\\\\\\uA9E4\\\\\\\\uA9E6-\\\\\\\\uA9EF\\\\\\\\uA9FA-\\\\\\\\uA9FE\\\\\\\\uAA00-\\\\\\\\uAA28\\\\\\\\uAA40-\\\\\\\\uAA42\\\\\\\\uAA44-\\\\\\\\uAA4B\\\\\\\\uAA60-\\\\\\\\uAA76\\\\\\\\uAA7A\\\\\\\\uAA7E-\\\\\\\\uAAAF\\\\\\\\uAAB1\\\\\\\\uAAB5\\\\\\\\uAAB6\\\\\\\\uAAB9-\\\\\\\\uAABD\\\\\\\\uAAC0\\\\\\\\uAAC2\\\\\\\\uAADB-\\\\\\\\uAADD\\\\\\\\uAAE0-\\\\\\\\uAAEA\\\\\\\\uAAF2-\\\\\\\\uAAF4\\\\\\\\uAB01-\\\\\\\\uAB06\\\\\\\\uAB09-\\\\\\\\uAB0E\\\\\\\\uAB11-\\\\\\\\uAB16\\\\\\\\uAB20-\\\\\\\\uAB26\\\\\\\\uAB28-\\\\\\\\uAB2E\\\\\\\\uAB30-\\\\\\\\uAB5A\\\\\\\\uAB5C-\\\\\\\\uAB5F\\\\\\\\uAB64\\\\\\\\uAB65\\\\\\\\uABC0-\\\\\\\\uABE2\\\\\\\\uAC00-\\\\\\\\uD7A3\\\\\\\\uD7B0-\\\\\\\\uD7C6\\\\\\\\uD7CB-\\\\\\\\uD7FB\\\\\\\\uF900-\\\\\\\\uFA6D\\\\\\\\uFA70-\\\\\\\\uFAD9\\\\\\\\uFB00-\\\\\\\\uFB06\\\\\\\\uFB13-\\\\\\\\uFB17\\\\\\\\uFB1D\\\\\\\\uFB1F-\\\\\\\\uFB28\\\\\\\\uFB2A-\\\\\\\\uFB36\\\\\\\\uFB38-\\\\\\\\uFB3C\\\\\\\\uFB3E\\\\\\\\uFB40\\\\\\\\uFB41\\\\\\\\uFB43\\\\\\\\uFB44\\\\\\\\uFB46-\\\\\\\\uFBB1\\\\\\\\uFBD3-\\\\\\\\uFD3D\\\\\\\\uFD50-\\\\\\\\uFD8F\\\\\\\\uFD92-\\\\\\\\uFDC7\\\\\\\\uFDF0-\\\\\\\\uFDFB\\\\\\\\uFE70-\\\\\\\\uFE74\\\\\\\\uFE76-\\\\\\\\uFEFC\\\\\\\\uFF21-\\\\\\\\uFF3A\\\\\\\\uFF41-\\\\\\\\uFF5A\\\\\\\\uFF66-\\\\\\\\uFFBE\\\\\\\\uFFC2-\\\\\\\\uFFC7\\\\\\\\uFFCA-\\\\\\\\uFFCF\\\\\\\\uFFD2-\\\\\\\\uFFD7\\\\\\\\uFFDA-\\\\\\\\uFFDC]'),\\n      // eslint-disable-next-line no-misleading-character-class\\n  RegexNonAsciiIdentifierPart = new RegExp('[\\\\\\\\xAA\\\\\\\\xB5\\\\\\\\xBA\\\\\\\\xC0-\\\\\\\\xD6\\\\\\\\xD8-\\\\\\\\xF6\\\\\\\\xF8-\\\\\\\\u02C1\\\\\\\\u02C6-\\\\\\\\u02D1\\\\\\\\u02E0-\\\\\\\\u02E4\\\\\\\\u02EC\\\\\\\\u02EE\\\\\\\\u0300-\\\\\\\\u0374\\\\\\\\u0376\\\\\\\\u0377\\\\\\\\u037A-\\\\\\\\u037D\\\\\\\\u037F\\\\\\\\u0386\\\\\\\\u0388-\\\\\\\\u038A\\\\\\\\u038C\\\\\\\\u038E-\\\\\\\\u03A1\\\\\\\\u03A3-\\\\\\\\u03F5\\\\\\\\u03F7-\\\\\\\\u0481\\\\\\\\u0483-\\\\\\\\u0487\\\\\\\\u048A-\\\\\\\\u052F\\\\\\\\u0531-\\\\\\\\u0556\\\\\\\\u0559\\\\\\\\u0561-\\\\\\\\u0587\\\\\\\\u0591-\\\\\\\\u05BD\\\\\\\\u05BF\\\\\\\\u05C1\\\\\\\\u05C2\\\\\\\\u05C4\\\\\\\\u05C5\\\\\\\\u05C7\\\\\\\\u05D0-\\\\\\\\u05EA\\\\\\\\u05F0-\\\\\\\\u05F2\\\\\\\\u0610-\\\\\\\\u061A\\\\\\\\u0620-\\\\\\\\u0669\\\\\\\\u066E-\\\\\\\\u06D3\\\\\\\\u06D5-\\\\\\\\u06DC\\\\\\\\u06DF-\\\\\\\\u06E8\\\\\\\\u06EA-\\\\\\\\u06FC\\\\\\\\u06FF\\\\\\\\u0710-\\\\\\\\u074A\\\\\\\\u074D-\\\\\\\\u07B1\\\\\\\\u07C0-\\\\\\\\u07F5\\\\\\\\u07FA\\\\\\\\u0800-\\\\\\\\u082D\\\\\\\\u0840-\\\\\\\\u085B\\\\\\\\u08A0-\\\\\\\\u08B2\\\\\\\\u08E4-\\\\\\\\u0963\\\\\\\\u0966-\\\\\\\\u096F\\\\\\\\u0971-\\\\\\\\u0983\\\\\\\\u0985-\\\\\\\\u098C\\\\\\\\u098F\\\\\\\\u0990\\\\\\\\u0993-\\\\\\\\u09A8\\\\\\\\u09AA-\\\\\\\\u09B0\\\\\\\\u09B2\\\\\\\\u09B6-\\\\\\\\u09B9\\\\\\\\u09BC-\\\\\\\\u09C4\\\\\\\\u09C7\\\\\\\\u09C8\\\\\\\\u09CB-\\\\\\\\u09CE\\\\\\\\u09D7\\\\\\\\u09DC\\\\\\\\u09DD\\\\\\\\u09DF-\\\\\\\\u09E3\\\\\\\\u09E6-\\\\\\\\u09F1\\\\\\\\u0A01-\\\\\\\\u0A03\\\\\\\\u0A05-\\\\\\\\u0A0A\\\\\\\\u0A0F\\\\\\\\u0A10\\\\\\\\u0A13-\\\\\\\\u0A28\\\\\\\\u0A2A-\\\\\\\\u0A30\\\\\\\\u0A32\\\\\\\\u0A33\\\\\\\\u0A35\\\\\\\\u0A36\\\\\\\\u0A38\\\\\\\\u0A39\\\\\\\\u0A3C\\\\\\\\u0A3E-\\\\\\\\u0A42\\\\\\\\u0A47\\\\\\\\u0A48\\\\\\\\u0A4B-\\\\\\\\u0A4D\\\\\\\\u0A51\\\\\\\\u0A59-\\\\\\\\u0A5C\\\\\\\\u0A5E\\\\\\\\u0A66-\\\\\\\\u0A75\\\\\\\\u0A81-\\\\\\\\u0A83\\\\\\\\u0A85-\\\\\\\\u0A8D\\\\\\\\u0A8F-\\\\\\\\u0A91\\\\\\\\u0A93-\\\\\\\\u0AA8\\\\\\\\u0AAA-\\\\\\\\u0AB0\\\\\\\\u0AB2\\\\\\\\u0AB3\\\\\\\\u0AB5-\\\\\\\\u0AB9\\\\\\\\u0ABC-\\\\\\\\u0AC5\\\\\\\\u0AC7-\\\\\\\\u0AC9\\\\\\\\u0ACB-\\\\\\\\u0ACD\\\\\\\\u0AD0\\\\\\\\u0AE0-\\\\\\\\u0AE3\\\\\\\\u0AE6-\\\\\\\\u0AEF\\\\\\\\u0B01-\\\\\\\\u0B03\\\\\\\\u0B05-\\\\\\\\u0B0C\\\\\\\\u0B0F\\\\\\\\u0B10\\\\\\\\u0B13-\\\\\\\\u0B28\\\\\\\\u0B2A-\\\\\\\\u0B30\\\\\\\\u0B32\\\\\\\\u0B33\\\\\\\\u0B35-\\\\\\\\u0B39\\\\\\\\u0B3C-\\\\\\\\u0B44\\\\\\\\u0B47\\\\\\\\u0B48\\\\\\\\u0B4B-\\\\\\\\u0B4D\\\\\\\\u0B56\\\\\\\\u0B57\\\\\\\\u0B5C\\\\\\\\u0B5D\\\\\\\\u0B5F-\\\\\\\\u0B63\\\\\\\\u0B66-\\\\\\\\u0B6F\\\\\\\\u0B71\\\\\\\\u0B82\\\\\\\\u0B83\\\\\\\\u0B85-\\\\\\\\u0B8A\\\\\\\\u0B8E-\\\\\\\\u0B90\\\\\\\\u0B92-\\\\\\\\u0B95\\\\\\\\u0B99\\\\\\\\u0B9A\\\\\\\\u0B9C\\\\\\\\u0B9E\\\\\\\\u0B9F\\\\\\\\u0BA3\\\\\\\\u0BA4\\\\\\\\u0BA8-\\\\\\\\u0BAA\\\\\\\\u0BAE-\\\\\\\\u0BB9\\\\\\\\u0BBE-\\\\\\\\u0BC2\\\\\\\\u0BC6-\\\\\\\\u0BC8\\\\\\\\u0BCA-\\\\\\\\u0BCD\\\\\\\\u0BD0\\\\\\\\u0BD7\\\\\\\\u0BE6-\\\\\\\\u0BEF\\\\\\\\u0C00-\\\\\\\\u0C03\\\\\\\\u0C05-\\\\\\\\u0C0C\\\\\\\\u0C0E-\\\\\\\\u0C10\\\\\\\\u0C12-\\\\\\\\u0C28\\\\\\\\u0C2A-\\\\\\\\u0C39\\\\\\\\u0C3D-\\\\\\\\u0C44\\\\\\\\u0C46-\\\\\\\\u0C48\\\\\\\\u0C4A-\\\\\\\\u0C4D\\\\\\\\u0C55\\\\\\\\u0C56\\\\\\\\u0C58\\\\\\\\u0C59\\\\\\\\u0C60-\\\\\\\\u0C63\\\\\\\\u0C66-\\\\\\\\u0C6F\\\\\\\\u0C81-\\\\\\\\u0C83\\\\\\\\u0C85-\\\\\\\\u0C8C\\\\\\\\u0C8E-\\\\\\\\u0C90\\\\\\\\u0C92-\\\\\\\\u0CA8\\\\\\\\u0CAA-\\\\\\\\u0CB3\\\\\\\\u0CB5-\\\\\\\\u0CB9\\\\\\\\u0CBC-\\\\\\\\u0CC4\\\\\\\\u0CC6-\\\\\\\\u0CC8\\\\\\\\u0CCA-\\\\\\\\u0CCD\\\\\\\\u0CD5\\\\\\\\u0CD6\\\\\\\\u0CDE\\\\\\\\u0CE0-\\\\\\\\u0CE3\\\\\\\\u0CE6-\\\\\\\\u0CEF\\\\\\\\u0CF1\\\\\\\\u0CF2\\\\\\\\u0D01-\\\\\\\\u0D03\\\\\\\\u0D05-\\\\\\\\u0D0C\\\\\\\\u0D0E-\\\\\\\\u0D10\\\\\\\\u0D12-\\\\\\\\u0D3A\\\\\\\\u0D3D-\\\\\\\\u0D44\\\\\\\\u0D46-\\\\\\\\u0D48\\\\\\\\u0D4A-\\\\\\\\u0D4E\\\\\\\\u0D57\\\\\\\\u0D60-\\\\\\\\u0D63\\\\\\\\u0D66-\\\\\\\\u0D6F\\\\\\\\u0D7A-\\\\\\\\u0D7F\\\\\\\\u0D82\\\\\\\\u0D83\\\\\\\\u0D85-\\\\\\\\u0D96\\\\\\\\u0D9A-\\\\\\\\u0DB1\\\\\\\\u0DB3-\\\\\\\\u0DBB\\\\\\\\u0DBD\\\\\\\\u0DC0-\\\\\\\\u0DC6\\\\\\\\u0DCA\\\\\\\\u0DCF-\\\\\\\\u0DD4\\\\\\\\u0DD6\\\\\\\\u0DD8-\\\\\\\\u0DDF\\\\\\\\u0DE6-\\\\\\\\u0DEF\\\\\\\\u0DF2\\\\\\\\u0DF3\\\\\\\\u0E01-\\\\\\\\u0E3A\\\\\\\\u0E40-\\\\\\\\u0E4E\\\\\\\\u0E50-\\\\\\\\u0E59\\\\\\\\u0E81\\\\\\\\u0E82\\\\\\\\u0E84\\\\\\\\u0E87\\\\\\\\u0E88\\\\\\\\u0E8A\\\\\\\\u0E8D\\\\\\\\u0E94-\\\\\\\\u0E97\\\\\\\\u0E99-\\\\\\\\u0E9F\\\\\\\\u0EA1-\\\\\\\\u0EA3\\\\\\\\u0EA5\\\\\\\\u0EA7\\\\\\\\u0EAA\\\\\\\\u0EAB\\\\\\\\u0EAD-\\\\\\\\u0EB9\\\\\\\\u0EBB-\\\\\\\\u0EBD\\\\\\\\u0EC0-\\\\\\\\u0EC4\\\\\\\\u0EC6\\\\\\\\u0EC8-\\\\\\\\u0ECD\\\\\\\\u0ED0-\\\\\\\\u0ED9\\\\\\\\u0EDC-\\\\\\\\u0EDF\\\\\\\\u0F00\\\\\\\\u0F18\\\\\\\\u0F19\\\\\\\\u0F20-\\\\\\\\u0F29\\\\\\\\u0F35\\\\\\\\u0F37\\\\\\\\u0F39\\\\\\\\u0F3E-\\\\\\\\u0F47\\\\\\\\u0F49-\\\\\\\\u0F6C\\\\\\\\u0F71-\\\\\\\\u0F84\\\\\\\\u0F86-\\\\\\\\u0F97\\\\\\\\u0F99-\\\\\\\\u0FBC\\\\\\\\u0FC6\\\\\\\\u1000-\\\\\\\\u1049\\\\\\\\u1050-\\\\\\\\u109D\\\\\\\\u10A0-\\\\\\\\u10C5\\\\\\\\u10C7\\\\\\\\u10CD\\\\\\\\u10D0-\\\\\\\\u10FA\\\\\\\\u10FC-\\\\\\\\u1248\\\\\\\\u124A-\\\\\\\\u124D\\\\\\\\u1250-\\\\\\\\u1256\\\\\\\\u1258\\\\\\\\u125A-\\\\\\\\u125D\\\\\\\\u1260-\\\\\\\\u1288\\\\\\\\u128A-\\\\\\\\u128D\\\\\\\\u1290-\\\\\\\\u12B0\\\\\\\\u12B2-\\\\\\\\u12B5\\\\\\\\u12B8-\\\\\\\\u12BE\\\\\\\\u12C0\\\\\\\\u12C2-\\\\\\\\u12C5\\\\\\\\u12C8-\\\\\\\\u12D6\\\\\\\\u12D8-\\\\\\\\u1310\\\\\\\\u1312-\\\\\\\\u1315\\\\\\\\u1318-\\\\\\\\u135A\\\\\\\\u135D-\\\\\\\\u135F\\\\\\\\u1380-\\\\\\\\u138F\\\\\\\\u13A0-\\\\\\\\u13F4\\\\\\\\u1401-\\\\\\\\u166C\\\\\\\\u166F-\\\\\\\\u167F\\\\\\\\u1681-\\\\\\\\u169A\\\\\\\\u16A0-\\\\\\\\u16EA\\\\\\\\u16EE-\\\\\\\\u16F8\\\\\\\\u1700-\\\\\\\\u170C\\\\\\\\u170E-\\\\\\\\u1714\\\\\\\\u1720-\\\\\\\\u1734\\\\\\\\u1740-\\\\\\\\u1753\\\\\\\\u1760-\\\\\\\\u176C\\\\\\\\u176E-\\\\\\\\u1770\\\\\\\\u1772\\\\\\\\u1773\\\\\\\\u1780-\\\\\\\\u17D3\\\\\\\\u17D7\\\\\\\\u17DC\\\\\\\\u17DD\\\\\\\\u17E0-\\\\\\\\u17E9\\\\\\\\u180B-\\\\\\\\u180D\\\\\\\\u1810-\\\\\\\\u1819\\\\\\\\u1820-\\\\\\\\u1877\\\\\\\\u1880-\\\\\\\\u18AA\\\\\\\\u18B0-\\\\\\\\u18F5\\\\\\\\u1900-\\\\\\\\u191E\\\\\\\\u1920-\\\\\\\\u192B\\\\\\\\u1930-\\\\\\\\u193B\\\\\\\\u1946-\\\\\\\\u196D\\\\\\\\u1970-\\\\\\\\u1974\\\\\\\\u1980-\\\\\\\\u19AB\\\\\\\\u19B0-\\\\\\\\u19C9\\\\\\\\u19D0-\\\\\\\\u19D9\\\\\\\\u1A00-\\\\\\\\u1A1B\\\\\\\\u1A20-\\\\\\\\u1A5E\\\\\\\\u1A60-\\\\\\\\u1A7C\\\\\\\\u1A7F-\\\\\\\\u1A89\\\\\\\\u1A90-\\\\\\\\u1A99\\\\\\\\u1AA7\\\\\\\\u1AB0-\\\\\\\\u1ABD\\\\\\\\u1B00-\\\\\\\\u1B4B\\\\\\\\u1B50-\\\\\\\\u1B59\\\\\\\\u1B6B-\\\\\\\\u1B73\\\\\\\\u1B80-\\\\\\\\u1BF3\\\\\\\\u1C00-\\\\\\\\u1C37\\\\\\\\u1C40-\\\\\\\\u1C49\\\\\\\\u1C4D-\\\\\\\\u1C7D\\\\\\\\u1CD0-\\\\\\\\u1CD2\\\\\\\\u1CD4-\\\\\\\\u1CF6\\\\\\\\u1CF8\\\\\\\\u1CF9\\\\\\\\u1D00-\\\\\\\\u1DF5\\\\\\\\u1DFC-\\\\\\\\u1F15\\\\\\\\u1F18-\\\\\\\\u1F1D\\\\\\\\u1F20-\\\\\\\\u1F45\\\\\\\\u1F48-\\\\\\\\u1F4D\\\\\\\\u1F50-\\\\\\\\u1F57\\\\\\\\u1F59\\\\\\\\u1F5B\\\\\\\\u1F5D\\\\\\\\u1F5F-\\\\\\\\u1F7D\\\\\\\\u1F80-\\\\\\\\u1FB4\\\\\\\\u1FB6-\\\\\\\\u1FBC\\\\\\\\u1FBE\\\\\\\\u1FC2-\\\\\\\\u1FC4\\\\\\\\u1FC6-\\\\\\\\u1FCC\\\\\\\\u1FD0-\\\\\\\\u1FD3\\\\\\\\u1FD6-\\\\\\\\u1FDB\\\\\\\\u1FE0-\\\\\\\\u1FEC\\\\\\\\u1FF2-\\\\\\\\u1FF4\\\\\\\\u1FF6-\\\\\\\\u1FFC\\\\\\\\u200C\\\\\\\\u200D\\\\\\\\u203F\\\\\\\\u2040\\\\\\\\u2054\\\\\\\\u2071\\\\\\\\u207F\\\\\\\\u2090-\\\\\\\\u209C\\\\\\\\u20D0-\\\\\\\\u20DC\\\\\\\\u20E1\\\\\\\\u20E5-\\\\\\\\u20F0\\\\\\\\u2102\\\\\\\\u2107\\\\\\\\u210A-\\\\\\\\u2113\\\\\\\\u2115\\\\\\\\u2119-\\\\\\\\u211D\\\\\\\\u2124\\\\\\\\u2126\\\\\\\\u2128\\\\\\\\u212A-\\\\\\\\u212D\\\\\\\\u212F-\\\\\\\\u2139\\\\\\\\u213C-\\\\\\\\u213F\\\\\\\\u2145-\\\\\\\\u2149\\\\\\\\u214E\\\\\\\\u2160-\\\\\\\\u2188\\\\\\\\u2C00-\\\\\\\\u2C2E\\\\\\\\u2C30-\\\\\\\\u2C5E\\\\\\\\u2C60-\\\\\\\\u2CE4\\\\\\\\u2CEB-\\\\\\\\u2CF3\\\\\\\\u2D00-\\\\\\\\u2D25\\\\\\\\u2D27\\\\\\\\u2D2D\\\\\\\\u2D30-\\\\\\\\u2D67\\\\\\\\u2D6F\\\\\\\\u2D7F-\\\\\\\\u2D96\\\\\\\\u2DA0-\\\\\\\\u2DA6\\\\\\\\u2DA8-\\\\\\\\u2DAE\\\\\\\\u2DB0-\\\\\\\\u2DB6\\\\\\\\u2DB8-\\\\\\\\u2DBE\\\\\\\\u2DC0-\\\\\\\\u2DC6\\\\\\\\u2DC8-\\\\\\\\u2DCE\\\\\\\\u2DD0-\\\\\\\\u2DD6\\\\\\\\u2DD8-\\\\\\\\u2DDE\\\\\\\\u2DE0-\\\\\\\\u2DFF\\\\\\\\u2E2F\\\\\\\\u3005-\\\\\\\\u3007\\\\\\\\u3021-\\\\\\\\u302F\\\\\\\\u3031-\\\\\\\\u3035\\\\\\\\u3038-\\\\\\\\u303C\\\\\\\\u3041-\\\\\\\\u3096\\\\\\\\u3099\\\\\\\\u309A\\\\\\\\u309D-\\\\\\\\u309F\\\\\\\\u30A1-\\\\\\\\u30FA\\\\\\\\u30FC-\\\\\\\\u30FF\\\\\\\\u3105-\\\\\\\\u312D\\\\\\\\u3131-\\\\\\\\u318E\\\\\\\\u31A0-\\\\\\\\u31BA\\\\\\\\u31F0-\\\\\\\\u31FF\\\\\\\\u3400-\\\\\\\\u4DB5\\\\\\\\u4E00-\\\\\\\\u9FCC\\\\\\\\uA000-\\\\\\\\uA48C\\\\\\\\uA4D0-\\\\\\\\uA4FD\\\\\\\\uA500-\\\\\\\\uA60C\\\\\\\\uA610-\\\\\\\\uA62B\\\\\\\\uA640-\\\\\\\\uA66F\\\\\\\\uA674-\\\\\\\\uA67D\\\\\\\\uA67F-\\\\\\\\uA69D\\\\\\\\uA69F-\\\\\\\\uA6F1\\\\\\\\uA717-\\\\\\\\uA71F\\\\\\\\uA722-\\\\\\\\uA788\\\\\\\\uA78B-\\\\\\\\uA78E\\\\\\\\uA790-\\\\\\\\uA7AD\\\\\\\\uA7B0\\\\\\\\uA7B1\\\\\\\\uA7F7-\\\\\\\\uA827\\\\\\\\uA840-\\\\\\\\uA873\\\\\\\\uA880-\\\\\\\\uA8C4\\\\\\\\uA8D0-\\\\\\\\uA8D9\\\\\\\\uA8E0-\\\\\\\\uA8F7\\\\\\\\uA8FB\\\\\\\\uA900-\\\\\\\\uA92D\\\\\\\\uA930-\\\\\\\\uA953\\\\\\\\uA960-\\\\\\\\uA97C\\\\\\\\uA980-\\\\\\\\uA9C0\\\\\\\\uA9CF-\\\\\\\\uA9D9\\\\\\\\uA9E0-\\\\\\\\uA9FE\\\\\\\\uAA00-\\\\\\\\uAA36\\\\\\\\uAA40-\\\\\\\\uAA4D\\\\\\\\uAA50-\\\\\\\\uAA59\\\\\\\\uAA60-\\\\\\\\uAA76\\\\\\\\uAA7A-\\\\\\\\uAAC2\\\\\\\\uAADB-\\\\\\\\uAADD\\\\\\\\uAAE0-\\\\\\\\uAAEF\\\\\\\\uAAF2-\\\\\\\\uAAF6\\\\\\\\uAB01-\\\\\\\\uAB06\\\\\\\\uAB09-\\\\\\\\uAB0E\\\\\\\\uAB11-\\\\\\\\uAB16\\\\\\\\uAB20-\\\\\\\\uAB26\\\\\\\\uAB28-\\\\\\\\uAB2E\\\\\\\\uAB30-\\\\\\\\uAB5A\\\\\\\\uAB5C-\\\\\\\\uAB5F\\\\\\\\uAB64\\\\\\\\uAB65\\\\\\\\uABC0-\\\\\\\\uABEA\\\\\\\\uABEC\\\\\\\\uABED\\\\\\\\uABF0-\\\\\\\\uABF9\\\\\\\\uAC00-\\\\\\\\uD7A3\\\\\\\\uD7B0-\\\\\\\\uD7C6\\\\\\\\uD7CB-\\\\\\\\uD7FB\\\\\\\\uF900-\\\\\\\\uFA6D\\\\\\\\uFA70-\\\\\\\\uFAD9\\\\\\\\uFB00-\\\\\\\\uFB06\\\\\\\\uFB13-\\\\\\\\uFB17\\\\\\\\uFB1D-\\\\\\\\uFB28\\\\\\\\uFB2A-\\\\\\\\uFB36\\\\\\\\uFB38-\\\\\\\\uFB3C\\\\\\\\uFB3E\\\\\\\\uFB40\\\\\\\\uFB41\\\\\\\\uFB43\\\\\\\\uFB44\\\\\\\\uFB46-\\\\\\\\uFBB1\\\\\\\\uFBD3-\\\\\\\\uFD3D\\\\\\\\uFD50-\\\\\\\\uFD8F\\\\\\\\uFD92-\\\\\\\\uFDC7\\\\\\\\uFDF0-\\\\\\\\uFDFB\\\\\\\\uFE00-\\\\\\\\uFE0F\\\\\\\\uFE20-\\\\\\\\uFE2D\\\\\\\\uFE33\\\\\\\\uFE34\\\\\\\\uFE4D-\\\\\\\\uFE4F\\\\\\\\uFE70-\\\\\\\\uFE74\\\\\\\\uFE76-\\\\\\\\uFEFC\\\\\\\\uFF10-\\\\\\\\uFF19\\\\\\\\uFF21-\\\\\\\\uFF3A\\\\\\\\uFF3F\\\\\\\\uFF41-\\\\\\\\uFF5A\\\\\\\\uFF66-\\\\\\\\uFFBE\\\\\\\\uFFC2-\\\\\\\\uFFC7\\\\\\\\uFFCA-\\\\\\\\uFFCF\\\\\\\\uFFD2-\\\\\\\\uFFD7\\\\\\\\uFFDA-\\\\\\\\uFFDC]'); // Ensure the condition is true, otherwise throw an error.\\n  // This is only to have a better contract semantic, i.e. another safety net\\n  // to catch a logic error. The condition shall be fulfilled in normal case.\\n  // Do NOT use this to enforce a certain condition on any user input.\\n\\n  function assert(condition, message) {\\n    /* istanbul ignore next */\\n    if (!condition) {\\n      throw new Error('ASSERT: ' + message);\\n    }\\n  }\\n\\n  function isDecimalDigit(ch) {\\n    return ch >= 0x30 && ch <= 0x39; // 0..9\\n  }\\n\\n  function isHexDigit(ch) {\\n    return '0123456789abcdefABCDEF'.indexOf(ch) >= 0;\\n  }\\n\\n  function isOctalDigit(ch) {\\n    return '01234567'.indexOf(ch) >= 0;\\n  } // 7.2 White Space\\n\\n\\n  function isWhiteSpace(ch) {\\n    return ch === 0x20 || ch === 0x09 || ch === 0x0B || ch === 0x0C || ch === 0xA0 || ch >= 0x1680 && [0x1680, 0x180E, 0x2000, 0x2001, 0x2002, 0x2003, 0x2004, 0x2005, 0x2006, 0x2007, 0x2008, 0x2009, 0x200A, 0x202F, 0x205F, 0x3000, 0xFEFF].indexOf(ch) >= 0;\\n  } // 7.3 Line Terminators\\n\\n\\n  function isLineTerminator(ch) {\\n    return ch === 0x0A || ch === 0x0D || ch === 0x2028 || ch === 0x2029;\\n  } // 7.6 Identifier Names and Identifiers\\n\\n\\n  function isIdentifierStart(ch) {\\n    return ch === 0x24 || ch === 0x5F || // $ (dollar) and _ (underscore)\\n    ch >= 0x41 && ch <= 0x5A || // A..Z\\n    ch >= 0x61 && ch <= 0x7A || // a..z\\n    ch === 0x5C || // \\\\ (backslash)\\n    ch >= 0x80 && RegexNonAsciiIdentifierStart.test(String.fromCharCode(ch));\\n  }\\n\\n  function isIdentifierPart(ch) {\\n    return ch === 0x24 || ch === 0x5F || // $ (dollar) and _ (underscore)\\n    ch >= 0x41 && ch <= 0x5A || // A..Z\\n    ch >= 0x61 && ch <= 0x7A || // a..z\\n    ch >= 0x30 && ch <= 0x39 || // 0..9\\n    ch === 0x5C || // \\\\ (backslash)\\n    ch >= 0x80 && RegexNonAsciiIdentifierPart.test(String.fromCharCode(ch));\\n  } // 7.6.1.1 Keywords\\n\\n\\n  const keywords = {\\n    'if': 1,\\n    'in': 1,\\n    'do': 1,\\n    'var': 1,\\n    'for': 1,\\n    'new': 1,\\n    'try': 1,\\n    'let': 1,\\n    'this': 1,\\n    'else': 1,\\n    'case': 1,\\n    'void': 1,\\n    'with': 1,\\n    'enum': 1,\\n    'while': 1,\\n    'break': 1,\\n    'catch': 1,\\n    'throw': 1,\\n    'const': 1,\\n    'yield': 1,\\n    'class': 1,\\n    'super': 1,\\n    'return': 1,\\n    'typeof': 1,\\n    'delete': 1,\\n    'switch': 1,\\n    'export': 1,\\n    'import': 1,\\n    'public': 1,\\n    'static': 1,\\n    'default': 1,\\n    'finally': 1,\\n    'extends': 1,\\n    'package': 1,\\n    'private': 1,\\n    'function': 1,\\n    'continue': 1,\\n    'debugger': 1,\\n    'interface': 1,\\n    'protected': 1,\\n    'instanceof': 1,\\n    'implements': 1\\n  };\\n\\n  function skipComment() {\\n    while (index < length) {\\n      const ch = source.charCodeAt(index);\\n\\n      if (isWhiteSpace(ch) || isLineTerminator(ch)) {\\n        ++index;\\n      } else {\\n        break;\\n      }\\n    }\\n  }\\n\\n  function scanHexEscape(prefix) {\\n    var i,\\n        len,\\n        ch,\\n        code = 0;\\n    len = prefix === 'u' ? 4 : 2;\\n\\n    for (i = 0; i < len; ++i) {\\n      if (index < length && isHexDigit(source[index])) {\\n        ch = source[index++];\\n        code = code * 16 + '0123456789abcdef'.indexOf(ch.toLowerCase());\\n      } else {\\n        throwError({}, MessageUnexpectedToken, ILLEGAL$1);\\n      }\\n    }\\n\\n    return String.fromCharCode(code);\\n  }\\n\\n  function scanUnicodeCodePointEscape() {\\n    var ch, code, cu1, cu2;\\n    ch = source[index];\\n    code = 0; // At least, one hex digit is required.\\n\\n    if (ch === '}') {\\n      throwError({}, MessageUnexpectedToken, ILLEGAL$1);\\n    }\\n\\n    while (index < length) {\\n      ch = source[index++];\\n\\n      if (!isHexDigit(ch)) {\\n        break;\\n      }\\n\\n      code = code * 16 + '0123456789abcdef'.indexOf(ch.toLowerCase());\\n    }\\n\\n    if (code > 0x10FFFF || ch !== '}') {\\n      throwError({}, MessageUnexpectedToken, ILLEGAL$1);\\n    } // UTF-16 Encoding\\n\\n\\n    if (code <= 0xFFFF) {\\n      return String.fromCharCode(code);\\n    }\\n\\n    cu1 = (code - 0x10000 >> 10) + 0xD800;\\n    cu2 = (code - 0x10000 & 1023) + 0xDC00;\\n    return String.fromCharCode(cu1, cu2);\\n  }\\n\\n  function getEscapedIdentifier() {\\n    var ch, id;\\n    ch = source.charCodeAt(index++);\\n    id = String.fromCharCode(ch); // '\\\\u' (U+005C, U+0075) denotes an escaped character.\\n\\n    if (ch === 0x5C) {\\n      if (source.charCodeAt(index) !== 0x75) {\\n        throwError({}, MessageUnexpectedToken, ILLEGAL$1);\\n      }\\n\\n      ++index;\\n      ch = scanHexEscape('u');\\n\\n      if (!ch || ch === '\\\\\\\\' || !isIdentifierStart(ch.charCodeAt(0))) {\\n        throwError({}, MessageUnexpectedToken, ILLEGAL$1);\\n      }\\n\\n      id = ch;\\n    }\\n\\n    while (index < length) {\\n      ch = source.charCodeAt(index);\\n\\n      if (!isIdentifierPart(ch)) {\\n        break;\\n      }\\n\\n      ++index;\\n      id += String.fromCharCode(ch); // '\\\\u' (U+005C, U+0075) denotes an escaped character.\\n\\n      if (ch === 0x5C) {\\n        id = id.substr(0, id.length - 1);\\n\\n        if (source.charCodeAt(index) !== 0x75) {\\n          throwError({}, MessageUnexpectedToken, ILLEGAL$1);\\n        }\\n\\n        ++index;\\n        ch = scanHexEscape('u');\\n\\n        if (!ch || ch === '\\\\\\\\' || !isIdentifierPart(ch.charCodeAt(0))) {\\n          throwError({}, MessageUnexpectedToken, ILLEGAL$1);\\n        }\\n\\n        id += ch;\\n      }\\n    }\\n\\n    return id;\\n  }\\n\\n  function getIdentifier() {\\n    var start, ch;\\n    start = index++;\\n\\n    while (index < length) {\\n      ch = source.charCodeAt(index);\\n\\n      if (ch === 0x5C) {\\n        // Blackslash (U+005C) marks Unicode escape sequence.\\n        index = start;\\n        return getEscapedIdentifier();\\n      }\\n\\n      if (isIdentifierPart(ch)) {\\n        ++index;\\n      } else {\\n        break;\\n      }\\n    }\\n\\n    return source.slice(start, index);\\n  }\\n\\n  function scanIdentifier() {\\n    var start, id, type;\\n    start = index; // Backslash (U+005C) starts an escaped character.\\n\\n    id = source.charCodeAt(index) === 0x5C ? getEscapedIdentifier() : getIdentifier(); // There is no keyword or literal with only one character.\\n    // Thus, it must be an identifier.\\n\\n    if (id.length === 1) {\\n      type = TokenIdentifier;\\n    } else if (keywords.hasOwnProperty(id)) {\\n      // eslint-disable-line no-prototype-builtins\\n      type = TokenKeyword;\\n    } else if (id === 'null') {\\n      type = TokenNullLiteral;\\n    } else if (id === 'true' || id === 'false') {\\n      type = TokenBooleanLiteral;\\n    } else {\\n      type = TokenIdentifier;\\n    }\\n\\n    return {\\n      type: type,\\n      value: id,\\n      start: start,\\n      end: index\\n    };\\n  } // 7.7 Punctuators\\n\\n\\n  function scanPunctuator() {\\n    var start = index,\\n        code = source.charCodeAt(index),\\n        code2,\\n        ch1 = source[index],\\n        ch2,\\n        ch3,\\n        ch4;\\n\\n    switch (code) {\\n      // Check for most common single-character punctuators.\\n      case 0x2E: // . dot\\n\\n      case 0x28: // ( open bracket\\n\\n      case 0x29: // ) close bracket\\n\\n      case 0x3B: // ; semicolon\\n\\n      case 0x2C: // , comma\\n\\n      case 0x7B: // { open curly brace\\n\\n      case 0x7D: // } close curly brace\\n\\n      case 0x5B: // [\\n\\n      case 0x5D: // ]\\n\\n      case 0x3A: // :\\n\\n      case 0x3F: // ?\\n\\n      case 0x7E:\\n        // ~\\n        ++index;\\n        return {\\n          type: TokenPunctuator,\\n          value: String.fromCharCode(code),\\n          start: start,\\n          end: index\\n        };\\n\\n      default:\\n        code2 = source.charCodeAt(index + 1); // '=' (U+003D) marks an assignment or comparison operator.\\n\\n        if (code2 === 0x3D) {\\n          switch (code) {\\n            case 0x2B: // +\\n\\n            case 0x2D: // -\\n\\n            case 0x2F: // /\\n\\n            case 0x3C: // <\\n\\n            case 0x3E: // >\\n\\n            case 0x5E: // ^\\n\\n            case 0x7C: // |\\n\\n            case 0x25: // %\\n\\n            case 0x26: // &\\n\\n            case 0x2A:\\n              // *\\n              index += 2;\\n              return {\\n                type: TokenPunctuator,\\n                value: String.fromCharCode(code) + String.fromCharCode(code2),\\n                start: start,\\n                end: index\\n              };\\n\\n            case 0x21: // !\\n\\n            case 0x3D:\\n              // =\\n              index += 2; // !== and ===\\n\\n              if (source.charCodeAt(index) === 0x3D) {\\n                ++index;\\n              }\\n\\n              return {\\n                type: TokenPunctuator,\\n                value: source.slice(start, index),\\n                start: start,\\n                end: index\\n              };\\n          }\\n        }\\n\\n    } // 4-character punctuator: >>>=\\n\\n\\n    ch4 = source.substr(index, 4);\\n\\n    if (ch4 === '>>>=') {\\n      index += 4;\\n      return {\\n        type: TokenPunctuator,\\n        value: ch4,\\n        start: start,\\n        end: index\\n      };\\n    } // 3-character punctuators: === !== >>> <<= >>=\\n\\n\\n    ch3 = ch4.substr(0, 3);\\n\\n    if (ch3 === '>>>' || ch3 === '<<=' || ch3 === '>>=') {\\n      index += 3;\\n      return {\\n        type: TokenPunctuator,\\n        value: ch3,\\n        start: start,\\n        end: index\\n      };\\n    } // Other 2-character punctuators: ++ -- << >> && ||\\n\\n\\n    ch2 = ch3.substr(0, 2);\\n\\n    if (ch1 === ch2[1] && '+-<>&|'.indexOf(ch1) >= 0 || ch2 === '=>') {\\n      index += 2;\\n      return {\\n        type: TokenPunctuator,\\n        value: ch2,\\n        start: start,\\n        end: index\\n      };\\n    } // 1-character punctuators: < > = ! + - * % & | ^ /\\n\\n\\n    if ('<>=!+-*%&|^/'.indexOf(ch1) >= 0) {\\n      ++index;\\n      return {\\n        type: TokenPunctuator,\\n        value: ch1,\\n        start: start,\\n        end: index\\n      };\\n    }\\n\\n    throwError({}, MessageUnexpectedToken, ILLEGAL$1);\\n  } // 7.8.3 Numeric Literals\\n\\n\\n  function scanHexLiteral(start) {\\n    let number = '';\\n\\n    while (index < length) {\\n      if (!isHexDigit(source[index])) {\\n        break;\\n      }\\n\\n      number += source[index++];\\n    }\\n\\n    if (number.length === 0) {\\n      throwError({}, MessageUnexpectedToken, ILLEGAL$1);\\n    }\\n\\n    if (isIdentifierStart(source.charCodeAt(index))) {\\n      throwError({}, MessageUnexpectedToken, ILLEGAL$1);\\n    }\\n\\n    return {\\n      type: TokenNumericLiteral,\\n      value: parseInt('0x' + number, 16),\\n      start: start,\\n      end: index\\n    };\\n  }\\n\\n  function scanOctalLiteral(start) {\\n    let number = '0' + source[index++];\\n\\n    while (index < length) {\\n      if (!isOctalDigit(source[index])) {\\n        break;\\n      }\\n\\n      number += source[index++];\\n    }\\n\\n    if (isIdentifierStart(source.charCodeAt(index)) || isDecimalDigit(source.charCodeAt(index))) {\\n      throwError({}, MessageUnexpectedToken, ILLEGAL$1);\\n    }\\n\\n    return {\\n      type: TokenNumericLiteral,\\n      value: parseInt(number, 8),\\n      octal: true,\\n      start: start,\\n      end: index\\n    };\\n  }\\n\\n  function scanNumericLiteral() {\\n    var number, start, ch;\\n    ch = source[index];\\n    assert(isDecimalDigit(ch.charCodeAt(0)) || ch === '.', 'Numeric literal must start with a decimal digit or a decimal point');\\n    start = index;\\n    number = '';\\n\\n    if (ch !== '.') {\\n      number = source[index++];\\n      ch = source[index]; // Hex number starts with '0x'.\\n      // Octal number starts with '0'.\\n\\n      if (number === '0') {\\n        if (ch === 'x' || ch === 'X') {\\n          ++index;\\n          return scanHexLiteral(start);\\n        }\\n\\n        if (isOctalDigit(ch)) {\\n          return scanOctalLiteral(start);\\n        } // decimal number starts with '0' such as '09' is illegal.\\n\\n\\n        if (ch && isDecimalDigit(ch.charCodeAt(0))) {\\n          throwError({}, MessageUnexpectedToken, ILLEGAL$1);\\n        }\\n      }\\n\\n      while (isDecimalDigit(source.charCodeAt(index))) {\\n        number += source[index++];\\n      }\\n\\n      ch = source[index];\\n    }\\n\\n    if (ch === '.') {\\n      number += source[index++];\\n\\n      while (isDecimalDigit(source.charCodeAt(index))) {\\n        number += source[index++];\\n      }\\n\\n      ch = source[index];\\n    }\\n\\n    if (ch === 'e' || ch === 'E') {\\n      number += source[index++];\\n      ch = source[index];\\n\\n      if (ch === '+' || ch === '-') {\\n        number += source[index++];\\n      }\\n\\n      if (isDecimalDigit(source.charCodeAt(index))) {\\n        while (isDecimalDigit(source.charCodeAt(index))) {\\n          number += source[index++];\\n        }\\n      } else {\\n        throwError({}, MessageUnexpectedToken, ILLEGAL$1);\\n      }\\n    }\\n\\n    if (isIdentifierStart(source.charCodeAt(index))) {\\n      throwError({}, MessageUnexpectedToken, ILLEGAL$1);\\n    }\\n\\n    return {\\n      type: TokenNumericLiteral,\\n      value: parseFloat(number),\\n      start: start,\\n      end: index\\n    };\\n  } // 7.8.4 String Literals\\n\\n\\n  function scanStringLiteral() {\\n    var str = '',\\n        quote,\\n        start,\\n        ch,\\n        code,\\n        octal = false;\\n    quote = source[index];\\n    assert(quote === '\\\\'' || quote === '\\\"', 'String literal must starts with a quote');\\n    start = index;\\n    ++index;\\n\\n    while (index < length) {\\n      ch = source[index++];\\n\\n      if (ch === quote) {\\n        quote = '';\\n        break;\\n      } else if (ch === '\\\\\\\\') {\\n        ch = source[index++];\\n\\n        if (!ch || !isLineTerminator(ch.charCodeAt(0))) {\\n          switch (ch) {\\n            case 'u':\\n            case 'x':\\n              if (source[index] === '{') {\\n                ++index;\\n                str += scanUnicodeCodePointEscape();\\n              } else {\\n                str += scanHexEscape(ch);\\n              }\\n\\n              break;\\n\\n            case 'n':\\n              str += '\\\\n';\\n              break;\\n\\n            case 'r':\\n              str += '\\\\r';\\n              break;\\n\\n            case 't':\\n              str += '\\\\t';\\n              break;\\n\\n            case 'b':\\n              str += '\\\\b';\\n              break;\\n\\n            case 'f':\\n              str += '\\\\f';\\n              break;\\n\\n            case 'v':\\n              str += '\\\\x0B';\\n              break;\\n\\n            default:\\n              if (isOctalDigit(ch)) {\\n                code = '01234567'.indexOf(ch); // \\\\0 is not octal escape sequence\\n\\n                if (code !== 0) {\\n                  octal = true;\\n                }\\n\\n                if (index < length && isOctalDigit(source[index])) {\\n                  octal = true;\\n                  code = code * 8 + '01234567'.indexOf(source[index++]); // 3 digits are only allowed when string starts\\n                  // with 0, 1, 2, 3\\n\\n                  if ('0123'.indexOf(ch) >= 0 && index < length && isOctalDigit(source[index])) {\\n                    code = code * 8 + '01234567'.indexOf(source[index++]);\\n                  }\\n                }\\n\\n                str += String.fromCharCode(code);\\n              } else {\\n                str += ch;\\n              }\\n\\n              break;\\n          }\\n        } else {\\n          if (ch === '\\\\r' && source[index] === '\\\\n') {\\n            ++index;\\n          }\\n        }\\n      } else if (isLineTerminator(ch.charCodeAt(0))) {\\n        break;\\n      } else {\\n        str += ch;\\n      }\\n    }\\n\\n    if (quote !== '') {\\n      throwError({}, MessageUnexpectedToken, ILLEGAL$1);\\n    }\\n\\n    return {\\n      type: TokenStringLiteral,\\n      value: str,\\n      octal: octal,\\n      start: start,\\n      end: index\\n    };\\n  }\\n\\n  function testRegExp(pattern, flags) {\\n    let tmp = pattern;\\n\\n    if (flags.indexOf('u') >= 0) {\\n      // Replace each astral symbol and every Unicode code point\\n      // escape sequence with a single ASCII symbol to avoid throwing on\\n      // regular expressions that are only valid in combination with the\\n      // `/u` flag.\\n      // Note: replacing with the ASCII symbol `x` might cause false\\n      // negatives in unlikely scenarios. For example, `[\\\\u{61}-b]` is a\\n      // perfectly valid pattern that is equivalent to `[a-b]`, but it\\n      // would be replaced by `[x-b]` which throws an error.\\n      tmp = tmp.replace(/\\\\\\\\u\\\\{([0-9a-fA-F]+)\\\\}/g, ($0, $1) => {\\n        if (parseInt($1, 16) <= 0x10FFFF) {\\n          return 'x';\\n        }\\n\\n        throwError({}, MessageInvalidRegExp);\\n      }).replace(/[\\\\uD800-\\\\uDBFF][\\\\uDC00-\\\\uDFFF]/g, 'x');\\n    } // First, detect invalid regular expressions.\\n\\n\\n    try {\\n      new RegExp(tmp);\\n    } catch (e) {\\n      throwError({}, MessageInvalidRegExp);\\n    } // Return a regular expression object for this pattern-flag pair, or\\n    // `null` in case the current environment doesn't support the flags it\\n    // uses.\\n\\n\\n    try {\\n      return new RegExp(pattern, flags);\\n    } catch (exception) {\\n      return null;\\n    }\\n  }\\n\\n  function scanRegExpBody() {\\n    var ch, str, classMarker, terminated, body;\\n    ch = source[index];\\n    assert(ch === '/', 'Regular expression literal must start with a slash');\\n    str = source[index++];\\n    classMarker = false;\\n    terminated = false;\\n\\n    while (index < length) {\\n      ch = source[index++];\\n      str += ch;\\n\\n      if (ch === '\\\\\\\\') {\\n        ch = source[index++]; // ECMA-262 7.8.5\\n\\n        if (isLineTerminator(ch.charCodeAt(0))) {\\n          throwError({}, MessageUnterminatedRegExp);\\n        }\\n\\n        str += ch;\\n      } else if (isLineTerminator(ch.charCodeAt(0))) {\\n        throwError({}, MessageUnterminatedRegExp);\\n      } else if (classMarker) {\\n        if (ch === ']') {\\n          classMarker = false;\\n        }\\n      } else {\\n        if (ch === '/') {\\n          terminated = true;\\n          break;\\n        } else if (ch === '[') {\\n          classMarker = true;\\n        }\\n      }\\n    }\\n\\n    if (!terminated) {\\n      throwError({}, MessageUnterminatedRegExp);\\n    } // Exclude leading and trailing slash.\\n\\n\\n    body = str.substr(1, str.length - 2);\\n    return {\\n      value: body,\\n      literal: str\\n    };\\n  }\\n\\n  function scanRegExpFlags() {\\n    var ch, str, flags;\\n    str = '';\\n    flags = '';\\n\\n    while (index < length) {\\n      ch = source[index];\\n\\n      if (!isIdentifierPart(ch.charCodeAt(0))) {\\n        break;\\n      }\\n\\n      ++index;\\n\\n      if (ch === '\\\\\\\\' && index < length) {\\n        throwError({}, MessageUnexpectedToken, ILLEGAL$1);\\n      } else {\\n        flags += ch;\\n        str += ch;\\n      }\\n    }\\n\\n    if (flags.search(/[^gimuy]/g) >= 0) {\\n      throwError({}, MessageInvalidRegExp, flags);\\n    }\\n\\n    return {\\n      value: flags,\\n      literal: str\\n    };\\n  }\\n\\n  function scanRegExp() {\\n    var start, body, flags, value;\\n    lookahead = null;\\n    skipComment();\\n    start = index;\\n    body = scanRegExpBody();\\n    flags = scanRegExpFlags();\\n    value = testRegExp(body.value, flags.value);\\n    return {\\n      literal: body.literal + flags.literal,\\n      value: value,\\n      regex: {\\n        pattern: body.value,\\n        flags: flags.value\\n      },\\n      start: start,\\n      end: index\\n    };\\n  }\\n\\n  function isIdentifierName(token) {\\n    return token.type === TokenIdentifier || token.type === TokenKeyword || token.type === TokenBooleanLiteral || token.type === TokenNullLiteral;\\n  }\\n\\n  function advance() {\\n    skipComment();\\n\\n    if (index >= length) {\\n      return {\\n        type: TokenEOF,\\n        start: index,\\n        end: index\\n      };\\n    }\\n\\n    const ch = source.charCodeAt(index);\\n\\n    if (isIdentifierStart(ch)) {\\n      return scanIdentifier();\\n    } // Very common: ( and ) and ;\\n\\n\\n    if (ch === 0x28 || ch === 0x29 || ch === 0x3B) {\\n      return scanPunctuator();\\n    } // String literal starts with single quote (U+0027) or double quote (U+0022).\\n\\n\\n    if (ch === 0x27 || ch === 0x22) {\\n      return scanStringLiteral();\\n    } // Dot (.) U+002E can also start a floating-point number, hence the need\\n    // to check the next character.\\n\\n\\n    if (ch === 0x2E) {\\n      if (isDecimalDigit(source.charCodeAt(index + 1))) {\\n        return scanNumericLiteral();\\n      }\\n\\n      return scanPunctuator();\\n    }\\n\\n    if (isDecimalDigit(ch)) {\\n      return scanNumericLiteral();\\n    }\\n\\n    return scanPunctuator();\\n  }\\n\\n  function lex() {\\n    const token = lookahead;\\n    index = token.end;\\n    lookahead = advance();\\n    index = token.end;\\n    return token;\\n  }\\n\\n  function peek() {\\n    const pos = index;\\n    lookahead = advance();\\n    index = pos;\\n  }\\n\\n  function finishArrayExpression(elements) {\\n    const node = new ASTNode(SyntaxArrayExpression);\\n    node.elements = elements;\\n    return node;\\n  }\\n\\n  function finishBinaryExpression(operator, left, right) {\\n    const node = new ASTNode(operator === '||' || operator === '&&' ? SyntaxLogicalExpression : SyntaxBinaryExpression);\\n    node.operator = operator;\\n    node.left = left;\\n    node.right = right;\\n    return node;\\n  }\\n\\n  function finishCallExpression(callee, args) {\\n    const node = new ASTNode(SyntaxCallExpression);\\n    node.callee = callee;\\n    node.arguments = args;\\n    return node;\\n  }\\n\\n  function finishConditionalExpression(test, consequent, alternate) {\\n    const node = new ASTNode(SyntaxConditionalExpression);\\n    node.test = test;\\n    node.consequent = consequent;\\n    node.alternate = alternate;\\n    return node;\\n  }\\n\\n  function finishIdentifier(name) {\\n    const node = new ASTNode(SyntaxIdentifier);\\n    node.name = name;\\n    return node;\\n  }\\n\\n  function finishLiteral(token) {\\n    const node = new ASTNode(SyntaxLiteral);\\n    node.value = token.value;\\n    node.raw = source.slice(token.start, token.end);\\n\\n    if (token.regex) {\\n      if (node.raw === '//') {\\n        node.raw = '/(?:)/';\\n      }\\n\\n      node.regex = token.regex;\\n    }\\n\\n    return node;\\n  }\\n\\n  function finishMemberExpression(accessor, object, property) {\\n    const node = new ASTNode(SyntaxMemberExpression);\\n    node.computed = accessor === '[';\\n    node.object = object;\\n    node.property = property;\\n    if (!node.computed) property.member = true;\\n    return node;\\n  }\\n\\n  function finishObjectExpression(properties) {\\n    const node = new ASTNode(SyntaxObjectExpression);\\n    node.properties = properties;\\n    return node;\\n  }\\n\\n  function finishProperty(kind, key, value) {\\n    const node = new ASTNode(SyntaxProperty);\\n    node.key = key;\\n    node.value = value;\\n    node.kind = kind;\\n    return node;\\n  }\\n\\n  function finishUnaryExpression(operator, argument) {\\n    const node = new ASTNode(SyntaxUnaryExpression);\\n    node.operator = operator;\\n    node.argument = argument;\\n    node.prefix = true;\\n    return node;\\n  } // Throw an exception\\n\\n\\n  function throwError(token, messageFormat) {\\n    var error,\\n        args = Array.prototype.slice.call(arguments, 2),\\n        msg = messageFormat.replace(/%(\\\\d)/g, (whole, index) => {\\n      assert(index < args.length, 'Message reference must be in range');\\n      return args[index];\\n    });\\n    error = new Error(msg);\\n    error.index = index;\\n    error.description = msg;\\n    throw error;\\n  } // Throw an exception because of the token.\\n\\n\\n  function throwUnexpected(token) {\\n    if (token.type === TokenEOF) {\\n      throwError(token, MessageUnexpectedEOS);\\n    }\\n\\n    if (token.type === TokenNumericLiteral) {\\n      throwError(token, MessageUnexpectedNumber);\\n    }\\n\\n    if (token.type === TokenStringLiteral) {\\n      throwError(token, MessageUnexpectedString);\\n    }\\n\\n    if (token.type === TokenIdentifier) {\\n      throwError(token, MessageUnexpectedIdentifier);\\n    }\\n\\n    if (token.type === TokenKeyword) {\\n      throwError(token, MessageUnexpectedReserved);\\n    } // BooleanLiteral, NullLiteral, or Punctuator.\\n\\n\\n    throwError(token, MessageUnexpectedToken, token.value);\\n  } // Expect the next token to match the specified punctuator.\\n  // If not, an exception will be thrown.\\n\\n\\n  function expect(value) {\\n    const token = lex();\\n\\n    if (token.type !== TokenPunctuator || token.value !== value) {\\n      throwUnexpected(token);\\n    }\\n  } // Return true if the next token matches the specified punctuator.\\n\\n\\n  function match(value) {\\n    return lookahead.type === TokenPunctuator && lookahead.value === value;\\n  } // Return true if the next token matches the specified keyword\\n\\n\\n  function matchKeyword(keyword) {\\n    return lookahead.type === TokenKeyword && lookahead.value === keyword;\\n  } // 11.1.4 Array Initialiser\\n\\n\\n  function parseArrayInitialiser() {\\n    const elements = [];\\n    index = lookahead.start;\\n    expect('[');\\n\\n    while (!match(']')) {\\n      if (match(',')) {\\n        lex();\\n        elements.push(null);\\n      } else {\\n        elements.push(parseConditionalExpression());\\n\\n        if (!match(']')) {\\n          expect(',');\\n        }\\n      }\\n    }\\n\\n    lex();\\n    return finishArrayExpression(elements);\\n  } // 11.1.5 Object Initialiser\\n\\n\\n  function parseObjectPropertyKey() {\\n    index = lookahead.start;\\n    const token = lex(); // Note: This function is called only from parseObjectProperty(), where\\n    // EOF and Punctuator tokens are already filtered out.\\n\\n    if (token.type === TokenStringLiteral || token.type === TokenNumericLiteral) {\\n      if (token.octal) {\\n        throwError(token, MessageStrictOctalLiteral);\\n      }\\n\\n      return finishLiteral(token);\\n    }\\n\\n    return finishIdentifier(token.value);\\n  }\\n\\n  function parseObjectProperty() {\\n    var token, key, id, value;\\n    index = lookahead.start;\\n    token = lookahead;\\n\\n    if (token.type === TokenIdentifier) {\\n      id = parseObjectPropertyKey();\\n      expect(':');\\n      value = parseConditionalExpression();\\n      return finishProperty('init', id, value);\\n    }\\n\\n    if (token.type === TokenEOF || token.type === TokenPunctuator) {\\n      throwUnexpected(token);\\n    } else {\\n      key = parseObjectPropertyKey();\\n      expect(':');\\n      value = parseConditionalExpression();\\n      return finishProperty('init', key, value);\\n    }\\n  }\\n\\n  function parseObjectInitialiser() {\\n    var properties = [],\\n        property,\\n        name,\\n        key,\\n        map = {},\\n        toString = String;\\n    index = lookahead.start;\\n    expect('{');\\n\\n    while (!match('}')) {\\n      property = parseObjectProperty();\\n\\n      if (property.key.type === SyntaxIdentifier) {\\n        name = property.key.name;\\n      } else {\\n        name = toString(property.key.value);\\n      }\\n\\n      key = '$' + name;\\n\\n      if (Object.prototype.hasOwnProperty.call(map, key)) {\\n        throwError({}, MessageStrictDuplicateProperty);\\n      } else {\\n        map[key] = true;\\n      }\\n\\n      properties.push(property);\\n\\n      if (!match('}')) {\\n        expect(',');\\n      }\\n    }\\n\\n    expect('}');\\n    return finishObjectExpression(properties);\\n  } // 11.1.6 The Grouping Operator\\n\\n\\n  function parseGroupExpression() {\\n    expect('(');\\n    const expr = parseExpression();\\n    expect(')');\\n    return expr;\\n  } // 11.1 Primary Expressions\\n\\n\\n  const legalKeywords = {\\n    'if': 1\\n  };\\n\\n  function parsePrimaryExpression() {\\n    var type, token, expr;\\n\\n    if (match('(')) {\\n      return parseGroupExpression();\\n    }\\n\\n    if (match('[')) {\\n      return parseArrayInitialiser();\\n    }\\n\\n    if (match('{')) {\\n      return parseObjectInitialiser();\\n    }\\n\\n    type = lookahead.type;\\n    index = lookahead.start;\\n\\n    if (type === TokenIdentifier || legalKeywords[lookahead.value]) {\\n      expr = finishIdentifier(lex().value);\\n    } else if (type === TokenStringLiteral || type === TokenNumericLiteral) {\\n      if (lookahead.octal) {\\n        throwError(lookahead, MessageStrictOctalLiteral);\\n      }\\n\\n      expr = finishLiteral(lex());\\n    } else if (type === TokenKeyword) {\\n      throw new Error(DISABLED);\\n    } else if (type === TokenBooleanLiteral) {\\n      token = lex();\\n      token.value = token.value === 'true';\\n      expr = finishLiteral(token);\\n    } else if (type === TokenNullLiteral) {\\n      token = lex();\\n      token.value = null;\\n      expr = finishLiteral(token);\\n    } else if (match('/') || match('/=')) {\\n      expr = finishLiteral(scanRegExp());\\n      peek();\\n    } else {\\n      throwUnexpected(lex());\\n    }\\n\\n    return expr;\\n  } // 11.2 Left-Hand-Side Expressions\\n\\n\\n  function parseArguments() {\\n    const args = [];\\n    expect('(');\\n\\n    if (!match(')')) {\\n      while (index < length) {\\n        args.push(parseConditionalExpression());\\n\\n        if (match(')')) {\\n          break;\\n        }\\n\\n        expect(',');\\n      }\\n    }\\n\\n    expect(')');\\n    return args;\\n  }\\n\\n  function parseNonComputedProperty() {\\n    index = lookahead.start;\\n    const token = lex();\\n\\n    if (!isIdentifierName(token)) {\\n      throwUnexpected(token);\\n    }\\n\\n    return finishIdentifier(token.value);\\n  }\\n\\n  function parseNonComputedMember() {\\n    expect('.');\\n    return parseNonComputedProperty();\\n  }\\n\\n  function parseComputedMember() {\\n    expect('[');\\n    const expr = parseExpression();\\n    expect(']');\\n    return expr;\\n  }\\n\\n  function parseLeftHandSideExpressionAllowCall() {\\n    var expr, args, property;\\n    expr = parsePrimaryExpression();\\n\\n    for (;;) {\\n      if (match('.')) {\\n        property = parseNonComputedMember();\\n        expr = finishMemberExpression('.', expr, property);\\n      } else if (match('(')) {\\n        args = parseArguments();\\n        expr = finishCallExpression(expr, args);\\n      } else if (match('[')) {\\n        property = parseComputedMember();\\n        expr = finishMemberExpression('[', expr, property);\\n      } else {\\n        break;\\n      }\\n    }\\n\\n    return expr;\\n  } // 11.3 Postfix Expressions\\n\\n\\n  function parsePostfixExpression() {\\n    const expr = parseLeftHandSideExpressionAllowCall();\\n\\n    if (lookahead.type === TokenPunctuator) {\\n      if (match('++') || match('--')) {\\n        throw new Error(DISABLED);\\n      }\\n    }\\n\\n    return expr;\\n  } // 11.4 Unary Operators\\n\\n\\n  function parseUnaryExpression() {\\n    var token, expr;\\n\\n    if (lookahead.type !== TokenPunctuator && lookahead.type !== TokenKeyword) {\\n      expr = parsePostfixExpression();\\n    } else if (match('++') || match('--')) {\\n      throw new Error(DISABLED);\\n    } else if (match('+') || match('-') || match('~') || match('!')) {\\n      token = lex();\\n      expr = parseUnaryExpression();\\n      expr = finishUnaryExpression(token.value, expr);\\n    } else if (matchKeyword('delete') || matchKeyword('void') || matchKeyword('typeof')) {\\n      throw new Error(DISABLED);\\n    } else {\\n      expr = parsePostfixExpression();\\n    }\\n\\n    return expr;\\n  }\\n\\n  function binaryPrecedence(token) {\\n    let prec = 0;\\n\\n    if (token.type !== TokenPunctuator && token.type !== TokenKeyword) {\\n      return 0;\\n    }\\n\\n    switch (token.value) {\\n      case '||':\\n        prec = 1;\\n        break;\\n\\n      case '&&':\\n        prec = 2;\\n        break;\\n\\n      case '|':\\n        prec = 3;\\n        break;\\n\\n      case '^':\\n        prec = 4;\\n        break;\\n\\n      case '&':\\n        prec = 5;\\n        break;\\n\\n      case '==':\\n      case '!=':\\n      case '===':\\n      case '!==':\\n        prec = 6;\\n        break;\\n\\n      case '<':\\n      case '>':\\n      case '<=':\\n      case '>=':\\n      case 'instanceof':\\n      case 'in':\\n        prec = 7;\\n        break;\\n\\n      case '<<':\\n      case '>>':\\n      case '>>>':\\n        prec = 8;\\n        break;\\n\\n      case '+':\\n      case '-':\\n        prec = 9;\\n        break;\\n\\n      case '*':\\n      case '/':\\n      case '%':\\n        prec = 11;\\n        break;\\n    }\\n\\n    return prec;\\n  } // 11.5 Multiplicative Operators\\n  // 11.6 Additive Operators\\n  // 11.7 Bitwise Shift Operators\\n  // 11.8 Relational Operators\\n  // 11.9 Equality Operators\\n  // 11.10 Binary Bitwise Operators\\n  // 11.11 Binary Logical Operators\\n\\n\\n  function parseBinaryExpression() {\\n    var marker, markers, expr, token, prec, stack, right, operator, left, i;\\n    marker = lookahead;\\n    left = parseUnaryExpression();\\n    token = lookahead;\\n    prec = binaryPrecedence(token);\\n\\n    if (prec === 0) {\\n      return left;\\n    }\\n\\n    token.prec = prec;\\n    lex();\\n    markers = [marker, lookahead];\\n    right = parseUnaryExpression();\\n    stack = [left, token, right];\\n\\n    while ((prec = binaryPrecedence(lookahead)) > 0) {\\n      // Reduce: make a binary expression from the three topmost entries.\\n      while (stack.length > 2 && prec <= stack[stack.length - 2].prec) {\\n        right = stack.pop();\\n        operator = stack.pop().value;\\n        left = stack.pop();\\n        markers.pop();\\n        expr = finishBinaryExpression(operator, left, right);\\n        stack.push(expr);\\n      } // Shift.\\n\\n\\n      token = lex();\\n      token.prec = prec;\\n      stack.push(token);\\n      markers.push(lookahead);\\n      expr = parseUnaryExpression();\\n      stack.push(expr);\\n    } // Final reduce to clean-up the stack.\\n\\n\\n    i = stack.length - 1;\\n    expr = stack[i];\\n    markers.pop();\\n\\n    while (i > 1) {\\n      markers.pop();\\n      expr = finishBinaryExpression(stack[i - 1].value, stack[i - 2], expr);\\n      i -= 2;\\n    }\\n\\n    return expr;\\n  } // 11.12 Conditional Operator\\n\\n\\n  function parseConditionalExpression() {\\n    var expr, consequent, alternate;\\n    expr = parseBinaryExpression();\\n\\n    if (match('?')) {\\n      lex();\\n      consequent = parseConditionalExpression();\\n      expect(':');\\n      alternate = parseConditionalExpression();\\n      expr = finishConditionalExpression(expr, consequent, alternate);\\n    }\\n\\n    return expr;\\n  } // 11.14 Comma Operator\\n\\n\\n  function parseExpression() {\\n    const expr = parseConditionalExpression();\\n\\n    if (match(',')) {\\n      throw new Error(DISABLED); // no sequence expressions\\n    }\\n\\n    return expr;\\n  }\\n\\n  function parser(code) {\\n    source = code;\\n    index = 0;\\n    length = source.length;\\n    lookahead = null;\\n    peek();\\n    const expr = parseExpression();\\n\\n    if (lookahead.type !== TokenEOF) {\\n      throw new Error('Unexpect token after expression.');\\n    }\\n\\n    return expr;\\n  }\\n\\n  function getName(node) {\\n    const name = [];\\n\\n    if (node.type === 'Identifier') {\\n      return [node.name];\\n    }\\n\\n    if (node.type === 'Literal') {\\n      return [node.value];\\n    }\\n\\n    if (node.type === 'MemberExpression') {\\n      name.push(...getName(node.object));\\n      name.push(...getName(node.property));\\n    }\\n\\n    return name;\\n  }\\n\\n  function startsWithDatum(node) {\\n    if (node.object.type === 'MemberExpression') {\\n      return startsWithDatum(node.object);\\n    }\\n\\n    return node.object.name === 'datum';\\n  }\\n\\n  function getDependentFields(expression) {\\n    const ast = parser(expression);\\n    const dependents = new Set();\\n    ast.visit(node => {\\n      if (node.type === 'MemberExpression' && startsWithDatum(node)) {\\n        dependents.add(getName(node).slice(1).join('.'));\\n      }\\n    });\\n    return dependents;\\n  }\\n\\n  class FilterNode extends DataFlowNode {\\n    clone() {\\n      return new FilterNode(null, this.model, duplicate(this.filter));\\n    }\\n\\n    constructor(parent, model, filter) {\\n      super(parent); // TODO: refactor this to not take a node and\\n      // then add a static function makeFromOperand and make the constructor take only an expression\\n\\n      this.model = model;\\n      this.filter = filter;\\n\\n      _defineProperty(this, \\\"expr\\\", void 0);\\n\\n      _defineProperty(this, \\\"_dependentFields\\\", void 0);\\n\\n      this.expr = expression(this.model, this.filter, this);\\n      this._dependentFields = getDependentFields(this.expr);\\n    }\\n\\n    dependentFields() {\\n      return this._dependentFields;\\n    }\\n\\n    producedFields() {\\n      return new Set(); // filter does not produce any new fields\\n    }\\n\\n    assemble() {\\n      return {\\n        type: 'filter',\\n        expr: this.expr\\n      };\\n    }\\n\\n    hash() {\\n      return \\\"Filter \\\".concat(this.expr);\\n    }\\n\\n  }\\n\\n  function parseUnitSelection(model, selDefs) {\\n    const selCmpts = {};\\n    const selectionConfig = model.config.selection;\\n\\n    for (const name of keys(selDefs !== null && selDefs !== void 0 ? selDefs : {})) {\\n      const selDef = duplicate(selDefs[name]);\\n      const {\\n        fields,\\n        encodings,\\n        ...cfg\\n      } = selectionConfig[selDef.type]; // Project transform applies its defaults.\\n      // Set default values from config if a property hasn't been specified,\\n      // or if it is true. E.g., \\\"translate\\\": true should use the default\\n      // event handlers for translate. However, true may be a valid value for\\n      // a property (e.g., \\\"nearest\\\": true).\\n\\n      for (const key in cfg) {\\n        // A selection should contain either `encodings` or `fields`, only use\\n        // default values for these two values if neither of them is specified.\\n        if (key === 'encodings' && selDef.fields || key === 'fields' && selDef.encodings) {\\n          continue;\\n        }\\n\\n        if (key === 'mark') {\\n          selDef[key] = { ...cfg[key],\\n            ...selDef[key]\\n          };\\n        }\\n\\n        if (selDef[key] === undefined || selDef[key] === true) {\\n          var _cfg$key;\\n\\n          selDef[key] = (_cfg$key = cfg[key]) !== null && _cfg$key !== void 0 ? _cfg$key : selDef[key];\\n        }\\n      }\\n\\n      const safeName = varName(name);\\n      const selCmpt = selCmpts[safeName] = { ...selDef,\\n        name: safeName,\\n        events: isString(selDef.on) ? eventSelector(selDef.on, 'scope') : duplicate(selDef.on)\\n      };\\n      forEachTransform(selCmpt, txCompiler => {\\n        if (txCompiler.has(selCmpt) && txCompiler.parse) {\\n          txCompiler.parse(model, selCmpt, selDef, selDefs[name]);\\n        }\\n      });\\n    }\\n\\n    return selCmpts;\\n  }\\n  function parseSelectionPredicate(model, selections, dfnode, datum = 'datum') {\\n    const stores = [];\\n\\n    function expr(name) {\\n      const vname = varName(name);\\n      const selCmpt = model.getSelectionComponent(vname, name);\\n      const store = $(vname + STORE);\\n\\n      if (selCmpt.project.timeUnit) {\\n        const child = dfnode !== null && dfnode !== void 0 ? dfnode : model.component.data.raw;\\n        const tunode = selCmpt.project.timeUnit.clone();\\n\\n        if (child.parent) {\\n          tunode.insertAsParentOf(child);\\n        } else {\\n          child.parent = tunode;\\n        }\\n      }\\n\\n      if (selCmpt.empty !== 'none') {\\n        stores.push(store);\\n      }\\n\\n      return \\\"vlSelectionTest(\\\".concat(store, \\\", \\\").concat(datum) + (selCmpt.resolve === 'global' ? ')' : \\\", \\\".concat($(selCmpt.resolve), \\\")\\\"));\\n    }\\n\\n    const predicateStr = logicalExpr(selections, expr);\\n    return (stores.length ? '!(' + stores.map(s => \\\"length(data(\\\".concat(s, \\\"))\\\")).join(' || ') + ') || ' : '') + \\\"(\\\".concat(predicateStr, \\\")\\\");\\n  }\\n  function parseSelectionBinExtent(selCmpt, extent) {\\n    const encoding = extent['encoding'];\\n    let field = extent['field'];\\n\\n    if (!encoding && !field) {\\n      field = selCmpt.project.items[0].field;\\n\\n      if (selCmpt.project.items.length > 1) {\\n        warn('A \\\"field\\\" or \\\"encoding\\\" must be specified when using a selection as a scale domain. ' + \\\"Using \\\\\\\"field\\\\\\\": \\\".concat($(field), \\\".\\\"));\\n      }\\n    } else if (encoding && !field) {\\n      const encodings = selCmpt.project.items.filter(p => p.channel === encoding);\\n\\n      if (!encodings.length || encodings.length > 1) {\\n        field = selCmpt.project.items[0].field;\\n        warn((!encodings.length ? 'No ' : 'Multiple ') + \\\"matching \\\".concat($(encoding), \\\" encoding found for selection \\\").concat($(extent.selection), \\\". \\\") + \\\"Using \\\\\\\"field\\\\\\\": \\\".concat($(field), \\\".\\\"));\\n      } else {\\n        field = encodings[0].field;\\n      }\\n    }\\n\\n    return \\\"\\\".concat(selCmpt.name, \\\"[\\\").concat($(field), \\\"]\\\");\\n  }\\n  function materializeSelections(model, main) {\\n    forEachSelection(model, selCmpt => {\\n      const selection = selCmpt.name;\\n      const lookupName = model.getName(\\\"lookup_\\\".concat(selection));\\n      model.component.data.outputNodes[lookupName] = selCmpt.materialized = new OutputNode(new FilterNode(main, model, {\\n        selection\\n      }), lookupName, DataSourceType.Lookup, model.component.data.outputNodeRefCounts);\\n    });\\n  }\\n\\n  /**\\n   * Converts a predicate into an expression.\\n   */\\n  // model is only used for selection filters.\\n\\n  function expression(model, filterOp, node) {\\n    return logicalExpr(filterOp, predicate => {\\n      if (isString(predicate)) {\\n        return predicate;\\n      } else if (isSelectionPredicate(predicate)) {\\n        return parseSelectionPredicate(model, predicate.selection, node);\\n      } else {\\n        // Filter Object\\n        return fieldFilterExpression(predicate);\\n      }\\n    });\\n  }\\n\\n  function assembleTitle(title, config) {\\n    if (!title) {\\n      return undefined;\\n    }\\n\\n    if (isArray(title) && !isText(title)) {\\n      return title.map(fieldDef => defaultTitle(fieldDef, config)).join(', ');\\n    }\\n\\n    return title;\\n  }\\n\\n  function setAxisEncode(axis, part, vgProp, vgRef) {\\n    var _axis$encode, _axis$encode$part, _axis$encode$part$upd;\\n\\n    axis.encode = (_axis$encode = axis.encode) !== null && _axis$encode !== void 0 ? _axis$encode : {};\\n    axis.encode[part] = (_axis$encode$part = axis.encode[part]) !== null && _axis$encode$part !== void 0 ? _axis$encode$part : {};\\n    axis.encode[part].update = (_axis$encode$part$upd = axis.encode[part].update) !== null && _axis$encode$part$upd !== void 0 ? _axis$encode$part$upd : {}; // TODO: remove as any after https://github.com/prisma/nexus-prisma/issues/291\\n\\n    axis.encode[part].update[vgProp] = vgRef;\\n  }\\n\\n  function assembleAxis(axisCmpt, kind, config, opt = {\\n    header: false\\n  }) {\\n    const {\\n      disable,\\n      orient,\\n      scale,\\n      labelExpr,\\n      title,\\n      zindex,\\n      ...axis\\n    } = axisCmpt.combine();\\n\\n    if (disable) {\\n      return undefined;\\n    }\\n\\n    for (const prop in axis) {\\n      const propType = AXIS_PROPERTY_TYPE[prop];\\n      const propValue = axis[prop];\\n\\n      if (propType && propType !== kind && propType !== 'both') {\\n        // Remove properties that are not valid for this kind of axis\\n        delete axis[prop];\\n      } else if (isConditionalAxisValue(propValue)) {\\n        // deal with conditional axis value\\n        const {\\n          condition,\\n          ...valueOrSignalRef\\n        } = propValue;\\n        const conditions = array(condition);\\n        const propIndex = CONDITIONAL_AXIS_PROP_INDEX[prop];\\n\\n        if (propIndex) {\\n          const {\\n            vgProp,\\n            part\\n          } = propIndex; // If there is a corresponding Vega property for the channel,\\n          // use Vega's custom axis encoding and delete the original axis property to avoid conflicts\\n\\n          const vgRef = [...conditions.map(c => {\\n            const {\\n              test,\\n              ...valueOrSignalCRef\\n            } = c;\\n            return {\\n              test: expression(null, test),\\n              ...valueOrSignalCRef\\n            };\\n          }), valueOrSignalRef];\\n          setAxisEncode(axis, part, vgProp, vgRef);\\n          delete axis[prop];\\n        } else if (propIndex === null) {\\n          // If propIndex is null, this means we support conditional axis property by converting the condition to signal instead.\\n          const signalRef = {\\n            signal: conditions.map(c => {\\n              const {\\n                test,\\n                ...valueOrSignalCRef\\n              } = c;\\n              return \\\"\\\".concat(expression(null, test), \\\" ? \\\").concat(exprFromValueOrSignalRef(valueOrSignalCRef), \\\" : \\\");\\n            }).join('') + exprFromValueOrSignalRef(valueOrSignalRef)\\n          };\\n          axis[prop] = signalRef;\\n        }\\n      } else if (isSignalRef(propValue)) {\\n        const propIndex = CONDITIONAL_AXIS_PROP_INDEX[prop];\\n\\n        if (propIndex) {\\n          const {\\n            vgProp,\\n            part\\n          } = propIndex;\\n          setAxisEncode(axis, part, vgProp, propValue);\\n          delete axis[prop];\\n        } // else do nothing since the property already supports signal\\n\\n      }\\n    }\\n\\n    if (kind === 'grid') {\\n      if (!axis.grid) {\\n        return undefined;\\n      } // Remove unnecessary encode block\\n\\n\\n      if (axis.encode) {\\n        // Only need to keep encode block for grid\\n        const {\\n          grid\\n        } = axis.encode;\\n        axis.encode = { ...(grid ? {\\n            grid\\n          } : {})\\n        };\\n\\n        if (isEmpty(axis.encode)) {\\n          delete axis.encode;\\n        }\\n      }\\n\\n      return {\\n        scale,\\n        orient,\\n        ...axis,\\n        domain: false,\\n        labels: false,\\n        aria: false,\\n        // always hide grid axis\\n        // Always set min/maxExtent to 0 to ensure that `config.axis*.minExtent` and `config.axis*.maxExtent`\\n        // would not affect gridAxis\\n        maxExtent: 0,\\n        minExtent: 0,\\n        ticks: false,\\n        zindex: getFirstDefined(zindex, 0) // put grid behind marks by default\\n\\n      };\\n    } else {\\n      // kind === 'main'\\n      if (!opt.header && axisCmpt.mainExtracted) {\\n        // if mainExtracted has been extracted to a separate facet\\n        return undefined;\\n      }\\n\\n      if (labelExpr !== undefined) {\\n        var _axis$encode2, _axis$encode2$labels;\\n\\n        let expr = labelExpr;\\n\\n        if (((_axis$encode2 = axis.encode) === null || _axis$encode2 === void 0 ? void 0 : (_axis$encode2$labels = _axis$encode2.labels) === null || _axis$encode2$labels === void 0 ? void 0 : _axis$encode2$labels.update) && isSignalRef(axis.encode.labels.update.text)) {\\n          expr = replaceAll(labelExpr, 'datum.label', axis.encode.labels.update.text.signal);\\n        }\\n\\n        setAxisEncode(axis, 'labels', 'text', {\\n          signal: expr\\n        });\\n      }\\n\\n      if (axis.labelAlign === null) {\\n        delete axis.labelAlign;\\n      } // Remove unnecessary encode block\\n\\n\\n      if (axis.encode) {\\n        for (const part of AXIS_PARTS) {\\n          if (!axisCmpt.hasAxisPart(part)) {\\n            delete axis.encode[part];\\n          }\\n        }\\n\\n        if (isEmpty(axis.encode)) {\\n          delete axis.encode;\\n        }\\n      }\\n\\n      const titleString = assembleTitle(title, config);\\n      return {\\n        scale,\\n        orient,\\n        grid: false,\\n        ...(titleString ? {\\n          title: titleString\\n        } : {}),\\n        ...axis,\\n        ...(config.aria === false ? {\\n          aria: false\\n        } : {}),\\n        zindex: getFirstDefined(zindex, 0) // put axis line above marks by default\\n\\n      };\\n    }\\n  }\\n  /**\\n   * Add axis signals so grid line works correctly\\n   * (Fix https://github.com/vega/vega-lite/issues/4226)\\n   */\\n\\n  function assembleAxisSignals(model) {\\n    const {\\n      axes\\n    } = model.component;\\n    const signals = [];\\n\\n    for (const channel of POSITION_SCALE_CHANNELS) {\\n      if (axes[channel]) {\\n        for (const axis of axes[channel]) {\\n          if (!axis.get('disable') && !axis.get('gridScale')) {\\n            // If there is x-axis but no y-scale for gridScale, need to set height/width so x-axis can draw the grid with the right height. Same for y-axis and width.\\n            const sizeType = channel === 'x' ? 'height' : 'width';\\n            const update = model.getSizeSignalRef(sizeType).signal;\\n\\n            if (sizeType !== update) {\\n              signals.push({\\n                name: sizeType,\\n                update: update\\n              });\\n            }\\n          }\\n        }\\n      }\\n    }\\n\\n    return signals;\\n  }\\n  function assembleAxes(axisComponents, config) {\\n    const {\\n      x = [],\\n      y = []\\n    } = axisComponents;\\n    return [...x.map(a => assembleAxis(a, 'grid', config)), ...y.map(a => assembleAxis(a, 'grid', config)), ...x.map(a => assembleAxis(a, 'main', config)), ...y.map(a => assembleAxis(a, 'main', config))].filter(a => a); // filter undefined\\n  }\\n\\n  function getAxisConfigFromConfigTypes(configTypes, config, channel, orient) {\\n    // TODO: add special casing to add conditional value based on orient signal\\n    return Object.assign.apply(null, [{}, ...configTypes.map(configType => {\\n      if (configType === 'axisOrient') {\\n        const orient1 = channel === 'x' ? 'bottom' : 'left';\\n        const orientConfig1 = config[channel === 'x' ? 'axisBottom' : 'axisLeft'] || {};\\n        const orientConfig2 = config[channel === 'x' ? 'axisTop' : 'axisRight'] || {};\\n        const props = new Set([...keys(orientConfig1), ...keys(orientConfig2)]);\\n        const conditionalOrientAxisConfig = {};\\n\\n        for (const prop of props.values()) {\\n          conditionalOrientAxisConfig[prop] = {\\n            // orient is surely signal in this case\\n            signal: \\\"\\\".concat(orient['signal'], \\\" === \\\\\\\"\\\").concat(orient1, \\\"\\\\\\\" ? \\\").concat(signalOrStringValue(orientConfig1[prop]), \\\" : \\\").concat(signalOrStringValue(orientConfig2[prop]))\\n          };\\n        }\\n\\n        return conditionalOrientAxisConfig;\\n      }\\n\\n      return config[configType];\\n    })]);\\n  }\\n\\n  function getAxisConfigs(channel, scaleType, orient, config) {\\n    const typeBasedConfigTypes = scaleType === 'band' ? ['axisDiscrete', 'axisBand'] : scaleType === 'point' ? ['axisDiscrete', 'axisPoint'] : isQuantitative(scaleType) ? ['axisQuantitative'] : scaleType === 'time' || scaleType === 'utc' ? ['axisTemporal'] : [];\\n    const axisChannel = channel === 'x' ? 'axisX' : 'axisY';\\n    const axisOrient = isSignalRef(orient) ? 'axisOrient' : 'axis' + titleCase(orient); // axisTop, axisBottom, ...\\n\\n    const vlOnlyConfigTypes = [// technically Vega does have axisBand, but if we make another separation here,\\n    // it will further introduce complexity in the code\\n    ...typeBasedConfigTypes, ...typeBasedConfigTypes.map(c => axisChannel + c.substr(4))];\\n    const vgConfigTypes = ['axis', axisOrient, axisChannel];\\n    return {\\n      vlOnlyAxisConfig: getAxisConfigFromConfigTypes(vlOnlyConfigTypes, config, channel, orient),\\n      vgAxisConfig: getAxisConfigFromConfigTypes(vgConfigTypes, config, channel, orient),\\n      axisConfigStyle: getAxisConfigStyle([...vgConfigTypes, ...vlOnlyConfigTypes], config)\\n    };\\n  }\\n  function getAxisConfigStyle(axisConfigTypes, config) {\\n    const toMerge = [{}];\\n\\n    for (const configType of axisConfigTypes) {\\n      var _config$configType;\\n\\n      // TODO: add special casing to add conditional value based on orient signal\\n      let style = (_config$configType = config[configType]) === null || _config$configType === void 0 ? void 0 : _config$configType.style;\\n\\n      if (style) {\\n        style = array(style);\\n\\n        for (const s of style) {\\n          toMerge.push(config.style[s]);\\n        }\\n      }\\n    }\\n\\n    return Object.assign.apply(null, toMerge);\\n  }\\n  function getAxisConfig(property, styleConfigIndex, style, axisConfigs = {}) {\\n    const styleConfig = getStyleConfig(property, style, styleConfigIndex);\\n\\n    if (styleConfig !== undefined) {\\n      return {\\n        configFrom: 'style',\\n        configValue: styleConfig\\n      };\\n    }\\n\\n    for (const configFrom of ['vlOnlyAxisConfig', 'vgAxisConfig', 'axisConfigStyle']) {\\n      var _axisConfigs$configFr;\\n\\n      if (((_axisConfigs$configFr = axisConfigs[configFrom]) === null || _axisConfigs$configFr === void 0 ? void 0 : _axisConfigs$configFr[property]) !== undefined) {\\n        return {\\n          configFrom,\\n          configValue: axisConfigs[configFrom][property]\\n        };\\n      }\\n    }\\n\\n    return {};\\n  }\\n\\n  const axisRules = {\\n    scale: ({\\n      model,\\n      channel\\n    }) => model.scaleName(channel),\\n    format: ({\\n      fieldOrDatumDef,\\n      config,\\n      axis\\n    }) => {\\n      const {\\n        format,\\n        formatType\\n      } = axis;\\n      return guideFormat(fieldOrDatumDef, fieldOrDatumDef.type, format, formatType, config, true);\\n    },\\n    formatType: ({\\n      axis,\\n      fieldOrDatumDef,\\n      scaleType\\n    }) => {\\n      const {\\n        formatType\\n      } = axis;\\n      return guideFormatType(formatType, fieldOrDatumDef, scaleType);\\n    },\\n    grid: ({\\n      fieldOrDatumDef,\\n      axis,\\n      scaleType\\n    }) => {\\n      if (isFieldDef(fieldOrDatumDef) && isBinned(fieldOrDatumDef.bin)) {\\n        return false;\\n      } else {\\n        var _axis$grid;\\n\\n        return (_axis$grid = axis.grid) !== null && _axis$grid !== void 0 ? _axis$grid : defaultGrid(scaleType, fieldOrDatumDef);\\n      }\\n    },\\n    gridScale: ({\\n      model,\\n      channel\\n    }) => gridScale(model, channel),\\n    labelAlign: ({\\n      axis,\\n      labelAngle,\\n      orient,\\n      channel\\n    }) => axis.labelAlign || defaultLabelAlign(labelAngle, orient, channel),\\n    labelAngle: ({\\n      labelAngle\\n    }) => labelAngle,\\n    // we already calculate this in parse\\n    labelBaseline: ({\\n      axis,\\n      labelAngle,\\n      orient,\\n      channel\\n    }) => axis.labelBaseline || defaultLabelBaseline(labelAngle, orient, channel),\\n    labelFlush: ({\\n      axis,\\n      fieldOrDatumDef,\\n      channel\\n    }) => {\\n      var _axis$labelFlush;\\n\\n      return (_axis$labelFlush = axis.labelFlush) !== null && _axis$labelFlush !== void 0 ? _axis$labelFlush : defaultLabelFlush(fieldOrDatumDef.type, channel);\\n    },\\n    labelOverlap: ({\\n      axis,\\n      fieldOrDatumDef,\\n      scaleType\\n    }) => {\\n      var _axis$labelOverlap;\\n\\n      return (_axis$labelOverlap = axis.labelOverlap) !== null && _axis$labelOverlap !== void 0 ? _axis$labelOverlap : defaultLabelOverlap(fieldOrDatumDef.type, scaleType, isFieldDef(fieldOrDatumDef) && !!fieldOrDatumDef.timeUnit, isFieldDef(fieldOrDatumDef) ? fieldOrDatumDef.sort : undefined);\\n    },\\n    // we already calculate orient in parse\\n    orient: ({\\n      orient\\n    }) => orient,\\n    // Need to cast until Vega supports signal\\n    tickCount: ({\\n      channel,\\n      model,\\n      axis,\\n      fieldOrDatumDef,\\n      scaleType\\n    }) => {\\n      var _axis$tickCount;\\n\\n      const sizeType = channel === 'x' ? 'width' : channel === 'y' ? 'height' : undefined;\\n      const size = sizeType ? model.getSizeSignalRef(sizeType) : undefined;\\n      return (_axis$tickCount = axis.tickCount) !== null && _axis$tickCount !== void 0 ? _axis$tickCount : defaultTickCount({\\n        fieldOrDatumDef,\\n        scaleType,\\n        size,\\n        values: axis.values\\n      });\\n    },\\n    title: ({\\n      axis,\\n      model,\\n      channel\\n    }) => {\\n      if (axis.title !== undefined) {\\n        return axis.title;\\n      }\\n\\n      const fieldDefTitle = getFieldDefTitle(model, channel);\\n\\n      if (fieldDefTitle !== undefined) {\\n        return fieldDefTitle;\\n      }\\n\\n      const fieldDef = model.typedFieldDef(channel);\\n      const channel2 = channel === 'x' ? 'x2' : 'y2';\\n      const fieldDef2 = model.fieldDef(channel2); // If title not specified, store base parts of fieldDef (and fieldDef2 if exists)\\n\\n      return mergeTitleFieldDefs(fieldDef ? [toFieldDefBase(fieldDef)] : [], isFieldDef(fieldDef2) ? [toFieldDefBase(fieldDef2)] : []);\\n    },\\n    values: ({\\n      axis,\\n      fieldOrDatumDef\\n    }) => values(axis, fieldOrDatumDef),\\n    zindex: ({\\n      axis,\\n      fieldOrDatumDef,\\n      mark\\n    }) => {\\n      var _axis$zindex;\\n\\n      return (_axis$zindex = axis.zindex) !== null && _axis$zindex !== void 0 ? _axis$zindex : defaultZindex(mark, fieldOrDatumDef);\\n    }\\n  }; // TODO: we need to refactor this method after we take care of config refactoring\\n\\n  /**\\n   * Default rules for whether to show a grid should be shown for a channel.\\n   * If `grid` is unspecified, the default value is `true` for ordinal scales that are not binned\\n   */\\n\\n  function defaultGrid(scaleType, fieldDef) {\\n    return !hasDiscreteDomain(scaleType) && isFieldDef(fieldDef) && !isBinning(fieldDef === null || fieldDef === void 0 ? void 0 : fieldDef.bin);\\n  }\\n  function gridScale(model, channel) {\\n    const gridChannel = channel === 'x' ? 'y' : 'x';\\n\\n    if (model.getScaleComponent(gridChannel)) {\\n      return model.scaleName(gridChannel);\\n    }\\n\\n    return undefined;\\n  }\\n  function getLabelAngle(fieldOrDatumDef, axis, channel, styleConfig, axisConfigs) {\\n    const labelAngle = axis === null || axis === void 0 ? void 0 : axis.labelAngle; // try axis value\\n\\n    if (labelAngle !== undefined) {\\n      return isSignalRef(labelAngle) ? labelAngle : normalizeAngle(labelAngle);\\n    } else {\\n      // try axis config value\\n      const {\\n        configValue: angle\\n      } = getAxisConfig('labelAngle', styleConfig, axis === null || axis === void 0 ? void 0 : axis.style, axisConfigs);\\n\\n      if (angle !== undefined) {\\n        return normalizeAngle(angle);\\n      } else {\\n        // get default value\\n        if (channel === X && contains([NOMINAL, ORDINAL], fieldOrDatumDef.type) && !(isFieldDef(fieldOrDatumDef) && fieldOrDatumDef.timeUnit)) {\\n          return 270;\\n        } // no default\\n\\n\\n        return undefined;\\n      }\\n    }\\n  }\\n  function normalizeAngleExpr(angle) {\\n    return \\\"(((\\\".concat(angle.signal, \\\" % 360) + 360) % 360)\\\");\\n  }\\n  function defaultLabelBaseline(angle, orient, channel, alwaysIncludeMiddle) {\\n    if (angle !== undefined) {\\n      if (channel === 'x') {\\n        if (isSignalRef(angle)) {\\n          const a = normalizeAngleExpr(angle);\\n          const orientIsTop = isSignalRef(orient) ? \\\"(\\\".concat(orient.signal, \\\" === \\\\\\\"top\\\\\\\")\\\") : orient === 'top';\\n          return {\\n            signal: \\\"(45 < \\\".concat(a, \\\" && \\\").concat(a, \\\" < 135) || (225 < \\\").concat(a, \\\" && \\\").concat(a, \\\" < 315) ? \\\\\\\"middle\\\\\\\" :\\\") + \\\"(\\\".concat(a, \\\" <= 45 || 315 <= \\\").concat(a, \\\") === \\\").concat(orientIsTop, \\\" ? \\\\\\\"bottom\\\\\\\" : \\\\\\\"top\\\\\\\"\\\")\\n          };\\n        }\\n\\n        if (45 < angle && angle < 135 || 225 < angle && angle < 315) {\\n          return 'middle';\\n        }\\n\\n        if (isSignalRef(orient)) {\\n          const op = angle <= 45 || 315 <= angle ? '===' : '!==';\\n          return {\\n            signal: \\\"\\\".concat(orient.signal, \\\" \\\").concat(op, \\\" \\\\\\\"top\\\\\\\" ? \\\\\\\"bottom\\\\\\\" : \\\\\\\"top\\\\\\\"\\\")\\n          };\\n        }\\n\\n        return (angle <= 45 || 315 <= angle) === (orient === 'top') ? 'bottom' : 'top';\\n      } else {\\n        if (isSignalRef(angle)) {\\n          const a = normalizeAngleExpr(angle);\\n          const orientIsLeft = isSignalRef(orient) ? \\\"(\\\".concat(orient.signal, \\\" === \\\\\\\"left\\\\\\\")\\\") : orient === 'left';\\n          const middle = alwaysIncludeMiddle ? '\\\"middle\\\"' : 'null';\\n          return {\\n            signal: \\\"\\\".concat(a, \\\" <= 45 || 315 <= \\\").concat(a, \\\" || (135 <= \\\").concat(a, \\\" && \\\").concat(a, \\\" <= 225) ? \\\").concat(middle, \\\" : (45 <= \\\").concat(a, \\\" && \\\").concat(a, \\\" <= 135) === \\\").concat(orientIsLeft, \\\" ? \\\\\\\"top\\\\\\\" : \\\\\\\"bottom\\\\\\\"\\\")\\n          };\\n        }\\n\\n        if (angle <= 45 || 315 <= angle || 135 <= angle && angle <= 225) {\\n          return alwaysIncludeMiddle ? 'middle' : null;\\n        }\\n\\n        if (isSignalRef(orient)) {\\n          const op = 45 <= angle && angle <= 135 ? '===' : '!==';\\n          return {\\n            signal: \\\"\\\".concat(orient.signal, \\\" \\\").concat(op, \\\" \\\\\\\"left\\\\\\\" ? \\\\\\\"top\\\\\\\" : \\\\\\\"bottom\\\\\\\"\\\")\\n          };\\n        }\\n\\n        return (45 <= angle && angle <= 135) === (orient === 'left') ? 'top' : 'bottom';\\n      }\\n    }\\n\\n    return undefined;\\n  }\\n  function defaultLabelAlign(angle, orient, channel) {\\n    if (angle === undefined) {\\n      return undefined;\\n    }\\n\\n    const isX = channel === 'x';\\n    const startAngle = isX ? 0 : 90;\\n    const mainOrient = isX ? 'bottom' : 'left';\\n\\n    if (isSignalRef(angle)) {\\n      const a = normalizeAngleExpr(angle);\\n      const orientIsMain = isSignalRef(orient) ? \\\"(\\\".concat(orient.signal, \\\" === \\\\\\\"\\\").concat(mainOrient, \\\"\\\\\\\")\\\") : orient === mainOrient;\\n      return {\\n        signal: \\\"(\\\".concat(startAngle ? '(' + a + ' + 90)' : a, \\\" % 180 === 0) ? \\\").concat(isX ? null : '\\\"center\\\"', \\\" :\\\") + \\\"(\\\".concat(startAngle, \\\" < \\\").concat(a, \\\" && \\\").concat(a, \\\" < \\\").concat(180 + startAngle, \\\") === \\\").concat(orientIsMain, \\\" ? \\\\\\\"left\\\\\\\" : \\\\\\\"right\\\\\\\"\\\")\\n      };\\n    }\\n\\n    if ((angle + startAngle) % 180 === 0) {\\n      // For bottom, use default label align so label flush still works\\n      return isX ? null : 'center';\\n    }\\n\\n    if (isSignalRef(orient)) {\\n      const op = startAngle < angle && angle < 180 + startAngle ? '===' : '!==';\\n      const orientIsMain = \\\"\\\".concat(orient.signal, \\\" \\\").concat(op, \\\" \\\\\\\"\\\").concat(mainOrient, \\\"\\\\\\\"\\\");\\n      return {\\n        signal: \\\"\\\".concat(orientIsMain, \\\" ? \\\\\\\"left\\\\\\\" : \\\\\\\"right\\\\\\\"\\\")\\n      };\\n    }\\n\\n    if ((startAngle < angle && angle < 180 + startAngle) === (orient === mainOrient)) {\\n      return 'left';\\n    }\\n\\n    return 'right';\\n  }\\n  function defaultLabelFlush(type, channel) {\\n    if (channel === 'x' && contains(['quantitative', 'temporal'], type)) {\\n      return true;\\n    }\\n\\n    return undefined;\\n  }\\n  function defaultLabelOverlap(type, scaleType, hasTimeUnit, sort) {\\n    // do not prevent overlap for nominal data because there is no way to infer what the missing labels are\\n    if (hasTimeUnit && !isObject(sort) || type !== 'nominal' && type !== 'ordinal') {\\n      if (scaleType === 'log' || scaleType === 'symlog') {\\n        return 'greedy';\\n      }\\n\\n      return true;\\n    }\\n\\n    return undefined;\\n  }\\n  function defaultOrient(channel) {\\n    return channel === 'x' ? 'bottom' : 'left';\\n  }\\n  function defaultTickCount({\\n    fieldOrDatumDef,\\n    scaleType,\\n    size,\\n    values: vals\\n  }) {\\n    if (!vals && !hasDiscreteDomain(scaleType) && scaleType !== 'log') {\\n      if (isFieldDef(fieldOrDatumDef)) {\\n        var _normalizeTimeUnit;\\n\\n        if (isBinning(fieldOrDatumDef.bin)) {\\n          // for binned data, we don't want more ticks than maxbins\\n          return {\\n            signal: \\\"ceil(\\\".concat(size.signal, \\\"/10)\\\")\\n          };\\n        }\\n\\n        if (fieldOrDatumDef.timeUnit && contains(['month', 'hours', 'day', 'quarter'], (_normalizeTimeUnit = normalizeTimeUnit(fieldOrDatumDef.timeUnit)) === null || _normalizeTimeUnit === void 0 ? void 0 : _normalizeTimeUnit.unit)) {\\n          return undefined;\\n        }\\n      }\\n\\n      return {\\n        signal: \\\"ceil(\\\".concat(size.signal, \\\"/40)\\\")\\n      };\\n    }\\n\\n    return undefined;\\n  }\\n  function getFieldDefTitle(model, channel) {\\n    const channel2 = channel === 'x' ? 'x2' : 'y2';\\n    const fieldDef = model.fieldDef(channel);\\n    const fieldDef2 = model.fieldDef(channel2);\\n    const title1 = fieldDef ? fieldDef.title : undefined;\\n    const title2 = fieldDef2 ? fieldDef2.title : undefined;\\n\\n    if (title1 && title2) {\\n      return mergeTitle(title1, title2);\\n    } else if (title1) {\\n      return title1;\\n    } else if (title2) {\\n      return title2;\\n    } else if (title1 !== undefined) {\\n      // falsy value to disable config\\n      return title1;\\n    } else if (title2 !== undefined) {\\n      // falsy value to disable config\\n      return title2;\\n    }\\n\\n    return undefined;\\n  }\\n  function values(axis, fieldOrDatumDef) {\\n    const vals = axis.values;\\n\\n    if (isArray(vals)) {\\n      return valueArray(fieldOrDatumDef, vals);\\n    } else if (isSignalRef(vals)) {\\n      return vals;\\n    }\\n\\n    return undefined;\\n  }\\n  function defaultZindex(mark, fieldDef) {\\n    if (mark === 'rect' && isDiscrete(fieldDef)) {\\n      return 1;\\n    }\\n\\n    return 0;\\n  }\\n\\n  class CalculateNode extends DataFlowNode {\\n    clone() {\\n      return new CalculateNode(null, duplicate(this.transform));\\n    }\\n\\n    constructor(parent, transform) {\\n      super(parent);\\n      this.transform = transform;\\n\\n      _defineProperty(this, \\\"_dependentFields\\\", void 0);\\n\\n      this._dependentFields = getDependentFields(this.transform.calculate);\\n    }\\n\\n    static parseAllForSortIndex(parent, model) {\\n      // get all the encoding with sort fields from model\\n      model.forEachFieldDef((fieldDef, channel) => {\\n        if (!isScaleFieldDef(fieldDef)) {\\n          return;\\n        }\\n\\n        if (isSortArray(fieldDef.sort)) {\\n          const {\\n            field,\\n            timeUnit\\n          } = fieldDef;\\n          const sort = fieldDef.sort; // generate `datum[\\\"a\\\"] === val0 ? 0 : datum[\\\"a\\\"] === val1 ? 1 : ... : n` via FieldEqualPredicate\\n\\n          const calculate = sort.map((sortValue, i) => {\\n            return \\\"\\\".concat(fieldFilterExpression({\\n              field,\\n              timeUnit,\\n              equal: sortValue\\n            }), \\\" ? \\\").concat(i, \\\" : \\\");\\n          }).join('') + sort.length;\\n          parent = new CalculateNode(parent, {\\n            calculate,\\n            as: sortArrayIndexField(fieldDef, channel, {\\n              forAs: true\\n            })\\n          });\\n        }\\n      });\\n      return parent;\\n    }\\n\\n    producedFields() {\\n      return new Set([this.transform.as]);\\n    }\\n\\n    dependentFields() {\\n      return this._dependentFields;\\n    }\\n\\n    assemble() {\\n      return {\\n        type: 'formula',\\n        expr: this.transform.calculate,\\n        as: this.transform.as\\n      };\\n    }\\n\\n    hash() {\\n      return \\\"Calculate \\\".concat(hash(this.transform));\\n    }\\n\\n  }\\n  function sortArrayIndexField(fieldDef, channel, opt) {\\n    return vgField(fieldDef, {\\n      prefix: channel,\\n      suffix: 'sort_index',\\n      ...(opt !== null && opt !== void 0 ? opt : {})\\n    });\\n  }\\n\\n  /**\\n   * Get header channel, which can be different from facet channel when orient is specified or when the facet channel is facet.\\n   */\\n  function getHeaderChannel(channel, orient) {\\n    if (contains(['top', 'bottom'], orient)) {\\n      return 'column';\\n    } else if (contains(['left', 'right'], orient)) {\\n      return 'row';\\n    }\\n\\n    return channel === 'row' ? 'row' : 'column';\\n  }\\n  function getHeaderProperty(prop, header, config, channel) {\\n    const headerSpecificConfig = channel === 'row' ? config.headerRow : channel === 'column' ? config.headerColumn : config.headerFacet;\\n    return getFirstDefined((header || {})[prop], headerSpecificConfig[prop], config.header[prop]);\\n  }\\n  function getHeaderProperties(properties, header, config, channel) {\\n    const props = {};\\n\\n    for (const prop of properties) {\\n      const value = getHeaderProperty(prop, header || {}, config, channel);\\n\\n      if (value !== undefined) {\\n        props[prop] = value;\\n      }\\n    }\\n\\n    return props;\\n  }\\n\\n  /**\\n   * Utility for generating row / column headers\\n   */\\n  const HEADER_CHANNELS = ['row', 'column'];\\n  const HEADER_TYPES = ['header', 'footer'];\\n\\n  /**\\n   * Utility for generating row / column headers\\n   */\\n\\n  function assembleTitleGroup(model, channel) {\\n    const title = model.component.layoutHeaders[channel].title;\\n    const config = model.config ? model.config : undefined;\\n    const facetFieldDef = model.component.layoutHeaders[channel].facetFieldDef ? model.component.layoutHeaders[channel].facetFieldDef : undefined;\\n    const {\\n      titleAnchor,\\n      titleAngle: ta,\\n      titleOrient\\n    } = getHeaderProperties(['titleAnchor', 'titleAngle', 'titleOrient'], facetFieldDef.header, config, channel);\\n    const headerChannel = getHeaderChannel(channel, titleOrient);\\n    const titleAngle = normalizeAngle(ta);\\n    return {\\n      name: \\\"\\\".concat(channel, \\\"-title\\\"),\\n      type: 'group',\\n      role: \\\"\\\".concat(headerChannel, \\\"-title\\\"),\\n      title: {\\n        text: title,\\n        ...(channel === 'row' ? {\\n          orient: 'left'\\n        } : {}),\\n        style: 'guide-title',\\n        ...defaultHeaderGuideBaseline(titleAngle, headerChannel),\\n        ...defaultHeaderGuideAlign(headerChannel, titleAngle, titleAnchor),\\n        ...assembleHeaderProperties(config, facetFieldDef, channel, HEADER_TITLE_PROPERTIES, HEADER_TITLE_PROPERTIES_MAP)\\n      }\\n    };\\n  }\\n  function defaultHeaderGuideAlign(headerChannel, angle, anchor = 'middle') {\\n    switch (anchor) {\\n      case 'start':\\n        return {\\n          align: 'left'\\n        };\\n\\n      case 'end':\\n        return {\\n          align: 'right'\\n        };\\n    }\\n\\n    const align = defaultLabelAlign(angle, headerChannel === 'row' ? 'left' : 'top', headerChannel === 'row' ? 'y' : 'x');\\n    return align ? {\\n      align\\n    } : {};\\n  }\\n  function defaultHeaderGuideBaseline(angle, channel) {\\n    const baseline = defaultLabelBaseline(angle, channel === 'row' ? 'left' : 'top', channel === 'row' ? 'y' : 'x', true);\\n    return baseline ? {\\n      baseline\\n    } : {};\\n  }\\n  function assembleHeaderGroups(model, channel) {\\n    const layoutHeader = model.component.layoutHeaders[channel];\\n    const groups = [];\\n\\n    for (const headerType of HEADER_TYPES) {\\n      if (layoutHeader[headerType]) {\\n        for (const headerComponent of layoutHeader[headerType]) {\\n          const group = assembleHeaderGroup(model, channel, headerType, layoutHeader, headerComponent);\\n\\n          if (group != null) {\\n            groups.push(group);\\n          }\\n        }\\n      }\\n    }\\n\\n    return groups;\\n  }\\n\\n  function getSort(facetFieldDef, channel) {\\n    const {\\n      sort\\n    } = facetFieldDef;\\n\\n    if (isSortField(sort)) {\\n      var _sort$order;\\n\\n      return {\\n        field: vgField(sort, {\\n          expr: 'datum'\\n        }),\\n        order: (_sort$order = sort.order) !== null && _sort$order !== void 0 ? _sort$order : 'ascending'\\n      };\\n    } else if (isArray(sort)) {\\n      return {\\n        field: sortArrayIndexField(facetFieldDef, channel, {\\n          expr: 'datum'\\n        }),\\n        order: 'ascending'\\n      };\\n    } else {\\n      return {\\n        field: vgField(facetFieldDef, {\\n          expr: 'datum'\\n        }),\\n        order: sort !== null && sort !== void 0 ? sort : 'ascending'\\n      };\\n    }\\n  }\\n\\n  function assembleLabelTitle(facetFieldDef, channel, config) {\\n    const {\\n      format,\\n      formatType,\\n      labelAngle,\\n      labelAnchor,\\n      labelOrient,\\n      labelExpr\\n    } = getHeaderProperties(['format', 'formatType', 'labelAngle', 'labelAnchor', 'labelOrient', 'labelExpr'], facetFieldDef.header, config, channel);\\n    const titleTextExpr = formatSignalRef({\\n      fieldOrDatumDef: facetFieldDef,\\n      format,\\n      formatType,\\n      expr: 'parent',\\n      config\\n    }).signal;\\n    const headerChannel = getHeaderChannel(channel, labelOrient);\\n    return {\\n      text: {\\n        signal: labelExpr ? replaceAll(replaceAll(labelExpr, 'datum.label', titleTextExpr), 'datum.value', vgField(facetFieldDef, {\\n          expr: 'parent'\\n        })) : titleTextExpr\\n      },\\n      ...(channel === 'row' ? {\\n        orient: 'left'\\n      } : {}),\\n      style: 'guide-label',\\n      frame: 'group',\\n      ...defaultHeaderGuideBaseline(labelAngle, headerChannel),\\n      ...defaultHeaderGuideAlign(headerChannel, labelAngle, labelAnchor),\\n      ...assembleHeaderProperties(config, facetFieldDef, channel, HEADER_LABEL_PROPERTIES, HEADER_LABEL_PROPERTIES_MAP)\\n    };\\n  }\\n  function assembleHeaderGroup(model, channel, headerType, layoutHeader, headerComponent) {\\n    if (headerComponent) {\\n      let title = null;\\n      const {\\n        facetFieldDef\\n      } = layoutHeader;\\n      const config = model.config ? model.config : undefined;\\n\\n      if (facetFieldDef && headerComponent.labels) {\\n        const {\\n          labelOrient\\n        } = getHeaderProperties(['labelOrient'], facetFieldDef.header, config, channel); // Include label title in the header if orient aligns with the channel\\n\\n        if (channel === 'row' && !contains(['top', 'bottom'], labelOrient) || channel === 'column' && !contains(['left', 'right'], labelOrient)) {\\n          title = assembleLabelTitle(facetFieldDef, channel, config);\\n        }\\n      }\\n\\n      const isFacetWithoutRowCol = isFacetModel(model) && !isFacetMapping(model.facet);\\n      const axes = headerComponent.axes;\\n      const hasAxes = (axes === null || axes === void 0 ? void 0 : axes.length) > 0;\\n\\n      if (title || hasAxes) {\\n        const sizeChannel = channel === 'row' ? 'height' : 'width';\\n        return {\\n          name: model.getName(\\\"\\\".concat(channel, \\\"_\\\").concat(headerType)),\\n          type: 'group',\\n          role: \\\"\\\".concat(channel, \\\"-\\\").concat(headerType),\\n          ...(layoutHeader.facetFieldDef ? {\\n            from: {\\n              data: model.getName(channel + '_domain')\\n            },\\n            sort: getSort(facetFieldDef, channel)\\n          } : {}),\\n          ...(hasAxes && isFacetWithoutRowCol ? {\\n            from: {\\n              data: model.getName(\\\"facet_domain_\\\".concat(channel))\\n            }\\n          } : {}),\\n          ...(title ? {\\n            title\\n          } : {}),\\n          ...(headerComponent.sizeSignal ? {\\n            encode: {\\n              update: {\\n                [sizeChannel]: headerComponent.sizeSignal\\n              }\\n            }\\n          } : {}),\\n          ...(hasAxes ? {\\n            axes\\n          } : {})\\n        };\\n      }\\n    }\\n\\n    return null;\\n  }\\n  const LAYOUT_TITLE_BAND = {\\n    column: {\\n      start: 0,\\n      end: 1\\n    },\\n    row: {\\n      start: 1,\\n      end: 0\\n    }\\n  };\\n  function getLayoutTitleBand(titleAnchor, headerChannel) {\\n    return LAYOUT_TITLE_BAND[headerChannel][titleAnchor];\\n  }\\n  function assembleLayoutTitleBand(headerComponentIndex, config) {\\n    const titleBand = {};\\n\\n    for (const channel of FACET_CHANNELS) {\\n      const headerComponent = headerComponentIndex[channel];\\n\\n      if (headerComponent === null || headerComponent === void 0 ? void 0 : headerComponent.facetFieldDef) {\\n        const {\\n          titleAnchor,\\n          titleOrient\\n        } = getHeaderProperties(['titleAnchor', 'titleOrient'], headerComponent.facetFieldDef.header, config, channel);\\n        const headerChannel = getHeaderChannel(channel, titleOrient);\\n        const band = getLayoutTitleBand(titleAnchor, headerChannel);\\n\\n        if (band !== undefined) {\\n          titleBand[headerChannel] = band;\\n        }\\n      }\\n    }\\n\\n    return isEmpty(titleBand) ? undefined : titleBand;\\n  }\\n  function assembleHeaderProperties(config, facetFieldDef, channel, properties, propertiesMap) {\\n    const props = {};\\n\\n    for (const prop of properties) {\\n      if (!propertiesMap[prop]) {\\n        continue;\\n      }\\n\\n      const value = getHeaderProperty(prop, facetFieldDef === null || facetFieldDef === void 0 ? void 0 : facetFieldDef.header, config, channel);\\n\\n      if (value !== undefined) {\\n        props[propertiesMap[prop]] = value;\\n      }\\n    }\\n\\n    return props;\\n  }\\n\\n  function assembleLayoutSignals(model) {\\n    return [...sizeSignals(model, 'width'), ...sizeSignals(model, 'height'), ...sizeSignals(model, 'childWidth'), ...sizeSignals(model, 'childHeight')];\\n  }\\n  function sizeSignals(model, sizeType) {\\n    const channel = sizeType === 'width' ? 'x' : 'y';\\n    const size = model.component.layoutSize.get(sizeType);\\n\\n    if (!size || size === 'merged') {\\n      return [];\\n    } // Read size signal name from name map, just in case it is the top-level size signal that got renamed.\\n\\n\\n    const name = model.getSizeSignalRef(sizeType).signal;\\n\\n    if (size === 'step') {\\n      const scaleComponent = model.getScaleComponent(channel);\\n\\n      if (scaleComponent) {\\n        const type = scaleComponent.get('type');\\n        const range = scaleComponent.get('range');\\n\\n        if (hasDiscreteDomain(type) && isVgRangeStep(range)) {\\n          const scaleName = model.scaleName(channel);\\n\\n          if (isFacetModel(model.parent)) {\\n            // If parent is facet and this is an independent scale, return only signal signal\\n            // as the width/height will be calculated using the cardinality from\\n            // facet's aggregate rather than reading from scale domain\\n            const parentResolve = model.parent.component.resolve;\\n\\n            if (parentResolve.scale[channel] === 'independent') {\\n              return [stepSignal(scaleName, range)];\\n            }\\n          }\\n\\n          return [stepSignal(scaleName, range), {\\n            name,\\n            update: sizeExpr(scaleName, scaleComponent, \\\"domain('\\\".concat(scaleName, \\\"').length\\\"))\\n          }];\\n        }\\n      }\\n      /* istanbul ignore next: Condition should not happen -- only for warning in development. */\\n\\n\\n      throw new Error('layout size is step although width/height is not step.');\\n    } else if (size == 'container') {\\n      const isWidth = name.endsWith('width');\\n      const expr = isWidth ? 'containerSize()[0]' : 'containerSize()[1]';\\n      const defaultValue = getViewConfigContinuousSize(model.config.view, isWidth ? 'width' : 'height');\\n      const safeExpr = \\\"isFinite(\\\".concat(expr, \\\") ? \\\").concat(expr, \\\" : \\\").concat(defaultValue);\\n      return [{\\n        name,\\n        init: safeExpr,\\n        on: [{\\n          update: safeExpr,\\n          events: 'window:resize'\\n        }]\\n      }];\\n    } else {\\n      return [{\\n        name,\\n        value: size\\n      }];\\n    }\\n  }\\n\\n  function stepSignal(scaleName, range) {\\n    return {\\n      name: scaleName + '_step',\\n      value: range.step\\n    };\\n  }\\n\\n  function sizeExpr(scaleName, scaleComponent, cardinality) {\\n    const type = scaleComponent.get('type');\\n    const padding = scaleComponent.get('padding');\\n    const paddingOuter = getFirstDefined(scaleComponent.get('paddingOuter'), padding);\\n    let paddingInner = scaleComponent.get('paddingInner');\\n    paddingInner = type === 'band' ? // only band has real paddingInner\\n    paddingInner !== undefined ? paddingInner : padding : // For point, as calculated in https://github.com/vega/vega-scale/blob/master/src/band.js#L128,\\n    // it's equivalent to have paddingInner = 1 since there is only n-1 steps between n points.\\n    1;\\n    return \\\"bandspace(\\\".concat(cardinality, \\\", \\\").concat(signalOrStringValue(paddingInner), \\\", \\\").concat(signalOrStringValue(paddingOuter), \\\") * \\\").concat(scaleName, \\\"_step\\\");\\n  }\\n\\n  function getSizeTypeFromLayoutSizeType(layoutSizeType) {\\n    return layoutSizeType === 'childWidth' ? 'width' : layoutSizeType === 'childHeight' ? 'height' : layoutSizeType;\\n  }\\n\\n  function guideEncodeEntry(encoding, model) {\\n    return keys(encoding).reduce((encode, channel) => {\\n      const valueDef = encoding[channel];\\n      return { ...encode,\\n        ...wrapCondition(model, valueDef, channel, def => signalOrValueRef(def.value))\\n      };\\n    }, {});\\n  }\\n\\n  function defaultScaleResolve(channel, model) {\\n    if (isLayerModel(model) || isFacetModel(model)) {\\n      return 'shared';\\n    } else if (isConcatModel(model)) {\\n      return isXorY(channel) ? 'independent' : 'shared';\\n    }\\n    /* istanbul ignore next: should never reach here. */\\n\\n\\n    throw new Error('invalid model type for resolve');\\n  }\\n  function parseGuideResolve(resolve, channel) {\\n    const channelScaleResolve = resolve.scale[channel];\\n    const guide = isXorY(channel) ? 'axis' : 'legend';\\n\\n    if (channelScaleResolve === 'independent') {\\n      if (resolve[guide][channel] === 'shared') {\\n        warn(independentScaleMeansIndependentGuide(channel));\\n      }\\n\\n      return 'independent';\\n    }\\n\\n    return resolve[guide][channel] || 'shared';\\n  }\\n\\n  const LEGEND_COMPONENT_PROPERTY_INDEX = { ...COMMON_LEGEND_PROPERTY_INDEX,\\n    disable: 1,\\n    labelExpr: 1,\\n    selections: 1,\\n    // channel scales\\n    opacity: 1,\\n    shape: 1,\\n    stroke: 1,\\n    fill: 1,\\n    size: 1,\\n    strokeWidth: 1,\\n    strokeDash: 1,\\n    // encode\\n    encode: 1\\n  };\\n  const LEGEND_COMPONENT_PROPERTIES = keys(LEGEND_COMPONENT_PROPERTY_INDEX);\\n  class LegendComponent extends Split {}\\n\\n  const legendEncodeRules = {\\n    symbols,\\n    gradient,\\n    labels,\\n    entries: entries$1\\n  };\\n  function symbols(symbolsSpec, {\\n    fieldOrDatumDef,\\n    model,\\n    channel,\\n    legendCmpt,\\n    legendType\\n  }) {\\n    var _legendCmpt$get, _legendCmpt$get2, _legendCmpt$get3, _getMaxValue;\\n\\n    if (legendType !== 'symbol') {\\n      return undefined;\\n    }\\n\\n    const {\\n      markDef,\\n      encoding,\\n      config,\\n      mark\\n    } = model;\\n    const filled = markDef.filled && mark !== 'trail';\\n    let out = { ...applyMarkConfig({}, model, FILL_STROKE_CONFIG),\\n      ...color(model, {\\n        filled\\n      })\\n    }; // FIXME: remove this when VgEncodeEntry is compatible with SymbolEncodeEntry\\n\\n    const symbolOpacity = (_legendCmpt$get = legendCmpt.get('symbolOpacity')) !== null && _legendCmpt$get !== void 0 ? _legendCmpt$get : config.legend.symbolOpacity;\\n    const symbolFillColor = (_legendCmpt$get2 = legendCmpt.get('symbolFillColor')) !== null && _legendCmpt$get2 !== void 0 ? _legendCmpt$get2 : config.legend.symbolFillColor;\\n    const symbolStrokeColor = (_legendCmpt$get3 = legendCmpt.get('symbolStrokeColor')) !== null && _legendCmpt$get3 !== void 0 ? _legendCmpt$get3 : config.legend.symbolStrokeColor;\\n    const opacity = symbolOpacity === undefined ? (_getMaxValue = getMaxValue(encoding.opacity)) !== null && _getMaxValue !== void 0 ? _getMaxValue : markDef.opacity : undefined;\\n\\n    if (out.fill) {\\n      // for fill legend, we don't want any fill in symbol\\n      if (channel === 'fill' || filled && channel === COLOR) {\\n        delete out.fill;\\n      } else {\\n        if (out.fill['field']) {\\n          // For others, set fill to some opaque value (or nothing if a color is already set)\\n          if (symbolFillColor) {\\n            delete out.fill;\\n          } else {\\n            var _config$legend$symbol;\\n\\n            out.fill = signalOrValueRef((_config$legend$symbol = config.legend.symbolBaseFillColor) !== null && _config$legend$symbol !== void 0 ? _config$legend$symbol : 'black');\\n            out.fillOpacity = signalOrValueRef(opacity !== null && opacity !== void 0 ? opacity : 1);\\n          }\\n        } else if (isArray(out.fill)) {\\n          var _ref, _getFirstConditionVal, _encoding$fill;\\n\\n          const fill = (_ref = (_getFirstConditionVal = getFirstConditionValue((_encoding$fill = encoding.fill) !== null && _encoding$fill !== void 0 ? _encoding$fill : encoding.color)) !== null && _getFirstConditionVal !== void 0 ? _getFirstConditionVal : markDef.fill) !== null && _ref !== void 0 ? _ref : filled && markDef.color;\\n\\n          if (fill) {\\n            out.fill = signalOrValueRef(fill);\\n          }\\n        }\\n      }\\n    }\\n\\n    if (out.stroke) {\\n      if (channel === 'stroke' || !filled && channel === COLOR) {\\n        delete out.stroke;\\n      } else {\\n        if (out.stroke['field'] || symbolStrokeColor) {\\n          // For others, remove stroke field\\n          delete out.stroke;\\n        } else if (isArray(out.stroke)) {\\n          const stroke = getFirstDefined(getFirstConditionValue(encoding.stroke || encoding.color), markDef.stroke, filled ? markDef.color : undefined);\\n\\n          if (stroke) {\\n            out.stroke = {\\n              value: stroke\\n            };\\n          }\\n        }\\n      }\\n    }\\n\\n    if (channel !== OPACITY) {\\n      const condition = isFieldDef(fieldOrDatumDef) && selectedCondition(model, legendCmpt, fieldOrDatumDef);\\n\\n      if (condition) {\\n        out.opacity = [{\\n          test: condition,\\n          ...signalOrValueRef(opacity !== null && opacity !== void 0 ? opacity : 1)\\n        }, signalOrValueRef(config.legend.unselectedOpacity)];\\n      } else if (opacity) {\\n        out.opacity = signalOrValueRef(opacity);\\n      }\\n    }\\n\\n    out = { ...out,\\n      ...symbolsSpec\\n    };\\n    return isEmpty(out) ? undefined : out;\\n  }\\n  function gradient(gradientSpec, {\\n    model,\\n    legendType,\\n    legendCmpt\\n  }) {\\n    var _legendCmpt$get4;\\n\\n    if (legendType !== 'gradient') {\\n      return undefined;\\n    }\\n\\n    const {\\n      config,\\n      markDef,\\n      encoding\\n    } = model;\\n    let out = {};\\n    const gradientOpacity = (_legendCmpt$get4 = legendCmpt.get('gradientOpacity')) !== null && _legendCmpt$get4 !== void 0 ? _legendCmpt$get4 : config.legend.gradientOpacity;\\n    const opacity = gradientOpacity === undefined ? getMaxValue(encoding.opacity) || markDef.opacity : undefined;\\n\\n    if (opacity) {\\n      // only apply opacity if it is neither zero or undefined\\n      out.opacity = signalOrValueRef(opacity);\\n    }\\n\\n    out = { ...out,\\n      ...gradientSpec\\n    };\\n    return isEmpty(out) ? undefined : out;\\n  }\\n  function labels(specifiedlabelsSpec, {\\n    fieldOrDatumDef,\\n    model,\\n    channel,\\n    legendCmpt\\n  }) {\\n    const legend = model.legend(channel) || {};\\n    const config = model.config;\\n    const condition = isFieldDef(fieldOrDatumDef) ? selectedCondition(model, legendCmpt, fieldOrDatumDef) : undefined;\\n    const opacity = condition ? [{\\n      test: condition,\\n      value: 1\\n    }, {\\n      value: config.legend.unselectedOpacity\\n    }] : undefined;\\n    const {\\n      format,\\n      formatType\\n    } = legend;\\n    const text = isCustomFormatType(formatType) ? formatCustomType({\\n      fieldOrDatumDef,\\n      field: 'datum.value',\\n      format,\\n      formatType,\\n      config\\n    }) : undefined;\\n    const labelsSpec = { ...(opacity ? {\\n        opacity\\n      } : {}),\\n      ...(text ? {\\n        text\\n      } : {}),\\n      ...specifiedlabelsSpec\\n    };\\n    return isEmpty(labelsSpec) ? undefined : labelsSpec;\\n  }\\n  function entries$1(entriesSpec, {\\n    legendCmpt\\n  }) {\\n    const selections = legendCmpt.get('selections');\\n    return (selections === null || selections === void 0 ? void 0 : selections.length) ? { ...entriesSpec,\\n      fill: {\\n        value: 'transparent'\\n      }\\n    } : entriesSpec;\\n  }\\n\\n  function getMaxValue(channelDef) {\\n    return getConditionValue(channelDef, (v, conditionalDef) => Math.max(v, conditionalDef.value));\\n  }\\n\\n  function getFirstConditionValue(channelDef) {\\n    return getConditionValue(channelDef, (v, conditionalDef) => {\\n      return getFirstDefined(v, conditionalDef.value);\\n    });\\n  }\\n\\n  function getConditionValue(channelDef, reducer) {\\n    if (hasConditionalValueDef(channelDef)) {\\n      return array(channelDef.condition).reduce(reducer, channelDef.value);\\n    } else if (isValueDef(channelDef)) {\\n      return channelDef.value;\\n    }\\n\\n    return undefined;\\n  }\\n\\n  function selectedCondition(model, legendCmpt, fieldDef) {\\n    const selections = legendCmpt.get('selections');\\n    if (!(selections === null || selections === void 0 ? void 0 : selections.length)) return undefined;\\n    const field = $(fieldDef.field);\\n    return selections.map(name => {\\n      const store = $(varName(name) + STORE);\\n      return \\\"(!length(data(\\\".concat(store, \\\")) || (\\\").concat(name, \\\"[\\\").concat(field, \\\"] && indexof(\\\").concat(name, \\\"[\\\").concat(field, \\\"], datum.value) >= 0))\\\");\\n    }).join(' || ');\\n  }\\n\\n  const legendRules = {\\n    direction: ({\\n      direction\\n    }) => direction,\\n    format: ({\\n      fieldOrDatumDef,\\n      legend,\\n      config\\n    }) => {\\n      const {\\n        format,\\n        formatType\\n      } = legend;\\n      return guideFormat(fieldOrDatumDef, fieldOrDatumDef.type, format, formatType, config, false);\\n    },\\n    formatType: ({\\n      legend,\\n      fieldOrDatumDef,\\n      scaleType\\n    }) => {\\n      const {\\n        formatType\\n      } = legend;\\n      return guideFormatType(formatType, fieldOrDatumDef, scaleType);\\n    },\\n    gradientLength: params => {\\n      var _ref, _legend$gradientLengt;\\n\\n      const {\\n        legend,\\n        legendConfig\\n      } = params;\\n      return (_ref = (_legend$gradientLengt = legend.gradientLength) !== null && _legend$gradientLengt !== void 0 ? _legend$gradientLengt : legendConfig.gradientLength) !== null && _ref !== void 0 ? _ref : defaultGradientLength(params);\\n    },\\n    labelOverlap: ({\\n      legend,\\n      legendConfig,\\n      scaleType\\n    }) => {\\n      var _ref2, _legend$labelOverlap;\\n\\n      return (_ref2 = (_legend$labelOverlap = legend.labelOverlap) !== null && _legend$labelOverlap !== void 0 ? _legend$labelOverlap : legendConfig.labelOverlap) !== null && _ref2 !== void 0 ? _ref2 : defaultLabelOverlap$1(scaleType);\\n    },\\n    symbolType: ({\\n      legend,\\n      markDef,\\n      channel,\\n      encoding\\n    }) => {\\n      var _legend$symbolType;\\n\\n      return (_legend$symbolType = legend.symbolType) !== null && _legend$symbolType !== void 0 ? _legend$symbolType : defaultSymbolType(markDef.type, channel, encoding.shape, markDef.shape);\\n    },\\n    title: ({\\n      fieldOrDatumDef,\\n      config\\n    }) => title(fieldOrDatumDef, config, {\\n      allowDisabling: true\\n    }),\\n    type: ({\\n      legendType,\\n      scaleType,\\n      channel\\n    }) => {\\n      if (isColorChannel(channel) && isContinuousToContinuous(scaleType)) {\\n        if (legendType === 'gradient') {\\n          return undefined;\\n        }\\n      } else if (legendType === 'symbol') {\\n        return undefined;\\n      }\\n\\n      return legendType;\\n    },\\n    // depended by other property, let's define upfront\\n    values: ({\\n      fieldOrDatumDef,\\n      legend\\n    }) => values$1(legend, fieldOrDatumDef)\\n  };\\n  function values$1(legend, fieldOrDatumDef) {\\n    const vals = legend.values;\\n\\n    if (isArray(vals)) {\\n      return valueArray(fieldOrDatumDef, vals);\\n    } else if (isSignalRef(vals)) {\\n      return vals;\\n    }\\n\\n    return undefined;\\n  }\\n  function defaultSymbolType(mark, channel, shapeChannelDef, markShape) {\\n    if (channel !== 'shape') {\\n      var _getFirstConditionVal;\\n\\n      // use the value from the shape encoding or the mark config if they exist\\n      const shape = (_getFirstConditionVal = getFirstConditionValue(shapeChannelDef)) !== null && _getFirstConditionVal !== void 0 ? _getFirstConditionVal : markShape;\\n\\n      if (shape) {\\n        return shape;\\n      }\\n    }\\n\\n    switch (mark) {\\n      case 'bar':\\n      case 'rect':\\n      case 'image':\\n      case 'square':\\n        return 'square';\\n\\n      case 'line':\\n      case 'trail':\\n      case 'rule':\\n        return 'stroke';\\n\\n      case 'arc':\\n      case 'point':\\n      case 'circle':\\n      case 'tick':\\n      case 'geoshape':\\n      case 'area':\\n      case 'text':\\n        return 'circle';\\n    }\\n  }\\n  function getLegendType(params) {\\n    const {\\n      legend\\n    } = params;\\n    return getFirstDefined(legend.type, defaultType$1(params));\\n  }\\n  function defaultType$1({\\n    channel,\\n    timeUnit,\\n    scaleType\\n  }) {\\n    // Following the logic in https://github.com/vega/vega-parser/blob/master/src/parsers/legend.js\\n    if (isColorChannel(channel)) {\\n      if (contains(['quarter', 'month', 'day'], timeUnit)) {\\n        return 'symbol';\\n      }\\n\\n      if (isContinuousToContinuous(scaleType)) {\\n        return 'gradient';\\n      }\\n    }\\n\\n    return 'symbol';\\n  }\\n  function getDirection({\\n    legendConfig,\\n    legendType,\\n    orient,\\n    legend\\n  }) {\\n    var _ref3, _legend$direction;\\n\\n    return (_ref3 = (_legend$direction = legend.direction) !== null && _legend$direction !== void 0 ? _legend$direction : legendConfig[legendType ? 'gradientDirection' : 'symbolDirection']) !== null && _ref3 !== void 0 ? _ref3 : defaultDirection(orient, legendType);\\n  }\\n  function defaultDirection(orient, legendType) {\\n    switch (orient) {\\n      case 'top':\\n      case 'bottom':\\n        return 'horizontal';\\n\\n      case 'left':\\n      case 'right':\\n      case 'none':\\n      case undefined:\\n        // undefined = \\\"right\\\" in Vega\\n        return undefined;\\n      // vertical is Vega's default\\n\\n      default:\\n        // top-left / ...\\n        // For inner legend, uses compact layout like Tableau\\n        return legendType === 'gradient' ? 'horizontal' : undefined;\\n    }\\n  }\\n  function defaultGradientLength({\\n    legendConfig,\\n    model,\\n    direction,\\n    orient,\\n    scaleType\\n  }) {\\n    const {\\n      gradientHorizontalMaxLength,\\n      gradientHorizontalMinLength,\\n      gradientVerticalMaxLength,\\n      gradientVerticalMinLength\\n    } = legendConfig;\\n\\n    if (isContinuousToContinuous(scaleType)) {\\n      if (direction === 'horizontal') {\\n        if (orient === 'top' || orient === 'bottom') {\\n          return gradientLengthSignal(model, 'width', gradientHorizontalMinLength, gradientHorizontalMaxLength);\\n        } else {\\n          return gradientHorizontalMinLength;\\n        }\\n      } else {\\n        // vertical / undefined (Vega uses vertical by default)\\n        return gradientLengthSignal(model, 'height', gradientVerticalMinLength, gradientVerticalMaxLength);\\n      }\\n    }\\n\\n    return undefined;\\n  }\\n\\n  function gradientLengthSignal(model, sizeType, min, max) {\\n    const sizeSignal = model.getSizeSignalRef(sizeType).signal;\\n    return {\\n      signal: \\\"clamp(\\\".concat(sizeSignal, \\\", \\\").concat(min, \\\", \\\").concat(max, \\\")\\\")\\n    };\\n  }\\n\\n  function defaultLabelOverlap$1(scaleType) {\\n    if (contains(['quantile', 'threshold', 'log', 'symlog'], scaleType)) {\\n      return 'greedy';\\n    }\\n\\n    return undefined;\\n  }\\n\\n  function parseLegend(model) {\\n    const legendComponent = isUnitModel(model) ? parseUnitLegend(model) : parseNonUnitLegend(model);\\n    model.component.legends = legendComponent;\\n    return legendComponent;\\n  }\\n\\n  function parseUnitLegend(model) {\\n    const {\\n      encoding\\n    } = model;\\n    const legendComponent = {};\\n\\n    for (const channel of [COLOR, ...LEGEND_SCALE_CHANNELS]) {\\n      const def = getFieldOrDatumDef(encoding[channel]);\\n\\n      if (!def || !model.getScaleComponent(channel)) {\\n        continue;\\n      }\\n\\n      if (channel === SHAPE && isFieldDef(def) && def.type === GEOJSON) {\\n        continue;\\n      }\\n\\n      legendComponent[channel] = parseLegendForChannel(model, channel);\\n    }\\n\\n    return legendComponent;\\n  }\\n\\n  function getLegendDefWithScale(model, channel) {\\n    const scale = model.scaleName(channel);\\n\\n    if (model.mark === 'trail') {\\n      if (channel === 'color') {\\n        // trail is a filled mark, but its default symbolType (\\\"stroke\\\") should use \\\"stroke\\\"\\n        return {\\n          stroke: scale\\n        };\\n      } else if (channel === 'size') {\\n        return {\\n          strokeWidth: scale\\n        };\\n      }\\n    }\\n\\n    if (channel === 'color') {\\n      return model.markDef.filled ? {\\n        fill: scale\\n      } : {\\n        stroke: scale\\n      };\\n    }\\n\\n    return {\\n      [channel]: scale\\n    };\\n  } // eslint-disable-next-line @typescript-eslint/ban-types\\n\\n\\n  function isExplicit(value, property, legend, fieldDef) {\\n    switch (property) {\\n      case 'disable':\\n        return legend !== undefined;\\n      // if axis is specified or null/false, then it's enable/disable state is explicit\\n\\n      case 'values':\\n        // specified legend.values is already respected, but may get transformed.\\n        return !!(legend === null || legend === void 0 ? void 0 : legend.values);\\n\\n      case 'title':\\n        // title can be explicit if fieldDef.title is set\\n        if (property === 'title' && value === (fieldDef === null || fieldDef === void 0 ? void 0 : fieldDef.title)) {\\n          return true;\\n        }\\n\\n    } // Otherwise, things are explicit if the returned value matches the specified property\\n\\n\\n    return value === (legend || {})[property];\\n  }\\n\\n  function parseLegendForChannel(model, channel) {\\n    var _normalizeTimeUnit, _legend$encoding, _legend;\\n\\n    let legend = model.legend(channel);\\n    const {\\n      markDef,\\n      encoding,\\n      config\\n    } = model;\\n    const legendConfig = config.legend;\\n    const legendCmpt = new LegendComponent({}, getLegendDefWithScale(model, channel));\\n    parseInteractiveLegend(model, channel, legendCmpt);\\n    const disable = legend !== undefined ? !legend : legendConfig.disable;\\n    legendCmpt.set('disable', disable, legend !== undefined);\\n\\n    if (disable) {\\n      return legendCmpt;\\n    }\\n\\n    legend = legend || {};\\n    const scaleType = model.getScaleComponent(channel).get('type');\\n    const fieldOrDatumDef = getFieldOrDatumDef(encoding[channel]);\\n    const timeUnit = isFieldDef(fieldOrDatumDef) ? (_normalizeTimeUnit = normalizeTimeUnit(fieldOrDatumDef.timeUnit)) === null || _normalizeTimeUnit === void 0 ? void 0 : _normalizeTimeUnit.unit : undefined;\\n    const orient = legend.orient || config.legend.orient || 'right';\\n    const legendType = getLegendType({\\n      legend,\\n      channel,\\n      timeUnit,\\n      scaleType\\n    });\\n    const direction = getDirection({\\n      legend,\\n      legendType,\\n      orient,\\n      legendConfig\\n    });\\n    const ruleParams = {\\n      legend,\\n      channel,\\n      model,\\n      markDef,\\n      encoding,\\n      fieldOrDatumDef,\\n      legendConfig,\\n      config,\\n      scaleType,\\n      orient,\\n      legendType,\\n      direction\\n    };\\n\\n    for (const property of LEGEND_COMPONENT_PROPERTIES) {\\n      if (legendType === 'gradient' && property.startsWith('symbol') || legendType === 'symbol' && property.startsWith('gradient')) {\\n        continue;\\n      }\\n\\n      const value = property in legendRules ? legendRules[property](ruleParams) : legend[property];\\n\\n      if (value !== undefined) {\\n        const explicit = isExplicit(value, property, legend, model.fieldDef(channel));\\n\\n        if (explicit || config.legend[property] === undefined) {\\n          legendCmpt.set(property, value, explicit);\\n        }\\n      }\\n    }\\n\\n    const legendEncoding = (_legend$encoding = (_legend = legend) === null || _legend === void 0 ? void 0 : _legend.encoding) !== null && _legend$encoding !== void 0 ? _legend$encoding : {};\\n    const selections = legendCmpt.get('selections');\\n    const legendEncode = {};\\n    const legendEncodeParams = {\\n      fieldOrDatumDef,\\n      model,\\n      channel,\\n      legendCmpt,\\n      legendType\\n    };\\n\\n    for (const part of ['labels', 'legend', 'title', 'symbols', 'gradient', 'entries']) {\\n      var _legendEncoding$part;\\n\\n      const legendEncodingPart = guideEncodeEntry((_legendEncoding$part = legendEncoding[part]) !== null && _legendEncoding$part !== void 0 ? _legendEncoding$part : {}, model);\\n      const value = part in legendEncodeRules ? legendEncodeRules[part](legendEncodingPart, legendEncodeParams) // apply rule\\n      : legendEncodingPart; // no rule -- just default values\\n\\n      if (value !== undefined && !isEmpty(value)) {\\n        legendEncode[part] = { ...((selections === null || selections === void 0 ? void 0 : selections.length) && isFieldDef(fieldOrDatumDef) ? {\\n            name: \\\"\\\".concat(varName(fieldOrDatumDef.field), \\\"_legend_\\\").concat(part)\\n          } : {}),\\n          ...((selections === null || selections === void 0 ? void 0 : selections.length) ? {\\n            interactive: !!selections\\n          } : {}),\\n          update: value\\n        };\\n      }\\n    }\\n\\n    if (!isEmpty(legendEncode)) {\\n      var _legend2;\\n\\n      legendCmpt.set('encode', legendEncode, !!((_legend2 = legend) === null || _legend2 === void 0 ? void 0 : _legend2.encoding));\\n    }\\n\\n    return legendCmpt;\\n  }\\n\\n  function parseNonUnitLegend(model) {\\n    const {\\n      legends,\\n      resolve\\n    } = model.component;\\n\\n    for (const child of model.children) {\\n      parseLegend(child);\\n\\n      for (const channel of keys(child.component.legends)) {\\n        resolve.legend[channel] = parseGuideResolve(model.component.resolve, channel);\\n\\n        if (resolve.legend[channel] === 'shared') {\\n          // If the resolve says shared (and has not been overridden)\\n          // We will try to merge and see if there is a conflict\\n          legends[channel] = mergeLegendComponent(legends[channel], child.component.legends[channel]);\\n\\n          if (!legends[channel]) {\\n            // If merge returns nothing, there is a conflict so we cannot make the legend shared.\\n            // Thus, mark legend as independent and remove the legend component.\\n            resolve.legend[channel] = 'independent';\\n            delete legends[channel];\\n          }\\n        }\\n      }\\n    }\\n\\n    for (const channel of keys(legends)) {\\n      for (const child of model.children) {\\n        if (!child.component.legends[channel]) {\\n          // skip if the child does not have a particular legend\\n          continue;\\n        }\\n\\n        if (resolve.legend[channel] === 'shared') {\\n          // After merging shared legend, make sure to remove legend from child\\n          delete child.component.legends[channel];\\n        }\\n      }\\n    }\\n\\n    return legends;\\n  }\\n\\n  function mergeLegendComponent(mergedLegend, childLegend) {\\n    if (!mergedLegend) {\\n      return childLegend.clone();\\n    }\\n\\n    const mergedOrient = mergedLegend.getWithExplicit('orient');\\n    const childOrient = childLegend.getWithExplicit('orient');\\n\\n    if (mergedOrient.explicit && childOrient.explicit && mergedOrient.value !== childOrient.value) {\\n      // TODO: throw warning if resolve is explicit (We don't have info about explicit/implicit resolve yet.)\\n      // Cannot merge due to inconsistent orient\\n      return undefined;\\n    }\\n\\n    let typeMerged = false; // Otherwise, let's merge\\n\\n    for (const prop of LEGEND_COMPONENT_PROPERTIES) {\\n      const mergedValueWithExplicit = mergeValuesWithExplicit(mergedLegend.getWithExplicit(prop), childLegend.getWithExplicit(prop), prop, 'legend', // Tie breaker function\\n      (v1, v2) => {\\n        switch (prop) {\\n          case 'symbolType':\\n            return mergeSymbolType(v1, v2);\\n\\n          case 'title':\\n            return mergeTitleComponent(v1, v2);\\n\\n          case 'type':\\n            // There are only two types. If we have different types, then prefer symbol over gradient.\\n            typeMerged = true;\\n            return makeImplicit('symbol');\\n        }\\n\\n        return defaultTieBreaker(v1, v2, prop, 'legend');\\n      });\\n      mergedLegend.setWithExplicit(prop, mergedValueWithExplicit);\\n    }\\n\\n    if (typeMerged) {\\n      var _mergedLegend$implici, _mergedLegend$implici2, _mergedLegend$explici, _mergedLegend$explici2;\\n\\n      if ((_mergedLegend$implici = mergedLegend.implicit) === null || _mergedLegend$implici === void 0 ? void 0 : (_mergedLegend$implici2 = _mergedLegend$implici.encode) === null || _mergedLegend$implici2 === void 0 ? void 0 : _mergedLegend$implici2.gradient) {\\n        deleteNestedProperty(mergedLegend.implicit, ['encode', 'gradient']);\\n      }\\n\\n      if ((_mergedLegend$explici = mergedLegend.explicit) === null || _mergedLegend$explici === void 0 ? void 0 : (_mergedLegend$explici2 = _mergedLegend$explici.encode) === null || _mergedLegend$explici2 === void 0 ? void 0 : _mergedLegend$explici2.gradient) {\\n        deleteNestedProperty(mergedLegend.explicit, ['encode', 'gradient']);\\n      }\\n    }\\n\\n    return mergedLegend;\\n  }\\n\\n  function mergeSymbolType(st1, st2) {\\n    if (st2.value === 'circle') {\\n      // prefer \\\"circle\\\" over \\\"stroke\\\"\\n      return st2;\\n    }\\n\\n    return st1;\\n  }\\n\\n  function setLegendEncode(legend, part, vgProp, vgRef) {\\n    var _legend$encode, _legend$encode$part, _legend$encode$part$u;\\n\\n    legend.encode = (_legend$encode = legend.encode) !== null && _legend$encode !== void 0 ? _legend$encode : {};\\n    legend.encode[part] = (_legend$encode$part = legend.encode[part]) !== null && _legend$encode$part !== void 0 ? _legend$encode$part : {};\\n    legend.encode[part].update = (_legend$encode$part$u = legend.encode[part].update) !== null && _legend$encode$part$u !== void 0 ? _legend$encode$part$u : {}; // TODO: remove as any after https://github.com/prisma/nexus-prisma/issues/291\\n\\n    legend.encode[part].update[vgProp] = vgRef;\\n  }\\n\\n  function assembleLegends(model) {\\n    const legendComponentIndex = model.component.legends;\\n    const legendByDomain = {};\\n\\n    for (const channel of keys(legendComponentIndex)) {\\n      const scaleComponent = model.getScaleComponent(channel);\\n      const domainHash = stringify(scaleComponent.get('domains'));\\n\\n      if (legendByDomain[domainHash]) {\\n        for (const mergedLegendComponent of legendByDomain[domainHash]) {\\n          const merged = mergeLegendComponent(mergedLegendComponent, legendComponentIndex[channel]);\\n\\n          if (!merged) {\\n            // If cannot merge, need to add this legend separately\\n            legendByDomain[domainHash].push(legendComponentIndex[channel]);\\n          }\\n        }\\n      } else {\\n        legendByDomain[domainHash] = [legendComponentIndex[channel].clone()];\\n      }\\n    }\\n\\n    const legends = vals(legendByDomain).flat().map(l => assembleLegend(l, model.config)).filter(l => l !== undefined);\\n    return legends;\\n  }\\n  function assembleLegend(legendCmpt, config) {\\n    var _legend$encode2;\\n\\n    const {\\n      disable,\\n      labelExpr,\\n      selections,\\n      ...legend\\n    } = legendCmpt.combine();\\n\\n    if (disable) {\\n      return undefined;\\n    }\\n\\n    if (config.aria === false && legend.aria == undefined) {\\n      legend.aria = false;\\n    }\\n\\n    if ((_legend$encode2 = legend.encode) === null || _legend$encode2 === void 0 ? void 0 : _legend$encode2.symbols) {\\n      const out = legend.encode.symbols.update;\\n\\n      if (out.fill && out.fill['value'] !== 'transparent' && !out.stroke && !legend.stroke) {\\n        // For non color channel's legend, we need to override symbol stroke config from Vega config if stroke channel is not used.\\n        out.stroke = {\\n          value: 'transparent'\\n        };\\n      } // Remove properties that the legend is encoding.\\n\\n\\n      for (const property of LEGEND_SCALE_CHANNELS) {\\n        if (legend[property]) {\\n          delete out[property];\\n        }\\n      }\\n    }\\n\\n    if (!legend.title) {\\n      // title schema doesn't include null, ''\\n      delete legend.title;\\n    }\\n\\n    if (labelExpr !== undefined) {\\n      var _legend$encode3, _legend$encode3$label;\\n\\n      let expr = labelExpr;\\n\\n      if (((_legend$encode3 = legend.encode) === null || _legend$encode3 === void 0 ? void 0 : (_legend$encode3$label = _legend$encode3.labels) === null || _legend$encode3$label === void 0 ? void 0 : _legend$encode3$label.update) && isSignalRef(legend.encode.labels.update.text)) {\\n        expr = replaceAll(labelExpr, 'datum.label', legend.encode.labels.update.text.signal);\\n      }\\n\\n      setLegendEncode(legend, 'labels', 'text', {\\n        signal: expr\\n      });\\n    }\\n\\n    return legend;\\n  }\\n\\n  function assembleProjections(model) {\\n    if (isLayerModel(model) || isConcatModel(model)) {\\n      return assembleProjectionsForModelAndChildren(model);\\n    } else {\\n      return assembleProjectionForModel(model);\\n    }\\n  }\\n  function assembleProjectionsForModelAndChildren(model) {\\n    return model.children.reduce((projections, child) => {\\n      return projections.concat(child.assembleProjections());\\n    }, assembleProjectionForModel(model));\\n  }\\n  function assembleProjectionForModel(model) {\\n    const component = model.component.projection;\\n\\n    if (!component || component.merged) {\\n      return [];\\n    }\\n\\n    const projection = component.combine();\\n    const {\\n      name\\n    } = projection; // we need to extract name so that it is always present in the output and pass TS type validation\\n\\n    if (!component.data) {\\n      // generate custom projection, no automatic fitting\\n      return [{\\n        name,\\n        // translate to center by default\\n        ...{\\n          translate: {\\n            signal: '[width / 2, height / 2]'\\n          }\\n        },\\n        // parameters, overwrite default translate if specified\\n        ...projection\\n      }];\\n    } else {\\n      // generate projection that uses extent fitting\\n      const size = {\\n        signal: \\\"[\\\".concat(component.size.map(ref => ref.signal).join(', '), \\\"]\\\")\\n      };\\n      const fits = component.data.reduce((sources, data) => {\\n        const source = isSignalRef(data) ? data.signal : \\\"data('\\\".concat(model.lookupDataSource(data), \\\"')\\\");\\n\\n        if (!contains(sources, source)) {\\n          // build a unique list of sources\\n          sources.push(source);\\n        }\\n\\n        return sources;\\n      }, []);\\n\\n      if (fits.length <= 0) {\\n        throw new Error(\\\"Projection's fit didn't find any data sources\\\");\\n      }\\n\\n      return [{\\n        name,\\n        size,\\n        fit: {\\n          signal: fits.length > 1 ? \\\"[\\\".concat(fits.join(', '), \\\"]\\\") : fits[0]\\n        },\\n        ...projection\\n      }];\\n    }\\n  }\\n\\n  /**\\n   * Any property of Projection can be in config\\n   */\\n  const PROJECTION_PROPERTIES = ['type', 'clipAngle', 'clipExtent', 'center', 'rotate', 'precision', 'reflectX', 'reflectY', 'coefficient', 'distance', 'fraction', 'lobes', 'parallel', 'radius', 'ratio', 'spacing', 'tilt'];\\n\\n  class ProjectionComponent extends Split {\\n    constructor(name, specifiedProjection, size, data) {\\n      super({ ...specifiedProjection\\n      }, // all explicit properties of projection\\n      {\\n        name\\n      } // name as initial implicit property\\n      );\\n      this.specifiedProjection = specifiedProjection;\\n      this.size = size;\\n      this.data = data;\\n\\n      _defineProperty(this, \\\"merged\\\", false);\\n    }\\n    /**\\n     * Whether the projection parameters should fit provided data.\\n     */\\n\\n\\n    get isFit() {\\n      return !!this.data;\\n    }\\n\\n  }\\n\\n  function parseProjection(model) {\\n    model.component.projection = isUnitModel(model) ? parseUnitProjection(model) : parseNonUnitProjections(model);\\n  }\\n\\n  function parseUnitProjection(model) {\\n    if (model.hasProjection) {\\n      var _model$config$project;\\n\\n      const proj = model.specifiedProjection;\\n      const fit = !(proj && (proj.scale != null || proj.translate != null));\\n      const size = fit ? [model.getSizeSignalRef('width'), model.getSizeSignalRef('height')] : undefined;\\n      const data = fit ? gatherFitData(model) : undefined;\\n      return new ProjectionComponent(model.projectionName(true), { ...((_model$config$project = model.config.projection) !== null && _model$config$project !== void 0 ? _model$config$project : {}),\\n        ...(proj !== null && proj !== void 0 ? proj : {})\\n      }, size, data);\\n    }\\n\\n    return undefined;\\n  }\\n\\n  function gatherFitData(model) {\\n    const data = [];\\n    const {\\n      encoding\\n    } = model;\\n\\n    for (const posssiblePair of [[LONGITUDE, LATITUDE], [LONGITUDE2, LATITUDE2]]) {\\n      if (getFieldOrDatumDef(encoding[posssiblePair[0]]) || getFieldOrDatumDef(encoding[posssiblePair[1]])) {\\n        data.push({\\n          signal: model.getName(\\\"geojson_\\\".concat(data.length))\\n        });\\n      }\\n    }\\n\\n    if (model.channelHasField(SHAPE) && model.typedFieldDef(SHAPE).type === GEOJSON) {\\n      data.push({\\n        signal: model.getName(\\\"geojson_\\\".concat(data.length))\\n      });\\n    }\\n\\n    if (data.length === 0) {\\n      // main source is geojson, so we can just use that\\n      data.push(model.requestDataName(DataSourceType.Main));\\n    }\\n\\n    return data;\\n  }\\n\\n  function mergeIfNoConflict(first, second) {\\n    const allPropertiesShared = every(PROJECTION_PROPERTIES, prop => {\\n      // neither has the property\\n      if (!has(first.explicit, prop) && !has(second.explicit, prop)) {\\n        return true;\\n      } // both have property and an equal value for property\\n\\n\\n      if (has(first.explicit, prop) && has(second.explicit, prop) && // some properties might be signals or objects and require hashing for comparison\\n      stringify(first.get(prop)) === stringify(second.get(prop))) {\\n        return true;\\n      }\\n\\n      return false;\\n    });\\n    const size = stringify(first.size) === stringify(second.size);\\n\\n    if (size) {\\n      if (allPropertiesShared) {\\n        return first;\\n      } else if (stringify(first.explicit) === stringify({})) {\\n        return second;\\n      } else if (stringify(second.explicit) === stringify({})) {\\n        return first;\\n      }\\n    } // if all properties don't match, let each unit spec have its own projection\\n\\n\\n    return null;\\n  }\\n\\n  function parseNonUnitProjections(model) {\\n    if (model.children.length === 0) {\\n      return undefined;\\n    }\\n\\n    let nonUnitProjection; // parse all children first\\n\\n    for (const child of model.children) {\\n      parseProjection(child);\\n    } // analyze parsed projections, attempt to merge\\n\\n\\n    const mergable = every(model.children, child => {\\n      const projection = child.component.projection;\\n\\n      if (!projection) {\\n        // child layer does not use a projection\\n        return true;\\n      } else if (!nonUnitProjection) {\\n        // cached 'projection' is null, cache this one\\n        nonUnitProjection = projection;\\n        return true;\\n      } else {\\n        const merge = mergeIfNoConflict(nonUnitProjection, projection);\\n\\n        if (merge) {\\n          nonUnitProjection = merge;\\n        }\\n\\n        return !!merge;\\n      }\\n    }); // if cached one and all other children share the same projection,\\n\\n    if (nonUnitProjection && mergable) {\\n      // so we can elevate it to the layer level\\n      const name = model.projectionName(true);\\n      const modelProjection = new ProjectionComponent(name, nonUnitProjection.specifiedProjection, nonUnitProjection.size, duplicate(nonUnitProjection.data)); // rename and assign all others as merged\\n\\n      for (const child of model.children) {\\n        const projection = child.component.projection;\\n\\n        if (projection) {\\n          if (projection.isFit) {\\n            modelProjection.data.push(...child.component.projection.data);\\n          }\\n\\n          child.renameProjection(projection.get('name'), name);\\n          projection.merged = true;\\n        }\\n      }\\n\\n      return modelProjection;\\n    }\\n\\n    return undefined;\\n  }\\n\\n  function rangeFormula(model, fieldDef, channel, config) {\\n    if (binRequiresRange(fieldDef, channel)) {\\n      var _ref, _model$axis;\\n\\n      // read format from axis or legend, if there is no format then use config.numberFormat\\n      const guide = isUnitModel(model) ? (_ref = (_model$axis = model.axis(channel)) !== null && _model$axis !== void 0 ? _model$axis : model.legend(channel)) !== null && _ref !== void 0 ? _ref : {} : {};\\n      const startField = vgField(fieldDef, {\\n        expr: 'datum'\\n      });\\n      const endField = vgField(fieldDef, {\\n        expr: 'datum',\\n        binSuffix: 'end'\\n      });\\n      return {\\n        formulaAs: vgField(fieldDef, {\\n          binSuffix: 'range',\\n          forAs: true\\n        }),\\n        formula: binFormatExpression(startField, endField, guide.format, guide.formatType, config)\\n      };\\n    }\\n\\n    return {};\\n  }\\n\\n  function binKey(bin, field) {\\n    return \\\"\\\".concat(binToString(bin), \\\"_\\\").concat(field);\\n  }\\n\\n  function getSignalsFromModel(model, key) {\\n    return {\\n      signal: model.getName(\\\"\\\".concat(key, \\\"_bins\\\")),\\n      extentSignal: model.getName(\\\"\\\".concat(key, \\\"_extent\\\"))\\n    };\\n  }\\n\\n  function getBinSignalName(model, field, bin) {\\n    var _normalizeBin;\\n\\n    const normalizedBin = (_normalizeBin = normalizeBin(bin, undefined)) !== null && _normalizeBin !== void 0 ? _normalizeBin : {};\\n    const key = binKey(normalizedBin, field);\\n    return model.getName(\\\"\\\".concat(key, \\\"_bins\\\"));\\n  }\\n\\n  function isBinTransform(t) {\\n    return 'as' in t;\\n  }\\n\\n  function createBinComponent(t, bin, model) {\\n    let as;\\n    let span;\\n\\n    if (isBinTransform(t)) {\\n      as = isString(t.as) ? [t.as, \\\"\\\".concat(t.as, \\\"_end\\\")] : [t.as[0], t.as[1]];\\n    } else {\\n      as = [vgField(t, {\\n        forAs: true\\n      }), vgField(t, {\\n        binSuffix: 'end',\\n        forAs: true\\n      })];\\n    }\\n\\n    const normalizedBin = { ...normalizeBin(bin, undefined)\\n    };\\n    const key = binKey(normalizedBin, t.field);\\n    const {\\n      signal,\\n      extentSignal\\n    } = getSignalsFromModel(model, key);\\n\\n    if (isSelectionExtent(normalizedBin.extent)) {\\n      const ext = normalizedBin.extent;\\n      const selName = ext.selection;\\n      span = parseSelectionBinExtent(model.getSelectionComponent(varName(selName), selName), ext);\\n      delete normalizedBin.extent; // Vega-Lite selection extent map to Vega's span property.\\n    }\\n\\n    const binComponent = {\\n      bin: normalizedBin,\\n      field: t.field,\\n      as: [as],\\n      ...(signal ? {\\n        signal\\n      } : {}),\\n      ...(extentSignal ? {\\n        extentSignal\\n      } : {}),\\n      ...(span ? {\\n        span\\n      } : {})\\n    };\\n    return {\\n      key,\\n      binComponent\\n    };\\n  }\\n\\n  class BinNode extends DataFlowNode {\\n    clone() {\\n      return new BinNode(null, duplicate(this.bins));\\n    }\\n\\n    constructor(parent, bins) {\\n      super(parent);\\n      this.bins = bins;\\n    }\\n\\n    static makeFromEncoding(parent, model) {\\n      const bins = model.reduceFieldDef((binComponentIndex, fieldDef, channel) => {\\n        if (isTypedFieldDef(fieldDef) && isBinning(fieldDef.bin)) {\\n          const {\\n            key,\\n            binComponent\\n          } = createBinComponent(fieldDef, fieldDef.bin, model);\\n          binComponentIndex[key] = { ...binComponent,\\n            ...binComponentIndex[key],\\n            ...rangeFormula(model, fieldDef, channel, model.config)\\n          };\\n        }\\n\\n        return binComponentIndex;\\n      }, {});\\n\\n      if (isEmpty(bins)) {\\n        return null;\\n      }\\n\\n      return new BinNode(parent, bins);\\n    }\\n    /**\\n     * Creates a bin node from BinTransform.\\n     * The optional parameter should provide\\n     */\\n\\n\\n    static makeFromTransform(parent, t, model) {\\n      const {\\n        key,\\n        binComponent\\n      } = createBinComponent(t, t.bin, model);\\n      return new BinNode(parent, {\\n        [key]: binComponent\\n      });\\n    }\\n    /**\\n     * Merge bin nodes. This method either integrates the bin config from the other node\\n     * or if this node already has a bin config, renames the corresponding signal in the model.\\n     */\\n\\n\\n    merge(other, renameSignal) {\\n      for (const key of keys(other.bins)) {\\n        if (key in this.bins) {\\n          renameSignal(other.bins[key].signal, this.bins[key].signal); // Ensure that we don't have duplicate names for signal pairs\\n\\n          this.bins[key].as = unique([...this.bins[key].as, ...other.bins[key].as], hash);\\n        } else {\\n          this.bins[key] = other.bins[key];\\n        }\\n      }\\n\\n      for (const child of other.children) {\\n        other.removeChild(child);\\n        child.parent = this;\\n      }\\n\\n      other.remove();\\n    }\\n\\n    producedFields() {\\n      return new Set(vals(this.bins).map(c => c.as).flat(2));\\n    }\\n\\n    dependentFields() {\\n      return new Set(vals(this.bins).map(c => c.field));\\n    }\\n\\n    hash() {\\n      return \\\"Bin \\\".concat(hash(this.bins));\\n    }\\n\\n    assemble() {\\n      return vals(this.bins).flatMap(bin => {\\n        const transform = [];\\n        const [binAs, ...remainingAs] = bin.as;\\n        const {\\n          extent,\\n          ...params\\n        } = bin.bin;\\n        const binTrans = {\\n          type: 'bin',\\n          field: replacePathInField(bin.field),\\n          as: binAs,\\n          signal: bin.signal,\\n          ...(!isSelectionExtent(extent) ? {\\n            extent\\n          } : {\\n            extent: null\\n          }),\\n          ...(bin.span ? {\\n            span: {\\n              signal: \\\"span(\\\".concat(bin.span, \\\")\\\")\\n            }\\n          } : {}),\\n          ...params\\n        };\\n\\n        if (!extent && bin.extentSignal) {\\n          transform.push({\\n            type: 'extent',\\n            field: replacePathInField(bin.field),\\n            signal: bin.extentSignal\\n          });\\n          binTrans.extent = {\\n            signal: bin.extentSignal\\n          };\\n        }\\n\\n        transform.push(binTrans);\\n\\n        for (const as of remainingAs) {\\n          for (let i = 0; i < 2; i++) {\\n            transform.push({\\n              type: 'formula',\\n              expr: vgField({\\n                field: binAs[i]\\n              }, {\\n                expr: 'datum'\\n              }),\\n              as: as[i]\\n            });\\n          }\\n        }\\n\\n        if (bin.formula) {\\n          transform.push({\\n            type: 'formula',\\n            expr: bin.formula,\\n            as: bin.formulaAs\\n          });\\n        }\\n\\n        return transform;\\n      });\\n    }\\n\\n  }\\n\\n  function addDimension(dims, channel, fieldDef, model) {\\n    const channelDef2 = isUnitModel(model) ? model.encoding[getSecondaryRangeChannel(channel)] : undefined;\\n\\n    if (isTypedFieldDef(fieldDef) && isUnitModel(model) && hasBand(channel, fieldDef, channelDef2, model.stack, model.markDef, model.config)) {\\n      dims.add(vgField(fieldDef, {}));\\n      dims.add(vgField(fieldDef, {\\n        suffix: 'end'\\n      }));\\n\\n      if (fieldDef.bin && binRequiresRange(fieldDef, channel)) {\\n        dims.add(vgField(fieldDef, {\\n          binSuffix: 'range'\\n        }));\\n      }\\n    } else if (isGeoPositionChannel(channel)) {\\n      const posChannel = getPositionChannelFromLatLong(channel);\\n      dims.add(model.getName(posChannel));\\n    } else {\\n      dims.add(vgField(fieldDef));\\n    }\\n\\n    return dims;\\n  }\\n\\n  function mergeMeasures(parentMeasures, childMeasures) {\\n    for (const field of keys(childMeasures)) {\\n      // when we merge a measure, we either have to add an aggregation operator or even a new field\\n      const ops = childMeasures[field];\\n\\n      for (const op of keys(ops)) {\\n        if (field in parentMeasures) {\\n          var _parentMeasures$field;\\n\\n          // add operator to existing measure field\\n          parentMeasures[field][op] = new Set([...((_parentMeasures$field = parentMeasures[field][op]) !== null && _parentMeasures$field !== void 0 ? _parentMeasures$field : []), ...ops[op]]);\\n        } else {\\n          parentMeasures[field] = {\\n            [op]: ops[op]\\n          };\\n        }\\n      }\\n    }\\n  }\\n\\n  class AggregateNode extends DataFlowNode {\\n    clone() {\\n      return new AggregateNode(null, new Set(this.dimensions), duplicate(this.measures));\\n    }\\n    /**\\n     * @param dimensions string set for dimensions\\n     * @param measures dictionary mapping field name => dict of aggregation functions and names to use\\n     */\\n\\n\\n    constructor(parent, dimensions, measures) {\\n      super(parent);\\n      this.dimensions = dimensions;\\n      this.measures = measures;\\n    }\\n\\n    get groupBy() {\\n      return this.dimensions;\\n    }\\n\\n    static makeFromEncoding(parent, model) {\\n      let isAggregate = false;\\n      model.forEachFieldDef(fd => {\\n        if (fd.aggregate) {\\n          isAggregate = true;\\n        }\\n      });\\n      const meas = {};\\n      const dims = new Set();\\n\\n      if (!isAggregate) {\\n        // no need to create this node if the model has no aggregation\\n        return null;\\n      }\\n\\n      model.forEachFieldDef((fieldDef, channel) => {\\n        const {\\n          aggregate,\\n          field\\n        } = fieldDef;\\n\\n        if (aggregate) {\\n          if (aggregate === 'count') {\\n            var _meas$;\\n\\n            meas['*'] = (_meas$ = meas['*']) !== null && _meas$ !== void 0 ? _meas$ : {};\\n            meas['*']['count'] = new Set([vgField(fieldDef, {\\n              forAs: true\\n            })]);\\n          } else {\\n            if (isArgminDef(aggregate) || isArgmaxDef(aggregate)) {\\n              var _meas$argField;\\n\\n              const op = isArgminDef(aggregate) ? 'argmin' : 'argmax';\\n              const argField = aggregate[op];\\n              meas[argField] = (_meas$argField = meas[argField]) !== null && _meas$argField !== void 0 ? _meas$argField : {};\\n              meas[argField][op] = new Set([vgField({\\n                op,\\n                field: argField\\n              }, {\\n                forAs: true\\n              })]);\\n            } else {\\n              var _meas$field;\\n\\n              meas[field] = (_meas$field = meas[field]) !== null && _meas$field !== void 0 ? _meas$field : {};\\n              meas[field][aggregate] = new Set([vgField(fieldDef, {\\n                forAs: true\\n              })]);\\n            } // For scale channel with domain === 'unaggregated', add min/max so we can use their union as unaggregated domain\\n\\n\\n            if (isScaleChannel(channel) && model.scaleDomain(channel) === 'unaggregated') {\\n              var _meas$field2;\\n\\n              meas[field] = (_meas$field2 = meas[field]) !== null && _meas$field2 !== void 0 ? _meas$field2 : {};\\n              meas[field]['min'] = new Set([vgField({\\n                field,\\n                aggregate: 'min'\\n              }, {\\n                forAs: true\\n              })]);\\n              meas[field]['max'] = new Set([vgField({\\n                field,\\n                aggregate: 'max'\\n              }, {\\n                forAs: true\\n              })]);\\n            }\\n          }\\n        } else {\\n          addDimension(dims, channel, fieldDef, model);\\n        }\\n      });\\n\\n      if (dims.size + keys(meas).length === 0) {\\n        return null;\\n      }\\n\\n      return new AggregateNode(parent, dims, meas);\\n    }\\n\\n    static makeFromTransform(parent, t) {\\n      const dims = new Set();\\n      const meas = {};\\n\\n      for (const s of t.aggregate) {\\n        const {\\n          op,\\n          field,\\n          as\\n        } = s;\\n\\n        if (op) {\\n          if (op === 'count') {\\n            var _meas$2;\\n\\n            meas['*'] = (_meas$2 = meas['*']) !== null && _meas$2 !== void 0 ? _meas$2 : {};\\n            meas['*']['count'] = new Set([as ? as : vgField(s, {\\n              forAs: true\\n            })]);\\n          } else {\\n            var _meas$field3;\\n\\n            meas[field] = (_meas$field3 = meas[field]) !== null && _meas$field3 !== void 0 ? _meas$field3 : {};\\n            meas[field][op] = new Set([as ? as : vgField(s, {\\n              forAs: true\\n            })]);\\n          }\\n        }\\n      }\\n\\n      for (const s of (_t$groupby = t.groupby) !== null && _t$groupby !== void 0 ? _t$groupby : []) {\\n        var _t$groupby;\\n\\n        dims.add(s);\\n      }\\n\\n      if (dims.size + keys(meas).length === 0) {\\n        return null;\\n      }\\n\\n      return new AggregateNode(parent, dims, meas);\\n    }\\n\\n    merge(other) {\\n      if (setEqual(this.dimensions, other.dimensions)) {\\n        mergeMeasures(this.measures, other.measures);\\n        return true;\\n      } else {\\n        debug('different dimensions, cannot merge');\\n        return false;\\n      }\\n    }\\n\\n    addDimensions(fields) {\\n      fields.forEach(this.dimensions.add, this.dimensions);\\n    }\\n\\n    dependentFields() {\\n      return new Set([...this.dimensions, ...keys(this.measures)]);\\n    }\\n\\n    producedFields() {\\n      const out = new Set();\\n\\n      for (const field of keys(this.measures)) {\\n        for (const op of keys(this.measures[field])) {\\n          const m = this.measures[field][op];\\n\\n          if (m.size === 0) {\\n            out.add(\\\"\\\".concat(op, \\\"_\\\").concat(field));\\n          } else {\\n            m.forEach(out.add, out);\\n          }\\n        }\\n      }\\n\\n      return out;\\n    }\\n\\n    hash() {\\n      return \\\"Aggregate \\\".concat(hash({\\n        dimensions: this.dimensions,\\n        measures: this.measures\\n      }));\\n    }\\n\\n    assemble() {\\n      const ops = [];\\n      const fields = [];\\n      const as = [];\\n\\n      for (const field of keys(this.measures)) {\\n        for (const op of keys(this.measures[field])) {\\n          for (const alias of this.measures[field][op]) {\\n            as.push(alias);\\n            ops.push(op);\\n            fields.push(field === '*' ? null : replacePathInField(field));\\n          }\\n        }\\n      }\\n\\n      const result = {\\n        type: 'aggregate',\\n        groupby: [...this.dimensions].map(replacePathInField),\\n        ops,\\n        fields,\\n        as\\n      };\\n      return result;\\n    }\\n\\n  }\\n\\n  /**\\n   * A node that helps us track what fields we are faceting by.\\n   */\\n  class FacetNode extends DataFlowNode {\\n    /**\\n     * @param model The facet model.\\n     * @param name The name that this facet source will have.\\n     * @param data The source data for this facet data.\\n     */\\n    constructor(parent, model, name, data) {\\n      super(parent);\\n      this.model = model;\\n      this.name = name;\\n      this.data = data;\\n\\n      _defineProperty(this, \\\"column\\\", void 0);\\n\\n      _defineProperty(this, \\\"row\\\", void 0);\\n\\n      _defineProperty(this, \\\"facet\\\", void 0);\\n\\n      _defineProperty(this, \\\"childModel\\\", void 0);\\n\\n      for (const channel of FACET_CHANNELS) {\\n        const fieldDef = model.facet[channel];\\n\\n        if (fieldDef) {\\n          const {\\n            bin,\\n            sort\\n          } = fieldDef;\\n          this[channel] = {\\n            name: model.getName(\\\"\\\".concat(channel, \\\"_domain\\\")),\\n            fields: [vgField(fieldDef), ...(isBinning(bin) ? [vgField(fieldDef, {\\n              binSuffix: 'end'\\n            })] : [])],\\n            ...(isSortField(sort) ? {\\n              sortField: sort\\n            } : isArray(sort) ? {\\n              sortIndexField: sortArrayIndexField(fieldDef, channel)\\n            } : {})\\n          };\\n        }\\n      }\\n\\n      this.childModel = model.child;\\n    }\\n\\n    hash() {\\n      let out = \\\"Facet\\\";\\n\\n      for (const channel of FACET_CHANNELS) {\\n        if (this[channel]) {\\n          out += \\\" \\\".concat(channel.charAt(0), \\\":\\\").concat(hash(this[channel]));\\n        }\\n      }\\n\\n      return out;\\n    }\\n\\n    get fields() {\\n      const f = [];\\n\\n      for (const channel of FACET_CHANNELS) {\\n        var _this$channel;\\n\\n        if ((_this$channel = this[channel]) === null || _this$channel === void 0 ? void 0 : _this$channel.fields) {\\n          f.push(...this[channel].fields);\\n        }\\n      }\\n\\n      return f;\\n    }\\n\\n    dependentFields() {\\n      const depFields = new Set(this.fields);\\n\\n      for (const channel of FACET_CHANNELS) {\\n        if (this[channel]) {\\n          if (this[channel].sortField) {\\n            depFields.add(this[channel].sortField.field);\\n          }\\n\\n          if (this[channel].sortIndexField) {\\n            depFields.add(this[channel].sortIndexField);\\n          }\\n        }\\n      }\\n\\n      return depFields;\\n    }\\n\\n    producedFields() {\\n      return new Set(); // facet does not produce any new fields\\n    }\\n    /**\\n     * The name to reference this source is its name.\\n     */\\n\\n\\n    getSource() {\\n      return this.name;\\n    }\\n\\n    getChildIndependentFieldsWithStep() {\\n      const childIndependentFieldsWithStep = {};\\n\\n      for (const channel of POSITION_SCALE_CHANNELS) {\\n        const childScaleComponent = this.childModel.component.scales[channel];\\n\\n        if (childScaleComponent && !childScaleComponent.merged) {\\n          // independent scale\\n          const type = childScaleComponent.get('type');\\n          const range = childScaleComponent.get('range');\\n\\n          if (hasDiscreteDomain(type) && isVgRangeStep(range)) {\\n            const domain = assembleDomain(this.childModel, channel);\\n            const field = getFieldFromDomain(domain);\\n\\n            if (field) {\\n              childIndependentFieldsWithStep[channel] = field;\\n            } else {\\n              warn(unknownField(channel));\\n            }\\n          }\\n        }\\n      }\\n\\n      return childIndependentFieldsWithStep;\\n    }\\n\\n    assembleRowColumnHeaderData(channel, crossedDataName, childIndependentFieldsWithStep) {\\n      const childChannel = {\\n        row: 'y',\\n        column: 'x'\\n      }[channel];\\n      const fields = [];\\n      const ops = [];\\n      const as = [];\\n\\n      if (childIndependentFieldsWithStep && childIndependentFieldsWithStep[childChannel]) {\\n        if (crossedDataName) {\\n          // If there is a crossed data, calculate max\\n          fields.push(\\\"distinct_\\\".concat(childIndependentFieldsWithStep[childChannel]));\\n          ops.push('max');\\n        } else {\\n          // If there is no crossed data, just calculate distinct\\n          fields.push(childIndependentFieldsWithStep[childChannel]);\\n          ops.push('distinct');\\n        } // Although it is technically a max, just name it distinct so it's easier to refer to it\\n\\n\\n        as.push(\\\"distinct_\\\".concat(childIndependentFieldsWithStep[childChannel]));\\n      }\\n\\n      const {\\n        sortField,\\n        sortIndexField\\n      } = this[channel];\\n\\n      if (sortField) {\\n        const {\\n          op = DEFAULT_SORT_OP,\\n          field\\n        } = sortField;\\n        fields.push(field);\\n        ops.push(op);\\n        as.push(vgField(sortField, {\\n          forAs: true\\n        }));\\n      } else if (sortIndexField) {\\n        fields.push(sortIndexField);\\n        ops.push('max');\\n        as.push(sortIndexField);\\n      }\\n\\n      return {\\n        name: this[channel].name,\\n        // Use data from the crossed one if it exist\\n        source: crossedDataName !== null && crossedDataName !== void 0 ? crossedDataName : this.data,\\n        transform: [{\\n          type: 'aggregate',\\n          groupby: this[channel].fields,\\n          ...(fields.length ? {\\n            fields,\\n            ops,\\n            as\\n          } : {})\\n        }]\\n      };\\n    }\\n\\n    assembleFacetHeaderData(childIndependentFieldsWithStep) {\\n      const {\\n        columns\\n      } = this.model.layout;\\n      const {\\n        layoutHeaders\\n      } = this.model.component;\\n      const data = [];\\n      const hasSharedAxis = {};\\n\\n      for (const headerChannel of HEADER_CHANNELS) {\\n        for (const headerType of HEADER_TYPES) {\\n          var _ref;\\n\\n          const headers = (_ref = layoutHeaders[headerChannel] && layoutHeaders[headerChannel][headerType]) !== null && _ref !== void 0 ? _ref : [];\\n\\n          for (const header of headers) {\\n            var _header$axes;\\n\\n            if (((_header$axes = header.axes) === null || _header$axes === void 0 ? void 0 : _header$axes.length) > 0) {\\n              hasSharedAxis[headerChannel] = true;\\n              break;\\n            }\\n          }\\n        }\\n\\n        if (hasSharedAxis[headerChannel]) {\\n          const cardinality = \\\"length(data(\\\\\\\"\\\".concat(this.facet.name, \\\"\\\\\\\"))\\\");\\n          const stop = headerChannel === 'row' ? columns ? {\\n            signal: \\\"ceil(\\\".concat(cardinality, \\\" / \\\").concat(columns, \\\")\\\")\\n          } : 1 : columns ? {\\n            signal: \\\"min(\\\".concat(cardinality, \\\", \\\").concat(columns, \\\")\\\")\\n          } : {\\n            signal: cardinality\\n          };\\n          data.push({\\n            name: \\\"\\\".concat(this.facet.name, \\\"_\\\").concat(headerChannel),\\n            transform: [{\\n              type: 'sequence',\\n              start: 0,\\n              stop\\n            }]\\n          });\\n        }\\n      }\\n\\n      const {\\n        row,\\n        column\\n      } = hasSharedAxis;\\n\\n      if (row || column) {\\n        data.unshift(this.assembleRowColumnHeaderData('facet', null, childIndependentFieldsWithStep));\\n      }\\n\\n      return data;\\n    }\\n\\n    assemble() {\\n      const data = [];\\n      let crossedDataName = null;\\n      const childIndependentFieldsWithStep = this.getChildIndependentFieldsWithStep();\\n      const {\\n        column,\\n        row,\\n        facet\\n      } = this;\\n\\n      if (column && row && (childIndependentFieldsWithStep.x || childIndependentFieldsWithStep.y)) {\\n        var _childIndependentFiel, _childIndependentFiel2;\\n\\n        // Need to create a cross dataset to correctly calculate cardinality\\n        crossedDataName = \\\"cross_\\\".concat(this.column.name, \\\"_\\\").concat(this.row.name);\\n        const fields = [].concat((_childIndependentFiel = childIndependentFieldsWithStep.x) !== null && _childIndependentFiel !== void 0 ? _childIndependentFiel : [], (_childIndependentFiel2 = childIndependentFieldsWithStep.y) !== null && _childIndependentFiel2 !== void 0 ? _childIndependentFiel2 : []);\\n        const ops = fields.map(() => 'distinct');\\n        data.push({\\n          name: crossedDataName,\\n          source: this.data,\\n          transform: [{\\n            type: 'aggregate',\\n            groupby: this.fields,\\n            fields,\\n            ops\\n          }]\\n        });\\n      }\\n\\n      for (const channel of [COLUMN, ROW]) {\\n        if (this[channel]) {\\n          data.push(this.assembleRowColumnHeaderData(channel, crossedDataName, childIndependentFieldsWithStep));\\n        }\\n      }\\n\\n      if (facet) {\\n        const facetData = this.assembleFacetHeaderData(childIndependentFieldsWithStep);\\n\\n        if (facetData) {\\n          data.push(...facetData);\\n        }\\n      }\\n\\n      return data;\\n    }\\n\\n  }\\n\\n  /**\\n   * Remove quotes from a string.\\n   */\\n\\n  function unquote(pattern) {\\n    if (pattern[0] === \\\"'\\\" && pattern[pattern.length - 1] === \\\"'\\\" || pattern[0] === '\\\"' && pattern[pattern.length - 1] === '\\\"') {\\n      return pattern.slice(1, -1);\\n    }\\n\\n    return pattern;\\n  }\\n  /**\\n   * @param field The field.\\n   * @param parse What to parse the field as.\\n   */\\n\\n\\n  function parseExpression$1(field, parse) {\\n    const f = accessPathWithDatum(field);\\n\\n    if (parse === 'number') {\\n      return \\\"toNumber(\\\".concat(f, \\\")\\\");\\n    } else if (parse === 'boolean') {\\n      return \\\"toBoolean(\\\".concat(f, \\\")\\\");\\n    } else if (parse === 'string') {\\n      return \\\"toString(\\\".concat(f, \\\")\\\");\\n    } else if (parse === 'date') {\\n      return \\\"toDate(\\\".concat(f, \\\")\\\");\\n    } else if (parse === 'flatten') {\\n      return f;\\n    } else if (parse.indexOf('date:') === 0) {\\n      const specifier = unquote(parse.slice(5, parse.length));\\n      return \\\"timeParse(\\\".concat(f, \\\",'\\\").concat(specifier, \\\"')\\\");\\n    } else if (parse.indexOf('utc:') === 0) {\\n      const specifier = unquote(parse.slice(4, parse.length));\\n      return \\\"utcParse(\\\".concat(f, \\\",'\\\").concat(specifier, \\\"')\\\");\\n    } else {\\n      warn(unrecognizedParse(parse));\\n      return null;\\n    }\\n  }\\n\\n  function getImplicitFromFilterTransform(transform) {\\n    const implicit = {};\\n    forEachLeaf(transform.filter, filter => {\\n      if (isFieldPredicate(filter)) {\\n        // Automatically add a parse node for filters with filter objects\\n        let val = null; // For EqualFilter, just use the equal property.\\n        // For RangeFilter and OneOfFilter, all array members should have\\n        // the same type, so we only use the first one.\\n\\n        if (isFieldEqualPredicate(filter)) {\\n          val = signalRefOrValue(filter.equal);\\n        } else if (isFieldLTEPredicate(filter)) {\\n          val = signalRefOrValue(filter.lte);\\n        } else if (isFieldLTPredicate(filter)) {\\n          val = signalRefOrValue(filter.lt);\\n        } else if (isFieldGTPredicate(filter)) {\\n          val = signalRefOrValue(filter.gt);\\n        } else if (isFieldGTEPredicate(filter)) {\\n          val = signalRefOrValue(filter.gte);\\n        } else if (isFieldRangePredicate(filter)) {\\n          val = filter.range[0];\\n        } else if (isFieldOneOfPredicate(filter)) {\\n          var _filter$oneOf;\\n\\n          val = ((_filter$oneOf = filter.oneOf) !== null && _filter$oneOf !== void 0 ? _filter$oneOf : filter['in'])[0];\\n        } // else -- for filter expression, we can't infer anything\\n\\n\\n        if (val) {\\n          if (isDateTime(val)) {\\n            implicit[filter.field] = 'date';\\n          } else if (isNumber(val)) {\\n            implicit[filter.field] = 'number';\\n          } else if (isString(val)) {\\n            implicit[filter.field] = 'string';\\n          }\\n        }\\n\\n        if (filter.timeUnit) {\\n          implicit[filter.field] = 'date';\\n        }\\n      }\\n    });\\n    return implicit;\\n  }\\n  /**\\n   * Creates a parse node for implicit parsing from a model and updates ancestorParse.\\n   */\\n\\n  function getImplicitFromEncoding(model) {\\n    const implicit = {};\\n\\n    function add(fieldDef) {\\n      if (isFieldOrDatumDefForTimeFormat(fieldDef)) {\\n        implicit[fieldDef.field] = 'date';\\n      } else if (fieldDef.type === 'quantitative' && isMinMaxOp(fieldDef.aggregate) // we need to parse numbers to support correct min and max\\n      ) {\\n          implicit[fieldDef.field] = 'number';\\n        } else if (accessPathDepth(fieldDef.field) > 1) {\\n        // For non-date/non-number (strings and booleans), derive a flattened field for a referenced nested field.\\n        // (Parsing numbers / dates already flattens numeric and temporal fields.)\\n        if (!(fieldDef.field in implicit)) {\\n          implicit[fieldDef.field] = 'flatten';\\n        }\\n      } else if (isScaleFieldDef(fieldDef) && isSortField(fieldDef.sort) && accessPathDepth(fieldDef.sort.field) > 1) {\\n        // Flatten fields that we sort by but that are not otherwise flattened.\\n        if (!(fieldDef.sort.field in implicit)) {\\n          implicit[fieldDef.sort.field] = 'flatten';\\n        }\\n      }\\n    }\\n\\n    if (isUnitModel(model) || isFacetModel(model)) {\\n      // Parse encoded fields\\n      model.forEachFieldDef((fieldDef, channel) => {\\n        if (isTypedFieldDef(fieldDef)) {\\n          add(fieldDef);\\n        } else {\\n          const mainChannel = getMainRangeChannel(channel);\\n          const mainFieldDef = model.fieldDef(mainChannel);\\n          add({ ...fieldDef,\\n            type: mainFieldDef.type\\n          });\\n        }\\n      });\\n    } // Parse quantitative dimension fields of path marks as numbers so that we sort them correctly.\\n\\n\\n    if (isUnitModel(model)) {\\n      const {\\n        mark,\\n        markDef,\\n        encoding\\n      } = model;\\n\\n      if (isPathMark(mark) && // No need to sort by dimension if we have a connected scatterplot (order channel is present)\\n      !model.encoding.order) {\\n        const dimensionChannel = markDef.orient === 'horizontal' ? 'y' : 'x';\\n        const dimensionChannelDef = encoding[dimensionChannel];\\n\\n        if (isFieldDef(dimensionChannelDef) && dimensionChannelDef.type === 'quantitative' && !(dimensionChannelDef.field in implicit)) {\\n          implicit[dimensionChannelDef.field] = 'number';\\n        }\\n      }\\n    }\\n\\n    return implicit;\\n  }\\n  /**\\n   * Creates a parse node for implicit parsing from a model and updates ancestorParse.\\n   */\\n\\n  function getImplicitFromSelection(model) {\\n    const implicit = {};\\n\\n    if (isUnitModel(model) && model.component.selection) {\\n      for (const name of keys(model.component.selection)) {\\n        const selCmpt = model.component.selection[name];\\n\\n        for (const proj of selCmpt.project.items) {\\n          if (!proj.channel && accessPathDepth(proj.field) > 1) {\\n            implicit[proj.field] = 'flatten';\\n          }\\n        }\\n      }\\n    }\\n\\n    return implicit;\\n  }\\n  class ParseNode extends DataFlowNode {\\n    clone() {\\n      return new ParseNode(null, duplicate(this._parse));\\n    }\\n\\n    constructor(parent, parse) {\\n      super(parent);\\n\\n      _defineProperty(this, \\\"_parse\\\", void 0);\\n\\n      this._parse = parse;\\n    }\\n\\n    hash() {\\n      return \\\"Parse \\\".concat(hash(this._parse));\\n    }\\n    /**\\n     * Creates a parse node from a data.format.parse and updates ancestorParse.\\n     */\\n\\n\\n    static makeExplicit(parent, model, ancestorParse) {\\n      // Custom parse\\n      let explicit = {};\\n      const data = model.data;\\n\\n      if (!isGenerator(data) && data && data.format && data.format.parse) {\\n        explicit = data.format.parse;\\n      }\\n\\n      return this.makeWithAncestors(parent, explicit, {}, ancestorParse);\\n    }\\n    /**\\n     * Creates a parse node from \\\"explicit\\\" parse and \\\"implicit\\\" parse and updates ancestorParse.\\n     */\\n\\n\\n    static makeWithAncestors(parent, explicit, implicit, ancestorParse) {\\n      // We should not parse what has already been parsed in a parent (explicitly or implicitly) or what has been derived (maked as \\\"derived\\\"). We also don't need to flatten a field that has already been parsed.\\n      for (const field of keys(implicit)) {\\n        const parsedAs = ancestorParse.getWithExplicit(field);\\n\\n        if (parsedAs.value !== undefined) {\\n          // We always ignore derived fields even if they are implicitly defined because we expect users to create the right types.\\n          if (parsedAs.explicit || parsedAs.value === implicit[field] || parsedAs.value === 'derived' || implicit[field] === 'flatten') {\\n            delete implicit[field];\\n          } else {\\n            warn(differentParse(field, implicit[field], parsedAs.value));\\n          }\\n        }\\n      }\\n\\n      for (const field of keys(explicit)) {\\n        const parsedAs = ancestorParse.get(field);\\n\\n        if (parsedAs !== undefined) {\\n          // Don't parse a field again if it has been parsed with the same type already.\\n          if (parsedAs === explicit[field]) {\\n            delete explicit[field];\\n          } else {\\n            warn(differentParse(field, explicit[field], parsedAs));\\n          }\\n        }\\n      }\\n\\n      const parse = new Split(explicit, implicit); // add the format parse from this model so that children don't parse the same field again\\n\\n      ancestorParse.copyAll(parse); // copy only non-null parses\\n\\n      const p = {};\\n\\n      for (const key of keys(parse.combine())) {\\n        const val = parse.get(key);\\n\\n        if (val !== null) {\\n          p[key] = val;\\n        }\\n      }\\n\\n      if (keys(p).length === 0 || ancestorParse.parseNothing) {\\n        return null;\\n      }\\n\\n      return new ParseNode(parent, p);\\n    }\\n\\n    get parse() {\\n      return this._parse;\\n    }\\n\\n    merge(other) {\\n      this._parse = { ...this._parse,\\n        ...other.parse\\n      };\\n      other.remove();\\n    }\\n    /**\\n     * Assemble an object for Vega's format.parse property.\\n     */\\n\\n\\n    assembleFormatParse() {\\n      const formatParse = {};\\n\\n      for (const field of keys(this._parse)) {\\n        const p = this._parse[field];\\n\\n        if (accessPathDepth(field) === 1) {\\n          formatParse[field] = p;\\n        }\\n      }\\n\\n      return formatParse;\\n    } // format parse depends and produces all fields in its parse\\n\\n\\n    producedFields() {\\n      return new Set(keys(this._parse));\\n    }\\n\\n    dependentFields() {\\n      return new Set(keys(this._parse));\\n    }\\n\\n    assembleTransforms(onlyNested = false) {\\n      return keys(this._parse).filter(field => onlyNested ? accessPathDepth(field) > 1 : true).map(field => {\\n        const expr = parseExpression$1(field, this._parse[field]);\\n\\n        if (!expr) {\\n          return null;\\n        }\\n\\n        const formula = {\\n          type: 'formula',\\n          expr,\\n          as: removePathFromField(field) // Vega output is always flattened\\n\\n        };\\n        return formula;\\n      }).filter(t => t !== null);\\n    }\\n\\n  }\\n\\n  class IdentifierNode extends DataFlowNode {\\n    clone() {\\n      return new IdentifierNode(null);\\n    }\\n\\n    constructor(parent) {\\n      super(parent);\\n    }\\n\\n    dependentFields() {\\n      return new Set();\\n    }\\n\\n    producedFields() {\\n      return new Set([SELECTION_ID]);\\n    }\\n\\n    hash() {\\n      return 'Identifier';\\n    }\\n\\n    assemble() {\\n      return {\\n        type: 'identifier',\\n        as: SELECTION_ID\\n      };\\n    }\\n\\n  }\\n\\n  class GraticuleNode extends DataFlowNode {\\n    clone() {\\n      return new GraticuleNode(null, this.params);\\n    }\\n\\n    constructor(parent, params) {\\n      super(parent);\\n      this.params = params;\\n    }\\n\\n    dependentFields() {\\n      return new Set();\\n    }\\n\\n    producedFields() {\\n      return undefined; // there should never be a node before graticule\\n    }\\n\\n    hash() {\\n      return \\\"Graticule \\\".concat(hash(this.params));\\n    }\\n\\n    assemble() {\\n      return {\\n        type: 'graticule',\\n        ...(this.params === true ? {} : this.params)\\n      };\\n    }\\n\\n  }\\n\\n  class SequenceNode extends DataFlowNode {\\n    clone() {\\n      return new SequenceNode(null, this.params);\\n    }\\n\\n    constructor(parent, params) {\\n      super(parent);\\n      this.params = params;\\n    }\\n\\n    dependentFields() {\\n      return new Set();\\n    }\\n\\n    producedFields() {\\n      var _this$params$as;\\n\\n      return new Set([(_this$params$as = this.params.as) !== null && _this$params$as !== void 0 ? _this$params$as : 'data']);\\n    }\\n\\n    hash() {\\n      return \\\"Hash \\\".concat(hash(this.params));\\n    }\\n\\n    assemble() {\\n      return {\\n        type: 'sequence',\\n        ...this.params\\n      };\\n    }\\n\\n  }\\n\\n  class SourceNode extends DataFlowNode {\\n    constructor(data) {\\n      var _data;\\n\\n      super(null); // source cannot have parent\\n\\n      _defineProperty(this, \\\"_data\\\", void 0);\\n\\n      _defineProperty(this, \\\"_name\\\", void 0);\\n\\n      _defineProperty(this, \\\"_generator\\\", void 0);\\n\\n      data = (_data = data) !== null && _data !== void 0 ? _data : {\\n        name: 'source'\\n      };\\n      let format;\\n\\n      if (!isGenerator(data)) {\\n        format = data.format ? { ...omit(data.format, ['parse'])\\n        } : {};\\n      }\\n\\n      if (isInlineData(data)) {\\n        this._data = {\\n          values: data.values\\n        };\\n      } else if (isUrlData(data)) {\\n        this._data = {\\n          url: data.url\\n        };\\n\\n        if (!format.type) {\\n          // Extract extension from URL using snippet from\\n          // http://stackoverflow.com/questions/680929/how-to-extract-extension-from-filename-string-in-javascript\\n          let defaultExtension = /(?:\\\\.([^.]+))?$/.exec(data.url)[1];\\n\\n          if (!contains(['json', 'csv', 'tsv', 'dsv', 'topojson'], defaultExtension)) {\\n            defaultExtension = 'json';\\n          } // defaultExtension has type string but we ensure that it is DataFormatType above\\n\\n\\n          format.type = defaultExtension;\\n        }\\n      } else if (isSphereGenerator(data)) {\\n        // hardwire GeoJSON sphere data into output specification\\n        this._data = {\\n          values: [{\\n            type: 'Sphere'\\n          }]\\n        };\\n      } else if (isNamedData(data) || isGenerator(data)) {\\n        this._data = {};\\n      } // set flag to check if generator\\n\\n\\n      this._generator = isGenerator(data); // any dataset can be named\\n\\n      if (data.name) {\\n        this._name = data.name;\\n      }\\n\\n      if (format && !isEmpty(format)) {\\n        this._data.format = format;\\n      }\\n    }\\n\\n    dependentFields() {\\n      return new Set();\\n    }\\n\\n    producedFields() {\\n      return undefined; // we don't know what this source produces\\n    }\\n\\n    get data() {\\n      return this._data;\\n    }\\n\\n    hasName() {\\n      return !!this._name;\\n    }\\n\\n    get isGenerator() {\\n      return this._generator;\\n    }\\n\\n    get dataName() {\\n      return this._name;\\n    }\\n\\n    set dataName(name) {\\n      this._name = name;\\n    }\\n\\n    set parent(parent) {\\n      throw new Error('Source nodes have to be roots.');\\n    }\\n\\n    remove() {\\n      throw new Error('Source nodes are roots and cannot be removed.');\\n    }\\n\\n    hash() {\\n      throw new Error('Cannot hash sources');\\n    }\\n\\n    assemble() {\\n      return {\\n        name: this._name,\\n        ...this._data,\\n        transform: []\\n      };\\n    }\\n\\n  }\\n\\n  /**\\n   * Whether this dataflow node is the source of the dataflow that produces data i.e. a source or a generator.\\n   */\\n\\n  function isDataSourceNode(node) {\\n    return node instanceof SourceNode || node instanceof GraticuleNode || node instanceof SequenceNode;\\n  }\\n  /**\\n   * Abstract base class for Dataflow optimizers.\\n   * Contains only mutation handling logic. Subclasses need to implement iteration logic.\\n   */\\n\\n  var _modified = new WeakMap();\\n\\n  class Optimizer {\\n    constructor() {\\n      _modified.set(this, {\\n        writable: true,\\n        value: void 0\\n      });\\n\\n      _classPrivateFieldSet(this, _modified, false);\\n    } // Once true, #modified is never set to false\\n\\n\\n    setModified() {\\n      _classPrivateFieldSet(this, _modified, true);\\n    }\\n\\n    get modifiedFlag() {\\n      return _classPrivateFieldGet(this, _modified);\\n    }\\n    /**\\n     * Run the optimization for the tree with the provided root.\\n     */\\n\\n\\n  }\\n  /**\\n   * Starts from a node and runs the optimization function (the \\\"run\\\" method) upwards to the root,\\n   * depending on the continue and modified flag values returned by the optimization function.\\n   */\\n\\n  class BottomUpOptimizer extends Optimizer {\\n    /**\\n     * Run the optimizer at the node. This method should not change the parent of the passed in node (it should only affect children).\\n     */\\n\\n    /**\\n     * Compute a map of node depths that we can use to determine a topological sort order.\\n     */\\n    getNodeDepths(node, depth, depths) {\\n      depths.set(node, depth);\\n\\n      for (const child of node.children) {\\n        this.getNodeDepths(child, depth + 1, depths);\\n      }\\n\\n      return depths;\\n    }\\n    /**\\n     * Run the optimizer on all nodes starting from the leaves.\\n     */\\n\\n\\n    optimize(node) {\\n      const depths = this.getNodeDepths(node, 0, new Map());\\n      const topologicalSort = [...depths.entries()].sort((a, b) => b[1] - a[1]);\\n\\n      for (const tuple of topologicalSort) {\\n        this.run(tuple[0]);\\n      }\\n\\n      return this.modifiedFlag;\\n    }\\n\\n  }\\n  /**\\n   * The optimizer function (the \\\"run\\\" method), is invoked on the given node and then continues recursively.\\n   */\\n\\n  class TopDownOptimizer extends Optimizer {\\n    /**\\n     * Run the optimizer at the node.\\n     */\\n\\n    /**\\n     * Run the optimizer depth first on all nodes starting from the roots.\\n     */\\n    optimize(node) {\\n      this.run(node);\\n\\n      for (const child of node.children) {\\n        this.optimize(child);\\n      }\\n\\n      return this.modifiedFlag;\\n    }\\n\\n  }\\n\\n  /**\\n   * Merge identical nodes at forks by comparing hashes.\\n   *\\n   * Does not need to iterate from leaves so we implement this with recursion as it's a bit simpler.\\n   */\\n\\n  class MergeIdenticalNodes extends TopDownOptimizer {\\n    mergeNodes(parent, nodes) {\\n      const mergedNode = nodes.shift();\\n\\n      for (const node of nodes) {\\n        parent.removeChild(node);\\n        node.parent = mergedNode;\\n        node.remove();\\n      }\\n    }\\n\\n    run(node) {\\n      const hashes = node.children.map(x => x.hash());\\n      const buckets = {};\\n\\n      for (let i = 0; i < hashes.length; i++) {\\n        if (buckets[hashes[i]] === undefined) {\\n          buckets[hashes[i]] = [node.children[i]];\\n        } else {\\n          buckets[hashes[i]].push(node.children[i]);\\n        }\\n      }\\n\\n      for (const k of keys(buckets)) {\\n        if (buckets[k].length > 1) {\\n          this.setModified();\\n          this.mergeNodes(node, buckets[k]);\\n        }\\n      }\\n    }\\n\\n  }\\n  /**\\n   * Optimizer that removes identifier nodes that are not needed for selections.\\n   */\\n\\n  class RemoveUnnecessaryIdentifierNodes extends TopDownOptimizer {\\n    constructor(model) {\\n      super();\\n\\n      _defineProperty(this, \\\"requiresSelectionId\\\", void 0);\\n\\n      this.requiresSelectionId = model && requiresSelectionId(model);\\n    }\\n\\n    run(node) {\\n      if (node instanceof IdentifierNode) {\\n        // Only preserve IdentifierNodes if we have default discrete selections\\n        // in our model tree, and if the nodes come after tuple producing nodes.\\n        if (!(this.requiresSelectionId && (isDataSourceNode(node.parent) || node.parent instanceof AggregateNode || node.parent instanceof ParseNode))) {\\n          this.setModified();\\n          node.remove();\\n        }\\n      }\\n    }\\n\\n  }\\n  /**\\n   * Removes duplicate time unit nodes (as determined by the name of the output field) that may be generated due to\\n   * selections projected over time units. Only keeps the first time unit in any branch.\\n   *\\n   * This optimizer is a custom top down optimizer that keep track of produced fields in a branch.\\n   */\\n\\n  class RemoveDuplicateTimeUnits extends Optimizer {\\n    optimize(node) {\\n      this.run(node, new Set());\\n      return this.modifiedFlag;\\n    }\\n\\n    run(node, timeUnitFields) {\\n      let producedFields = new Set();\\n\\n      if (node instanceof TimeUnitNode) {\\n        producedFields = node.producedFields();\\n\\n        if (hasIntersection(producedFields, timeUnitFields)) {\\n          this.setModified();\\n          node.removeFormulas(timeUnitFields);\\n\\n          if (node.producedFields.length === 0) {\\n            node.remove();\\n          }\\n        }\\n      }\\n\\n      for (const child of node.children) {\\n        this.run(child, new Set([...timeUnitFields, ...producedFields]));\\n      }\\n    }\\n\\n  }\\n  /**\\n   * Remove output nodes that are not required.\\n   */\\n\\n  class RemoveUnnecessaryOutputNodes extends TopDownOptimizer {\\n    constructor() {\\n      super();\\n    }\\n\\n    run(node) {\\n      if (node instanceof OutputNode && !node.isRequired()) {\\n        this.setModified();\\n        node.remove();\\n      }\\n    }\\n\\n  }\\n  /**\\n   * Move parse nodes up to forks and merges them if possible.\\n   */\\n\\n  class MoveParseUp extends BottomUpOptimizer {\\n    run(node) {\\n      if (isDataSourceNode(node)) {\\n        return;\\n      }\\n\\n      if (node.numChildren() > 1) {\\n        // Don't move parse further up but continue with parent.\\n        return;\\n      }\\n\\n      for (const child of node.children) {\\n        if (child instanceof ParseNode) {\\n          if (node instanceof ParseNode) {\\n            this.setModified();\\n            node.merge(child);\\n          } else {\\n            // Don't swap with nodes that produce something that the parse node depends on (e.g. lookup).\\n            if (fieldIntersection(node.producedFields(), child.dependentFields())) {\\n              continue;\\n            }\\n\\n            this.setModified();\\n            child.swapWithParent();\\n          }\\n        }\\n      }\\n\\n      return;\\n    }\\n\\n  }\\n  /**\\n   * Inserts an intermediate ParseNode containing all non-conflicting parse fields and removes the empty ParseNodes.\\n   *\\n   * We assume that dependent paths that do not have a parse node can be just merged.\\n   */\\n\\n  class MergeParse extends BottomUpOptimizer {\\n    run(node) {\\n      const originalChildren = [...node.children];\\n      const parseChildren = node.children.filter(child => child instanceof ParseNode);\\n\\n      if (node.numChildren() > 1 && parseChildren.length >= 1) {\\n        const commonParse = {};\\n        const conflictingParse = new Set();\\n\\n        for (const parseNode of parseChildren) {\\n          const parse = parseNode.parse;\\n\\n          for (const k of keys(parse)) {\\n            if (!(k in commonParse)) {\\n              commonParse[k] = parse[k];\\n            } else if (commonParse[k] !== parse[k]) {\\n              conflictingParse.add(k);\\n            }\\n          }\\n        }\\n\\n        for (const field of conflictingParse) {\\n          delete commonParse[field];\\n        }\\n\\n        if (!isEmpty(commonParse)) {\\n          this.setModified();\\n          const mergedParseNode = new ParseNode(node, commonParse);\\n\\n          for (const childNode of originalChildren) {\\n            if (childNode instanceof ParseNode) {\\n              for (const key of keys(commonParse)) {\\n                delete childNode.parse[key];\\n              }\\n            }\\n\\n            node.removeChild(childNode);\\n            childNode.parent = mergedParseNode; // remove empty parse nodes\\n\\n            if (childNode instanceof ParseNode && keys(childNode.parse).length === 0) {\\n              childNode.remove();\\n            }\\n          }\\n        }\\n      }\\n    }\\n\\n  }\\n  /**\\n   * Repeatedly remove leaf nodes that are not output or facet nodes.\\n   * The reason is that we don't need subtrees that don't have any output nodes.\\n   * Facet nodes are needed for the row or column domains.\\n   */\\n\\n  class RemoveUnusedSubtrees extends BottomUpOptimizer {\\n    run(node) {\\n      if (node instanceof OutputNode || node.numChildren() > 0 || node instanceof FacetNode) ; else if (node instanceof SourceNode) ; else {\\n        this.setModified();\\n        node.remove();\\n      }\\n    }\\n\\n  }\\n  /**\\n   * Merge adjacent time unit nodes.\\n   */\\n\\n  class MergeTimeUnits extends BottomUpOptimizer {\\n    run(node) {\\n      const timeUnitChildren = node.children.filter(x => x instanceof TimeUnitNode);\\n      const combination = timeUnitChildren.pop();\\n\\n      for (const timeUnit of timeUnitChildren) {\\n        this.setModified();\\n        combination.merge(timeUnit);\\n      }\\n    }\\n\\n  }\\n  class MergeAggregates extends BottomUpOptimizer {\\n    run(node) {\\n      const aggChildren = node.children.filter(child => child instanceof AggregateNode); // Object which we'll use to map the fields which an aggregate is grouped by to\\n      // the set of aggregates with that grouping. This is useful as only aggregates\\n      // with the same group by can be merged\\n\\n      const groupedAggregates = {}; // Build groupedAggregates\\n\\n      for (const agg of aggChildren) {\\n        const groupBys = hash(agg.groupBy);\\n\\n        if (!(groupBys in groupedAggregates)) {\\n          groupedAggregates[groupBys] = [];\\n        }\\n\\n        groupedAggregates[groupBys].push(agg);\\n      } // Merge aggregateNodes with same key in groupedAggregates\\n\\n\\n      for (const group of keys(groupedAggregates)) {\\n        const mergeableAggs = groupedAggregates[group];\\n\\n        if (mergeableAggs.length > 1) {\\n          const mergedAggs = mergeableAggs.pop();\\n\\n          for (const agg of mergeableAggs) {\\n            if (mergedAggs.merge(agg)) {\\n              node.removeChild(agg);\\n              agg.parent = mergedAggs;\\n              agg.remove();\\n              this.setModified();\\n            }\\n          }\\n        }\\n      }\\n    }\\n\\n  }\\n  /**\\n   * Merge bin nodes and move them up through forks. Stop at filters, parse, identifier as we want them to stay before the bin node.\\n   */\\n\\n  class MergeBins extends BottomUpOptimizer {\\n    constructor(model) {\\n      super();\\n      this.model = model;\\n    }\\n\\n    run(node) {\\n      const moveBinsUp = !(isDataSourceNode(node) || node instanceof FilterNode || node instanceof ParseNode || node instanceof IdentifierNode);\\n      const promotableBins = [];\\n      const remainingBins = [];\\n\\n      for (const child of node.children) {\\n        if (child instanceof BinNode) {\\n          if (moveBinsUp && !fieldIntersection(node.producedFields(), child.dependentFields())) {\\n            promotableBins.push(child);\\n          } else {\\n            remainingBins.push(child);\\n          }\\n        }\\n      }\\n\\n      if (promotableBins.length > 0) {\\n        const promotedBin = promotableBins.pop();\\n\\n        for (const bin of promotableBins) {\\n          promotedBin.merge(bin, this.model.renameSignal.bind(this.model));\\n        }\\n\\n        this.setModified();\\n\\n        if (node instanceof BinNode) {\\n          node.merge(promotedBin, this.model.renameSignal.bind(this.model));\\n        } else {\\n          promotedBin.swapWithParent();\\n        }\\n      }\\n\\n      if (remainingBins.length > 1) {\\n        const remainingBin = remainingBins.pop();\\n\\n        for (const bin of remainingBins) {\\n          remainingBin.merge(bin, this.model.renameSignal.bind(this.model));\\n        }\\n\\n        this.setModified();\\n      }\\n    }\\n\\n  }\\n  /**\\n   * This optimizer takes output nodes that are at a fork and moves them before the fork.\\n   *\\n   * The algorithm iterates over the children and tries to find the last output node in a chain of output nodes.\\n   * It then moves all output nodes before that main output node. All other children (and the children of the output nodes)\\n   * are inserted after the main output node.\\n   */\\n\\n  class MergeOutputs extends BottomUpOptimizer {\\n    run(node) {\\n      const children = [...node.children];\\n      const hasOutputChild = some(children, child => child instanceof OutputNode);\\n\\n      if (!hasOutputChild || node.numChildren() <= 1) {\\n        return;\\n      }\\n\\n      const otherChildren = []; // The output node we will connect all other nodes to.\\n      // Output nodes will be added before the new node, other nodes after.\\n\\n      let mainOutput;\\n\\n      for (const child of children) {\\n        if (child instanceof OutputNode) {\\n          let lastOutput = child;\\n\\n          while (lastOutput.numChildren() === 1) {\\n            const [theChild] = lastOutput.children;\\n\\n            if (theChild instanceof OutputNode) {\\n              lastOutput = theChild;\\n            } else {\\n              break;\\n            }\\n          }\\n\\n          otherChildren.push(...lastOutput.children);\\n\\n          if (mainOutput) {\\n            // Move the output nodes before the mainOutput. We do this by setting\\n            // the parent of the first not to the parent of the main output and\\n            // the main output's parent to the last output.\\n            // note: the child is the first output\\n            node.removeChild(child);\\n            child.parent = mainOutput.parent;\\n            mainOutput.parent.removeChild(mainOutput);\\n            mainOutput.parent = lastOutput;\\n            this.setModified();\\n          } else {\\n            mainOutput = lastOutput;\\n          }\\n        } else {\\n          otherChildren.push(child);\\n        }\\n      }\\n\\n      if (otherChildren.length) {\\n        this.setModified();\\n\\n        for (const child of otherChildren) {\\n          child.parent.removeChild(child);\\n          child.parent = mainOutput;\\n        }\\n      }\\n    }\\n\\n  }\\n\\n  /**\\n   * A class for the join aggregate transform nodes.\\n   */\\n\\n  class JoinAggregateTransformNode extends DataFlowNode {\\n    clone() {\\n      return new JoinAggregateTransformNode(null, duplicate(this.transform));\\n    }\\n\\n    constructor(parent, transform) {\\n      super(parent);\\n      this.transform = transform;\\n    }\\n\\n    addDimensions(fields) {\\n      this.transform.groupby = unique(this.transform.groupby.concat(fields), d => d);\\n    }\\n\\n    dependentFields() {\\n      const out = new Set();\\n\\n      if (this.transform.groupby) {\\n        this.transform.groupby.forEach(out.add, out);\\n      }\\n\\n      this.transform.joinaggregate.map(w => w.field).filter(f => f !== undefined).forEach(out.add, out);\\n      return out;\\n    }\\n\\n    producedFields() {\\n      return new Set(this.transform.joinaggregate.map(this.getDefaultName));\\n    }\\n\\n    getDefaultName(joinAggregateFieldDef) {\\n      var _joinAggregateFieldDe;\\n\\n      return (_joinAggregateFieldDe = joinAggregateFieldDef.as) !== null && _joinAggregateFieldDe !== void 0 ? _joinAggregateFieldDe : vgField(joinAggregateFieldDef);\\n    }\\n\\n    hash() {\\n      return \\\"JoinAggregateTransform \\\".concat(hash(this.transform));\\n    }\\n\\n    assemble() {\\n      const fields = [];\\n      const ops = [];\\n      const as = [];\\n\\n      for (const joinaggregate of this.transform.joinaggregate) {\\n        ops.push(joinaggregate.op);\\n        as.push(this.getDefaultName(joinaggregate));\\n        fields.push(joinaggregate.field === undefined ? null : joinaggregate.field);\\n      }\\n\\n      const groupby = this.transform.groupby;\\n      return {\\n        type: 'joinaggregate',\\n        as,\\n        ops,\\n        fields,\\n        ...(groupby !== undefined ? {\\n          groupby\\n        } : {})\\n      };\\n    }\\n\\n  }\\n\\n  function getStackByFields(model) {\\n    return model.stack.stackBy.reduce((fields, by) => {\\n      const fieldDef = by.fieldDef;\\n\\n      const _field = vgField(fieldDef);\\n\\n      if (_field) {\\n        fields.push(_field);\\n      }\\n\\n      return fields;\\n    }, []);\\n  }\\n\\n  function isValidAsArray(as) {\\n    return isArray(as) && as.every(s => isString(s)) && as.length > 1;\\n  }\\n\\n  class StackNode extends DataFlowNode {\\n    clone() {\\n      return new StackNode(null, duplicate(this._stack));\\n    }\\n\\n    constructor(parent, stack) {\\n      super(parent);\\n\\n      _defineProperty(this, \\\"_stack\\\", void 0);\\n\\n      this._stack = stack;\\n    }\\n\\n    static makeFromTransform(parent, stackTransform) {\\n      const {\\n        stack,\\n        groupby,\\n        as,\\n        offset = 'zero'\\n      } = stackTransform;\\n      const sortFields = [];\\n      const sortOrder = [];\\n\\n      if (stackTransform.sort !== undefined) {\\n        for (const sortField of stackTransform.sort) {\\n          sortFields.push(sortField.field);\\n          sortOrder.push(getFirstDefined(sortField.order, 'ascending'));\\n        }\\n      }\\n\\n      const sort = {\\n        field: sortFields,\\n        order: sortOrder\\n      };\\n      let normalizedAs;\\n\\n      if (isValidAsArray(as)) {\\n        normalizedAs = as;\\n      } else if (isString(as)) {\\n        normalizedAs = [as, as + '_end'];\\n      } else {\\n        normalizedAs = [stackTransform.stack + '_start', stackTransform.stack + '_end'];\\n      }\\n\\n      return new StackNode(parent, {\\n        stackField: stack,\\n        groupby,\\n        offset,\\n        sort,\\n        facetby: [],\\n        as: normalizedAs\\n      });\\n    }\\n\\n    static makeFromEncoding(parent, model) {\\n      const stackProperties = model.stack;\\n      const {\\n        encoding\\n      } = model;\\n\\n      if (!stackProperties) {\\n        return null;\\n      }\\n\\n      const {\\n        groupbyChannel,\\n        fieldChannel,\\n        offset,\\n        impute\\n      } = stackProperties;\\n      let dimensionFieldDef;\\n\\n      if (groupbyChannel) {\\n        const cDef = encoding[groupbyChannel];\\n        dimensionFieldDef = getFieldDef(cDef); // Fair to cast as groupByChannel is always either x or y\\n      }\\n\\n      const stackby = getStackByFields(model);\\n      const orderDef = model.encoding.order;\\n      let sort;\\n\\n      if (isArray(orderDef) || isFieldDef(orderDef)) {\\n        sort = sortParams(orderDef);\\n      } else {\\n        // default = descending by stackFields\\n        // FIXME is the default here correct for binned fields?\\n        sort = stackby.reduce((s, field) => {\\n          s.field.push(field);\\n          s.order.push(fieldChannel === 'y' ? 'descending' : 'ascending');\\n          return s;\\n        }, {\\n          field: [],\\n          order: []\\n        });\\n      }\\n\\n      return new StackNode(parent, {\\n        dimensionFieldDef,\\n        stackField: model.vgField(fieldChannel),\\n        facetby: [],\\n        stackby,\\n        sort,\\n        offset,\\n        impute,\\n        as: [model.vgField(fieldChannel, {\\n          suffix: 'start',\\n          forAs: true\\n        }), model.vgField(fieldChannel, {\\n          suffix: 'end',\\n          forAs: true\\n        })]\\n      });\\n    }\\n\\n    get stack() {\\n      return this._stack;\\n    }\\n\\n    addDimensions(fields) {\\n      this._stack.facetby.push(...fields);\\n    }\\n\\n    dependentFields() {\\n      const out = new Set();\\n      out.add(this._stack.stackField);\\n      this.getGroupbyFields().forEach(out.add, out);\\n\\n      this._stack.facetby.forEach(out.add, out);\\n\\n      this._stack.sort.field.forEach(out.add, out);\\n\\n      return out;\\n    }\\n\\n    producedFields() {\\n      return new Set(this._stack.as);\\n    }\\n\\n    hash() {\\n      return \\\"Stack \\\".concat(hash(this._stack));\\n    }\\n\\n    getGroupbyFields() {\\n      const {\\n        dimensionFieldDef,\\n        impute,\\n        groupby\\n      } = this._stack;\\n\\n      if (dimensionFieldDef) {\\n        if (dimensionFieldDef.bin) {\\n          if (impute) {\\n            // For binned group by field with impute, we calculate bin_mid\\n            // as we cannot impute two fields simultaneously\\n            return [vgField(dimensionFieldDef, {\\n              binSuffix: 'mid'\\n            })];\\n          }\\n\\n          return [// For binned group by field without impute, we need both bin (start) and bin_end\\n          vgField(dimensionFieldDef, {}), vgField(dimensionFieldDef, {\\n            binSuffix: 'end'\\n          })];\\n        }\\n\\n        return [vgField(dimensionFieldDef)];\\n      }\\n\\n      return groupby !== null && groupby !== void 0 ? groupby : [];\\n    }\\n\\n    assemble() {\\n      const transform = [];\\n      const {\\n        facetby,\\n        dimensionFieldDef,\\n        stackField: field,\\n        stackby,\\n        sort,\\n        offset,\\n        impute,\\n        as\\n      } = this._stack; // Impute\\n\\n      if (impute && dimensionFieldDef) {\\n        const {\\n          band = 0.5,\\n          bin\\n        } = dimensionFieldDef;\\n\\n        if (bin) {\\n          // As we can only impute one field at a time, we need to calculate\\n          // mid point for a binned field\\n          transform.push({\\n            type: 'formula',\\n            expr: \\\"\\\".concat(band, \\\"*\\\") + vgField(dimensionFieldDef, {\\n              expr: 'datum'\\n            }) + \\\"+\\\".concat(1 - band, \\\"*\\\") + vgField(dimensionFieldDef, {\\n              expr: 'datum',\\n              binSuffix: 'end'\\n            }),\\n            as: vgField(dimensionFieldDef, {\\n              binSuffix: 'mid',\\n              forAs: true\\n            })\\n          });\\n        }\\n\\n        transform.push({\\n          type: 'impute',\\n          field,\\n          groupby: [...stackby, ...facetby],\\n          key: vgField(dimensionFieldDef, {\\n            binSuffix: 'mid'\\n          }),\\n          method: 'value',\\n          value: 0\\n        });\\n      } // Stack\\n\\n\\n      transform.push({\\n        type: 'stack',\\n        groupby: [...this.getGroupbyFields(), ...facetby],\\n        field,\\n        sort,\\n        as,\\n        offset\\n      });\\n      return transform;\\n    }\\n\\n  }\\n\\n  /**\\n   * A class for the window transform nodes\\n   */\\n\\n  class WindowTransformNode extends DataFlowNode {\\n    clone() {\\n      return new WindowTransformNode(null, duplicate(this.transform));\\n    }\\n\\n    constructor(parent, transform) {\\n      super(parent);\\n      this.transform = transform;\\n    }\\n\\n    addDimensions(fields) {\\n      this.transform.groupby = unique(this.transform.groupby.concat(fields), d => d);\\n    }\\n\\n    dependentFields() {\\n      var _this$transform$group, _this$transform$sort;\\n\\n      const out = new Set();\\n      ((_this$transform$group = this.transform.groupby) !== null && _this$transform$group !== void 0 ? _this$transform$group : []).forEach(out.add, out);\\n      ((_this$transform$sort = this.transform.sort) !== null && _this$transform$sort !== void 0 ? _this$transform$sort : []).forEach(m => out.add(m.field));\\n      this.transform.window.map(w => w.field).filter(f => f !== undefined).forEach(out.add, out);\\n      return out;\\n    }\\n\\n    producedFields() {\\n      return new Set(this.transform.window.map(this.getDefaultName));\\n    }\\n\\n    getDefaultName(windowFieldDef) {\\n      var _windowFieldDef$as;\\n\\n      return (_windowFieldDef$as = windowFieldDef.as) !== null && _windowFieldDef$as !== void 0 ? _windowFieldDef$as : vgField(windowFieldDef);\\n    }\\n\\n    hash() {\\n      return \\\"WindowTransform \\\".concat(hash(this.transform));\\n    }\\n\\n    assemble() {\\n      const fields = [];\\n      const ops = [];\\n      const as = [];\\n      const params = [];\\n\\n      for (const window of this.transform.window) {\\n        ops.push(window.op);\\n        as.push(this.getDefaultName(window));\\n        params.push(window.param === undefined ? null : window.param);\\n        fields.push(window.field === undefined ? null : window.field);\\n      }\\n\\n      const frame = this.transform.frame;\\n      const groupby = this.transform.groupby;\\n\\n      if (frame && frame[0] === null && frame[1] === null && ops.every(o => isAggregateOp(o))) {\\n        // when the window does not rely on any particular window ops or frame, switch to a simpler and more efficient joinaggregate\\n        return {\\n          type: 'joinaggregate',\\n          as,\\n          ops: ops,\\n          fields,\\n          ...(groupby !== undefined ? {\\n            groupby\\n          } : {})\\n        };\\n      }\\n\\n      const sortFields = [];\\n      const sortOrder = [];\\n\\n      if (this.transform.sort !== undefined) {\\n        for (const sortField of this.transform.sort) {\\n          var _sortField$order;\\n\\n          sortFields.push(sortField.field);\\n          sortOrder.push((_sortField$order = sortField.order) !== null && _sortField$order !== void 0 ? _sortField$order : 'ascending');\\n        }\\n      }\\n\\n      const sort = {\\n        field: sortFields,\\n        order: sortOrder\\n      };\\n      const ignorePeers = this.transform.ignorePeers;\\n      return {\\n        type: 'window',\\n        params,\\n        as,\\n        ops,\\n        fields,\\n        sort,\\n        ...(ignorePeers !== undefined ? {\\n          ignorePeers\\n        } : {}),\\n        ...(groupby !== undefined ? {\\n          groupby\\n        } : {}),\\n        ...(frame !== undefined ? {\\n          frame\\n        } : {})\\n      };\\n    }\\n\\n  }\\n\\n  /**\\n   * Clones the subtree and ignores output nodes except for the leaves, which are renamed.\\n   */\\n\\n  function cloneSubtree(facet) {\\n    function clone(node) {\\n      if (!(node instanceof FacetNode)) {\\n        const copy = node.clone();\\n\\n        if (copy instanceof OutputNode) {\\n          const newName = FACET_SCALE_PREFIX + copy.getSource();\\n          copy.setSource(newName);\\n          facet.model.component.data.outputNodes[newName] = copy;\\n        } else if (copy instanceof AggregateNode || copy instanceof StackNode || copy instanceof WindowTransformNode || copy instanceof JoinAggregateTransformNode) {\\n          copy.addDimensions(facet.fields);\\n        }\\n\\n        for (const n of node.children.flatMap(clone)) {\\n          n.parent = copy;\\n        }\\n\\n        return [copy];\\n      }\\n\\n      return node.children.flatMap(clone);\\n    }\\n\\n    return clone;\\n  }\\n  /**\\n   * Move facet nodes down to the next fork or output node. Also pull the main output with the facet node.\\n   * After moving down the facet node, make a copy of the subtree and make it a child of the main output.\\n   */\\n\\n\\n  function moveFacetDown(node) {\\n    if (node instanceof FacetNode) {\\n      if (node.numChildren() === 1 && !(node.children[0] instanceof OutputNode)) {\\n        // move down until we hit a fork or output node\\n        const child = node.children[0];\\n\\n        if (child instanceof AggregateNode || child instanceof StackNode || child instanceof WindowTransformNode || child instanceof JoinAggregateTransformNode) {\\n          child.addDimensions(node.fields);\\n        }\\n\\n        child.swapWithParent();\\n        moveFacetDown(node);\\n      } else {\\n        // move main to facet\\n        const facetMain = node.model.component.data.main;\\n        moveMainDownToFacet(facetMain); // replicate the subtree and place it before the facet's main node\\n\\n        const cloner = cloneSubtree(node);\\n        const copy = node.children.map(cloner).flat();\\n\\n        for (const c of copy) {\\n          c.parent = facetMain;\\n        }\\n      }\\n    } else {\\n      node.children.map(moveFacetDown);\\n    }\\n  }\\n\\n  function moveMainDownToFacet(node) {\\n    if (node instanceof OutputNode && node.type === DataSourceType.Main) {\\n      if (node.numChildren() === 1) {\\n        const child = node.children[0];\\n\\n        if (!(child instanceof FacetNode)) {\\n          child.swapWithParent();\\n          moveMainDownToFacet(node);\\n        }\\n      }\\n    }\\n  }\\n\\n  const FACET_SCALE_PREFIX = 'scale_';\\n  const MAX_OPTIMIZATION_RUNS = 5;\\n  /**\\n   * Iterates over a dataflow graph and checks whether all links are consistent.\\n   */\\n\\n  function checkLinks(nodes) {\\n    for (const node of nodes) {\\n      for (const child of node.children) {\\n        if (child.parent !== node) {\\n          // log.error('Dataflow graph is inconsistent.', node, child);\\n          return false;\\n        }\\n      }\\n\\n      if (!checkLinks(node.children)) {\\n        return false;\\n      }\\n    }\\n\\n    return true;\\n  }\\n  /**\\n   * Run the specified optimizer on the provided nodes.\\n   *\\n   * @param optimizer The optimizer instance to run.\\n   * @param nodes A set of nodes to optimize.\\n   */\\n\\n  function runOptimizer(optimizer, nodes) {\\n    let modified = false;\\n\\n    for (const node of nodes) {\\n      modified = optimizer.optimize(node) || modified;\\n    }\\n\\n    return modified;\\n  }\\n\\n  function optimizationDataflowHelper(dataComponent, model, firstPass) {\\n    let roots = dataComponent.sources;\\n    let modified = false;\\n    modified = runOptimizer(new RemoveUnnecessaryOutputNodes(), roots) || modified;\\n    modified = runOptimizer(new RemoveUnnecessaryIdentifierNodes(model), roots) || modified; // remove source nodes that don't have any children because they also don't have output nodes\\n\\n    roots = roots.filter(r => r.numChildren() > 0);\\n    modified = runOptimizer(new RemoveUnusedSubtrees(), roots) || modified;\\n    roots = roots.filter(r => r.numChildren() > 0);\\n\\n    if (!firstPass) {\\n      // Only run these optimizations after the optimizer has moved down the facet node.\\n      // With this change, we can be more aggressive in the optimizations.\\n      modified = runOptimizer(new MoveParseUp(), roots) || modified;\\n      modified = runOptimizer(new MergeBins(model), roots) || modified;\\n      modified = runOptimizer(new RemoveDuplicateTimeUnits(), roots) || modified;\\n      modified = runOptimizer(new MergeParse(), roots) || modified;\\n      modified = runOptimizer(new MergeAggregates(), roots) || modified;\\n      modified = runOptimizer(new MergeTimeUnits(), roots) || modified;\\n      modified = runOptimizer(new MergeIdenticalNodes(), roots) || modified;\\n      modified = runOptimizer(new MergeOutputs(), roots) || modified;\\n    }\\n\\n    dataComponent.sources = roots;\\n    return modified;\\n  }\\n  /**\\n   * Optimizes the dataflow of the passed in data component.\\n   */\\n\\n\\n  function optimizeDataflow(data, model) {\\n    // check before optimizations\\n    checkLinks(data.sources);\\n    let firstPassCounter = 0;\\n    let secondPassCounter = 0;\\n\\n    for (let i = 0; i < MAX_OPTIMIZATION_RUNS; i++) {\\n      if (!optimizationDataflowHelper(data, model, true)) {\\n        break;\\n      }\\n\\n      firstPassCounter++;\\n    } // move facets down and make a copy of the subtree so that we can have scales at the top level\\n\\n\\n    data.sources.map(moveFacetDown);\\n\\n    for (let i = 0; i < MAX_OPTIMIZATION_RUNS; i++) {\\n      if (!optimizationDataflowHelper(data, model, false)) {\\n        break;\\n      }\\n\\n      secondPassCounter++;\\n    } // check after optimizations\\n\\n\\n    checkLinks(data.sources);\\n\\n    if (Math.max(firstPassCounter, secondPassCounter) === MAX_OPTIMIZATION_RUNS) {\\n      warn(\\\"Maximum optimization runs(\\\".concat(MAX_OPTIMIZATION_RUNS, \\\") reached.\\\"));\\n    }\\n  }\\n\\n  /**\\n   * A class that behaves like a SignalRef but lazily generates the signal.\\n   * The provided generator function should use `Model.getSignalName` to use the correct signal name.\\n   */\\n  class SignalRefWrapper {\\n    constructor(exprGenerator) {\\n      _defineProperty(this, \\\"signal\\\", void 0);\\n\\n      Object.defineProperty(this, 'signal', {\\n        enumerable: true,\\n        get: exprGenerator\\n      });\\n    }\\n\\n    // for ts\\n    static fromName(rename, signalName) {\\n      return new SignalRefWrapper(() => rename(signalName));\\n    }\\n\\n  }\\n\\n  function parseScaleDomain(model) {\\n    if (isUnitModel(model)) {\\n      parseUnitScaleDomain(model);\\n    } else {\\n      parseNonUnitScaleDomain(model);\\n    }\\n  }\\n\\n  function parseUnitScaleDomain(model) {\\n    const localScaleComponents = model.component.scales;\\n\\n    for (const channel of keys(localScaleComponents)) {\\n      const domains = parseDomainForChannel(model, channel);\\n      const localScaleCmpt = localScaleComponents[channel];\\n      localScaleCmpt.setWithExplicit('domains', domains);\\n      parseSelectionDomain(model, channel);\\n\\n      if (model.component.data.isFaceted) {\\n        // get resolve from closest facet parent as this decides whether we need to refer to cloned subtree or not\\n        let facetParent = model;\\n\\n        while (!isFacetModel(facetParent) && facetParent.parent) {\\n          facetParent = facetParent.parent;\\n        }\\n\\n        const resolve = facetParent.component.resolve.scale[channel];\\n\\n        if (resolve === 'shared') {\\n          for (const domain of domains.value) {\\n            // Replace the scale domain with data output from a cloned subtree after the facet.\\n            if (isDataRefDomain(domain)) {\\n              // use data from cloned subtree (which is the same as data but with a prefix added once)\\n              domain.data = FACET_SCALE_PREFIX + domain.data.replace(FACET_SCALE_PREFIX, '');\\n            }\\n          }\\n        }\\n      }\\n    }\\n  }\\n\\n  function parseNonUnitScaleDomain(model) {\\n    for (const child of model.children) {\\n      parseScaleDomain(child);\\n    }\\n\\n    const localScaleComponents = model.component.scales;\\n\\n    for (const channel of keys(localScaleComponents)) {\\n      let domains;\\n      let selectionExtent = null;\\n\\n      for (const child of model.children) {\\n        const childComponent = child.component.scales[channel];\\n\\n        if (childComponent) {\\n          if (domains === undefined) {\\n            domains = childComponent.getWithExplicit('domains');\\n          } else {\\n            domains = mergeValuesWithExplicit(domains, childComponent.getWithExplicit('domains'), 'domains', 'scale', domainsTieBreaker);\\n          }\\n\\n          const se = childComponent.get('selectionExtent');\\n\\n          if (selectionExtent && se && selectionExtent.selection !== se.selection) {\\n            warn(NEEDS_SAME_SELECTION);\\n          }\\n\\n          selectionExtent = se;\\n        }\\n      }\\n\\n      localScaleComponents[channel].setWithExplicit('domains', domains);\\n\\n      if (selectionExtent) {\\n        localScaleComponents[channel].set('selectionExtent', selectionExtent, true);\\n      }\\n    }\\n  }\\n  /**\\n   * Remove unaggregated domain if it is not applicable\\n   * Add unaggregated domain if domain is not specified and config.scale.useUnaggregatedDomain is true.\\n   */\\n\\n\\n  function normalizeUnaggregatedDomain(domain, fieldDef, scaleType, scaleConfig) {\\n    if (domain === 'unaggregated') {\\n      const {\\n        valid,\\n        reason\\n      } = canUseUnaggregatedDomain(fieldDef, scaleType);\\n\\n      if (!valid) {\\n        warn(reason);\\n        return undefined;\\n      }\\n    } else if (domain === undefined && scaleConfig.useUnaggregatedDomain) {\\n      // Apply config if domain is not specified.\\n      const {\\n        valid\\n      } = canUseUnaggregatedDomain(fieldDef, scaleType);\\n\\n      if (valid) {\\n        return 'unaggregated';\\n      }\\n    }\\n\\n    return domain;\\n  }\\n\\n  function parseDomainForChannel(model, channel) {\\n    const scaleType = model.getScaleComponent(channel).get('type');\\n    const {\\n      encoding\\n    } = model;\\n    const domain = normalizeUnaggregatedDomain(model.scaleDomain(channel), model.typedFieldDef(channel), scaleType, model.config.scale);\\n\\n    if (domain !== model.scaleDomain(channel)) {\\n      model.specifiedScales[channel] = { ...model.specifiedScales[channel],\\n        domain\\n      };\\n    } // If channel is either X or Y then union them with X2 & Y2 if they exist\\n\\n\\n    if (channel === 'x' && getFieldOrDatumDef(encoding.x2)) {\\n      if (getFieldOrDatumDef(encoding.x)) {\\n        return mergeValuesWithExplicit(parseSingleChannelDomain(scaleType, domain, model, 'x'), parseSingleChannelDomain(scaleType, domain, model, 'x2'), 'domain', 'scale', domainsTieBreaker);\\n      } else {\\n        return parseSingleChannelDomain(scaleType, domain, model, 'x2');\\n      }\\n    } else if (channel === 'y' && getFieldOrDatumDef(encoding.y2)) {\\n      if (getFieldOrDatumDef(encoding.y)) {\\n        return mergeValuesWithExplicit(parseSingleChannelDomain(scaleType, domain, model, 'y'), parseSingleChannelDomain(scaleType, domain, model, 'y2'), 'domain', 'scale', domainsTieBreaker);\\n      } else {\\n        return parseSingleChannelDomain(scaleType, domain, model, 'y2');\\n      }\\n    }\\n\\n    return parseSingleChannelDomain(scaleType, domain, model, channel);\\n  }\\n\\n  function mapDomainToDataSignal(domain, type, timeUnit) {\\n    return domain.map(v => {\\n      const data = valueExpr(v, {\\n        timeUnit,\\n        type\\n      });\\n      return {\\n        signal: \\\"{data: \\\".concat(data, \\\"}\\\")\\n      };\\n    });\\n  }\\n\\n  function convertDomainIfItIsDateTime(domain, type, timeUnit) {\\n    var _normalizeTimeUnit;\\n\\n    // explicit value\\n    const normalizedTimeUnit = (_normalizeTimeUnit = normalizeTimeUnit(timeUnit)) === null || _normalizeTimeUnit === void 0 ? void 0 : _normalizeTimeUnit.unit;\\n\\n    if (type === 'temporal' || normalizedTimeUnit) {\\n      return mapDomainToDataSignal(domain, type, normalizedTimeUnit);\\n    }\\n\\n    return [domain]; // Date time won't make sense\\n  }\\n\\n  function parseSingleChannelDomain(scaleType, domain, model, channel) {\\n    const {\\n      encoding\\n    } = model;\\n    const fieldOrDatumDef = getFieldOrDatumDef(encoding[channel]);\\n    const {\\n      type\\n    } = fieldOrDatumDef;\\n    const timeUnit = fieldOrDatumDef['timeUnit'];\\n\\n    if (isDomainUnionWith(domain)) {\\n      const defaultDomain = parseSingleChannelDomain(scaleType, undefined, model, channel);\\n      const unionWith = convertDomainIfItIsDateTime(domain.unionWith, type, timeUnit);\\n      return makeExplicit([...defaultDomain.value, ...unionWith]);\\n    } else if (isSignalRef(domain)) {\\n      return makeExplicit([domain]);\\n    } else if (domain && domain !== 'unaggregated' && !isSelectionDomain(domain)) {\\n      return makeExplicit(convertDomainIfItIsDateTime(domain, type, timeUnit));\\n    }\\n\\n    const stack = model.stack;\\n\\n    if (stack && channel === stack.fieldChannel) {\\n      if (stack.offset === 'normalize') {\\n        return makeImplicit([[0, 1]]);\\n      }\\n\\n      const data = model.requestDataName(DataSourceType.Main);\\n      return makeImplicit([{\\n        data,\\n        field: model.vgField(channel, {\\n          suffix: 'start'\\n        })\\n      }, {\\n        data,\\n        field: model.vgField(channel, {\\n          suffix: 'end'\\n        })\\n      }]);\\n    }\\n\\n    const sort = isScaleChannel(channel) && isFieldDef(fieldOrDatumDef) ? domainSort(model, channel, scaleType) : undefined;\\n\\n    if (isDatumDef(fieldOrDatumDef)) {\\n      const d = convertDomainIfItIsDateTime([fieldOrDatumDef.datum], type, timeUnit);\\n      return makeImplicit(d);\\n    }\\n\\n    const fieldDef = fieldOrDatumDef; // now we can be sure it's a fieldDef\\n\\n    if (domain === 'unaggregated') {\\n      const data = model.requestDataName(DataSourceType.Main);\\n      const {\\n        field\\n      } = fieldOrDatumDef;\\n      return makeImplicit([{\\n        data,\\n        field: vgField({\\n          field,\\n          aggregate: 'min'\\n        })\\n      }, {\\n        data,\\n        field: vgField({\\n          field,\\n          aggregate: 'max'\\n        })\\n      }]);\\n    } else if (isBinning(fieldDef.bin)) {\\n      if (hasDiscreteDomain(scaleType)) {\\n        if (scaleType === 'bin-ordinal') {\\n          // we can omit the domain as it is inferred from the `bins` property\\n          return makeImplicit([]);\\n        } // ordinal bin scale takes domain from bin_range, ordered by bin start\\n        // This is useful for both axis-based scale (x/y) and legend-based scale (other channels).\\n\\n\\n        return makeImplicit([{\\n          // If sort by aggregation of a specified sort field, we need to use RAW table,\\n          // so we can aggregate values for the scale independently from the main aggregation.\\n          data: isBoolean$1(sort) ? model.requestDataName(DataSourceType.Main) : model.requestDataName(DataSourceType.Raw),\\n          // Use range if we added it and the scale does not support computing a range as a signal.\\n          field: model.vgField(channel, binRequiresRange(fieldDef, channel) ? {\\n            binSuffix: 'range'\\n          } : {}),\\n          // we have to use a sort object if sort = true to make the sort correct by bin start\\n          sort: sort === true || !isObject(sort) ? {\\n            field: model.vgField(channel, {}),\\n            op: 'min' // min or max doesn't matter since we sort by the start of the bin range\\n\\n          } : sort\\n        }]);\\n      } else {\\n        // continuous scales\\n        const {\\n          bin\\n        } = fieldDef;\\n\\n        if (isBinning(bin)) {\\n          const binSignal = getBinSignalName(model, fieldDef.field, bin);\\n          return makeImplicit([new SignalRefWrapper(() => {\\n            const signal = model.getSignalName(binSignal);\\n            return \\\"[\\\".concat(signal, \\\".start, \\\").concat(signal, \\\".stop]\\\");\\n          })]);\\n        } else {\\n          return makeImplicit([{\\n            data: model.requestDataName(DataSourceType.Main),\\n            field: model.vgField(channel, {})\\n          }]);\\n        }\\n      }\\n    } else if (fieldDef.timeUnit && contains(['time', 'utc'], scaleType) && hasBand(channel, fieldDef, isUnitModel(model) ? model.encoding[getSecondaryRangeChannel(channel)] : undefined, model.stack, model.markDef, model.config)) {\\n      const data = model.requestDataName(DataSourceType.Main);\\n      return makeImplicit([{\\n        data,\\n        field: model.vgField(channel)\\n      }, {\\n        data,\\n        field: model.vgField(channel, {\\n          suffix: 'end'\\n        })\\n      }]);\\n    } else if (sort) {\\n      return makeImplicit([{\\n        // If sort by aggregation of a specified sort field, we need to use RAW table,\\n        // so we can aggregate values for the scale independently from the main aggregation.\\n        data: isBoolean$1(sort) ? model.requestDataName(DataSourceType.Main) : model.requestDataName(DataSourceType.Raw),\\n        field: model.vgField(channel),\\n        sort: sort\\n      }]);\\n    } else {\\n      return makeImplicit([{\\n        data: model.requestDataName(DataSourceType.Main),\\n        field: model.vgField(channel)\\n      }]);\\n    }\\n  }\\n\\n  function normalizeSortField(sort, isStackedMeasure) {\\n    const {\\n      op,\\n      field,\\n      order\\n    } = sort;\\n    return {\\n      // Apply default op\\n      op: op !== null && op !== void 0 ? op : isStackedMeasure ? 'sum' : DEFAULT_SORT_OP,\\n      // flatten nested fields\\n      ...(field ? {\\n        field: replacePathInField(field)\\n      } : {}),\\n      ...(order ? {\\n        order\\n      } : {})\\n    };\\n  }\\n\\n  function parseSelectionDomain(model, channel) {\\n    var _model$fieldDef;\\n\\n    const scale = model.component.scales[channel];\\n    const spec = model.specifiedScales[channel].domain;\\n    const bin = (_model$fieldDef = model.fieldDef(channel)) === null || _model$fieldDef === void 0 ? void 0 : _model$fieldDef.bin;\\n    const domain = isSelectionDomain(spec) && spec;\\n    const extent = isBinParams(bin) && isSelectionExtent(bin.extent) && bin.extent;\\n\\n    if (domain || extent) {\\n      // As scale parsing occurs before selection parsing, we cannot set\\n      // domainRaw directly. So instead, we store the selectionExtent on\\n      // the scale component, and then add domainRaw during scale assembly.\\n      scale.set('selectionExtent', domain !== null && domain !== void 0 ? domain : extent, true);\\n    }\\n  }\\n\\n  function domainSort(model, channel, scaleType) {\\n    if (!hasDiscreteDomain(scaleType)) {\\n      return undefined;\\n    } // save to cast as the only exception is the geojson type for shape, which would not generate a scale\\n\\n\\n    const fieldDef = model.fieldDef(channel);\\n    const sort = fieldDef.sort; // if the sort is specified with array, use the derived sort index field\\n\\n    if (isSortArray(sort)) {\\n      return {\\n        op: 'min',\\n        field: sortArrayIndexField(fieldDef, channel),\\n        order: 'ascending'\\n      };\\n    }\\n\\n    const {\\n      stack\\n    } = model;\\n    const stackDimensions = stack ? [...(stack.groupbyField ? [stack.groupbyField] : []), ...stack.stackBy.map(s => s.fieldDef.field)] : undefined; // Sorted based on an aggregate calculation over a specified sort field (only for ordinal scale)\\n\\n    if (isSortField(sort)) {\\n      const isStackedMeasure = stack && !contains(stackDimensions, sort.field);\\n      return normalizeSortField(sort, isStackedMeasure);\\n    } else if (isSortByEncoding(sort)) {\\n      const {\\n        encoding,\\n        order\\n      } = sort;\\n      const fieldDefToSortBy = model.fieldDef(encoding);\\n      const {\\n        aggregate,\\n        field\\n      } = fieldDefToSortBy;\\n      const isStackedMeasure = stack && !contains(stackDimensions, field);\\n\\n      if (isArgminDef(aggregate) || isArgmaxDef(aggregate)) {\\n        return normalizeSortField({\\n          field: vgField(fieldDefToSortBy),\\n          order\\n        }, isStackedMeasure);\\n      } else if (isAggregateOp(aggregate) || !aggregate) {\\n        return normalizeSortField({\\n          op: aggregate,\\n          // can't be argmin/argmax since we don't support them in encoding field def\\n          field,\\n          order\\n        }, isStackedMeasure);\\n      }\\n    } else if (sort === 'descending') {\\n      return {\\n        op: 'min',\\n        field: model.vgField(channel),\\n        order: 'descending'\\n      };\\n    } else if (contains(['ascending', undefined\\n    /* default =ascending*/\\n    ], sort)) {\\n      return true;\\n    } // sort == null\\n\\n\\n    return undefined;\\n  }\\n  /**\\n   * Determine if a scale can use unaggregated domain.\\n   * @return {Boolean} Returns true if all of the following conditions apply:\\n   * 1. `scale.domain` is `unaggregated`\\n   * 2. Aggregation function is not `count` or `sum`\\n   * 3. The scale is quantitative or time scale.\\n   */\\n\\n  function canUseUnaggregatedDomain(fieldDef, scaleType) {\\n    const {\\n      aggregate,\\n      type\\n    } = fieldDef;\\n\\n    if (!aggregate) {\\n      return {\\n        valid: false,\\n        reason: unaggregateDomainHasNoEffectForRawField(fieldDef)\\n      };\\n    }\\n\\n    if (isString(aggregate) && !SHARED_DOMAIN_OP_INDEX[aggregate]) {\\n      return {\\n        valid: false,\\n        reason: unaggregateDomainWithNonSharedDomainOp(aggregate)\\n      };\\n    }\\n\\n    if (type === 'quantitative') {\\n      if (scaleType === 'log') {\\n        return {\\n          valid: false,\\n          reason: unaggregatedDomainWithLogScale(fieldDef)\\n        };\\n      }\\n    }\\n\\n    return {\\n      valid: true\\n    };\\n  }\\n  /**\\n   * Tie breaker for mergeValuesWithExplicit for domains. We concat the specified values.\\n   */\\n\\n  function domainsTieBreaker(v1, v2, property, propertyOf) {\\n    if (v1.explicit && v2.explicit) {\\n      warn(mergeConflictingDomainProperty(property, propertyOf, v1.value, v2.value));\\n    } // If equal score, concat the domains so that we union them later.\\n\\n\\n    return {\\n      explicit: v1.explicit,\\n      value: [...v1.value, ...v2.value]\\n    };\\n  }\\n  /**\\n   * Converts an array of domains to a single Vega scale domain.\\n   */\\n\\n\\n  function mergeDomains(domains) {\\n    const uniqueDomains = unique(domains.map(domain => {\\n      // ignore sort property when computing the unique domains\\n      if (isDataRefDomain(domain)) {\\n        const {\\n          sort: _s,\\n          ...domainWithoutSort\\n        } = domain;\\n        return domainWithoutSort;\\n      }\\n\\n      return domain;\\n    }), hash);\\n    const sorts = unique(domains.map(d => {\\n      if (isDataRefDomain(d)) {\\n        const s = d.sort;\\n\\n        if (s !== undefined && !isBoolean$1(s)) {\\n          if ('op' in s && s.op === 'count') {\\n            // let's make sure that if op is count, we don't use a field\\n            delete s.field;\\n          }\\n\\n          if (s.order === 'ascending') {\\n            // drop order: ascending as it is the default\\n            delete s.order;\\n          }\\n        }\\n\\n        return s;\\n      }\\n\\n      return undefined;\\n    }).filter(s => s !== undefined), hash);\\n\\n    if (uniqueDomains.length === 0) {\\n      return undefined;\\n    } else if (uniqueDomains.length === 1) {\\n      const domain = domains[0];\\n\\n      if (isDataRefDomain(domain) && sorts.length > 0) {\\n        let sort = sorts[0];\\n\\n        if (sorts.length > 1) {\\n          warn(MORE_THAN_ONE_SORT);\\n          sort = true;\\n        } else {\\n          // Simplify domain sort by removing field and op when the field is the same as the domain field.\\n          if (isObject(sort) && 'field' in sort) {\\n            const sortField = sort.field;\\n\\n            if (domain.field === sortField) {\\n              sort = sort.order ? {\\n                order: sort.order\\n              } : true;\\n            }\\n          }\\n        }\\n\\n        return { ...domain,\\n          sort\\n        };\\n      }\\n\\n      return domain;\\n    } // only keep sort properties that work with unioned domains\\n\\n\\n    const unionDomainSorts = unique(sorts.map(s => {\\n      if (isBoolean$1(s) || !('op' in s) || isString(s.op) && s.op in MULTIDOMAIN_SORT_OP_INDEX) {\\n        return s;\\n      }\\n\\n      warn(domainSortDropped(s));\\n      return true;\\n    }), hash);\\n    let sort;\\n\\n    if (unionDomainSorts.length === 1) {\\n      sort = unionDomainSorts[0];\\n    } else if (unionDomainSorts.length > 1) {\\n      warn(MORE_THAN_ONE_SORT);\\n      sort = true;\\n    }\\n\\n    const allData = unique(domains.map(d => {\\n      if (isDataRefDomain(d)) {\\n        return d.data;\\n      }\\n\\n      return null;\\n    }), x => x);\\n\\n    if (allData.length === 1 && allData[0] !== null) {\\n      // create a union domain of different fields with a single data source\\n      const domain = {\\n        data: allData[0],\\n        fields: uniqueDomains.map(d => d.field),\\n        ...(sort ? {\\n          sort\\n        } : {})\\n      };\\n      return domain;\\n    }\\n\\n    return {\\n      fields: uniqueDomains,\\n      ...(sort ? {\\n        sort\\n      } : {})\\n    };\\n  }\\n  /**\\n   * Return a field if a scale uses a single field.\\n   * Return `undefined` otherwise.\\n   */\\n\\n  function getFieldFromDomain(domain) {\\n    if (isDataRefDomain(domain) && isString(domain.field)) {\\n      return domain.field;\\n    } else if (isDataRefUnionedDomain(domain)) {\\n      let field;\\n\\n      for (const nonUnionDomain of domain.fields) {\\n        if (isDataRefDomain(nonUnionDomain) && isString(nonUnionDomain.field)) {\\n          if (!field) {\\n            field = nonUnionDomain.field;\\n          } else if (field !== nonUnionDomain.field) {\\n            warn(FACETED_INDEPENDENT_DIFFERENT_SOURCES);\\n            return field;\\n          }\\n        }\\n      }\\n\\n      warn(FACETED_INDEPENDENT_SAME_FIELDS_DIFFERENT_SOURCES);\\n      return field;\\n    } else if (isFieldRefUnionDomain(domain)) {\\n      warn(FACETED_INDEPENDENT_SAME_SOURCE);\\n      const field = domain.fields[0];\\n      return isString(field) ? field : undefined;\\n    }\\n\\n    return undefined;\\n  }\\n  function assembleDomain(model, channel) {\\n    const scaleComponent = model.component.scales[channel];\\n    const domains = scaleComponent.get('domains').map(domain => {\\n      // Correct references to data as the original domain's data was determined\\n      // in parseScale, which happens before parseData. Thus the original data\\n      // reference can be incorrect.\\n      if (isDataRefDomain(domain)) {\\n        domain.data = model.lookupDataSource(domain.data);\\n      }\\n\\n      return domain;\\n    }); // domains is an array that has to be merged into a single vega domain\\n\\n    return mergeDomains(domains);\\n  }\\n\\n  function assembleScales(model) {\\n    if (isLayerModel(model) || isConcatModel(model)) {\\n      // For concat and layer, include scales of children too\\n      return model.children.reduce((scales, child) => {\\n        return scales.concat(assembleScales(child));\\n      }, assembleScalesForModel(model));\\n    } else {\\n      // For facet, child scales would not be included in the parent's scope.\\n      // For unit, there is no child.\\n      return assembleScalesForModel(model);\\n    }\\n  }\\n  function assembleScalesForModel(model) {\\n    return keys(model.component.scales).reduce((scales, channel) => {\\n      const scaleComponent = model.component.scales[channel];\\n\\n      if (scaleComponent.merged) {\\n        // Skipped merged scales\\n        return scales;\\n      }\\n\\n      const scale = scaleComponent.combine();\\n      const {\\n        name,\\n        type,\\n        selectionExtent,\\n        domains: _d,\\n        range: _r,\\n        reverse,\\n        ...otherScaleProps\\n      } = scale;\\n      const range = assembleScaleRange(scale.range, name, channel, model);\\n      let domainRaw;\\n\\n      if (selectionExtent) {\\n        domainRaw = assembleSelectionScaleDomain(model, selectionExtent);\\n      }\\n\\n      const domain = assembleDomain(model, channel);\\n      scales.push({\\n        name,\\n        type,\\n        ...(domain ? {\\n          domain\\n        } : {}),\\n        ...(domainRaw ? {\\n          domainRaw\\n        } : {}),\\n        range,\\n        ...(reverse !== undefined ? {\\n          reverse: reverse\\n        } : {}),\\n        ...otherScaleProps\\n      });\\n      return scales;\\n    }, []);\\n  }\\n  function assembleScaleRange(scaleRange, scaleName, channel, model) {\\n    // add signals to x/y range\\n    if (isXorY(channel)) {\\n      if (isVgRangeStep(scaleRange)) {\\n        // For width/height step, use a signal created in layout assemble instead of a constant step.\\n        return {\\n          step: {\\n            signal: scaleName + '_step'\\n          }\\n        };\\n      }\\n    } else if (isObject(scaleRange) && isDataRefDomain(scaleRange)) {\\n      return { ...scaleRange,\\n        data: model.lookupDataSource(scaleRange.data)\\n      };\\n    }\\n\\n    return scaleRange;\\n  }\\n\\n  /**\\n   * All VgDomain property except domain.\\n   * (We exclude domain as we have a special \\\"domains\\\" array that allow us merge them all at once in assemble.)\\n   */\\n\\n  class ScaleComponent extends Split {\\n    constructor(name, typeWithExplicit) {\\n      super({}, // no initial explicit property\\n      {\\n        name\\n      } // name as initial implicit property\\n      );\\n\\n      _defineProperty(this, \\\"merged\\\", false);\\n\\n      this.setWithExplicit('type', typeWithExplicit);\\n    }\\n    /**\\n     * Whether the scale definitely includes zero in the domain\\n     */\\n\\n\\n    domainDefinitelyIncludesZero() {\\n      if (this.get('zero') !== false) {\\n        return true;\\n      }\\n\\n      return some(this.get('domains'), d => isArray(d) && d.length === 2 && d[0] <= 0 && d[1] >= 0);\\n    }\\n\\n  }\\n\\n  const RANGE_PROPERTIES = ['range', 'scheme'];\\n\\n  function getSizeChannel$1(channel) {\\n    return channel === 'x' ? 'width' : channel === 'y' ? 'height' : undefined;\\n  }\\n\\n  function parseUnitScaleRange(model) {\\n    const localScaleComponents = model.component.scales; // use SCALE_CHANNELS instead of scales[channel] to ensure that x, y come first!\\n\\n    for (const channel of SCALE_CHANNELS) {\\n      const localScaleCmpt = localScaleComponents[channel];\\n\\n      if (!localScaleCmpt) {\\n        continue;\\n      }\\n\\n      const rangeWithExplicit = parseRangeForChannel(channel, model);\\n      localScaleCmpt.setWithExplicit('range', rangeWithExplicit);\\n    }\\n  }\\n\\n  function getBinStepSignal(model, channel) {\\n    const fieldDef = model.fieldDef(channel);\\n\\n    if (fieldDef && fieldDef.bin && isBinning(fieldDef.bin)) {\\n      const binSignal = getBinSignalName(model, fieldDef.field, fieldDef.bin); // TODO: extract this to be range step signal\\n\\n      const sizeType = getSizeChannel$1(channel);\\n      const sizeSignal = model.getName(sizeType);\\n      return new SignalRefWrapper(() => {\\n        const updatedName = model.getSignalName(binSignal);\\n        const binCount = \\\"(\\\".concat(updatedName, \\\".stop - \\\").concat(updatedName, \\\".start) / \\\").concat(updatedName, \\\".step\\\");\\n        return \\\"\\\".concat(model.getSignalName(sizeSignal), \\\" / (\\\").concat(binCount, \\\")\\\");\\n      });\\n    }\\n\\n    return undefined;\\n  }\\n  /**\\n   * Return mixins that includes one of the Vega range types (explicit range, range.step, range.scheme).\\n   */\\n\\n\\n  function parseRangeForChannel(channel, model) {\\n    const specifiedScale = model.specifiedScales[channel];\\n    const {\\n      size\\n    } = model;\\n    const mergedScaleCmpt = model.getScaleComponent(channel);\\n    const scaleType = mergedScaleCmpt.get('type'); // Check if any of the range properties is specified.\\n    // If so, check if it is compatible and make sure that we only output one of the properties\\n\\n    for (const property of RANGE_PROPERTIES) {\\n      if (specifiedScale[property] !== undefined) {\\n        const supportedByScaleType = scaleTypeSupportProperty(scaleType, property);\\n        const channelIncompatability = channelScalePropertyIncompatability(channel, property);\\n\\n        if (!supportedByScaleType) {\\n          warn(scalePropertyNotWorkWithScaleType(scaleType, property, channel));\\n        } else if (channelIncompatability) {\\n          // channel\\n          warn(channelIncompatability);\\n        } else {\\n          switch (property) {\\n            case 'range':\\n              {\\n                const range = specifiedScale.range;\\n\\n                if (isArray(range)) {\\n                  if (isXorY(channel)) {\\n                    return makeExplicit(range.map(v => {\\n                      if (v === 'width' || v === 'height') {\\n                        // get signal for width/height\\n                        // Just like default range logic below, we use SignalRefWrapper to account for potential merges and renames.\\n                        const sizeSignal = model.getName(v);\\n                        const getSignalName = model.getSignalName.bind(model);\\n                        return SignalRefWrapper.fromName(getSignalName, sizeSignal);\\n                      }\\n\\n                      return v;\\n                    }));\\n                  }\\n                } else if (isObject(range)) {\\n                  return makeExplicit({\\n                    data: model.requestDataName(DataSourceType.Main),\\n                    field: range.field,\\n                    sort: {\\n                      op: 'min',\\n                      field: model.vgField(channel)\\n                    }\\n                  });\\n                }\\n\\n                return makeExplicit(range);\\n              }\\n\\n            case 'scheme':\\n              return makeExplicit(parseScheme(specifiedScale[property]));\\n          }\\n        }\\n      }\\n    }\\n\\n    if (channel === X || channel === Y) {\\n      const sizeChannel = channel === X ? 'width' : 'height';\\n      const sizeValue = size[sizeChannel];\\n\\n      if (isStep(sizeValue)) {\\n        if (hasDiscreteDomain(scaleType)) {\\n          return makeExplicit({\\n            step: sizeValue.step\\n          });\\n        } else {\\n          warn(stepDropped(sizeChannel));\\n        }\\n      }\\n    }\\n\\n    const {\\n      rangeMin,\\n      rangeMax\\n    } = specifiedScale;\\n    const d = defaultRange(channel, model);\\n\\n    if ((rangeMin !== undefined || rangeMax !== undefined) && // it's ok to check just rangeMin's compatibility since rangeMin/rangeMax are the same\\n    scaleTypeSupportProperty(scaleType, 'rangeMin') && isArray(d) && d.length === 2) {\\n      return makeExplicit([rangeMin !== null && rangeMin !== void 0 ? rangeMin : d[0], rangeMax !== null && rangeMax !== void 0 ? rangeMax : d[1]]);\\n    }\\n\\n    return makeImplicit(d);\\n  }\\n\\n  function parseScheme(scheme) {\\n    if (isExtendedScheme(scheme)) {\\n      return {\\n        scheme: scheme.name,\\n        ...omit(scheme, ['name'])\\n      };\\n    }\\n\\n    return {\\n      scheme: scheme\\n    };\\n  }\\n\\n  function defaultRange(channel, model) {\\n    const {\\n      size,\\n      config,\\n      mark,\\n      encoding\\n    } = model;\\n    const getSignalName = model.getSignalName.bind(model);\\n    const {\\n      type\\n    } = getFieldOrDatumDef(encoding[channel]);\\n    const mergedScaleCmpt = model.getScaleComponent(channel);\\n    const scaleType = mergedScaleCmpt.get('type');\\n    const {\\n      domain,\\n      domainMid\\n    } = model.specifiedScales[channel];\\n\\n    switch (channel) {\\n      case X:\\n      case Y:\\n        {\\n          // If there is no explicit width/height for discrete x/y scales\\n          if (contains(['point', 'band'], scaleType)) {\\n            if (channel === X && !size.width) {\\n              const w = getViewConfigDiscreteSize(config.view, 'width');\\n\\n              if (isStep(w)) {\\n                return w;\\n              }\\n            } else if (channel === Y && !size.height) {\\n              const h = getViewConfigDiscreteSize(config.view, 'height');\\n\\n              if (isStep(h)) {\\n                return h;\\n              }\\n            }\\n          } // If step is null, use zero to width or height.\\n          // Note that we use SignalRefWrapper to account for potential merges and renames.\\n\\n\\n          const sizeType = getSizeChannel$1(channel);\\n          const sizeSignal = model.getName(sizeType);\\n\\n          if (channel === Y && hasContinuousDomain(scaleType)) {\\n            // For y continuous scale, we have to start from the height as the bottom part has the max value.\\n            return [SignalRefWrapper.fromName(getSignalName, sizeSignal), 0];\\n          } else {\\n            return [0, SignalRefWrapper.fromName(getSignalName, sizeSignal)];\\n          }\\n        }\\n\\n      case SIZE:\\n        {\\n          // TODO: support custom rangeMin, rangeMax\\n          const zero = model.component.scales[channel].get('zero');\\n          const rangeMin = sizeRangeMin(mark, zero, config);\\n          const rangeMax = sizeRangeMax(mark, size, model, config);\\n\\n          if (isContinuousToDiscrete(scaleType)) {\\n            return interpolateRange(rangeMin, rangeMax, defaultContinuousToDiscreteCount(scaleType, config, domain, channel));\\n          } else {\\n            return [rangeMin, rangeMax];\\n          }\\n        }\\n\\n      case THETA:\\n        return [0, Math.PI * 2];\\n\\n      case ANGLE:\\n        // TODO: add config.scale.min/maxAngleDegree (for point and text) and config.scale.min/maxAngleRadian (for arc) once we add arc marks.\\n        // (It's weird to add just config.scale.min/maxAngleDegree for now)\\n        return [0, 360];\\n\\n      case RADIUS:\\n        {\\n          // max radius = half od min(width,height)\\n          return [0, new SignalRefWrapper(() => {\\n            const w = model.getSignalName('width');\\n            const h = model.getSignalName('height');\\n            return \\\"min(\\\".concat(w, \\\",\\\").concat(h, \\\")/2\\\");\\n          })];\\n        }\\n\\n      case STROKEWIDTH:\\n        // TODO: support custom rangeMin, rangeMax\\n        return [config.scale.minStrokeWidth, config.scale.maxStrokeWidth];\\n\\n      case STROKEDASH:\\n        return [// TODO: add this to Vega's config.range?\\n        [1, 0], [4, 2], [2, 1], [1, 1], [1, 2, 4, 2]];\\n\\n      case SHAPE:\\n        return 'symbol';\\n\\n      case COLOR:\\n      case FILL:\\n      case STROKE:\\n        if (scaleType === 'ordinal') {\\n          // Only nominal data uses ordinal scale by default\\n          return type === 'nominal' ? 'category' : 'ordinal';\\n        } else {\\n          if (domainMid !== undefined) {\\n            return 'diverging';\\n          } else {\\n            return mark === 'rect' || mark === 'geoshape' ? 'heatmap' : 'ramp';\\n          }\\n        }\\n\\n      case OPACITY:\\n      case FILLOPACITY:\\n      case STROKEOPACITY:\\n        // TODO: support custom rangeMin, rangeMax\\n        return [config.scale.minOpacity, config.scale.maxOpacity];\\n    }\\n    /* istanbul ignore next: should never reach here */\\n\\n\\n    throw new Error(\\\"Scale range undefined for channel \\\".concat(channel));\\n  }\\n\\n  function defaultContinuousToDiscreteCount(scaleType, config, domain, channel) {\\n    switch (scaleType) {\\n      case 'quantile':\\n        return config.scale.quantileCount;\\n\\n      case 'quantize':\\n        return config.scale.quantizeCount;\\n\\n      case 'threshold':\\n        if (domain !== undefined && isArray(domain)) {\\n          return domain.length + 1;\\n        } else {\\n          warn(domainRequiredForThresholdScale(channel)); // default threshold boundaries for threshold scale since domain has cardinality of 2\\n\\n          return 3;\\n        }\\n\\n    }\\n  }\\n  /**\\n   * Returns the linear interpolation of the range according to the cardinality\\n   *\\n   * @param rangeMin start of the range\\n   * @param rangeMax end of the range\\n   * @param cardinality number of values in the output range\\n   */\\n\\n  function interpolateRange(rangeMin, rangeMax, cardinality) {\\n    // always return a signal since it's better to compute the sequence in Vega later\\n    const f = () => {\\n      const rMax = signalOrStringValue(rangeMax);\\n      const rMin = signalOrStringValue(rangeMin);\\n      const step = \\\"(\\\".concat(rMax, \\\" - \\\").concat(rMin, \\\") / (\\\").concat(cardinality, \\\" - 1)\\\");\\n      return \\\"sequence(\\\".concat(rMin, \\\", \\\").concat(rMax, \\\" + \\\").concat(step, \\\", \\\").concat(step, \\\")\\\");\\n    };\\n\\n    if (isSignalRef(rangeMax)) {\\n      return new SignalRefWrapper(f);\\n    } else {\\n      return {\\n        signal: f()\\n      };\\n    }\\n  }\\n\\n  function sizeRangeMin(mark, zero, config) {\\n    if (zero) {\\n      if (isSignalRef(zero)) {\\n        return {\\n          signal: \\\"\\\".concat(zero.signal, \\\" ? 0 : \\\").concat(sizeRangeMin(mark, false, config))\\n        };\\n      } else {\\n        return 0;\\n      }\\n    }\\n\\n    switch (mark) {\\n      case 'bar':\\n      case 'tick':\\n        return config.scale.minBandSize;\\n\\n      case 'line':\\n      case 'trail':\\n      case 'rule':\\n        return config.scale.minStrokeWidth;\\n\\n      case 'text':\\n        return config.scale.minFontSize;\\n\\n      case 'point':\\n      case 'square':\\n      case 'circle':\\n        return config.scale.minSize;\\n    }\\n    /* istanbul ignore next: should never reach here */\\n    // sizeRangeMin not implemented for the mark\\n\\n\\n    throw new Error(incompatibleChannel('size', mark));\\n  }\\n\\n  const MAX_SIZE_RANGE_STEP_RATIO = 0.95;\\n\\n  function sizeRangeMax(mark, size, model, config) {\\n    const xyStepSignals = {\\n      x: getBinStepSignal(model, 'x'),\\n      y: getBinStepSignal(model, 'y')\\n    };\\n\\n    switch (mark) {\\n      case 'bar':\\n      case 'tick':\\n        {\\n          if (config.scale.maxBandSize !== undefined) {\\n            return config.scale.maxBandSize;\\n          }\\n\\n          const min = minXYStep(size, xyStepSignals, config.view);\\n\\n          if (isNumber(min)) {\\n            return min - 1;\\n          } else {\\n            return new SignalRefWrapper(() => \\\"\\\".concat(min.signal, \\\" - 1\\\"));\\n          }\\n        }\\n\\n      case 'line':\\n      case 'trail':\\n      case 'rule':\\n        return config.scale.maxStrokeWidth;\\n\\n      case 'text':\\n        return config.scale.maxFontSize;\\n\\n      case 'point':\\n      case 'square':\\n      case 'circle':\\n        {\\n          if (config.scale.maxSize) {\\n            return config.scale.maxSize;\\n          }\\n\\n          const pointStep = minXYStep(size, xyStepSignals, config.view);\\n\\n          if (isNumber(pointStep)) {\\n            return Math.pow(MAX_SIZE_RANGE_STEP_RATIO * pointStep, 2);\\n          } else {\\n            return new SignalRefWrapper(() => \\\"pow(\\\".concat(MAX_SIZE_RANGE_STEP_RATIO, \\\" * \\\").concat(pointStep.signal, \\\", 2)\\\"));\\n          }\\n        }\\n    }\\n    /* istanbul ignore next: should never reach here */\\n    // sizeRangeMax not implemented for the mark\\n\\n\\n    throw new Error(incompatibleChannel('size', mark));\\n  }\\n  /**\\n   * @returns {number} Range step of x or y or minimum between the two if both are ordinal scale.\\n   */\\n\\n\\n  function minXYStep(size, xyStepSignals, viewConfig) {\\n    const widthStep = isStep(size.width) ? size.width.step : getViewConfigDiscreteStep(viewConfig, 'width');\\n    const heightStep = isStep(size.height) ? size.height.step : getViewConfigDiscreteStep(viewConfig, 'height');\\n\\n    if (xyStepSignals.x || xyStepSignals.y) {\\n      return new SignalRefWrapper(() => {\\n        const exprs = [xyStepSignals.x ? xyStepSignals.x.signal : widthStep, xyStepSignals.y ? xyStepSignals.y.signal : heightStep];\\n        return \\\"min(\\\".concat(exprs.join(', '), \\\")\\\");\\n      });\\n    }\\n\\n    return Math.min(widthStep, heightStep);\\n  }\\n\\n  function parseScaleProperty(model, property) {\\n    if (isUnitModel(model)) {\\n      parseUnitScaleProperty(model, property);\\n    } else {\\n      parseNonUnitScaleProperty(model, property);\\n    }\\n  }\\n\\n  function parseUnitScaleProperty(model, property) {\\n    const localScaleComponents = model.component.scales;\\n    const {\\n      config,\\n      encoding,\\n      markDef,\\n      specifiedScales\\n    } = model;\\n\\n    for (const channel of keys(localScaleComponents)) {\\n      const specifiedScale = specifiedScales[channel];\\n      const localScaleCmpt = localScaleComponents[channel];\\n      const mergedScaleCmpt = model.getScaleComponent(channel);\\n      const fieldOrDatumDef = getFieldOrDatumDef(encoding[channel]);\\n      const specifiedValue = specifiedScale[property];\\n      const scaleType = mergedScaleCmpt.get('type');\\n      const scalePadding = mergedScaleCmpt.get('padding');\\n      const scalePaddingInner = mergedScaleCmpt.get('paddingInner');\\n      const supportedByScaleType = scaleTypeSupportProperty(scaleType, property);\\n      const channelIncompatability = channelScalePropertyIncompatability(channel, property);\\n\\n      if (specifiedValue !== undefined) {\\n        // If there is a specified value, check if it is compatible with scale type and channel\\n        if (!supportedByScaleType) {\\n          warn(scalePropertyNotWorkWithScaleType(scaleType, property, channel));\\n        } else if (channelIncompatability) {\\n          // channel\\n          warn(channelIncompatability);\\n        }\\n      }\\n\\n      if (supportedByScaleType && channelIncompatability === undefined) {\\n        if (specifiedValue !== undefined) {\\n          const timeUnit = fieldOrDatumDef['timeUnit'];\\n          const type = fieldOrDatumDef.type;\\n\\n          switch (property) {\\n            // domainMax/Min to signal if the value is a datetime object\\n            case 'domainMax':\\n            case 'domainMin':\\n              if (isDateTime(specifiedScale[property]) || type === 'temporal' || timeUnit) {\\n                localScaleCmpt.set(property, {\\n                  signal: valueExpr(specifiedScale[property], {\\n                    type,\\n                    timeUnit\\n                  })\\n                }, true);\\n              } else {\\n                localScaleCmpt.set(property, specifiedScale[property], true);\\n              }\\n\\n              break;\\n\\n            default:\\n              localScaleCmpt.copyKeyFromObject(property, specifiedScale);\\n          }\\n        } else {\\n          const value = property in scaleRules ? scaleRules[property]({\\n            model,\\n            channel,\\n            fieldOrDatumDef,\\n            scaleType,\\n            scalePadding,\\n            scalePaddingInner,\\n            domain: specifiedScale.domain,\\n            markDef,\\n            config\\n          }) : config.scale[property];\\n\\n          if (value !== undefined) {\\n            localScaleCmpt.set(property, value, false);\\n          }\\n        }\\n      }\\n    }\\n  }\\n\\n  const scaleRules = {\\n    bins: ({\\n      model,\\n      fieldOrDatumDef\\n    }) => isFieldDef(fieldOrDatumDef) ? bins(model, fieldOrDatumDef) : undefined,\\n    interpolate: ({\\n      channel,\\n      fieldOrDatumDef\\n    }) => interpolate(channel, fieldOrDatumDef.type),\\n    nice: ({\\n      scaleType,\\n      channel,\\n      fieldOrDatumDef\\n    }) => nice(scaleType, channel, fieldOrDatumDef),\\n    padding: ({\\n      channel,\\n      scaleType,\\n      fieldOrDatumDef,\\n      markDef,\\n      config\\n    }) => padding(channel, scaleType, config.scale, fieldOrDatumDef, markDef, config.bar),\\n    paddingInner: ({\\n      scalePadding,\\n      channel,\\n      markDef,\\n      config\\n    }) => paddingInner(scalePadding, channel, markDef.type, config.scale),\\n    paddingOuter: ({\\n      scalePadding,\\n      channel,\\n      scaleType,\\n      markDef,\\n      scalePaddingInner,\\n      config\\n    }) => paddingOuter(scalePadding, channel, scaleType, markDef.type, scalePaddingInner, config.scale),\\n    reverse: ({\\n      fieldOrDatumDef,\\n      scaleType,\\n      channel,\\n      config\\n    }) => {\\n      const sort = isFieldDef(fieldOrDatumDef) ? fieldOrDatumDef.sort : undefined;\\n      return reverse(scaleType, sort, channel, config.scale);\\n    },\\n    zero: ({\\n      channel,\\n      fieldOrDatumDef,\\n      domain,\\n      markDef,\\n      scaleType\\n    }) => zero$1(channel, fieldOrDatumDef, domain, markDef, scaleType)\\n  }; // This method is here rather than in range.ts to avoid circular dependency.\\n\\n  function parseScaleRange(model) {\\n    if (isUnitModel(model)) {\\n      parseUnitScaleRange(model);\\n    } else {\\n      parseNonUnitScaleProperty(model, 'range');\\n    }\\n  }\\n  function parseNonUnitScaleProperty(model, property) {\\n    const localScaleComponents = model.component.scales;\\n\\n    for (const child of model.children) {\\n      if (property === 'range') {\\n        parseScaleRange(child);\\n      } else {\\n        parseScaleProperty(child, property);\\n      }\\n    }\\n\\n    for (const channel of keys(localScaleComponents)) {\\n      let valueWithExplicit;\\n\\n      for (const child of model.children) {\\n        const childComponent = child.component.scales[channel];\\n\\n        if (childComponent) {\\n          const childValueWithExplicit = childComponent.getWithExplicit(property);\\n          valueWithExplicit = mergeValuesWithExplicit(valueWithExplicit, childValueWithExplicit, property, 'scale', tieBreakByComparing((v1, v2) => {\\n            switch (property) {\\n              case 'range':\\n                // For step, prefer larger step\\n                if (v1.step && v2.step) {\\n                  return v1.step - v2.step;\\n                }\\n\\n                return 0;\\n              // TODO: precedence rule for other properties\\n            }\\n\\n            return 0;\\n          }));\\n        }\\n      }\\n\\n      localScaleComponents[channel].setWithExplicit(property, valueWithExplicit);\\n    }\\n  }\\n  function bins(model, fieldDef) {\\n    const bin = fieldDef.bin;\\n\\n    if (isBinning(bin)) {\\n      const binSignal = getBinSignalName(model, fieldDef.field, bin);\\n      return new SignalRefWrapper(() => {\\n        return model.getSignalName(binSignal);\\n      });\\n    } else if (isBinned(bin) && isBinParams(bin) && bin.step !== undefined) {\\n      // start and stop will be determined from the scale domain\\n      return {\\n        step: bin.step\\n      };\\n    }\\n\\n    return undefined;\\n  }\\n  function interpolate(channel, type) {\\n    if (contains([COLOR, FILL, STROKE], channel) && type !== 'nominal') {\\n      return 'hcl';\\n    }\\n\\n    return undefined;\\n  }\\n  function nice(scaleType, channel, fieldOrDatumDef) {\\n    var _getFieldDef;\\n\\n    if (((_getFieldDef = getFieldDef(fieldOrDatumDef)) === null || _getFieldDef === void 0 ? void 0 : _getFieldDef.bin) || contains([ScaleType.TIME, ScaleType.UTC], scaleType)) {\\n      return undefined;\\n    }\\n\\n    return channel in POSITION_SCALE_CHANNEL_INDEX ? true : undefined;\\n  }\\n  function padding(channel, scaleType, scaleConfig, fieldOrDatumDef, markDef, barConfig) {\\n    if (channel in POSITION_SCALE_CHANNEL_INDEX) {\\n      if (isContinuousToContinuous(scaleType)) {\\n        if (scaleConfig.continuousPadding !== undefined) {\\n          return scaleConfig.continuousPadding;\\n        }\\n\\n        const {\\n          type,\\n          orient\\n        } = markDef;\\n\\n        if (type === 'bar' && !(isFieldDef(fieldOrDatumDef) && (fieldOrDatumDef.bin || fieldOrDatumDef.timeUnit))) {\\n          if (orient === 'vertical' && channel === 'x' || orient === 'horizontal' && channel === 'y') {\\n            return barConfig.continuousBandSize;\\n          }\\n        }\\n      }\\n\\n      if (scaleType === ScaleType.POINT) {\\n        return scaleConfig.pointPadding;\\n      }\\n    }\\n\\n    return undefined;\\n  }\\n  function paddingInner(paddingValue, channel, mark, scaleConfig) {\\n    if (paddingValue !== undefined) {\\n      // If user has already manually specified \\\"padding\\\", no need to add default paddingInner.\\n      return undefined;\\n    }\\n\\n    if (channel in POSITION_SCALE_CHANNEL_INDEX) {\\n      // Padding is only set for X and Y by default.\\n      // Basically it doesn't make sense to add padding for color and size.\\n      // paddingOuter would only be called if it's a band scale, just return the default for bandScale.\\n      const {\\n        bandPaddingInner,\\n        barBandPaddingInner,\\n        rectBandPaddingInner\\n      } = scaleConfig;\\n      return getFirstDefined(bandPaddingInner, mark === 'bar' ? barBandPaddingInner : rectBandPaddingInner);\\n    }\\n\\n    return undefined;\\n  }\\n  function paddingOuter(paddingValue, channel, scaleType, mark, paddingInnerValue, scaleConfig) {\\n    if (paddingValue !== undefined) {\\n      // If user has already manually specified \\\"padding\\\", no need to add default paddingOuter.\\n      return undefined;\\n    }\\n\\n    if (channel in POSITION_SCALE_CHANNEL_INDEX) {\\n      // Padding is only set for X and Y by default.\\n      // Basically it doesn't make sense to add padding for color and size.\\n      if (scaleType === ScaleType.BAND) {\\n        const {\\n          bandPaddingOuter\\n        } = scaleConfig;\\n        return getFirstDefined(bandPaddingOuter,\\n        /* By default, paddingOuter is paddingInner / 2. The reason is that\\n          size (width/height) = step * (cardinality - paddingInner + 2 * paddingOuter).\\n          and we want the width/height to be integer by default.\\n          Note that step (by default) and cardinality are integers.) */\\n        isSignalRef(paddingInnerValue) ? {\\n          signal: \\\"\\\".concat(paddingInnerValue.signal, \\\"/2\\\")\\n        } : paddingInnerValue / 2);\\n      }\\n    }\\n\\n    return undefined;\\n  }\\n  function reverse(scaleType, sort, channel, scaleConfig) {\\n    if (channel === 'x' && scaleConfig.xReverse !== undefined) {\\n      if (hasContinuousDomain(scaleType) && sort === 'descending') {\\n        if (isSignalRef(scaleConfig.xReverse)) {\\n          return {\\n            signal: \\\"!\\\".concat(scaleConfig.xReverse.signal)\\n          };\\n        } else {\\n          return !scaleConfig.xReverse;\\n        }\\n      }\\n\\n      return scaleConfig.xReverse;\\n    }\\n\\n    if (hasContinuousDomain(scaleType) && sort === 'descending') {\\n      // For continuous domain scales, Vega does not support domain sort.\\n      // Thus, we reverse range instead if sort is descending\\n      return true;\\n    }\\n\\n    return undefined;\\n  }\\n  function zero$1(channel, fieldDef, specifiedDomain, markDef, scaleType) {\\n    // If users explicitly provide a domain range, we should not augment zero as that will be unexpected.\\n    const hasCustomDomain = !!specifiedDomain && specifiedDomain !== 'unaggregated';\\n\\n    if (hasCustomDomain) {\\n      if (hasContinuousDomain(scaleType)) {\\n        if (isArray(specifiedDomain)) {\\n          const first = specifiedDomain[0];\\n          const last = specifiedDomain[specifiedDomain.length - 1];\\n\\n          if (first <= 0 && last >= 0) {\\n            // if the domain includes zero, make zero remains true\\n            return true;\\n          }\\n        }\\n\\n        return false;\\n      }\\n    } // If there is no custom domain, return true only for the following cases:\\n    // 1) using quantitative field with size\\n    // While this can be either ratio or interval fields, our assumption is that\\n    // ratio are more common. However, if the scaleType is discretizing scale, we want to return\\n    // false so that range doesn't start at zero\\n\\n\\n    if (channel === 'size' && fieldDef.type === 'quantitative' && !isContinuousToDiscrete(scaleType)) {\\n      return true;\\n    } // 2) non-binned, quantitative x-scale or y-scale\\n    // (For binning, we should not include zero by default because binning are calculated without zero.)\\n\\n\\n    if (!(isFieldDef(fieldDef) && fieldDef.bin) && contains([...POSITION_SCALE_CHANNELS, ...POLAR_POSITION_SCALE_CHANNELS], channel)) {\\n      const {\\n        orient,\\n        type\\n      } = markDef;\\n\\n      if (contains(['bar', 'area', 'line', 'trail'], type)) {\\n        if (orient === 'horizontal' && channel === 'y' || orient === 'vertical' && channel === 'x') {\\n          return false;\\n        }\\n      }\\n\\n      return true;\\n    }\\n\\n    return false;\\n  }\\n\\n  /**\\n   * Determine if there is a specified scale type and if it is appropriate,\\n   * or determine default type if type is unspecified or inappropriate.\\n   */\\n  // NOTE: CompassQL uses this method.\\n  function scaleType(specifiedScale, channel, fieldDef, mark) {\\n    const defaultScaleType = defaultType$2(channel, fieldDef, mark);\\n    const {\\n      type\\n    } = specifiedScale;\\n\\n    if (!isScaleChannel(channel)) {\\n      // There is no scale for these channels\\n      return null;\\n    }\\n\\n    if (type !== undefined) {\\n      // Check if explicitly specified scale type is supported by the channel\\n      if (!channelSupportScaleType(channel, type)) {\\n        warn(scaleTypeNotWorkWithChannel(channel, type, defaultScaleType));\\n        return defaultScaleType;\\n      } // Check if explicitly specified scale type is supported by the data type\\n\\n\\n      if (isFieldDef(fieldDef) && !scaleTypeSupportDataType(type, fieldDef.type)) {\\n        warn(scaleTypeNotWorkWithFieldDef(type, defaultScaleType));\\n        return defaultScaleType;\\n      }\\n\\n      return type;\\n    }\\n\\n    return defaultScaleType;\\n  }\\n  /**\\n   * Determine appropriate default scale type.\\n   */\\n  // NOTE: Voyager uses this method.\\n\\n  function defaultType$2(channel, fieldDef, mark) {\\n    var _fieldDef$axis;\\n\\n    switch (fieldDef.type) {\\n      case 'nominal':\\n      case 'ordinal':\\n        if (isColorChannel(channel) || rangeType(channel) === 'discrete') {\\n          if (channel === 'shape' && fieldDef.type === 'ordinal') {\\n            warn(discreteChannelCannotEncode(channel, 'ordinal'));\\n          }\\n\\n          return 'ordinal';\\n        }\\n\\n        if (channel in POSITION_SCALE_CHANNEL_INDEX) {\\n          if (contains(['rect', 'bar', 'image', 'rule'], mark)) {\\n            // The rect/bar mark should fit into a band.\\n            // For rule, using band scale to make rule align with axis ticks better https://github.com/vega/vega-lite/issues/3429\\n            return 'band';\\n          }\\n        } else if (mark === 'arc' && channel in POLAR_POSITION_SCALE_CHANNEL_INDEX) {\\n          return 'band';\\n        }\\n\\n        if (fieldDef.band !== undefined || isPositionFieldOrDatumDef(fieldDef) && ((_fieldDef$axis = fieldDef.axis) === null || _fieldDef$axis === void 0 ? void 0 : _fieldDef$axis.tickBand)) {\\n          return 'band';\\n        } // Otherwise, use ordinal point scale so we can easily get center positions of the marks.\\n\\n\\n        return 'point';\\n\\n      case 'temporal':\\n        if (isColorChannel(channel)) {\\n          return 'time';\\n        } else if (rangeType(channel) === 'discrete') {\\n          warn(discreteChannelCannotEncode(channel, 'temporal')); // TODO: consider using quantize (equivalent to binning) once we have it\\n\\n          return 'ordinal';\\n        } else if (isFieldDef(fieldDef) && fieldDef.timeUnit && normalizeTimeUnit(fieldDef.timeUnit).utc) {\\n          return 'utc';\\n        }\\n\\n        return 'time';\\n\\n      case 'quantitative':\\n        if (isColorChannel(channel)) {\\n          if (isFieldDef(fieldDef) && isBinning(fieldDef.bin)) {\\n            return 'bin-ordinal';\\n          }\\n\\n          return 'linear';\\n        } else if (rangeType(channel) === 'discrete') {\\n          warn(discreteChannelCannotEncode(channel, 'quantitative')); // TODO: consider using quantize (equivalent to binning) once we have it\\n\\n          return 'ordinal';\\n        }\\n\\n        return 'linear';\\n\\n      case 'geojson':\\n        return undefined;\\n    }\\n    /* istanbul ignore next: should never reach this */\\n\\n\\n    throw new Error(invalidFieldType(fieldDef.type));\\n  }\\n\\n  function parseScales(model, {\\n    ignoreRange\\n  } = {}) {\\n    parseScaleCore(model);\\n    parseScaleDomain(model);\\n\\n    for (const prop of NON_TYPE_DOMAIN_RANGE_VEGA_SCALE_PROPERTIES) {\\n      parseScaleProperty(model, prop);\\n    }\\n\\n    if (!ignoreRange) {\\n      // range depends on zero\\n      parseScaleRange(model);\\n    }\\n  }\\n  function parseScaleCore(model) {\\n    if (isUnitModel(model)) {\\n      model.component.scales = parseUnitScaleCore(model);\\n    } else {\\n      model.component.scales = parseNonUnitScaleCore(model);\\n    }\\n  }\\n  /**\\n   * Parse scales for all channels of a model.\\n   */\\n\\n  function parseUnitScaleCore(model) {\\n    const {\\n      encoding,\\n      mark\\n    } = model;\\n    return SCALE_CHANNELS.reduce((scaleComponents, channel) => {\\n      const fieldOrDatumDef = getFieldOrDatumDef(encoding[channel]); // must be typed def to have scale\\n      // Don't generate scale for shape of geoshape\\n\\n      if (fieldOrDatumDef && mark === GEOSHAPE && channel === SHAPE && fieldOrDatumDef.type === GEOJSON) {\\n        return scaleComponents;\\n      }\\n\\n      let specifiedScale = fieldOrDatumDef && fieldOrDatumDef['scale'];\\n\\n      if (fieldOrDatumDef && specifiedScale !== null && specifiedScale !== false) {\\n        var _specifiedScale;\\n\\n        specifiedScale = (_specifiedScale = specifiedScale) !== null && _specifiedScale !== void 0 ? _specifiedScale : {};\\n        const sType = scaleType(specifiedScale, channel, fieldOrDatumDef, mark);\\n        scaleComponents[channel] = new ScaleComponent(model.scaleName(channel + '', true), {\\n          value: sType,\\n          explicit: specifiedScale.type === sType\\n        });\\n      }\\n\\n      return scaleComponents;\\n    }, {});\\n  }\\n\\n  const scaleTypeTieBreaker = tieBreakByComparing((st1, st2) => scaleTypePrecedence(st1) - scaleTypePrecedence(st2));\\n\\n  function parseNonUnitScaleCore(model) {\\n    const scaleComponents = model.component.scales = {};\\n    const scaleTypeWithExplicitIndex = {};\\n    const resolve = model.component.resolve; // Parse each child scale and determine if a particular channel can be merged.\\n\\n    for (const child of model.children) {\\n      parseScaleCore(child); // Instead of always merging right away -- check if it is compatible to merge first!\\n\\n      for (const channel of keys(child.component.scales)) {\\n        var _resolve$scale$channe;\\n\\n        // if resolve is undefined, set default first\\n        resolve.scale[channel] = (_resolve$scale$channe = resolve.scale[channel]) !== null && _resolve$scale$channe !== void 0 ? _resolve$scale$channe : defaultScaleResolve(channel, model);\\n\\n        if (resolve.scale[channel] === 'shared') {\\n          const explicitScaleType = scaleTypeWithExplicitIndex[channel];\\n          const childScaleType = child.component.scales[channel].getWithExplicit('type');\\n\\n          if (explicitScaleType) {\\n            if (scaleCompatible(explicitScaleType.value, childScaleType.value)) {\\n              // merge scale component if type are compatible\\n              scaleTypeWithExplicitIndex[channel] = mergeValuesWithExplicit(explicitScaleType, childScaleType, 'type', 'scale', scaleTypeTieBreaker);\\n            } else {\\n              // Otherwise, update conflicting channel to be independent\\n              resolve.scale[channel] = 'independent'; // Remove from the index so they don't get merged\\n\\n              delete scaleTypeWithExplicitIndex[channel];\\n            }\\n          } else {\\n            scaleTypeWithExplicitIndex[channel] = childScaleType;\\n          }\\n        }\\n      }\\n    } // Merge each channel listed in the index\\n\\n\\n    for (const channel of keys(scaleTypeWithExplicitIndex)) {\\n      // Create new merged scale component\\n      const name = model.scaleName(channel, true);\\n      const typeWithExplicit = scaleTypeWithExplicitIndex[channel];\\n      scaleComponents[channel] = new ScaleComponent(name, typeWithExplicit); // rename each child and mark them as merged\\n\\n      for (const child of model.children) {\\n        const childScale = child.component.scales[channel];\\n\\n        if (childScale) {\\n          child.renameScale(childScale.get('name'), name);\\n          childScale.merged = true;\\n        }\\n      }\\n    }\\n\\n    return scaleComponents;\\n  }\\n\\n  class NameMap {\\n    constructor() {\\n      _defineProperty(this, \\\"nameMap\\\", void 0);\\n\\n      this.nameMap = {};\\n    }\\n\\n    rename(oldName, newName) {\\n      this.nameMap[oldName] = newName;\\n    }\\n\\n    has(name) {\\n      return this.nameMap[name] !== undefined;\\n    }\\n\\n    get(name) {\\n      // If the name appears in the _nameMap, we need to read its new name.\\n      // We have to loop over the dict just in case the new name also gets renamed.\\n      while (this.nameMap[name] && name !== this.nameMap[name]) {\\n        name = this.nameMap[name];\\n      }\\n\\n      return name;\\n    }\\n\\n  }\\n  /*\\n    We use type guards instead of `instanceof` as `instanceof` makes\\n    different parts of the compiler depend on the actual implementation of\\n    the model classes, which in turn depend on different parts of the compiler.\\n    Thus, `instanceof` leads to circular dependency problems.\\n\\n    On the other hand, type guards only make different parts of the compiler\\n    depend on the type of the model classes, but not the actual implementation.\\n  */\\n\\n  function isUnitModel(model) {\\n    return (model === null || model === void 0 ? void 0 : model.type) === 'unit';\\n  }\\n  function isFacetModel(model) {\\n    return (model === null || model === void 0 ? void 0 : model.type) === 'facet';\\n  }\\n  function isConcatModel(model) {\\n    return (model === null || model === void 0 ? void 0 : model.type) === 'concat';\\n  }\\n  function isLayerModel(model) {\\n    return (model === null || model === void 0 ? void 0 : model.type) === 'layer';\\n  }\\n  class Model {\\n    /** Name map for scales, which can be renamed by a model's parent. */\\n\\n    /** Name map for projections, which can be renamed by a model's parent. */\\n\\n    /** Name map for signals, which can be renamed by a model's parent. */\\n    constructor(spec, type, parent, parentGivenName, config, resolve, view) {\\n      var _spec$name, _spec$transform;\\n\\n      this.type = type;\\n      this.parent = parent;\\n      this.config = config;\\n\\n      _defineProperty(this, \\\"name\\\", void 0);\\n\\n      _defineProperty(this, \\\"size\\\", void 0);\\n\\n      _defineProperty(this, \\\"title\\\", void 0);\\n\\n      _defineProperty(this, \\\"description\\\", void 0);\\n\\n      _defineProperty(this, \\\"data\\\", void 0);\\n\\n      _defineProperty(this, \\\"transforms\\\", void 0);\\n\\n      _defineProperty(this, \\\"layout\\\", void 0);\\n\\n      _defineProperty(this, \\\"scaleNameMap\\\", void 0);\\n\\n      _defineProperty(this, \\\"projectionNameMap\\\", void 0);\\n\\n      _defineProperty(this, \\\"signalNameMap\\\", void 0);\\n\\n      _defineProperty(this, \\\"component\\\", void 0);\\n\\n      _defineProperty(this, \\\"view\\\", void 0);\\n\\n      _defineProperty(this, \\\"children\\\", []);\\n\\n      _defineProperty(this, \\\"correctDataNames\\\", mark => {\\n        // TODO: make this correct\\n        // for normal data references\\n        if (mark.from && mark.from.data) {\\n          mark.from.data = this.lookupDataSource(mark.from.data);\\n        } // for access to facet data\\n\\n\\n        if (mark.from && mark.from.facet && mark.from.facet.data) {\\n          mark.from.facet.data = this.lookupDataSource(mark.from.facet.data);\\n        }\\n\\n        return mark;\\n      });\\n\\n      this.parent = parent;\\n      this.config = config;\\n      this.view = replaceExprRefInIndex(view); // If name is not provided, always use parent's givenName to avoid name conflicts.\\n\\n      this.name = (_spec$name = spec.name) !== null && _spec$name !== void 0 ? _spec$name : parentGivenName;\\n      this.title = isText(spec.title) ? {\\n        text: spec.title\\n      } : spec.title ? this.initTitle(spec.title) : undefined; // Shared name maps\\n\\n      this.scaleNameMap = parent ? parent.scaleNameMap : new NameMap();\\n      this.projectionNameMap = parent ? parent.projectionNameMap : new NameMap();\\n      this.signalNameMap = parent ? parent.signalNameMap : new NameMap();\\n      this.data = spec.data;\\n      this.description = spec.description;\\n      this.transforms = normalizeTransform((_spec$transform = spec.transform) !== null && _spec$transform !== void 0 ? _spec$transform : []);\\n      this.layout = type === 'layer' || type === 'unit' ? {} : extractCompositionLayout(spec, type, config);\\n      this.component = {\\n        data: {\\n          sources: parent ? parent.component.data.sources : [],\\n          outputNodes: parent ? parent.component.data.outputNodes : {},\\n          outputNodeRefCounts: parent ? parent.component.data.outputNodeRefCounts : {},\\n          // data is faceted if the spec is a facet spec or the parent has faceted data and data is undefined\\n          isFaceted: isFacetSpec(spec) || parent && parent.component.data.isFaceted && spec.data === undefined\\n        },\\n        layoutSize: new Split(),\\n        layoutHeaders: {\\n          row: {},\\n          column: {},\\n          facet: {}\\n        },\\n        mark: null,\\n        resolve: {\\n          scale: {},\\n          axis: {},\\n          legend: {},\\n          ...(resolve ? duplicate(resolve) : {})\\n        },\\n        selection: null,\\n        scales: null,\\n        projection: null,\\n        axes: {},\\n        legends: {}\\n      };\\n    }\\n\\n    initTitle(title) {\\n      const props = keys(title);\\n      const titleInternal = {\\n        text: signalRefOrValue(title.text)\\n      };\\n\\n      for (const prop of props) {\\n        titleInternal[prop] = signalRefOrValue(title[prop]);\\n      }\\n\\n      return titleInternal;\\n    }\\n\\n    get width() {\\n      return this.getSizeSignalRef('width');\\n    }\\n\\n    get height() {\\n      return this.getSizeSignalRef('height');\\n    }\\n\\n    parse() {\\n      this.parseScale();\\n      this.parseLayoutSize(); // depends on scale\\n\\n      this.renameTopLevelLayoutSizeSignal();\\n      this.parseSelections();\\n      this.parseProjection();\\n      this.parseData(); // (pathorder) depends on markDef; selection filters depend on parsed selections; depends on projection because some transforms require the finalized projection name.\\n\\n      this.parseAxesAndHeaders(); // depends on scale and layout size\\n\\n      this.parseLegends(); // depends on scale, markDef\\n\\n      this.parseMarkGroup(); // depends on data name, scale, layout size, axisGroup, and children's scale, axis, legend and mark.\\n    }\\n\\n    parseScale() {\\n      parseScales(this);\\n    }\\n\\n    parseProjection() {\\n      parseProjection(this);\\n    }\\n\\n    /**\\n     * Rename top-level spec's size to be just width / height, ignoring model name.\\n     * This essentially merges the top-level spec's width/height signals with the width/height signals\\n     * to help us reduce redundant signals declaration.\\n     */\\n    renameTopLevelLayoutSizeSignal() {\\n      if (this.getName('width') !== 'width') {\\n        this.renameSignal(this.getName('width'), 'width');\\n      }\\n\\n      if (this.getName('height') !== 'height') {\\n        this.renameSignal(this.getName('height'), 'height');\\n      }\\n    }\\n\\n    parseLegends() {\\n      parseLegend(this);\\n    }\\n\\n    assembleGroupStyle() {\\n      if (this.type === 'unit' || this.type === 'layer') {\\n        var _this$view$style, _this$view;\\n\\n        return (_this$view$style = (_this$view = this.view) === null || _this$view === void 0 ? void 0 : _this$view.style) !== null && _this$view$style !== void 0 ? _this$view$style : 'cell';\\n      }\\n\\n      return undefined;\\n    }\\n\\n    assembleEncodeFromView(view) {\\n      // Exclude \\\"style\\\"\\n      const {\\n        style: _,\\n        ...baseView\\n      } = view;\\n      const e = {};\\n\\n      for (const property of keys(baseView)) {\\n        const value = baseView[property];\\n\\n        if (value !== undefined) {\\n          e[property] = signalOrValueRef(value);\\n        }\\n      }\\n\\n      return e;\\n    }\\n\\n    assembleGroupEncodeEntry(isTopLevel) {\\n      let encodeEntry = {};\\n\\n      if (this.view) {\\n        encodeEntry = this.assembleEncodeFromView(this.view);\\n      }\\n\\n      if (!isTopLevel) {\\n        // Descriptions are already added to the top-level description so we only need to add them to the inner views.\\n        if (this.description) {\\n          encodeEntry['description'] = signalOrValueRef(this.description);\\n        } // For top-level spec, we can set the global width and height signal to adjust the group size.\\n        // For other child specs, we have to manually set width and height in the encode entry.\\n\\n\\n        if (this.type === 'unit' || this.type === 'layer') {\\n          var _encodeEntry;\\n\\n          return {\\n            width: this.getSizeSignalRef('width'),\\n            height: this.getSizeSignalRef('height'),\\n            ...((_encodeEntry = encodeEntry) !== null && _encodeEntry !== void 0 ? _encodeEntry : {})\\n          };\\n        }\\n      }\\n\\n      return isEmpty(encodeEntry) ? undefined : encodeEntry;\\n    }\\n\\n    assembleLayout() {\\n      if (!this.layout) {\\n        return undefined;\\n      }\\n\\n      const {\\n        spacing,\\n        ...layout\\n      } = this.layout;\\n      const {\\n        component,\\n        config\\n      } = this;\\n      const titleBand = assembleLayoutTitleBand(component.layoutHeaders, config);\\n      return {\\n        padding: spacing,\\n        ...this.assembleDefaultLayout(),\\n        ...layout,\\n        ...(titleBand ? {\\n          titleBand\\n        } : {})\\n      };\\n    }\\n\\n    assembleDefaultLayout() {\\n      return {};\\n    }\\n\\n    assembleHeaderMarks() {\\n      const {\\n        layoutHeaders\\n      } = this.component;\\n      let headerMarks = [];\\n\\n      for (const channel of FACET_CHANNELS) {\\n        if (layoutHeaders[channel].title) {\\n          headerMarks.push(assembleTitleGroup(this, channel));\\n        }\\n      }\\n\\n      for (const channel of HEADER_CHANNELS) {\\n        headerMarks = headerMarks.concat(assembleHeaderGroups(this, channel));\\n      }\\n\\n      return headerMarks;\\n    }\\n\\n    assembleAxes() {\\n      return assembleAxes(this.component.axes, this.config);\\n    }\\n\\n    assembleLegends() {\\n      return assembleLegends(this);\\n    }\\n\\n    assembleProjections() {\\n      return assembleProjections(this);\\n    }\\n\\n    assembleTitle() {\\n      var _this$title;\\n\\n      const {\\n        encoding,\\n        ...titleNoEncoding\\n      } = (_this$title = this.title) !== null && _this$title !== void 0 ? _this$title : {};\\n      const title = { ...extractTitleConfig(this.config.title).nonMark,\\n        ...titleNoEncoding,\\n        ...(encoding ? {\\n          encode: {\\n            update: encoding\\n          }\\n        } : {})\\n      };\\n\\n      if (title.text) {\\n        if (contains(['unit', 'layer'], this.type)) {\\n          // Unit/Layer\\n          if (contains(['middle', undefined], title.anchor)) {\\n            var _title$frame;\\n\\n            title.frame = (_title$frame = title.frame) !== null && _title$frame !== void 0 ? _title$frame : 'group';\\n          }\\n        } else {\\n          var _title$anchor;\\n\\n          // composition with Vega layout\\n          // Set title = \\\"start\\\" by default for composition as \\\"middle\\\" does not look nice\\n          // https://github.com/vega/vega/issues/960#issuecomment-471360328\\n          title.anchor = (_title$anchor = title.anchor) !== null && _title$anchor !== void 0 ? _title$anchor : 'start';\\n        }\\n\\n        return isEmpty(title) ? undefined : title;\\n      }\\n\\n      return undefined;\\n    }\\n    /**\\n     * Assemble the mark group for this model. We accept optional `signals` so that we can include concat top-level signals with the top-level model's local signals.\\n     */\\n\\n\\n    assembleGroup(signals = []) {\\n      const group = {};\\n      signals = signals.concat(this.assembleSignals());\\n\\n      if (signals.length > 0) {\\n        group.signals = signals;\\n      }\\n\\n      const layout = this.assembleLayout();\\n\\n      if (layout) {\\n        group.layout = layout;\\n      }\\n\\n      group.marks = [].concat(this.assembleHeaderMarks(), this.assembleMarks()); // Only include scales if this spec is top-level or if parent is facet.\\n      // (Otherwise, it will be merged with upper-level's scope.)\\n\\n      const scales = !this.parent || isFacetModel(this.parent) ? assembleScales(this) : [];\\n\\n      if (scales.length > 0) {\\n        group.scales = scales;\\n      }\\n\\n      const axes = this.assembleAxes();\\n\\n      if (axes.length > 0) {\\n        group.axes = axes;\\n      }\\n\\n      const legends = this.assembleLegends();\\n\\n      if (legends.length > 0) {\\n        group.legends = legends;\\n      }\\n\\n      return group;\\n    }\\n\\n    getName(text) {\\n      return varName((this.name ? this.name + '_' : '') + text);\\n    }\\n\\n    getDataName(type) {\\n      return this.getName(DataSourceType[type].toLowerCase());\\n    }\\n    /**\\n     * Request a data source name for the given data source type and mark that data source as required.\\n     * This method should be called in parse, so that all used data source can be correctly instantiated in assembleData().\\n     * You can lookup the correct dataset name in assemble with `lookupDataSource`.\\n     */\\n\\n\\n    requestDataName(name) {\\n      const fullName = this.getDataName(name); // Increase ref count. This is critical because otherwise we won't create a data source.\\n      // We also increase the ref counts on OutputNode.getSource() calls.\\n\\n      const refCounts = this.component.data.outputNodeRefCounts;\\n      refCounts[fullName] = (refCounts[fullName] || 0) + 1;\\n      return fullName;\\n    }\\n\\n    getSizeSignalRef(layoutSizeType) {\\n      if (isFacetModel(this.parent)) {\\n        const sizeType = getSizeTypeFromLayoutSizeType(layoutSizeType);\\n        const channel = getPositionScaleChannel(sizeType);\\n        const scaleComponent = this.component.scales[channel];\\n\\n        if (scaleComponent && !scaleComponent.merged) {\\n          // independent scale\\n          const type = scaleComponent.get('type');\\n          const range = scaleComponent.get('range');\\n\\n          if (hasDiscreteDomain(type) && isVgRangeStep(range)) {\\n            const scaleName = scaleComponent.get('name');\\n            const domain = assembleDomain(this, channel);\\n            const field = getFieldFromDomain(domain);\\n\\n            if (field) {\\n              const fieldRef = vgField({\\n                aggregate: 'distinct',\\n                field\\n              }, {\\n                expr: 'datum'\\n              });\\n              return {\\n                signal: sizeExpr(scaleName, scaleComponent, fieldRef)\\n              };\\n            } else {\\n              warn(unknownField(channel));\\n              return null;\\n            }\\n          }\\n        }\\n      }\\n\\n      return {\\n        signal: this.signalNameMap.get(this.getName(layoutSizeType))\\n      };\\n    }\\n    /**\\n     * Lookup the name of the datasource for an output node. You probably want to call this in assemble.\\n     */\\n\\n\\n    lookupDataSource(name) {\\n      const node = this.component.data.outputNodes[name];\\n\\n      if (!node) {\\n        // Name not found in map so let's just return what we got.\\n        // This can happen if we already have the correct name.\\n        return name;\\n      }\\n\\n      return node.getSource();\\n    }\\n\\n    getSignalName(oldSignalName) {\\n      return this.signalNameMap.get(oldSignalName);\\n    }\\n\\n    renameSignal(oldName, newName) {\\n      this.signalNameMap.rename(oldName, newName);\\n    }\\n\\n    renameScale(oldName, newName) {\\n      this.scaleNameMap.rename(oldName, newName);\\n    }\\n\\n    renameProjection(oldName, newName) {\\n      this.projectionNameMap.rename(oldName, newName);\\n    }\\n    /**\\n     * @return scale name for a given channel after the scale has been parsed and named.\\n     */\\n\\n\\n    scaleName(originalScaleName, parse) {\\n      if (parse) {\\n        // During the parse phase always return a value\\n        // No need to refer to rename map because a scale can't be renamed\\n        // before it has the original name.\\n        return this.getName(originalScaleName);\\n      } // If there is a scale for the channel, it should either\\n      // be in the scale component or exist in the name map\\n\\n\\n      if ( // If there is a scale for the channel, there should be a local scale component for it\\n      isChannel(originalScaleName) && isScaleChannel(originalScaleName) && this.component.scales[originalScaleName] || // in the scale name map (the scale get merged by its parent)\\n      this.scaleNameMap.has(this.getName(originalScaleName))) {\\n        return this.scaleNameMap.get(this.getName(originalScaleName));\\n      }\\n\\n      return undefined;\\n    }\\n    /**\\n     * @return projection name after the projection has been parsed and named.\\n     */\\n\\n\\n    projectionName(parse) {\\n      if (parse) {\\n        // During the parse phase always return a value\\n        // No need to refer to rename map because a projection can't be renamed\\n        // before it has the original name.\\n        return this.getName('projection');\\n      }\\n\\n      if (this.component.projection && !this.component.projection.merged || this.projectionNameMap.has(this.getName('projection'))) {\\n        return this.projectionNameMap.get(this.getName('projection'));\\n      }\\n\\n      return undefined;\\n    }\\n    /**\\n     * Corrects the data references in marks after assemble.\\n     */\\n\\n\\n    /**\\n     * Traverse a model's hierarchy to get the scale component for a particular channel.\\n     */\\n    getScaleComponent(channel) {\\n      /* istanbul ignore next: This is warning for debugging test */\\n      if (!this.component.scales) {\\n        throw new Error('getScaleComponent cannot be called before parseScale(). Make sure you have called parseScale or use parseUnitModelWithScale().');\\n      }\\n\\n      const localScaleComponent = this.component.scales[channel];\\n\\n      if (localScaleComponent && !localScaleComponent.merged) {\\n        return localScaleComponent;\\n      }\\n\\n      return this.parent ? this.parent.getScaleComponent(channel) : undefined;\\n    }\\n    /**\\n     * Traverse a model's hierarchy to get a particular selection component.\\n     */\\n\\n\\n    getSelectionComponent(variableName, origName) {\\n      let sel = this.component.selection[variableName];\\n\\n      if (!sel && this.parent) {\\n        sel = this.parent.getSelectionComponent(variableName, origName);\\n      }\\n\\n      if (!sel) {\\n        throw new Error(selectionNotFound(origName));\\n      }\\n\\n      return sel;\\n    }\\n    /**\\n     * Returns true if the model has a signalRef for an axis orient.\\n     */\\n\\n\\n    hasAxisOrientSignalRef() {\\n      var _this$component$axes$, _this$component$axes$2;\\n\\n      return ((_this$component$axes$ = this.component.axes.x) === null || _this$component$axes$ === void 0 ? void 0 : _this$component$axes$.some(a => a.hasOrientSignalRef())) || ((_this$component$axes$2 = this.component.axes.y) === null || _this$component$axes$2 === void 0 ? void 0 : _this$component$axes$2.some(a => a.hasOrientSignalRef()));\\n    }\\n\\n  }\\n  /** Abstract class for UnitModel and FacetModel. Both of which can contain fieldDefs as a part of its own specification. */\\n\\n  class ModelWithField extends Model {\\n    /** Get \\\"field\\\" reference for Vega */\\n    vgField(channel, opt = {}) {\\n      const fieldDef = this.fieldDef(channel);\\n\\n      if (!fieldDef) {\\n        return undefined;\\n      }\\n\\n      return vgField(fieldDef, opt);\\n    }\\n\\n    reduceFieldDef(f, init) {\\n      return reduce(this.getMapping(), (acc, cd, c) => {\\n        const fieldDef = getFieldDef(cd);\\n\\n        if (fieldDef) {\\n          return f(acc, fieldDef, c);\\n        }\\n\\n        return acc;\\n      }, init);\\n    }\\n\\n    forEachFieldDef(f, t) {\\n      forEach(this.getMapping(), (cd, c) => {\\n        const fieldDef = getFieldDef(cd);\\n\\n        if (fieldDef) {\\n          f(fieldDef, c);\\n        }\\n      }, t);\\n    }\\n\\n  }\\n\\n  /**\\n   * A class for density transform nodes\\n   */\\n\\n  class DensityTransformNode extends DataFlowNode {\\n    clone() {\\n      return new DensityTransformNode(null, duplicate(this.transform));\\n    }\\n\\n    constructor(parent, transform) {\\n      var _this$transform$as, _specifiedAs$, _specifiedAs$2;\\n\\n      super(parent);\\n      this.transform = transform;\\n      this.transform = duplicate(transform); // duplicate to prevent side effects\\n\\n      const specifiedAs = (_this$transform$as = this.transform.as) !== null && _this$transform$as !== void 0 ? _this$transform$as : [undefined, undefined];\\n      this.transform.as = [(_specifiedAs$ = specifiedAs[0]) !== null && _specifiedAs$ !== void 0 ? _specifiedAs$ : 'value', (_specifiedAs$2 = specifiedAs[1]) !== null && _specifiedAs$2 !== void 0 ? _specifiedAs$2 : 'density'];\\n    }\\n\\n    dependentFields() {\\n      var _this$transform$group;\\n\\n      return new Set([this.transform.density, ...((_this$transform$group = this.transform.groupby) !== null && _this$transform$group !== void 0 ? _this$transform$group : [])]);\\n    }\\n\\n    producedFields() {\\n      return new Set(this.transform.as);\\n    }\\n\\n    hash() {\\n      return \\\"DensityTransform \\\".concat(hash(this.transform));\\n    }\\n\\n    assemble() {\\n      const {\\n        density,\\n        ...rest\\n      } = this.transform;\\n      const result = {\\n        type: 'kde',\\n        field: density,\\n        ...rest\\n      };\\n      return result;\\n    }\\n\\n  }\\n\\n  class FilterInvalidNode extends DataFlowNode {\\n    clone() {\\n      return new FilterInvalidNode(null, { ...this.filter\\n      });\\n    }\\n\\n    constructor(parent, filter) {\\n      super(parent);\\n      this.filter = filter;\\n    }\\n\\n    static make(parent, model) {\\n      const {\\n        config,\\n        mark,\\n        markDef\\n      } = model;\\n      const invalid = getMarkPropOrConfig('invalid', markDef, config);\\n\\n      if (invalid !== 'filter') {\\n        return null;\\n      }\\n\\n      const filter = model.reduceFieldDef((aggregator, fieldDef, channel) => {\\n        const scaleComponent = isScaleChannel(channel) && model.getScaleComponent(channel);\\n\\n        if (scaleComponent) {\\n          const scaleType = scaleComponent.get('type'); // While discrete domain scales can handle invalid values, continuous scales can't.\\n          // Thus, for non-path marks, we have to filter null for scales with continuous domains.\\n          // (For path marks, we will use \\\"defined\\\" property and skip these values instead.)\\n\\n          if (hasContinuousDomain(scaleType) && fieldDef.aggregate !== 'count' && !isPathMark(mark)) {\\n            aggregator[fieldDef.field] = fieldDef; // we know that the fieldDef is a typed field def\\n          }\\n        }\\n\\n        return aggregator;\\n      }, {});\\n\\n      if (!keys(filter).length) {\\n        return null;\\n      }\\n\\n      return new FilterInvalidNode(parent, filter);\\n    }\\n\\n    dependentFields() {\\n      return new Set(keys(this.filter));\\n    }\\n\\n    producedFields() {\\n      return new Set(); // filter does not produce any new fields\\n    }\\n\\n    hash() {\\n      return \\\"FilterInvalid \\\".concat(hash(this.filter));\\n    }\\n    /**\\n     * Create the VgTransforms for each of the filtered fields.\\n     */\\n\\n\\n    assemble() {\\n      const filters = keys(this.filter).reduce((vegaFilters, field) => {\\n        const fieldDef = this.filter[field];\\n        const ref = vgField(fieldDef, {\\n          expr: 'datum'\\n        });\\n\\n        if (fieldDef !== null) {\\n          if (fieldDef.type === 'temporal') {\\n            vegaFilters.push(\\\"(isDate(\\\".concat(ref, \\\") || (isValid(\\\").concat(ref, \\\") && isFinite(+\\\").concat(ref, \\\")))\\\"));\\n          } else if (fieldDef.type === 'quantitative') {\\n            vegaFilters.push(\\\"isValid(\\\".concat(ref, \\\")\\\"));\\n            vegaFilters.push(\\\"isFinite(+\\\".concat(ref, \\\")\\\"));\\n          } else ;\\n        }\\n\\n        return vegaFilters;\\n      }, []);\\n      return filters.length > 0 ? {\\n        type: 'filter',\\n        expr: filters.join(' && ')\\n      } : null;\\n    }\\n\\n  }\\n\\n  /**\\n   * A class for flatten transform nodes\\n   */\\n\\n  class FlattenTransformNode extends DataFlowNode {\\n    clone() {\\n      return new FlattenTransformNode(this.parent, duplicate(this.transform));\\n    }\\n\\n    constructor(parent, transform) {\\n      super(parent);\\n      this.transform = transform;\\n      this.transform = duplicate(transform); // duplicate to prevent side effects\\n\\n      const {\\n        flatten,\\n        as = []\\n      } = this.transform;\\n      this.transform.as = flatten.map((f, i) => {\\n        var _as$i;\\n\\n        return (_as$i = as[i]) !== null && _as$i !== void 0 ? _as$i : f;\\n      });\\n    }\\n\\n    dependentFields() {\\n      return new Set(this.transform.flatten);\\n    }\\n\\n    producedFields() {\\n      return new Set(this.transform.as);\\n    }\\n\\n    hash() {\\n      return \\\"FlattenTransform \\\".concat(hash(this.transform));\\n    }\\n\\n    assemble() {\\n      const {\\n        flatten: fields,\\n        as\\n      } = this.transform;\\n      const result = {\\n        type: 'flatten',\\n        fields,\\n        as\\n      };\\n      return result;\\n    }\\n\\n  }\\n\\n  /**\\n   * A class for flatten transform nodes\\n   */\\n\\n  class FoldTransformNode extends DataFlowNode {\\n    clone() {\\n      return new FoldTransformNode(null, duplicate(this.transform));\\n    }\\n\\n    constructor(parent, transform) {\\n      var _this$transform$as, _specifiedAs$, _specifiedAs$2;\\n\\n      super(parent);\\n      this.transform = transform;\\n      this.transform = duplicate(transform); // duplicate to prevent side effects\\n\\n      const specifiedAs = (_this$transform$as = this.transform.as) !== null && _this$transform$as !== void 0 ? _this$transform$as : [undefined, undefined];\\n      this.transform.as = [(_specifiedAs$ = specifiedAs[0]) !== null && _specifiedAs$ !== void 0 ? _specifiedAs$ : 'key', (_specifiedAs$2 = specifiedAs[1]) !== null && _specifiedAs$2 !== void 0 ? _specifiedAs$2 : 'value'];\\n    }\\n\\n    dependentFields() {\\n      return new Set(this.transform.fold);\\n    }\\n\\n    producedFields() {\\n      return new Set(this.transform.as);\\n    }\\n\\n    hash() {\\n      return \\\"FoldTransform \\\".concat(hash(this.transform));\\n    }\\n\\n    assemble() {\\n      const {\\n        fold,\\n        as\\n      } = this.transform;\\n      const result = {\\n        type: 'fold',\\n        fields: fold,\\n        as\\n      };\\n      return result;\\n    }\\n\\n  }\\n\\n  class GeoJSONNode extends DataFlowNode {\\n    clone() {\\n      return new GeoJSONNode(null, duplicate(this.fields), this.geojson, this.signal);\\n    }\\n\\n    static parseAll(parent, model) {\\n      if (model.component.projection && !model.component.projection.isFit) {\\n        return parent;\\n      }\\n\\n      let geoJsonCounter = 0;\\n\\n      for (const coordinates of [[LONGITUDE, LATITUDE], [LONGITUDE2, LATITUDE2]]) {\\n        const pair = coordinates.map(channel => {\\n          const def = getFieldOrDatumDef(model.encoding[channel]);\\n          return isFieldDef(def) ? def.field : isDatumDef(def) ? {\\n            expr: \\\"\\\".concat(def.datum)\\n          } : isValueDef(def) ? {\\n            expr: \\\"\\\".concat(def['value'])\\n          } : undefined;\\n        });\\n\\n        if (pair[0] || pair[1]) {\\n          parent = new GeoJSONNode(parent, pair, null, model.getName(\\\"geojson_\\\".concat(geoJsonCounter++)));\\n        }\\n      }\\n\\n      if (model.channelHasField(SHAPE)) {\\n        const fieldDef = model.typedFieldDef(SHAPE);\\n\\n        if (fieldDef.type === GEOJSON) {\\n          parent = new GeoJSONNode(parent, null, fieldDef.field, model.getName(\\\"geojson_\\\".concat(geoJsonCounter++)));\\n        }\\n      }\\n\\n      return parent;\\n    }\\n\\n    constructor(parent, fields, geojson, signal) {\\n      super(parent);\\n      this.fields = fields;\\n      this.geojson = geojson;\\n      this.signal = signal;\\n    }\\n\\n    dependentFields() {\\n      var _this$fields;\\n\\n      const fields = ((_this$fields = this.fields) !== null && _this$fields !== void 0 ? _this$fields : []).filter(isString);\\n      return new Set([...(this.geojson ? [this.geojson] : []), ...fields]);\\n    }\\n\\n    producedFields() {\\n      return new Set();\\n    }\\n\\n    hash() {\\n      return \\\"GeoJSON \\\".concat(this.geojson, \\\" \\\").concat(this.signal, \\\" \\\").concat(hash(this.fields));\\n    }\\n\\n    assemble() {\\n      return {\\n        type: 'geojson',\\n        ...(this.fields ? {\\n          fields: this.fields\\n        } : {}),\\n        ...(this.geojson ? {\\n          geojson: this.geojson\\n        } : {}),\\n        signal: this.signal\\n      };\\n    }\\n\\n  }\\n\\n  class GeoPointNode extends DataFlowNode {\\n    clone() {\\n      return new GeoPointNode(null, this.projection, duplicate(this.fields), duplicate(this.as));\\n    }\\n\\n    constructor(parent, projection, fields, as) {\\n      super(parent);\\n      this.projection = projection;\\n      this.fields = fields;\\n      this.as = as;\\n    }\\n\\n    static parseAll(parent, model) {\\n      if (!model.projectionName()) {\\n        return parent;\\n      }\\n\\n      for (const coordinates of [[LONGITUDE, LATITUDE], [LONGITUDE2, LATITUDE2]]) {\\n        const pair = coordinates.map(channel => {\\n          const def = getFieldOrDatumDef(model.encoding[channel]);\\n          return isFieldDef(def) ? def.field : isDatumDef(def) ? {\\n            expr: \\\"\\\".concat(def.datum)\\n          } : isValueDef(def) ? {\\n            expr: \\\"\\\".concat(def['value'])\\n          } : undefined;\\n        });\\n        const suffix = coordinates[0] === LONGITUDE2 ? '2' : '';\\n\\n        if (pair[0] || pair[1]) {\\n          parent = new GeoPointNode(parent, model.projectionName(), pair, [model.getName('x' + suffix), model.getName('y' + suffix)]);\\n        }\\n      }\\n\\n      return parent;\\n    }\\n\\n    dependentFields() {\\n      return new Set(this.fields.filter(isString));\\n    }\\n\\n    producedFields() {\\n      return new Set(this.as);\\n    }\\n\\n    hash() {\\n      return \\\"Geopoint \\\".concat(this.projection, \\\" \\\").concat(hash(this.fields), \\\" \\\").concat(hash(this.as));\\n    }\\n\\n    assemble() {\\n      return {\\n        type: 'geopoint',\\n        projection: this.projection,\\n        fields: this.fields,\\n        as: this.as\\n      };\\n    }\\n\\n  }\\n\\n  class ImputeNode extends DataFlowNode {\\n    clone() {\\n      return new ImputeNode(null, duplicate(this.transform));\\n    }\\n\\n    constructor(parent, transform) {\\n      super(parent);\\n      this.transform = transform;\\n    }\\n\\n    dependentFields() {\\n      var _this$transform$group;\\n\\n      return new Set([this.transform.impute, this.transform.key, ...((_this$transform$group = this.transform.groupby) !== null && _this$transform$group !== void 0 ? _this$transform$group : [])]);\\n    }\\n\\n    producedFields() {\\n      return new Set([this.transform.impute]);\\n    }\\n\\n    processSequence(keyvals) {\\n      const {\\n        start = 0,\\n        stop,\\n        step\\n      } = keyvals;\\n      const result = [start, stop, ...(step ? [step] : [])].join(',');\\n      return {\\n        signal: \\\"sequence(\\\".concat(result, \\\")\\\")\\n      };\\n    }\\n\\n    static makeFromTransform(parent, imputeTransform) {\\n      return new ImputeNode(parent, imputeTransform);\\n    }\\n\\n    static makeFromEncoding(parent, model) {\\n      const encoding = model.encoding;\\n      const xDef = encoding.x;\\n      const yDef = encoding.y;\\n\\n      if (isFieldDef(xDef) && isFieldDef(yDef)) {\\n        const imputedChannel = xDef.impute ? xDef : yDef.impute ? yDef : undefined;\\n\\n        if (imputedChannel === undefined) {\\n          return undefined;\\n        }\\n\\n        const keyChannel = xDef.impute ? yDef : yDef.impute ? xDef : undefined;\\n        const {\\n          method,\\n          value,\\n          frame,\\n          keyvals\\n        } = imputedChannel.impute;\\n        const groupbyFields = pathGroupingFields(model.mark, encoding);\\n        return new ImputeNode(parent, {\\n          impute: imputedChannel.field,\\n          key: keyChannel.field,\\n          ...(method ? {\\n            method\\n          } : {}),\\n          ...(value !== undefined ? {\\n            value\\n          } : {}),\\n          ...(frame ? {\\n            frame\\n          } : {}),\\n          ...(keyvals !== undefined ? {\\n            keyvals\\n          } : {}),\\n          ...(groupbyFields.length ? {\\n            groupby: groupbyFields\\n          } : {})\\n        });\\n      }\\n\\n      return null;\\n    }\\n\\n    hash() {\\n      return \\\"Impute \\\".concat(hash(this.transform));\\n    }\\n\\n    assemble() {\\n      const {\\n        impute,\\n        key,\\n        keyvals,\\n        method,\\n        groupby,\\n        value,\\n        frame = [null, null]\\n      } = this.transform;\\n      const imputeTransform = {\\n        type: 'impute',\\n        field: impute,\\n        key,\\n        ...(keyvals ? {\\n          keyvals: isImputeSequence(keyvals) ? this.processSequence(keyvals) : keyvals\\n        } : {}),\\n        method: 'value',\\n        ...(groupby ? {\\n          groupby\\n        } : {}),\\n        value: !method || method === 'value' ? value : null\\n      };\\n\\n      if (method && method !== 'value') {\\n        const deriveNewField = {\\n          type: 'window',\\n          as: [\\\"imputed_\\\".concat(impute, \\\"_value\\\")],\\n          ops: [method],\\n          fields: [impute],\\n          frame,\\n          ignorePeers: false,\\n          ...(groupby ? {\\n            groupby\\n          } : {})\\n        };\\n        const replaceOriginal = {\\n          type: 'formula',\\n          expr: \\\"datum.\\\".concat(impute, \\\" === null ? datum.imputed_\\\").concat(impute, \\\"_value : datum.\\\").concat(impute),\\n          as: impute\\n        };\\n        return [imputeTransform, deriveNewField, replaceOriginal];\\n      } else {\\n        return [imputeTransform];\\n      }\\n    }\\n\\n  }\\n\\n  /**\\n   * A class for loess transform nodes\\n   */\\n\\n  class LoessTransformNode extends DataFlowNode {\\n    clone() {\\n      return new LoessTransformNode(null, duplicate(this.transform));\\n    }\\n\\n    constructor(parent, transform) {\\n      var _this$transform$as, _specifiedAs$, _specifiedAs$2;\\n\\n      super(parent);\\n      this.transform = transform;\\n      this.transform = duplicate(transform); // duplicate to prevent side effects\\n\\n      const specifiedAs = (_this$transform$as = this.transform.as) !== null && _this$transform$as !== void 0 ? _this$transform$as : [undefined, undefined];\\n      this.transform.as = [(_specifiedAs$ = specifiedAs[0]) !== null && _specifiedAs$ !== void 0 ? _specifiedAs$ : transform.on, (_specifiedAs$2 = specifiedAs[1]) !== null && _specifiedAs$2 !== void 0 ? _specifiedAs$2 : transform.loess];\\n    }\\n\\n    dependentFields() {\\n      var _this$transform$group;\\n\\n      return new Set([this.transform.loess, this.transform.on, ...((_this$transform$group = this.transform.groupby) !== null && _this$transform$group !== void 0 ? _this$transform$group : [])]);\\n    }\\n\\n    producedFields() {\\n      return new Set(this.transform.as);\\n    }\\n\\n    hash() {\\n      return \\\"LoessTransform \\\".concat(hash(this.transform));\\n    }\\n\\n    assemble() {\\n      const {\\n        loess,\\n        on,\\n        ...rest\\n      } = this.transform;\\n      const result = {\\n        type: 'loess',\\n        x: on,\\n        y: loess,\\n        ...rest\\n      };\\n      return result;\\n    }\\n\\n  }\\n\\n  class LookupNode extends DataFlowNode {\\n    clone() {\\n      return new LookupNode(null, duplicate(this.transform), this.secondary);\\n    }\\n\\n    constructor(parent, transform, secondary) {\\n      super(parent);\\n      this.transform = transform;\\n      this.secondary = secondary;\\n    }\\n\\n    static make(parent, model, transform, counter) {\\n      const sources = model.component.data.sources;\\n      const {\\n        from\\n      } = transform;\\n      let fromOutputNode = null;\\n\\n      if (isLookupData(from)) {\\n        let fromSource = findSource(from.data, sources);\\n\\n        if (!fromSource) {\\n          fromSource = new SourceNode(from.data);\\n          sources.push(fromSource);\\n        }\\n\\n        const fromOutputName = model.getName(\\\"lookup_\\\".concat(counter));\\n        fromOutputNode = new OutputNode(fromSource, fromOutputName, DataSourceType.Lookup, model.component.data.outputNodeRefCounts);\\n        model.component.data.outputNodes[fromOutputName] = fromOutputNode;\\n      } else if (isLookupSelection(from)) {\\n        const selName = from.selection;\\n        transform = {\\n          as: selName,\\n          ...transform\\n        };\\n        fromOutputNode = model.getSelectionComponent(varName(selName), selName).materialized;\\n\\n        if (!fromOutputNode) {\\n          throw new Error(noSameUnitLookup(selName));\\n        }\\n      }\\n\\n      return new LookupNode(parent, transform, fromOutputNode.getSource());\\n    }\\n\\n    dependentFields() {\\n      return new Set([this.transform.lookup]);\\n    }\\n\\n    producedFields() {\\n      return new Set(this.transform.as ? array(this.transform.as) : this.transform.from.fields);\\n    }\\n\\n    hash() {\\n      return \\\"Lookup \\\".concat(hash({\\n        transform: this.transform,\\n        secondary: this.secondary\\n      }));\\n    }\\n\\n    assemble() {\\n      let foreign;\\n\\n      if (this.transform.from.fields) {\\n        // lookup a few fields and add create a flat output\\n        foreign = {\\n          values: this.transform.from.fields,\\n          ...(this.transform.as ? {\\n            as: array(this.transform.as)\\n          } : {})\\n        };\\n      } else {\\n        // lookup full record and nest it\\n        let asName = this.transform.as;\\n\\n        if (!isString(asName)) {\\n          warn(NO_FIELDS_NEEDS_AS);\\n          asName = '_lookup';\\n        }\\n\\n        foreign = {\\n          as: [asName]\\n        };\\n      }\\n\\n      return {\\n        type: 'lookup',\\n        from: this.secondary,\\n        key: this.transform.from.key,\\n        fields: [this.transform.lookup],\\n        ...foreign,\\n        ...(this.transform.default ? {\\n          default: this.transform.default\\n        } : {})\\n      };\\n    }\\n\\n  }\\n\\n  /**\\n   * A class for quantile transform nodes\\n   */\\n\\n  class QuantileTransformNode extends DataFlowNode {\\n    clone() {\\n      return new QuantileTransformNode(null, duplicate(this.transform));\\n    }\\n\\n    constructor(parent, transform) {\\n      var _this$transform$as, _specifiedAs$, _specifiedAs$2;\\n\\n      super(parent);\\n      this.transform = transform;\\n      this.transform = duplicate(transform); // duplicate to prevent side effects\\n\\n      const specifiedAs = (_this$transform$as = this.transform.as) !== null && _this$transform$as !== void 0 ? _this$transform$as : [undefined, undefined];\\n      this.transform.as = [(_specifiedAs$ = specifiedAs[0]) !== null && _specifiedAs$ !== void 0 ? _specifiedAs$ : 'prob', (_specifiedAs$2 = specifiedAs[1]) !== null && _specifiedAs$2 !== void 0 ? _specifiedAs$2 : 'value'];\\n    }\\n\\n    dependentFields() {\\n      var _this$transform$group;\\n\\n      return new Set([this.transform.quantile, ...((_this$transform$group = this.transform.groupby) !== null && _this$transform$group !== void 0 ? _this$transform$group : [])]);\\n    }\\n\\n    producedFields() {\\n      return new Set(this.transform.as);\\n    }\\n\\n    hash() {\\n      return \\\"QuantileTransform \\\".concat(hash(this.transform));\\n    }\\n\\n    assemble() {\\n      const {\\n        quantile,\\n        ...rest\\n      } = this.transform;\\n      const result = {\\n        type: 'quantile',\\n        field: quantile,\\n        ...rest\\n      };\\n      return result;\\n    }\\n\\n  }\\n\\n  /**\\n   * A class for regression transform nodes\\n   */\\n\\n  class RegressionTransformNode extends DataFlowNode {\\n    clone() {\\n      return new RegressionTransformNode(null, duplicate(this.transform));\\n    }\\n\\n    constructor(parent, transform) {\\n      var _this$transform$as, _specifiedAs$, _specifiedAs$2;\\n\\n      super(parent);\\n      this.transform = transform;\\n      this.transform = duplicate(transform); // duplicate to prevent side effects\\n\\n      const specifiedAs = (_this$transform$as = this.transform.as) !== null && _this$transform$as !== void 0 ? _this$transform$as : [undefined, undefined];\\n      this.transform.as = [(_specifiedAs$ = specifiedAs[0]) !== null && _specifiedAs$ !== void 0 ? _specifiedAs$ : transform.on, (_specifiedAs$2 = specifiedAs[1]) !== null && _specifiedAs$2 !== void 0 ? _specifiedAs$2 : transform.regression];\\n    }\\n\\n    dependentFields() {\\n      var _this$transform$group;\\n\\n      return new Set([this.transform.regression, this.transform.on, ...((_this$transform$group = this.transform.groupby) !== null && _this$transform$group !== void 0 ? _this$transform$group : [])]);\\n    }\\n\\n    producedFields() {\\n      return new Set(this.transform.as);\\n    }\\n\\n    hash() {\\n      return \\\"RegressionTransform \\\".concat(hash(this.transform));\\n    }\\n\\n    assemble() {\\n      const {\\n        regression,\\n        on,\\n        ...rest\\n      } = this.transform;\\n      const result = {\\n        type: 'regression',\\n        x: on,\\n        y: regression,\\n        ...rest\\n      };\\n      return result;\\n    }\\n\\n  }\\n\\n  /**\\n   * A class for pivot transform nodes.\\n   */\\n\\n  class PivotTransformNode extends DataFlowNode {\\n    clone() {\\n      return new PivotTransformNode(null, duplicate(this.transform));\\n    }\\n\\n    constructor(parent, transform) {\\n      super(parent);\\n      this.transform = transform;\\n    }\\n\\n    addDimensions(fields) {\\n      var _this$transform$group;\\n\\n      this.transform.groupby = unique(((_this$transform$group = this.transform.groupby) !== null && _this$transform$group !== void 0 ? _this$transform$group : []).concat(fields), d => d);\\n    }\\n\\n    producedFields() {\\n      return undefined; // return undefined so that potentially everything can depend on the pivot\\n    }\\n\\n    dependentFields() {\\n      var _this$transform$group2;\\n\\n      return new Set([this.transform.pivot, this.transform.value, ...((_this$transform$group2 = this.transform.groupby) !== null && _this$transform$group2 !== void 0 ? _this$transform$group2 : [])]);\\n    }\\n\\n    hash() {\\n      return \\\"PivotTransform \\\".concat(hash(this.transform));\\n    }\\n\\n    assemble() {\\n      const {\\n        pivot,\\n        value,\\n        groupby,\\n        limit,\\n        op\\n      } = this.transform;\\n      return {\\n        type: 'pivot',\\n        field: pivot,\\n        value,\\n        ...(limit !== undefined ? {\\n          limit\\n        } : {}),\\n        ...(op !== undefined ? {\\n          op\\n        } : {}),\\n        ...(groupby !== undefined ? {\\n          groupby\\n        } : {})\\n      };\\n    }\\n\\n  }\\n\\n  /**\\n   * A class for the sample transform nodes\\n   */\\n\\n  class SampleTransformNode extends DataFlowNode {\\n    clone() {\\n      return new SampleTransformNode(null, duplicate(this.transform));\\n    }\\n\\n    constructor(parent, transform) {\\n      super(parent);\\n      this.transform = transform;\\n    }\\n\\n    dependentFields() {\\n      return new Set();\\n    }\\n\\n    producedFields() {\\n      return new Set();\\n    }\\n\\n    hash() {\\n      return \\\"SampleTransform \\\".concat(hash(this.transform));\\n    }\\n\\n    assemble() {\\n      return {\\n        type: 'sample',\\n        size: this.transform.sample\\n      };\\n    }\\n\\n  }\\n\\n  function makeWalkTree(data) {\\n    // to name datasources\\n    let datasetIndex = 0;\\n    /**\\n     * Recursively walk down the tree.\\n     */\\n\\n    function walkTree(node, dataSource) {\\n      if (node instanceof SourceNode) {\\n        // If the source is a named data source or a data source with values, we need\\n        // to put it in a different data source. Otherwise, Vega may override the data.\\n        if (!node.isGenerator && !isUrlData(node.data)) {\\n          data.push(dataSource);\\n          const newData = {\\n            name: null,\\n            source: dataSource.name,\\n            transform: []\\n          };\\n          dataSource = newData;\\n        }\\n      }\\n\\n      if (node instanceof ParseNode) {\\n        if (node.parent instanceof SourceNode && !dataSource.source) {\\n          var _dataSource$format;\\n\\n          // If node's parent is a root source and the data source does not refer to another data source, use normal format parse\\n          dataSource.format = { ...((_dataSource$format = dataSource.format) !== null && _dataSource$format !== void 0 ? _dataSource$format : {}),\\n            parse: node.assembleFormatParse()\\n          }; // add calculates for all nested fields\\n\\n          dataSource.transform.push(...node.assembleTransforms(true));\\n        } else {\\n          // Otherwise use Vega expression to parse\\n          dataSource.transform.push(...node.assembleTransforms());\\n        }\\n      }\\n\\n      if (node instanceof FacetNode) {\\n        if (!dataSource.name) {\\n          dataSource.name = \\\"data_\\\".concat(datasetIndex++);\\n        }\\n\\n        if (!dataSource.source || dataSource.transform.length > 0) {\\n          data.push(dataSource);\\n          node.data = dataSource.name;\\n        } else {\\n          node.data = dataSource.source;\\n        }\\n\\n        for (const d of node.assemble()) {\\n          data.push(d);\\n        } // break here because the rest of the tree has to be taken care of by the facet.\\n\\n\\n        return;\\n      }\\n\\n      if (node instanceof GraticuleNode || node instanceof SequenceNode || node instanceof FilterInvalidNode || node instanceof FilterNode || node instanceof CalculateNode || node instanceof GeoPointNode || node instanceof GeoJSONNode || node instanceof AggregateNode || node instanceof LookupNode || node instanceof WindowTransformNode || node instanceof JoinAggregateTransformNode || node instanceof FoldTransformNode || node instanceof FlattenTransformNode || node instanceof DensityTransformNode || node instanceof LoessTransformNode || node instanceof QuantileTransformNode || node instanceof RegressionTransformNode || node instanceof IdentifierNode || node instanceof SampleTransformNode || node instanceof PivotTransformNode) {\\n        dataSource.transform.push(node.assemble());\\n      }\\n\\n      if (node instanceof BinNode || node instanceof TimeUnitNode || node instanceof ImputeNode || node instanceof StackNode) {\\n        dataSource.transform.push(...node.assemble());\\n      }\\n\\n      if (node instanceof OutputNode) {\\n        if (dataSource.source && dataSource.transform.length === 0) {\\n          node.setSource(dataSource.source);\\n        } else if (node.parent instanceof OutputNode) {\\n          // Note that an output node may be required but we still do not assemble a\\n          // separate data source for it.\\n          node.setSource(dataSource.name);\\n        } else {\\n          if (!dataSource.name) {\\n            dataSource.name = \\\"data_\\\".concat(datasetIndex++);\\n          } // Here we set the name of the datasource we generated. From now on\\n          // other assemblers can use it.\\n\\n\\n          node.setSource(dataSource.name); // if this node has more than one child, we will add a datasource automatically\\n\\n          if (node.numChildren() === 1) {\\n            data.push(dataSource);\\n            const newData = {\\n              name: null,\\n              source: dataSource.name,\\n              transform: []\\n            };\\n            dataSource = newData;\\n          }\\n        }\\n      }\\n\\n      switch (node.numChildren()) {\\n        case 0:\\n          // done\\n          if (node instanceof OutputNode && (!dataSource.source || dataSource.transform.length > 0)) {\\n            // do not push empty datasources that are simply references\\n            data.push(dataSource);\\n          }\\n\\n          break;\\n\\n        case 1:\\n          walkTree(node.children[0], dataSource);\\n          break;\\n\\n        default:\\n          {\\n            if (!dataSource.name) {\\n              dataSource.name = \\\"data_\\\".concat(datasetIndex++);\\n            }\\n\\n            let source = dataSource.name;\\n\\n            if (!dataSource.source || dataSource.transform.length > 0) {\\n              data.push(dataSource);\\n            } else {\\n              source = dataSource.source;\\n            }\\n\\n            for (const child of node.children) {\\n              const newData = {\\n                name: null,\\n                source: source,\\n                transform: []\\n              };\\n              walkTree(child, newData);\\n            }\\n\\n            break;\\n          }\\n      }\\n    }\\n\\n    return walkTree;\\n  }\\n  /**\\n   * Assemble data sources that are derived from faceted data.\\n   */\\n\\n\\n  function assembleFacetData(root) {\\n    const data = [];\\n    const walkTree = makeWalkTree(data);\\n\\n    for (const child of root.children) {\\n      walkTree(child, {\\n        source: root.name,\\n        name: null,\\n        transform: []\\n      });\\n    }\\n\\n    return data;\\n  }\\n  /**\\n   * Create Vega data array from a given compiled model and append all of them to the given array\\n   *\\n   * @param  model\\n   * @param  data array\\n   * @return modified data array\\n   */\\n\\n  function assembleRootData(dataComponent, datasets) {\\n    const data = []; // dataComponent.sources.forEach(debug);\\n    // draw(dataComponent.sources);\\n\\n    const walkTree = makeWalkTree(data);\\n    let sourceIndex = 0;\\n\\n    for (const root of dataComponent.sources) {\\n      // assign a name if the source does not have a name yet\\n      if (!root.hasName()) {\\n        root.dataName = \\\"source_\\\".concat(sourceIndex++);\\n      }\\n\\n      const newData = root.assemble();\\n      walkTree(root, newData);\\n    } // remove empty transform arrays for cleaner output\\n\\n\\n    for (const d of data) {\\n      if (d.transform.length === 0) {\\n        delete d.transform;\\n      }\\n    } // move sources without transforms (the ones that are potentially used in lookups) to the beginning\\n\\n\\n    let whereTo = 0;\\n\\n    for (const [i, d] of data.entries()) {\\n      var _d$transform;\\n\\n      if (((_d$transform = d.transform) !== null && _d$transform !== void 0 ? _d$transform : []).length === 0 && !d.source) {\\n        data.splice(whereTo++, 0, data.splice(i, 1)[0]);\\n      }\\n    } // now fix the from references in lookup transforms\\n\\n\\n    for (const d of data) {\\n      for (const t of (_d$transform2 = d.transform) !== null && _d$transform2 !== void 0 ? _d$transform2 : []) {\\n        var _d$transform2;\\n\\n        if (t.type === 'lookup') {\\n          t.from = dataComponent.outputNodes[t.from].getSource();\\n        }\\n      }\\n    } // inline values for datasets that are in the datastore\\n\\n\\n    for (const d of data) {\\n      if (d.name in datasets) {\\n        d.values = datasets[d.name];\\n      }\\n    }\\n\\n    return data;\\n  }\\n\\n  function getHeaderType(orient) {\\n    if (orient === 'top' || orient === 'left' || isSignalRef(orient)) {\\n      // we always use header for orient signal since we can't dynamically make header becomes footer\\n      return 'header';\\n    }\\n\\n    return 'footer';\\n  }\\n  function parseFacetHeaders(model) {\\n    for (const channel of FACET_CHANNELS) {\\n      parseFacetHeader(model, channel);\\n    }\\n\\n    mergeChildAxis(model, 'x');\\n    mergeChildAxis(model, 'y');\\n  }\\n\\n  function parseFacetHeader(model, channel) {\\n    const {\\n      facet,\\n      config,\\n      child,\\n      component\\n    } = model;\\n\\n    if (model.channelHasField(channel)) {\\n      var _fieldDef$header;\\n\\n      const fieldDef = facet[channel];\\n      const titleConfig = getHeaderProperty('title', null, config, channel);\\n      let title$1 = title(fieldDef, config, {\\n        allowDisabling: true,\\n        includeDefault: titleConfig === undefined || !!titleConfig\\n      });\\n\\n      if (child.component.layoutHeaders[channel].title) {\\n        // TODO: better handle multiline titles\\n        title$1 = isArray(title$1) ? title$1.join(', ') : title$1; // merge title with child to produce \\\"Title / Subtitle / Sub-subtitle\\\"\\n\\n        title$1 += ' / ' + child.component.layoutHeaders[channel].title;\\n        child.component.layoutHeaders[channel].title = null;\\n      }\\n\\n      const labelOrient = getHeaderProperty('labelOrient', fieldDef, config, channel);\\n      const header = (_fieldDef$header = fieldDef.header) !== null && _fieldDef$header !== void 0 ? _fieldDef$header : {};\\n      const labels = getFirstDefined(header.labels, config.header.labels, true);\\n      const headerType = contains(['bottom', 'right'], labelOrient) ? 'footer' : 'header';\\n      component.layoutHeaders[channel] = {\\n        title: title$1,\\n        facetFieldDef: fieldDef,\\n        [headerType]: channel === 'facet' ? [] : [makeHeaderComponent(model, channel, labels)]\\n      };\\n    }\\n  }\\n\\n  function makeHeaderComponent(model, channel, labels) {\\n    const sizeType = channel === 'row' ? 'height' : 'width';\\n    return {\\n      labels,\\n      sizeSignal: model.child.component.layoutSize.get(sizeType) ? model.child.getSizeSignalRef(sizeType) : undefined,\\n      axes: []\\n    };\\n  }\\n\\n  function mergeChildAxis(model, channel) {\\n    const {\\n      child\\n    } = model;\\n\\n    if (child.component.axes[channel]) {\\n      const {\\n        layoutHeaders,\\n        resolve\\n      } = model.component;\\n      resolve.axis[channel] = parseGuideResolve(resolve, channel);\\n\\n      if (resolve.axis[channel] === 'shared') {\\n        // For shared axis, move the axes to facet's header or footer\\n        const headerChannel = channel === 'x' ? 'column' : 'row';\\n        const layoutHeader = layoutHeaders[headerChannel];\\n\\n        for (const axisComponent of child.component.axes[channel]) {\\n          var _layoutHeader$headerT;\\n\\n          const headerType = getHeaderType(axisComponent.get('orient'));\\n          layoutHeader[headerType] = (_layoutHeader$headerT = layoutHeader[headerType]) !== null && _layoutHeader$headerT !== void 0 ? _layoutHeader$headerT : [makeHeaderComponent(model, headerChannel, false)]; // FIXME: assemble shouldn't be called here, but we do it this way so we only extract the main part of the axes\\n\\n          const mainAxis = assembleAxis(axisComponent, 'main', model.config, {\\n            header: true\\n          });\\n\\n          if (mainAxis) {\\n            // LayoutHeader no longer keep track of property precedence, thus let's combine.\\n            layoutHeader[headerType][0].axes.push(mainAxis);\\n          }\\n\\n          axisComponent.mainExtracted = true;\\n        }\\n      }\\n    }\\n  }\\n\\n  function parseLayerLayoutSize(model) {\\n    parseChildrenLayoutSize(model);\\n    parseNonUnitLayoutSizeForChannel(model, 'width');\\n    parseNonUnitLayoutSizeForChannel(model, 'height');\\n  }\\n  function parseConcatLayoutSize(model) {\\n    parseChildrenLayoutSize(model); // for columns === 1 (vconcat), we can completely merge width. Otherwise, we can treat merged width as childWidth.\\n\\n    const widthType = model.layout.columns === 1 ? 'width' : 'childWidth'; // for columns === undefined (hconcat), we can completely merge height. Otherwise, we can treat merged height as childHeight.\\n\\n    const heightType = model.layout.columns === undefined ? 'height' : 'childHeight';\\n    parseNonUnitLayoutSizeForChannel(model, widthType);\\n    parseNonUnitLayoutSizeForChannel(model, heightType);\\n  }\\n  function parseChildrenLayoutSize(model) {\\n    for (const child of model.children) {\\n      child.parseLayoutSize();\\n    }\\n  }\\n  /**\\n   * Merge child layout size (width or height).\\n   */\\n\\n  function parseNonUnitLayoutSizeForChannel(model, layoutSizeType) {\\n    /*\\n     * For concat, the parent width or height might not be the same as the children's shared height.\\n     * For example, hconcat's subviews may share width, but the shared width is not the hconcat view's width.\\n     *\\n     * layoutSizeType represents the output of the view (could be childWidth/childHeight/width/height)\\n     * while the sizeType represents the properties of the child.\\n     */\\n    const sizeType = getSizeTypeFromLayoutSizeType(layoutSizeType);\\n    const channel = getPositionScaleChannel(sizeType);\\n    const resolve = model.component.resolve;\\n    const layoutSizeCmpt = model.component.layoutSize;\\n    let mergedSize; // Try to merge layout size\\n\\n    for (const child of model.children) {\\n      const childSize = child.component.layoutSize.getWithExplicit(sizeType);\\n      const scaleResolve = resolve.scale[channel];\\n\\n      if (scaleResolve === 'independent' && childSize.value === 'step') {\\n        // Do not merge independent scales with range-step as their size depends\\n        // on the scale domains, which can be different between scales.\\n        mergedSize = undefined;\\n        break;\\n      }\\n\\n      if (mergedSize) {\\n        if (scaleResolve === 'independent' && mergedSize.value !== childSize.value) {\\n          // For independent scale, only merge if all the sizes are the same.\\n          // If the values are different, abandon the merge!\\n          mergedSize = undefined;\\n          break;\\n        }\\n\\n        mergedSize = mergeValuesWithExplicit(mergedSize, childSize, sizeType, '');\\n      } else {\\n        mergedSize = childSize;\\n      }\\n    }\\n\\n    if (mergedSize) {\\n      // If merged, rename size and set size of all children.\\n      for (const child of model.children) {\\n        model.renameSignal(child.getName(sizeType), model.getName(layoutSizeType));\\n        child.component.layoutSize.set(sizeType, 'merged', false);\\n      }\\n\\n      layoutSizeCmpt.setWithExplicit(layoutSizeType, mergedSize);\\n    } else {\\n      layoutSizeCmpt.setWithExplicit(layoutSizeType, {\\n        explicit: false,\\n        value: undefined\\n      });\\n    }\\n  }\\n\\n  function parseUnitLayoutSize(model) {\\n    const {\\n      size,\\n      component\\n    } = model;\\n\\n    for (const channel of POSITION_SCALE_CHANNELS) {\\n      const sizeType = getSizeChannel(channel);\\n\\n      if (size[sizeType]) {\\n        const specifiedSize = size[sizeType];\\n        component.layoutSize.set(sizeType, isStep(specifiedSize) ? 'step' : specifiedSize, true);\\n      } else {\\n        const defaultSize = defaultUnitSize(model, sizeType);\\n        component.layoutSize.set(sizeType, defaultSize, false);\\n      }\\n    }\\n  }\\n\\n  function defaultUnitSize(model, sizeType) {\\n    const channel = sizeType === 'width' ? 'x' : 'y';\\n    const config = model.config;\\n    const scaleComponent = model.getScaleComponent(channel);\\n\\n    if (scaleComponent) {\\n      const scaleType = scaleComponent.get('type');\\n      const range = scaleComponent.get('range');\\n\\n      if (hasDiscreteDomain(scaleType)) {\\n        const size = getViewConfigDiscreteSize(config.view, sizeType);\\n\\n        if (isVgRangeStep(range) || isStep(size)) {\\n          // For discrete domain with range.step, use dynamic width/height\\n          return 'step';\\n        } else {\\n          return size;\\n        }\\n      } else {\\n        return getViewConfigContinuousSize(config.view, sizeType);\\n      }\\n    } else if (model.hasProjection || model.mark === 'arc') {\\n      // arc should use continuous size by default otherwise the pie is extremely small\\n      return getViewConfigContinuousSize(config.view, sizeType);\\n    } else {\\n      const size = getViewConfigDiscreteSize(config.view, sizeType);\\n      return isStep(size) ? size.step : size;\\n    }\\n  }\\n\\n  function facetSortFieldName(fieldDef, sort, opt) {\\n    return vgField(sort, {\\n      suffix: \\\"by_\\\".concat(vgField(fieldDef)),\\n      ...(opt !== null && opt !== void 0 ? opt : {})\\n    });\\n  }\\n  class FacetModel extends ModelWithField {\\n    constructor(spec, parent, parentGivenName, config) {\\n      super(spec, 'facet', parent, parentGivenName, config, spec.resolve);\\n\\n      _defineProperty(this, \\\"facet\\\", void 0);\\n\\n      _defineProperty(this, \\\"child\\\", void 0);\\n\\n      _defineProperty(this, \\\"children\\\", void 0);\\n\\n      this.child = buildModel(spec.spec, this, this.getName('child'), undefined, config);\\n      this.children = [this.child];\\n      this.facet = this.initFacet(spec.facet);\\n    }\\n\\n    initFacet(facet) {\\n      // clone to prevent side effect to the original spec\\n      if (!isFacetMapping(facet)) {\\n        return {\\n          facet: this.initFacetFieldDef(facet, 'facet')\\n        };\\n      }\\n\\n      const channels = keys(facet);\\n      const normalizedFacet = {};\\n\\n      for (const channel of channels) {\\n        if (!contains([ROW, COLUMN], channel)) {\\n          // Drop unsupported channel\\n          warn(incompatibleChannel(channel, 'facet'));\\n          break;\\n        }\\n\\n        const fieldDef = facet[channel];\\n\\n        if (fieldDef.field === undefined) {\\n          warn(emptyFieldDef(fieldDef, channel));\\n          break;\\n        }\\n\\n        normalizedFacet[channel] = this.initFacetFieldDef(fieldDef, channel);\\n      }\\n\\n      return normalizedFacet;\\n    }\\n\\n    initFacetFieldDef(fieldDef, channel) {\\n      const {\\n        header,\\n        ...rest\\n      } = fieldDef; // Cast because we call initFieldDef, which assumes general FieldDef.\\n      // However, FacetFieldDef is a bit more constrained than the general FieldDef\\n\\n      const facetFieldDef = initFieldDef(rest, channel);\\n\\n      if (header) {\\n        facetFieldDef.header = replaceExprRefInIndex(header);\\n      }\\n\\n      return facetFieldDef;\\n    }\\n\\n    channelHasField(channel) {\\n      return !!this.facet[channel];\\n    }\\n\\n    fieldDef(channel) {\\n      return this.facet[channel];\\n    }\\n\\n    parseData() {\\n      this.component.data = parseData(this);\\n      this.child.parseData();\\n    }\\n\\n    parseLayoutSize() {\\n      parseChildrenLayoutSize(this);\\n    }\\n\\n    parseSelections() {\\n      // As a facet has a single child, the selection components are the same.\\n      // The child maintains its selections to assemble signals, which remain\\n      // within its unit.\\n      this.child.parseSelections();\\n      this.component.selection = this.child.component.selection;\\n    }\\n\\n    parseMarkGroup() {\\n      this.child.parseMarkGroup();\\n    }\\n\\n    parseAxesAndHeaders() {\\n      this.child.parseAxesAndHeaders();\\n      parseFacetHeaders(this);\\n    }\\n\\n    assembleSelectionTopLevelSignals(signals) {\\n      return this.child.assembleSelectionTopLevelSignals(signals);\\n    }\\n\\n    assembleSignals() {\\n      this.child.assembleSignals();\\n      return [];\\n    }\\n\\n    assembleSelectionData(data) {\\n      return this.child.assembleSelectionData(data);\\n    }\\n\\n    getHeaderLayoutMixins() {\\n      const layoutMixins = {};\\n\\n      for (const channel of FACET_CHANNELS) {\\n        for (const headerType of HEADER_TYPES) {\\n          const layoutHeaderComponent = this.component.layoutHeaders[channel];\\n          const headerComponent = layoutHeaderComponent[headerType];\\n          const {\\n            facetFieldDef\\n          } = layoutHeaderComponent;\\n\\n          if (facetFieldDef) {\\n            const titleOrient = getHeaderProperty('titleOrient', facetFieldDef.header, this.config, channel);\\n\\n            if (contains(['right', 'bottom'], titleOrient)) {\\n              var _layoutMixins$titleAn;\\n\\n              const headerChannel = getHeaderChannel(channel, titleOrient);\\n              layoutMixins.titleAnchor = (_layoutMixins$titleAn = layoutMixins.titleAnchor) !== null && _layoutMixins$titleAn !== void 0 ? _layoutMixins$titleAn : {};\\n              layoutMixins.titleAnchor[headerChannel] = 'end';\\n            }\\n          }\\n\\n          if (headerComponent === null || headerComponent === void 0 ? void 0 : headerComponent[0]) {\\n            // set header/footerBand\\n            const sizeType = channel === 'row' ? 'height' : 'width';\\n            const bandType = headerType === 'header' ? 'headerBand' : 'footerBand';\\n\\n            if (channel !== 'facet' && !this.child.component.layoutSize.get(sizeType)) {\\n              var _layoutMixins$bandTyp;\\n\\n              // If facet child does not have size signal, then apply headerBand\\n              layoutMixins[bandType] = (_layoutMixins$bandTyp = layoutMixins[bandType]) !== null && _layoutMixins$bandTyp !== void 0 ? _layoutMixins$bandTyp : {};\\n              layoutMixins[bandType][channel] = 0.5;\\n            }\\n\\n            if (layoutHeaderComponent.title) {\\n              var _layoutMixins$offset;\\n\\n              layoutMixins.offset = (_layoutMixins$offset = layoutMixins.offset) !== null && _layoutMixins$offset !== void 0 ? _layoutMixins$offset : {};\\n              layoutMixins.offset[channel === 'row' ? 'rowTitle' : 'columnTitle'] = 10;\\n            }\\n          }\\n        }\\n      }\\n\\n      return layoutMixins;\\n    }\\n\\n    assembleDefaultLayout() {\\n      const {\\n        column,\\n        row\\n      } = this.facet;\\n      const columns = column ? this.columnDistinctSignal() : row ? 1 : undefined;\\n      let align = 'all'; // Do not align the cells if the scale corresponding to the direction is indepent.\\n      // We always align when we facet into both row and column.\\n\\n      if (!row && this.component.resolve.scale.x === 'independent') {\\n        align = 'none';\\n      } else if (!column && this.component.resolve.scale.y === 'independent') {\\n        align = 'none';\\n      }\\n\\n      return { ...this.getHeaderLayoutMixins(),\\n        ...(columns ? {\\n          columns\\n        } : {}),\\n        bounds: 'full',\\n        align\\n      };\\n    }\\n\\n    assembleLayoutSignals() {\\n      // FIXME(https://github.com/vega/vega-lite/issues/1193): this can be incorrect if we have independent scales.\\n      return this.child.assembleLayoutSignals();\\n    }\\n\\n    columnDistinctSignal() {\\n      if (this.parent && this.parent instanceof FacetModel) {\\n        // For nested facet, we will add columns to group mark instead\\n        // See discussion in https://github.com/vega/vega/issues/952\\n        // and https://github.com/vega/vega-view/releases/tag/v1.2.6\\n        return undefined;\\n      } else {\\n        // In facetNode.assemble(), the name is always this.getName('column') + '_layout'.\\n        const facetLayoutDataName = this.getName('column_domain');\\n        return {\\n          signal: \\\"length(data('\\\".concat(facetLayoutDataName, \\\"'))\\\")\\n        };\\n      }\\n    }\\n\\n    assembleGroup(signals) {\\n      if (this.parent && this.parent instanceof FacetModel) {\\n        // Provide number of columns for layout.\\n        // See discussion in https://github.com/vega/vega/issues/952\\n        // and https://github.com/vega/vega-view/releases/tag/v1.2.6\\n        return { ...(this.channelHasField('column') ? {\\n            encode: {\\n              update: {\\n                // TODO(https://github.com/vega/vega-lite/issues/2759):\\n                // Correct the signal for facet of concat of facet_column\\n                columns: {\\n                  field: vgField(this.facet.column, {\\n                    prefix: 'distinct'\\n                  })\\n                }\\n              }\\n            }\\n          } : {}),\\n          ...super.assembleGroup(signals)\\n        };\\n      }\\n\\n      return super.assembleGroup(signals);\\n    }\\n    /**\\n     * Aggregate cardinality for calculating size\\n     */\\n\\n\\n    getCardinalityAggregateForChild() {\\n      const fields = [];\\n      const ops = [];\\n      const as = [];\\n\\n      if (this.child instanceof FacetModel) {\\n        if (this.child.channelHasField('column')) {\\n          const field = vgField(this.child.facet.column);\\n          fields.push(field);\\n          ops.push('distinct');\\n          as.push(\\\"distinct_\\\".concat(field));\\n        }\\n      } else {\\n        for (const channel of POSITION_SCALE_CHANNELS) {\\n          const childScaleComponent = this.child.component.scales[channel];\\n\\n          if (childScaleComponent && !childScaleComponent.merged) {\\n            const type = childScaleComponent.get('type');\\n            const range = childScaleComponent.get('range');\\n\\n            if (hasDiscreteDomain(type) && isVgRangeStep(range)) {\\n              const domain = assembleDomain(this.child, channel);\\n              const field = getFieldFromDomain(domain);\\n\\n              if (field) {\\n                fields.push(field);\\n                ops.push('distinct');\\n                as.push(\\\"distinct_\\\".concat(field));\\n              } else {\\n                warn(unknownField(channel));\\n              }\\n            }\\n          }\\n        }\\n      }\\n\\n      return {\\n        fields,\\n        ops,\\n        as\\n      };\\n    }\\n\\n    assembleFacet() {\\n      const {\\n        name,\\n        data\\n      } = this.component.data.facetRoot;\\n      const {\\n        row,\\n        column\\n      } = this.facet;\\n      const {\\n        fields,\\n        ops,\\n        as\\n      } = this.getCardinalityAggregateForChild();\\n      const groupby = [];\\n\\n      for (const channel of FACET_CHANNELS) {\\n        const fieldDef = this.facet[channel];\\n\\n        if (fieldDef) {\\n          groupby.push(vgField(fieldDef));\\n          const {\\n            bin,\\n            sort\\n          } = fieldDef;\\n\\n          if (isBinning(bin)) {\\n            groupby.push(vgField(fieldDef, {\\n              binSuffix: 'end'\\n            }));\\n          }\\n\\n          if (isSortField(sort)) {\\n            const {\\n              field,\\n              op = DEFAULT_SORT_OP\\n            } = sort;\\n            const outputName = facetSortFieldName(fieldDef, sort);\\n\\n            if (row && column) {\\n              // For crossed facet, use pre-calculate field as it requires a different groupby\\n              // For each calculated field, apply max and assign them to the same name as\\n              // all values of the same group should be the same anyway.\\n              fields.push(outputName);\\n              ops.push('max');\\n              as.push(outputName);\\n            } else {\\n              fields.push(field);\\n              ops.push(op);\\n              as.push(outputName);\\n            }\\n          } else if (isArray(sort)) {\\n            const outputName = sortArrayIndexField(fieldDef, channel);\\n            fields.push(outputName);\\n            ops.push('max');\\n            as.push(outputName);\\n          }\\n        }\\n      }\\n\\n      const cross = !!row && !!column;\\n      return {\\n        name,\\n        data,\\n        groupby,\\n        ...(cross || fields.length > 0 ? {\\n          aggregate: { ...(cross ? {\\n              cross\\n            } : {}),\\n            ...(fields.length ? {\\n              fields,\\n              ops,\\n              as\\n            } : {})\\n          }\\n        } : {})\\n      };\\n    }\\n\\n    facetSortFields(channel) {\\n      const {\\n        facet\\n      } = this;\\n      const fieldDef = facet[channel];\\n\\n      if (fieldDef) {\\n        if (isSortField(fieldDef.sort)) {\\n          return [facetSortFieldName(fieldDef, fieldDef.sort, {\\n            expr: 'datum'\\n          })];\\n        } else if (isArray(fieldDef.sort)) {\\n          return [sortArrayIndexField(fieldDef, channel, {\\n            expr: 'datum'\\n          })];\\n        }\\n\\n        return [vgField(fieldDef, {\\n          expr: 'datum'\\n        })];\\n      }\\n\\n      return [];\\n    }\\n\\n    facetSortOrder(channel) {\\n      const {\\n        facet\\n      } = this;\\n      const fieldDef = facet[channel];\\n\\n      if (fieldDef) {\\n        const {\\n          sort\\n        } = fieldDef;\\n        const order = (isSortField(sort) ? sort.order : !isArray(sort) && sort) || 'ascending';\\n        return [order];\\n      }\\n\\n      return [];\\n    }\\n\\n    assembleLabelTitle() {\\n      const {\\n        facet,\\n        config\\n      } = this;\\n\\n      if (facet.facet) {\\n        // Facet always uses title to display labels\\n        return assembleLabelTitle(facet.facet, 'facet', config);\\n      }\\n\\n      const ORTHOGONAL_ORIENT = {\\n        row: ['top', 'bottom'],\\n        column: ['left', 'right']\\n      };\\n\\n      for (const channel of HEADER_CHANNELS) {\\n        if (facet[channel]) {\\n          var _facet$channel;\\n\\n          const labelOrient = getHeaderProperty('labelOrient', (_facet$channel = facet[channel]) === null || _facet$channel === void 0 ? void 0 : _facet$channel.header, config, channel);\\n\\n          if (contains(ORTHOGONAL_ORIENT[channel], labelOrient)) {\\n            // Row/Column with orthogonal labelOrient must use title to display labels\\n            return assembleLabelTitle(facet[channel], channel, config);\\n          }\\n        }\\n      }\\n\\n      return undefined;\\n    }\\n\\n    assembleMarks() {\\n      const {\\n        child\\n      } = this; // If we facet by two dimensions, we need to add a cross operator to the aggregation\\n      // so that we create all groups\\n\\n      const facetRoot = this.component.data.facetRoot;\\n      const data = assembleFacetData(facetRoot);\\n      const encodeEntry = child.assembleGroupEncodeEntry(false);\\n      const title = this.assembleLabelTitle() || child.assembleTitle();\\n      const style = child.assembleGroupStyle();\\n      const markGroup = {\\n        name: this.getName('cell'),\\n        type: 'group',\\n        ...(title ? {\\n          title\\n        } : {}),\\n        ...(style ? {\\n          style\\n        } : {}),\\n        from: {\\n          facet: this.assembleFacet()\\n        },\\n        // TODO: move this to after data\\n        sort: {\\n          field: FACET_CHANNELS.map(c => this.facetSortFields(c)).flat(),\\n          order: FACET_CHANNELS.map(c => this.facetSortOrder(c)).flat()\\n        },\\n        ...(data.length > 0 ? {\\n          data: data\\n        } : {}),\\n        ...(encodeEntry ? {\\n          encode: {\\n            update: encodeEntry\\n          }\\n        } : {}),\\n        ...child.assembleGroup(assembleFacetSignals(this, []))\\n      };\\n      return [markGroup];\\n    }\\n\\n    getMapping() {\\n      return this.facet;\\n    }\\n\\n  }\\n\\n  function makeJoinAggregateFromFacet(parent, facet) {\\n    const {\\n      row,\\n      column\\n    } = facet;\\n\\n    if (row && column) {\\n      let newParent = null; // only need to make one for crossed facet\\n\\n      for (const fieldDef of [row, column]) {\\n        if (isSortField(fieldDef.sort)) {\\n          const {\\n            field,\\n            op = DEFAULT_SORT_OP\\n          } = fieldDef.sort;\\n          parent = newParent = new JoinAggregateTransformNode(parent, {\\n            joinaggregate: [{\\n              op,\\n              field,\\n              as: facetSortFieldName(fieldDef, fieldDef.sort, {\\n                forAs: true\\n              })\\n            }],\\n            groupby: [vgField(fieldDef)]\\n          });\\n        }\\n      }\\n\\n      return newParent;\\n    }\\n\\n    return null;\\n  }\\n\\n  function findSource(data, sources) {\\n    for (const other of sources) {\\n      var _data$format, _otherData$format, _data$format2, _otherData$format2;\\n\\n      const otherData = other.data; // if both datasets have a name defined, we cannot merge\\n\\n      if (data.name && other.hasName() && data.name !== other.dataName) {\\n        continue;\\n      }\\n\\n      const formatMesh = (_data$format = data['format']) === null || _data$format === void 0 ? void 0 : _data$format.mesh;\\n      const otherFeature = (_otherData$format = otherData.format) === null || _otherData$format === void 0 ? void 0 : _otherData$format.feature; // feature and mesh are mutually exclusive\\n\\n      if (formatMesh && otherFeature) {\\n        continue;\\n      } // we have to extract the same feature or mesh\\n\\n\\n      const formatFeature = (_data$format2 = data['format']) === null || _data$format2 === void 0 ? void 0 : _data$format2.feature;\\n\\n      if ((formatFeature || otherFeature) && formatFeature !== otherFeature) {\\n        continue;\\n      }\\n\\n      const otherMesh = (_otherData$format2 = otherData.format) === null || _otherData$format2 === void 0 ? void 0 : _otherData$format2.mesh;\\n\\n      if ((formatMesh || otherMesh) && formatMesh !== otherMesh) {\\n        continue;\\n      }\\n\\n      if (isInlineData(data) && isInlineData(otherData)) {\\n        if (deepEqual(data.values, otherData.values)) {\\n          return other;\\n        }\\n      } else if (isUrlData(data) && isUrlData(otherData)) {\\n        if (data.url === otherData.url) {\\n          return other;\\n        }\\n      } else if (isNamedData(data)) {\\n        if (data.name === other.dataName) {\\n          return other;\\n        }\\n      }\\n    }\\n\\n    return null;\\n  }\\n\\n  function parseRoot(model, sources) {\\n    if (model.data || !model.parent) {\\n      // if the model defines a data source or is the root, create a source node\\n      if (model.data === null) {\\n        // data: null means we should ignore the parent's data so we just create a new data source\\n        const source = new SourceNode({\\n          values: []\\n        });\\n        sources.push(source);\\n        return source;\\n      }\\n\\n      const existingSource = findSource(model.data, sources);\\n\\n      if (existingSource) {\\n        if (!isGenerator(model.data)) {\\n          existingSource.data.format = mergeDeep({}, model.data.format, existingSource.data.format);\\n        } // if the new source has a name but the existing one does not, we can set it\\n\\n\\n        if (!existingSource.hasName() && model.data.name) {\\n          existingSource.dataName = model.data.name;\\n        }\\n\\n        return existingSource;\\n      } else {\\n        const source = new SourceNode(model.data);\\n        sources.push(source);\\n        return source;\\n      }\\n    } else {\\n      // If we don't have a source defined (overriding parent's data), use the parent's facet root or main.\\n      return model.parent.component.data.facetRoot ? model.parent.component.data.facetRoot : model.parent.component.data.main;\\n    }\\n  }\\n  /**\\n   * Parses a transform array into a chain of connected dataflow nodes.\\n   */\\n\\n\\n  function parseTransformArray(head, model, ancestorParse) {\\n    let lookupCounter = 0;\\n\\n    for (const t of model.transforms) {\\n      let derivedType = undefined;\\n      let transformNode;\\n\\n      if (isCalculate(t)) {\\n        transformNode = head = new CalculateNode(head, t);\\n        derivedType = 'derived';\\n      } else if (isFilter(t)) {\\n        var _ParseNode$makeWithAn;\\n\\n        const implicit = getImplicitFromFilterTransform(t);\\n        transformNode = head = (_ParseNode$makeWithAn = ParseNode.makeWithAncestors(head, {}, implicit, ancestorParse)) !== null && _ParseNode$makeWithAn !== void 0 ? _ParseNode$makeWithAn : head;\\n        head = new FilterNode(head, model, t.filter);\\n      } else if (isBin(t)) {\\n        transformNode = head = BinNode.makeFromTransform(head, t, model);\\n        derivedType = 'number';\\n      } else if (isTimeUnit(t)) {\\n        derivedType = 'date';\\n        const parsedAs = ancestorParse.getWithExplicit(t.field); // Create parse node because the input to time unit is always date.\\n\\n        if (parsedAs.value === undefined) {\\n          head = new ParseNode(head, {\\n            [t.field]: derivedType\\n          });\\n          ancestorParse.set(t.field, derivedType, false);\\n        }\\n\\n        transformNode = head = TimeUnitNode.makeFromTransform(head, t);\\n      } else if (isAggregate$1(t)) {\\n        transformNode = head = AggregateNode.makeFromTransform(head, t);\\n        derivedType = 'number';\\n\\n        if (requiresSelectionId(model)) {\\n          head = new IdentifierNode(head);\\n        }\\n      } else if (isLookup(t)) {\\n        transformNode = head = LookupNode.make(head, model, t, lookupCounter++);\\n        derivedType = 'derived';\\n      } else if (isWindow(t)) {\\n        transformNode = head = new WindowTransformNode(head, t);\\n        derivedType = 'number';\\n      } else if (isJoinAggregate(t)) {\\n        transformNode = head = new JoinAggregateTransformNode(head, t);\\n        derivedType = 'number';\\n      } else if (isStack(t)) {\\n        transformNode = head = StackNode.makeFromTransform(head, t);\\n        derivedType = 'derived';\\n      } else if (isFold(t)) {\\n        transformNode = head = new FoldTransformNode(head, t);\\n        derivedType = 'derived';\\n      } else if (isFlatten(t)) {\\n        transformNode = head = new FlattenTransformNode(head, t);\\n        derivedType = 'derived';\\n      } else if (isPivot(t)) {\\n        transformNode = head = new PivotTransformNode(head, t);\\n        derivedType = 'derived';\\n      } else if (isSample(t)) {\\n        head = new SampleTransformNode(head, t);\\n      } else if (isImpute(t)) {\\n        transformNode = head = ImputeNode.makeFromTransform(head, t);\\n        derivedType = 'derived';\\n      } else if (isDensity(t)) {\\n        transformNode = head = new DensityTransformNode(head, t);\\n        derivedType = 'derived';\\n      } else if (isQuantile(t)) {\\n        transformNode = head = new QuantileTransformNode(head, t);\\n        derivedType = 'derived';\\n      } else if (isRegression(t)) {\\n        transformNode = head = new RegressionTransformNode(head, t);\\n        derivedType = 'derived';\\n      } else if (isLoess(t)) {\\n        transformNode = head = new LoessTransformNode(head, t);\\n        derivedType = 'derived';\\n      } else {\\n        warn(invalidTransformIgnored(t));\\n        continue;\\n      }\\n\\n      if (transformNode && derivedType !== undefined) {\\n        for (const field of (_transformNode$produc = transformNode.producedFields()) !== null && _transformNode$produc !== void 0 ? _transformNode$produc : []) {\\n          var _transformNode$produc;\\n\\n          ancestorParse.set(field, derivedType, false);\\n        }\\n      }\\n    }\\n\\n    return head;\\n  }\\n  /*\\n  Description of the dataflow (http://asciiflow.com/):\\n       +--------+\\n       | Source |\\n       +---+----+\\n           |\\n           v\\n       FormatParse\\n       (explicit)\\n           |\\n           v\\n       Transforms\\n  (Filter, Calculate, Binning, TimeUnit, Aggregate, Window, ...)\\n           |\\n           v\\n       FormatParse\\n       (implicit)\\n           |\\n           v\\n   Binning (in `encoding`)\\n           |\\n           v\\n   Timeunit (in `encoding`)\\n           |\\n           v\\n  Formula From Sort Array\\n           |\\n           v\\n        +--+--+\\n        | Raw |\\n        +-----+\\n           |\\n           v\\n    Aggregate (in `encoding`)\\n           |\\n           v\\n    Stack (in `encoding`)\\n           |\\n           v\\n    Invalid Filter\\n           |\\n           v\\n     +----------+\\n     |   Main   |\\n     +----------+\\n           |\\n           v\\n       +-------+\\n       | Facet |----\\u003e \\\"column\\\", \\\"column-layout\\\", and \\\"row\\\"\\n       +-------+\\n           |\\n           v\\n    ...Child data...\\n  */\\n\\n  function parseData(model) {\\n    var _data$format3, _ParseNode$makeExplic, _ParseNode$makeWithAn2;\\n\\n    let head = parseRoot(model, model.component.data.sources);\\n    const {\\n      outputNodes,\\n      outputNodeRefCounts\\n    } = model.component.data;\\n    const ancestorParse = model.parent ? model.parent.component.data.ancestorParse.clone() : new AncestorParse();\\n    const data = model.data;\\n\\n    if (isGenerator(data)) {\\n      // insert generator transform\\n      if (isSequenceGenerator(data)) {\\n        head = new SequenceNode(head, data.sequence);\\n      } else if (isGraticuleGenerator(data)) {\\n        head = new GraticuleNode(head, data.graticule);\\n      } // no parsing necessary for generator\\n\\n\\n      ancestorParse.parseNothing = true;\\n    } else if ((data === null || data === void 0 ? void 0 : (_data$format3 = data.format) === null || _data$format3 === void 0 ? void 0 : _data$format3.parse) === null) {\\n      // format.parse: null means disable parsing\\n      ancestorParse.parseNothing = true;\\n    }\\n\\n    head = (_ParseNode$makeExplic = ParseNode.makeExplicit(head, model, ancestorParse)) !== null && _ParseNode$makeExplic !== void 0 ? _ParseNode$makeExplic : head; // Default discrete selections require an identifer transform to\\n    // uniquely identify data points. Add this transform at the head of\\n    // the pipeline such that the identifier field is available for all\\n    // subsequent datasets. During optimization, we will remove this\\n    // transform if it proves to be unnecessary. Additional identifier\\n    // transforms will be necessary when new tuples are constructed\\n    // (e.g., post-aggregation).\\n\\n    head = new IdentifierNode(head); // HACK: This is equivalent for merging bin extent for union scale.\\n    // FIXME(https://github.com/vega/vega-lite/issues/2270): Correctly merge extent / bin node for shared bin scale\\n\\n    const parentIsLayer = model.parent && isLayerModel(model.parent);\\n\\n    if (isUnitModel(model) || isFacetModel(model)) {\\n      if (parentIsLayer) {\\n        var _BinNode$makeFromEnco;\\n\\n        head = (_BinNode$makeFromEnco = BinNode.makeFromEncoding(head, model)) !== null && _BinNode$makeFromEnco !== void 0 ? _BinNode$makeFromEnco : head;\\n      }\\n    }\\n\\n    if (model.transforms.length > 0) {\\n      head = parseTransformArray(head, model, ancestorParse);\\n    } // create parse nodes for fields that need to be parsed (or flattened) implicitly\\n\\n\\n    const implicitSelection = getImplicitFromSelection(model);\\n    const implicitEncoding = getImplicitFromEncoding(model);\\n    head = (_ParseNode$makeWithAn2 = ParseNode.makeWithAncestors(head, {}, { ...implicitSelection,\\n      ...implicitEncoding\\n    }, ancestorParse)) !== null && _ParseNode$makeWithAn2 !== void 0 ? _ParseNode$makeWithAn2 : head;\\n\\n    if (isUnitModel(model)) {\\n      head = GeoJSONNode.parseAll(head, model);\\n      head = GeoPointNode.parseAll(head, model);\\n    }\\n\\n    if (isUnitModel(model) || isFacetModel(model)) {\\n      var _TimeUnitNode$makeFro;\\n\\n      if (!parentIsLayer) {\\n        var _BinNode$makeFromEnco2;\\n\\n        head = (_BinNode$makeFromEnco2 = BinNode.makeFromEncoding(head, model)) !== null && _BinNode$makeFromEnco2 !== void 0 ? _BinNode$makeFromEnco2 : head;\\n      }\\n\\n      head = (_TimeUnitNode$makeFro = TimeUnitNode.makeFromEncoding(head, model)) !== null && _TimeUnitNode$makeFro !== void 0 ? _TimeUnitNode$makeFro : head;\\n      head = CalculateNode.parseAllForSortIndex(head, model);\\n    } // add an output node pre aggregation\\n\\n\\n    const rawName = model.getDataName(DataSourceType.Raw);\\n    const raw = new OutputNode(head, rawName, DataSourceType.Raw, outputNodeRefCounts);\\n    outputNodes[rawName] = raw;\\n    head = raw;\\n\\n    if (isUnitModel(model)) {\\n      var _ImputeNode$makeFromE, _StackNode$makeFromEn;\\n\\n      const agg = AggregateNode.makeFromEncoding(head, model);\\n\\n      if (agg) {\\n        head = agg;\\n\\n        if (requiresSelectionId(model)) {\\n          head = new IdentifierNode(head);\\n        }\\n      }\\n\\n      head = (_ImputeNode$makeFromE = ImputeNode.makeFromEncoding(head, model)) !== null && _ImputeNode$makeFromE !== void 0 ? _ImputeNode$makeFromE : head;\\n      head = (_StackNode$makeFromEn = StackNode.makeFromEncoding(head, model)) !== null && _StackNode$makeFromEn !== void 0 ? _StackNode$makeFromEn : head;\\n    }\\n\\n    if (isUnitModel(model)) {\\n      var _FilterInvalidNode$ma;\\n\\n      head = (_FilterInvalidNode$ma = FilterInvalidNode.make(head, model)) !== null && _FilterInvalidNode$ma !== void 0 ? _FilterInvalidNode$ma : head;\\n    } // output node for marks\\n\\n\\n    const mainName = model.getDataName(DataSourceType.Main);\\n    const main = new OutputNode(head, mainName, DataSourceType.Main, outputNodeRefCounts);\\n    outputNodes[mainName] = main;\\n    head = main;\\n\\n    if (isUnitModel(model)) {\\n      materializeSelections(model, main);\\n    } // add facet marker\\n\\n\\n    let facetRoot = null;\\n\\n    if (isFacetModel(model)) {\\n      var _makeJoinAggregateFro;\\n\\n      const facetName = model.getName('facet'); // Derive new aggregate for facet's sort field\\n      // augment data source with new fields for crossed facet\\n\\n      head = (_makeJoinAggregateFro = makeJoinAggregateFromFacet(head, model.facet)) !== null && _makeJoinAggregateFro !== void 0 ? _makeJoinAggregateFro : head;\\n      facetRoot = new FacetNode(head, model, facetName, main.getSource());\\n      outputNodes[facetName] = facetRoot;\\n    }\\n\\n    return { ...model.component.data,\\n      outputNodes,\\n      outputNodeRefCounts,\\n      raw,\\n      main,\\n      facetRoot,\\n      ancestorParse\\n    };\\n  }\\n\\n  class ConcatModel extends Model {\\n    constructor(spec, parent, parentGivenName, config) {\\n      var _spec$resolve, _spec$resolve$axis, _spec$resolve2, _spec$resolve2$axis;\\n\\n      super(spec, 'concat', parent, parentGivenName, config, spec.resolve);\\n\\n      _defineProperty(this, \\\"children\\\", void 0);\\n\\n      if (((_spec$resolve = spec.resolve) === null || _spec$resolve === void 0 ? void 0 : (_spec$resolve$axis = _spec$resolve.axis) === null || _spec$resolve$axis === void 0 ? void 0 : _spec$resolve$axis.x) === 'shared' || ((_spec$resolve2 = spec.resolve) === null || _spec$resolve2 === void 0 ? void 0 : (_spec$resolve2$axis = _spec$resolve2.axis) === null || _spec$resolve2$axis === void 0 ? void 0 : _spec$resolve2$axis.y) === 'shared') {\\n        warn(CONCAT_CANNOT_SHARE_AXIS);\\n      }\\n\\n      this.children = this.getChildren(spec).map((child, i) => {\\n        return buildModel(child, this, this.getName('concat_' + i), undefined, config);\\n      });\\n    }\\n\\n    parseData() {\\n      this.component.data = parseData(this);\\n\\n      for (const child of this.children) {\\n        child.parseData();\\n      }\\n    }\\n\\n    parseSelections() {\\n      // Merge selections up the hierarchy so that they may be referenced\\n      // across unit specs. Persist their definitions within each child\\n      // to assemble signals which remain within output Vega unit groups.\\n      this.component.selection = {};\\n\\n      for (const child of this.children) {\\n        child.parseSelections();\\n\\n        for (const key of keys(child.component.selection)) {\\n          this.component.selection[key] = child.component.selection[key];\\n        }\\n      }\\n    }\\n\\n    parseMarkGroup() {\\n      for (const child of this.children) {\\n        child.parseMarkGroup();\\n      }\\n    }\\n\\n    parseAxesAndHeaders() {\\n      for (const child of this.children) {\\n        child.parseAxesAndHeaders();\\n      } // TODO(#2415): support shared axes\\n\\n    }\\n\\n    getChildren(spec) {\\n      if (isVConcatSpec(spec)) {\\n        return spec.vconcat;\\n      } else if (isHConcatSpec(spec)) {\\n        return spec.hconcat;\\n      }\\n\\n      return spec.concat;\\n    }\\n\\n    parseLayoutSize() {\\n      parseConcatLayoutSize(this);\\n    }\\n\\n    parseAxisGroup() {\\n      return null;\\n    }\\n\\n    assembleSelectionTopLevelSignals(signals) {\\n      return this.children.reduce((sg, child) => child.assembleSelectionTopLevelSignals(sg), signals);\\n    }\\n\\n    assembleSignals() {\\n      this.children.forEach(child => child.assembleSignals());\\n      return [];\\n    }\\n\\n    assembleLayoutSignals() {\\n      const layoutSignals = assembleLayoutSignals(this);\\n\\n      for (const child of this.children) {\\n        layoutSignals.push(...child.assembleLayoutSignals());\\n      }\\n\\n      return layoutSignals;\\n    }\\n\\n    assembleSelectionData(data) {\\n      return this.children.reduce((db, child) => child.assembleSelectionData(db), data);\\n    }\\n\\n    assembleMarks() {\\n      // only children have marks\\n      return this.children.map(child => {\\n        const title = child.assembleTitle();\\n        const style = child.assembleGroupStyle();\\n        const encodeEntry = child.assembleGroupEncodeEntry(false);\\n        return {\\n          type: 'group',\\n          name: child.getName('group'),\\n          ...(title ? {\\n            title\\n          } : {}),\\n          ...(style ? {\\n            style\\n          } : {}),\\n          ...(encodeEntry ? {\\n            encode: {\\n              update: encodeEntry\\n            }\\n          } : {}),\\n          ...child.assembleGroup()\\n        };\\n      });\\n    }\\n\\n    assembleDefaultLayout() {\\n      const columns = this.layout.columns;\\n      return { ...(columns != null ? {\\n          columns: columns\\n        } : {}),\\n        bounds: 'full',\\n        // Use align each so it can work with multiple plots with different size\\n        align: 'each'\\n      };\\n    }\\n\\n  }\\n\\n  function isFalseOrNull(v) {\\n    return v === false || v === null;\\n  }\\n\\n  const AXIS_COMPONENT_PROPERTIES_INDEX = {\\n    disable: 1,\\n    gridScale: 1,\\n    scale: 1,\\n    ...COMMON_AXIS_PROPERTIES_INDEX,\\n    labelExpr: 1,\\n    encode: 1\\n  };\\n  const AXIS_COMPONENT_PROPERTIES = keys(AXIS_COMPONENT_PROPERTIES_INDEX);\\n  class AxisComponent extends Split {\\n    constructor(explicit = {}, implicit = {}, mainExtracted = false) {\\n      super();\\n      this.explicit = explicit;\\n      this.implicit = implicit;\\n      this.mainExtracted = mainExtracted;\\n    }\\n\\n    clone() {\\n      return new AxisComponent(duplicate(this.explicit), duplicate(this.implicit), this.mainExtracted);\\n    }\\n\\n    hasAxisPart(part) {\\n      // FIXME(https://github.com/vega/vega-lite/issues/2552) this method can be wrong if users use a Vega theme.\\n      if (part === 'axis') {\\n        // always has the axis container part\\n        return true;\\n      }\\n\\n      if (part === 'grid' || part === 'title') {\\n        return !!this.get(part);\\n      } // Other parts are enabled by default, so they should not be false or null.\\n\\n\\n      return !isFalseOrNull(this.get(part));\\n    }\\n\\n    hasOrientSignalRef() {\\n      return isSignalRef(this.explicit.orient);\\n    }\\n\\n  }\\n\\n  function labels$1(model, channel, specifiedLabelsSpec) {\\n    var _getFieldOrDatumDef;\\n\\n    const {\\n      encoding,\\n      config\\n    } = model;\\n    const fieldOrDatumDef = (_getFieldOrDatumDef = getFieldOrDatumDef(encoding[channel])) !== null && _getFieldOrDatumDef !== void 0 ? _getFieldOrDatumDef : getFieldOrDatumDef(encoding[getSecondaryRangeChannel(channel)]);\\n    const axis = model.axis(channel) || {};\\n    const {\\n      format,\\n      formatType\\n    } = axis;\\n\\n    if (isCustomFormatType(formatType)) {\\n      return {\\n        text: formatCustomType({\\n          fieldOrDatumDef,\\n          field: 'datum.value',\\n          format,\\n          formatType,\\n          config\\n        }),\\n        ...specifiedLabelsSpec\\n      };\\n    }\\n\\n    return specifiedLabelsSpec;\\n  }\\n\\n  function parseUnitAxes(model) {\\n    return POSITION_SCALE_CHANNELS.reduce((axis, channel) => {\\n      if (model.component.scales[channel]) {\\n        axis[channel] = [parseAxis(channel, model)];\\n      }\\n\\n      return axis;\\n    }, {});\\n  }\\n  const OPPOSITE_ORIENT = {\\n    bottom: 'top',\\n    top: 'bottom',\\n    left: 'right',\\n    right: 'left'\\n  };\\n  function parseLayerAxes(model) {\\n    const {\\n      axes,\\n      resolve\\n    } = model.component;\\n    const axisCount = {\\n      top: 0,\\n      bottom: 0,\\n      right: 0,\\n      left: 0\\n    };\\n\\n    for (const child of model.children) {\\n      child.parseAxesAndHeaders();\\n\\n      for (const channel of keys(child.component.axes)) {\\n        resolve.axis[channel] = parseGuideResolve(model.component.resolve, channel);\\n\\n        if (resolve.axis[channel] === 'shared') {\\n          // If the resolve says shared (and has not been overridden)\\n          // We will try to merge and see if there is a conflict\\n          axes[channel] = mergeAxisComponents(axes[channel], child.component.axes[channel]);\\n\\n          if (!axes[channel]) {\\n            // If merge returns nothing, there is a conflict so we cannot make the axis shared.\\n            // Thus, mark axis as independent and remove the axis component.\\n            resolve.axis[channel] = 'independent';\\n            delete axes[channel];\\n          }\\n        }\\n      }\\n    } // Move axes to layer's axis component and merge shared axes\\n\\n\\n    for (const channel of POSITION_SCALE_CHANNELS) {\\n      for (const child of model.children) {\\n        if (!child.component.axes[channel]) {\\n          // skip if the child does not have a particular axis\\n          continue;\\n        }\\n\\n        if (resolve.axis[channel] === 'independent') {\\n          var _axes$channel;\\n\\n          // If axes are independent, concat the axisComponent array.\\n          axes[channel] = ((_axes$channel = axes[channel]) !== null && _axes$channel !== void 0 ? _axes$channel : []).concat(child.component.axes[channel]); // Automatically adjust orient\\n\\n          for (const axisComponent of child.component.axes[channel]) {\\n            const {\\n              value: orient,\\n              explicit\\n            } = axisComponent.getWithExplicit('orient');\\n\\n            if (isSignalRef(orient)) {\\n              continue;\\n            }\\n\\n            if (axisCount[orient] > 0 && !explicit) {\\n              // Change axis orient if the number do not match\\n              const oppositeOrient = OPPOSITE_ORIENT[orient];\\n\\n              if (axisCount[orient] > axisCount[oppositeOrient]) {\\n                axisComponent.set('orient', oppositeOrient, false);\\n              }\\n            }\\n\\n            axisCount[orient]++; // TODO(https://github.com/vega/vega-lite/issues/2634): automatically add extra offset?\\n          }\\n        } // After merging, make sure to remove axes from child\\n\\n\\n        delete child.component.axes[channel];\\n      } // Suppress grid lines for dual axis charts (https://github.com/vega/vega-lite/issues/4676)\\n\\n\\n      if (resolve.axis[channel] === 'independent' && axes[channel] && axes[channel].length > 1) {\\n        for (const axisCmpt of axes[channel]) {\\n          if (!!axisCmpt.get('grid') && !axisCmpt.explicit.grid) {\\n            axisCmpt.implicit.grid = false;\\n          }\\n        }\\n      }\\n    }\\n  }\\n\\n  function mergeAxisComponents(mergedAxisCmpts, childAxisCmpts) {\\n    if (mergedAxisCmpts) {\\n      // FIXME: this is a bit wrong once we support multiple axes\\n      if (mergedAxisCmpts.length !== childAxisCmpts.length) {\\n        return undefined; // Cannot merge axis component with different number of axes.\\n      }\\n\\n      const length = mergedAxisCmpts.length;\\n\\n      for (let i = 0; i < length; i++) {\\n        const merged = mergedAxisCmpts[i];\\n        const child = childAxisCmpts[i];\\n\\n        if (!!merged !== !!child) {\\n          return undefined;\\n        } else if (merged && child) {\\n          const mergedOrient = merged.getWithExplicit('orient');\\n          const childOrient = child.getWithExplicit('orient');\\n\\n          if (mergedOrient.explicit && childOrient.explicit && mergedOrient.value !== childOrient.value) {\\n            // TODO: throw warning if resolve is explicit (We don't have info about explicit/implicit resolve yet.)\\n            // Cannot merge due to inconsistent orient\\n            return undefined;\\n          } else {\\n            mergedAxisCmpts[i] = mergeAxisComponent(merged, child);\\n          }\\n        }\\n      }\\n    } else {\\n      // For first one, return a copy of the child\\n      return childAxisCmpts.map(axisComponent => axisComponent.clone());\\n    }\\n\\n    return mergedAxisCmpts;\\n  }\\n\\n  function mergeAxisComponent(merged, child) {\\n    for (const prop of AXIS_COMPONENT_PROPERTIES) {\\n      const mergedValueWithExplicit = mergeValuesWithExplicit(merged.getWithExplicit(prop), child.getWithExplicit(prop), prop, 'axis', // Tie breaker function\\n      (v1, v2) => {\\n        switch (prop) {\\n          case 'title':\\n            return mergeTitleComponent(v1, v2);\\n\\n          case 'gridScale':\\n            return {\\n              explicit: v1.explicit,\\n              // keep the old explicit\\n              value: getFirstDefined(v1.value, v2.value)\\n            };\\n        }\\n\\n        return defaultTieBreaker(v1, v2, prop, 'axis');\\n      });\\n      merged.setWithExplicit(prop, mergedValueWithExplicit);\\n    }\\n\\n    return merged;\\n  } // eslint-disable-next-line @typescript-eslint/ban-types\\n\\n\\n  function isExplicit$1(value, property, axis, model, channel) {\\n    if (property === 'disable') {\\n      return axis !== undefined; // if axis is specified or null/false, then it's enable/disable state is explicit\\n    }\\n\\n    axis = axis || {};\\n\\n    switch (property) {\\n      case 'titleAngle':\\n      case 'labelAngle':\\n        return value === (isSignalRef(axis.labelAngle) ? axis.labelAngle : normalizeAngle(axis.labelAngle));\\n\\n      case 'values':\\n        return !!axis.values;\\n      // specified axis.values is already respected, but may get transformed.\\n\\n      case 'encode':\\n        // both VL axis.encoding and axis.labelAngle affect VG axis.encode\\n        return !!axis.encoding || !!axis.labelAngle;\\n\\n      case 'title':\\n        // title can be explicit if fieldDef.title is set\\n        if (value === getFieldDefTitle(model, channel)) {\\n          return true;\\n        }\\n\\n    } // Otherwise, things are explicit if the returned value matches the specified property\\n\\n\\n    return value === axis[property];\\n  }\\n  /**\\n   * Properties to always include values from config\\n   */\\n\\n\\n  const propsToAlwaysIncludeConfig = new Set(['grid', // Grid is an exception because we need to set grid = true to generate another grid axis\\n  'translate', // translate has dependent logic for bar's bin position and it's 0.5 by default in Vega. If a config overrides this value, we need to know.\\n  // the rest are not axis configs in Vega, but are in VL, so we need to set too.\\n  'format', 'formatType', 'orient', 'labelExpr', 'tickCount', 'position', 'tickMinStep']);\\n\\n  function parseAxis(channel, model) {\\n    var _axis, _config, _config$axis, _axis2, _axis$encoding;\\n\\n    let axis = model.axis(channel);\\n    const axisComponent = new AxisComponent();\\n    const fieldOrDatumDef = getFieldOrDatumDef(model.encoding[channel]);\\n    const {\\n      mark,\\n      config\\n    } = model;\\n    const orient = ((_axis = axis) === null || _axis === void 0 ? void 0 : _axis.orient) || ((_config = config[channel === 'x' ? 'axisX' : 'axisY']) === null || _config === void 0 ? void 0 : _config.orient) || ((_config$axis = config.axis) === null || _config$axis === void 0 ? void 0 : _config$axis.orient) || defaultOrient(channel);\\n    const scaleType = model.getScaleComponent(channel).get('type');\\n    const axisConfigs = getAxisConfigs(channel, scaleType, orient, model.config);\\n    const disable = axis !== undefined ? !axis : getAxisConfig('disable', config.style, (_axis2 = axis) === null || _axis2 === void 0 ? void 0 : _axis2.style, axisConfigs).configValue;\\n    axisComponent.set('disable', disable, axis !== undefined);\\n\\n    if (disable) {\\n      return axisComponent;\\n    }\\n\\n    axis = axis || {};\\n    const labelAngle = getLabelAngle(fieldOrDatumDef, axis, channel, config.style, axisConfigs);\\n    const ruleParams = {\\n      fieldOrDatumDef,\\n      axis,\\n      channel,\\n      model,\\n      scaleType,\\n      orient,\\n      labelAngle,\\n      mark,\\n      config\\n    }; // 1.2. Add properties\\n\\n    for (const property of AXIS_COMPONENT_PROPERTIES) {\\n      const value = property in axisRules ? axisRules[property](ruleParams) : isAxisProperty(property) ? axis[property] : undefined;\\n      const hasValue = value !== undefined;\\n      const explicit = isExplicit$1(value, property, axis, model, channel);\\n\\n      if (hasValue && explicit) {\\n        axisComponent.set(property, value, explicit);\\n      } else {\\n        const {\\n          configValue = undefined,\\n          configFrom = undefined\\n        } = isAxisProperty(property) && property !== 'values' ? getAxisConfig(property, config.style, axis.style, axisConfigs) : {};\\n        const hasConfigValue = configValue !== undefined;\\n\\n        if (hasValue && !hasConfigValue) {\\n          // only set property if it is explicitly set or has no config value (otherwise we will accidentally override config)\\n          axisComponent.set(property, value, explicit);\\n        } else if ( // Cases need implicit values\\n        // 1. Axis config that aren't available in Vega\\n        !(configFrom === 'vgAxisConfig') || // 2. Certain properties are always included (see `propsToAlwaysIncludeConfig`'s declaration for more details)\\n        propsToAlwaysIncludeConfig.has(property) && hasConfigValue || // 3. Conditional axis values and signals\\n        isConditionalAxisValue(configValue) || isSignalRef(configValue)) {\\n          // If a config is specified and is conditional, copy conditional value from axis config\\n          axisComponent.set(property, configValue, false);\\n        }\\n      }\\n    } // 2) Add guide encode definition groups\\n\\n\\n    const axisEncoding = (_axis$encoding = axis.encoding) !== null && _axis$encoding !== void 0 ? _axis$encoding : {};\\n    const axisEncode = AXIS_PARTS.reduce((e, part) => {\\n      var _axisEncoding$part;\\n\\n      if (!axisComponent.hasAxisPart(part)) {\\n        // No need to create encode for a disabled part.\\n        return e;\\n      }\\n\\n      const axisEncodingPart = guideEncodeEntry((_axisEncoding$part = axisEncoding[part]) !== null && _axisEncoding$part !== void 0 ? _axisEncoding$part : {}, model);\\n      const value = part === 'labels' ? labels$1(model, channel, axisEncodingPart) : axisEncodingPart;\\n\\n      if (value !== undefined && !isEmpty(value)) {\\n        e[part] = {\\n          update: value\\n        };\\n      }\\n\\n      return e;\\n    }, {}); // FIXME: By having encode as one property, we won't have fine grained encode merging.\\n\\n    if (!isEmpty(axisEncode)) {\\n      axisComponent.set('encode', axisEncode, !!axis.encoding || axis.labelAngle !== undefined);\\n    }\\n\\n    return axisComponent;\\n  }\\n\\n  function initLayoutSize({\\n    encoding,\\n    size\\n  }) {\\n    for (const channel of POSITION_SCALE_CHANNELS) {\\n      const sizeType = getSizeChannel(channel);\\n\\n      if (isStep(size[sizeType])) {\\n        if (isContinuousFieldOrDatumDef(encoding[channel])) {\\n          delete size[sizeType];\\n          warn(stepDropped(sizeType));\\n        }\\n      }\\n    }\\n\\n    return size;\\n  }\\n\\n  function initMarkdef(originalMarkDef, encoding, config) {\\n    const markDef = replaceExprRefInIndex(originalMarkDef); // set orient, which can be overridden by rules as sometimes the specified orient is invalid.\\n\\n    const specifiedOrient = getMarkPropOrConfig('orient', markDef, config);\\n    markDef.orient = orient(markDef.type, encoding, specifiedOrient);\\n\\n    if (specifiedOrient !== undefined && specifiedOrient !== markDef.orient) {\\n      warn(orientOverridden(markDef.orient, specifiedOrient));\\n    }\\n\\n    if (markDef.type === 'bar' && markDef.orient) {\\n      const cornerRadiusEnd = getMarkPropOrConfig('cornerRadiusEnd', markDef, config);\\n\\n      if (cornerRadiusEnd !== undefined) {\\n        const newProps = markDef.orient === 'horizontal' && encoding.x2 || markDef.orient === 'vertical' && encoding.y2 ? ['cornerRadius'] : BAR_CORNER_RADIUS_INDEX[markDef.orient];\\n\\n        for (const newProp of newProps) {\\n          markDef[newProp] = cornerRadiusEnd;\\n        }\\n\\n        if (markDef.cornerRadiusEnd !== undefined) {\\n          delete markDef.cornerRadiusEnd; // no need to keep the original cap cornerRadius\\n        }\\n      }\\n    } // set opacity and filled if not specified in mark config\\n\\n\\n    const specifiedOpacity = getMarkPropOrConfig('opacity', markDef, config);\\n\\n    if (specifiedOpacity === undefined) {\\n      markDef.opacity = opacity(markDef.type, encoding);\\n    } // set cursor, which should be pointer if href channel is present unless otherwise specified\\n\\n\\n    const specifiedCursor = getMarkPropOrConfig('cursor', markDef, config);\\n\\n    if (specifiedCursor === undefined) {\\n      markDef.cursor = cursor(markDef, encoding, config);\\n    }\\n\\n    return markDef;\\n  }\\n\\n  function cursor(markDef, encoding, config) {\\n    if (encoding.href || markDef.href || getMarkPropOrConfig('href', markDef, config)) {\\n      return 'pointer';\\n    }\\n\\n    return markDef.cursor;\\n  }\\n\\n  function opacity(mark, encoding) {\\n    if (contains([POINT, TICK, CIRCLE, SQUARE], mark)) {\\n      // point-based marks\\n      if (!isAggregate(encoding)) {\\n        return 0.7;\\n      }\\n    }\\n\\n    return undefined;\\n  }\\n\\n  function defaultFilled(markDef, config, {\\n    graticule\\n  }) {\\n    if (graticule) {\\n      return false;\\n    }\\n\\n    const filledConfig = getMarkConfig('filled', markDef, config);\\n    const mark = markDef.type;\\n    return getFirstDefined(filledConfig, mark !== POINT && mark !== LINE && mark !== RULE);\\n  }\\n\\n  function orient(mark, encoding, specifiedOrient) {\\n    switch (mark) {\\n      case POINT:\\n      case CIRCLE:\\n      case SQUARE:\\n      case TEXT$1:\\n      case RECT:\\n      case IMAGE:\\n        // orient is meaningless for these marks.\\n        return undefined;\\n    }\\n\\n    const {\\n      x,\\n      y,\\n      x2,\\n      y2\\n    } = encoding;\\n\\n    switch (mark) {\\n      case BAR:\\n        if (isFieldDef(x) && (isBinned(x.bin) || isFieldDef(y) && y.aggregate && !x.aggregate)) {\\n          return 'vertical';\\n        }\\n\\n        if (isFieldDef(y) && (isBinned(y.bin) || isFieldDef(x) && x.aggregate && !y.aggregate)) {\\n          return 'horizontal';\\n        }\\n\\n        if (y2 || x2) {\\n          // Ranged bar does not always have clear orientation, so we allow overriding\\n          if (specifiedOrient) {\\n            return specifiedOrient;\\n          } // If y is range and x is non-range, non-bin Q, y is likely a prebinned field\\n\\n\\n          if (!x2) {\\n            if (isFieldDef(x) && x.type === QUANTITATIVE && !isBinning(x.bin) || isNumericDataDef(x)) {\\n              return 'horizontal';\\n            }\\n          } // If x is range and y is non-range, non-bin Q, x is likely a prebinned field\\n\\n\\n          if (!y2) {\\n            if (isFieldDef(y) && y.type === QUANTITATIVE && !isBinning(y.bin) || isNumericDataDef(y)) {\\n              return 'vertical';\\n            }\\n          }\\n        }\\n\\n      // falls through\\n\\n      case RULE:\\n        // return undefined for line segment rule and bar with both axis ranged\\n        // we have to ignore the case that the data are already binned\\n        if (x2 && !(isFieldDef(x) && isBinned(x.bin)) && y2 && !(isFieldDef(y) && isBinned(y.bin))) {\\n          return undefined;\\n        }\\n\\n      // falls through\\n\\n      case AREA:\\n        // If there are range for both x and y, y (vertical) has higher precedence.\\n        if (y2) {\\n          if (isFieldDef(y) && isBinned(y.bin)) {\\n            return 'horizontal';\\n          } else {\\n            return 'vertical';\\n          }\\n        } else if (x2) {\\n          if (isFieldDef(x) && isBinned(x.bin)) {\\n            return 'vertical';\\n          } else {\\n            return 'horizontal';\\n          }\\n        } else if (mark === RULE) {\\n          if (x && !y) {\\n            return 'vertical';\\n          } else if (y && !x) {\\n            return 'horizontal';\\n          }\\n        }\\n\\n      // falls through\\n\\n      case LINE:\\n      case TICK:\\n        {\\n          // Tick is opposite to bar, line, area and never have ranged mark.\\n          const xIsContinuous = isContinuousFieldOrDatumDef(x);\\n          const yIsContinuous = isContinuousFieldOrDatumDef(y);\\n\\n          if (xIsContinuous && !yIsContinuous) {\\n            return mark !== 'tick' ? 'horizontal' : 'vertical';\\n          } else if (!xIsContinuous && yIsContinuous) {\\n            return mark !== 'tick' ? 'vertical' : 'horizontal';\\n          } else if (xIsContinuous && yIsContinuous) {\\n            const xDef = x; // we can cast here since they are surely fieldDef\\n\\n            const yDef = y;\\n            const xIsTemporal = xDef.type === TEMPORAL;\\n            const yIsTemporal = yDef.type === TEMPORAL; // temporal without timeUnit is considered continuous, but better serves as dimension\\n\\n            if (xIsTemporal && !yIsTemporal) {\\n              return mark !== 'tick' ? 'vertical' : 'horizontal';\\n            } else if (!xIsTemporal && yIsTemporal) {\\n              return mark !== 'tick' ? 'horizontal' : 'vertical';\\n            }\\n\\n            if (!xDef.aggregate && yDef.aggregate) {\\n              return mark !== 'tick' ? 'vertical' : 'horizontal';\\n            } else if (xDef.aggregate && !yDef.aggregate) {\\n              return mark !== 'tick' ? 'horizontal' : 'vertical';\\n            }\\n\\n            if (specifiedOrient) {\\n              // When ambiguous, use user specified one.\\n              return specifiedOrient;\\n            }\\n\\n            return 'vertical';\\n          } else {\\n            // Discrete x Discrete case\\n            if (specifiedOrient) {\\n              // When ambiguous, use user specified one.\\n              return specifiedOrient;\\n            }\\n\\n            return undefined;\\n          }\\n        }\\n    }\\n\\n    return 'vertical';\\n  }\\n\\n  const arc = {\\n    vgMark: 'arc',\\n    encodeEntry: model => {\\n      return { ...baseEncodeEntry(model, {\\n          align: 'ignore',\\n          baseline: 'ignore',\\n          color: 'include',\\n          size: 'ignore',\\n          orient: 'ignore',\\n          theta: 'ignore'\\n        }),\\n        ...pointPosition('x', model, {\\n          defaultPos: 'mid'\\n        }),\\n        ...pointPosition('y', model, {\\n          defaultPos: 'mid'\\n        }),\\n        // arcs are rectangles in polar coordinates\\n        ...rectPosition(model, 'radius', 'arc'),\\n        ...rectPosition(model, 'theta', 'arc')\\n      };\\n    }\\n  };\\n\\n  const area = {\\n    vgMark: 'area',\\n    encodeEntry: model => {\\n      return { ...baseEncodeEntry(model, {\\n          align: 'ignore',\\n          baseline: 'ignore',\\n          color: 'include',\\n          orient: 'include',\\n          size: 'ignore',\\n          theta: 'ignore'\\n        }),\\n        ...pointOrRangePosition('x', model, {\\n          defaultPos: 'zeroOrMin',\\n          defaultPos2: 'zeroOrMin',\\n          range: model.markDef.orient === 'horizontal'\\n        }),\\n        ...pointOrRangePosition('y', model, {\\n          defaultPos: 'zeroOrMin',\\n          defaultPos2: 'zeroOrMin',\\n          range: model.markDef.orient === 'vertical'\\n        }),\\n        ...defined(model)\\n      };\\n    }\\n  };\\n\\n  const bar = {\\n    vgMark: 'rect',\\n    encodeEntry: model => {\\n      return { ...baseEncodeEntry(model, {\\n          align: 'ignore',\\n          baseline: 'ignore',\\n          color: 'include',\\n          orient: 'ignore',\\n          size: 'ignore',\\n          theta: 'ignore'\\n        }),\\n        ...rectPosition(model, 'x', 'bar'),\\n        ...rectPosition(model, 'y', 'bar')\\n      };\\n    }\\n  };\\n\\n  const geoshape = {\\n    vgMark: 'shape',\\n    encodeEntry: model => {\\n      return { ...baseEncodeEntry(model, {\\n          align: 'ignore',\\n          baseline: 'ignore',\\n          color: 'include',\\n          size: 'ignore',\\n          orient: 'ignore',\\n          theta: 'ignore'\\n        })\\n      };\\n    },\\n    postEncodingTransform: model => {\\n      const {\\n        encoding\\n      } = model;\\n      const shapeDef = encoding.shape;\\n      const transform = {\\n        type: 'geoshape',\\n        projection: model.projectionName(),\\n        // as: 'shape',\\n        ...(shapeDef && isFieldDef(shapeDef) && shapeDef.type === GEOJSON ? {\\n          field: vgField(shapeDef, {\\n            expr: 'datum'\\n          })\\n        } : {})\\n      };\\n      return [transform];\\n    }\\n  };\\n\\n  const image = {\\n    vgMark: 'image',\\n    encodeEntry: model => {\\n      return { ...baseEncodeEntry(model, {\\n          align: 'ignore',\\n          baseline: 'ignore',\\n          color: 'ignore',\\n          orient: 'ignore',\\n          size: 'ignore',\\n          theta: 'ignore'\\n        }),\\n        ...rectPosition(model, 'x', 'image'),\\n        ...rectPosition(model, 'y', 'image'),\\n        ...text(model, 'url')\\n      };\\n    }\\n  };\\n\\n  const line = {\\n    vgMark: 'line',\\n    encodeEntry: model => {\\n      return { ...baseEncodeEntry(model, {\\n          align: 'ignore',\\n          baseline: 'ignore',\\n          color: 'include',\\n          size: 'ignore',\\n          orient: 'ignore',\\n          theta: 'ignore'\\n        }),\\n        ...pointPosition('x', model, {\\n          defaultPos: 'mid'\\n        }),\\n        ...pointPosition('y', model, {\\n          defaultPos: 'mid'\\n        }),\\n        ...nonPosition('size', model, {\\n          vgChannel: 'strokeWidth' // VL's line size is strokeWidth\\n\\n        }),\\n        ...defined(model)\\n      };\\n    }\\n  };\\n  const trail = {\\n    vgMark: 'trail',\\n    encodeEntry: model => {\\n      return { ...baseEncodeEntry(model, {\\n          align: 'ignore',\\n          baseline: 'ignore',\\n          color: 'include',\\n          size: 'include',\\n          orient: 'ignore',\\n          theta: 'ignore'\\n        }),\\n        ...pointPosition('x', model, {\\n          defaultPos: 'mid'\\n        }),\\n        ...pointPosition('y', model, {\\n          defaultPos: 'mid'\\n        }),\\n        ...nonPosition('size', model),\\n        ...defined(model)\\n      };\\n    }\\n  };\\n\\n  function encodeEntry(model, fixedShape) {\\n    const {\\n      config\\n    } = model;\\n    return { ...baseEncodeEntry(model, {\\n        align: 'ignore',\\n        baseline: 'ignore',\\n        color: 'include',\\n        size: 'include',\\n        orient: 'ignore',\\n        theta: 'ignore'\\n      }),\\n      ...pointPosition('x', model, {\\n        defaultPos: 'mid'\\n      }),\\n      ...pointPosition('y', model, {\\n        defaultPos: 'mid'\\n      }),\\n      ...nonPosition('size', model),\\n      ...nonPosition('angle', model),\\n      ...shapeMixins(model, config, fixedShape)\\n    };\\n  }\\n\\n  function shapeMixins(model, config, fixedShape) {\\n    if (fixedShape) {\\n      return {\\n        shape: {\\n          value: fixedShape\\n        }\\n      };\\n    }\\n\\n    return nonPosition('shape', model);\\n  }\\n  const point = {\\n    vgMark: 'symbol',\\n    encodeEntry: model => {\\n      return encodeEntry(model);\\n    }\\n  };\\n  const circle = {\\n    vgMark: 'symbol',\\n    encodeEntry: model => {\\n      return encodeEntry(model, 'circle');\\n    }\\n  };\\n  const square = {\\n    vgMark: 'symbol',\\n    encodeEntry: model => {\\n      return encodeEntry(model, 'square');\\n    }\\n  };\\n\\n  const rect = {\\n    vgMark: 'rect',\\n    encodeEntry: model => {\\n      return { ...baseEncodeEntry(model, {\\n          align: 'ignore',\\n          baseline: 'ignore',\\n          color: 'include',\\n          orient: 'ignore',\\n          size: 'ignore',\\n          theta: 'ignore'\\n        }),\\n        ...rectPosition(model, 'x', 'rect'),\\n        ...rectPosition(model, 'y', 'rect')\\n      };\\n    }\\n  };\\n\\n  const rule = {\\n    vgMark: 'rule',\\n    encodeEntry: model => {\\n      const {\\n        markDef\\n      } = model;\\n      const orient = markDef.orient;\\n\\n      if (!model.encoding.x && !model.encoding.y && !model.encoding.latitude && !model.encoding.longitude) {\\n        // Show nothing if we have none of x, y, lat, and long.\\n        return {};\\n      }\\n\\n      return { ...baseEncodeEntry(model, {\\n          align: 'ignore',\\n          baseline: 'ignore',\\n          color: 'include',\\n          orient: 'ignore',\\n          size: 'ignore',\\n          theta: 'ignore'\\n        }),\\n        ...pointOrRangePosition('x', model, {\\n          defaultPos: orient === 'horizontal' ? 'zeroOrMax' : 'mid',\\n          defaultPos2: 'zeroOrMin',\\n          range: orient !== 'vertical' // include x2 for horizontal or line segment rule\\n\\n        }),\\n        ...pointOrRangePosition('y', model, {\\n          defaultPos: orient === 'vertical' ? 'zeroOrMax' : 'mid',\\n          defaultPos2: 'zeroOrMin',\\n          range: orient !== 'horizontal' // include y2 for vertical or line segment rule\\n\\n        }),\\n        ...nonPosition('size', model, {\\n          vgChannel: 'strokeWidth' // VL's rule size is strokeWidth\\n\\n        })\\n      };\\n    }\\n  };\\n\\n  const text$1 = {\\n    vgMark: 'text',\\n    encodeEntry: model => {\\n      const {\\n        config,\\n        encoding\\n      } = model;\\n      return { ...baseEncodeEntry(model, {\\n          align: 'include',\\n          baseline: 'include',\\n          color: 'include',\\n          size: 'ignore',\\n          orient: 'ignore',\\n          theta: 'include'\\n        }),\\n        ...pointPosition('x', model, {\\n          defaultPos: 'mid'\\n        }),\\n        ...pointPosition('y', model, {\\n          defaultPos: 'mid'\\n        }),\\n        ...text(model),\\n        ...nonPosition('size', model, {\\n          vgChannel: 'fontSize' // VL's text size is fontSize\\n\\n        }),\\n        ...nonPosition('angle', model),\\n        ...valueIfDefined('align', align(model.markDef, encoding, config)),\\n        ...valueIfDefined('baseline', baseline(model.markDef, encoding, config)),\\n        ...pointPosition('radius', model, {\\n          defaultPos: null,\\n          isMidPoint: true\\n        }),\\n        ...pointPosition('theta', model, {\\n          defaultPos: null,\\n          isMidPoint: true\\n        })\\n      };\\n    }\\n  };\\n\\n  function align(markDef, encoding, config) {\\n    const a = getMarkPropOrConfig('align', markDef, config);\\n\\n    if (a === undefined) {\\n      return 'center';\\n    } // If there is a config, Vega-parser will process this already.\\n\\n\\n    return undefined;\\n  }\\n\\n  function baseline(markDef, encoding, config) {\\n    const b = getMarkPropOrConfig('baseline', markDef, config);\\n\\n    if (b === undefined) {\\n      return 'middle';\\n    } // If there is a config, Vega-parser will process this already.\\n\\n\\n    return undefined;\\n  }\\n\\n  const tick = {\\n    vgMark: 'rect',\\n    encodeEntry: model => {\\n      const {\\n        config,\\n        markDef\\n      } = model;\\n      const orient = markDef.orient;\\n      const vgSizeChannel = orient === 'horizontal' ? 'width' : 'height';\\n      const vgThicknessChannel = orient === 'horizontal' ? 'height' : 'width';\\n      return { ...baseEncodeEntry(model, {\\n          align: 'ignore',\\n          baseline: 'ignore',\\n          color: 'include',\\n          orient: 'ignore',\\n          size: 'ignore',\\n          theta: 'ignore'\\n        }),\\n        ...pointPosition('x', model, {\\n          defaultPos: 'mid',\\n          vgChannel: 'xc'\\n        }),\\n        ...pointPosition('y', model, {\\n          defaultPos: 'mid',\\n          vgChannel: 'yc'\\n        }),\\n        // size / thickness => width / height\\n        ...nonPosition('size', model, {\\n          defaultValue: defaultSize(model),\\n          vgChannel: vgSizeChannel\\n        }),\\n        [vgThicknessChannel]: signalOrValueRef(getMarkPropOrConfig('thickness', markDef, config))\\n      };\\n    }\\n  };\\n\\n  function defaultSize(model) {\\n    var _getMarkPropOrConfig;\\n\\n    const {\\n      config,\\n      markDef\\n    } = model;\\n    const {\\n      orient\\n    } = markDef;\\n    const vgSizeChannel = orient === 'horizontal' ? 'width' : 'height';\\n    const scale = model.getScaleComponent(orient === 'horizontal' ? 'x' : 'y');\\n    const markPropOrConfig = (_getMarkPropOrConfig = getMarkPropOrConfig('size', markDef, config, {\\n      vgChannel: vgSizeChannel\\n    })) !== null && _getMarkPropOrConfig !== void 0 ? _getMarkPropOrConfig : config.tick.bandSize;\\n\\n    if (markPropOrConfig !== undefined) {\\n      return markPropOrConfig;\\n    } else {\\n      const scaleRange = scale ? scale.get('range') : undefined;\\n\\n      if (scaleRange && isVgRangeStep(scaleRange) && isNumber(scaleRange.step)) {\\n        return scaleRange.step * 3 / 4;\\n      }\\n\\n      const defaultViewStep = getViewConfigDiscreteStep(config.view, vgSizeChannel);\\n      return defaultViewStep * 3 / 4;\\n    }\\n  }\\n\\n  const markCompiler = {\\n    arc,\\n    area,\\n    bar,\\n    circle,\\n    geoshape,\\n    image,\\n    line,\\n    point,\\n    rect,\\n    rule,\\n    square,\\n    text: text$1,\\n    tick,\\n    trail\\n  };\\n  function parseMarkGroups(model) {\\n    if (contains([LINE, AREA, TRAIL], model.mark)) {\\n      const details = pathGroupingFields(model.mark, model.encoding);\\n\\n      if (details.length > 0) {\\n        return getPathGroups(model, details);\\n      } // otherwise use standard mark groups\\n\\n    } else if (contains([BAR], model.mark)) {\\n      const hasCornerRadius = VG_CORNERRADIUS_CHANNELS.some(prop => getMarkPropOrConfig(prop, model.markDef, model.config));\\n\\n      if (model.stack && !model.fieldDef('size') && hasCornerRadius) {\\n        return getGroupsForStackedBarWithCornerRadius(model);\\n      }\\n    }\\n\\n    return getMarkGroup(model);\\n  }\\n  const FACETED_PATH_PREFIX = 'faceted_path_';\\n\\n  function getPathGroups(model, details) {\\n    // TODO: for non-stacked plot, map order to zindex. (Maybe rename order for layer to zindex?)\\n    return [{\\n      name: model.getName('pathgroup'),\\n      type: 'group',\\n      from: {\\n        facet: {\\n          name: FACETED_PATH_PREFIX + model.requestDataName(DataSourceType.Main),\\n          data: model.requestDataName(DataSourceType.Main),\\n          groupby: details\\n        }\\n      },\\n      encode: {\\n        update: {\\n          width: {\\n            field: {\\n              group: 'width'\\n            }\\n          },\\n          height: {\\n            field: {\\n              group: 'height'\\n            }\\n          }\\n        }\\n      },\\n      // With subfacet for line/area group, need to use faceted data from above.\\n      marks: getMarkGroup(model, {\\n        fromPrefix: FACETED_PATH_PREFIX\\n      })\\n    }];\\n  }\\n\\n  const STACK_GROUP_PREFIX = 'stack_group_';\\n  /**\\n   * We need to put stacked bars into groups in order to enable cornerRadius for stacks.\\n   * If stack is used and the model doesn't have size encoding, we put the mark into groups,\\n   * and apply cornerRadius properties at the group.\\n   */\\n\\n  function getGroupsForStackedBarWithCornerRadius(model) {\\n    // Generate the mark\\n    const [mark] = getMarkGroup(model, {\\n      fromPrefix: STACK_GROUP_PREFIX\\n    }); // Get the scale for the stacked field\\n\\n    const fieldScale = model.scaleName(model.stack.fieldChannel);\\n\\n    const stackField = (opt = {}) => model.vgField(model.stack.fieldChannel, opt); // Find the min/max of the pixel value on the stacked direction\\n\\n\\n    const stackFieldGroup = (func, expr) => {\\n      const vgFieldMinMax = [stackField({\\n        prefix: 'min',\\n        suffix: 'start',\\n        expr\\n      }), stackField({\\n        prefix: 'max',\\n        suffix: 'start',\\n        expr\\n      }), stackField({\\n        prefix: 'min',\\n        suffix: 'end',\\n        expr\\n      }), stackField({\\n        prefix: 'max',\\n        suffix: 'end',\\n        expr\\n      })];\\n      return \\\"\\\".concat(func, \\\"(\\\").concat(vgFieldMinMax.map(field => \\\"scale('\\\".concat(fieldScale, \\\"',\\\").concat(field, \\\")\\\")).join(','), \\\")\\\");\\n    };\\n\\n    let groupUpdate;\\n    let innerGroupUpdate; // Build the encoding for group and an inner group\\n\\n    if (model.stack.fieldChannel === 'x') {\\n      // Move cornerRadius, y/yc/y2/height properties to group\\n      // Group x/x2 should be the min/max of the marks within\\n      groupUpdate = { ...pick(mark.encode.update, ['y', 'yc', 'y2', 'height', ...VG_CORNERRADIUS_CHANNELS]),\\n        x: {\\n          signal: stackFieldGroup('min', 'datum')\\n        },\\n        x2: {\\n          signal: stackFieldGroup('max', 'datum')\\n        },\\n        clip: {\\n          value: true\\n        }\\n      }; // Inner group should revert the x translation, and pass height through\\n\\n      innerGroupUpdate = {\\n        x: {\\n          field: {\\n            group: 'x'\\n          },\\n          mult: -1\\n        },\\n        height: {\\n          field: {\\n            group: 'height'\\n          }\\n        }\\n      }; // The marks should use the same height as group, without y/yc/y2 properties (because it's already done by group)\\n      // This is why size encoding is not supported yet\\n\\n      mark.encode.update = { ...omit(mark.encode.update, ['y', 'yc', 'y2']),\\n        height: {\\n          field: {\\n            group: 'height'\\n          }\\n        }\\n      };\\n    } else {\\n      groupUpdate = { ...pick(mark.encode.update, ['x', 'xc', 'x2', 'width']),\\n        y: {\\n          signal: stackFieldGroup('min', 'datum')\\n        },\\n        y2: {\\n          signal: stackFieldGroup('max', 'datum')\\n        },\\n        clip: {\\n          value: true\\n        }\\n      };\\n      innerGroupUpdate = {\\n        y: {\\n          field: {\\n            group: 'y'\\n          },\\n          mult: -1\\n        },\\n        width: {\\n          field: {\\n            group: 'width'\\n          }\\n        }\\n      };\\n      mark.encode.update = { ...omit(mark.encode.update, ['x', 'xc', 'x2']),\\n        width: {\\n          field: {\\n            group: 'width'\\n          }\\n        }\\n      };\\n    } // Deal with cornerRadius properties\\n\\n\\n    for (const key of VG_CORNERRADIUS_CHANNELS) {\\n      const configValue = getMarkConfig(key, model.markDef, model.config); // Move from mark to group\\n\\n      if (mark.encode.update[key]) {\\n        groupUpdate[key] = mark.encode.update[key];\\n        delete mark.encode.update[key];\\n      } else if (configValue) {\\n        groupUpdate[key] = signalOrValueRef(configValue);\\n      } // Overwrite any cornerRadius on mark set by config --- they are already moved to the group\\n\\n\\n      if (configValue) {\\n        mark.encode.update[key] = {\\n          value: 0\\n        };\\n      }\\n    } // For bin and time unit, we have to add bin/timeunit -end channels.\\n\\n\\n    const groupByField = model.fieldDef(model.stack.groupbyChannel);\\n    const groupby = vgField(groupByField) ? [vgField(groupByField)] : [];\\n\\n    if ((groupByField === null || groupByField === void 0 ? void 0 : groupByField.bin) || (groupByField === null || groupByField === void 0 ? void 0 : groupByField.timeUnit)) {\\n      groupby.push(vgField(groupByField, {\\n        binSuffix: 'end'\\n      }));\\n    }\\n\\n    const strokeProperties = ['stroke', 'strokeWidth', 'strokeJoin', 'strokeCap', 'strokeDash', 'strokeDashOffset', 'strokeMiterLimit', 'strokeOpacity']; // Generate stroke properties for the group\\n\\n    groupUpdate = strokeProperties.reduce((encode, prop) => {\\n      if (mark.encode.update[prop]) {\\n        return { ...encode,\\n          [prop]: mark.encode.update[prop]\\n        };\\n      } else {\\n        const configValue = getMarkConfig(prop, model.markDef, model.config);\\n\\n        if (configValue !== undefined) {\\n          return { ...encode,\\n            [prop]: signalOrValueRef(configValue)\\n          };\\n        } else {\\n          return encode;\\n        }\\n      }\\n    }, groupUpdate); // Apply strokeForeground and strokeOffset if stroke is used\\n\\n    if (groupUpdate.stroke) {\\n      groupUpdate.strokeForeground = {\\n        value: true\\n      };\\n      groupUpdate.strokeOffset = {\\n        value: 0\\n      };\\n    }\\n\\n    return [{\\n      type: 'group',\\n      from: {\\n        facet: {\\n          data: model.requestDataName(DataSourceType.Main),\\n          name: STACK_GROUP_PREFIX + model.requestDataName(DataSourceType.Main),\\n          groupby,\\n          aggregate: {\\n            fields: [stackField({\\n              suffix: 'start'\\n            }), stackField({\\n              suffix: 'start'\\n            }), stackField({\\n              suffix: 'end'\\n            }), stackField({\\n              suffix: 'end'\\n            })],\\n            ops: ['min', 'max', 'min', 'max']\\n          }\\n        }\\n      },\\n      encode: {\\n        update: groupUpdate\\n      },\\n      marks: [{\\n        type: 'group',\\n        encode: {\\n          update: innerGroupUpdate\\n        },\\n        marks: [mark]\\n      }]\\n    }];\\n  }\\n\\n  function getSort$1(model) {\\n    const {\\n      encoding,\\n      stack,\\n      mark,\\n      markDef,\\n      config\\n    } = model;\\n    const order = encoding.order;\\n\\n    if (!isArray(order) && isValueDef(order) && isNullOrFalse(order.value) || !order && isNullOrFalse(getMarkPropOrConfig('order', markDef, config))) {\\n      return undefined;\\n    } else if ((isArray(order) || isFieldDef(order)) && !stack) {\\n      // Sort by the order field if it is specified and the field is not stacked. (For stacked field, order specify stack order.)\\n      return sortParams(order, {\\n        expr: 'datum'\\n      });\\n    } else if (isPathMark(mark)) {\\n      // For both line and area, we sort values based on dimension by default\\n      const dimensionChannel = markDef.orient === 'horizontal' ? 'y' : 'x';\\n      const dimensionChannelDef = encoding[dimensionChannel];\\n\\n      if (isFieldDef(dimensionChannelDef)) {\\n        const s = dimensionChannelDef.sort;\\n\\n        if (isArray(s)) {\\n          return {\\n            field: vgField(dimensionChannelDef, {\\n              prefix: dimensionChannel,\\n              suffix: 'sort_index',\\n              expr: 'datum'\\n            })\\n          };\\n        } else if (isSortField(s)) {\\n          return {\\n            field: vgField({\\n              // FIXME: this op might not already exist?\\n              // FIXME: what if dimensionChannel (x or y) contains custom domain?\\n              aggregate: isAggregate(model.encoding) ? s.op : undefined,\\n              field: s.field\\n            }, {\\n              expr: 'datum'\\n            })\\n          };\\n        } else if (isSortByEncoding(s)) {\\n          const fieldDefToSort = model.fieldDef(s.encoding);\\n          return {\\n            field: vgField(fieldDefToSort, {\\n              expr: 'datum'\\n            }),\\n            order: s.order\\n          };\\n        } else if (s === null) {\\n          return undefined;\\n        } else {\\n          return {\\n            field: vgField(dimensionChannelDef, {\\n              // For stack with imputation, we only have bin_mid\\n              binSuffix: model.stack && model.stack.impute ? 'mid' : undefined,\\n              expr: 'datum'\\n            })\\n          };\\n        }\\n      }\\n\\n      return undefined;\\n    }\\n\\n    return undefined;\\n  }\\n\\n  function getMarkGroup(model, opt = {\\n    fromPrefix: ''\\n  }) {\\n    const {\\n      mark,\\n      markDef,\\n      encoding,\\n      config\\n    } = model;\\n    const clip = getFirstDefined(markDef.clip, scaleClip(model), projectionClip(model));\\n    const style = getStyles(markDef);\\n    const key = encoding.key;\\n    const sort = getSort$1(model);\\n    const interactive = interactiveFlag(model);\\n    const aria = getMarkPropOrConfig('aria', markDef, config);\\n    const postEncodingTransform = markCompiler[mark].postEncodingTransform ? markCompiler[mark].postEncodingTransform(model) : null;\\n    return [{\\n      name: model.getName('marks'),\\n      type: markCompiler[mark].vgMark,\\n      ...(clip ? {\\n        clip: true\\n      } : {}),\\n      ...(style ? {\\n        style\\n      } : {}),\\n      ...(key ? {\\n        key: key.field\\n      } : {}),\\n      ...(sort ? {\\n        sort\\n      } : {}),\\n      ...(interactive ? interactive : {}),\\n      ...(aria === false ? {\\n        aria\\n      } : {}),\\n      from: {\\n        data: opt.fromPrefix + model.requestDataName(DataSourceType.Main)\\n      },\\n      encode: {\\n        update: markCompiler[mark].encodeEntry(model)\\n      },\\n      ...(postEncodingTransform ? {\\n        transform: postEncodingTransform\\n      } : {})\\n    }];\\n  }\\n  /**\\n   * If scales are bound to interval selections, we want to automatically clip\\n   * marks to account for panning/zooming interactions. We identify bound scales\\n   * by the selectionExtent property, which gets added during scale parsing.\\n   */\\n\\n\\n  function scaleClip(model) {\\n    const xScale = model.getScaleComponent('x');\\n    const yScale = model.getScaleComponent('y');\\n    return xScale && xScale.get('selectionExtent') || yScale && yScale.get('selectionExtent') ? true : undefined;\\n  }\\n  /**\\n   * If we use a custom projection with auto-fitting to the geodata extent,\\n   * we need to clip to ensure the chart size doesn't explode.\\n   */\\n\\n\\n  function projectionClip(model) {\\n    const projection = model.component.projection;\\n    return projection && !projection.isFit ? true : undefined;\\n  }\\n  /**\\n   * Only output interactive flags if we have selections defined somewhere in our model hierarchy.\\n   */\\n\\n\\n  function interactiveFlag(model) {\\n    if (!model.component.selection) return null;\\n    const unitCount = keys(model.component.selection).length;\\n    let parentCount = unitCount;\\n    let parent = model.parent;\\n\\n    while (parent && parentCount === 0) {\\n      parentCount = keys(parent.component.selection).length;\\n      parent = parent.parent;\\n    }\\n\\n    return parentCount ? {\\n      interactive: unitCount > 0 || !!model.encoding.tooltip\\n    } : null;\\n  }\\n\\n  /**\\n   * Internal model of Vega-Lite specification for the compiler.\\n   */\\n\\n  class UnitModel extends ModelWithField {\\n    constructor(spec, parent, parentGivenName, parentGivenSize = {}, config) {\\n      super(spec, 'unit', parent, parentGivenName, config, undefined, isFrameMixins(spec) ? spec.view : undefined);\\n\\n      _defineProperty(this, \\\"markDef\\\", void 0);\\n\\n      _defineProperty(this, \\\"encoding\\\", void 0);\\n\\n      _defineProperty(this, \\\"specifiedScales\\\", {});\\n\\n      _defineProperty(this, \\\"stack\\\", void 0);\\n\\n      _defineProperty(this, \\\"specifiedAxes\\\", {});\\n\\n      _defineProperty(this, \\\"specifiedLegends\\\", {});\\n\\n      _defineProperty(this, \\\"specifiedProjection\\\", {});\\n\\n      _defineProperty(this, \\\"selection\\\", {});\\n\\n      _defineProperty(this, \\\"children\\\", []);\\n\\n      const markDef = isMarkDef(spec.mark) ? { ...spec.mark\\n      } : {\\n        type: spec.mark\\n      };\\n      const mark = markDef.type; // Need to init filled before other mark properties because encoding depends on filled but other mark properties depend on types inside encoding\\n\\n      if (markDef.filled === undefined) {\\n        markDef.filled = defaultFilled(markDef, config, {\\n          graticule: spec.data && isGraticuleGenerator(spec.data)\\n        });\\n      }\\n\\n      const encoding = this.encoding = initEncoding(spec.encoding || {}, mark, markDef.filled, config);\\n      this.markDef = initMarkdef(markDef, encoding, config);\\n      this.size = initLayoutSize({\\n        encoding: encoding,\\n        size: isFrameMixins(spec) ? { ...parentGivenSize,\\n          ...(spec.width ? {\\n            width: spec.width\\n          } : {}),\\n          ...(spec.height ? {\\n            height: spec.height\\n          } : {})\\n        } : parentGivenSize\\n      }); // calculate stack properties\\n\\n      this.stack = stack(mark, encoding);\\n      this.specifiedScales = this.initScales(mark, encoding);\\n      this.specifiedAxes = this.initAxes(encoding);\\n      this.specifiedLegends = this.initLegends(encoding);\\n      this.specifiedProjection = spec.projection; // Selections will be initialized upon parse.\\n\\n      this.selection = spec.selection;\\n    }\\n\\n    get hasProjection() {\\n      const {\\n        encoding\\n      } = this;\\n      const isGeoShapeMark = this.mark === GEOSHAPE;\\n      const hasGeoPosition = encoding && GEOPOSITION_CHANNELS.some(channel => isFieldOrDatumDef(encoding[channel]));\\n      return isGeoShapeMark || hasGeoPosition;\\n    }\\n    /**\\n     * Return specified Vega-Lite scale domain for a particular channel\\n     * @param channel\\n     */\\n\\n\\n    scaleDomain(channel) {\\n      const scale = this.specifiedScales[channel];\\n      return scale ? scale.domain : undefined;\\n    }\\n\\n    axis(channel) {\\n      return this.specifiedAxes[channel];\\n    }\\n\\n    legend(channel) {\\n      return this.specifiedLegends[channel];\\n    }\\n\\n    initScales(mark, encoding) {\\n      return SCALE_CHANNELS.reduce((scales, channel) => {\\n        const fieldOrDatumDef = getFieldOrDatumDef(encoding[channel]);\\n\\n        if (fieldOrDatumDef) {\\n          var _fieldOrDatumDef$scal;\\n\\n          scales[channel] = this.initScale((_fieldOrDatumDef$scal = fieldOrDatumDef.scale) !== null && _fieldOrDatumDef$scal !== void 0 ? _fieldOrDatumDef$scal : {});\\n        }\\n\\n        return scales;\\n      }, {});\\n    }\\n\\n    initScale(scale) {\\n      const {\\n        domain,\\n        range\\n      } = scale;\\n      const scaleInternal = replaceExprRefInIndex(scale);\\n\\n      if (isArray(domain)) {\\n        scaleInternal.domain = domain.map(signalRefOrValue);\\n      }\\n\\n      if (isArray(range)) {\\n        scaleInternal.range = range.map(signalRefOrValue);\\n      }\\n\\n      return scaleInternal;\\n    }\\n\\n    initAxes(encoding) {\\n      return POSITION_SCALE_CHANNELS.reduce((_axis, channel) => {\\n        // Position Axis\\n        // TODO: handle ConditionFieldDef\\n        const channelDef = encoding[channel];\\n\\n        if (isFieldOrDatumDef(channelDef) || channel === X && isFieldOrDatumDef(encoding.x2) || channel === Y && isFieldOrDatumDef(encoding.y2)) {\\n          const axisSpec = isFieldOrDatumDef(channelDef) ? channelDef.axis : undefined;\\n          _axis[channel] = axisSpec ? this.initAxis({ ...axisSpec\\n          }) // convert truthy value to object\\n          : axisSpec;\\n        }\\n\\n        return _axis;\\n      }, {});\\n    }\\n\\n    initAxis(axis) {\\n      const props = keys(axis);\\n      const axisInternal = {};\\n\\n      for (const prop of props) {\\n        const val = axis[prop];\\n        axisInternal[prop] = isConditionalAxisValue(val) ? signalOrValueRefWithCondition(val) : signalRefOrValue(val);\\n      }\\n\\n      return axisInternal;\\n    }\\n\\n    initLegends(encoding) {\\n      return NONPOSITION_SCALE_CHANNELS.reduce((_legend, channel) => {\\n        const fieldOrDatumDef = getFieldOrDatumDef(encoding[channel]);\\n\\n        if (fieldOrDatumDef && supportLegend(channel)) {\\n          const legend = fieldOrDatumDef.legend;\\n          _legend[channel] = legend ? replaceExprRefInIndex(legend) // convert truthy value to object\\n          : legend;\\n        }\\n\\n        return _legend;\\n      }, {});\\n    }\\n\\n    parseData() {\\n      this.component.data = parseData(this);\\n    }\\n\\n    parseLayoutSize() {\\n      parseUnitLayoutSize(this);\\n    }\\n\\n    parseSelections() {\\n      this.component.selection = parseUnitSelection(this, this.selection);\\n    }\\n\\n    parseMarkGroup() {\\n      this.component.mark = parseMarkGroups(this);\\n    }\\n\\n    parseAxesAndHeaders() {\\n      this.component.axes = parseUnitAxes(this);\\n    }\\n\\n    assembleSelectionTopLevelSignals(signals) {\\n      return assembleTopLevelSignals(this, signals);\\n    }\\n\\n    assembleSignals() {\\n      return [...assembleAxisSignals(this), ...assembleUnitSelectionSignals(this, [])];\\n    }\\n\\n    assembleSelectionData(data) {\\n      return assembleUnitSelectionData(this, data);\\n    }\\n\\n    assembleLayout() {\\n      return null;\\n    }\\n\\n    assembleLayoutSignals() {\\n      return assembleLayoutSignals(this);\\n    }\\n\\n    assembleMarks() {\\n      var _this$component$mark;\\n\\n      let marks = (_this$component$mark = this.component.mark) !== null && _this$component$mark !== void 0 ? _this$component$mark : []; // If this unit is part of a layer, selections should augment\\n      // all in concert rather than each unit individually. This\\n      // ensures correct interleaving of clipping and brushed marks.\\n\\n      if (!this.parent || !isLayerModel(this.parent)) {\\n        marks = assembleUnitSelectionMarks(this, marks);\\n      }\\n\\n      return marks.map(this.correctDataNames);\\n    }\\n\\n    getMapping() {\\n      return this.encoding;\\n    }\\n\\n    get mark() {\\n      return this.markDef.type;\\n    }\\n\\n    channelHasField(channel) {\\n      return channelHasField(this.encoding, channel);\\n    }\\n\\n    fieldDef(channel) {\\n      const channelDef = this.encoding[channel];\\n      return getFieldDef(channelDef);\\n    }\\n\\n    typedFieldDef(channel) {\\n      const fieldDef = this.fieldDef(channel);\\n\\n      if (isTypedFieldDef(fieldDef)) {\\n        return fieldDef;\\n      }\\n\\n      return null;\\n    }\\n\\n  }\\n\\n  class LayerModel extends Model {\\n    // HACK: This should be (LayerModel | UnitModel)[], but setting the correct type leads to weird error.\\n    // So I'm just putting generic Model for now\\n    constructor(spec, parent, parentGivenName, parentGivenSize, config) {\\n      super(spec, 'layer', parent, parentGivenName, config, spec.resolve, spec.view);\\n\\n      _defineProperty(this, \\\"children\\\", void 0);\\n\\n      const layoutSize = { ...parentGivenSize,\\n        ...(spec.width ? {\\n          width: spec.width\\n        } : {}),\\n        ...(spec.height ? {\\n          height: spec.height\\n        } : {})\\n      };\\n      this.children = spec.layer.map((layer, i) => {\\n        if (isLayerSpec(layer)) {\\n          return new LayerModel(layer, this, this.getName('layer_' + i), layoutSize, config);\\n        } else if (isUnitSpec(layer)) {\\n          return new UnitModel(layer, this, this.getName('layer_' + i), layoutSize, config);\\n        }\\n\\n        throw new Error(invalidSpec(layer));\\n      });\\n    }\\n\\n    parseData() {\\n      this.component.data = parseData(this);\\n\\n      for (const child of this.children) {\\n        child.parseData();\\n      }\\n    }\\n\\n    parseLayoutSize() {\\n      parseLayerLayoutSize(this);\\n    }\\n\\n    parseSelections() {\\n      // Merge selections up the hierarchy so that they may be referenced\\n      // across unit specs. Persist their definitions within each child\\n      // to assemble signals which remain within output Vega unit groups.\\n      this.component.selection = {};\\n\\n      for (const child of this.children) {\\n        child.parseSelections();\\n\\n        for (const key of keys(child.component.selection)) {\\n          this.component.selection[key] = child.component.selection[key];\\n        }\\n      }\\n    }\\n\\n    parseMarkGroup() {\\n      for (const child of this.children) {\\n        child.parseMarkGroup();\\n      }\\n    }\\n\\n    parseAxesAndHeaders() {\\n      parseLayerAxes(this);\\n    }\\n\\n    assembleSelectionTopLevelSignals(signals) {\\n      return this.children.reduce((sg, child) => child.assembleSelectionTopLevelSignals(sg), signals);\\n    } // TODO: Support same named selections across children.\\n\\n\\n    assembleSignals() {\\n      return this.children.reduce((signals, child) => {\\n        return signals.concat(child.assembleSignals());\\n      }, assembleAxisSignals(this));\\n    }\\n\\n    assembleLayoutSignals() {\\n      return this.children.reduce((signals, child) => {\\n        return signals.concat(child.assembleLayoutSignals());\\n      }, assembleLayoutSignals(this));\\n    }\\n\\n    assembleSelectionData(data) {\\n      return this.children.reduce((db, child) => child.assembleSelectionData(db), data);\\n    }\\n\\n    assembleTitle() {\\n      let title = super.assembleTitle();\\n\\n      if (title) {\\n        return title;\\n      } // If title does not provide layer, look into children\\n\\n\\n      for (const child of this.children) {\\n        title = child.assembleTitle();\\n\\n        if (title) {\\n          return title;\\n        }\\n      }\\n\\n      return undefined;\\n    }\\n\\n    assembleLayout() {\\n      return null;\\n    }\\n\\n    assembleMarks() {\\n      return assembleLayerSelectionMarks(this, this.children.flatMap(child => {\\n        return child.assembleMarks();\\n      }));\\n    }\\n\\n    assembleLegends() {\\n      return this.children.reduce((legends, child) => {\\n        return legends.concat(child.assembleLegends());\\n      }, assembleLegends(this));\\n    }\\n\\n  }\\n\\n  function buildModel(spec, parent, parentGivenName, unitSize, config) {\\n    if (isFacetSpec(spec)) {\\n      return new FacetModel(spec, parent, parentGivenName, config);\\n    } else if (isLayerSpec(spec)) {\\n      return new LayerModel(spec, parent, parentGivenName, unitSize, config);\\n    } else if (isUnitSpec(spec)) {\\n      return new UnitModel(spec, parent, parentGivenName, unitSize, config);\\n    } else if (isAnyConcatSpec(spec)) {\\n      return new ConcatModel(spec, parent, parentGivenName, config);\\n    }\\n\\n    throw new Error(invalidSpec(spec));\\n  }\\n\\n  /**\\n   * Vega-Lite's main function, for compiling Vega-Lite spec into Vega spec.\\n   *\\n   * At a high-level, we make the following transformations in different phases:\\n   *\\n   * Input spec\\n   *     |\\n   *     |  (Normalization)\\n   *     v\\n   * Normalized Spec (Row/Column channels in single-view specs becomes faceted specs, composite marks becomes layered specs.)\\n   *     |\\n   *     |  (Build Model)\\n   *     v\\n   * A model tree of the spec\\n   *     |\\n   *     |  (Parse)\\n   *     v\\n   * A model tree with parsed components (intermediate structure of visualization primitives in a format that can be easily merged)\\n   *     |\\n   *     | (Optimize)\\n   *     v\\n   * A model tree with parsed components with the data component optimized\\n   *     |\\n   *     | (Assemble)\\n   *     v\\n   * Vega spec\\n   *\\n   * @param inputSpec The Vega-Lite specification.\\n   * @param opt       Optional arguments passed to the Vega-Lite compiler.\\n   * @returns         An object containing the compiled Vega spec and normalized Vega-Lite spec.\\n   */\\n  function compile(inputSpec, opt = {}) {\\n    // 0. Augment opt with default opts\\n    if (opt.logger) {\\n      // set the singleton logger to the provided logger\\n      set(opt.logger);\\n    }\\n\\n    if (opt.fieldTitle) {\\n      // set the singleton field title formatter\\n      setTitleFormatter(opt.fieldTitle);\\n    }\\n\\n    try {\\n      // 1. Initialize config by deep merging default config with the config provided via option and the input spec.\\n      const config = initConfig(mergeConfig(opt.config, inputSpec.config)); // 2. Normalize: Convert input spec -> normalized spec\\n      // - Decompose all extended unit specs into composition of unit spec. For example, a box plot get expanded into multiple layers of bars, ticks, and rules. The shorthand row/column channel is also expanded to a facet spec.\\n      // - Normalize autosize and width or height spec\\n\\n      const spec = normalize(inputSpec, config); // 3. Build Model: normalized spec -> Model (a tree structure)\\n      // This phases instantiates the models with default config by doing a top-down traversal. This allows us to pass properties that child models derive from their parents via their constructors.\\n      // See the abstract `Model` class and its children (UnitModel, LayerModel, FacetModel, ConcatModel) for different types of models.\\n\\n      const model = buildModel(spec, null, '', undefined, config); // 4 Parse: Model --\\u003e Model with components\\n      // Note that components = intermediate representations that are equivalent to Vega specs.\\n      // We need these intermediate representation because we need to merge many visualization \\\"components\\\" like projections, scales, axes, and legends.\\n      // We will later convert these components into actual Vega specs in the assemble phase.\\n      // In this phase, we do a bottom-up traversal over the whole tree to\\n      // parse for each type of components once (e.g., data, layout, mark, scale).\\n      // By doing bottom-up traversal, we start parsing components of unit specs and\\n      // then merge child components of parent composite specs.\\n      //\\n      // Please see inside model.parse() for order of different components parsed.\\n\\n      model.parse(); // drawDataflow(model.component.data.sources);\\n      // 5. Optimize the dataflow. This will modify the data component of the model.\\n\\n      optimizeDataflow(model.component.data, model); // drawDataflow(model.component.data.sources);\\n      // 6. Assemble: convert model components --\\u003e Vega Spec.\\n\\n      const vgSpec = assembleTopLevelModel(model, getTopLevelProperties(inputSpec, spec.autosize, config, model), inputSpec.datasets, inputSpec.usermeta);\\n      return {\\n        spec: vgSpec,\\n        normalized: spec\\n      };\\n    } finally {\\n      // Reset the singleton logger if a logger is provided\\n      if (opt.logger) {\\n        reset();\\n      } // Reset the singleton field title formatter if provided\\n\\n\\n      if (opt.fieldTitle) {\\n        resetTitleFormatter();\\n      }\\n    }\\n  }\\n\\n  function getTopLevelProperties(inputSpec, autosize, config, model) {\\n    const width = model.component.layoutSize.get('width');\\n    const height = model.component.layoutSize.get('height');\\n\\n    if (autosize === undefined) {\\n      autosize = {\\n        type: 'pad'\\n      };\\n\\n      if (model.hasAxisOrientSignalRef()) {\\n        autosize.resize = true;\\n      }\\n    } else if (isString(autosize)) {\\n      autosize = {\\n        type: autosize\\n      };\\n    }\\n\\n    if (width && height && isFitType(autosize.type)) {\\n      if (width === 'step' && height === 'step') {\\n        warn(droppingFit());\\n        autosize.type = 'pad';\\n      } else if (width === 'step' || height === 'step') {\\n        // effectively XOR, because else if\\n        // get step dimension\\n        const sizeType = width === 'step' ? 'width' : 'height'; // log that we're dropping fit for respective channel\\n\\n        warn(droppingFit(getPositionScaleChannel(sizeType))); // setting type to inverse fit (so if we dropped fit-x, type is now fit-y)\\n\\n        const inverseSizeType = sizeType === 'width' ? 'height' : 'width';\\n        autosize.type = getFitType(inverseSizeType);\\n      }\\n    }\\n\\n    return { ...(keys(autosize).length === 1 && autosize.type ? autosize.type === 'pad' ? {} : {\\n        autosize: autosize.type\\n      } : {\\n        autosize\\n      }),\\n      ...extractTopLevelProperties(config, false),\\n      ...extractTopLevelProperties(inputSpec, true)\\n    };\\n  }\\n  /*\\n   * Assemble the top-level model to a Vega spec.\\n   *\\n   * Note: this couldn't be `model.assemble()` since the top-level model\\n   * needs some special treatment to generate top-level properties.\\n   */\\n\\n\\n  function assembleTopLevelModel(model, topLevelProperties, datasets = {}, usermeta) {\\n    // Config with Vega-Lite only config removed.\\n    const vgConfig = model.config ? stripAndRedirectConfig(model.config) : undefined;\\n    const data = [].concat(model.assembleSelectionData([]), // only assemble data in the root\\n    assembleRootData(model.component.data, datasets));\\n    const projections = model.assembleProjections();\\n    const title = model.assembleTitle();\\n    const style = model.assembleGroupStyle();\\n    const encodeEntry = model.assembleGroupEncodeEntry(true);\\n    let layoutSignals = model.assembleLayoutSignals(); // move width and height signals with values to top level\\n\\n    layoutSignals = layoutSignals.filter(signal => {\\n      if ((signal.name === 'width' || signal.name === 'height') && signal.value !== undefined) {\\n        topLevelProperties[signal.name] = +signal.value;\\n        return false;\\n      }\\n\\n      return true;\\n    });\\n    const {\\n      params,\\n      ...otherTopLevelProps\\n    } = topLevelProperties;\\n    return {\\n      $schema: 'https://vega.github.io/schema/vega/v5.json',\\n      ...(model.description ? {\\n        description: model.description\\n      } : {}),\\n      ...otherTopLevelProps,\\n      ...(title ? {\\n        title\\n      } : {}),\\n      ...(style ? {\\n        style\\n      } : {}),\\n      ...(encodeEntry ? {\\n        encode: {\\n          update: encodeEntry\\n        }\\n      } : {}),\\n      data,\\n      ...(projections.length > 0 ? {\\n        projections: projections\\n      } : {}),\\n      ...model.assembleGroup([...layoutSignals, ...model.assembleSelectionTopLevelSignals([]), ...assembleParameterSignals(params)]),\\n      ...(vgConfig ? {\\n        config: vgConfig\\n      } : {}),\\n      ...(usermeta ? {\\n        usermeta\\n      } : {})\\n    };\\n  }\\n\\n  exports.accessPathDepth = accessPathDepth;\\n  exports.accessPathWithDatum = accessPathWithDatum;\\n  exports.compile = compile;\\n  exports.contains = contains;\\n  exports.deepEqual = deepEqual;\\n  exports.deleteNestedProperty = deleteNestedProperty;\\n  exports.duplicate = duplicate;\\n  exports.entries = entries;\\n  exports.every = every;\\n  exports.fieldIntersection = fieldIntersection;\\n  exports.flatAccessWithDatum = flatAccessWithDatum;\\n  exports.getFirstDefined = getFirstDefined;\\n  exports.hasIntersection = hasIntersection;\\n  exports.hash = hash;\\n  exports.internalField = internalField;\\n  exports.isBoolean = isBoolean$1;\\n  exports.isEmpty = isEmpty;\\n  exports.isEqual = isEqual;\\n  exports.isInternalField = isInternalField;\\n  exports.isNullOrFalse = isNullOrFalse;\\n  exports.isNumeric = isNumeric;\\n  exports.keys = keys;\\n  exports.logicalExpr = logicalExpr;\\n  exports.mergeDeep = mergeDeep;\\n  exports.normalize = normalize;\\n  exports.normalizeAngle = normalizeAngle;\\n  exports.omit = omit;\\n  exports.pick = pick;\\n  exports.prefixGenerator = prefixGenerator;\\n  exports.removePathFromField = removePathFromField;\\n  exports.replaceAll = replaceAll;\\n  exports.replacePathInField = replacePathInField;\\n  exports.resetIdCounter = resetIdCounter;\\n  exports.setEqual = setEqual;\\n  exports.some = some;\\n  exports.stringify = stringify;\\n  exports.titleCase = titleCase;\\n  exports.unique = unique;\\n  exports.uniqueId = uniqueId;\\n  exports.vals = vals;\\n  exports.varName = varName;\\n  exports.version = version;\\n\\n  Object.defineProperty(exports, '__esModule', { value: true });\\n\\n})));\\n//# sourceMappingURL=vega-lite.js.map\\n\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Buffer\",\"factory\",\"define\",\"amd\",\"globalThis\",\"self\",\"vegaLite\",\"accessor\",\"fn\",\"fields\",\"name\",\"fname\",\"getter\",\"path\",\"length\",\"get1\",\"getN\",\"splitAccessPath\",\"p\",\"push\",\"s\",\"substring\",\"i\",\"j\",\"n\",\"q\",\"b\",\"c\",\"Error\",\"log\",\"method\",\"level\",\"input\",\"args\",\"concat\",\"slice\",\"call\",\"console\",\"apply\",\"isObject\",\"_\",\"Object\",\"mergeConfig\",\"configs\",\"reduce\",\"out\",\"source\",\"key\",\"signals\",\"mergeNamed\",\"writeConfig\",\"r\",\"layout\",\"output\",\"value\",\"recurse\",\"k\",\"isArray\",\"o\",\"a\",\"add\",\"map\",\"forEach\",\"array\",\"isBoolean\",\"isNumber\",\"isString\",\"$\",\"x\",\"JSON\",\"stringify\",\"replace\",\"toSet\",\"forEachLeaf\",\"op\",\"not\",\"and\",\"subop\",\"or\",\"normalizeLogicalComposition\",\"normalizer\",\"pick\",\"obj\",\"props\",\"copy\",\"prop\",\"hop\",\"omit\",\"hash\",\"str\",\"fastJsonStableStringify\",\"h\",\"char\",\"charCodeAt\",\"isNullOrFalse\",\"contains\",\"item\",\"indexOf\",\"some\",\"arr\",\"f\",\"entries\",\"every\",\"mergeDeep\",\"dest\",\"src\",\"property\",\"keys\",\"unique\",\"values\",\"results\",\"u\",\"val\",\"v\",\"setEqual\",\"size\",\"e\",\"has\",\"hasIntersection\",\"prefixGenerator\",\"prefixes\",\"Set\",\"wrappedWithAccessors\",\"splitField\",\"y\",\"computedPrefixes\",\"join\",\"fieldIntersection\",\"undefined\",\"isEmpty\",\"isBoolean$1\",\"varName\",\"alphanumericS\",\"match\",\"logicalExpr\",\"cb\",\"deleteNestedProperty\",\"orderedProps\",\"shift\",\"titleCase\",\"charAt\",\"toUpperCase\",\"substr\",\"accessPathWithDatum\",\"datum\",\"pieces\",\"prefix\",\"flatAccessWithDatum\",\"escapePathAccess\",\"string\",\"replacePathInField\",\"replaceAll\",\"find\",\"replacement\",\"RegExp\",\"removePathFromField\",\"accessPathDepth\",\"getFirstDefined\",\"arg\",\"uniqueId\",\"id\",\"idCounter\",\"String\",\"internalField\",\"isInternalField\",\"normalizeAngle\",\"angle\",\"isNumeric\",\"isNaN\",\"parseFloat\",\"isConditionalAxisValue\",\"isArgminDef\",\"isArgmaxDef\",\"isAggregateOp\",\"AGGREGATE_OP_INDEX\",\"isCountingAggregateOp\",\"aggregate\",\"COUNTING_OPS\",\"getPositionChannelFromLatLong\",\"channel\",\"LATITUDE\",\"LATITUDE2\",\"LONGITUDE\",\"LONGITUDE2\",\"isColorChannel\",\"COLOR\",\"FILL\",\"STROKE\",\"isSecondaryRangeChannel\",\"getMainRangeChannel\",\"main\",\"X2\",\"X\",\"Y2\",\"Y\",\"THETA2\",\"THETA\",\"RADIUS2\",\"RADIUS\",\"getVgPositionChannel\",\"POLAR_POSITION_CHANNEL_INDEX\",\"getSecondaryRangeChannel\",\"getSizeChannel\",\"getOffsetChannel\",\"getPositionScaleChannel\",\"sizeType\",\"getSupportedMark\",\"DESCRIPTION\",\"DETAIL\",\"KEY\",\"TOOLTIP\",\"HREF\",\"ORDER\",\"OPACITY\",\"FILLOPACITY\",\"STROKEOPACITY\",\"STROKEWIDTH\",\"FACET\",\"ROW\",\"COLUMN\",\"ALL_MARKS\",\"ALL_MARKS_EXCEPT_GEOSHAPE\",\"area\",\"bar\",\"image\",\"rect\",\"rule\",\"circle\",\"point\",\"square\",\"tick\",\"line\",\"trail\",\"SIZE\",\"text\",\"STROKEDASH\",\"geoshape\",\"SHAPE\",\"TEXT\",\"ANGLE\",\"URL\",\"arc\",\"rangeType\",\"binToString\",\"bin\",\"normalizeBin\",\"isSelectionExtent\",\"isBinning\",\"binned\",\"isBinned\",\"extent\",\"autoMaxBins\",\"_defineProperty\",\"defineProperty\",\"enumerable\",\"configurable\",\"writable\",\"_classPrivateFieldSet\",\"receiver\",\"privateMap\",\"descriptor\",\"get\",\"TypeError\",\"set\",\"invalidSpec\",\"spec\",\"containerSizeNonSingle\",\"uName\",\"containerSizeNotCompatibleWithAutosize\",\"fitDirection\",\"droppingFit\",\"unknownField\",\"cannotProjectOnChannelWithoutField\",\"cannotProjectAggregate\",\"selectionNotSupported\",\"mark\",\"columnsNotSupportByRowCol\",\"type\",\"differentParse\",\"field\",\"local\",\"ancestor\",\"customFormatTypeNotAllowed\",\"droppingColor\",\"opt\",\"fill\",\"stroke\",\"emptyFieldDef\",\"fieldDef\",\"incompatibleChannel\",\"markOrFacet\",\"when\",\"invalidEncodingChannel\",\"discreteChannelCannotEncode\",\"scalePropertyNotWorkWithScaleType\",\"scaleType\",\"propName\",\"stepDropped\",\"cannotStackRangedMark\",\"invalidTimeUnit\",\"unitName\",\"errorBand1DNotSupport\",\"channelRequiredForBinned\",\"warn\",\"current\",\"isDateTime\",\"part\",\"TIMEUNIT_PARTS\",\"normalizeMonth\",\"m\",\"lowerM\",\"toLowerCase\",\"monthIndex\",\"MONTHS\",\"shortM\",\"shortMonthIndex\",\"SHORT_MONTHS\",\"normalizeDay\",\"d\",\"lowerD\",\"dayIndex\",\"DAYS\",\"shortD\",\"shortDayIndex\",\"SHORT_DAYS\",\"dateTimeParts\",\"normalize\",\"parts\",\"day\",\"duplicate\",\"year\",\"month\",\"quarter\",\"date\",\"timeUnit\",\"unit\",\"dateTimeToExpr\",\"utc\",\"dateTimeToTimestamp\",\"Date\",\"UTC\",\"getTimeUnitParts\",\"containsTimeUnit\",\"fullTimeUnit\",\"index\",\"timeUnitSpecifierExpression\",\"timeUnitParts\",\"VEGALITE_TIMEFORMAT\",\"normalizeTimeUnit\",\"params\",\"startsWith\",\"timeUnitToString\",\"tu\",\"rest\",\"isSignalRef\",\"isVgRangeStep\",\"range\",\"isDataRefDomain\",\"domain\",\"isFieldEqualPredicate\",\"predicate\",\"equal\",\"isFieldLTPredicate\",\"lt\",\"isFieldLTEPredicate\",\"lte\",\"isFieldGTPredicate\",\"gt\",\"isFieldGTEPredicate\",\"gte\",\"isFieldRangePredicate\",\"isFieldOneOfPredicate\",\"oneOf\",\"in\",\"isFieldPredicate\",\"predicateValueExpr\",\"valueExpr\",\"wrapTime\",\"predicateValuesExpr\",\"vals\",\"fieldFilterExpression\",\"useInRange\",\"_normalizeTimeUnit\",\"end\",\"fieldRef\",\"dateExpr\",\"lastTimeUnit\",\"fieldExpr$1\",\"upper\",\"lower\",\"valid\",\"fieldValidPredicate\",\"signal\",\"exprs\",\"fieldExpr\",\"normalizePredicate\",\"_normalizeTimeUnit2\",\"getFullName\",\"quantitative\",\"temporal\",\"ordinal\",\"nominal\",\"geojson\",\"isSelectionDomain\",\"scaleTypeSupportProperty\",\"CONTINUOUS_TO_CONTINUOUS_INDEX\",\"CONTINUOUS_DOMAIN_INDEX\",\"channelScalePropertyIncompatability\",\"channelSupportScaleType\",\"SCALE_CHANNEL_INDEX\",\"CONTINUOUS_TO_DISCRETE_INDEX\",\"isExprRef\",\"replaceExprRefInIndex\",\"newIndex\",\"signalRefOrValue\",\"isPathMark\",\"isMarkDef\",\"midPointRefWithPositionInvalidTest\",\"channelDef\",\"markDef\",\"scale\",\"config\",\"ref\",\"midPoint\",\"isFieldDef\",\"wrapPositionInvalidTest\",\"getMarkPropOrConfig\",\"invalid\",\"test\",\"fieldInvalidPredicate\",\"zeroValueRef\",\"mainChannel\",\"group\",\"vgField\",\"expr\",\"valueRefForFieldOrDatumDef\",\"scaleName\",\"encode\",\"isDatumDef\",\"offset\",\"band\",\"interpolatedSignalRef\",\"fieldOrDatumDef\",\"fieldOrDatumDef2\",\"startSuffix\",\"start\",\"suffix\",\"channel2Def\",\"stack\",\"defaultRef\",\"isFieldOrDatumDef\",\"_ref\",\"_band2\",\"isTypedFieldDef\",\"_band\",\"getBand\",\"fieldDef2\",\"isMidPoint\",\"impute\",\"binSuffix\",\"binRequiresRange\",\"channel2\",\"DISCRETE_DOMAIN_INDEX\",\"isValueDef\",\"offsetMixins\",\"widthHeightValueOrSignalRef\",\"signalOrValueRef\",\"isCustomFormatType\",\"formatType\",\"customFormatExpr\",\"format\",\"formatSignalRef\",\"normalizeStack\",\"formatCustomType\",\"fieldToFormat\",\"isFieldOrDatumDefForTimeFormat\",\"_fieldOrDatumDef$scal\",\"timeFormat\",\"isScaleFieldDef\",\"ScaleType\",\"rawTimeFormat\",\"isUTCScale\",\"numberFormat\",\"channelDefType\",\"endField\",\"binFormatExpression\",\"formatExpr\",\"_field\",\"guideFormat\",\"omitTimeFormatConfig\",\"guideFormatType\",\"specifiedFormat\",\"binNumberFormatExpr\",\"startField\",\"BIN_RANGE_DELIMITER\",\"isSortField\",\"sort\",\"isSortArray\",\"isFacetMapping\",\"toFieldDefBase\",\"getMarkConfig\",\"fieldChannel\",\"hasBand\",\"hasConditionalFieldDef\",\"condition\",\"hasConditionalFieldOrDatumDef\",\"isContinuousFieldOrDatumDef\",\"cd\",\"isDiscrete\",\"isNumericDataDef\",\"isPositionFieldOrDatumDef\",\"isStringFieldOrDatumDef\",\"toStringFieldDef\",\"argAccessor\",\"nofn\",\"_opt$binSuffix\",\"_opt$suffix\",\"argmax\",\"argmin\",\"_opt$suffix2\",\"forAs\",\"def\",\"verbalTitleFormatter\",\"countTitle\",\"title\",\"allowDisabling\",\"includeDefault\",\"_getGuide\",\"guideTitle\",\"getGuide\",\"titleFormatter\",\"axis\",\"legend\",\"header\",\"getFormatMixins\",\"_getGuide2\",\"guide\",\"defaultType\",\"_fieldDef$scale\",\"SCALE_CATEGORY_INDEX\",\"getFieldDef\",\"getFieldOrDatumDef\",\"initChannelDef\",\"primitiveType\",\"initFieldOrDatumDef\",\"fd\",\"customFormatTypes\",\"guideType\",\"newGuide\",\"initFieldDef\",\"compositeMark\",\"POSITION_SCALE_CHANNEL_INDEX\",\"fullType\",\"newType\",\"compatible\",\"warning\",\"channelCompatibility\",\"SORT_BY_CHANNEL_INDEX\",\"encoding\",\"sub\",\"order\",\"orient\",\"labelOrient\",\"titleOrient\",\"maxbins\",\"step\",\"COMPATIBLE\",\"undefinedIfExprNotRequired\",\"isTime\",\"LOCAL_SINGLE_TIMEUNIT_INDEX\",\"parse\",\"valueArray\",\"extractTitleConfig\",\"titleConfig\",\"anchor\",\"frame\",\"color\",\"subtitleColor\",\"subtitleFont\",\"subtitleFontSize\",\"subtitleFontStyle\",\"subtitleFontWeight\",\"subtitleLineHeight\",\"subtitlePadding\",\"titleMarkConfig\",\"nonMark\",\"subtitle\",\"subtitleMarkConfig\",\"isText\",\"signalOrValueRefWithCondition\",\"conditionalSignalRefOrValue\",\"exprFromValueOrSignalRef\",\"signalOrStringValue\",\"getStyles\",\"_mark$style\",\"style\",\"vgChannel\",\"ignoreVgConfig\",\"getMarkStyleConfig\",\"styleConfigIndex\",\"getStyleConfig\",\"styles\",\"styleConfig\",\"sortParams\",\"orderDef\",\"fieldRefOption\",\"orderChannelDef\",\"_orderChannelDef$sort\",\"mergeTitleFieldDefs\",\"f1\",\"f2\",\"merged\",\"fdToMerge\",\"fieldDef1\",\"deepEqual\",\"mergeTitle\",\"title1\",\"title2\",\"mergeTitleComponent\",\"v1\",\"v2\",\"v1Val\",\"v2Val\",\"explicit\",\"isUnitSpec\",\"channelHasField\",\"isAggregate\",\"CHANNELS\",\"extractTransformsFromEncoding\",\"oldEncoding\",\"groupby\",\"bins\",\"timeUnits\",\"aggOp\",\"isTitleDefined\",\"newField\",\"newFieldDef\",\"remaining\",\"aggregateEntry\",\"as\",\"secondaryChannel\",\"NONPOSITION_CHANNEL_INDEX\",\"markChannelCompatible\",\"markSupported\",\"primaryFieldDef\",\"initEncoding\",\"filled\",\"normalizedEncoding\",\"CHANNEL_INDEX\",\"theta\",\"REPLACE_ANGLE_WITH_THETA\",\"LINE_WITH_VARYING_SIZE\",\"defs\",\"normalizeEncoding\",\"newChannelDef\",\"fieldDefs\",\"channelDefArray\",\"mapping\",\"thisArg\",\"el\",\"init\",\"r1\",\"pathGroupingFields\",\"details\",\"getCompositeMarkTooltip\",\"tooltipSummary\",\"continuousAxisChannelDef\",\"encodingWithoutContinuousAxis\",\"withFieldName\",\"tooltip\",\"fiveSummaryTooltip\",\"fieldPrefix\",\"titlePrefix\",\"mainTitle\",\"getTitle\",\"escape\",\"tooltipFieldDefs\",\"makeCompositeAggregatePartFactory\",\"compositeMarkDef\",\"continuousAxis\",\"sharedEncoding\",\"compositeMarkConfig\",\"partName\",\"positionPrefix\",\"endPositionPrefix\",\"extraEncoding\",\"partLayerMixins\",\"partBaseSpec\",\"clip\",\"opacity\",\"compositeMarkContinuousAxis\",\"continuousAxisChannelDef2\",\"continuousAxisChannelDefError\",\"continuousAxisChannelDefError2\",\"filterAggregateFromChannelDef\",\"continuousAxisWithoutAggregate\",\"compositeMarkOrient\",\"xAggregate\",\"yAggregate\",\"getBoxPlotType\",\"normalizeBoxPlot\",\"_markDef$extent\",\"selection\",\"boxplot\",\"sizeValue\",\"boxPlotType\",\"BOXPLOT\",\"continuousFieldName\",\"boxplotSpecificAggregate\",\"boxParamsQuartiles\",\"postAggregateCalculates\",\"calculate\",\"oldEncodingWithoutContinuousAxis\",\"customTooltipWithoutAggregatedField\",\"t\",\"customTooltipWithAggregatedField\",\"filteredEncoding\",\"transform\",\"ticksOrient\",\"boxOrient\",\"makeBoxPlotExtent\",\"encodingWithoutSizeColorAndContinuousAxis\",\"makeBoxPlotBox\",\"makeBoxPlotMidTick\",\"fiveSummaryTooltipEncoding\",\"endTick\",\"aria\",\"whiskerTooltipEncoding\",\"whiskerLayers\",\"boxLayers\",\"ariaRoleDescription\",\"median\",\"_outerSpec$transform\",\"outerSpec\",\"layer\",\"lowerBoxExpr\",\"upperBoxExpr\",\"iqrExpr\",\"lowerWhiskerExpr\",\"upperWhiskerExpr\",\"joinaggregateTransform\",\"joinaggregate\",\"filteredWhiskerSpec\",\"filter\",\"axisWithoutTitle\",\"outlierLayersMixins\",\"encodingWithoutSizeColorContinuousAxisAndTooltip\",\"filteredLayersMixinsTransforms\",\"filteredLayersMixins\",\"unshift\",\"continousAxisField\",\"normalizeErrorBar\",\"tooltipEncoding\",\"errorBarParams\",\"ERRORBAR\",\"makeErrorBarPart\",\"errorbar\",\"thickness\",\"errorBarOrientAndInputType\",\"x2\",\"y2\",\"xError\",\"xError2\",\"yError\",\"yError2\",\"inputType\",\"isTypeAggregatedUpperLower\",\"isTypeAggregatedError\",\"errorBarSpecificAggregate\",\"tooltipTitleWithFieldName\",\"center\",\"centerOp\",\"lowerExtentOp\",\"upperExtentOp\",\"postAggregateCalculate\",\"oldAggregate\",\"oldGroupBy\",\"normalizeErrorBand\",\"ERRORBAND\",\"makeErrorBandPart\",\"errorband\",\"is2D\",\"bandMark\",\"bordersMark\",\"interpolate\",\"tension\",\"run\",\"CompositeMarkNormalizer\",\"compositeMarkRegistry\",\"assembleParameterSignals\",\"param\",\"bind\",\"update\",\"isLegendBinding\",\"isLegendStreamBinding\",\"extractTopLevelProperties\",\"includeParams\",\"TOP_LEVEL_PROPERTIES\",\"isStep\",\"isFrameMixins\",\"extractCompositionLayout\",\"specType\",\"spacingConfig\",\"columns\",\"compositionConfig\",\"spacing\",\"facet\",\"COMPOSITION_LAYOUT_PROPERTIES\",\"_spacing$row\",\"_spacing$column\",\"row\",\"column\",\"getViewConfigContinuousSize\",\"viewConfig\",\"_viewConfig$channel\",\"getViewConfigDiscreteStep\",\"getViewConfigDiscreteSize\",\"DEFAULT_STEP\",\"_viewConfig$channel2\",\"getAxisConfigInternal\",\"axisConfig\",\"axisConfigInternal\",\"initConfig\",\"specifiedConfig\",\"font\",\"fontSize\",\"DEFAULT_COLOR\",\"cell\",\"domainColor\",\"gridColor\",\"tickColor\",\"category\",\"DEFAULT_FONT_SIZE\",\"mergedConfig\",\"defaultConfig$1\",\"restConfig\",\"outputConfig\",\"configPropsWithExpr\",\"markConfigType\",\"MARK_CONFIGS\",\"axisConfigType\",\"AXIS_CONFIGS\",\"headerConfigType\",\"HEADER_CONFIGS\",\"styleConfigInternal\",\"view\",\"stripAndRedirectConfig\",\"VL_ONLY_CONFIG_PROPERTIES\",\"VL_ONLY_LEGEND_CONFIG\",\"VL_ONLY_MARK_CONFIG_PROPERTIES\",\"markType\",\"MARK_STYLES\",\"vlOnlyMarkSpecificConfigs\",\"VL_ONLY_ALL_MARK_SPECIFIC_CONFIG_PROPERTY_INDEX\",\"_toProp\",\"_toProp2\",\"propConfig\",\"toProp\",\"potentialStackedChannel\",\"xDef\",\"yDef\",\"_xDef$scale\",\"_yDef$scale\",\"xScale\",\"yScale\",\"getDimensionChannel\",\"STACKABLE_MARKS\",\"stackedFieldDef\",\"stackedField\",\"dimensionChannel\",\"dimensionDef\",\"dimensionField\",\"stackBy\",\"NONPOSITION_CHANNELS\",\"sc\",\"cDef\",\"STACK_BY_DEFAULT_MARKS\",\"STACK_OFFSET_INDEX\",\"LINEAR\",\"disallowNonLinearStack\",\"SUM_OPS\",\"groupbyChannel\",\"groupbyField\",\"getPointOverlay\",\"markConfig\",\"shape\",\"getLineOverlay\",\"replaceRepeaterInEncoding\",\"repeater\",\"replaceRepeaterInMapping\",\"replaceRepeatInProp\",\"repeat\",\"replaceRepeaterInFieldDef\",\"replaceRepeaterInFieldOrDatumDef\",\"datumDef\",\"replaceRepeaterInChannelDef\",\"channelDefWithoutCondition\",\"mergeEncoding\",\"parentEncoding\",\"channels\",\"parentChannelDef\",\"mergedChannelDef\",\"mergeProjection\",\"parentProjection\",\"projection\",\"width\",\"height\",\"sizeInfo\",\"autosize\",\"isFitCompatible\",\"normalizedSpec\",\"autosizeDefault\",\"_normalizeAutoSize\",\"FIT_NON_SINGLE\",\"makeExplicit\",\"makeImplicit\",\"tieBreakByComparing\",\"compare\",\"propertyOf\",\"diff\",\"defaultTieBreaker\",\"toString\",\"mergeValuesWithExplicit\",\"tieBreaker\",\"isNamedData\",\"data\",\"isGenerator\",\"normalizeTransform\",\"eventSelector\",\"selector\",\"marks\",\"DEFAULT_SOURCE\",\"VIEW\",\"MARKS\",\"DEFAULT_MARKS\",\"parseMerge\",\"trim\",\"parseSelector\",\"endChar\",\"pushChar\",\"popChar\",\"count\",\"COMMA\",\"RBRACK\",\"LBRACK\",\"GT\",\"stream\",\"between\",\"throttle\",\"markname\",\"RBRACE\",\"lastIndexOf\",\"LBRACE\",\"parseThrottle\",\"NAME\",\"COLON\",\"ILLEGAL\",\"marktype\",\"consume\",\"debounce\",\"split\",\"wrapCondition\",\"model\",\"refFn\",\"valueRef\",\"vgConditions\",\"conditions\",\"conditionValueRef\",\"parseSelectionPredicate\",\"expression\",\"textRef\",\"tooltipRefForEncoding\",\"reactiveGeom\",\"tooltipRefFromChannelDef\",\"markTooltip\",\"content\",\"tooltipData\",\"fDef\",\"_value\",\"toSkip\",\"tuples\",\"keyValues\",\"description\",\"descriptionValue\",\"nonPosition\",\"defaultValue\",\"_defaultValue\",\"getScaleComponent\",\"_opt$filled\",\"_getMarkPropOrConfig\",\"_getMarkPropOrConfig2\",\"transparentIfNeeded\",\"defaultFill\",\"defaultStroke\",\"colorVgChannel\",\"fillStrokeMarkDefAndConfig\",\"zindex\",\"getOffset\",\"offsetChannel\",\"markDefOffsetValue\",\"pointPosition\",\"defaultPos\",\"pointPositionDefaultRef\",\"latitude\",\"longitude\",\"definedValueOrConfig\",\"LOG\",\"TIME\",\"domainDefinitelyIncludesZero\",\"sizeRef\",\"mult\",\"vgAlignedPositionChannel\",\"defaultAlign\",\"alignChannel\",\"align\",\"alignExcludingSignal\",\"ALIGNED_X_CHANNEL\",\"BASELINED_Y_CHANNEL\",\"pointOrRangePosition\",\"defaultPos2\",\"rangePosition\",\"sizeChannel\",\"baseChannel\",\"position2orSize\",\"getName\",\"pos2Mixins\",\"rectPosition\",\"_encoding$sizeChannel\",\"channelDef2\",\"hasSizeDef\",\"isBarBand\",\"_model$component$axes\",\"_axis$get\",\"component\",\"axes\",\"axisTranslate\",\"reverse\",\"vgChannel2\",\"rectBinRef\",\"getBinSpacing\",\"startRef\",\"_ref2\",\"vgSizeChannel\",\"useVlSizeChannel\",\"sizeFromMarkOrConfig\",\"sizeMixins\",\"discreteBandSize\",\"POINT\",\"scaleRange\",\"continuousBandSize\",\"posRef\",\"sizeOffset\",\"translate\",\"spacingOffset\",\"reverseExpr\",\"offsetExpr\",\"translateExpr\",\"baseEncodeEntry\",\"ignore\",\"markDefProperties\",\"wrapAllFieldsInvalid\",\"enableAria\",\"ariaRoleDesc\",\"VG_MARK_INDEX\",\"allFieldsInvalidPredicate\",\"SCALE_CHANNELS\",\"VG_MARK_CONFIGS\",\"ALWAYS_IGNORE\",\"filterIndex\",\"aggregator\",\"scaleComponent\",\"defined\",\"allFieldsInvalidPredicate$1\",\"POSITION_SCALE_CHANNELS\",\"valueIfDefined\",\"domain$1\",\"isTopLevelLayer\",\"_model$parent$parent\",\"parent\",\"isLayerModel\",\"parseInteractiveLegend\",\"legendCmpt\",\"_model$fieldDef\",\"forEachSelection\",\"selCmpt\",\"_selCmpt$project$hasF\",\"proj\",\"project\",\"hasField\",\"hasChannel\",\"legendBindings\",\"_legendCmpt$get\",\"legendSelections\",\"hasLegend\",\"onDelta\",\"_scaleCmpt$get\",\"ANCHOR\",\"delta\",\"DELTA\",\"hasScales\",\"scaleBindings\",\"sizeSg\",\"getSizeSignalRef\",\"scaleCmpt\",\"sign\",\"panFn\",\"on\",\"events\",\"onDelta$1\",\"base\",\"DELTA$1\",\"ANCHOR$1\",\"zoomFn\",\"forEachTransform\",\"compilers\",\"assembleInit\",\"isExpr\",\"wrap\",\"identity\",\"assembled\",\"assembleUnitSelectionSignals\",\"selCompiler\",\"modifyExpr\",\"txCompiler\",\"MODIFY\",\"TUPLE\",\"STORE\",\"cleanupEmptyOnArray\",\"assembleFacetSignals\",\"assembleTopLevelSignals\",\"hasSelections\",\"store\",\"hasSg\",\"resolve\",\"isMulti\",\"VL_SELECTION_RESOLVE\",\"topLevelSignals\",\"hasUnit\",\"assembleUnitSelectionData\",\"dataCopy\",\"items\",\"insert\",\"assembleUnitSelectionMarks\",\"assembleLayerSelectionMarks\",\"child\",\"children\",\"isUnitModel\",\"channelSignals\",\"vname\",\"visual\",\"dname\",\"scaled\",\"coord\",\"evt\",\"SCALE_TRIGGER\",\"singleOrMultiSignals\",\"fieldsSg\",\"TUPLE_FIELDS\",\"force\",\"selections\",\"sel\",\"success\",\"compilers$1\",\"isFacetModel\",\"facetModel\",\"FACET_CHANNELS\",\"requiresSelectionId\",\"identifier\",\"SELECTION_ID\",\"ASTNode\",\"node\",\"ArrayExpression\",\"elements\",\"BinaryExpression\",\"LogicalExpression\",\"left\",\"right\",\"CallExpression\",\"callee\",\"arguments\",\"ConditionalExpression\",\"consequent\",\"alternate\",\"MemberExpression\",\"object\",\"ObjectExpression\",\"properties\",\"Property\",\"UnaryExpression\",\"argument\",\"assert\",\"message\",\"isDecimalDigit\",\"ch\",\"isHexDigit\",\"isOctalDigit\",\"isLineTerminator\",\"isIdentifierStart\",\"RegexNonAsciiIdentifierStart\",\"fromCharCode\",\"isIdentifierPart\",\"RegexNonAsciiIdentifierPart\",\"skipComment\",\"scanHexEscape\",\"code\",\"len\",\"throwError\",\"MessageUnexpectedToken\",\"ILLEGAL$1\",\"getEscapedIdentifier\",\"scanPunctuator\",\"ch1\",\"TokenPunctuator\",\"code2\",\"ch4\",\"ch3\",\"ch2\",\"scanNumericLiteral\",\"number\",\"TokenNumericLiteral\",\"parseInt\",\"octal\",\"testRegExp\",\"pattern\",\"flags\",\"tmp\",\"$0\",\"$1\",\"MessageInvalidRegExp\",\"exception\",\"advance\",\"TokenEOF\",\"TokenIdentifier\",\"keywords\",\"hasOwnProperty\",\"TokenKeyword\",\"TokenNullLiteral\",\"TokenBooleanLiteral\",\"quote\",\"TokenStringLiteral\",\"lex\",\"token\",\"lookahead\",\"peek\",\"pos\",\"finishBinaryExpression\",\"operator\",\"SyntaxLogicalExpression\",\"SyntaxBinaryExpression\",\"finishIdentifier\",\"SyntaxIdentifier\",\"finishLiteral\",\"SyntaxLiteral\",\"raw\",\"regex\",\"finishMemberExpression\",\"SyntaxMemberExpression\",\"computed\",\"member\",\"finishProperty\",\"kind\",\"SyntaxProperty\",\"messageFormat\",\"Array\",\"prototype\",\"msg\",\"whole\",\"error\",\"throwUnexpected\",\"MessageUnexpectedEOS\",\"MessageUnexpectedNumber\",\"MessageUnexpectedString\",\"MessageUnexpectedIdentifier\",\"MessageUnexpectedReserved\",\"expect\",\"parseObjectPropertyKey\",\"MessageStrictOctalLiteral\",\"parsePrimaryExpression\",\"parseExpression\",\"parseConditionalExpression\",\"SyntaxArrayExpression\",\"MessageStrictDuplicateProperty\",\"SyntaxObjectExpression\",\"legalKeywords\",\"DISABLED\",\"terminated\",\"classMarker\",\"MessageUnterminatedRegExp\",\"body\",\"search\",\"literal\",\"parsePostfixExpression\",\"SyntaxCallExpression\",\"parseUnaryExpression\",\"SyntaxUnaryExpression\",\"keyword\",\"binaryPrecedence\",\"prec\",\"marker\",\"markers\",\"pop\",\"SyntaxConditionalExpression\",\"parser\",\"startsWithDatum\",\"getDependentFields\",\"ast\",\"dependents\",\"visit\",\"parseUnitSelection\",\"selDefs\",\"selCmpts\",\"selectionConfig\",\"selDef\",\"cfg\",\"encodings\",\"_cfg$key\",\"safeName\",\"dfnode\",\"stores\",\"predicateStr\",\"getSelectionComponent\",\"tunode\",\"clone\",\"insertAsParentOf\",\"empty\",\"parseSelectionBinExtent\",\"materializeSelections\",\"lookupName\",\"outputNodes\",\"materialized\",\"OutputNode\",\"FilterNode\",\"DataSourceType\",\"Lookup\",\"outputNodeRefCounts\",\"filterOp\",\"assembleTitle\",\"setAxisEncode\",\"vgProp\",\"vgRef\",\"_axis$encode\",\"_axis$encode$part\",\"_axis$encode$part$upd\",\"assembleAxis\",\"axisCmpt\",\"combine\",\"disable\",\"labelExpr\",\"propType\",\"AXIS_PROPERTY_TYPE\",\"propValue\",\"propIndex\",\"CONDITIONAL_AXIS_PROP_INDEX\",\"valueOrSignalCRef\",\"valueOrSignalRef\",\"signalRef\",\"grid\",\"labels\",\"maxExtent\",\"minExtent\",\"ticks\",\"mainExtracted\",\"_axis$encode2\",\"_axis$encode2$labels\",\"labelAlign\",\"AXIS_PARTS\",\"hasAxisPart\",\"titleString\",\"assembleAxisSignals\",\"assembleAxes\",\"axisComponents\",\"getAxisConfigFromConfigTypes\",\"configTypes\",\"assign\",\"configType\",\"orient1\",\"orientConfig1\",\"orientConfig2\",\"conditionalOrientAxisConfig\",\"getAxisConfigs\",\"typeBasedConfigTypes\",\"QUANTITATIVE_SCALES_INDEX\",\"axisChannel\",\"axisOrient\",\"vlOnlyConfigTypes\",\"vgConfigTypes\",\"vlOnlyAxisConfig\",\"vgAxisConfig\",\"axisConfigStyle\",\"getAxisConfigStyle\",\"axisConfigTypes\",\"toMerge\",\"_config$configType\",\"getAxisConfig\",\"axisConfigs\",\"configFrom\",\"configValue\",\"_axisConfigs$configFr\",\"getLabelAngle\",\"labelAngle\",\"normalizeAngleExpr\",\"defaultLabelBaseline\",\"alwaysIncludeMiddle\",\"orientIsTop\",\"orientIsLeft\",\"middle\",\"defaultLabelAlign\",\"startAngle\",\"isX\",\"mainOrient\",\"orientIsMain\",\"getFieldDefTitle\",\"sortArrayIndexField\",\"getHeaderChannel\",\"getHeaderProperty\",\"headerSpecificConfig\",\"headerRow\",\"headerColumn\",\"headerFacet\",\"getHeaderProperties\",\"defaultHeaderGuideAlign\",\"headerChannel\",\"defaultHeaderGuideBaseline\",\"baseline\",\"assembleLabelTitle\",\"facetFieldDef\",\"labelAnchor\",\"titleTextExpr\",\"assembleHeaderProperties\",\"HEADER_LABEL_PROPERTIES\",\"HEADER_LABEL_PROPERTIES_MAP\",\"propertiesMap\",\"assembleLayoutSignals\",\"sizeSignals\",\"layoutSize\",\"sizeExpr\",\"isWidth\",\"endsWith\",\"safeExpr\",\"cardinality\",\"padding\",\"paddingOuter\",\"paddingInner\",\"getSizeTypeFromLayoutSizeType\",\"layoutSizeType\",\"guideEncodeEntry\",\"valueDef\",\"parseGuideResolve\",\"channelScaleResolve\",\"getMaxValue\",\"getConditionValue\",\"conditionalDef\",\"Math\",\"max\",\"getFirstConditionValue\",\"reducer\",\"selectedCondition\",\"gradientLengthSignal\",\"min\",\"sizeSignal\",\"parseLegend\",\"legendComponent\",\"LEGEND_SCALE_CHANNELS\",\"_legend$direction\",\"_legend2\",\"_ref3\",\"_legend\",\"_legend$encoding\",\"legendConfig\",\"strokeWidth\",\"LegendComponent\",\"legendType\",\"direction\",\"ruleParams\",\"LEGEND_COMPONENT_PROPERTIES\",\"legendRules\",\"legendEncoding\",\"legendEncode\",\"legendEncodeParams\",\"legendEncodingPart\",\"_legendEncoding$part\",\"legendEncodeRules\",\"interactive\",\"legends\",\"mergeLegendComponent\",\"mergedLegend\",\"childLegend\",\"mergedOrient\",\"getWithExplicit\",\"childOrient\",\"typeMerged\",\"mergedValueWithExplicit\",\"setWithExplicit\",\"_mergedLegend$implici\",\"_mergedLegend$implici2\",\"_mergedLegend$explici\",\"_mergedLegend$explici2\",\"implicit\",\"gradient\",\"assembleLegends\",\"legendComponentIndex\",\"legendByDomain\",\"domainHash\",\"mergedLegendComponent\",\"flat\",\"l\",\"_legend$encode2\",\"symbols\",\"_legend$encode3\",\"_legend$encode3$label\",\"_legend$encode$part\",\"_legend$encode$part$u\",\"_legend$encode\",\"assembleProjectionsForModelAndChildren\",\"projections\",\"assembleProjections\",\"assembleProjectionForModel\",\"fits\",\"sources\",\"lookupDataSource\",\"fit\",\"parseProjection\",\"hasProjection\",\"_model$config$project\",\"specifiedProjection\",\"posssiblePair\",\"typedFieldDef\",\"requestDataName\",\"Main\",\"ProjectionComponent\",\"projectionName\",\"mergeIfNoConflict\",\"first\",\"second\",\"allPropertiesShared\",\"PROJECTION_PROPERTIES\",\"parseNonUnitProjections\",\"nonUnitProjection\",\"mergable\",\"merge\",\"modelProjection\",\"isFit\",\"renameProjection\",\"binKey\",\"getBinSignalName\",\"_normalizeBin\",\"normalizedBin\",\"createBinComponent\",\"extentSignal\",\"ext\",\"selName\",\"span\",\"binComponent\",\"unquote\",\"parseExpression$1\",\"specifier\",\"getImplicitFromFilterTransform\",\"_filter$oneOf\",\"getImplicitFromEncoding\",\"forEachFieldDef\",\"mainFieldDef\",\"dimensionChannelDef\",\"isDataSourceNode\",\"SourceNode\",\"GraticuleNode\",\"SequenceNode\",\"getStackByFields\",\"by\",\"isValidAsArray\",\"cloneSubtree\",\"FacetNode\",\"newName\",\"FACET_SCALE_PREFIX\",\"getSource\",\"setSource\",\"AggregateNode\",\"StackNode\",\"WindowTransformNode\",\"JoinAggregateTransformNode\",\"addDimensions\",\"flatMap\",\"moveFacetDown\",\"numChildren\",\"facetMain\",\"moveMainDownToFacet\",\"cloner\",\"swapWithParent\",\"checkLinks\",\"nodes\",\"runOptimizer\",\"optimizer\",\"modified\",\"optimize\",\"optimizationDataflowHelper\",\"dataComponent\",\"firstPass\",\"roots\",\"RemoveUnnecessaryOutputNodes\",\"RemoveUnnecessaryIdentifierNodes\",\"RemoveUnusedSubtrees\",\"MoveParseUp\",\"MergeBins\",\"RemoveDuplicateTimeUnits\",\"MergeParse\",\"MergeAggregates\",\"MergeTimeUnits\",\"MergeIdenticalNodes\",\"MergeOutputs\",\"parseUnitScaleDomain\",\"localScaleComponents\",\"scales\",\"scaleDomain\",\"reason\",\"canUseUnaggregatedDomain\",\"scaleConfig\",\"useUnaggregatedDomain\",\"specifiedScales\",\"parseSingleChannelDomain\",\"domainsTieBreaker\",\"localScaleCmpt\",\"domains\",\"isFaceted\",\"facetParent\",\"parseNonUnitScaleDomain\",\"selectionExtent\",\"childComponent\",\"se\",\"NEEDS_SAME_SELECTION\",\"mapDomainToDataSignal\",\"convertDomainIfItIsDateTime\",\"normalizedTimeUnit\",\"defaultDomain\",\"unionWith\",\"domainSort\",\"Raw\",\"binSignal\",\"SignalRefWrapper\",\"getSignalName\",\"normalizeSortField\",\"isStackedMeasure\",\"DEFAULT_SORT_OP\",\"stackDimensions\",\"fieldDefToSortBy\",\"SHARED_DOMAIN_OP_INDEX\",\"mergeDomains\",\"uniqueDomains\",\"domainWithoutSort\",\"sorts\",\"MORE_THAN_ONE_SORT\",\"unionDomainSorts\",\"MULTIDOMAIN_SORT_OP_INDEX\",\"allData\",\"getFieldFromDomain\",\"nonUnionDomain\",\"FACETED_INDEPENDENT_DIFFERENT_SOURCES\",\"FACETED_INDEPENDENT_SAME_FIELDS_DIFFERENT_SOURCES\",\"FACETED_INDEPENDENT_SAME_SOURCE\",\"assembleDomain\",\"assembleScales\",\"isConcatModel\",\"assembleScalesForModel\",\"domainRaw\",\"otherScaleProps\",\"getSizeChannel$1\",\"getBinStepSignal\",\"updatedName\",\"binCount\",\"parseRangeForChannel\",\"specifiedScale\",\"mergedScaleCmpt\",\"RANGE_PROPERTIES\",\"supportedByScaleType\",\"channelIncompatability\",\"fromName\",\"parseScheme\",\"rangeMin\",\"rangeMax\",\"defaultRange\",\"scheme\",\"domainMid\",\"w\",\"zero\",\"sizeRangeMin\",\"sizeRangeMax\",\"interpolateRange\",\"defaultContinuousToDiscreteCount\",\"PI\",\"minStrokeWidth\",\"maxStrokeWidth\",\"minOpacity\",\"maxOpacity\",\"quantileCount\",\"quantizeCount\",\"rMax\",\"rMin\",\"minBandSize\",\"minFontSize\",\"minSize\",\"xyStepSignals\",\"maxBandSize\",\"minXYStep\",\"maxFontSize\",\"maxSize\",\"pointStep\",\"pow\",\"MAX_SIZE_RANGE_STEP_RATIO\",\"widthStep\",\"heightStep\",\"parseScaleProperty\",\"specifiedValue\",\"scalePadding\",\"scalePaddingInner\",\"copyKeyFromObject\",\"scaleRules\",\"parseNonUnitScaleProperty\",\"parseScaleRange\",\"rangeWithExplicit\",\"valueWithExplicit\",\"childValueWithExplicit\",\"defaultType$2\",\"_fieldDef$axis\",\"POLAR_POSITION_SCALE_CHANNEL_INDEX\",\"tickBand\",\"parseScaleCore\",\"parseUnitScaleCore\",\"scaleComponents\",\"scaleTypeWithExplicitIndex\",\"_resolve$scale$channe\",\"explicitScaleType\",\"childScaleType\",\"scaleCategory1\",\"scaleCategory2\",\"scaleTypeTieBreaker\",\"ScaleComponent\",\"typeWithExplicit\",\"childScale\",\"renameScale\",\"GEOSHAPE\",\"_specifiedScale\",\"defaultScaleType\",\"fieldDefType\",\"specifiedType\",\"POW\",\"SQRT\",\"SYMLOG\",\"QUANTILE\",\"QUANTIZE\",\"THRESHOLD\",\"sType\",\"makeWalkTree\",\"walkTree\",\"dataSource\",\"newData\",\"ParseNode\",\"_dataSource$format\",\"assembleFormatParse\",\"assembleTransforms\",\"datasetIndex\",\"assemble\",\"FilterInvalidNode\",\"CalculateNode\",\"GeoPointNode\",\"GeoJSONNode\",\"LookupNode\",\"FoldTransformNode\",\"FlattenTransformNode\",\"DensityTransformNode\",\"LoessTransformNode\",\"QuantileTransformNode\",\"RegressionTransformNode\",\"IdentifierNode\",\"SampleTransformNode\",\"PivotTransformNode\",\"BinNode\",\"TimeUnitNode\",\"ImputeNode\",\"assembleFacetData\",\"root\",\"assembleRootData\",\"datasets\",\"sourceIndex\",\"hasName\",\"dataName\",\"whereTo\",\"_d$transform\",\"splice\",\"_d$transform2\",\"from\",\"makeHeaderComponent\",\"mergeChildAxis\",\"layoutHeaders\",\"layoutHeader\",\"axisComponent\",\"_layoutHeader$headerT\",\"headerType\",\"mainAxis\",\"parseChildrenLayoutSize\",\"parseLayoutSize\",\"parseNonUnitLayoutSizeForChannel\",\"layoutSizeCmpt\",\"mergedSize\",\"childSize\",\"scaleResolve\",\"renameSignal\",\"defaultUnitSize\",\"facetSortFieldName\",\"findSource\",\"other\",\"_data$format\",\"_otherData$format\",\"_data$format2\",\"_otherData$format2\",\"otherData\",\"formatMesh\",\"mesh\",\"otherFeature\",\"feature\",\"formatFeature\",\"otherMesh\",\"url\",\"parseRoot\",\"existingSource\",\"facetRoot\",\"parseData\",\"_data$format3\",\"_ParseNode$makeExplic\",\"_ParseNode$makeWithAn2\",\"head\",\"ancestorParse\",\"AncestorParse\",\"sequence\",\"graticule\",\"parseNothing\",\"parentIsLayer\",\"_BinNode$makeFromEnco\",\"makeFromEncoding\",\"transforms\",\"lookupCounter\",\"transformNode\",\"derivedType\",\"_ParseNode$makeWithAn\",\"makeWithAncestors\",\"makeFromTransform\",\"parsedAs\",\"make\",\"_transformNode$produc\",\"producedFields\",\"implicitEncoding\",\"implicitSelection\",\"parseAll\",\"_TimeUnitNode$makeFro\",\"_BinNode$makeFromEnco2\",\"parseAllForSortIndex\",\"rawName\",\"getDataName\",\"_ImputeNode$makeFromE\",\"_StackNode$makeFromEn\",\"agg\",\"_FilterInvalidNode$ma\",\"mainName\",\"_makeJoinAggregateFro\",\"facetName\",\"newParent\",\"parseUnitAxes\",\"parseAxis\",\"mergeAxisComponents\",\"mergedAxisCmpts\",\"childAxisCmpts\",\"mergeAxisComponent\",\"AXIS_COMPONENT_PROPERTIES\",\"isExplicit$1\",\"_axis\",\"_config\",\"_config$axis\",\"_axis2\",\"_axis$encoding\",\"AxisComponent\",\"axisRules\",\"AXIS_PROPERTIES_INDEX\",\"hasValue\",\"hasConfigValue\",\"propsToAlwaysIncludeConfig\",\"axisEncoding\",\"axisEncode\",\"_axisEncoding$part\",\"axisEncodingPart\",\"_getFieldOrDatumDef\",\"specifiedLabelsSpec\",\"specifiedOrient\",\"CIRCLE\",\"SQUARE\",\"TEXT$1\",\"RECT\",\"IMAGE\",\"BAR\",\"RULE\",\"AREA\",\"LINE\",\"TICK\",\"xIsContinuous\",\"yIsContinuous\",\"xIsTemporal\",\"yIsTemporal\",\"encodeEntry\",\"fixedShape\",\"parseMarkGroups\",\"TRAIL\",\"getPathGroups\",\"hasCornerRadius\",\"VG_CORNERRADIUS_CHANNELS\",\"getGroupsForStackedBarWithCornerRadius\",\"getMarkGroup\",\"FACETED_PATH_PREFIX\",\"fromPrefix\",\"STACK_GROUP_PREFIX\",\"fieldScale\",\"stackField\",\"stackFieldGroup\",\"func\",\"vgFieldMinMax\",\"innerGroupUpdate\",\"groupUpdate\",\"groupByField\",\"strokeProperties\",\"strokeForeground\",\"strokeOffset\",\"ops\",\"getSort$1\",\"fieldDefToSort\",\"parentCount\",\"unitCount\",\"postEncodingTransform\",\"markCompiler\",\"vgMark\",\"buildModel\",\"parentGivenName\",\"unitSize\",\"FacetModel\",\"LayerModel\",\"UnitModel\",\"ConcatModel\",\"assembleTopLevelModel\",\"topLevelProperties\",\"usermeta\",\"vgConfig\",\"assembleSelectionData\",\"assembleGroupStyle\",\"assembleGroupEncodeEntry\",\"layoutSignals\",\"$schema\",\"otherTopLevelProps\",\"assembleGroup\",\"assembleSelectionTopLevelSignals\",\"Number\",\"opts\",\"cmp\",\"cycles\",\"aobj\",\"bobj\",\"seen\",\"toJSON\",\"isFinite\",\"seenIndex\",\"fastDeepEqual\",\"constructor\",\"valueOf\",\"createCommonjsModule\",\"basedir\",\"clone_1\",\"_instanceof\",\"circular\",\"depth\",\"includeNonEnumerable\",\"_clone\",\"nativeMap\",\"nativeSet\",\"nativePromise\",\"reject\",\"then\",\"err\",\"__isArray\",\"__isRegExp\",\"__getRegExpFlags\",\"lastIndex\",\"__isDate\",\"getTime\",\"useBuffer\",\"isBuffer\",\"allocUnsafe\",\"create\",\"proto\",\"getPrototypeOf\",\"allParents\",\"allChildren\",\"keyChild\",\"valueChild\",\"entryChild\",\"attrs\",\"getOwnPropertyDescriptor\",\"getOwnPropertySymbols\",\"symbol\",\"allPropertyNames\",\"getOwnPropertyNames\",\"propertyName\",\"Infinity\",\"__objToStr\",\"re\",\"ignoreCase\",\"multiline\",\"Map\",\"Promise\",\"clonePrototype\",\"clone.clonePrototype\",\"labelBaseline\",\"labelColor\",\"labelFont\",\"labelFontSize\",\"labelFontStyle\",\"labelFontWeight\",\"labelOpacity\",\"labelOffset\",\"labelPadding\",\"gridDash\",\"gridDashOffset\",\"gridOpacity\",\"gridWidth\",\"tickDash\",\"tickDashOffset\",\"tickOpacity\",\"tickSize\",\"tickWidth\",\"gridCap\",\"gridScale\",\"bandPosition\",\"domainCap\",\"domainDash\",\"domainDashOffset\",\"domainOpacity\",\"domainWidth\",\"labelBound\",\"labelFlush\",\"labelFlushOffset\",\"labelLimit\",\"labelLineHeight\",\"labelOverlap\",\"labelSeparation\",\"position\",\"tickCap\",\"tickMinStep\",\"tickOffset\",\"tickRound\",\"titleAlign\",\"titleAnchor\",\"titleAngle\",\"titleBaseline\",\"titleColor\",\"titleFont\",\"titleFontSize\",\"titleFontStyle\",\"titleFontWeight\",\"titleLimit\",\"titleLineHeight\",\"titleOpacity\",\"titlePadding\",\"titleX\",\"titleY\",\"tickCount\",\"tickExtra\",\"COMMON_AXIS_PROPERTIES_INDEX\",\"AXIS_CONFIGS_INDEX\",\"axisBand\",\"axisBottom\",\"axisDiscrete\",\"axisLeft\",\"axisPoint\",\"axisQuantitative\",\"axisRight\",\"axisTemporal\",\"axisTop\",\"axisX\",\"axisXBand\",\"axisXDiscrete\",\"axisXPoint\",\"axisXQuantitative\",\"axisXTemporal\",\"axisY\",\"axisYBand\",\"axisYDiscrete\",\"axisYPoint\",\"axisYQuantitative\",\"axisYTemporal\",\"average\",\"distinct\",\"product\",\"mean\",\"missing\",\"q1\",\"q3\",\"ci0\",\"ci1\",\"stderr\",\"stdev\",\"stdevp\",\"sum\",\"variance\",\"variancep\",\"SHARED_DOMAIN_OPS\",\"theta2\",\"radius\",\"radius2\",\"GEO_POSIITON_CHANNEL_INDEX\",\"longitude2\",\"latitude2\",\"GEOPOSITION_CHANNELS\",\"UNIT_CHANNEL_INDEX\",\"POSITION_CHANNEL_INDEX\",\"fillOpacity\",\"strokeOpacity\",\"strokeDash\",\"detail\",\"href\",\"FACET_CHANNEL_INDEX\",\"SINGLE_DEF_CHANNEL_INDEX\",\"SECONDARY_RANGE_CHANNEL\",\"POLAR_POSITION_SCALE_CHANNELS\",\"NONPOSITION_SCALE_CHANNELS\",\"NONPOSITION_SCALE_CHANNEL_INDEX\",\"logger\",\"None\",\"Error$1\",\"Warn\",\"info\",\"Info\",\"debug\",\"Debug\",\"week\",\"dayofyear\",\"hours\",\"minutes\",\"seconds\",\"milliseconds\",\"VG_MARK_CONFIG_INDEX\",\"ariaRole\",\"blend\",\"strokeCap\",\"strokeDashOffset\",\"strokeJoin\",\"strokeMiterLimit\",\"endAngle\",\"padAngle\",\"innerRadius\",\"outerRadius\",\"dir\",\"dx\",\"dy\",\"ellipsis\",\"limit\",\"fontWeight\",\"fontStyle\",\"lineBreak\",\"lineHeight\",\"cursor\",\"cornerRadius\",\"cornerRadiusTopLeft\",\"cornerRadiusTopRight\",\"cornerRadiusBottomLeft\",\"cornerRadiusBottomRight\",\"aspect\",\"smooth\",\"IDENTITY\",\"SEQUENTIAL\",\"BIN_ORDINAL\",\"ORDINAL\",\"BAND\",\"linear\",\"sqrt\",\"symlog\",\"sequential\",\"time\",\"quantile\",\"quantize\",\"threshold\",\"SCALE_PRECEDENCE_INDEX\",\"CONTINUOUS_TO_CONTINUOUS_SCALES\",\"QUANTITATIVE_SCALES\",\"CONTINUOUS_TO_DISCRETE_SCALES\",\"CONTINUOUS_DOMAIN_SCALES\",\"DISCRETE_DOMAIN_SCALES\",\"SCALE_PROPERTY_INDEX\",\"domainMax\",\"domainMin\",\"round\",\"clamp\",\"nice\",\"exponent\",\"constant\",\"NON_TYPE_DOMAIN_RANGE_VEGA_SCALE_PROPERTIES\",\"NON_TYPE_DOMAIN_RANGE_VEGA_SCALE_PROPERTY_INDEX\",\"Mark\",\"ARC\",\"PRIMITIVE_MARKS\",\"FILL_STROKE_CONFIG\",\"VL_ONLY_MARK_CONFIG_INDEX\",\"timeUnitBand\",\"timeUnitBandPosition\",\"MARK_CONFIG_INDEX\",\"BAR_CORNER_RADIUS_INDEX\",\"horizontal\",\"vertical\",\"defaultTitleFormatter\",\"fieldTitle\",\"timeUnitParams\",\"hasMatchingType\",\"boxPlotNormalizer\",\"errorBarNormalizer\",\"errorBandNormalizer\",\"BOXPLOT_PARTS\",\"ERRORBAR_PARTS\",\"ERRORBAND_PARTS\",\"HEADER_TITLE_PROPERTIES_MAP\",\"HEADER_TITLE_PROPERTIES\",\"HEADER_CONFIGS_INDEX\",\"COMPOSITION_LAYOUT_INDEX\",\"bounds\",\"background\",\"defaultViewConfig\",\"continuousWidth\",\"continuousHeight\",\"defaultMarkConfig\",\"defaultBarConfig\",\"binSpacing\",\"DEFAULT_RECT_BAND_SIZE\",\"defaultRectConfig\",\"defaultTickConfig\",\"box\",\"outliers\",\"borders\",\"defaultScaleConfig\",\"pointPadding\",\"barBandPaddingInner\",\"rectBandPaddingInner\",\"defaultLegendConfig\",\"gradientHorizontalMaxLength\",\"gradientHorizontalMinLength\",\"gradientVerticalMaxLength\",\"gradientVerticalMinLength\",\"unselectedOpacity\",\"defaultConfig\",\"single\",\"clear\",\"multi\",\"toggle\",\"interval\",\"zoom\",\"DEFAULT_SPACING\",\"tab10\",\"guideLabel\",\"groupTitle\",\"groupSubtitle\",\"blue\",\"orange\",\"red\",\"teal\",\"green\",\"yellow\",\"purple\",\"pink\",\"brown\",\"gray0\",\"gray1\",\"gray2\",\"gray3\",\"gray4\",\"gray5\",\"gray6\",\"gray7\",\"gray8\",\"gray9\",\"gray10\",\"gray11\",\"gray12\",\"gray13\",\"gray14\",\"gray15\",\"VL_ONLY_MARK_SPECIFIC_CONFIG_PROPERTY_INDEX\",\"SpecMapper\",\"mapFacet\",\"mapRepeat\",\"mapHConcat\",\"mapVConcat\",\"mapConcat\",\"mapLayerOrUnit\",\"mapLayer\",\"mapUnit\",\"subspec\",\"hconcat\",\"vconcat\",\"PathOverlayNormalizer\",\"pointOverlay\",\"lineOverlay\",\"stackProps\",\"overlayEncoding\",\"stackFieldChannel\",\"RangeStepNormalizer\",\"_def$scale\",\"_def$scale2\",\"RANGE_STEP_DEPRECATED\",\"defWithoutScale\",\"scaleWithoutRangeStep\",\"RuleForRangedLineNormalizer\",\"mainChannelDef\",\"hasX2\",\"CoreNormalizer\",\"hasRow\",\"hasColumn\",\"hasFacet\",\"mapFacetedUnit\",\"specWithReplacedEncoding\",\"mapUnitWithParentEncodingOrProjection\",\"normalizeLayerOrUnit\",\"unitNormalizer\",\"nonFacetUnitNormalizers\",\"mapLayerRepeat\",\"mapNonLayerRepeat\",\"childSpec\",\"repeaterPrefix\",\"layerValue\",\"childRepeater\",\"childName\",\"_childSpec$data\",\"repeatValues\",\"repeatValue\",\"rowValue\",\"columnValue\",\"remainingProperties\",\"mergedProjection\",\"mergedEncoding\",\"facetMapping\",\"getFacetMappingAndLayout\",\"newEncoding\",\"facets\",\"defWithoutLayout\",\"_layout$prop\",\"otherParams\",\"Split\",\"copyKeyFromSplit\",\"copyAll\",\"top\",\"bottom\",\"nearest\",\"VORONOI\",\"cellDef\",\"isVoronoi\",\"exists\",\"_mark$name\",\"DataFlowNode\",\"debugName\",\"_parent\",\"addChild\",\"_children\",\"loc\",\"ADD_SAME_CHILD_TWICE\",\"removeChild\",\"oldChild\",\"remove\",\"cloneObj\",\"_source\",\"_name\",\"refCounts\",\"dependentFields\",\"_hash\",\"isRequired\",\"formula\",\"reduceFieldDef\",\"timeUnitComponent\",\"removeFormulas\",\"newFormula\",\"units\",\"timezone\",\"SelectionProjectionComponent\",\"inputBindings\",\"origDef\",\"sgname\",\"hasSignal\",\"_bind$p$field\",\"TOGGLE\",\"tpl\",\"bound\",\"SCALE_BINDINGS_CONTINUOUS\",\"namedSg\",\"projLen\",\"LEGEND_BINDINGS_MUST_HAVE_PROJECTION\",\"_evt$filter\",\"legendFilter\",\"markName\",\"ds\",\"sgName\",\"tuple\",\"_selCmpt$project\",\"parsed\",\"signalName\",\"sg\",\"counter\",\"SINGLE_DEF_UNIT_CHANNEL_INDEX\",\"INTERVAL_INITIALIZED_WITH_X_Y\",\"_selDef$fields\",\"_selDef$encodings\",\"parseInit\",\"allSignals\",\"BRUSH\",\"sx\",\"sy\",\"idx\",\"findIndex\",\"addClear\",\"vIdx\",\"dIdx\",\"tIdx\",\"dataSignals\",\"scaleTriggers\",\"filterExpr\",\"_evt$between$0$filter\",\"filters\",\"cs\",\"toNum\",\"xvname\",\"yvname\",\"vgStroke\",\"enter\",\"ASTNode.prototype.visit\",\"visitor\",\"_dependentFields\",\"_axis$grid\",\"gridChannel\",\"_axis$labelFlush\",\"_axis$labelOverlap\",\"hasTimeUnit\",\"_axis$tickCount\",\"fieldDefTitle\",\"_axis$zindex\",\"sortValue\",\"HEADER_CHANNELS\",\"HEADER_TYPES\",\"LAYOUT_TITLE_BAND\",\"LEGEND_COMPONENT_PROPERTY_INDEX\",\"COMMON_LEGEND_PROPERTY_INDEX\",\"clipHeight\",\"columnPadding\",\"fillColor\",\"gradientLength\",\"gradientOpacity\",\"gradientStrokeColor\",\"gradientStrokeWidth\",\"gradientThickness\",\"gridAlign\",\"legendX\",\"legendY\",\"rowPadding\",\"strokeColor\",\"symbolDash\",\"symbolDashOffset\",\"symbolFillColor\",\"symbolLimit\",\"symbolOffset\",\"symbolOpacity\",\"symbolSize\",\"symbolStrokeColor\",\"symbolStrokeWidth\",\"symbolType\",\"symbolsSpec\",\"_legendCmpt$get2\",\"_legendCmpt$get3\",\"_getMaxValue\",\"_config$legend$symbol\",\"symbolBaseFillColor\",\"_getFirstConditionVal\",\"_encoding$fill\",\"gradientSpec\",\"_legendCmpt$get4\",\"specifiedlabelsSpec\",\"labelsSpec\",\"entries$1\",\"entriesSpec\",\"_legend$gradientLengt\",\"_legend$labelOverlap\",\"_legend$symbolType\",\"shapeChannelDef\",\"markShape\",\"binComponentIndex\",\"_model$axis\",\"formulaAs\",\"binAs\",\"remainingAs\",\"binTrans\",\"dimensions\",\"measures\",\"meas\",\"dims\",\"_meas$\",\"_meas$argField\",\"argField\",\"_meas$field\",\"_meas$field2\",\"posChannel\",\"_meas$2\",\"_meas$field3\",\"_t$groupby\",\"childMeasures\",\"parentMeasures\",\"_parentMeasures$field\",\"alias\",\"result\",\"sortField\",\"sortIndexField\",\"childModel\",\"_this$channel\",\"depFields\",\"getChildIndependentFieldsWithStep\",\"childIndependentFieldsWithStep\",\"childScaleComponent\",\"assembleRowColumnHeaderData\",\"crossedDataName\",\"childChannel\",\"assembleFacetHeaderData\",\"hasSharedAxis\",\"headers\",\"_header$axes\",\"stop\",\"_childIndependentFiel\",\"_childIndependentFiel2\",\"facetData\",\"_parse\",\"formatParse\",\"onlyNested\",\"_this$params$as\",\"_data\",\"defaultExtension\",\"exec\",\"_generator\",\"_modified\",\"WeakMap\",\"Optimizer\",\"setModified\",\"BottomUpOptimizer\",\"getNodeDepths\",\"depths\",\"topologicalSort\",\"modifiedFlag\",\"TopDownOptimizer\",\"mergeNodes\",\"mergedNode\",\"hashes\",\"buckets\",\"timeUnitFields\",\"originalChildren\",\"parseChildren\",\"commonParse\",\"conflictingParse\",\"parseNode\",\"mergedParseNode\",\"childNode\",\"timeUnitChildren\",\"combination\",\"aggChildren\",\"groupedAggregates\",\"groupBys\",\"groupBy\",\"mergeableAggs\",\"mergedAggs\",\"moveBinsUp\",\"promotableBins\",\"remainingBins\",\"promotedBin\",\"remainingBin\",\"hasOutputChild\",\"otherChildren\",\"lastOutput\",\"theChild\",\"mainOutput\",\"getDefaultName\",\"joinAggregateFieldDef\",\"_joinAggregateFieldDe\",\"_stack\",\"stackTransform\",\"sortFields\",\"sortOrder\",\"normalizedAs\",\"facetby\",\"stackProperties\",\"dimensionFieldDef\",\"stackby\",\"getGroupbyFields\",\"_this$transform$group\",\"_this$transform$sort\",\"window\",\"windowFieldDef\",\"_windowFieldDef$as\",\"_sortField$order\",\"ignorePeers\",\"exprGenerator\",\"rename\",\"_getFieldDef\",\"continuousPadding\",\"barConfig\",\"bandPaddingInner\",\"bandPaddingOuter\",\"xReverse\",\"last\",\"st1\",\"st2\",\"NameMap\",\"nameMap\",\"oldName\",\"Model\",\"_spec$name\",\"_spec$transform\",\"initTitle\",\"scaleNameMap\",\"projectionNameMap\",\"signalNameMap\",\"titleInternal\",\"parseScale\",\"renameTopLevelLayoutSizeSignal\",\"parseSelections\",\"parseAxesAndHeaders\",\"parseLegends\",\"parseMarkGroup\",\"ignoreRange\",\"_this$view$style\",\"_this$view\",\"assembleEncodeFromView\",\"baseView\",\"isTopLevel\",\"_encodeEntry\",\"assembleLayout\",\"titleBand\",\"headerComponent\",\"headerComponentIndex\",\"assembleDefaultLayout\",\"assembleHeaderMarks\",\"headerMarks\",\"ta\",\"role\",\"groups\",\"_sort$order\",\"isFacetWithoutRowCol\",\"hasAxes\",\"_this$title\",\"titleNoEncoding\",\"_title$frame\",\"_title$anchor\",\"assembleSignals\",\"assembleMarks\",\"fullName\",\"oldSignalName\",\"originalScaleName\",\"localScaleComponent\",\"variableName\",\"origName\",\"hasAxisOrientSignalRef\",\"_this$component$axes$\",\"_this$component$axes$2\",\"hasOrientSignalRef\",\"ModelWithField\",\"getMapping\",\"acc\",\"_this$transform$as\",\"_specifiedAs$\",\"_specifiedAs$2\",\"specifiedAs\",\"density\",\"vegaFilters\",\"flatten\",\"_as$i\",\"fold\",\"geoJsonCounter\",\"coordinates\",\"pair\",\"_this$fields\",\"processSequence\",\"keyvals\",\"imputeTransform\",\"imputedChannel\",\"keyChannel\",\"groupbyFields\",\"deriveNewField\",\"replaceOriginal\",\"loess\",\"secondary\",\"fromOutputNode\",\"fromSource\",\"fromOutputName\",\"lookup\",\"foreign\",\"asName\",\"NO_FIELDS_NEEDS_AS\",\"default\",\"regression\",\"_this$transform$group2\",\"pivot\",\"sample\",\"initFacet\",\"initFacetFieldDef\",\"normalizedFacet\",\"_fieldDef$header\",\"title$1\",\"getHeaderLayoutMixins\",\"layoutMixins\",\"layoutHeaderComponent\",\"_layoutMixins$titleAn\",\"bandType\",\"_layoutMixins$bandTyp\",\"_layoutMixins$offset\",\"columnDistinctSignal\",\"facetLayoutDataName\",\"getCardinalityAggregateForChild\",\"assembleFacet\",\"outputName\",\"cross\",\"facetSortFields\",\"facetSortOrder\",\"ORTHOGONAL_ORIENT\",\"_facet$channel\",\"markGroup\",\"_spec$resolve\",\"_spec$resolve$axis\",\"_spec$resolve2\",\"_spec$resolve2$axis\",\"CONCAT_CANNOT_SHARE_AXIS\",\"getChildren\",\"heightType\",\"widthType\",\"parseAxisGroup\",\"db\",\"AXIS_COMPONENT_PROPERTIES_INDEX\",\"OPPOSITE_ORIENT\",\"shapeDef\",\"text$1\",\"vgThicknessChannel\",\"markPropOrConfig\",\"bandSize\",\"defaultViewStep\",\"parentGivenSize\",\"filledConfig\",\"actual\",\"cornerRadiusEnd\",\"newProps\",\"newProp\",\"specifiedOpacity\",\"specifiedCursor\",\"initScales\",\"specifiedAxes\",\"initAxes\",\"specifiedLegends\",\"initLegends\",\"isGeoShapeMark\",\"hasGeoPosition\",\"initScale\",\"scaleInternal\",\"axisSpec\",\"initAxis\",\"axisInternal\",\"specifiedSize\",\"defaultSize\",\"_this$component$mark\",\"correctDataNames\",\"axisCount\",\"_axes$channel\",\"oppositeOrient\",\"compile\",\"inputSpec\",\"firstPassCounter\",\"secondPassCounter\",\"MAX_OPTIMIZATION_RUNS\",\"resize\",\"autoSizeType\",\"inverseSizeType\",\"vgSpec\",\"normalized\",\"isEqual\",\"dict\",\"dictKeys\",\"otherKeys\",\"resetIdCounter\",\"version\"]\n}\n"]