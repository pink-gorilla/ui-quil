["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/lodash/_baseIsNative.js"],"~:js","shadow$provide.module$node_modules$lodash$_baseIsNative=function(global,require,module,exports){var isFunction=require(\"module$node_modules$lodash$isFunction\"),isMasked=require(\"module$node_modules$lodash$_isMasked\"),isObject=require(\"module$node_modules$lodash$isObject\"),toSource=require(\"module$node_modules$lodash$_toSource\"),reIsHostCtor=/^\\[object .+?Constructor\\]$/,reIsNative=RegExp(\"^\"+Function.prototype.toString.call(Object.prototype.hasOwnProperty).replace(/[\\\\^$.*+?()[\\]{}|]/g,\"\\\\$\\x26\").replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g,\n\"$1.*?\")+\"$\");module.exports=function(value){return!isObject(value)||isMasked(value)?!1:(isFunction(value)?reIsNative:reIsHostCtor).test(toSource(value))}}","~:source","shadow$provide[\"module$node_modules$lodash$_baseIsNative\"] = function(global,require,module,exports) {\nvar isFunction = require('./isFunction'),\n    isMasked = require('./_isMasked'),\n    isObject = require('./isObject'),\n    toSource = require('./_toSource');\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used for built-in method references. */\nvar funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\nmodule.exports = baseIsNative;\n\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$lodash$_isMasked","~$module$node_modules$lodash$isFunction","~$shadow.js","~$module$node_modules$lodash$isObject","~$module$node_modules$lodash$_toSource"]],"~:properties",["^5",[]],"~:compiled-at",1621210442011,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$lodash$_baseIsNative.js\",\n\"lineCount\":2,\n\"mappings\":\"AAAAA,cAAA,CAAA,wCAAA,CAA6D,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAAA,IACjGC,WAAaH,OAAA,CAAQ,uCAAR,CADoF,CAEjGI,SAAWJ,OAAA,CAAQ,sCAAR,CAFsF,CAGjGK,SAAWL,OAAA,CAAQ,qCAAR,CAHsF,CAIjGM,SAAWN,OAAA,CAAQ,sCAAR,CAJsF,CAajGO,aAAe,6BAbkF,CA0BjGC,WAAaC,MAAA,CAAO,GAAP,CAVDC,QAASC,CAAAA,SAIIC,CAAAA,QAOdC,CAAAA,IAAb,CAVgBC,MAAOH,CAAAA,SAMQI,CAAAA,cAI/B,CAAkCC,CAAAA,OAAlC,CAjBiBC,qBAiBjB,CAAwD,SAAxD,CACCD,CAAAA,OADD,CACS,wDADT;AACmE,OADnE,CADe,CAE+D,GAF/D,CAqBjBf,OAAOC,CAAAA,OAAP,CARAgB,QAAqB,CAACC,KAAD,CAAQ,CAC3B,MAAI,CAACd,QAAA,CAASc,KAAT,CAAL,EAAwBf,QAAA,CAASe,KAAT,CAAxB,CACS,CAAA,CADT,CAIeC,CADDjB,UAAA,CAAWgB,KAAX,CAAAE,CAAoBb,UAApBa,CAAiCd,YAChCa,EAAAA,IAAR,CAAad,QAAA,CAASa,KAAT,CAAb,CALoB,CAvCwE;\",\n\"sources\":[\"node_modules/lodash/_baseIsNative.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$lodash$_baseIsNative\\\"] = function(global,require,module,exports) {\\nvar isFunction = require('./isFunction'),\\n    isMasked = require('./_isMasked'),\\n    isObject = require('./isObject'),\\n    toSource = require('./_toSource');\\n\\n/**\\n * Used to match `RegExp`\\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\\n */\\nvar reRegExpChar = /[\\\\\\\\^$.*+?()[\\\\]{}|]/g;\\n\\n/** Used to detect host constructors (Safari). */\\nvar reIsHostCtor = /^\\\\[object .+?Constructor\\\\]$/;\\n\\n/** Used for built-in method references. */\\nvar funcProto = Function.prototype,\\n    objectProto = Object.prototype;\\n\\n/** Used to resolve the decompiled source of functions. */\\nvar funcToString = funcProto.toString;\\n\\n/** Used to check objects for own properties. */\\nvar hasOwnProperty = objectProto.hasOwnProperty;\\n\\n/** Used to detect if a method is native. */\\nvar reIsNative = RegExp('^' +\\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\\\\\$&')\\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\\\\\\\()| for .+?(?=\\\\\\\\\\\\])/g, '$1.*?') + '$'\\n);\\n\\n/**\\n * The base implementation of `_.isNative` without bad shim checks.\\n *\\n * @private\\n * @param {*} value The value to check.\\n * @returns {boolean} Returns `true` if `value` is a native function,\\n *  else `false`.\\n */\\nfunction baseIsNative(value) {\\n  if (!isObject(value) || isMasked(value)) {\\n    return false;\\n  }\\n  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;\\n  return pattern.test(toSource(value));\\n}\\n\\nmodule.exports = baseIsNative;\\n\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"isFunction\",\"isMasked\",\"isObject\",\"toSource\",\"reIsHostCtor\",\"reIsNative\",\"RegExp\",\"Function\",\"prototype\",\"toString\",\"call\",\"Object\",\"hasOwnProperty\",\"replace\",\"reRegExpChar\",\"baseIsNative\",\"value\",\"test\",\"pattern\"]\n}\n"]