["^ ","~:output",["^ ","~:js","goog.provide('sci.impl.records');\nsci.impl.records.defrecord = (function sci$impl$records$defrecord(var_args){\nvar args__4777__auto__ = [];\nvar len__4771__auto___86643 = arguments.length;\nvar i__4772__auto___86644 = (0);\nwhile(true){\nif((i__4772__auto___86644 < len__4771__auto___86643)){\nargs__4777__auto__.push((arguments[i__4772__auto___86644]));\n\nvar G__86646 = (i__4772__auto___86644 + (1));\ni__4772__auto___86644 = G__86646;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4778__auto__ = ((((5) < args__4777__auto__.length))?(new cljs.core.IndexedSeq(args__4777__auto__.slice((5)),(0),null)):null);\nreturn sci.impl.records.defrecord.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]),(arguments[(4)]),argseq__4778__auto__);\n});\n\n(sci.impl.records.defrecord.cljs$core$IFn$_invoke$arity$variadic = (function (_,___$1,ctx,record_name,fields,protocol_impls){\nvar factory_fn_str = [\"->\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(record_name)].join('');\nvar factory_fn_sym = cljs.core.symbol.cljs$core$IFn$_invoke$arity$1(factory_fn_str);\nvar map_factory_sym = cljs.core.symbol.cljs$core$IFn$_invoke$arity$1([\"map\",factory_fn_str].join(''));\nvar keys = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.keyword,fields);\nvar rec_type = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(sci.impl.vars.current_ns_name()),cljs.core.str.cljs$core$IFn$_invoke$arity$1(record_name));\nvar protocol_impls__$1 = sci.impl.utils.split_when(cljs.core.symbol_QMARK_,protocol_impls);\nvar field_set = cljs.core.set(fields);\nvar protocol_impls__$2 = cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic((function (p__86548){\nvar vec__86549 = p__86548;\nvar seq__86550 = cljs.core.seq(vec__86549);\nvar first__86551 = cljs.core.first(seq__86550);\nvar seq__86550__$1 = cljs.core.next(seq__86550);\nvar protocol_name = first__86551;\nvar impls = seq__86550__$1;\nvar impls__$1 = cljs.core.group_by(cljs.core.first,impls);\nvar protocol = (function (){var fexpr__86552 = cljs.core.deref(sci.impl.utils.eval_resolve_state);\nreturn (fexpr__86552.cljs$core$IFn$_invoke$arity$2 ? fexpr__86552.cljs$core$IFn$_invoke$arity$2(ctx,protocol_name) : fexpr__86552.call(null,ctx,protocol_name));\n})();\nvar protocol__$1 = ((sci.impl.vars.var_QMARK_(protocol))?cljs.core.deref(protocol):protocol);\nvar protocol_ns = new cljs.core.Keyword(null,\"ns\",\"ns\",441598760).cljs$core$IFn$_invoke$arity$1(protocol__$1);\nvar pns = cljs.core.str.cljs$core$IFn$_invoke$arity$1(sci.impl.vars.getName(protocol_ns));\nvar fq_meth_name = (function (p1__86472_SHARP_){\nreturn cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(pns,p1__86472_SHARP_);\n});\nreturn cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (p__86553){\nvar vec__86554 = p__86553;\nvar method_name = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__86554,(0),null);\nvar bodies = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__86554,(1),null);\nvar bodies__$1 = cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.rest,bodies);\nvar bodies__$2 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2((function (impl){\nvar args = cljs.core.first(impl);\nvar body = cljs.core.rest(impl);\nvar destr = sci.impl.utils.maybe_destructured(args,body);\nvar args__$1 = new cljs.core.Keyword(null,\"params\",\"params\",710516235).cljs$core$IFn$_invoke$arity$1(destr);\nvar orig_this_sym = cljs.core.first(args__$1);\nvar this_sym = cljs.core.gensym.cljs$core$IFn$_invoke$arity$1(\"this_\");\nvar args__$2 = cljs.core.vec(cljs.core.cons(this_sym,cljs.core.rest(args__$1)));\nvar body__$1 = new cljs.core.Keyword(null,\"body\",\"body\",-2049205669).cljs$core$IFn$_invoke$arity$1(destr);\nvar bindings = cljs.core.vec(cljs.core.concat.cljs$core$IFn$_invoke$arity$2(cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic((function (field){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [field,(new cljs.core.List(null,cljs.core.keyword.cljs$core$IFn$_invoke$arity$1(field),(new cljs.core.List(null,this_sym,null,(1),null)),(2),null))], null);\n}),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.disj,field_set,args__$2)], 0)),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [orig_this_sym,this_sym], null)));\nreturn cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2((new cljs.core.List(null,args__$2,null,(1),null)),(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,new cljs.core.Symbol(\"cljs.core\",\"let\",\"cljs.core/let\",-308701135,null),null,(1),null)),(new cljs.core.List(null,bindings,null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([body__$1], 0)))),null,(1),null)))));\n}),bodies__$1);\nreturn cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,new cljs.core.Symbol(\"cljs.core\",\"defmethod\",\"cljs.core/defmethod\",-180785162,null),null,(1),null)),(new cljs.core.List(null,fq_meth_name(cljs.core.str.cljs$core$IFn$_invoke$arity$1(method_name)),null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2((new cljs.core.List(null,new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),null,(1),null)),(new cljs.core.List(null,rec_type,null,(1),null))))),null,(1),null)),bodies__$2], 0))));\n}),impls__$1);\n}),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([protocol_impls__$1], 0));\nreturn cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,new cljs.core.Symbol(null,\"do\",\"do\",1686842252,null),null,(1),null)),(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,new cljs.core.Symbol(\"cljs.core\",\"defn\",\"cljs.core/defn\",-1606493717,null),null,(1),null)),(new cljs.core.List(null,map_factory_sym,null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(new cljs.core.List(null,cljs.core.vec(cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$1((new cljs.core.List(null,new cljs.core.Symbol(null,\"m__86474__auto__\",\"m__86474__auto__\",-325550094,null),null,(1),null)))))),null,(1),null)),(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,new cljs.core.Symbol(\"cljs.core\",\"vary-meta\",\"cljs.core/vary-meta\",-938366546,null),null,(1),null)),(new cljs.core.List(null,new cljs.core.Symbol(null,\"m__86474__auto__\",\"m__86474__auto__\",-325550094,null),null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(new cljs.core.List(null,new cljs.core.Symbol(\"cljs.core\",\"assoc\",\"cljs.core/assoc\",322326297,null),null,(1),null)),(new cljs.core.List(null,new cljs.core.Keyword(\"sci.impl\",\"record\",\"sci.impl/record\",-1939193950),null,(1),null)),(new cljs.core.List(null,true,null,(1),null)),(new cljs.core.List(null,new cljs.core.Keyword(null,\"type\",\"type\",1174270348),null,(1),null)),(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2((new cljs.core.List(null,new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),null,(1),null)),(new cljs.core.List(null,rec_type,null,(1),null))))),null,(1),null))], 0)))),null,(1),null))], 0)))),null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,new cljs.core.Symbol(\"cljs.core\",\"defn\",\"cljs.core/defn\",-1606493717,null),null,(1),null)),(new cljs.core.List(null,factory_fn_sym,null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(new cljs.core.List(null,cljs.core.vec(cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2((new cljs.core.List(null,new cljs.core.Symbol(null,\"&\",\"&\",-2144855648,null),null,(1),null)),(new cljs.core.List(null,new cljs.core.Symbol(null,\"args__86528__auto__\",\"args__86528__auto__\",1680396585,null),null,(1),null)))))),null,(1),null)),(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,new cljs.core.Symbol(\"cljs.core\",\"vary-meta\",\"cljs.core/vary-meta\",-938366546,null),null,(1),null)),(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,new cljs.core.Symbol(\"cljs.core\",\"zipmap\",\"cljs.core/zipmap\",-1902130674,null),null,(1),null)),(new cljs.core.List(null,keys,null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(new cljs.core.List(null,new cljs.core.Symbol(null,\"args__86528__auto__\",\"args__86528__auto__\",1680396585,null),null,(1),null))], 0)))),null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(new cljs.core.List(null,new cljs.core.Symbol(\"cljs.core\",\"assoc\",\"cljs.core/assoc\",322326297,null),null,(1),null)),(new cljs.core.List(null,new cljs.core.Keyword(\"sci.impl\",\"record\",\"sci.impl/record\",-1939193950),null,(1),null)),(new cljs.core.List(null,true,null,(1),null)),(new cljs.core.List(null,new cljs.core.Keyword(null,\"type\",\"type\",1174270348),null,(1),null)),(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2((new cljs.core.List(null,new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),null,(1),null)),(new cljs.core.List(null,rec_type,null,(1),null))))),null,(1),null))], 0)))),null,(1),null))], 0)))),null,(1),null)),(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,new cljs.core.Symbol(null,\"def\",\"def\",597100991,null),null,(1),null)),(new cljs.core.List(null,record_name,null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,new cljs.core.Symbol(\"cljs.core\",\"with-meta\",\"cljs.core/with-meta\",749126446,null),null,(1),null)),(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2((new cljs.core.List(null,new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),null,(1),null)),(new cljs.core.List(null,rec_type,null,(1),null))))),null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(new cljs.core.List(null,cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.array_map,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,new cljs.core.Keyword(\"sci.impl\",\"record\",\"sci.impl/record\",-1939193950),null,(1),null)),(new cljs.core.List(null,true,null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(new cljs.core.List(null,new cljs.core.Keyword(\"sci.impl.record\",\"constructor\",\"sci.impl.record/constructor\",-2025684209),null,(1),null)),(new cljs.core.List(null,factory_fn_sym,null,(1),null))], 0))))),null,(1),null))], 0)))),null,(1),null))], 0)))),null,(1),null)),protocol_impls__$2], 0))));\n}));\n\n(sci.impl.records.defrecord.cljs$lang$maxFixedArity = (5));\n\n/** @this {Function} */\n(sci.impl.records.defrecord.cljs$lang$applyTo = (function (seq86530){\nvar G__86531 = cljs.core.first(seq86530);\nvar seq86530__$1 = cljs.core.next(seq86530);\nvar G__86532 = cljs.core.first(seq86530__$1);\nvar seq86530__$2 = cljs.core.next(seq86530__$1);\nvar G__86533 = cljs.core.first(seq86530__$2);\nvar seq86530__$3 = cljs.core.next(seq86530__$2);\nvar G__86534 = cljs.core.first(seq86530__$3);\nvar seq86530__$4 = cljs.core.next(seq86530__$3);\nvar G__86535 = cljs.core.first(seq86530__$4);\nvar seq86530__$5 = cljs.core.next(seq86530__$4);\nvar self__4758__auto__ = this;\nreturn self__4758__auto__.cljs$core$IFn$_invoke$arity$variadic(G__86531,G__86532,G__86533,G__86534,G__86535,seq86530__$5);\n}));\n\nsci.impl.records.sci_record_QMARK_ = (function sci$impl$records$sci_record_QMARK_(x){\nvar or__4160__auto__ = ((cljs.core.map_QMARK_(x))?(function (){var G__86588 = x;\nvar G__86588__$1 = (((G__86588 == null))?null:cljs.core.meta(G__86588));\nif((G__86588__$1 == null)){\nreturn null;\n} else {\nreturn new cljs.core.Keyword(\"sci.impl\",\"record\",\"sci.impl/record\",-1939193950).cljs$core$IFn$_invoke$arity$1(G__86588__$1);\n}\n})():null);\nif(cljs.core.truth_(or__4160__auto__)){\nreturn or__4160__auto__;\n} else {\nreturn cljs.core.record_QMARK_(x);\n}\n});\n/**\n * A record class is represented by a symbol with metadata (currently). This is only an implementation detail.\n * A protocol is represented by a map with :ns, :methods and optionally :class. This is also an implementation detail.\n */\nsci.impl.records.resolve_record_or_protocol_class = (function sci$impl$records$resolve_record_or_protocol_class(var_args){\nvar G__86636 = arguments.length;\nswitch (G__86636) {\ncase 2:\nreturn sci.impl.records.resolve_record_or_protocol_class.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 3:\nreturn sci.impl.records.resolve_record_or_protocol_class.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(sci.impl.records.resolve_record_or_protocol_class.cljs$core$IFn$_invoke$arity$2 = (function (ctx,sym){\nvar sym_str = cljs.core.str.cljs$core$IFn$_invoke$arity$1(sym);\nvar last_dot = clojure.string.last_index_of.cljs$core$IFn$_invoke$arity$2(sym_str,\".\");\nvar class_name = (cljs.core.truth_(last_dot)?cljs.core.subs.cljs$core$IFn$_invoke$arity$3(sym_str,(last_dot + (1)),((sym_str).length)):sym_str);\nvar namespace = (cljs.core.truth_(last_dot)?cljs.core.symbol.cljs$core$IFn$_invoke$arity$1(cljs.core.subs.cljs$core$IFn$_invoke$arity$3(sym_str,(0),last_dot)):sci.impl.vars.current_ns_name());\nreturn sci.impl.records.resolve_record_or_protocol_class.cljs$core$IFn$_invoke$arity$3(ctx,namespace,cljs.core.symbol.cljs$core$IFn$_invoke$arity$1(class_name));\n}));\n\n(sci.impl.records.resolve_record_or_protocol_class.cljs$core$IFn$_invoke$arity$3 = (function (ctx,package$,class$){\nvar namespace = cljs.core.symbol.cljs$core$IFn$_invoke$arity$1(clojure.string.replace(cljs.core.str.cljs$core$IFn$_invoke$arity$1(package$),\"_\",\"-\"));\nvar temp__5753__auto__ = cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(cljs.core.deref(new cljs.core.Keyword(null,\"env\",\"env\",-1815813235).cljs$core$IFn$_invoke$arity$1(ctx)),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"namespaces\",\"namespaces\",-1444157469),namespace,class$], null));\nif(cljs.core.truth_(temp__5753__auto__)){\nvar sci_var = temp__5753__auto__;\nif(sci.impl.vars.var_QMARK_(sci_var)){\nreturn cljs.core.deref(sci_var);\n} else {\nreturn sci_var;\n}\n} else {\nreturn null;\n}\n}));\n\n(sci.impl.records.resolve_record_or_protocol_class.cljs$lang$maxFixedArity = 3);\n\nsci.impl.records.resolve_record_class = (function sci$impl$records$resolve_record_class(ctx,class_sym){\nvar temp__5753__auto__ = sci.impl.records.resolve_record_or_protocol_class.cljs$core$IFn$_invoke$arity$2(ctx,class_sym);\nif(cljs.core.truth_(temp__5753__auto__)){\nvar x = temp__5753__auto__;\nif((x instanceof cljs.core.Symbol)){\nreturn x;\n} else {\nreturn null;\n}\n} else {\nreturn null;\n}\n});\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:no-doc",true,"~:file","sci/impl/records.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",21],"~:ns-aliases",["^ ","~$clojure.spec.alpha","~$cljs.spec.alpha","~$cljs.loader","~$shadow.loader","~$highlight.js","~$module$node_modules$highlight_DOT_js$lib$index","~$react","~$module$node_modules$react$index","~$clojure.tools.reader.reader-types","~$cljs.tools.reader.reader-types","~$clojure.pprint","~$cljs.pprint","~$react-dom","~$module$node_modules$react_dom$index","~$clojure.repl","~$cljs.repl","~$webly.user.tenx.events","~$webly.user.tenx.events-on"],"~:use-macros",null,"~:excludes",["~#set",["~$record?","~$defrecord"]],"~:name","~$sci.impl.records","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$clojure.string","^Z","~$str","^Z","~$sci.impl.utils","^10","~$utils","^10","~$sci.impl.vars","^12","~$vars","^12","~$cljs.core","^14","~$goog","^15"],"~:seen",["^Q",["~:require"]],"~:uses",null,"~:require-macros",["^ ","^14","^14","^12","^12","^13","^12"],"~:form",["~#list",["~$ns","^U",["^ ","^6",true],["^1;",["~:refer-clojure","~:exclude",["^S","^R"]]],["^1;",["^17",["^Z","~:as","^["],["^10","^1?","^11"],["^12","^1?","^13"]]]]],"~:flags",["^ ","^17",["^Q",[]]],"~:js-deps",["^ "],"~:deps",["^15","^14","^Z","^10","^12"]],"^W","^U","~:resource-id",["~:shadow.build.classpath/resource","sci/impl/records.cljc"],"~:compiled-at",1621210462790,"~:resource-name","sci/impl/records.cljc","~:warnings",[],"~:source","(ns sci.impl.records\n  {:no-doc true}\n  (:refer-clojure :exclude [defrecord record?])\n  (:require [clojure.string :as str]\n            [sci.impl.utils :as utils]\n            [sci.impl.vars :as vars]))\n\n(defn defrecord [_ _ ctx record-name fields & protocol-impls]\n  (let [factory-fn-str (str \"->\" record-name)\n        factory-fn-sym (symbol factory-fn-str)\n        map-factory-sym (symbol (str \"map\" factory-fn-str))\n        keys (mapv keyword fields)\n        rec-type (symbol (str (vars/current-ns-name)) (str record-name))\n        protocol-impls (utils/split-when symbol? protocol-impls)\n        field-set (set fields)\n        protocol-impls\n        (mapcat\n         (fn [[protocol-name & impls]]\n           (let [impls (group-by first impls)\n                 protocol (@utils/eval-resolve-state ctx protocol-name)\n                 protocol (if (vars/var? protocol) @protocol protocol)\n                 protocol-ns (:ns protocol)\n                 pns (str (vars/getName protocol-ns))\n                 fq-meth-name #(symbol pns %)]\n             (map (fn [[method-name bodies]]\n                    (let [bodies (map rest bodies)\n                          bodies (mapv (fn [impl]\n                                         (let [args (first impl)\n                                               body (rest impl)\n                                               destr (utils/maybe-destructured args body)\n                                               args (:params destr)\n                                               orig-this-sym (first args)\n                                               this-sym (gensym \"this_\")\n                                               args (vec (cons this-sym (rest args)))\n                                               body (:body destr)\n                                               bindings\n                                               (vec (concat\n                                                     (mapcat (fn [field]\n                                                               [field (list (keyword field) this-sym)])\n                                                             (reduce disj field-set args))\n                                                     [orig-this-sym this-sym]))]\n                                           `(~args\n                                             (let ~bindings\n                                               ~@body)))) bodies)]\n                      `(defmethod ~(fq-meth-name (str method-name)) '~rec-type ~@bodies)))\n                  impls)))\n         protocol-impls)]\n    `(do\n       (defn ~map-factory-sym [m#]\n         (vary-meta m#\n                    assoc\n                    :sci.impl/record true\n                    :type '~rec-type))\n       (defn ~factory-fn-sym [& args#]\n         (vary-meta (zipmap ~keys args#)\n                    assoc\n                    :sci.impl/record true\n                    :type '~rec-type))\n       (def ~record-name (with-meta '~rec-type\n                           {:sci.impl/record true\n                            :sci.impl.record/constructor ~factory-fn-sym}))\n       ~@protocol-impls)))\n\n(defn sci-record? [x]\n  (or\n   (when (map? x)\n     (some-> x meta :sci.impl/record))\n   (clojure.core/record? x)))\n\n(defn resolve-record-or-protocol-class\n  \"A record class is represented by a symbol with metadata (currently). This is only an implementation detail.\n   A protocol is represented by a map with :ns, :methods and optionally :class. This is also an implementation detail.\"\n  ;; TODO: we should probably use munging here for namespaces with hyphens in them.\n  ([ctx sym]\n   (let [sym-str (str sym)\n         last-dot (str/last-index-of sym-str \".\")\n         class-name (if last-dot\n                      (subs sym-str (inc last-dot) (count sym-str))\n                      sym-str)\n         namespace (if last-dot\n                     (symbol (subs sym-str 0 last-dot))\n                     (vars/current-ns-name))]\n     (resolve-record-or-protocol-class ctx namespace (symbol class-name))))\n  ([ctx package class]\n   (let [namespace (-> package str (str/replace \"_\" \"-\") symbol)]\n     (when-let [sci-var (get-in @(:env ctx) [:namespaces namespace class])]\n       (if (vars/var? sci-var)\n         @sci-var\n         sci-var)))))\n\n(defn resolve-record-class\n  [ctx class-sym]\n  (when-let [x (resolve-record-or-protocol-class ctx class-sym)]\n    (when (symbol? x) x)))\n","~:reader-features",["^Q",["~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings","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","names",["var_args","args__4777__auto__","len__4771__auto__","i__4772__auto__","argseq__4778__auto__","cljs.core/IndexedSeq","sci.impl.records/defrecord","seq86530","G__86531","cljs.core/first","cljs.core/next","G__86532","G__86533","G__86534","G__86535","self__4758__auto__","_","ctx","record-name","fields","protocol-impls","cljs.core.sequence","cljs.core/seq","cljs.core.concat","cljs.core/List","cljs.core/vec","cljs.core.apply","cljs.core/array-map","factory-fn-str","factory-fn-sym","cljs.core.symbol","map-factory-sym","keys","cljs.core.mapv","cljs.core/keyword","rec-type","sci.impl.vars/current-ns-name","sci.impl.utils/split-when","cljs.core/symbol?","field-set","cljs.core/set","cljs.core.mapcat","p__86548","vec__86549","seq__86550","first__86551","protocol-name","impls","p1__86472#","cljs.core/group-by","protocol","fexpr__86552","cljs.core/deref","sci.impl.utils/eval-resolve-state","sci.impl.vars/var?","protocol-ns","pns","sci.impl.vars/getName","fq-meth-name","cljs.core.map","p__86553","vec__86554","cljs.core.nth","method-name","bodies","cljs.core/rest","impl","args","body","destr","sci.impl.utils/maybe-destructured","orig-this-sym","this-sym","cljs.core.gensym","cljs.core/cons","bindings","field","cljs.core.keyword","cljs.core.reduce","cljs.core/disj","sci.impl.records/sci-record?","x","or__4160__auto__","cljs.core/map?","G__86588","cljs.core/meta","cljs.core/record?","G__86636","sci.impl.records/resolve-record-or-protocol-class","js/Error","sym","sym-str","last-dot","clojure.string.last_index_of","class-name","cljs.core.subs","namespace","sci.impl.records.resolve_record_or_protocol_class","package","class","clojure.string/replace","temp__5753__auto__","sci-var","cljs.core.get_in","sci.impl.records/resolve-record-class","class-sym","cljs.core/Symbol"]],"~:used-vars",["^Q",["~$sci.impl.records/sci-record?","~$sci.impl.records/defrecord","~$cljs.core/array-map","~$cljs.core/deref","~$cljs.core/seq","~$cljs.core/apply","~$cljs.core/concat","~$sci.impl.vars/var?","~$sci.impl.records/resolve-record-class","~$cljs.core/List","~$cljs.core/symbol","~$cljs.core/record?","~$cljs.core/vec","~$cljs.core/sequence","~$cljs.core/Symbol","~$sci.impl.records/resolve-record-or-protocol-class","~$js/Error"]]],"~:cache-keys",["~#cmap",[["^1D","goog/dom/tagname.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^Q",[]],"~:deps-syms",["^15","~$goog.dom.HtmlElement"]]],["^1D","goog/math/math.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^27",["^ ","^28",null,"^29",["^Q",[]],"^2:",["^15","~$goog.array","~$goog.asserts"]]],["^1D","goog/html/trustedtypes.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^27",["^ ","^28",null,"^29",["^Q",[]],"^2:",["^15"]]],["^1D","goog/labs/useragent/browser.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^27",["^ ","^28",null,"^29",["^Q",[]],"^2:",["^15","^2<","~$goog.labs.userAgent.util","~$goog.object","~$goog.string.internal"]]],["^1D","goog/html/safeurl.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^27",["^ ","^28",null,"^29",["^Q",[]],"^2:",["^15","^2=","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.i18n.bidi.Dir","~$goog.i18n.bidi.DirectionalString","~$goog.string.Const","~$goog.string.TypedString","^2@"]]],["^1D","goog/array/array.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^27",["^ ","^28",null,"^29",["^Q",[]],"^2:",["^15","^2="]]],["^1D","sci/impl/unrestrict.cljc"],["2134f95b4bd92083c89c364288fc3cbe36d565b6","^27",["^ ","^28",null,"^29",["^Q",[]],"^2:",["^15","^14"]]],["^1D","goog/debug/error.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^27",["^ ","^28",null,"^29",["^Q",[]],"^2:",["^15"]]],["^1D","goog/dom/nodetype.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^27",["^ ","^28",null,"^29",["^Q",[]],"^2:",["^15"]]],["^1D","goog/string/typedstring.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^27",["^ ","^28",null,"^29",["^Q",[]],"^2:",["^15"]]],["^1D","goog/object/object.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^27",["^ ","^28",null,"^29",["^Q",[]],"^2:",["^15"]]],["^1D","goog/dom/asserts.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^27",["^ ","^28",null,"^29",["^Q",[]],"^2:",["^15","^2="]]],["^1D","sci/impl/macros.cljc"],["2134f95b4bd92083c89c364288fc3cbe36d565b6","^27",["^ ","^28",null,"^29",["^Q",[]],"^2:",["^15","^14"]]],"~:SHADOW-TIMESTAMP",[1618720883000,1618720883000,1618720422000],["^1D","goog/math/long.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^27",["^ ","^28",null,"^29",["^Q",[]],"^2:",["^15","^2=","~$goog.reflect"]]],["^1D","goog/html/trustedresourceurl.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^27",["^ ","^28",null,"^29",["^Q",[]],"^2:",["^15","^2=","~$goog.fs.blob","^2A","~$goog.html.SafeScript","~$goog.html.trustedtypes","^2C","^2D","^2E","^2F"]]],["^1D","goog/string/internal.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^27",["^ ","^28",null,"^29",["^Q",[]],"^2:",["^15"]]],["^1D","goog/functions/functions.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^27",["^ ","^28",null,"^29",["^Q",[]],"^2:",["^15"]]],["^1D","goog/html/safestyle.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^27",["^ ","^28",null,"^29",["^Q",[]],"^2:",["^15","^2<","^2=","~$goog.html.SafeUrl","^2E","^2F","^2@"]]],["^1D","goog/dom/safe.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^27",["^ ","^28",null,"^29",["^Q",[]],"^2:",["^15","^2=","~$goog.dom.asserts","~$goog.functions","~$goog.html.SafeHtml","^2J","~$goog.html.SafeStyle","^2L","^2B","~$goog.html.uncheckedconversions","^2E","^2@"]]],["^1D","goog/structs/map.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^27",["^ ","^28",null,"^29",["^Q",[]],"^2:",["^15","~$goog.iter.Iterator","~$goog.iter.StopIteration"]]],["^1D","goog/html/safehtml.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^27",["^ ","^28",null,"^29",["^Q",[]],"^2:",["^15","^2<","^2=","~$goog.dom.TagName","~$goog.dom.tags","^2J","^2P","~$goog.html.SafeStyleSheet","^2L","^2B","^2K","^2C","^2D","~$goog.labs.userAgent.browser","^2?","^2E","^2F","^2@"]]],["^1D","sci/impl/types.cljc"],["2134f95b4bd92083c89c364288fc3cbe36d565b6","^27",["^ ","^28",null,"^29",["^Q",[]],"^2:",["^15","^14"]]],["^1D","goog/dom/tags.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^27",["^ ","^28",null,"^29",["^Q",[]],"^2:",["^15","^2?"]]],["^1D","goog/fs/blob.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^27",["^ ","^28",null,"^29",["^Q",[]],"^2:",["^15","^2<"]]],["^1D","goog/asserts/asserts.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^27",["^ ","^28",null,"^29",["^Q",[]],"^2:",["^15","~$goog.debug.Error","~$goog.dom.NodeType"]]],["^1D","sci/impl/vars.cljc"],["2134f95b4bd92083c89c364288fc3cbe36d565b6","^27",["^ ","^28",null,"^29",["^Q",[]],"^2:",["^15","^14","~$sci.impl.macros","~$sci.impl.types","~$sci.impl.unrestrict","~$sci.lang"]]],["^1D","goog/uri/uri.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^27",["^ ","^28",null,"^29",["^Q",[]],"^2:",["^15","^2<","^2=","~$goog.string","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^1D","goog/i18n/bidi.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^27",["^ ","^28",null,"^29",["^Q",[]],"^2:",["^15"]]],["^1D","goog/fs/url.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^27",["^ ","^28",null,"^29",["^Q",[]],"^2:",["^15"]]],["^1D","goog/base.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^27",["^ ","^28",null,"^29",["^Q",[]],"^2:",[]]],["^1D","goog/structs/structs.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^27",["^ ","^28",null,"^29",["^Q",[]],"^2:",["^15","^2<","^2?"]]],["^1D","clojure/string.cljs"],["86bedf67c795c72bde3feb0415b41be8b95f2cbb","^27",["^ ","^28",null,"^29",["^Q",[]],"^2:",["^15","^14","^32","~$goog.string.StringBuffer"]]],["^1D","goog/string/string.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^27",["^ ","^28",null,"^29",["^Q",[]],"^2:",["^15","~$goog.dom.safe","^2Q","^2E","^2@"]]],["^1D","goog/reflect/reflect.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^27",["^ ","^28",null,"^29",["^Q",[]],"^2:",["^15"]]],["^1D","goog/labs/useragent/util.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^27",["^ ","^28",null,"^29",["^Q",[]],"^2:",["^15","^2@"]]],["^1D","goog/string/stringbuffer.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^27",["^ ","^28",null,"^29",["^Q",[]],"^2:",["^15"]]],["^1D","goog/iter/iter.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^27",["^ ","^28",null,"^29",["^Q",[]],"^2:",["^15","^2<","^2=","^2N","~$goog.math"]]],["^1D","sci/impl/utils.cljc"],["2134f95b4bd92083c89c364288fc3cbe36d565b6","^27",["^ ","^28",null,"^29",["^Q",[]],"^2:",["^15","^14","^Z","^2[","^12"]]],["^1D","goog/html/uncheckedconversions.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^27",["^ ","^28",null,"^29",["^Q",[]],"^2:",["^15","^2=","^2O","^2J","^2P","^2V","^2L","^2B","^2E","^2@","^2C"]]],["^1D","sci/lang.cljc"],["2134f95b4bd92083c89c364288fc3cbe36d565b6","^27",["^ ","^28",null,"^29",["^Q",[]],"^2:",["^15","^14"]]],["^1D","goog/dom/htmlelement.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^27",["^ ","^28",null,"^29",["^Q",[]],"^2:",["^15"]]],["^1D","cljs/core.cljs"],["86bedf67c795c72bde3feb0415b41be8b95f2cbb","^27",["^ ","^28",null,"^29",["^Q",[]],"^2:",["^15","~$goog.math.Long","~$goog.math.Integer","^32","^2?","^2<","~$goog.Uri","^38"]]],["^1D","sci/impl/records.cljc"],["2134f95b4bd92083c89c364288fc3cbe36d565b6","^27",["^ ","^28",null,"^29",["^Q",[]],"^2:",["^15","^14","^Z","^10","^12"]]],["^1D","goog/html/safescript.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^27",["^ ","^28",null,"^29",["^Q",[]],"^2:",["^15","^2E","^2F","^2K","^2="]]],["^1D","goog/html/safestylesheet.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^27",["^ ","^28",null,"^29",["^Q",[]],"^2:",["^15","^2E","^2P","^2F","^2<","^2?","^2=","^2@"]]],["^1D","goog/math/integer.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^27",["^ ","^28",null,"^29",["^Q",[]],"^2:",["^15","^2H"]]],["^1D","goog/uri/utils.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^27",["^ ","^28",null,"^29",["^Q",[]],"^2:",["^15","^2=","^32"]]],["^1D","goog/string/const.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^27",["^ ","^28",null,"^29",["^Q",[]],"^2:",["^15","^2=","^2F"]]]]],"~:clj-info",["^ ","jar:file:/home/andreas/.m2/repository/org/clojure/clojurescript/1.10.844/clojurescript-1.10.844.jar!/cljs/env.cljc",1618720422000,"jar:file:/home/andreas/.m2/repository/org/clojure/clojurescript/1.10.844/clojurescript-1.10.844.jar!/cljs/externs.clj",1618720422000,"jar:file:/home/andreas/.m2/repository/org/clojure/clojurescript/1.10.844/clojurescript-1.10.844.jar!/cljs/tagged_literals.cljc",1618720422000,"jar:file:/home/andreas/.m2/repository/org/clojure/data.json/2.1.0/data.json-2.1.0.jar!/clojure/data/json.clj",1618502954000,"jar:file:/home/andreas/.m2/repository/org/clojure/clojurescript/1.10.844/clojurescript-1.10.844.jar!/cljs/compiler.cljc",1618720422000,"jar:file:/home/andreas/.m2/repository/org/clojure/clojurescript/1.10.844/clojurescript-1.10.844.jar!/cljs/instant.clj",1618720422000,"jar:file:/home/andreas/.m2/repository/org/clojure/clojurescript/1.10.844/clojurescript-1.10.844.jar!/cljs/source_map/base64_vlq.clj",1618720422000,"jar:file:/home/andreas/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/edn.clj",1618716228000,"jar:file:/home/andreas/.m2/repository/org/clojure/tools.reader/1.3.5/tools.reader-1.3.5.jar!/clojure/tools/reader/default_data_readers.clj",1618501370000,"jar:file:/home/andreas/.m2/repository/borkdude/sci/0.2.5/sci-0.2.5.jar!/sci/impl/types.cljc",1619741120000,"jar:file:/home/andreas/.m2/repository/org/clojure/clojurescript/1.10.844/clojurescript-1.10.844.jar!/cljs/analyzer.cljc",1618720422000,"jar:file:/home/andreas/.m2/repository/org/clojure/clojurescript/1.10.844/clojurescript-1.10.844.jar!/cljs/source_map.clj",1618720422000,"jar:file:/home/andreas/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/core.clj",1618716228000,"jar:file:/home/andreas/.m2/repository/org/clojure/tools.reader/1.3.5/tools.reader-1.3.5.jar!/clojure/tools/reader.clj",1618501370000,"jar:file:/home/andreas/.m2/repository/borkdude/sci/0.2.5/sci-0.2.5.jar!/sci/impl/macros.cljc",1619741120000,"jar:file:/home/andreas/.m2/repository/org/clojure/clojurescript/1.10.844/clojurescript-1.10.844.jar!/cljs/js_deps.cljc",1618720422000,"jar:file:/home/andreas/.m2/repository/org/clojure/clojurescript/1.10.844/clojurescript-1.10.844.jar!/cljs/core.cljc",1618720422000,"jar:file:/home/andreas/.m2/repository/org/clojure/tools.reader/1.3.5/tools.reader-1.3.5.jar!/clojure/tools/reader/impl/inspect.clj",1618501370000,"jar:file:/home/andreas/.m2/repository/org/clojure/tools.reader/1.3.5/tools.reader-1.3.5.jar!/clojure/tools/reader/reader_types.clj",1618501370000,"jar:file:/home/andreas/.m2/repository/binaryage/devtools/1.0.2/devtools-1.0.2.jar!/devtools/defaults.clj",1618720434000,"jar:file:/home/andreas/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/java/io.clj",1618716228000,"jar:file:/home/andreas/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/pprint.clj",1618716228000,"jar:file:/home/andreas/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/set.clj",1618716228000,"jar:file:/home/andreas/.m2/repository/org/clojure/clojurescript/1.10.844/clojurescript-1.10.844.jar!/cljs/analyzer/impl.cljc",1618720422000,"jar:file:/home/andreas/.m2/repository/org/clojure/tools.reader/1.3.5/tools.reader-1.3.5.jar!/clojure/tools/reader/impl/errors.clj",1618501370000,"jar:file:/home/andreas/.m2/repository/org/clojure/clojurescript/1.10.844/clojurescript-1.10.844.jar!/cljs/util.cljc",1618720422000,"jar:file:/home/andreas/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/string.clj",1618716228000,"jar:file:/home/andreas/.m2/repository/org/clojure/clojurescript/1.10.844/clojurescript-1.10.844.jar!/cljs/source_map/base64.clj",1618720422000,"jar:file:/home/andreas/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/instant.clj",1618716228000,"jar:file:/home/andreas/.m2/repository/borkdude/sci/0.2.5/sci-0.2.5.jar!/sci/impl/vars.cljc",1619741120000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6",true,"^7","sci/impl/records.cljc","^8",1,"^9",5,"^:",1,"^;",21],"^<",["^ ","^=","^>","^?","^@","^A","^B","^C","^D","^E","^F","^G","^H","^I","^J","^K","^L","^M","^N"],"^O",null,"^P",["^Q",["^R","^S"]],"^T","^U","^X",null,"^Y",["^ ","^Z","^Z","^[","^Z","^10","^10","^11","^10","^12","^12","^13","^12","^14","^14","^15","^15"],"^16",["^Q",["^17"]],"~:shadow/js-access-global",["^Q",["Error"]],"^18",null,"~:defs",["^ ","^S",["^ ","~:protocol-inline",null,"^5",["^ ","^7","sci/impl/records.cljc","^8",8,"^9",7,"^:",8,"^;",16,"~:arglists",["^1;",["~$quote",["^1;",[["~$_","~$_","~$ctx","~$record-name","~$fields","~$&","~$protocol-impls"]]]]],"~:top-fn",["^ ","~:variadic?",true,"~:fixed-arity",5,"~:max-fixed-arity",5,"~:method-params",[["^1;",["~$_","~$_","^47","^48","^49","^4:"]]],"^45",["^1;",[["~$_","~$_","^47","^48","^49","~$&","^4:"]]],"~:arglists-meta",["^1;",[null]]]],"^T","^1Q","^7","sci/impl/records.cljc","^;",16,"^4;",["^ ","^4<",true,"^4=",5,"^4>",5,"^4?",[["^1;",["~$_","~$_","^47","^48","^49","^4:"]]],"^45",["^1;",[["~$_","~$_","^47","^48","^49","~$&","^4:"]]],"^4@",["^1;",[null]]],"^4?",[["^1;",["~$_","~$_","^47","^48","^49","^4:"]]],"~:protocol-impl",null,"^4=",5,"^4@",["^1;",[null]],"^9",1,"^4<",true,"~:methods",[["^ ","^4=",5,"^4<",true,"~:tag",["^Q",["~$seq","~$cljs.core/IList"]]]],"^8",8,"~:ret-tag","~$any","^:",8,"^4>",5,"~:fn-var",true,"^45",["^1;",[["~$_","~$_","^47","^48","^49","~$&","^4:"]]]],"~$sci-record?",["^ ","^44",null,"^5",["^ ","^7","sci/impl/records.cljc","^8",64,"^9",7,"^:",64,"^;",18,"^45",["^1;",["^46",["^1;",[["~$x"]]]]]],"^T","^1P","^7","sci/impl/records.cljc","^;",18,"^4?",["^1;",[["~$x"]]],"^4A",null,"^4@",["^1;",[null,null]],"^9",1,"^4<",false,"^8",64,"^4F",["^Q",["~$boolean","^4G"]],"^:",64,"^4>",1,"^4H",true,"^45",["^1;",["^46",["^1;",[["~$x"]]]]]],"~$resolve-record-or-protocol-class",["^ ","^44",null,"^5",["^ ","^7","sci/impl/records.cljc","^8",70,"^9",7,"^:",70,"^;",39,"^45",["^1;",["^46",["^1;",[["^47","~$sym"],["^47","~$package","~$class"]]]]],"~:doc","A record class is represented by a symbol with metadata (currently). This is only an implementation detail.\n   A protocol is represented by a map with :ns, :methods and optionally :class. This is also an implementation detail.","^4;",["^ ","^4<",false,"^4=",3,"^4>",3,"^4?",[["^47","^4L"],["^47","^4M","^4N"]],"^45",["^1;",[["^47","^4L"],["^47","^4M","^4N"]]],"^4@",["^1;",[null,null]]]],"^T","^23","^7","sci/impl/records.cljc","^;",39,"^4;",["^ ","^4<",false,"^4=",3,"^4>",3,"^4?",[["^47","^4L"],["^47","^4M","^4N"]],"^45",["^1;",[["^47","^4L"],["^47","^4M","^4N"]]],"^4@",["^1;",[null,null]]],"^4?",[["^47","^4L"],["^47","^4M","^4N"]],"^4A",null,"^4=",3,"^4@",["^1;",[null,null]],"^9",1,"^4<",false,"^4B",[["^ ","^4=",2,"^4<",false,"^4C","^4G"],["^ ","^4=",3,"^4<",false,"^4C",["^Q",[null,"^4G","~$clj-nil"]]]],"^8",70,"^:",70,"^4>",3,"^4H",true,"^45",["^1;",[["^47","^4L"],["^47","^4M","^4N"]]],"^4O","A record class is represented by a symbol with metadata (currently). This is only an implementation detail.\n   A protocol is represented by a map with :ns, :methods and optionally :class. This is also an implementation detail."],"~$resolve-record-class",["^ ","^44",null,"^5",["^ ","^7","sci/impl/records.cljc","^8",91,"^9",7,"^:",91,"^;",27,"^45",["^1;",["^46",["^1;",[["^47","~$class-sym"]]]]]],"^T","^1X","^7","sci/impl/records.cljc","^;",27,"^4?",["^1;",[["^47","^4R"]]],"^4A",null,"^4@",["^1;",[null,null]],"^9",1,"^4<",false,"^8",91,"^4F",["^Q",["^22","^4P"]],"^:",91,"^4>",2,"^4H",true,"^45",["^1;",["^46",["^1;",[["^47","^4R"]]]]]]],"^19",["^ ","^14","^14","^12","^12","^13","^12"],"~:cljs.analyzer/constants",["^ ","^16",["^Q",["~$&","~:sci.impl/record","~:namespaces","^W","~$args__86528__auto__","~$cljs.core/defn","~:params","~:type","~$do","~:env","~$cljs.core/vary-meta","~$cljs.core/zipmap","~$cljs.core/with-meta","~:sci.impl.record/constructor","~$cljs.core/let","~$m__86474__auto__","~$cljs.core/defmethod","~$cljs.core/assoc","^46","~:body","~$def"]],"~:order",["^W","^4X","^58","^54","^56","^46","^4Z","^4W","^55","^50","^57","^4T","^4Y","~$&","^4V","^51","^59","^52","^53","^4[","^4U"]],"^1@",["^ ","^17",["^Q",[]]],"^1A",["^ "],"^1B",["^15","^14","^Z","^10","^12"]],"^W","^U","~:ns-specs",["^ "],"~:ns-spec-vars",["^Q",[]],"~:compiler-options",["^26",[["^5=","~:static-fns"],true,["^5=","~:shadow-tweaks"],null,["^5=","~:source-map-inline"],null,["^5=","~:elide-asserts"],false,["^5=","~:optimize-constants"],null,["^5=","^1G"],null,["^5=","~:external-config"],null,["^5=","~:tooling-config"],null,["^5=","~:emit-constants"],null,["^5=","~:load-tests"],null,["^5=","~:form-size-threshold"],null,["^5=","~:data-readers"],null,["^5=","~:infer-externs"],"~:auto",["^5=","^1I"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^5=","~:fn-invoke-direct"],null,["^5=","~:source-map"],"/dev/null"]]]