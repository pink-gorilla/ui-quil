["^ ","~:output",["^ ","~:js","goog.provide('sci.core');\n/**\n * Returns a new sci var.\n */\nsci.core.new_var = (function sci$core$new_var(var_args){\nvar G__102341 = arguments.length;\nswitch (G__102341) {\ncase 1:\nreturn sci.core.new_var.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn sci.core.new_var.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 3:\nreturn sci.core.new_var.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(sci.core.new_var.cljs$core$IFn$_invoke$arity$1 = (function (name){\nvar G__102342 = sci.core.new_var.cljs$core$IFn$_invoke$arity$3(name,null,null);\nsci.impl.vars.unbind(G__102342);\n\nreturn G__102342;\n}));\n\n(sci.core.new_var.cljs$core$IFn$_invoke$arity$2 = (function (name,init_val){\nreturn sci.core.new_var.cljs$core$IFn$_invoke$arity$3(name,init_val,cljs.core.meta(name));\n}));\n\n(sci.core.new_var.cljs$core$IFn$_invoke$arity$3 = (function (name,init_val,meta){\nreturn (new sci.impl.vars.SciVar(init_val,name,meta,false));\n}));\n\n(sci.core.new_var.cljs$lang$maxFixedArity = 3);\n\n/**\n * Same as new-var but adds :dynamic true to meta.\n */\nsci.core.new_dynamic_var = (function sci$core$new_dynamic_var(var_args){\nvar G__102350 = arguments.length;\nswitch (G__102350) {\ncase 1:\nreturn sci.core.new_dynamic_var.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn sci.core.new_dynamic_var.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 3:\nreturn sci.core.new_dynamic_var.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(sci.core.new_dynamic_var.cljs$core$IFn$_invoke$arity$1 = (function (name){\nvar G__102352 = sci.core.new_dynamic_var.cljs$core$IFn$_invoke$arity$3(name,null,null);\nsci.impl.vars.unbind(G__102352);\n\nreturn G__102352;\n}));\n\n(sci.core.new_dynamic_var.cljs$core$IFn$_invoke$arity$2 = (function (name,init_val){\nreturn sci.core.new_dynamic_var.cljs$core$IFn$_invoke$arity$3(name,init_val,cljs.core.meta(name));\n}));\n\n(sci.core.new_dynamic_var.cljs$core$IFn$_invoke$arity$3 = (function (name,init_val,meta){\nreturn (new sci.impl.vars.SciVar(init_val,name,cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(meta,new cljs.core.Keyword(null,\"dynamic\",\"dynamic\",704819571),true),false));\n}));\n\n(sci.core.new_dynamic_var.cljs$lang$maxFixedArity = 3);\n\n/**\n * Establish thread local binding of dynamic var\n */\nsci.core.set_BANG_ = (function sci$core$set_BANG_(dynamic_var,v){\nreturn sci.impl.types.setVal(dynamic_var,v);\n});\n/**\n * Same as new-var but adds :macro true to meta as well\n *   as :sci/macro true to meta of the fn itself.\n */\nsci.core.new_macro_var = (function sci$core$new_macro_var(var_args){\nvar G__102361 = arguments.length;\nswitch (G__102361) {\ncase 2:\nreturn sci.core.new_macro_var.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 3:\nreturn sci.core.new_macro_var.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(sci.core.new_macro_var.cljs$core$IFn$_invoke$arity$2 = (function (name,init_val){\nreturn sci.core.new_macro_var.cljs$core$IFn$_invoke$arity$3(name,init_val,cljs.core.meta(name));\n}));\n\n(sci.core.new_macro_var.cljs$core$IFn$_invoke$arity$3 = (function (name,init_val,meta){\nreturn (new sci.impl.vars.SciVar(cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$4(init_val,cljs.core.assoc,new cljs.core.Keyword(\"sci\",\"macro\",\"sci/macro\",-868536151),true),name,cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(meta,new cljs.core.Keyword(null,\"macro\",\"macro\",-867863404),true),false));\n}));\n\n(sci.core.new_macro_var.cljs$lang$maxFixedArity = 3);\n\n/**\n * Sci var that represents sci's `clojure.core/*in*`\n */\nsci.core.in$ = sci.impl.io.in$;\n/**\n * Sci var that represents sci's `clojure.core/*out*`\n */\nsci.core.out = sci.impl.io.out;\n/**\n * Sci var that represents sci's `clojure.core/*err*`\n */\nsci.core.err = sci.impl.io.err;\n/**\n * Sci var that represents sci's `clojure.core/*ns*`\n */\nsci.core.ns = sci.impl.vars.current_ns;\n/**\n * Sci var that represents sci's `clojure.core/*file*`\n */\nsci.core.file = sci.impl.vars.current_file;\n/**\n * Sci var that represents sci's `clojure.core/*print-length*`\n */\nsci.core.print_length = sci.impl.io.print_length;\n/**\n * Sci var that represents sci's `clojure.core/*print-level*`\n */\nsci.core.print_level = sci.impl.io.print_level;\n/**\n * Sci var that represents sci's `clojure.core/*print-meta*`\n */\nsci.core.print_meta = sci.impl.io.print_meta;\nsci.core._STAR_1 = sci.impl.namespaces._STAR_1;\nsci.core._STAR_2 = sci.impl.namespaces._STAR_2;\nsci.core._STAR_3 = sci.impl.namespaces._STAR_3;\nsci.core._STAR_e = sci.impl.namespaces._STAR_e;\n/**\n * Atomically alters the root binding of sci var v by applying f to its\n *   current value plus any args.\n */\nsci.core.alter_var_root = (function sci$core$alter_var_root(var_args){\nvar args__4777__auto__ = [];\nvar len__4771__auto___102429 = arguments.length;\nvar i__4772__auto___102430 = (0);\nwhile(true){\nif((i__4772__auto___102430 < len__4771__auto___102429)){\nargs__4777__auto__.push((arguments[i__4772__auto___102430]));\n\nvar G__102431 = (i__4772__auto___102430 + (1));\ni__4772__auto___102430 = G__102431;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4778__auto__ = ((((2) < args__4777__auto__.length))?(new cljs.core.IndexedSeq(args__4777__auto__.slice((2)),(0),null)):null);\nreturn sci.core.alter_var_root.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),argseq__4778__auto__);\n});\n\n(sci.core.alter_var_root.cljs$core$IFn$_invoke$arity$variadic = (function (v,f,args){\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$4(sci.impl.vars.alter_var_root,v,f,args);\n}));\n\n(sci.core.alter_var_root.cljs$lang$maxFixedArity = (2));\n\n/** @this {Function} */\n(sci.core.alter_var_root.cljs$lang$applyTo = (function (seq102383){\nvar G__102384 = cljs.core.first(seq102383);\nvar seq102383__$1 = cljs.core.next(seq102383);\nvar G__102385 = cljs.core.first(seq102383__$1);\nvar seq102383__$2 = cljs.core.next(seq102383__$1);\nvar self__4758__auto__ = this;\nreturn self__4758__auto__.cljs$core$IFn$_invoke$arity$variadic(G__102384,G__102385,seq102383__$2);\n}));\n\n/**\n * Evaluates string `s` as one or multiple Clojure expressions using the Small Clojure Interpreter.\n * \n *   The map `opts` may contain the following:\n * \n *   - `:namespaces`: a map of symbols to namespaces, where a namespace\n *   is a map with symbols to values, e.g.: `{'foo.bar {'x 1}}`. These\n *   namespaces can be used with `require`.\n * \n *   - `:bindings`: `:bindings x` is the same as `:namespaces {'user x}`.\n * \n *   - `:allow`: a seqable of allowed symbols. All symbols, even those\n *   brought in via `:bindings` or `:namespaces` have to be explicitly\n *   enumerated.\n * \n *   - `:deny`: a seqable of disallowed symbols, e.g.: `[loop quote\n *   recur]`.\n * \n *   - `:features`: when provided a non-empty set of keywords, sci will process reader conditionals using these features (e.g. #{:bb}).\n * \n *   - `:env`: an atom with a map in which state from the\n *   evaluation (defined namespaced and vars) will be persisted for\n *   re-use over multiple calls.\n * \n *   - `:disable-arity-checks`: disables arity checks for single-arity\n *   functions.\n */\nsci.core.eval_string = (function sci$core$eval_string(var_args){\nvar G__102393 = arguments.length;\nswitch (G__102393) {\ncase 1:\nreturn sci.core.eval_string.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn sci.core.eval_string.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(sci.core.eval_string.cljs$core$IFn$_invoke$arity$1 = (function (s){\nreturn sci.core.eval_string.cljs$core$IFn$_invoke$arity$2(s,null);\n}));\n\n(sci.core.eval_string.cljs$core$IFn$_invoke$arity$2 = (function (s,opts){\nreturn sci.impl.interpreter.eval_string.cljs$core$IFn$_invoke$arity$2(s,opts);\n}));\n\n(sci.core.eval_string.cljs$lang$maxFixedArity = 2);\n\n/**\n * Creates an initial sci context from given options `opts`. The context\n *   can be used with `eval-string*`. See `eval-string` for available\n *   options. The internal organization of the context is implementation\n *   detail and may change in the future.\n */\nsci.core.init = (function sci$core$init(opts){\nreturn sci.impl.opts.init(opts);\n});\n/**\n * Updates a context with opts merged in and returns it.\n */\nsci.core.merge_opts = (function sci$core$merge_opts(ctx,opts){\nreturn sci.impl.opts.merge_opts(ctx,opts);\n});\n/**\n * Forks a context (as produced with `init`) into a new context. Any new\n *   vars created in the new context won't be visible in the original\n *   context.\n */\nsci.core.fork = (function sci$core$fork(ctx){\nreturn cljs.core.update.cljs$core$IFn$_invoke$arity$3(ctx,new cljs.core.Keyword(null,\"env\",\"env\",-1815813235),(function (env){\nreturn cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.deref(env));\n}));\n});\n/**\n * Evaluates string `s` in the context of `ctx` (as produced with\n *   `init`).\n */\nsci.core.eval_string_STAR_ = (function sci$core$eval_string_STAR_(ctx,s){\nreturn sci.impl.interpreter.eval_string_STAR_(ctx,s);\n});\n/**\n * Creates namespace object. Can be used in var metadata.\n */\nsci.core.create_ns = (function sci$core$create_ns(var_args){\nvar G__102401 = arguments.length;\nswitch (G__102401) {\ncase 1:\nreturn sci.core.create_ns.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn sci.core.create_ns.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(sci.core.create_ns.cljs$core$IFn$_invoke$arity$1 = (function (sym){\nreturn sci.core.create_ns.cljs$core$IFn$_invoke$arity$2(sym,null);\n}));\n\n(sci.core.create_ns.cljs$core$IFn$_invoke$arity$2 = (function (sym,meta){\nreturn sci.impl.vars.__GT_SciNamespace(sym,meta);\n}));\n\n(sci.core.create_ns.cljs$lang$maxFixedArity = 2);\n\n/**\n * Parses string `s` in the context of `ctx` (as produced with\n *   `init`).\n */\nsci.core.parse_string = (function sci$core$parse_string(ctx,s){\nreturn sci.impl.parser.parse_string(ctx,s);\n});\n/**\n * Coerces x into indexing pushback-reader to be used with\n *   parse-next. Accepts: string or java.io.Reader.\n */\nsci.core.reader = (function sci$core$reader(x){\nreturn sci.impl.parser.reader(x);\n});\nsci.core.get_line_number = (function sci$core$get_line_number(reader){\nreturn sci.impl.parser.get_line_number(reader);\n});\nsci.core.get_column_number = (function sci$core$get_column_number(reader){\nreturn sci.impl.parser.get_column_number(reader);\n});\n/**\n * Parses next form from reader\n */\nsci.core.parse_next = (function sci$core$parse_next(var_args){\nvar G__102404 = arguments.length;\nswitch (G__102404) {\ncase 2:\nreturn sci.core.parse_next.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 3:\nreturn sci.core.parse_next.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(sci.core.parse_next.cljs$core$IFn$_invoke$arity$2 = (function (ctx,reader){\nreturn sci.core.parse_next.cljs$core$IFn$_invoke$arity$3(ctx,reader,cljs.core.PersistentArrayMap.EMPTY);\n}));\n\n(sci.core.parse_next.cljs$core$IFn$_invoke$arity$3 = (function (ctx,reader,opts){\nvar v = sci.impl.parser.parse_next.cljs$core$IFn$_invoke$arity$3(ctx,reader,opts);\nif(cljs.core.truth_((sci.impl.utils.kw_identical_QMARK_.cljs$core$IFn$_invoke$arity$2 ? sci.impl.utils.kw_identical_QMARK_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(\"sci.impl.parser.edamame\",\"eof\",\"sci.impl.parser.edamame/eof\",-917261517),v) : sci.impl.utils.kw_identical_QMARK_.call(null,new cljs.core.Keyword(\"sci.impl.parser.edamame\",\"eof\",\"sci.impl.parser.edamame/eof\",-917261517),v)))){\nvar or__4160__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(opts,new cljs.core.Keyword(null,\"eof\",\"eof\",-489063237));\nif(cljs.core.truth_(or__4160__auto__)){\nreturn or__4160__auto__;\n} else {\nreturn new cljs.core.Keyword(\"sci.core\",\"eof\",\"sci.core/eof\",-808584945);\n}\n} else {\nreturn v;\n}\n}));\n\n(sci.core.parse_next.cljs$lang$maxFixedArity = 3);\n\n/**\n * Evaluates form (as produced by `parse-string` or `parse-next`) in the\n *   context of `ctx` (as produced with `init`). To allow namespace\n *   switches, establish root binding of `sci/ns` with `sci/binding` or\n *   `sci/with-bindings.`\n */\nsci.core.eval_form = (function sci$core$eval_form(ctx,form){\nvar ctx__$1 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(ctx,new cljs.core.Keyword(null,\"id\",\"id\",-1388402092),(function (){var or__4160__auto__ = new cljs.core.Keyword(null,\"id\",\"id\",-1388402092).cljs$core$IFn$_invoke$arity$1(ctx);\nif(cljs.core.truth_(or__4160__auto__)){\nreturn or__4160__auto__;\n} else {\nreturn cljs.core.gensym.cljs$core$IFn$_invoke$arity$0();\n}\n})());\nreturn sci.impl.interpreter.eval_form(ctx__$1,form);\n});\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","sci/core.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",13],"~:ns-aliases",["^ ","~$clojure.spec.alpha","~$cljs.spec.alpha","~$cljs.loader","~$shadow.loader","~$highlight.js","~$module$node_modules$highlight_DOT_js$lib$index","~$react","~$module$node_modules$react$index","~$clojure.tools.reader.reader-types","~$cljs.tools.reader.reader-types","~$clojure.pprint","~$cljs.pprint","~$react-dom","~$module$node_modules$react_dom$index","~$clojure.repl","~$cljs.repl","~$webly.user.tenx.events","~$webly.user.tenx.events-on"],"~:use-macros",["^ ","~$with-bindings","~$sci.core","~$with-out-str","^P","~$copy-var","^P"],"~:excludes",["~#set",["^O","~$*2","~$pmap","~$alter-var-root","~$future","~$*1","~$create-ns","~$ns","~$*e","^Q","~$with-in-str","~$binding","~$set!","~$*3","~$with-redefs"]],"~:macros",["^ ","^O",["^ ","~:arglists",["~#list",[["~$bindings-map","~$&","~$body"]]],"~:doc","Macro for binding sci vars. Must be called with map of sci dynamic\n  vars to values. Used in babashka.","^7",70,"^8",3,"^6","sci/core.cljc","~:name","~$sci.core/with-bindings","~:ns","^P","~:macro",true],"^R",["^ ","^17",["^18",[["~$sym","^["]]],"^1;","Copies contents from var `sym` to a new sci var. The value `ns` is an\n  object created with `sci.core/create-ns`.","^7",48,"^8",1,"^6","sci/core.cljc","^1<","~$sci.core/copy-var","^1>","^P","^1?",true],"^X",["^ ","^17",["^18",[["~$&","^1:"]]],"^1;","Like clojure.core/future but also conveys sci bindings to the thread.","^7",129,"^8",3,"^6","sci/core.cljc","^1<","~$sci.core/future","^1>","^P","^1?",true],"^Q",["^ ","^17",["^18",[["~$&","^1:"]]],"^1;","Evaluates exprs in a context in which sci's *out* is bound to a fresh\n  StringWriter.  Returns the string created by any nested printing\n  calls.","^7",117,"^8",3,"^6","sci/core.cljc","^1<","~$sci.core/with-out-str","^1>","^P","^1?",true],"^11",["^ ","^17",["^18",[["~$s","~$&","^1:"]]],"^1;","Evaluates body in a context in which sci's *in* is bound to a fresh\n  StringReader initialized with the string s.","^7",107,"^8",3,"^6","sci/core.cljc","^1<","~$sci.core/with-in-str","^1>","^P","^1?",true],"^12",["^ ","^17",["^18",[["~$bindings","~$&","^1:"]]],"^1;","Macro for binding sci vars. Must be called with a vector of sci\n  dynamic vars to values.","^7",81,"^8",3,"^6","sci/core.cljc","^1<","~$sci.core/binding","^1>","^P","^1?",true]],"^1<","^P","~:op","^1>","~:imports",null,"~:requires",["^ ","~$sci.impl.opts","^1J","~$t","~$sci.impl.types","~$sci.impl.macros","^1L","^1K","^1K","~$i","~$sci.impl.interpreter","~$vars","~$sci.impl.vars","~$sci.impl.parser","^1P","~$cljs.core","^1Q","~$namespaces","~$sci.impl.namespaces","~$goog","^1T","~$macros","^1L","^1M","^1M","~$sci.impl.io","^1V","^1O","^1O","~$sci.impl.utils","^1W","~$sio","^1V","~$parser","^1P","~$utils","^1W","^1S","^1S","~$opts","^1J"],"~:seen",["^T",["~:require","~:require-macros"]],"~:uses",null,"^22",["^ ","^P","^P","^1Q","^1Q","^1L","^1L","^1N","^1O","^1R","^1S","^1U","^1L","^1O","^1O","^1S","^1S"],"~:form",["^18",["^[","^P",["^18",["~:refer-clojure","~:exclude",["^O","^11","^Q","^15","^12","^X","^V","^W","^[","^Z","^13","^Y","^U","^14","^10"]]],["^18",["^21",["^1M","~:as","~$i"],["^1V","^27","^1X"],["^1L","^27","^1U"],["^1S","^27","^1R"],["^1J","^27","^1["],["^1P","^27","^1Y"],["^1K","^27","~$t"],["^1W","^27","^1Z"],["^1O","^27","^1N"]]],["^18",["^22",["^P","~:refer",["^O","^Q","^R"]]]]]],"~:flags",["^ ","^21",["^T",[]],"^22",["^T",[]]],"~:js-deps",["^ "],"~:deps",["^1T","^1Q","^1M","^1V","^1L","^1S","^1J","^1P","^1K","^1W","^1O"]],"^1>","^P","~:resource-id",["~:shadow.build.classpath/resource","sci/core.cljc"],"~:compiled-at",1621210466442,"~:resource-name","sci/core.cljc","~:warnings",[],"~:source","(ns sci.core\n  (:refer-clojure :exclude [with-bindings with-in-str with-out-str\n                            with-redefs binding future pmap alter-var-root\n                            ns create-ns set! *1 *2 *3 *e])\n  (:require\n   [sci.impl.interpreter :as i]\n   [sci.impl.io :as sio]\n   [sci.impl.macros :as macros]\n   [sci.impl.namespaces :as namespaces]\n   [sci.impl.opts :as opts]\n   [sci.impl.parser :as parser]\n   [sci.impl.types :as t]\n   [sci.impl.utils :as utils]\n   [sci.impl.vars :as vars])\n  #?(:cljs (:require-macros\n            [sci.core :refer [with-bindings with-out-str copy-var]])))\n\n#?(:clj (set! *warn-on-reflection* true))\n\n(defn new-var\n  \"Returns a new sci var.\"\n  ([name] (doto (new-var name nil nil)\n            (vars/unbind)))\n  ([name init-val] (new-var name init-val (meta name)))\n  ([name init-val meta] (sci.impl.vars.SciVar. init-val name meta false)))\n\n(defn new-dynamic-var\n  \"Same as new-var but adds :dynamic true to meta.\"\n  ([name] (doto (new-dynamic-var name nil nil)\n            (vars/unbind)))\n  ([name init-val] (new-dynamic-var name init-val (meta name)))\n  ([name init-val meta] (sci.impl.vars.SciVar. init-val name (assoc meta :dynamic true) false)))\n\n(defn set!\n  \"Establish thread local binding of dynamic var\"\n  [dynamic-var v]\n  (t/setVal dynamic-var v))\n\n(defn new-macro-var\n  \"Same as new-var but adds :macro true to meta as well\n  as :sci/macro true to meta of the fn itself.\"\n  ([name init-val] (new-macro-var name init-val (meta name)))\n  ([name init-val meta] (sci.impl.vars.SciVar.\n                         (vary-meta init-val\n                                    assoc :sci/macro true)\n                         name (assoc meta :macro true) false)))\n\n(defmacro copy-var\n  \"Copies contents from var `sym` to a new sci var. The value `ns` is an\n  object created with `sci.core/create-ns`.\"\n  ([sym ns]\n   `(let [ns# ~ns\n          var# (var ~sym)\n          val# (deref var#)\n          m# (-> var# meta)\n          ns-name# (vars/getName ns#)\n          name# (:name m#)\n          name-sym# (symbol (str ns-name#) (str name#))\n          new-m# {:doc (:doc m#)\n                  :name name#\n                  :arglists (:arglists m#)\n                  :ns ns#}]\n      (cond (:dynamic m#)\n            (new-dynamic-var name# val# new-m#)\n            (:macro m#)\n            (new-macro-var name# val# new-m#)\n            :else (new-var name# val# new-m#)))))\n\n(macros/deftime\n  (defmacro with-bindings\n    \"Macro for binding sci vars. Must be called with map of sci dynamic\n  vars to values. Used in babashka.\"\n    [bindings-map & body]\n    `(let [bm# ~bindings-map]\n       (assert (map? bm#))\n       (vars/push-thread-bindings bm#) ;; important: outside try\n       (try\n         (do ~@body)\n         (finally (vars/pop-thread-bindings)))))\n\n  (defmacro binding\n    \"Macro for binding sci vars. Must be called with a vector of sci\n  dynamic vars to values.\"\n    [bindings & body]\n    (assert (vector? bindings))\n    (assert (even? (count bindings)))\n    `(with-bindings ~(apply hash-map bindings)\n       (do ~@body))))\n\n(def in \"Sci var that represents sci's `clojure.core/*in*`\" sio/in)\n(def out \"Sci var that represents sci's `clojure.core/*out*`\" sio/out)\n(def err \"Sci var that represents sci's `clojure.core/*err*`\" sio/err)\n(def ns \"Sci var that represents sci's `clojure.core/*ns*`\" vars/current-ns)\n(def file \"Sci var that represents sci's `clojure.core/*file*`\" vars/current-file)\n(def print-length \"Sci var that represents sci's `clojure.core/*print-length*`\" sio/print-length)\n(def print-level \"Sci var that represents sci's `clojure.core/*print-level*`\" sio/print-level)\n(def print-meta \"Sci var that represents sci's `clojure.core/*print-meta*`\" sio/print-meta)\n(def *1 namespaces/*1)\n(def *2 namespaces/*2)\n(def *3 namespaces/*3)\n(def *e namespaces/*e)\n\n;; REPL variables\n\n\n(macros/deftime\n  (defmacro with-in-str\n    \"Evaluates body in a context in which sci's *in* is bound to a fresh\n  StringReader initialized with the string s.\"\n    [s & body]\n    `(let [in# (-> (java.io.StringReader. ~s)\n                   (clojure.lang.LineNumberingPushbackReader.))]\n       (with-bindings {in in#}\n         (do ~@body)))))\n\n(macros/deftime\n  (defmacro with-out-str\n    \"Evaluates exprs in a context in which sci's *out* is bound to a fresh\n  StringWriter.  Returns the string created by any nested printing\n  calls.\"\n    [& body]\n    `(let [out# (macros/? :clj (java.io.StringWriter.)\n                          :cljs (goog.string/StringBuffer.))]\n       (with-bindings {out out#}\n         (do ~@body)\n         (str out#)))))\n\n(macros/deftime\n  (defmacro future\n    \"Like clojure.core/future but also conveys sci bindings to the thread.\"\n    [& body]\n    `(let [f# (-> (fn [] ~@body)\n                  (vars/binding-conveyor-fn))]\n       (future-call f#))))\n\n#?(:clj (defn pmap\n          \"Like clojure.core/pmap but also conveys sci bindings to the threads.\"\n          ([f coll]\n           (let [n (+ 2 (.. Runtime getRuntime availableProcessors))\n                 rets (map #(future (f %)) coll)\n                 step (fn step [[x & xs :as vs] fs]\n                        (lazy-seq\n                         (if-let [s (seq fs)]\n                           (cons (deref x) (step xs (rest s)))\n                           (map deref vs))))]\n             (step rets (drop n rets))))\n          ([f coll & colls]\n           (let [step (fn step [cs]\n                        (lazy-seq\n                         (let [ss (map seq cs)]\n                           (when (every? identity ss)\n                             (cons (map first ss) (step (map rest ss)))))))]\n             (pmap #(apply f %) (step (cons coll colls)))))))\n\n(defn alter-var-root\n  \"Atomically alters the root binding of sci var v by applying f to its\n  current value plus any args.\"\n  [v f & args]\n  (apply vars/alter-var-root v f args))\n\n(defn eval-string\n  \"Evaluates string `s` as one or multiple Clojure expressions using the Small Clojure Interpreter.\n\n  The map `opts` may contain the following:\n\n  - `:namespaces`: a map of symbols to namespaces, where a namespace\n  is a map with symbols to values, e.g.: `{'foo.bar {'x 1}}`. These\n  namespaces can be used with `require`.\n\n  - `:bindings`: `:bindings x` is the same as `:namespaces {'user x}`.\n\n  - `:allow`: a seqable of allowed symbols. All symbols, even those\n  brought in via `:bindings` or `:namespaces` have to be explicitly\n  enumerated.\n\n  - `:deny`: a seqable of disallowed symbols, e.g.: `[loop quote\n  recur]`.\n\n  - `:features`: when provided a non-empty set of keywords, sci will process reader conditionals using these features (e.g. #{:bb}).\n\n  - `:env`: an atom with a map in which state from the\n  evaluation (defined namespaced and vars) will be persisted for\n  re-use over multiple calls.\n\n  - `:disable-arity-checks`: disables arity checks for single-arity\n  functions.\"\n  ([s] (eval-string s nil))\n  ([s opts]\n   (i/eval-string s opts)))\n\n(defn init\n  \"Creates an initial sci context from given options `opts`. The context\n  can be used with `eval-string*`. See `eval-string` for available\n  options. The internal organization of the context is implementation\n  detail and may change in the future.\"\n  [opts]\n  (opts/init opts))\n\n(defn merge-opts\n  \"Updates a context with opts merged in and returns it.\"\n  [ctx opts]\n  (opts/merge-opts ctx opts))\n\n(defn fork\n  \"Forks a context (as produced with `init`) into a new context. Any new\n  vars created in the new context won't be visible in the original\n  context.\"\n  [ctx]\n  (update ctx :env (fn [env] (atom @env))))\n\n(defn eval-string*\n  \"Evaluates string `s` in the context of `ctx` (as produced with\n  `init`).\"\n  [ctx s]\n  (sci.impl.interpreter/eval-string* ctx s))\n\n(defn create-ns\n  \"Creates namespace object. Can be used in var metadata.\"\n  ([sym] (create-ns sym nil))\n  ([sym meta]\n   (vars/->SciNamespace sym meta)))\n\n(defn parse-string\n  \"Parses string `s` in the context of `ctx` (as produced with\n  `init`).\"\n  ([ctx s]\n   (parser/parse-string ctx s)))\n\n(defn reader\n  \"Coerces x into indexing pushback-reader to be used with\n  parse-next. Accepts: string or java.io.Reader.\"\n  [x]\n  (parser/reader x))\n\n(defn get-line-number [reader]\n  (parser/get-line-number reader))\n\n(defn get-column-number [reader]\n  (parser/get-column-number reader))\n\n(defn parse-next\n  \"Parses next form from reader\"\n  ([ctx reader] (parse-next ctx reader {}))\n  ([ctx reader opts]\n   (let [v (parser/parse-next ctx reader opts)]\n     (if (utils/kw-identical? parser/eof v)\n       (or (get opts :eof)\n           ::eof)\n       v))))\n\n(defn eval-form\n  \"Evaluates form (as produced by `parse-string` or `parse-next`) in the\n  context of `ctx` (as produced with `init`). To allow namespace\n  switches, establish root binding of `sci/ns` with `sci/binding` or\n  `sci/with-bindings.`\"\n  [ctx form]\n  (let [ctx (assoc ctx :id (or (:id ctx) (gensym)))]\n    (i/eval-form ctx form)))\n\n;;;; Scratch\n\n(comment\n  (eval-string \"(inc x)\" {:bindings {'x 2}})\n  )\n","~:reader-features",["^T",["~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings","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","names",["var_args","G__102341","sci.core/new-var","js/Error","name","G__102342","sci.core.new_var","sci.impl.vars/unbind","init-val","cljs.core/meta","meta","sci.impl.vars/SciVar","G__102350","sci.core/new-dynamic-var","G__102352","sci.core.new_dynamic_var","cljs.core.assoc","sci.core/set!","dynamic-var","v","sci.impl.types/setVal","G__102361","sci.core/new-macro-var","sci.core.new_macro_var","cljs.core.vary_meta","cljs.core/assoc","sci.core/in","sci.impl.io/in","sci.core/out","sci.impl.io/out","sci.core/err","sci.impl.io/err","sci.core/ns","sci.impl.vars/current-ns","sci.core/file","sci.impl.vars/current-file","sci.core/print-length","sci.impl.io/print-length","sci.core/print-level","sci.impl.io/print-level","sci.core/print-meta","sci.impl.io/print-meta","sci.core/*1","sci.impl.namespaces/*1","sci.core/*2","sci.impl.namespaces/*2","sci.core/*3","sci.impl.namespaces/*3","sci.core/*e","sci.impl.namespaces/*e","args__4777__auto__","len__4771__auto__","i__4772__auto__","argseq__4778__auto__","cljs.core/IndexedSeq","sci.core/alter-var-root","seq102383","G__102384","cljs.core/first","cljs.core/next","G__102385","self__4758__auto__","f","args","cljs.core.apply","sci.impl.vars/alter-var-root","G__102393","sci.core/eval-string","s","sci.core.eval_string","opts","sci.impl.interpreter.eval_string","sci.core/init","sci.impl.opts/init","sci.core/merge-opts","ctx","sci.impl.opts/merge-opts","sci.core/fork","cljs.core.update","env","cljs.core/deref","cljs.core.atom","sci.core/eval-string*","sci.impl.interpreter/eval-string*","G__102401","sci.core/create-ns","sym","sci.core.create_ns","sci.impl.vars/->SciNamespace","sci.core/parse-string","sci.impl.parser/parse-string","sci.core/reader","x","sci.impl.parser/reader","sci.core/get-line-number","reader","sci.impl.parser/get-line-number","sci.core/get-column-number","sci.impl.parser/get-column-number","G__102404","sci.core/parse-next","sci.core.parse_next","sci.impl.parser.parse_next","sci.impl.utils/kw-identical?","sci.impl.parser/eof","or__4160__auto__","cljs.core.get","sci.core/eval-form","form","cljs.core.gensym","sci.impl.interpreter/eval-form"]],"~:used-vars",["^T",["~$sci.core/eval-string","~$sci.core/new-dynamic-var","~$sci.core/ns","~$sci.impl.namespaces/*e","~$sci.impl.vars/alter-var-root","~$sci.core/*3","~$sci.impl.vars/current-ns","~$sci.impl.parser/get-line-number","~$sci.core/err","~$cljs.core/deref","~$sci.impl.vars/current-file","~$sci.impl.io/in","~$cljs.core/apply","~$sci.impl.namespaces/*3","~$sci.impl.vars/->SciNamespace","~$cljs.core/atom","~$sci.impl.namespaces/*2","~$sci.impl.parser/parse-string","~$sci.core/eval-string*","~$sci.impl.parser/get-column-number","~$sci.core/get-line-number","~$sci.impl.opts/init","~$sci.core/*2","~$sci.impl.types/setVal","~$sci.impl.io/print-meta","~$sci.core/parse-next","~$sci.core/set!","~$sci.core/print-level","~$sci.core/get-column-number","~$sci.core/parse-string","~$cljs.core/vary-meta","~$cljs.core/update","~$sci.core/print-length","~$sci.core/eval-form","~$sci.core/new-var","~$sci.core/*1","~$sci.core/reader","~$sci.core/print-meta","~$sci.core/init","~$sci.impl.io/print-level","~$sci.impl.vars/SciVar","~$sci.impl.namespaces/*1","~$sci.impl.io/err","~$sci.impl.parser/reader","~$sci.impl.vars/unbind","~$sci.core/alter-var-root","~$cljs.core/meta","~$sci.impl.opts/merge-opts","~$sci.core/out","~$sci.impl.interpreter/eval-string","~$sci.impl.io/out","~$cljs.core/assoc","~$sci.impl.parser/eof","~$sci.impl.io/print-length","~$sci.core/in","~$sci.core/create-ns","~$sci.impl.utils/kw-identical?","~$sci.core/merge-opts","~$sci.impl.interpreter/eval-form","~$sci.core/file","~$sci.core/*e","~$sci.core/fork","~$js/Error","~$sci.core/new-macro-var","~$sci.impl.interpreter/eval-string*"]]],"~:cache-keys",["~#cmap",[["^2=","goog/dom/tagname.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^T",[]],"~:deps-syms",["^1T","~$goog.dom.HtmlElement"]]],["^2=","cljs/tools/reader/impl/utils.cljs"],["b2f6b36cef8b996bd0d23135abede05af16d76be","^44",["^ ","^45",null,"^46",["^T",[]],"^47",["^1T","^1Q","~$clojure.string","~$goog.string"]]],["^2=","goog/math/math.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^44",["^ ","^45",null,"^46",["^T",[]],"^47",["^1T","~$goog.array","~$goog.asserts"]]],["^2=","goog/html/trustedtypes.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^44",["^ ","^45",null,"^46",["^T",[]],"^47",["^1T"]]],["^2=","goog/labs/useragent/browser.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^44",["^ ","^45",null,"^46",["^T",[]],"^47",["^1T","^4;","~$goog.labs.userAgent.util","~$goog.object","~$goog.string.internal"]]],["^2=","goog/html/safeurl.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^44",["^ ","^45",null,"^46",["^T",[]],"^47",["^1T","^4<","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.i18n.bidi.Dir","~$goog.i18n.bidi.DirectionalString","~$goog.string.Const","~$goog.string.TypedString","^4?"]]],["^2=","sci/impl/reify.cljc"],["2134f95b4bd92083c89c364288fc3cbe36d565b6","^44",["^ ","^45",null,"^46",["^T",[]],"^47",["^1T","^1Q","^1K"]]],["^2=","goog/array/array.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^44",["^ ","^45",null,"^46",["^T",[]],"^47",["^1T","^4<"]]],["^2=","sci/impl/unrestrict.cljc"],["2134f95b4bd92083c89c364288fc3cbe36d565b6","^44",["^ ","^45",null,"^46",["^T",[]],"^47",["^1T","^1Q"]]],["^2=","goog/debug/error.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^44",["^ ","^45",null,"^46",["^T",[]],"^47",["^1T"]]],["^2=","sci/impl/namespaces.cljc"],["2134f95b4bd92083c89c364288fc3cbe36d565b6","^44",["^ ","^45",null,"^46",["^T",[]],"^47",["^1T","^1Q","~$cljs.reader","~$clojure.set","^49","~$clojure.walk","~$sci.impl.core-protocols","~$sci.impl.hierarchies","^1V","^1L","~$sci.impl.multimethods","^1P","~$sci.impl.protocols","~$sci.impl.read","~$sci.impl.records","~$sci.impl.reify","^1K","^1W","^1O"]]],["^2=","cljs/tools/reader/edn.cljs"],["b2f6b36cef8b996bd0d23135abede05af16d76be","^44",["^ ","^45",null,"^46",["^T",[]],"^47",["^1T","^1Q","~$cljs.tools.reader.impl.errors","^E","~$cljs.tools.reader.impl.utils","~$cljs.tools.reader.impl.commons","~$cljs.tools.reader","^4:","~$goog.string.StringBuffer"]]],["^2=","sci/impl/io.cljc"],["2134f95b4bd92083c89c364288fc3cbe36d565b6","^44",["^ ","^45",null,"^46",["^T",[]],"^47",["^1T","^1Q","^4:","~$sci.impl.unrestrict","^1O"]]],["^2=","sci/impl/parser.cljc"],["2134f95b4bd92083c89c364288fc3cbe36d565b6","^44",["^ ","^45",null,"^46",["^T",[]],"^47",["^1T","^1Q","^E","~$edamame.impl.parser","~$sci.impl.interop","^1W","^1O"]]],["^2=","goog/dom/nodetype.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^44",["^ ","^45",null,"^46",["^T",[]],"^47",["^1T"]]],["^2=","cljs/tools/reader/impl/inspect.cljs"],["b2f6b36cef8b996bd0d23135abede05af16d76be","^44",["^ ","^45",null,"^46",["^T",[]],"^47",["^1T","^1Q"]]],["^2=","cljs/tools/reader.cljs"],["b2f6b36cef8b996bd0d23135abede05af16d76be","^44",["^ ","^45",null,"^46",["^T",[]],"^47",["^1T","^1Q","^E","^4Q","^4R","^4P","^4;","^4:","^4T"]]],["^2=","edamame/impl/parser.cljc"],["f87da88a2b92cfa3a3c95bc61fe12328dcdcc3dc","^44",["^ ","^45",null,"^46",["^T",[]],"^47",["^1T","^1Q","~$cljs.tools.reader.edn","^E","~$cljs.tools.reader.impl.inspect","^4Q","^4R","^4F","^49","~$edamame.impl.read-fn","~$edamame.impl.syntax-quote","^4T"]]],["^2=","goog/string/typedstring.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^44",["^ ","^45",null,"^46",["^T",[]],"^47",["^1T"]]],["^2=","sci/impl/destructure.cljc"],["2134f95b4bd92083c89c364288fc3cbe36d565b6","^44",["^ ","^45",null,"^46",["^T",[]],"^47",["^1T","^1Q"]]],["^2=","goog/object/object.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^44",["^ ","^45",null,"^46",["^T",[]],"^47",["^1T"]]],["^2=","goog/dom/asserts.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^44",["^ ","^45",null,"^46",["^T",[]],"^47",["^1T","^4<"]]],["^2=","sci/impl/macros.cljc"],["2134f95b4bd92083c89c364288fc3cbe36d565b6","^44",["^ ","^45",null,"^46",["^T",[]],"^47",["^1T","^1Q"]]],"~:SHADOW-TIMESTAMP",[1618720883000,1618720883000,1618720422000],["^2=","edamame/impl/syntax_quote.cljc"],["f87da88a2b92cfa3a3c95bc61fe12328dcdcc3dc","^44",["^ ","^45",null,"^46",["^T",[]],"^47",["^1T","^1Q","^49"]]],["^2=","goog/math/long.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^44",["^ ","^45",null,"^46",["^T",[]],"^47",["^1T","^4<","~$goog.reflect"]]],["^2=","goog/html/trustedresourceurl.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^44",["^ ","^45",null,"^46",["^T",[]],"^47",["^1T","^4<","~$goog.fs.blob","^4@","~$goog.html.SafeScript","~$goog.html.trustedtypes","^4B","^4C","^4D","^4E"]]],["^2=","sci/impl/doseq_macro.cljc"],["2134f95b4bd92083c89c364288fc3cbe36d565b6","^44",["^ ","^45",null,"^46",["^T",[]],"^47",["^1T","^1Q","^1W"]]],["^2=","goog/string/internal.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^44",["^ ","^45",null,"^46",["^T",[]],"^47",["^1T"]]],["^2=","goog/functions/functions.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^44",["^ ","^45",null,"^46",["^T",[]],"^47",["^1T"]]],["^2=","goog/html/safestyle.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^44",["^ ","^45",null,"^46",["^T",[]],"^47",["^1T","^4;","^4<","~$goog.html.SafeUrl","^4D","^4E","^4?"]]],["^2=","goog/dom/safe.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^44",["^ ","^45",null,"^46",["^T",[]],"^47",["^1T","^4<","~$goog.dom.asserts","~$goog.functions","~$goog.html.SafeHtml","^53","~$goog.html.SafeStyle","^55","^4A","~$goog.html.uncheckedconversions","^4D","^4?"]]],["^2=","sci/impl/read.cljc"],["2134f95b4bd92083c89c364288fc3cbe36d565b6","^44",["^ ","^45",null,"^46",["^T",[]],"^47",["^1T","^1Q","^E","^1V","^1P","^1W","^1O"]]],["^2=","clojure/walk.cljs"],["86bedf67c795c72bde3feb0415b41be8b95f2cbb","^44",["^ ","^45",null,"^46",["^T",[]],"^47",["^1T","^1Q"]]],["^2=","goog/structs/map.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^44",["^ ","^45",null,"^46",["^T",[]],"^47",["^1T","~$goog.iter.Iterator","~$goog.iter.StopIteration"]]],["^2=","sci/impl/for_macro.cljc"],["2134f95b4bd92083c89c364288fc3cbe36d565b6","^44",["^ ","^45",null,"^46",["^T",[]],"^47",["^1T","^1Q","^1W"]]],["^2=","goog/html/safehtml.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^44",["^ ","^45",null,"^46",["^T",[]],"^47",["^1T","^4;","^4<","~$goog.dom.TagName","~$goog.dom.tags","^53","^59","~$goog.html.SafeStyleSheet","^55","^4A","^54","^4B","^4C","~$goog.labs.userAgent.browser","^4>","^4D","^4E","^4?"]]],["^2=","sci/impl/types.cljc"],["2134f95b4bd92083c89c364288fc3cbe36d565b6","^44",["^ ","^45",null,"^46",["^T",[]],"^47",["^1T","^1Q"]]],["^2=","goog/dom/tags.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^44",["^ ","^45",null,"^46",["^T",[]],"^47",["^1T","^4>"]]],["^2=","goog/fs/blob.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^44",["^ ","^45",null,"^46",["^T",[]],"^47",["^1T","^4;"]]],["^2=","cljs/reader.cljs"],["86bedf67c795c72bde3feb0415b41be8b95f2cbb","^44",["^ ","^45",null,"^46",["^T",[]],"^47",["^1T","^1Q","^4>","^4S","^4X","^4T"]]],["^2=","sci/impl/hierarchies.cljc"],["2134f95b4bd92083c89c364288fc3cbe36d565b6","^44",["^ ","^45",null,"^46",["^T",[]],"^47",["^1T","^1Q","^1O"]]],["^2=","sci/impl/fns.cljc"],["2134f95b4bd92083c89c364288fc3cbe36d565b6","^44",["^ ","^45",null,"^46",["^T",[]],"^47",["^1T","^1Q","~$sci.impl.faster","^1L","^1K","^1W","^1O"]]],["^2=","sci/impl/load.cljc"],["2134f95b4bd92083c89c364288fc3cbe36d565b6","^44",["^ ","^45",null,"^46",["^T",[]],"^47",["^1T","^1Q","^49","^1W","^1O"]]],["^2=","goog/asserts/asserts.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^44",["^ ","^45",null,"^46",["^T",[]],"^47",["^1T","~$goog.debug.Error","~$goog.dom.NodeType"]]],["^2=","sci/impl/vars.cljc"],["2134f95b4bd92083c89c364288fc3cbe36d565b6","^44",["^ ","^45",null,"^46",["^T",[]],"^47",["^1T","^1Q","^1L","^1K","^4U","~$sci.lang"]]],["^2=","goog/uri/uri.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^44",["^ ","^45",null,"^46",["^T",[]],"^47",["^1T","^4;","^4<","^4:","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^2=","edamame/impl/read_fn.cljc"],["f87da88a2b92cfa3a3c95bc61fe12328dcdcc3dc","^44",["^ ","^45",null,"^46",["^T",[]],"^47",["^1T","^1Q"]]],["^2=","sci/impl/resolve.cljc"],["2134f95b4bd92083c89c364288fc3cbe36d565b6","^44",["^ ","^45",null,"^46",["^T",[]],"^47",["^1T","^1Q","^49","~$sci.impl.evaluator","^5A","^4W","^4N","^1W","^1O"]]],["^2=","goog/i18n/bidi.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^44",["^ ","^45",null,"^46",["^T",[]],"^47",["^1T"]]],["^2=","sci/impl/interpreter.cljc"],["2134f95b4bd92083c89c364288fc3cbe36d565b6","^44",["^ ","^45",null,"^46",["^T",[]],"^47",["^1T","^1Q","^E","~$sci.impl.analyzer","^5J","^1J","^1P","^1K","^1W","^1O"]]],["^2=","goog/fs/url.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^44",["^ ","^45",null,"^46",["^T",[]],"^47",["^1T"]]],["^2=","sci/impl/core_protocols.cljc"],["2134f95b4bd92083c89c364288fc3cbe36d565b6","^44",["^ ","^45",null,"^46",["^T",[]],"^47",["^1T","^1Q","^1K","^1O"]]],["^2=","goog/base.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^44",["^ ","^45",null,"^46",["^T",[]],"^47",[]]],["^2=","goog/structs/structs.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^44",["^ ","^45",null,"^46",["^T",[]],"^47",["^1T","^4;","^4>"]]],["^2=","cljs/tools/reader/impl/errors.cljs"],["b2f6b36cef8b996bd0d23135abede05af16d76be","^44",["^ ","^45",null,"^46",["^T",[]],"^47",["^1T","^1Q","^E","^49","^4Y"]]],["^2=","sci/impl/faster.cljc"],["2134f95b4bd92083c89c364288fc3cbe36d565b6","^44",["^ ","^45",null,"^46",["^T",[]],"^47",["^1T","^1Q","^1L"]]],["^2=","clojure/string.cljs"],["86bedf67c795c72bde3feb0415b41be8b95f2cbb","^44",["^ ","^45",null,"^46",["^T",[]],"^47",["^1T","^1Q","^4:","^4T"]]],["^2=","goog/string/string.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^44",["^ ","^45",null,"^46",["^T",[]],"^47",["^1T","~$goog.dom.safe","^5:","^4D","^4?"]]],["^2=","goog/reflect/reflect.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^44",["^ ","^45",null,"^46",["^T",[]],"^47",["^1T"]]],["^2=","goog/labs/useragent/util.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^44",["^ ","^45",null,"^46",["^T",[]],"^47",["^1T","^4?"]]],["^2=","sci/core.cljc"],["2134f95b4bd92083c89c364288fc3cbe36d565b6","^44",["^ ","^45",null,"^46",["^T",[]],"^47",["^1T","^1Q","^1M","^1V","^1L","^1S","^1J","^1P","^1K","^1W","^1O"]]],["^2=","goog/string/stringbuffer.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^44",["^ ","^45",null,"^46",["^T",[]],"^47",["^1T"]]],["^2=","cljs/tools/reader/reader_types.cljs"],["b2f6b36cef8b996bd0d23135abede05af16d76be","^44",["^ ","^45",null,"^46",["^T",[]],"^47",["^1T","^1Q","^4Q","^4:","^4T"]]],["^2=","sci/impl/multimethods.cljc"],["2134f95b4bd92083c89c364288fc3cbe36d565b6","^44",["^ ","^45",null,"^46",["^T",[]],"^47",["^1T","^1Q","^4J"]]],["^2=","goog/iter/iter.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^44",["^ ","^45",null,"^46",["^T",[]],"^47",["^1T","^4;","^4<","^57","~$goog.math"]]],["^2=","sci/impl/opts.cljc"],["2134f95b4bd92083c89c364288fc3cbe36d565b6","^44",["^ ","^45",null,"^46",["^T",[]],"^47",["^1T","^1Q","^4:","^1S","^1W","^1O","^1K","^5D"]]],["^2=","sci/impl/utils.cljc"],["2134f95b4bd92083c89c364288fc3cbe36d565b6","^44",["^ ","^45",null,"^46",["^T",[]],"^47",["^1T","^1Q","^49","^1K","^1O"]]],["^2=","sci/impl/protocols.cljc"],["2134f95b4bd92083c89c364288fc3cbe36d565b6","^44",["^ ","^45",null,"^46",["^T",[]],"^47",["^1T","^1Q","^4K","^1K","^1W","^1O"]]],["^2=","sci/impl/evaluator.cljc"],["2134f95b4bd92083c89c364288fc3cbe36d565b6","^44",["^ ","^45",null,"^46",["^T",[]],"^47",["^1T","^1Q","^49","^5A","~$sci.impl.fns","^4W","~$sci.impl.load","^1L","^4N","^1K","^1W","^1O"]]],["^2=","goog/html/uncheckedconversions.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^44",["^ ","^45",null,"^46",["^T",[]],"^47",["^1T","^4<","^58","^53","^59","^5?","^55","^4A","^4D","^4?","^4B"]]],["^2=","sci/lang.cljc"],["2134f95b4bd92083c89c364288fc3cbe36d565b6","^44",["^ ","^45",null,"^46",["^T",[]],"^47",["^1T","^1Q"]]],["^2=","sci/impl/analyzer.cljc"],["2134f95b4bd92083c89c364288fc3cbe36d565b6","^44",["^ ","^45",null,"^46",["^T",[]],"^47",["^1T","^1Q","~$sci.impl.destructure","~$sci.impl.doseq-macro","^5J","^5N","~$sci.impl.for-macro","^4W","^5O","^4N","~$sci.impl.resolve","^1K","^1W","^1O"]]],["^2=","cljs/tools/reader/impl/commons.cljs"],["b2f6b36cef8b996bd0d23135abede05af16d76be","^44",["^ ","^45",null,"^46",["^T",[]],"^47",["^1T","^1Q","^4P","^E","^4Q"]]],["^2=","goog/dom/htmlelement.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^44",["^ ","^45",null,"^46",["^T",[]],"^47",["^1T"]]],["^2=","cljs/core.cljs"],["86bedf67c795c72bde3feb0415b41be8b95f2cbb","^44",["^ ","^45",null,"^46",["^T",[]],"^47",["^1T","~$goog.math.Long","~$goog.math.Integer","^4:","^4>","^4;","~$goog.Uri","^4T"]]],["^2=","sci/impl/records.cljc"],["2134f95b4bd92083c89c364288fc3cbe36d565b6","^44",["^ ","^45",null,"^46",["^T",[]],"^47",["^1T","^1Q","^49","^1W","^1O"]]],["^2=","goog/html/safescript.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^44",["^ ","^45",null,"^46",["^T",[]],"^47",["^1T","^4D","^4E","^54","^4<"]]],["^2=","goog/html/safestylesheet.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^44",["^ ","^45",null,"^46",["^T",[]],"^47",["^1T","^4D","^59","^4E","^4;","^4>","^4<","^4?"]]],["^2=","goog/math/integer.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^44",["^ ","^45",null,"^46",["^T",[]],"^47",["^1T","^51"]]],["^2=","clojure/set.cljs"],["86bedf67c795c72bde3feb0415b41be8b95f2cbb","^44",["^ ","^45",null,"^46",["^T",[]],"^47",["^1T","^1Q"]]],["^2=","goog/uri/utils.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^44",["^ ","^45",null,"^46",["^T",[]],"^47",["^1T","^4<","^4:"]]],["^2=","goog/string/const.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^44",["^ ","^45",null,"^46",["^T",[]],"^47",["^1T","^4<","^4E"]]],["^2=","sci/impl/interop.cljc"],["2134f95b4bd92083c89c364288fc3cbe36d565b6","^44",["^ ","^45",null,"^46",["^T",[]],"^47",["^1T","^1Q","^4>","^1O","^49"]]]]],"~:clj-info",["^ ","jar:file:/home/andreas/.m2/repository/borkdude/sci/0.2.5/sci-0.2.5.jar!/sci/impl/interpreter.cljc",1619741120000,"jar:file:/home/andreas/.m2/repository/borkdude/sci/0.2.5/sci-0.2.5.jar!/sci/impl/faster.cljc",1619741120000,"jar:file:/home/andreas/.m2/repository/org/clojure/clojurescript/1.10.844/clojurescript-1.10.844.jar!/cljs/env.cljc",1618720422000,"jar:file:/home/andreas/.m2/repository/org/clojure/clojurescript/1.10.844/clojurescript-1.10.844.jar!/cljs/externs.clj",1618720422000,"jar:file:/home/andreas/.m2/repository/org/clojure/clojurescript/1.10.844/clojurescript-1.10.844.jar!/cljs/tagged_literals.cljc",1618720422000,"jar:file:/home/andreas/.m2/repository/borkdude/sci/0.2.5/sci-0.2.5.jar!/sci/impl/reify.cljc",1619741120000,"jar:file:/home/andreas/.m2/repository/borkdude/sci/0.2.5/sci-0.2.5.jar!/sci/impl/protocols.cljc",1619741120000,"jar:file:/home/andreas/.m2/repository/borkdude/sci/0.2.5/sci-0.2.5.jar!/sci/impl/evaluator.cljc",1619741120000,"jar:file:/home/andreas/.m2/repository/org/clojure/data.json/2.1.0/data.json-2.1.0.jar!/clojure/data/json.clj",1618502954000,"jar:file:/home/andreas/.m2/repository/org/clojure/clojurescript/1.10.844/clojurescript-1.10.844.jar!/cljs/reader.clj",1618720422000,"jar:file:/home/andreas/.m2/repository/borkdude/sci/0.2.5/sci-0.2.5.jar!/sci/impl/io.cljc",1619741120000,"jar:file:/home/andreas/.m2/repository/borkdude/sci/0.2.5/sci-0.2.5.jar!/sci/impl/resolve.cljc",1619741120000,"jar:file:/home/andreas/.m2/repository/borkdude/sci/0.2.5/sci-0.2.5.jar!/sci/impl/records.cljc",1619741120000,"jar:file:/home/andreas/.m2/repository/org/clojure/clojurescript/1.10.844/clojurescript-1.10.844.jar!/cljs/compiler.cljc",1618720422000,"jar:file:/home/andreas/.m2/repository/borkdude/sci/0.2.5/sci-0.2.5.jar!/sci/impl/multimethods.cljc",1619741120000,"jar:file:/home/andreas/.m2/repository/org/clojure/clojurescript/1.10.844/clojurescript-1.10.844.jar!/cljs/instant.clj",1618720422000,"jar:file:/home/andreas/.m2/repository/org/clojure/clojurescript/1.10.844/clojurescript-1.10.844.jar!/cljs/source_map/base64_vlq.clj",1618720422000,"jar:file:/home/andreas/.m2/repository/borkdude/sci/0.2.5/sci-0.2.5.jar!/sci/impl/parser.cljc",1619741120000,"jar:file:/home/andreas/.m2/repository/borkdude/sci/0.2.5/sci-0.2.5.jar!/sci/impl/utils.cljc",1619741120000,"jar:file:/home/andreas/.m2/repository/borkdude/edamame/0.0.11/edamame-0.0.11.jar!/edamame/impl/parser.cljc",1620086470000,"jar:file:/home/andreas/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/edn.clj",1618716228000,"jar:file:/home/andreas/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/walk.clj",1618716228000,"jar:file:/home/andreas/.m2/repository/org/clojure/tools.reader/1.3.5/tools.reader-1.3.5.jar!/clojure/tools/reader/default_data_readers.clj",1618501370000,"jar:file:/home/andreas/.m2/repository/borkdude/sci/0.2.5/sci-0.2.5.jar!/sci/impl/types.cljc",1619741120000,"jar:file:/home/andreas/.m2/repository/org/clojure/clojurescript/1.10.844/clojurescript-1.10.844.jar!/cljs/analyzer.cljc",1618720422000,"jar:file:/home/andreas/.m2/repository/org/clojure/clojurescript/1.10.844/clojurescript-1.10.844.jar!/cljs/source_map.clj",1618720422000,"jar:file:/home/andreas/.m2/repository/org/clojure/tools.reader/1.3.5/tools.reader-1.3.5.jar!/clojure/tools/reader/impl/commons.clj",1618501370000,"jar:file:/home/andreas/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/core.clj",1618716228000,"jar:file:/home/andreas/.m2/repository/borkdude/sci/0.2.5/sci-0.2.5.jar!/sci/impl/namespaces.cljc",1619741120000,"jar:file:/home/andreas/.m2/repository/borkdude/sci/0.2.5/sci-0.2.5.jar!/sci/impl/proxy.clj",1619741120000,"jar:file:/home/andreas/.m2/repository/org/clojure/tools.reader/1.3.5/tools.reader-1.3.5.jar!/clojure/tools/reader.clj",1618501370000,"jar:file:/home/andreas/.m2/repository/borkdude/sci/0.2.5/sci-0.2.5.jar!/sci/impl/macros.cljc",1619741120000,"jar:file:/home/andreas/.m2/repository/org/clojure/clojurescript/1.10.844/clojurescript-1.10.844.jar!/cljs/js_deps.cljc",1618720422000,"jar:file:/home/andreas/.m2/repository/borkdude/sci/0.2.5/sci-0.2.5.jar!/sci/impl/hierarchies.cljc",1619741120000,"jar:file:/home/andreas/.m2/repository/borkdude/sci/0.2.5/sci-0.2.5.jar!/sci/impl/read.cljc",1619741120000,"jar:file:/home/andreas/.m2/repository/org/clojure/clojurescript/1.10.844/clojurescript-1.10.844.jar!/cljs/core.cljc",1618720422000,"jar:file:/home/andreas/.m2/repository/org/clojure/tools.reader/1.3.5/tools.reader-1.3.5.jar!/clojure/tools/reader/impl/inspect.clj",1618501370000,"jar:file:/home/andreas/.m2/repository/borkdude/sci/0.2.5/sci-0.2.5.jar!/sci/impl/interop.cljc",1619741120000,"jar:file:/home/andreas/.m2/repository/org/clojure/tools.reader/1.3.5/tools.reader-1.3.5.jar!/clojure/tools/reader/reader_types.clj",1618501370000,"jar:file:/home/andreas/.m2/repository/borkdude/sci/0.2.5/sci-0.2.5.jar!/sci/impl/load.cljc",1619741120000,"jar:file:/home/andreas/.m2/repository/binaryage/devtools/1.0.2/devtools-1.0.2.jar!/devtools/defaults.clj",1618720434000,"jar:file:/home/andreas/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/java/io.clj",1618716228000,"jar:file:/home/andreas/.m2/repository/borkdude/sci/0.2.5/sci-0.2.5.jar!/sci/core.cljc",1619741120000,"jar:file:/home/andreas/.m2/repository/borkdude/sci/0.2.5/sci-0.2.5.jar!/sci/impl/opts.cljc",1619741120000,"jar:file:/home/andreas/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/pprint.clj",1618716228000,"jar:file:/home/andreas/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/set.clj",1618716228000,"jar:file:/home/andreas/.m2/repository/org/clojure/tools.reader/1.3.5/tools.reader-1.3.5.jar!/cljs/tools/reader/reader_types.clj",1618501370000,"jar:file:/home/andreas/.m2/repository/org/clojure/clojurescript/1.10.844/clojurescript-1.10.844.jar!/cljs/analyzer/impl.cljc",1618720422000,"jar:file:/home/andreas/.m2/repository/borkdude/sci/0.2.5/sci-0.2.5.jar!/sci/impl/analyzer.cljc",1619741120000,"jar:file:/home/andreas/.m2/repository/org/clojure/tools.reader/1.3.5/tools.reader-1.3.5.jar!/clojure/tools/reader/impl/errors.clj",1618501370000,"jar:file:/home/andreas/.m2/repository/org/clojure/clojurescript/1.10.844/clojurescript-1.10.844.jar!/cljs/util.cljc",1618720422000,"jar:file:/home/andreas/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/string.clj",1618716228000,"jar:file:/home/andreas/.m2/repository/borkdude/sci/0.2.5/sci-0.2.5.jar!/sci/impl/fns.cljc",1619741120000,"jar:file:/home/andreas/.m2/repository/org/clojure/clojurescript/1.10.844/clojurescript-1.10.844.jar!/cljs/source_map/base64.clj",1618720422000,"jar:file:/home/andreas/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/instant.clj",1618716228000,"jar:file:/home/andreas/.m2/repository/borkdude/sci/0.2.5/sci-0.2.5.jar!/sci/impl/core_protocols.cljc",1619741120000,"jar:file:/home/andreas/.m2/repository/borkdude/sci/0.2.5/sci-0.2.5.jar!/sci/impl/vars.cljc",1619741120000,"jar:file:/home/andreas/.m2/repository/org/clojure/tools.reader/1.3.5/tools.reader-1.3.5.jar!/clojure/tools/reader/edn.clj",1618501370000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","sci/core.cljc","^7",1,"^8",5,"^9",1,"^:",13],"^;",["^ ","^<","^=","^>","^?","^@","^A","^B","^C","^D","^E","^F","^G","^H","^I","^J","^K","^L","^M"],"^N",["^ ","^O","^P","^Q","^P","^R","^P"],"^S",["^T",["^O","^U","^V","^W","^X","^Y","^Z","^[","^10","^Q","^11","^12","^13","^14","^15"]],"^16",["^ ","^O",["^ ","^17",["^18",[["^19","~$&","^1:"]]],"^1;","Macro for binding sci vars. Must be called with map of sci dynamic\n  vars to values. Used in babashka.","^7",70,"^8",3,"^6","sci/core.cljc","^1<","^1=","^1>","^P","^1?",true],"^R",["^ ","^17",["^18",[["^1@","^["]]],"^1;","Copies contents from var `sym` to a new sci var. The value `ns` is an\n  object created with `sci.core/create-ns`.","^7",48,"^8",1,"^6","sci/core.cljc","^1<","^1A","^1>","^P","^1?",true],"^X",["^ ","^17",["^18",[["~$&","^1:"]]],"^1;","Like clojure.core/future but also conveys sci bindings to the thread.","^7",129,"^8",3,"^6","sci/core.cljc","^1<","^1B","^1>","^P","^1?",true],"^Q",["^ ","^17",["^18",[["~$&","^1:"]]],"^1;","Evaluates exprs in a context in which sci's *out* is bound to a fresh\n  StringWriter.  Returns the string created by any nested printing\n  calls.","^7",117,"^8",3,"^6","sci/core.cljc","^1<","^1C","^1>","^P","^1?",true],"^11",["^ ","^17",["^18",[["~$s","~$&","^1:"]]],"^1;","Evaluates body in a context in which sci's *in* is bound to a fresh\n  StringReader initialized with the string s.","^7",107,"^8",3,"^6","sci/core.cljc","^1<","^1D","^1>","^P","^1?",true],"^12",["^ ","^17",["^18",[["^1E","~$&","^1:"]]],"^1;","Macro for binding sci vars. Must be called with a vector of sci\n  dynamic vars to values.","^7",81,"^8",3,"^6","sci/core.cljc","^1<","^1F","^1>","^P","^1?",true]],"^1<","^P","^1H",null,"^1I",["^ ","^1J","^1J","~$t","^1K","^1L","^1L","^1K","^1K","~$i","^1M","^1N","^1O","^1P","^1P","^1Q","^1Q","^1R","^1S","^1T","^1T","^1U","^1L","^1M","^1M","^1V","^1V","^1O","^1O","^1W","^1W","^1X","^1V","^1Y","^1P","^1Z","^1W","^1S","^1S","^1[","^1J"],"^20",["^T",["^21","^22"]],"~:shadow/js-access-global",["^T",["Error"]],"^23",null,"~:defs",["^ ","~$fork",["^ ","~:protocol-inline",null,"^5",["^ ","^6","sci/core.cljc","^7",204,"^8",7,"^9",204,"^:",11,"^17",["^18",["~$quote",["^18",[["~$ctx"]]]]],"^1;","Forks a context (as produced with `init`) into a new context. Any new\n  vars created in the new context won't be visible in the original\n  context."],"^1<","^3Z","^6","sci/core.cljc","^:",11,"~:method-params",["^18",[["^7@"]]],"~:protocol-impl",null,"~:arglists-meta",["^18",[null,null]],"^8",1,"~:variadic?",false,"^7",204,"~:ret-tag",["^T",["~$clj","~$any"]],"^9",204,"~:max-fixed-arity",1,"~:fn-var",true,"^17",["^18",["^7?",["^18",[["^7@"]]]]],"^1;","Forks a context (as produced with `init`) into a new context. Any new\n  vars created in the new context won't be visible in the original\n  context."],"~$parse-string",["^ ","^7>",null,"^5",["^ ","^6","sci/core.cljc","^7",223,"^8",7,"^9",223,"^:",19,"^17",["^18",["^7?",["^18",[["^7@","~$s"]]]]],"^1;","Parses string `s` in the context of `ctx` (as produced with\n  `init`)."],"^1<","^3:","^6","sci/core.cljc","^:",19,"^7A",["^18",[["^7@","~$s"]]],"^7B",null,"^7C",["^18",[null,null]],"^8",1,"^7D",false,"^7",223,"^7E",["^T",["^7G","~$clj-nil"]],"^9",223,"^7H",2,"^7I",true,"^17",["^18",["^7?",["^18",[["^7@","~$s"]]]]],"^1;","Parses string `s` in the context of `ctx` (as produced with\n  `init`)."],"~$new-var",["^ ","^7>",null,"^5",["^ ","^6","sci/core.cljc","^7",20,"^8",7,"^9",20,"^:",14,"^17",["^18",["^7?",["^18",[["~$name"],["^7M","~$init-val"],["^7M","^7N","~$meta"]]]]],"^1;","Returns a new sci var.","~:top-fn",["^ ","^7D",false,"~:fixed-arity",3,"^7H",3,"^7A",[["^7M"],["^7M","^7N"],["^7M","^7N","^7O"]],"^17",["^18",[["^7M"],["^7M","^7N"],["^7M","^7N","^7O"]]],"^7C",["^18",[null,null,null]]]],"^1<","^3?","^6","sci/core.cljc","^:",14,"^7P",["^ ","^7D",false,"^7Q",3,"^7H",3,"^7A",[["^7M"],["^7M","^7N"],["^7M","^7N","^7O"]],"^17",["^18",[["^7M"],["^7M","^7N"],["^7M","^7N","^7O"]]],"^7C",["^18",[null,null,null]]],"^7A",[["^7M"],["^7M","^7N"],["^7M","^7N","^7O"]],"^7B",null,"^7Q",3,"^7C",["^18",[null,null,null]],"^8",1,"^7D",false,"~:methods",[["^ ","^7Q",1,"^7D",false,"~:tag","^7G"],["^ ","^7Q",2,"^7D",false,"^7S","^7G"],["^ ","^7Q",3,"^7D",false,"^7S","^3E"]],"^7",20,"^9",20,"^7H",3,"^7I",true,"^17",["^18",[["^7M"],["^7M","^7N"],["^7M","^7N","^7O"]]],"^1;","Returns a new sci var."],"^U",["^ ","^1<","^33","^6","sci/core.cljc","^7",99,"^8",1,"^9",99,"^:",8,"^5",["^ ","^6","sci/core.cljc","^7",99,"^8",6,"^9",99,"^:",8],"^7S","^3E"],"~$in",["^ ","^1<","^3S","^6","sci/core.cljc","^7",90,"^8",1,"^9",90,"^:",8,"^5",["^ ","^6","sci/core.cljc","^7",90,"^8",6,"^9",90,"^:",8],"^1;","Sci var that represents sci's `clojure.core/*in*`"],"^W",["^ ","^7>",null,"^5",["^ ","^6","sci/core.cljc","^7",155,"^8",7,"^9",155,"^:",21,"^17",["^18",["^7?",["^18",[["~$v","~$f","~$&","~$args"]]]]],"^1;","Atomically alters the root binding of sci var v by applying f to its\n  current value plus any args.","^7P",["^ ","^7D",true,"^7Q",2,"^7H",2,"^7A",[["^18",["~$v","~$f","^7U"]]],"^17",["^18",[["~$v","~$f","~$&","^7U"]]],"^7C",["^18",[null]]]],"^1<","^3J","^6","sci/core.cljc","^:",21,"^7P",["^ ","^7D",true,"^7Q",2,"^7H",2,"^7A",[["^18",["~$v","~$f","^7U"]]],"^17",["^18",[["~$v","~$f","~$&","^7U"]]],"^7C",["^18",[null]]],"^7A",[["^18",["~$v","~$f","^7U"]]],"^7B",null,"^7Q",2,"^7C",["^18",[null]],"^8",1,"^7D",true,"^7R",[["^ ","^7Q",2,"^7D",true,"^7S","^7G"]],"^7",155,"^7E","^7G","^9",155,"^7H",2,"^7I",true,"^17",["^18",[["~$v","~$f","~$&","^7U"]]],"^1;","Atomically alters the root binding of sci var v by applying f to its\n  current value plus any args."],"~$new-macro-var",["^ ","^7>",null,"^5",["^ ","^6","sci/core.cljc","^7",39,"^8",7,"^9",39,"^:",20,"^17",["^18",["^7?",["^18",[["^7M","^7N"],["^7M","^7N","^7O"]]]]],"^1;","Same as new-var but adds :macro true to meta as well\n  as :sci/macro true to meta of the fn itself.","^7P",["^ ","^7D",false,"^7Q",3,"^7H",3,"^7A",[["^7M","^7N"],["^7M","^7N","^7O"]],"^17",["^18",[["^7M","^7N"],["^7M","^7N","^7O"]]],"^7C",["^18",[null,null]]]],"^1<","^40","^6","sci/core.cljc","^:",20,"^7P",["^ ","^7D",false,"^7Q",3,"^7H",3,"^7A",[["^7M","^7N"],["^7M","^7N","^7O"]],"^17",["^18",[["^7M","^7N"],["^7M","^7N","^7O"]]],"^7C",["^18",[null,null]]],"^7A",[["^7M","^7N"],["^7M","^7N","^7O"]],"^7B",null,"^7Q",3,"^7C",["^18",[null,null]],"^8",1,"^7D",false,"^7R",[["^ ","^7Q",2,"^7D",false,"^7S","^7G"],["^ ","^7Q",3,"^7D",false,"^7S","^3E"]],"^7",39,"^9",39,"^7H",3,"^7I",true,"^17",["^18",[["^7M","^7N"],["^7M","^7N","^7O"]]],"^1;","Same as new-var but adds :macro true to meta as well\n  as :sci/macro true to meta of the fn itself."],"^Y",["^ ","^1<","^3@","^6","sci/core.cljc","^7",98,"^8",1,"^9",98,"^:",8,"^5",["^ ","^6","sci/core.cljc","^7",98,"^8",6,"^9",98,"^:",8],"^7S","^3E"],"~$print-meta",["^ ","^5",["^ ","^6","sci/core.cljc","^7",97,"^8",6,"^9",97,"^:",16],"^1<","^3B","^6","sci/core.cljc","^:",16,"^8",1,"^7",97,"^9",97,"^7S","^7G","^1;","Sci var that represents sci's `clojure.core/*print-meta*`"],"~$init",["^ ","^7>",null,"^5",["^ ","^6","sci/core.cljc","^7",191,"^8",7,"^9",191,"^:",11,"^17",["^18",["^7?",["^18",[["^1["]]]]],"^1;","Creates an initial sci context from given options `opts`. The context\n  can be used with `eval-string*`. See `eval-string` for available\n  options. The internal organization of the context is implementation\n  detail and may change in the future."],"^1<","^3C","^6","sci/core.cljc","^:",11,"^7A",["^18",[["^1["]]],"^7B",null,"^7C",["^18",[null,null]],"^8",1,"^7D",false,"^7",191,"^7E",["^T",["^7F","^7G"]],"^9",191,"^7H",1,"^7I",true,"^17",["^18",["^7?",["^18",[["^1["]]]]],"^1;","Creates an initial sci context from given options `opts`. The context\n  can be used with `eval-string*`. See `eval-string` for available\n  options. The internal organization of the context is implementation\n  detail and may change in the future."],"^Z",["^ ","^7>",null,"^5",["^ ","^6","sci/core.cljc","^7",217,"^8",7,"^9",217,"^:",16,"^17",["^18",["^7?",["^18",[["^1@"],["^1@","^7O"]]]]],"^1;","Creates namespace object. Can be used in var metadata.","^7P",["^ ","^7D",false,"^7Q",2,"^7H",2,"^7A",[["^1@"],["^1@","^7O"]],"^17",["^18",[["^1@"],["^1@","^7O"]]],"^7C",["^18",[null,null]]]],"^1<","^3T","^6","sci/core.cljc","^:",16,"^7P",["^ ","^7D",false,"^7Q",2,"^7H",2,"^7A",[["^1@"],["^1@","^7O"]],"^17",["^18",[["^1@"],["^1@","^7O"]]],"^7C",["^18",[null,null]]],"^7A",[["^1@"],["^1@","^7O"]],"^7B",null,"^7Q",2,"^7C",["^18",[null,null]],"^8",1,"^7D",false,"^7R",[["^ ","^7Q",1,"^7D",false,"^7S","^7G"],["^ ","^7Q",2,"^7D",false,"^7S","~$sci.impl.vars/SciNamespace"]],"^7",217,"^9",217,"^7H",2,"^7I",true,"^17",["^18",[["^1@"],["^1@","^7O"]]],"^1;","Creates namespace object. Can be used in var metadata."],"^[",["^ ","^5",["^ ","^6","sci/core.cljc","^7",93,"^8",6,"^9",93,"^:",8],"^1<","^2K","^6","sci/core.cljc","^:",8,"^8",1,"^7",93,"^9",93,"^7S","^7G","^1;","Sci var that represents sci's `clojure.core/*ns*`"],"~$merge-opts",["^ ","^7>",null,"^5",["^ ","^6","sci/core.cljc","^7",199,"^8",7,"^9",199,"^:",17,"^17",["^18",["^7?",["^18",[["^7@","^1["]]]]],"^1;","Updates a context with opts merged in and returns it."],"^1<","^3V","^6","sci/core.cljc","^:",17,"^7A",["^18",[["^7@","^1["]]],"^7B",null,"^7C",["^18",[null,null]],"^8",1,"^7D",false,"^7",199,"^7E",["^T",["^7F","^7G"]],"^9",199,"^7H",2,"^7I",true,"^17",["^18",["^7?",["^18",[["^7@","^1["]]]]],"^1;","Updates a context with opts merged in and returns it."],"~$file",["^ ","^5",["^ ","^6","sci/core.cljc","^7",94,"^8",6,"^9",94,"^:",10],"^1<","^3X","^6","sci/core.cljc","^:",10,"^8",1,"^7",94,"^9",94,"^7S","^7G","^1;","Sci var that represents sci's `clojure.core/*file*`"],"~$err",["^ ","^1<","^2Q","^6","sci/core.cljc","^7",92,"^8",1,"^9",92,"^:",9,"^5",["^ ","^6","sci/core.cljc","^7",92,"^8",6,"^9",92,"^:",9],"^1;","Sci var that represents sci's `clojure.core/*err*`"],"~$print-level",["^ ","^5",["^ ","^6","sci/core.cljc","^7",96,"^8",6,"^9",96,"^:",17],"^1<","^38","^6","sci/core.cljc","^:",17,"^8",1,"^7",96,"^9",96,"^7S","^7G","^1;","Sci var that represents sci's `clojure.core/*print-level*`"],"^10",["^ ","^1<","^3Y","^6","sci/core.cljc","^7",101,"^8",1,"^9",101,"^:",8,"^5",["^ ","^6","sci/core.cljc","^7",101,"^8",6,"^9",101,"^:",8],"^7S","^3E"],"~$get-column-number",["^ ","^7>",null,"^5",["^ ","^6","sci/core.cljc","^7",238,"^8",7,"^9",238,"^:",24,"^17",["^18",["^7?",["^18",[["~$reader"]]]]]],"^1<","^39","^6","sci/core.cljc","^:",24,"^7A",["^18",[["^83"]]],"^7B",null,"^7C",["^18",[null,null]],"^8",1,"^7D",false,"^7",238,"^7E","^7G","^9",238,"^7H",1,"^7I",true,"^17",["^18",["^7?",["^18",[["^83"]]]]]],"~$eval-string",["^ ","^7>",null,"^5",["^ ","^6","sci/core.cljc","^7",161,"^8",7,"^9",161,"^:",18,"^17",["^18",["^7?",["^18",[["~$s"],["~$s","^1["]]]]],"^1;","Evaluates string `s` as one or multiple Clojure expressions using the Small Clojure Interpreter.\n\n  The map `opts` may contain the following:\n\n  - `:namespaces`: a map of symbols to namespaces, where a namespace\n  is a map with symbols to values, e.g.: `{'foo.bar {'x 1}}`. These\n  namespaces can be used with `require`.\n\n  - `:bindings`: `:bindings x` is the same as `:namespaces {'user x}`.\n\n  - `:allow`: a seqable of allowed symbols. All symbols, even those\n  brought in via `:bindings` or `:namespaces` have to be explicitly\n  enumerated.\n\n  - `:deny`: a seqable of disallowed symbols, e.g.: `[loop quote\n  recur]`.\n\n  - `:features`: when provided a non-empty set of keywords, sci will process reader conditionals using these features (e.g. #{:bb}).\n\n  - `:env`: an atom with a map in which state from the\n  evaluation (defined namespaced and vars) will be persisted for\n  re-use over multiple calls.\n\n  - `:disable-arity-checks`: disables arity checks for single-arity\n  functions.","^7P",["^ ","^7D",false,"^7Q",2,"^7H",2,"^7A",[["~$s"],["~$s","^1["]],"^17",["^18",[["~$s"],["~$s","^1["]]],"^7C",["^18",[null,null]]]],"^1<","^2I","^6","sci/core.cljc","^:",18,"^7P",["^ ","^7D",false,"^7Q",2,"^7H",2,"^7A",[["~$s"],["~$s","^1["]],"^17",["^18",[["~$s"],["~$s","^1["]]],"^7C",["^18",[null,null]]],"^7A",[["~$s"],["~$s","^1["]],"^7B",null,"^7Q",2,"^7C",["^18",[null,null]],"^8",1,"^7D",false,"^7R",[["^ ","^7Q",1,"^7D",false,"^7S","^7G"],["^ ","^7Q",2,"^7D",false,"^7S","^7G"]],"^7",161,"^9",161,"^7H",2,"^7I",true,"^17",["^18",[["~$s"],["~$s","^1["]]],"^1;","Evaluates string `s` as one or multiple Clojure expressions using the Small Clojure Interpreter.\n\n  The map `opts` may contain the following:\n\n  - `:namespaces`: a map of symbols to namespaces, where a namespace\n  is a map with symbols to values, e.g.: `{'foo.bar {'x 1}}`. These\n  namespaces can be used with `require`.\n\n  - `:bindings`: `:bindings x` is the same as `:namespaces {'user x}`.\n\n  - `:allow`: a seqable of allowed symbols. All symbols, even those\n  brought in via `:bindings` or `:namespaces` have to be explicitly\n  enumerated.\n\n  - `:deny`: a seqable of disallowed symbols, e.g.: `[loop quote\n  recur]`.\n\n  - `:features`: when provided a non-empty set of keywords, sci will process reader conditionals using these features (e.g. #{:bb}).\n\n  - `:env`: an atom with a map in which state from the\n  evaluation (defined namespaced and vars) will be persisted for\n  re-use over multiple calls.\n\n  - `:disable-arity-checks`: disables arity checks for single-arity\n  functions."],"~$parse-next",["^ ","^7>",null,"^5",["^ ","^6","sci/core.cljc","^7",241,"^8",7,"^9",241,"^:",17,"^17",["^18",["^7?",["^18",[["^7@","^83"],["^7@","^83","^1["]]]]],"^1;","Parses next form from reader","^7P",["^ ","^7D",false,"^7Q",3,"^7H",3,"^7A",[["^7@","^83"],["^7@","^83","^1["]],"^17",["^18",[["^7@","^83"],["^7@","^83","^1["]]],"^7C",["^18",[null,null]]]],"^1<","^36","^6","sci/core.cljc","^:",17,"^7P",["^ ","^7D",false,"^7Q",3,"^7H",3,"^7A",[["^7@","^83"],["^7@","^83","^1["]],"^17",["^18",[["^7@","^83"],["^7@","^83","^1["]]],"^7C",["^18",[null,null]]],"^7A",[["^7@","^83"],["^7@","^83","^1["]],"^7B",null,"^7Q",3,"^7C",["^18",[null,null]],"^8",1,"^7D",false,"^7R",[["^ ","^7Q",2,"^7D",false,"^7S","^7G"],["^ ","^7Q",3,"^7D",false,"^7S",["^T",["^7G","~$cljs.core/Keyword"]]]],"^7",241,"^9",241,"^7H",3,"^7I",true,"^17",["^18",[["^7@","^83"],["^7@","^83","^1["]]],"^1;","Parses next form from reader"],"^13",["^ ","^7>",null,"^5",["^ ","^6","sci/core.cljc","^7",34,"^8",7,"^9",34,"^:",11,"^17",["^18",["^7?",["^18",[["~$dynamic-var","~$v"]]]]],"^1;","Establish thread local binding of dynamic var"],"^1<","^37","^6","sci/core.cljc","^:",11,"^7A",["^18",[["^87","~$v"]]],"^7B",null,"^7C",["^18",[null,null]],"^8",1,"^7D",false,"^7",34,"^7E","^7G","^9",34,"^7H",2,"^7I",true,"^17",["^18",["^7?",["^18",[["^87","~$v"]]]]],"^1;","Establish thread local binding of dynamic var"],"^14",["^ ","^1<","^2N","^6","sci/core.cljc","^7",100,"^8",1,"^9",100,"^:",8,"^5",["^ ","^6","sci/core.cljc","^7",100,"^8",6,"^9",100,"^:",8],"^7S","^3E"],"~$out",["^ ","^1<","^3M","^6","sci/core.cljc","^7",91,"^8",1,"^9",91,"^:",9,"^5",["^ ","^6","sci/core.cljc","^7",91,"^8",6,"^9",91,"^:",9],"^1;","Sci var that represents sci's `clojure.core/*out*`"],"~$print-length",["^ ","^5",["^ ","^6","sci/core.cljc","^7",95,"^8",6,"^9",95,"^:",18],"^1<","^3=","^6","sci/core.cljc","^:",18,"^8",1,"^7",95,"^9",95,"^7S","^7G","^1;","Sci var that represents sci's `clojure.core/*print-length*`"],"~$eval-form",["^ ","^7>",null,"^5",["^ ","^6","sci/core.cljc","^7",251,"^8",7,"^9",251,"^:",16,"^17",["^18",["^7?",["^18",[["^7@","~$form"]]]]],"^1;","Evaluates form (as produced by `parse-string` or `parse-next`) in the\n  context of `ctx` (as produced with `init`). To allow namespace\n  switches, establish root binding of `sci/ns` with `sci/binding` or\n  `sci/with-bindings.`"],"^1<","^3>","^6","sci/core.cljc","^:",16,"^7A",["^18",[["^7@","^8;"]]],"^7B",null,"^7C",["^18",[null,null]],"^8",1,"^7D",false,"^7",251,"^7E",["^T",["^7G","^7K"]],"^9",251,"^7H",2,"^7I",true,"^17",["^18",["^7?",["^18",[["^7@","^8;"]]]]],"^1;","Evaluates form (as produced by `parse-string` or `parse-next`) in the\n  context of `ctx` (as produced with `init`). To allow namespace\n  switches, establish root binding of `sci/ns` with `sci/binding` or\n  `sci/with-bindings.`"],"^83",["^ ","^7>",null,"^5",["^ ","^6","sci/core.cljc","^7",229,"^8",7,"^9",229,"^:",13,"^17",["^18",["^7?",["^18",[["~$x"]]]]],"^1;","Coerces x into indexing pushback-reader to be used with\n  parse-next. Accepts: string or java.io.Reader."],"^1<","^3A","^6","sci/core.cljc","^:",13,"^7A",["^18",[["~$x"]]],"^7B",null,"^7C",["^18",[null,null]],"^8",1,"^7D",false,"^7",229,"^7E","^7G","^9",229,"^7H",1,"^7I",true,"^17",["^18",["^7?",["^18",[["~$x"]]]]],"^1;","Coerces x into indexing pushback-reader to be used with\n  parse-next. Accepts: string or java.io.Reader."],"~$get-line-number",["^ ","^7>",null,"^5",["^ ","^6","sci/core.cljc","^7",235,"^8",7,"^9",235,"^:",22,"^17",["^18",["^7?",["^18",[["^83"]]]]]],"^1<","^31","^6","sci/core.cljc","^:",22,"^7A",["^18",[["^83"]]],"^7B",null,"^7C",["^18",[null,null]],"^8",1,"^7D",false,"^7",235,"^7E","^7G","^9",235,"^7H",1,"^7I",true,"^17",["^18",["^7?",["^18",[["^83"]]]]]],"~$eval-string*",["^ ","^7>",null,"^5",["^ ","^6","sci/core.cljc","^7",211,"^8",7,"^9",211,"^:",19,"^17",["^18",["^7?",["^18",[["^7@","~$s"]]]]],"^1;","Evaluates string `s` in the context of `ctx` (as produced with\n  `init`)."],"^1<","^2[","^6","sci/core.cljc","^:",19,"^7A",["^18",[["^7@","~$s"]]],"^7B",null,"^7C",["^18",[null,null]],"^8",1,"^7D",false,"^7",211,"^7E","^7G","^9",211,"^7H",2,"^7I",true,"^17",["^18",["^7?",["^18",[["^7@","~$s"]]]]],"^1;","Evaluates string `s` in the context of `ctx` (as produced with\n  `init`)."],"~$new-dynamic-var",["^ ","^7>",null,"^5",["^ ","^6","sci/core.cljc","^7",27,"^8",7,"^9",27,"^:",22,"^17",["^18",["^7?",["^18",[["^7M"],["^7M","^7N"],["^7M","^7N","^7O"]]]]],"^1;","Same as new-var but adds :dynamic true to meta.","^7P",["^ ","^7D",false,"^7Q",3,"^7H",3,"^7A",[["^7M"],["^7M","^7N"],["^7M","^7N","^7O"]],"^17",["^18",[["^7M"],["^7M","^7N"],["^7M","^7N","^7O"]]],"^7C",["^18",[null,null,null]]]],"^1<","^2J","^6","sci/core.cljc","^:",22,"^7P",["^ ","^7D",false,"^7Q",3,"^7H",3,"^7A",[["^7M"],["^7M","^7N"],["^7M","^7N","^7O"]],"^17",["^18",[["^7M"],["^7M","^7N"],["^7M","^7N","^7O"]]],"^7C",["^18",[null,null,null]]],"^7A",[["^7M"],["^7M","^7N"],["^7M","^7N","^7O"]],"^7B",null,"^7Q",3,"^7C",["^18",[null,null,null]],"^8",1,"^7D",false,"^7R",[["^ ","^7Q",1,"^7D",false,"^7S","^7G"],["^ ","^7Q",2,"^7D",false,"^7S","^7G"],["^ ","^7Q",3,"^7D",false,"^7S","^3E"]],"^7",27,"^9",27,"^7H",3,"^7I",true,"^17",["^18",[["^7M"],["^7M","^7N"],["^7M","^7N","^7O"]]],"^1;","Same as new-var but adds :dynamic true to meta."]],"^22",["^ ","^P","^P","^1Q","^1Q","^1L","^1L","^1N","^1O","^1R","^1S","^1U","^1L","^1O","^1O","^1S","^1S"],"~:cljs.analyzer/constants",["^ ","^20",["^T",["~:sci/macro","~:env","~:sci.core/eof","~:dynamic","^1?","~:id","~:eof"]],"~:order",["^8C","^8@","^1?","^8A","^8E","^8B","^8D"]],"^29",["^ ","^21",["^T",[]],"^22",["^T",[]]],"^2:",["^ "],"^2;",["^1T","^1Q","^1M","^1V","^1L","^1S","^1J","^1P","^1K","^1W","^1O"]],"^1>","^P","~:ns-specs",["^ "],"~:ns-spec-vars",["^T",[]],"~:compiler-options",["^43",[["^8I","~:static-fns"],true,["^8I","~:shadow-tweaks"],null,["^8I","~:source-map-inline"],null,["^8I","~:elide-asserts"],false,["^8I","~:optimize-constants"],null,["^8I","^2@"],null,["^8I","~:external-config"],null,["^8I","~:tooling-config"],null,["^8I","~:emit-constants"],null,["^8I","~:load-tests"],null,["^8I","~:form-size-threshold"],null,["^8I","~:data-readers"],null,["^8I","~:infer-externs"],"~:auto",["^8I","^2B"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^8I","~:fn-invoke-direct"],null,["^8I","~:source-map"],"/dev/null"]]]