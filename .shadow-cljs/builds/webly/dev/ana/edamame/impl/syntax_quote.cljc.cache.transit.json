["^ ","~:output",["^ ","~:js","goog.provide('edamame.impl.syntax_quote');\nedamame.impl.syntax_quote.unquote_QMARK_ = (function edamame$impl$syntax_quote$unquote_QMARK_(form){\nreturn ((cljs.core.seq_QMARK_(form)) && (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.first(form),new cljs.core.Symbol(\"clojure.core\",\"unquote\",\"clojure.core/unquote\",843087510,null))));\n});\nedamame.impl.syntax_quote.unquote_splicing_QMARK_ = (function edamame$impl$syntax_quote$unquote_splicing_QMARK_(form){\nreturn ((cljs.core.seq_QMARK_(form)) && (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.first(form),new cljs.core.Symbol(\"clojure.core\",\"unquote-splicing\",\"clojure.core/unquote-splicing\",-552003150,null))));\n});\n/**\n * Expand a list by resolving its syntax quotes and unquotes\n */\nedamame.impl.syntax_quote.expand_list = (function edamame$impl$syntax_quote$expand_list(ctx,reader,s){\nvar s__$1 = cljs.core.seq(s);\nvar r = cljs.core.transient$(cljs.core.PersistentVector.EMPTY);\nwhile(true){\nif(s__$1){\nvar item = cljs.core.first(s__$1);\nvar ret = cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(r,((edamame.impl.syntax_quote.unquote_QMARK_(item))?(new cljs.core.List(null,new cljs.core.Symbol(\"clojure.core\",\"list\",\"clojure.core/list\",-1119203325,null),(new cljs.core.List(null,cljs.core.second(item),null,(1),null)),(2),null)):((edamame.impl.syntax_quote.unquote_splicing_QMARK_(item))?cljs.core.second(item):(new cljs.core.List(null,new cljs.core.Symbol(\"clojure.core\",\"list\",\"clojure.core/list\",-1119203325,null),(new cljs.core.List(null,(edamame.impl.syntax_quote.syntax_quote.cljs$core$IFn$_invoke$arity$3 ? edamame.impl.syntax_quote.syntax_quote.cljs$core$IFn$_invoke$arity$3(ctx,reader,item) : edamame.impl.syntax_quote.syntax_quote.call(null,ctx,reader,item)),null,(1),null)),(2),null))\n)));\nvar G__83361 = cljs.core.next(s__$1);\nvar G__83362 = ret;\ns__$1 = G__83361;\nr = G__83362;\ncontinue;\n} else {\nreturn cljs.core.seq(cljs.core.persistent_BANG_(r));\n}\nbreak;\n}\n});\nedamame.impl.syntax_quote.syntax_quote_coll = (function edamame$impl$syntax_quote$syntax_quote_coll(ctx,reader,type,coll){\nvar res = (new cljs.core.List(null,new cljs.core.Symbol(\"clojure.core\",\"sequence\",\"clojure.core/sequence\",1998774218,null),(new cljs.core.List(null,(new cljs.core.List(null,new cljs.core.Symbol(\"clojure.core\",\"seq\",\"clojure.core/seq\",-1551838743,null),(new cljs.core.List(null,cljs.core.cons(new cljs.core.Symbol(\"clojure.core\",\"concat\",\"clojure.core/concat\",-1236478952,null),edamame.impl.syntax_quote.expand_list(ctx,reader,coll)),null,(1),null)),(2),null)),null,(1),null)),(2),null));\nif(cljs.core.truth_(type)){\nreturn (new cljs.core.List(null,new cljs.core.Symbol(\"clojure.core\",\"apply\",\"clojure.core/apply\",1654646389,null),(new cljs.core.List(null,type,(new cljs.core.List(null,res,null,(1),null)),(2),null)),(3),null));\n} else {\nreturn res;\n}\n});\n/**\n * Decide which map type to use, array-map if less than 16 elements\n */\nedamame.impl.syntax_quote.map_func = (function edamame$impl$syntax_quote$map_func(coll){\nif((cljs.core.count(coll) >= (16))){\nreturn new cljs.core.Symbol(\"clojure.core\",\"hash-map\",\"clojure.core/hash-map\",338908405,null);\n} else {\nreturn new cljs.core.Symbol(\"clojure.core\",\"array-map\",\"clojure.core/array-map\",-1351833961,null);\n}\n});\n/**\n * Flatten a map into a seq of alternate keys and values\n */\nedamame.impl.syntax_quote.flatten_map = (function edamame$impl$syntax_quote$flatten_map(form){\nvar s = cljs.core.seq(form);\nvar key_vals = cljs.core.transient$(cljs.core.PersistentVector.EMPTY);\nwhile(true){\nif(s){\nvar e = cljs.core.first(s);\nvar G__83363 = cljs.core.next(s);\nvar G__83364 = cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(key_vals,cljs.core.key(e)),cljs.core.val(e));\ns = G__83363;\nkey_vals = G__83364;\ncontinue;\n} else {\nreturn cljs.core.seq(cljs.core.persistent_BANG_(key_vals));\n}\nbreak;\n}\n});\nedamame.impl.syntax_quote.syntax_quote_STAR_ = (function edamame$impl$syntax_quote$syntax_quote_STAR_(p__83352,reader,form){\nvar map__83353 = p__83352;\nvar map__83353__$1 = cljs.core.__destructure_map(map__83353);\nvar ctx = map__83353__$1;\nvar gensyms = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__83353__$1,new cljs.core.Keyword(null,\"gensyms\",\"gensyms\",248713782));\nif(cljs.core.special_symbol_QMARK_(form)){\nreturn (new cljs.core.List(null,new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),(new cljs.core.List(null,form,null,(1),null)),(2),null));\n} else {\nif((form instanceof cljs.core.Symbol)){\nreturn (new cljs.core.List(null,new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),(new cljs.core.List(null,(function (){var sym_name = cljs.core.name(form);\nif(cljs.core.special_symbol_QMARK_(form)){\nreturn form;\n} else {\nif(clojure.string.ends_with_QMARK_(sym_name,\"#\")){\nvar temp__5751__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(cljs.core.deref(gensyms),form);\nif(cljs.core.truth_(temp__5751__auto__)){\nvar generated = temp__5751__auto__;\nreturn generated;\n} else {\nvar n = cljs.core.subs.cljs$core$IFn$_invoke$arity$3(sym_name,(0),(((sym_name).length) - (1)));\nvar generated = cljs.core.gensym.cljs$core$IFn$_invoke$arity$1([n,\"__\"].join(''));\nvar generated__$1 = cljs.core.symbol.cljs$core$IFn$_invoke$arity$1([cljs.core.name(generated),\"__auto__\"].join(''));\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(gensyms,cljs.core.assoc,form,generated__$1);\n\nreturn generated__$1;\n}\n} else {\nvar f = new cljs.core.Keyword(null,\"resolve-symbol\",\"resolve-symbol\",-319166964).cljs$core$IFn$_invoke$arity$1(new cljs.core.Keyword(null,\"syntax-quote\",\"syntax-quote\",-1233164847).cljs$core$IFn$_invoke$arity$1(ctx));\nvar fexpr__83355 = (function (){var or__4160__auto__ = f;\nif(cljs.core.truth_(or__4160__auto__)){\nreturn or__4160__auto__;\n} else {\nreturn cljs.core.identity;\n}\n})();\nreturn (fexpr__83355.cljs$core$IFn$_invoke$arity$1 ? fexpr__83355.cljs$core$IFn$_invoke$arity$1(form) : fexpr__83355.call(null,form));\n\n}\n}\n})(),null,(1),null)),(2),null));\n} else {\nif(edamame.impl.syntax_quote.unquote_QMARK_(form)){\nreturn cljs.core.second(form);\n} else {\nif(edamame.impl.syntax_quote.unquote_splicing_QMARK_(form)){\nthrow (new Error(\"unquote-splice not in list\"));\n} else {\nif(cljs.core.coll_QMARK_(form)){\nif((form instanceof cljs.core.IRecord)){\nreturn form;\n} else {\nif(cljs.core.map_QMARK_(form)){\nreturn edamame.impl.syntax_quote.syntax_quote_coll(ctx,reader,edamame.impl.syntax_quote.map_func(form),edamame.impl.syntax_quote.flatten_map(form));\n} else {\nif(cljs.core.vector_QMARK_(form)){\nreturn (new cljs.core.List(null,new cljs.core.Symbol(\"clojure.core\",\"vec\",\"clojure.core/vec\",146271141,null),(new cljs.core.List(null,edamame.impl.syntax_quote.syntax_quote_coll(ctx,reader,null,form),null,(1),null)),(2),null));\n} else {\nif(cljs.core.set_QMARK_(form)){\nreturn edamame.impl.syntax_quote.syntax_quote_coll(ctx,reader,new cljs.core.Symbol(\"clojure.core\",\"hash-set\",\"clojure.core/hash-set\",1229125967,null),form);\n} else {\nif(((cljs.core.seq_QMARK_(form)) || (cljs.core.list_QMARK_(form)))){\nvar seq = cljs.core.seq(form);\nif(seq){\nreturn edamame.impl.syntax_quote.syntax_quote_coll(ctx,reader,null,seq);\n} else {\nreturn cljs.core.list(new cljs.core.Symbol(\"clojure.core\",\"list\",\"clojure.core/list\",-1119203325,null));\n}\n} else {\nthrow (new Error(\"Unknown Collection type\"));\n\n}\n}\n}\n}\n}\n} else {\nif((((form instanceof cljs.core.Keyword)) || (typeof form === 'number') || (cljs.core.char_QMARK_(form)) || (typeof form === 'string') || ((form == null)) || (cljs.core.boolean_QMARK_(form)) || (cljs.core.regexp_QMARK_(form)))){\nreturn form;\n} else {\nreturn (new cljs.core.List(null,new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),(new cljs.core.List(null,form,null,(1),null)),(2),null));\n\n}\n}\n}\n}\n}\n}\n});\nedamame.impl.syntax_quote.add_meta = (function edamame$impl$syntax_quote$add_meta(ctx,reader,form,ret){\nif((((((!((form == null))))?(((((form.cljs$lang$protocol_mask$partition0$ & (262144))) || ((cljs.core.PROTOCOL_SENTINEL === form.cljs$core$IWithMeta$))))?true:false):false))?cljs.core.seq(cljs.core.dissoc.cljs$core$IFn$_invoke$arity$variadic(cljs.core.meta(form),new cljs.core.Keyword(null,\"row-key\",\"row-key\",-1189010712).cljs$core$IFn$_invoke$arity$1(ctx),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"col-key\",\"col-key\",-2009675766).cljs$core$IFn$_invoke$arity$1(ctx),new cljs.core.Keyword(null,\"end-row-key\",\"end-row-key\",-1126662680).cljs$core$IFn$_invoke$arity$1(ctx),new cljs.core.Keyword(null,\"end-col-key\",\"end-col-key\",81813304).cljs$core$IFn$_invoke$arity$1(ctx)], 0))):false)){\nreturn (new cljs.core.List(null,new cljs.core.Symbol(\"cljs.core\",\"with-meta\",\"cljs.core/with-meta\",749126446,null),(new cljs.core.List(null,ret,(new cljs.core.List(null,edamame.impl.syntax_quote.syntax_quote_STAR_(ctx,reader,cljs.core.meta(form)),null,(1),null)),(2),null)),(3),null));\n} else {\nreturn ret;\n}\n});\nedamame.impl.syntax_quote.syntax_quote = (function edamame$impl$syntax_quote$syntax_quote(ctx,reader,form){\nvar ret = edamame.impl.syntax_quote.syntax_quote_STAR_(ctx,reader,form);\nreturn edamame.impl.syntax_quote.add_meta(ctx,reader,form,ret);\n});\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:no-doc",true,"~:doc","Taken and adapted from\n  https://github.com/clojure/tools.reader/blob/master/src/main/clojure/clojure/tools/reader.clj","~:file","edamame/impl/syntax_quote.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",30],"~:ns-aliases",["^ ","~$clojure.spec.alpha","~$cljs.spec.alpha","~$cljs.loader","~$shadow.loader","~$highlight.js","~$module$node_modules$highlight_DOT_js$lib$index","~$react","~$module$node_modules$react$index","~$clojure.tools.reader.reader-types","~$cljs.tools.reader.reader-types","~$clojure.pprint","~$cljs.pprint","~$react-dom","~$module$node_modules$react_dom$index","~$clojure.repl","~$cljs.repl","~$webly.user.tenx.events","~$webly.user.tenx.events-on"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$edamame.impl.syntax-quote","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$clojure.string","^Y","~$str","^Y","~$cljs.core","^[","~$goog","^10"],"~:seen",["^R",["~:require"]],"~:uses",null,"~:require-macros",["^ ","^[","^["],"~:form",["~#list",["~$ns","^T","Taken and adapted from\n  https://github.com/clojure/tools.reader/blob/master/src/main/clojure/clojure/tools/reader.clj",["^ ","^6",true],["^16",["^12",["^Y","~:as","^Z"]]]]],"~:flags",["^ ","^12",["^R",[]]],"~:js-deps",["^ "],"~:deps",["^10","^[","^Y"]],"^V","^T","~:resource-id",["~:shadow.build.classpath/resource","edamame/impl/syntax_quote.cljc"],"~:compiled-at",1621210459965,"~:resource-name","edamame/impl/syntax_quote.cljc","~:warnings",[],"~:source","(ns edamame.impl.syntax-quote\n  \"Taken and adapted from\n  https://github.com/clojure/tools.reader/blob/master/src/main/clojure/clojure/tools/reader.clj\"\n  {:no-doc true}\n  (:require [clojure.string :as str]))\n\n(defn unquote? [form]\n  (and (seq? form)\n       (= (first form) 'clojure.core/unquote)))\n\n(defn- unquote-splicing? [form]\n  (and (seq? form)\n       (= (first form) 'clojure.core/unquote-splicing)))\n\n(declare syntax-quote)\n\n(defn- expand-list\n  \"Expand a list by resolving its syntax quotes and unquotes\"\n  [ctx #?(:cljs ^not-native reader :default reader) s]\n  (loop [s (seq s) r (transient [])]\n    (if s\n      (let [item (first s)\n            ret (conj! r\n                       (cond\n                         (unquote? item)          (list 'clojure.core/list (second item))\n                         (unquote-splicing? item) (second item)\n                         :else                    (list 'clojure.core/list (syntax-quote ctx reader item))))]\n        (recur (next s) ret))\n      (seq (persistent! r)))))\n\n(defn- syntax-quote-coll [ctx #?(:cljs ^not-native reader :default reader) type coll]\n  ;; We use sequence rather than seq here to fix http://dev.clojure.org/jira/browse/CLJ-1444\n  ;; But because of http://dev.clojure.org/jira/browse/CLJ-1586 we still need to call seq on the form\n  (let [res (list 'clojure.core/sequence\n                  (list 'clojure.core/seq\n                        (cons 'clojure.core/concat\n                              (expand-list ctx reader coll))))]\n    (if type\n      (list 'clojure.core/apply type res)\n      res)))\n\n(defn map-func\n  \"Decide which map type to use, array-map if less than 16 elements\"\n  [coll]\n  (if (>= (count coll) 16)\n    'clojure.core/hash-map\n    'clojure.core/array-map))\n\n(defn- flatten-map\n  \"Flatten a map into a seq of alternate keys and values\"\n  [form]\n  (loop [s (seq form) key-vals (transient [])]\n    (if s\n      (let [e (first s)]\n        (recur (next s) (-> key-vals\n                            (conj! (key e))\n                            (conj! (val e)))))\n      (seq (persistent! key-vals)))))\n\n(defn- syntax-quote* [{:keys [:gensyms] :as ctx}\n                     #?(:cljs ^not-native reader :default reader) form]\n  (cond\n    (special-symbol? form) (list 'quote form)\n    (symbol? form)\n    (list 'quote\n          (let [sym-name (name form)]\n            (cond (special-symbol? form) form\n                  (str/ends-with? sym-name \"#\")\n                  (if-let [generated (get @gensyms form)]\n                    generated\n                    (let [n (subs sym-name 0 (dec (count sym-name)))\n                          generated (gensym (str n \"__\"))\n                          generated (symbol (str (name generated) \"__auto__\"))]\n                      (swap! gensyms assoc form generated)\n                      generated))\n                  :else\n                  (let [f (-> ctx :syntax-quote :resolve-symbol)]\n                    ((or f identity) form)))))\n    (unquote? form) (second form)\n    (unquote-splicing? form) (throw (new #?(:cljs js/Error :clj IllegalStateException)\n                                         \"unquote-splice not in list\"))\n\n    (coll? form)\n    (cond\n      (instance? #?(:clj clojure.lang.IRecord :cljs IRecord) form) form\n      (map? form) (syntax-quote-coll ctx reader (map-func form) (flatten-map form))\n      (vector? form) (list 'clojure.core/vec (syntax-quote-coll ctx reader nil form))\n      (set? form) (syntax-quote-coll ctx reader 'clojure.core/hash-set form)\n      (or (seq? form) (list? form))\n      (let [seq (seq form)]\n        (if seq\n          (syntax-quote-coll ctx reader nil seq)\n          '(clojure.core/list)))\n\n      :else (throw (new #?(:clj UnsupportedOperationException\n                           :cljs js/Error) \"Unknown Collection type\")))\n\n    (or (keyword? form)\n        (number? form)\n        (char? form)\n        (string? form)\n        (nil? form)\n        (boolean? form)\n        #?(:clj (instance? java.util.regex.Pattern form)\n           :cljs (regexp? form)))\n    form\n    :else (list 'quote form)))\n\n(defn- add-meta [ctx reader form ret]\n  (if (and #?(:clj (instance? clojure.lang.IObj form)\n              :cljs (implements? IWithMeta form))\n           (seq (dissoc (meta form) (:row-key ctx) (:col-key ctx) (:end-row-key ctx) (:end-col-key ctx))))\n    (list #?(:clj 'clojure.core/with-meta\n             :cljs 'cljs.core/with-meta) ret (syntax-quote* ctx reader (meta form)))\n    ret))\n\n(defn syntax-quote [ctx reader form]\n  (let [ret (syntax-quote* ctx reader form)]\n    (add-meta ctx reader form ret)))\n","~:reader-features",["^R",["~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings","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","names",["edamame.impl.syntax-quote/unquote?","form","cljs.core/seq?","cljs.core._EQ_","cljs.core/first","edamame.impl.syntax-quote/unquote-splicing?","edamame.impl.syntax-quote/expand-list","ctx","reader","s","cljs.core/seq","r","cljs.core/transient","item","ret","cljs.core.conj_BANG_","cljs.core/List","cljs.core/second","edamame.impl.syntax-quote/syntax-quote","cljs.core/next","cljs.core/persistent!","edamame.impl.syntax-quote/syntax-quote-coll","type","coll","res","cljs.core/cons","edamame.impl.syntax-quote/map-func","cljs.core/count","edamame.impl.syntax-quote/flatten-map","key-vals","e","cljs.core/key","cljs.core/val","p__83352","map__83353","cljs.core/--destructure-map","gensyms","cljs.core.get","edamame.impl.syntax-quote/syntax-quote*","cljs.core/special-symbol?","cljs.core/Symbol","sym-name","cljs.core/name","clojure.string/ends-with?","temp__5751__auto__","generated","cljs.core/deref","n","cljs.core.subs","cljs.core.gensym","cljs.core.symbol","cljs.core.swap_BANG_","cljs.core/assoc","f","fexpr__83355","or__4160__auto__","cljs.core/identity","js/Error","cljs.core/coll?","cljs.core/IRecord","cljs.core/map?","cljs.core/vector?","cljs.core/set?","cljs.core/list?","seq","cljs.core/Keyword","cljs.core/char?","cljs.core/boolean?","cljs.core/regexp?","edamame.impl.syntax-quote/add-meta","cljs.core/PROTOCOL_SENTINEL","cljs.core.dissoc","cljs.core/meta"]],"~:used-vars",["^R",["~$cljs.core/IRecord","~$cljs.core/PROTOCOL_SENTINEL","~$cljs.core/boolean?","~$cljs.core/char?","~$edamame.impl.syntax-quote/unquote-splicing?","~$cljs.core/vector?","~$cljs.core/=","~$cljs.core/count","~$cljs.core/seq","~$edamame.impl.syntax-quote/syntax-quote*","~$cljs.core/Keyword","~$cljs.core/special-symbol?","~$cljs.core/dissoc","~$edamame.impl.syntax-quote/flatten-map","~$clojure.string/ends-with?","~$cljs.core/map?","~$edamame.impl.syntax-quote/unquote?","~$cljs.core/List","~$cljs.core/swap!","~$edamame.impl.syntax-quote/syntax-quote-coll","~$cljs.core/conj!","~$cljs.core/persistent!","~$cljs.core/set?","~$cljs.core/meta","~$cljs.core/list?","~$cljs.core/second","~$cljs.core/key","~$cljs.core/next","~$edamame.impl.syntax-quote/syntax-quote","~$cljs.core/not","~$cljs.core/assoc","~$cljs.core/Symbol","~$cljs.core/coll?","~$edamame.impl.syntax-quote/map-func","~$cljs.core/first","~$cljs.core/seq?","~$cljs.core/regexp?","~$cljs.core/val","~$js/Error","~$edamame.impl.syntax-quote/add-meta","~$edamame.impl.syntax-quote/expand-list"]]],"~:cache-keys",["~#cmap",[["^1=","goog/dom/tagname.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^R",[]],"~:deps-syms",["^10","~$goog.dom.HtmlElement"]]],["^1=","goog/math/math.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2H",["^ ","^2I",null,"^2J",["^R",[]],"^2K",["^10","~$goog.array","~$goog.asserts"]]],["^1=","goog/html/trustedtypes.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2H",["^ ","^2I",null,"^2J",["^R",[]],"^2K",["^10"]]],["^1=","goog/labs/useragent/browser.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2H",["^ ","^2I",null,"^2J",["^R",[]],"^2K",["^10","^2M","~$goog.labs.userAgent.util","~$goog.object","~$goog.string.internal"]]],["^1=","goog/html/safeurl.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2H",["^ ","^2I",null,"^2J",["^R",[]],"^2K",["^10","^2N","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.i18n.bidi.Dir","~$goog.i18n.bidi.DirectionalString","~$goog.string.Const","~$goog.string.TypedString","^2Q"]]],["^1=","goog/array/array.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2H",["^ ","^2I",null,"^2J",["^R",[]],"^2K",["^10","^2N"]]],["^1=","goog/debug/error.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2H",["^ ","^2I",null,"^2J",["^R",[]],"^2K",["^10"]]],["^1=","goog/dom/nodetype.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2H",["^ ","^2I",null,"^2J",["^R",[]],"^2K",["^10"]]],["^1=","goog/string/typedstring.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2H",["^ ","^2I",null,"^2J",["^R",[]],"^2K",["^10"]]],["^1=","goog/object/object.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2H",["^ ","^2I",null,"^2J",["^R",[]],"^2K",["^10"]]],["^1=","goog/dom/asserts.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2H",["^ ","^2I",null,"^2J",["^R",[]],"^2K",["^10","^2N"]]],"~:SHADOW-TIMESTAMP",[1618720883000,1618720883000,1618720422000],["^1=","edamame/impl/syntax_quote.cljc"],["f87da88a2b92cfa3a3c95bc61fe12328dcdcc3dc","^2H",["^ ","^2I",null,"^2J",["^R",[]],"^2K",["^10","^[","^Y"]]],["^1=","goog/math/long.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2H",["^ ","^2I",null,"^2J",["^R",[]],"^2K",["^10","^2N","~$goog.reflect"]]],["^1=","goog/html/trustedresourceurl.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2H",["^ ","^2I",null,"^2J",["^R",[]],"^2K",["^10","^2N","~$goog.fs.blob","^2R","~$goog.html.SafeScript","~$goog.html.trustedtypes","^2T","^2U","^2V","^2W"]]],["^1=","goog/string/internal.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2H",["^ ","^2I",null,"^2J",["^R",[]],"^2K",["^10"]]],["^1=","goog/functions/functions.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2H",["^ ","^2I",null,"^2J",["^R",[]],"^2K",["^10"]]],["^1=","goog/html/safestyle.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2H",["^ ","^2I",null,"^2J",["^R",[]],"^2K",["^10","^2M","^2N","~$goog.html.SafeUrl","^2V","^2W","^2Q"]]],["^1=","goog/dom/safe.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2H",["^ ","^2I",null,"^2J",["^R",[]],"^2K",["^10","^2N","~$goog.dom.asserts","~$goog.functions","~$goog.html.SafeHtml","^2[","~$goog.html.SafeStyle","^31","^2S","~$goog.html.uncheckedconversions","^2V","^2Q"]]],["^1=","goog/structs/map.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2H",["^ ","^2I",null,"^2J",["^R",[]],"^2K",["^10","~$goog.iter.Iterator","~$goog.iter.StopIteration"]]],["^1=","goog/html/safehtml.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2H",["^ ","^2I",null,"^2J",["^R",[]],"^2K",["^10","^2M","^2N","~$goog.dom.TagName","~$goog.dom.tags","^2[","^35","~$goog.html.SafeStyleSheet","^31","^2S","^30","^2T","^2U","~$goog.labs.userAgent.browser","^2P","^2V","^2W","^2Q"]]],["^1=","goog/dom/tags.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2H",["^ ","^2I",null,"^2J",["^R",[]],"^2K",["^10","^2P"]]],["^1=","goog/fs/blob.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2H",["^ ","^2I",null,"^2J",["^R",[]],"^2K",["^10","^2M"]]],["^1=","goog/asserts/asserts.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2H",["^ ","^2I",null,"^2J",["^R",[]],"^2K",["^10","~$goog.debug.Error","~$goog.dom.NodeType"]]],["^1=","goog/uri/uri.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2H",["^ ","^2I",null,"^2J",["^R",[]],"^2K",["^10","^2M","^2N","~$goog.string","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^1=","goog/i18n/bidi.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2H",["^ ","^2I",null,"^2J",["^R",[]],"^2K",["^10"]]],["^1=","goog/fs/url.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2H",["^ ","^2I",null,"^2J",["^R",[]],"^2K",["^10"]]],["^1=","goog/base.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2H",["^ ","^2I",null,"^2J",["^R",[]],"^2K",[]]],["^1=","goog/structs/structs.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2H",["^ ","^2I",null,"^2J",["^R",[]],"^2K",["^10","^2M","^2P"]]],["^1=","clojure/string.cljs"],["86bedf67c795c72bde3feb0415b41be8b95f2cbb","^2H",["^ ","^2I",null,"^2J",["^R",[]],"^2K",["^10","^[","^3?","~$goog.string.StringBuffer"]]],["^1=","goog/string/string.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2H",["^ ","^2I",null,"^2J",["^R",[]],"^2K",["^10","~$goog.dom.safe","^36","^2V","^2Q"]]],["^1=","goog/reflect/reflect.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2H",["^ ","^2I",null,"^2J",["^R",[]],"^2K",["^10"]]],["^1=","goog/labs/useragent/util.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2H",["^ ","^2I",null,"^2J",["^R",[]],"^2K",["^10","^2Q"]]],["^1=","goog/string/stringbuffer.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2H",["^ ","^2I",null,"^2J",["^R",[]],"^2K",["^10"]]],["^1=","goog/iter/iter.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2H",["^ ","^2I",null,"^2J",["^R",[]],"^2K",["^10","^2M","^2N","^33","~$goog.math"]]],["^1=","goog/html/uncheckedconversions.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2H",["^ ","^2I",null,"^2J",["^R",[]],"^2K",["^10","^2N","^34","^2[","^35","^3;","^31","^2S","^2V","^2Q","^2T"]]],["^1=","goog/dom/htmlelement.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2H",["^ ","^2I",null,"^2J",["^R",[]],"^2K",["^10"]]],["^1=","cljs/core.cljs"],["86bedf67c795c72bde3feb0415b41be8b95f2cbb","^2H",["^ ","^2I",null,"^2J",["^R",[]],"^2K",["^10","~$goog.math.Long","~$goog.math.Integer","^3?","^2P","^2M","~$goog.Uri","^3E"]]],["^1=","goog/html/safescript.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2H",["^ ","^2I",null,"^2J",["^R",[]],"^2K",["^10","^2V","^2W","^30","^2N"]]],["^1=","goog/html/safestylesheet.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2H",["^ ","^2I",null,"^2J",["^R",[]],"^2K",["^10","^2V","^35","^2W","^2M","^2P","^2N","^2Q"]]],["^1=","goog/math/integer.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2H",["^ ","^2I",null,"^2J",["^R",[]],"^2K",["^10","^2Y"]]],["^1=","goog/uri/utils.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2H",["^ ","^2I",null,"^2J",["^R",[]],"^2K",["^10","^2N","^3?"]]],["^1=","goog/string/const.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2H",["^ ","^2I",null,"^2J",["^R",[]],"^2K",["^10","^2N","^2W"]]]]],"~:clj-info",["^ ","jar:file:/home/andreas/.m2/repository/org/clojure/clojurescript/1.10.844/clojurescript-1.10.844.jar!/cljs/env.cljc",1618720422000,"jar:file:/home/andreas/.m2/repository/org/clojure/clojurescript/1.10.844/clojurescript-1.10.844.jar!/cljs/externs.clj",1618720422000,"jar:file:/home/andreas/.m2/repository/org/clojure/clojurescript/1.10.844/clojurescript-1.10.844.jar!/cljs/tagged_literals.cljc",1618720422000,"jar:file:/home/andreas/.m2/repository/org/clojure/data.json/2.1.0/data.json-2.1.0.jar!/clojure/data/json.clj",1618502954000,"jar:file:/home/andreas/.m2/repository/org/clojure/clojurescript/1.10.844/clojurescript-1.10.844.jar!/cljs/compiler.cljc",1618720422000,"jar:file:/home/andreas/.m2/repository/org/clojure/clojurescript/1.10.844/clojurescript-1.10.844.jar!/cljs/instant.clj",1618720422000,"jar:file:/home/andreas/.m2/repository/org/clojure/clojurescript/1.10.844/clojurescript-1.10.844.jar!/cljs/source_map/base64_vlq.clj",1618720422000,"jar:file:/home/andreas/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/edn.clj",1618716228000,"jar:file:/home/andreas/.m2/repository/org/clojure/tools.reader/1.3.5/tools.reader-1.3.5.jar!/clojure/tools/reader/default_data_readers.clj",1618501370000,"jar:file:/home/andreas/.m2/repository/org/clojure/clojurescript/1.10.844/clojurescript-1.10.844.jar!/cljs/analyzer.cljc",1618720422000,"jar:file:/home/andreas/.m2/repository/org/clojure/clojurescript/1.10.844/clojurescript-1.10.844.jar!/cljs/source_map.clj",1618720422000,"jar:file:/home/andreas/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/core.clj",1618716228000,"jar:file:/home/andreas/.m2/repository/org/clojure/tools.reader/1.3.5/tools.reader-1.3.5.jar!/clojure/tools/reader.clj",1618501370000,"jar:file:/home/andreas/.m2/repository/org/clojure/clojurescript/1.10.844/clojurescript-1.10.844.jar!/cljs/js_deps.cljc",1618720422000,"jar:file:/home/andreas/.m2/repository/org/clojure/clojurescript/1.10.844/clojurescript-1.10.844.jar!/cljs/core.cljc",1618720422000,"jar:file:/home/andreas/.m2/repository/org/clojure/tools.reader/1.3.5/tools.reader-1.3.5.jar!/clojure/tools/reader/impl/inspect.clj",1618501370000,"jar:file:/home/andreas/.m2/repository/org/clojure/tools.reader/1.3.5/tools.reader-1.3.5.jar!/clojure/tools/reader/reader_types.clj",1618501370000,"jar:file:/home/andreas/.m2/repository/binaryage/devtools/1.0.2/devtools-1.0.2.jar!/devtools/defaults.clj",1618720434000,"jar:file:/home/andreas/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/java/io.clj",1618716228000,"jar:file:/home/andreas/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/pprint.clj",1618716228000,"jar:file:/home/andreas/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/set.clj",1618716228000,"jar:file:/home/andreas/.m2/repository/org/clojure/clojurescript/1.10.844/clojurescript-1.10.844.jar!/cljs/analyzer/impl.cljc",1618720422000,"jar:file:/home/andreas/.m2/repository/org/clojure/tools.reader/1.3.5/tools.reader-1.3.5.jar!/clojure/tools/reader/impl/errors.clj",1618501370000,"jar:file:/home/andreas/.m2/repository/org/clojure/clojurescript/1.10.844/clojurescript-1.10.844.jar!/cljs/util.cljc",1618720422000,"jar:file:/home/andreas/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/string.clj",1618716228000,"jar:file:/home/andreas/.m2/repository/org/clojure/clojurescript/1.10.844/clojurescript-1.10.844.jar!/cljs/source_map/base64.clj",1618720422000,"jar:file:/home/andreas/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/instant.clj",1618716228000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6",true,"^7","Taken and adapted from\n  https://github.com/clojure/tools.reader/blob/master/src/main/clojure/clojure/tools/reader.clj","^8","edamame/impl/syntax_quote.cljc","^9",1,"^:",5,"^;",1,"^<",30],"^=",["^ ","^>","^?","^@","^A","^B","^C","^D","^E","^F","^G","^H","^I","^J","^K","^L","^M","^N","^O"],"^P",null,"^Q",["^R",[]],"^S","^T","^W",null,"^X",["^ ","^Y","^Y","^Z","^Y","^[","^[","^10","^10"],"^11",["^R",["^12"]],"~:shadow/js-access-global",["^R",["Error"]],"^13",null,"~:defs",["^ ","~$unquote-splicing?",["^ ","~:protocol-inline",null,"^5",["^ ","^8","edamame/impl/syntax_quote.cljc","^9",11,"^:",8,"^;",11,"^<",25,"~:private",true,"~:arglists",["^16",["~$quote",["^16",[["~$form"]]]]]],"^4@",true,"^S","^1M","^8","edamame/impl/syntax_quote.cljc","^<",25,"~:method-params",["^16",[["^4C"]]],"~:protocol-impl",null,"~:arglists-meta",["^16",[null,null]],"^:",1,"~:variadic?",false,"^9",11,"~:ret-tag","~$boolean","^;",11,"~:max-fixed-arity",1,"~:fn-var",true,"^4A",["^16",["^4B",["^16",[["^4C"]]]]]],"~$syntax-quote*",["^ ","^4?",null,"^5",["^ ","^8","edamame/impl/syntax_quote.cljc","^9",60,"^:",8,"^;",60,"^<",21,"^4@",true,"^4A",["^16",["^4B",["^16",[[["^ ","~:keys",["~:gensyms"],"^18","~$ctx"],"~$reader","^4C"]]]]]],"^4@",true,"^S","^1R","^8","edamame/impl/syntax_quote.cljc","^<",21,"^4D",["^16",[["~$p__83352","^4P","^4C"]]],"^4E",null,"^4F",["^16",[null,null]],"^:",1,"^4G",false,"^9",60,"^4H",["^R",[null,"~$clj","~$any","^1Z","~$clj-nil"]],"^;",60,"^4J",3,"^4K",true,"^4A",["^16",["^4B",["^16",[[["^ ","^4M",["^4N"],"^18","^4O"],"^4P","^4C"]]]]]],"~$flatten-map",["^ ","^4?",null,"^5",["^ ","^8","edamame/impl/syntax_quote.cljc","^9",49,"^:",8,"^;",49,"^<",19,"^4@",true,"^4A",["^16",["^4B",["^16",[["^4C"]]]]],"^7","Flatten a map into a seq of alternate keys and values"],"^4@",true,"^S","^1V","^8","edamame/impl/syntax_quote.cljc","^<",19,"^4D",["^16",[["^4C"]]],"^4E",null,"^4F",["^16",[null,null]],"^:",1,"^4G",false,"^9",49,"^4H","~$seq","^;",49,"^4J",1,"^4K",true,"^4A",["^16",["^4B",["^16",[["^4C"]]]]],"^7","Flatten a map into a seq of alternate keys and values"],"~$unquote?",["^ ","^4?",null,"^5",["^ ","^8","edamame/impl/syntax_quote.cljc","^9",7,"^:",7,"^;",7,"^<",15,"^4A",["^16",["^4B",["^16",[["^4C"]]]]]],"^S","^1Y","^8","edamame/impl/syntax_quote.cljc","^<",15,"^4D",["^16",[["^4C"]]],"^4E",null,"^4F",["^16",[null,null]],"^:",1,"^4G",false,"^9",7,"^4H","^4I","^;",7,"^4J",1,"^4K",true,"^4A",["^16",["^4B",["^16",[["^4C"]]]]]],"~$syntax-quote-coll",["^ ","^4?",null,"^5",["^ ","^8","edamame/impl/syntax_quote.cljc","^9",31,"^:",8,"^;",31,"^<",25,"^4@",true,"^4A",["^16",["^4B",["^16",[["^4O","^4P","~$type","~$coll"]]]]]],"^4@",true,"^S","^20","^8","edamame/impl/syntax_quote.cljc","^<",25,"^4D",["^16",[["^4O","^4P","^4Y","^4Z"]]],"^4E",null,"^4F",["^16",[null,null]],"^:",1,"^4G",false,"^9",31,"^4H","^1Z","^;",31,"^4J",4,"^4K",true,"^4A",["^16",["^4B",["^16",[["^4O","^4P","^4Y","^4Z"]]]]]],"~$syntax-quote",["^ ","^4?",null,"^5",["^ ","^8","edamame/impl/syntax_quote.cljc","^9",117,"^:",7,"^;",117,"^<",19,"^4A",["^16",["^4B",["^16",[["^4O","^4P","^4C"]]]]]],"^S","^29","^8","edamame/impl/syntax_quote.cljc","^<",19,"^4D",["^16",[["^4O","^4P","^4C"]]],"^4E",null,"^4F",["^16",[null,null]],"^:",1,"^4G",false,"^9",117,"^4H",["^R",[null,"^1Z"]],"^;",117,"^4J",3,"^4K",true,"^4A",["^16",["^4B",["^16",[["^4O","^4P","^4C"]]]]]],"~$map-func",["^ ","^4?",null,"^5",["^ ","^8","edamame/impl/syntax_quote.cljc","^9",42,"^:",7,"^;",42,"^<",15,"^4A",["^16",["^4B",["^16",[["^4Z"]]]]],"^7","Decide which map type to use, array-map if less than 16 elements"],"^S","^2>","^8","edamame/impl/syntax_quote.cljc","^<",15,"^4D",["^16",[["^4Z"]]],"^4E",null,"^4F",["^16",[null,null]],"^:",1,"^4G",false,"^9",42,"^4H","^2<","^;",42,"^4J",1,"^4K",true,"^4A",["^16",["^4B",["^16",[["^4Z"]]]]],"^7","Decide which map type to use, array-map if less than 16 elements"],"~$add-meta",["^ ","^4?",null,"^5",["^ ","^8","edamame/impl/syntax_quote.cljc","^9",109,"^:",8,"^;",109,"^<",16,"^4@",true,"^4A",["^16",["^4B",["^16",[["^4O","^4P","^4C","~$ret"]]]]]],"^4@",true,"^S","^2D","^8","edamame/impl/syntax_quote.cljc","^<",16,"^4D",["^16",[["^4O","^4P","^4C","^52"]]],"^4E",null,"^4F",["^16",[null,null]],"^:",1,"^4G",false,"^9",109,"^4H",["^R",[null,"^1Z"]],"^;",109,"^4J",4,"^4K",true,"^4A",["^16",["^4B",["^16",[["^4O","^4P","^4C","^52"]]]]]],"~$expand-list",["^ ","^4?",null,"^5",["^ ","^8","edamame/impl/syntax_quote.cljc","^9",17,"^:",8,"^;",17,"^<",19,"^4@",true,"^4A",["^16",["^4B",["^16",[["^4O","^4P","~$s"]]]]],"^7","Expand a list by resolving its syntax quotes and unquotes"],"^4@",true,"^S","^2E","^8","edamame/impl/syntax_quote.cljc","^<",19,"^4D",["^16",[["^4O","^4P","~$s"]]],"^4E",null,"^4F",["^16",[null,null]],"^:",1,"^4G",false,"^9",17,"^4H","^4V","^;",17,"^4J",3,"^4K",true,"^4A",["^16",["^4B",["^16",[["^4O","^4P","~$s"]]]]],"^7","Expand a list by resolving its syntax quotes and unquotes"]],"^14",["^ ","^[","^["],"~:cljs.analyzer/constants",["^ ","^11",["^R",["~$clojure.core/list","~$clojure.core/vec","~:else","~:end-row-key","~:row-key","~$clojure.core/seq","~:col-key","~$clojure.core/sequence","~:resolve-symbol","~$cljs.core/with-meta","~$clojure.core/hash-set","~:syntax-quote","~$clojure.core/unquote-splicing","~$clojure.core/hash-map","~$clojure.core/apply","^4N","~$clojure.core/unquote","~$clojure.core/array-map","~$clojure.core/concat","~:end-col-key","^4B"]],"~:order",["^5D","^5A","^55","^57","^5<","^5:","^5F","^5C","^5B","^5E","^4N","^4B","^5=","^5@","^56","^5?","^59","^5;","^58","^5G","^5>"]],"^19",["^ ","^12",["^R",[]]],"^1:",["^ "],"^1;",["^10","^[","^Y"]],"^V","^T","~:ns-specs",["^ "],"~:ns-spec-vars",["^R",[]],"~:compiler-options",["^2G",[["^5K","~:static-fns"],true,["^5K","~:shadow-tweaks"],null,["^5K","~:source-map-inline"],null,["^5K","~:elide-asserts"],false,["^5K","~:optimize-constants"],null,["^5K","^1@"],null,["^5K","~:external-config"],null,["^5K","~:tooling-config"],null,["^5K","~:emit-constants"],null,["^5K","~:load-tests"],null,["^5K","~:form-size-threshold"],null,["^5K","~:data-readers"],null,["^5K","~:infer-externs"],"~:auto",["^5K","^1B"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^5K","~:fn-invoke-direct"],null,["^5K","~:source-map"],"/dev/null"]]]