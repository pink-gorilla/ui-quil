["^ ","~:output",["^ ","~:js","goog.provide('cljs.analyzer.api');\n/**\n * Creates an empty compilation state Atom<Map>. The optional opts arg is a map\n * representing the compiler configuration. See the documentation\n * for details: https://clojurescript.org/reference/compiler-options\n */\ncljs.analyzer.api.empty_state = (function cljs$analyzer$api$empty_state(var_args){\nvar G__75459 = arguments.length;\nswitch (G__75459) {\ncase 0:\nreturn cljs.analyzer.api.empty_state.cljs$core$IFn$_invoke$arity$0();\n\nbreak;\ncase 1:\nreturn cljs.analyzer.api.empty_state.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(cljs.analyzer.api.empty_state.cljs$core$IFn$_invoke$arity$0 = (function (){\nif((!((cljs.env._STAR_compiler_STAR_ == null)))){\nreturn cljs.env._STAR_compiler_STAR_;\n} else {\nreturn cljs.env.default_compiler_env.cljs$core$IFn$_invoke$arity$0();\n}\n}));\n\n(cljs.analyzer.api.empty_state.cljs$core$IFn$_invoke$arity$1 = (function (opts){\nreturn cljs.env.default_compiler_env.cljs$core$IFn$_invoke$arity$1(opts);\n}));\n\n(cljs.analyzer.api.empty_state.cljs$lang$maxFixedArity = 1);\n\n/**\n * Return the current compiler state atom.\n */\ncljs.analyzer.api.current_state = (function cljs$analyzer$api$current_state(){\nreturn cljs.env._STAR_compiler_STAR_;\n});\n/**\n * Return the current file under analysis or compilation.\n */\ncljs.analyzer.api.current_file = (function cljs$analyzer$api$current_file(){\nreturn cljs.analyzer._STAR_cljs_file_STAR_;\n});\n/**\n * Return the current ns under analysis or compilation.\n */\ncljs.analyzer.api.current_ns = (function cljs$analyzer$api$current_ns(){\nreturn cljs.analyzer._STAR_cljs_ns_STAR_;\n});\n/**\n * Creates an empty analysis environment.\n */\ncljs.analyzer.api.empty_env = (function cljs$analyzer$api$empty_env(){\nreturn cljs.analyzer.empty_env();\n});\n/**\n * Test if the given warning-type is enabled.\n */\ncljs.analyzer.api.warning_enabled_QMARK_ = (function cljs$analyzer$api$warning_enabled_QMARK_(warning_type){\nreturn cljs.analyzer._STAR_cljs_warnings_STAR_.call(null,warning_type);\n});\n/**\n * The default warning handler.\n * \n * Outputs the warning messages to *err*.\n */\ncljs.analyzer.api.default_warning_handler = (function cljs$analyzer$api$default_warning_handler(warning_type,env,extra){\nreturn cljs.analyzer.default_warning_handler(warning_type,env,extra);\n});\n/**\n * Helper for generating the standard analyzer messages for warnings. Should be\n *   passed warn-type and warn-info. See with-warning-handlers.\n */\ncljs.analyzer.api.warning_message = (function cljs$analyzer$api$warning_message(warn_type,warn_info){\nreturn cljs.analyzer.error_message.cljs$core$IFn$_invoke$arity$2(warn_type,warn_info);\n});\n/**\n * Get the enabled warning types.\n */\ncljs.analyzer.api.enabled_warnings = (function cljs$analyzer$api$enabled_warnings(){\nreturn cljs.analyzer._STAR_cljs_warnings_STAR_;\n});\n/**\n * Return the compiler options from compiler state.\n */\ncljs.analyzer.api.get_options = (function cljs$analyzer$api$get_options(var_args){\nvar G__75461 = arguments.length;\nswitch (G__75461) {\ncase 0:\nreturn cljs.analyzer.api.get_options.cljs$core$IFn$_invoke$arity$0();\n\nbreak;\ncase 1:\nreturn cljs.analyzer.api.get_options.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(cljs.analyzer.api.get_options.cljs$core$IFn$_invoke$arity$0 = (function (){\nreturn cljs.analyzer.api.get_options.cljs$core$IFn$_invoke$arity$1(cljs.analyzer.api.current_state());\n}));\n\n(cljs.analyzer.api.get_options.cljs$core$IFn$_invoke$arity$1 = (function (state){\nreturn cljs.core.get.cljs$core$IFn$_invoke$arity$2(cljs.core.deref(state),new cljs.core.Keyword(null,\"options\",\"options\",99638489));\n}));\n\n(cljs.analyzer.api.get_options.cljs$lang$maxFixedArity = 1);\n\n/**\n * Return the currently computed Google Closure js dependency index from the\n *   compiler state.\n */\ncljs.analyzer.api.get_js_index = (function cljs$analyzer$api$get_js_index(var_args){\nvar G__75463 = arguments.length;\nswitch (G__75463) {\ncase 0:\nreturn cljs.analyzer.api.get_js_index.cljs$core$IFn$_invoke$arity$0();\n\nbreak;\ncase 1:\nreturn cljs.analyzer.api.get_js_index.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(cljs.analyzer.api.get_js_index.cljs$core$IFn$_invoke$arity$0 = (function (){\nreturn cljs.analyzer.api.get_js_index.cljs$core$IFn$_invoke$arity$1(cljs.analyzer.api.current_state());\n}));\n\n(cljs.analyzer.api.get_js_index.cljs$core$IFn$_invoke$arity$1 = (function (state){\nreturn cljs.core.get.cljs$core$IFn$_invoke$arity$2(cljs.core.deref(state),new cljs.core.Keyword(null,\"js-dependency-index\",\"js-dependency-index\",-1887042131));\n}));\n\n(cljs.analyzer.api.get_js_index.cljs$lang$maxFixedArity = 1);\n\n/**\n * ClojureScript's default analysis passes.\n */\ncljs.analyzer.api.default_passes = cljs.analyzer.default_passes;\n/**\n * Given an analysis environment resolve a var. Analogous to\n * clojure.core/resolve\n */\ncljs.analyzer.api.resolve = (function cljs$analyzer$api$resolve(env,sym){\nif(cljs.core.map_QMARK_(env)){\n} else {\nthrow (new Error(\"Assert failed: (map? env)\"));\n}\n\nif((sym instanceof cljs.core.Symbol)){\n} else {\nthrow (new Error(\"Assert failed: (symbol? sym)\"));\n}\n\ntry{var _STAR_private_var_access_nowarn_STAR__orig_val__75466 = cljs.analyzer._STAR_private_var_access_nowarn_STAR_;\nvar _STAR_private_var_access_nowarn_STAR__temp_val__75467 = true;\n(cljs.analyzer._STAR_private_var_access_nowarn_STAR_ = _STAR_private_var_access_nowarn_STAR__temp_val__75467);\n\ntry{return cljs.analyzer.resolve_var.cljs$core$IFn$_invoke$arity$3(env,sym,cljs.analyzer.confirm_var_exists_throw());\n}finally {(cljs.analyzer._STAR_private_var_access_nowarn_STAR_ = _STAR_private_var_access_nowarn_STAR__orig_val__75466);\n}}catch (e75464){var e = e75464;\nreturn cljs.analyzer.resolve_macro_var(env,sym);\n}});\n/**\n * Return all namespaces. Analagous to clojure.core/all-ns but\n *   returns symbols identifying namespaces not Namespace instances.\n */\ncljs.analyzer.api.all_ns = (function cljs$analyzer$api$all_ns(var_args){\nvar G__75469 = arguments.length;\nswitch (G__75469) {\ncase 0:\nreturn cljs.analyzer.api.all_ns.cljs$core$IFn$_invoke$arity$0();\n\nbreak;\ncase 1:\nreturn cljs.analyzer.api.all_ns.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(cljs.analyzer.api.all_ns.cljs$core$IFn$_invoke$arity$0 = (function (){\nreturn cljs.analyzer.api.all_ns.cljs$core$IFn$_invoke$arity$1(cljs.env._STAR_compiler_STAR_);\n}));\n\n(cljs.analyzer.api.all_ns.cljs$core$IFn$_invoke$arity$1 = (function (state){\nreturn cljs.core.keys(cljs.core.get.cljs$core$IFn$_invoke$arity$2(cljs.core.deref(state),new cljs.core.Keyword(\"cljs.analyzer\",\"namespaces\",\"cljs.analyzer/namespaces\",-260788927)));\n}));\n\n(cljs.analyzer.api.all_ns.cljs$lang$maxFixedArity = 1);\n\n/**\n * Given a namespace return the corresponding namespace analysis map. Analagous\n *   to clojure.core/find-ns.\n */\ncljs.analyzer.api.find_ns = (function cljs$analyzer$api$find_ns(var_args){\nvar G__75472 = arguments.length;\nswitch (G__75472) {\ncase 1:\nreturn cljs.analyzer.api.find_ns.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn cljs.analyzer.api.find_ns.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(cljs.analyzer.api.find_ns.cljs$core$IFn$_invoke$arity$1 = (function (sym){\nreturn cljs.analyzer.api.find_ns.cljs$core$IFn$_invoke$arity$2(cljs.env._STAR_compiler_STAR_,sym);\n}));\n\n(cljs.analyzer.api.find_ns.cljs$core$IFn$_invoke$arity$2 = (function (state,sym){\nif((sym instanceof cljs.core.Symbol)){\n} else {\nthrow (new Error(\"Assert failed: (symbol? sym)\"));\n}\n\nreturn cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(cljs.core.deref(state),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"cljs.analyzer\",\"namespaces\",\"cljs.analyzer/namespaces\",-260788927),sym], null));\n}));\n\n(cljs.analyzer.api.find_ns.cljs$lang$maxFixedArity = 2);\n\n/**\n * Given a namespace return all the var analysis maps. Analagous to\n *   clojure.core/ns-interns but returns var analysis maps not vars.\n */\ncljs.analyzer.api.ns_interns = (function cljs$analyzer$api$ns_interns(var_args){\nvar G__75480 = arguments.length;\nswitch (G__75480) {\ncase 1:\nreturn cljs.analyzer.api.ns_interns.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn cljs.analyzer.api.ns_interns.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(cljs.analyzer.api.ns_interns.cljs$core$IFn$_invoke$arity$1 = (function (ns){\nreturn cljs.analyzer.api.ns_interns.cljs$core$IFn$_invoke$arity$2(cljs.env._STAR_compiler_STAR_,ns);\n}));\n\n(cljs.analyzer.api.ns_interns.cljs$core$IFn$_invoke$arity$2 = (function (state,ns){\nif((ns instanceof cljs.core.Symbol)){\n} else {\nthrow (new Error(\"Assert failed: (symbol? ns)\"));\n}\n\nreturn cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(cljs.core.deref(state),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"cljs.analyzer\",\"namespaces\",\"cljs.analyzer/namespaces\",-260788927),ns,new cljs.core.Keyword(null,\"macros\",\"macros\",811339431)], null)),cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(cljs.core.deref(state),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"cljs.analyzer\",\"namespaces\",\"cljs.analyzer/namespaces\",-260788927),ns,new cljs.core.Keyword(null,\"defs\",\"defs\",1398449717)], null))], 0));\n}));\n\n(cljs.analyzer.api.ns_interns.cljs$lang$maxFixedArity = 2);\n\n/**\n * Given a namespace return all the public var analysis maps. Analagous to\n *   clojure.core/ns-publics but returns var analysis maps not vars.\n */\ncljs.analyzer.api.ns_publics = (function cljs$analyzer$api$ns_publics(var_args){\nvar G__75516 = arguments.length;\nswitch (G__75516) {\ncase 1:\nreturn cljs.analyzer.api.ns_publics.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn cljs.analyzer.api.ns_publics.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(cljs.analyzer.api.ns_publics.cljs$core$IFn$_invoke$arity$1 = (function (ns){\nreturn cljs.analyzer.api.ns_publics.cljs$core$IFn$_invoke$arity$2(cljs.env._STAR_compiler_STAR_,ns);\n}));\n\n(cljs.analyzer.api.ns_publics.cljs$core$IFn$_invoke$arity$2 = (function (state,ns){\nif((ns instanceof cljs.core.Symbol)){\n} else {\nthrow (new Error(\"Assert failed: (symbol? ns)\"));\n}\n\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentArrayMap.EMPTY,cljs.core.remove.cljs$core$IFn$_invoke$arity$2((function (p__75524){\nvar vec__75525 = p__75524;\nvar k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__75525,(0),null);\nvar v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__75525,(1),null);\nreturn new cljs.core.Keyword(null,\"private\",\"private\",-558947994).cljs$core$IFn$_invoke$arity$1(v);\n}),cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(cljs.core.deref(state),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"cljs.analyzer\",\"namespaces\",\"cljs.analyzer/namespaces\",-260788927),ns,new cljs.core.Keyword(null,\"macros\",\"macros\",811339431)], null)),cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(cljs.core.deref(state),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"cljs.analyzer\",\"namespaces\",\"cljs.analyzer/namespaces\",-260788927),ns,new cljs.core.Keyword(null,\"defs\",\"defs\",1398449717)], null))], 0))));\n}));\n\n(cljs.analyzer.api.ns_publics.cljs$lang$maxFixedArity = 2);\n\n/**\n * Given a namespace and a symbol return the corresponding var analysis map.\n *   Analagous to clojure.core/ns-resolve but returns var analysis map not Var.\n */\ncljs.analyzer.api.ns_resolve = (function cljs$analyzer$api$ns_resolve(var_args){\nvar G__75532 = arguments.length;\nswitch (G__75532) {\ncase 2:\nreturn cljs.analyzer.api.ns_resolve.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 3:\nreturn cljs.analyzer.api.ns_resolve.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(cljs.analyzer.api.ns_resolve.cljs$core$IFn$_invoke$arity$2 = (function (ns,sym){\nreturn cljs.analyzer.api.ns_resolve.cljs$core$IFn$_invoke$arity$3(cljs.env._STAR_compiler_STAR_,ns,sym);\n}));\n\n(cljs.analyzer.api.ns_resolve.cljs$core$IFn$_invoke$arity$3 = (function (state,ns,sym){\nif((ns instanceof cljs.core.Symbol)){\n} else {\nthrow (new Error(\"Assert failed: (symbol? ns)\"));\n}\n\nif((sym instanceof cljs.core.Symbol)){\n} else {\nthrow (new Error(\"Assert failed: (symbol? sym)\"));\n}\n\nreturn cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(cljs.core.deref(state),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"cljs.analyzer\",\"namespaces\",\"cljs.analyzer/namespaces\",-260788927),ns,new cljs.core.Keyword(null,\"defs\",\"defs\",1398449717),sym], null));\n}));\n\n(cljs.analyzer.api.ns_resolve.cljs$lang$maxFixedArity = 3);\n\n/**\n * Removes the namespace named by the symbol.\n */\ncljs.analyzer.api.remove_ns = (function cljs$analyzer$api$remove_ns(var_args){\nvar G__75534 = arguments.length;\nswitch (G__75534) {\ncase 1:\nreturn cljs.analyzer.api.remove_ns.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn cljs.analyzer.api.remove_ns.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(cljs.analyzer.api.remove_ns.cljs$core$IFn$_invoke$arity$1 = (function (ns){\nreturn cljs.analyzer.api.remove_ns.cljs$core$IFn$_invoke$arity$2(cljs.env._STAR_compiler_STAR_,ns);\n}));\n\n(cljs.analyzer.api.remove_ns.cljs$core$IFn$_invoke$arity$2 = (function (state,ns){\nif((ns instanceof cljs.core.Symbol)){\n} else {\nthrow (new Error(\"Assert failed: (symbol? ns)\"));\n}\n\nreturn cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$variadic(state,cljs.core.update_in,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"cljs.analyzer\",\"namespaces\",\"cljs.analyzer/namespaces\",-260788927)], null),cljs.core.dissoc,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([ns], 0));\n}));\n\n(cljs.analyzer.api.remove_ns.cljs$lang$maxFixedArity = 2);\n\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:doc","This is intended to be a stable api for those who need programmatic access\n  to the analyzer.","~:file","cljs/analyzer/api.cljc","~:line",9,"~:column",5,"~:end-line",9,"~:end-column",22],"~:ns-aliases",["^ ","~$clojure.spec.alpha","~$cljs.spec.alpha","~$cljs.loader","~$shadow.loader","~$highlight.js","~$module$node_modules$highlight_DOT_js$lib$index","~$react","~$module$node_modules$react$index","~$clojure.tools.reader.reader-types","~$cljs.tools.reader.reader-types","~$clojure.pprint","~$cljs.pprint","~$react-dom","~$module$node_modules$react_dom$index","~$clojure.repl","~$cljs.repl","~$webly.user.tenx.events","~$webly.user.tenx.events-on"],"~:use-macros",null,"~:excludes",["~#set",["~$find-ns","~$remove-ns","~$ns-publics","~$ns-resolve","~$ns-interns","~$all-ns","~$resolve"]],"~:name","~$cljs.analyzer.api","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$cljs.analyzer","^13","~$ana","^13","~$cljs.env","^15","~$env","^15","~$cljs.core","^17","~$goog","^18"],"~:seen",["^Q",["~:require"]],"~:uses",null,"~:require-macros",["^ ","^17","^17"],"~:form",["~#list",["~$ns","^Z","This is intended to be a stable api for those who need programmatic access\n  to the analyzer.",["^1>",["~:refer-clojure","~:exclude",["^W","^V","^U","^X","^R","^T","^S"]]],["^1>",["^1:",["^13","~:as","^14"],["^15","^1B","^16"]]]]],"~:flags",["^ ","^1:",["^Q",[]]],"~:js-deps",["^ "],"~:deps",["^18","^17","^13","^15"]],"^10","^Z","~:resource-id",["~:shadow.build.classpath/resource","cljs/analyzer/api.cljc"],"~:compiled-at",1621210455709,"~:resource-name","cljs/analyzer/api.cljc","~:warnings",[],"~:source",";   Copyright (c) Rich Hickey. All rights reserved.\n;   The use and distribution terms for this software are covered by the\n;   Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)\n;   which can be found in the file epl-v10.html at the root of this distribution.\n;   By using this software in any fashion, you are agreeing to be bound by\n;   the terms of this license.\n;   You must not remove this notice, or any other, from this software.\n\n(ns cljs.analyzer.api\n  \"This is intended to be a stable api for those who need programmatic access\n  to the analyzer.\"\n  (:refer-clojure :exclude [all-ns ns-interns ns-resolve resolve find-ns\n                            ns-publics remove-ns])\n  #?(:clj  (:require [cljs.analyzer :as ana]\n                     [cljs.env :as env]\n                     [cljs.util :as util]\n                     [clojure.edn :as edn]\n                     [clojure.java.io :as io])\n     :cljs (:require [cljs.analyzer :as ana]\n                     [cljs.env :as env])))\n\n;; =============================================================================\n;; Useful Utilities\n\n(defn empty-state\n  \"Creates an empty compilation state Atom<Map>. The optional opts arg is a map\n   representing the compiler configuration. See the documentation\n   for details: https://clojurescript.org/reference/compiler-options\"\n  ([]\n   (if-not (nil? env/*compiler*)\n     env/*compiler*\n     (env/default-compiler-env)))\n  ([opts]\n   (env/default-compiler-env opts)))\n\n(defn current-state\n  \"Return the current compiler state atom.\"\n  []\n  env/*compiler*)\n\n(defn current-file\n  \"Return the current file under analysis or compilation.\"\n  []\n  ana/*cljs-file*)\n\n(defn current-ns\n  \"Return the current ns under analysis or compilation.\"\n  []\n  ana/*cljs-ns*)\n\n(defmacro with-state\n  \"Run the body with the given compilation state Atom<Map>.\"\n  [state & body]\n  `(env/with-compiler-env ~state\n     ~@body))\n\n(defn empty-env\n  \"Creates an empty analysis environment.\"\n  []\n  (ana/empty-env))\n\n(defmacro no-warn\n  \"Disable analyzer warnings for any analysis executed in body.\"\n  [& body]\n  (let [no-warnings (zipmap (keys ana/*cljs-warnings*) (repeat false))]\n    `(binding [ana/*cljs-warnings* ~no-warnings]\n       ~@body)))\n\n(defn warning-enabled?\n  \"Test if the given warning-type is enabled.\"\n  [warning-type]\n  (ana/*cljs-warnings* warning-type))\n\n(defn default-warning-handler\n  \"The default warning handler.\n\n   Outputs the warning messages to *err*.\"\n  [warning-type env extra]\n  (ana/default-warning-handler warning-type env extra))\n\n(defmacro with-warning-handlers\n  \"Helper macro for custom handling of emitted warnings. Handlers should be\n   a vector of functions. The signature of these functions is\n   [warn-type env warn-info]. warn-type is a keyword describing the warning,\n   env is the analysis environment, and warn-info is a map of extra useful\n   information for a particular warning type.\"\n  [handlers & body]\n  `(ana/with-warning-handlers ~handlers\n     ~@body))\n\n(defn warning-message\n  \"Helper for generating the standard analyzer messages for warnings. Should be\n  passed warn-type and warn-info. See with-warning-handlers.\"\n  [warn-type warn-info]\n  (ana/error-message warn-type warn-info))\n\n(defn enabled-warnings\n  \"Get the enabled warning types.\"\n  []\n  ana/*cljs-warnings*)\n\n(defn get-options\n  \"Return the compiler options from compiler state.\"\n  ([] (get-options (current-state)))\n  ([state]\n   (get @state :options)))\n\n(defn get-js-index\n  \"Return the currently computed Google Closure js dependency index from the\n  compiler state.\"\n  ([] (get-js-index (current-state)))\n  ([state]\n   (get @state :js-dependency-index)))\n\n(def\n  ^{:doc \"ClojureScript's default analysis passes.\"}\n  default-passes ana/default-passes)\n\n(defmacro with-passes\n  \"Evaluate the body with the provided sequence of compiler passes.\"\n  [passes & body]\n  `(binding [ana/*passes* ~passes]\n     ~@body))\n\n#?(:clj\n   (defn analyze\n     \"Given an environment, a map containing {:locals (mapping of names to bindings), :context\n     (one of :statement, :expr, :return), :ns (a symbol naming the\n     compilation ns)}, and form, returns an expression object (a map\n     containing at least :form, :op and :env keys). If expr has any (immediately)\n     nested exprs, must have :children entry. This must be a vector of keywords naming\n     the immediately nested fields mapped to an expr or vector of exprs. This will\n     facilitate code walking without knowing the details of the op set.\"\n     ([env form] (analyze env form nil))\n     ([env form name] (analyze env form name nil))\n     ([env form name opts]\n      (analyze (or (current-state) (empty-state opts)) env form name opts))\n     ([state env form name opts]\n      (env/with-compiler-env state\n        (binding [ana/*cljs-warning-handlers* (:warning-handlers opts ana/*cljs-warning-handlers*)]\n          (ana/analyze env form name opts))))))\n\n#?(:clj\n   (defn forms-seq\n     \"Seq of Clojure/ClojureScript forms from rdr, a java.io.Reader. Optionally\n     accepts a filename argument which will be used in any emitted errors.\"\n     ([rdr] (ana/forms-seq* rdr nil))\n     ([rdr filename] (ana/forms-seq* rdr filename))))\n\n#?(:clj\n   (defn parse-ns\n     \"Helper for parsing only the essential namespace information from a\n      ClojureScript source file and returning a cljs.closure/IJavaScript compatible\n      map _not_ a namespace AST node.\n\n      By default does not load macros or perform any analysis of dependencies. If\n      opts parameter provided :analyze-deps and :load-macros keys their values will\n      be used for *analyze-deps* and *load-macros* bindings respectively. This\n      function does _not_ side-effect the ambient compilation environment unless\n      requested via opts where :restore is false.\"\n     ([src] (parse-ns src nil nil))\n     ([src opts] (parse-ns src nil opts))\n     ([src dest opts]\n      (parse-ns (or (current-state) (empty-state opts)) src dest opts))\n     ([state src dest opts]\n      (env/with-compiler-env state\n        (binding [ana/*cljs-warning-handlers* (:warning-handlers opts ana/*cljs-warning-handlers*)]\n          (ana/parse-ns src dest opts))))))\n#?(:clj\n   (defn analyze-file\n     \"Given a java.io.File, java.net.URL or a string identifying a resource on the\n      classpath attempt to analyze it.\n\n      This function side-effects the ambient compilation environment\n      `cljs.env/*compiler*` to aggregate analysis information. opts argument is\n      compiler options, if :cache-analysis true will cache analysis to\n      \\\":output-dir/some/ns/foo.cljs.cache.edn\\\". This function does not return a\n      meaningful value.\"\n     ([f] (analyze-file f nil))\n     ([f opts]\n      (analyze-file (or (current-state) (empty-state opts)) f opts))\n     ([state f opts]\n      (env/with-compiler-env state\n        (binding [ana/*cljs-warning-handlers* (:warning-handlers opts ana/*cljs-warning-handlers*)]\n          (ana/analyze-file f opts))))))\n\n#?(:clj\n   (defn read-analysis-cache\n     \"Read an analysis cache.\"\n     [cache-file]\n     (case (util/ext cache-file)\n       \"edn\" (edn/read-string (slurp cache-file))\n       \"json\" (let [{:keys [reader read]} @ana/transit]\n                (with-open [is (io/input-stream cache-file)]\n                  (read (reader is :json ana/transit-read-opts)))))))\n\n;; =============================================================================\n;; Main API\n\n(defn resolve\n  \"Given an analysis environment resolve a var. Analogous to\n   clojure.core/resolve\"\n  [env sym]\n  {:pre [(map? env) (symbol? sym)]}\n  (try\n    (binding [ana/*private-var-access-nowarn* true]\n      (ana/resolve-var env sym\n        (ana/confirm-var-exists-throw)))\n    (catch #?(:clj Exception :cljs :default) e\n      (ana/resolve-macro-var env sym))))\n\n(defn all-ns\n  \"Return all namespaces. Analagous to clojure.core/all-ns but\n  returns symbols identifying namespaces not Namespace instances.\"\n  ([]\n   (all-ns env/*compiler*))\n  ([state]\n   (keys (get @state ::ana/namespaces))))\n\n(defn find-ns\n  \"Given a namespace return the corresponding namespace analysis map. Analagous\n  to clojure.core/find-ns.\"\n  ([sym]\n   (find-ns env/*compiler* sym))\n  ([state sym]\n   {:pre [(symbol? sym)]}\n   (get-in @state [::ana/namespaces sym])))\n\n(defn ns-interns\n  \"Given a namespace return all the var analysis maps. Analagous to\n  clojure.core/ns-interns but returns var analysis maps not vars.\"\n  ([ns]\n   (ns-interns env/*compiler* ns))\n  ([state ns]\n   {:pre [(symbol? ns)]}\n   (merge\n     (get-in @state [::ana/namespaces ns :macros])\n     (get-in @state [::ana/namespaces ns :defs]))))\n\n(defn ns-publics\n  \"Given a namespace return all the public var analysis maps. Analagous to\n  clojure.core/ns-publics but returns var analysis maps not vars.\"\n  ([ns]\n   (ns-publics env/*compiler* ns))\n  ([state ns]\n   {:pre [(symbol? ns)]}\n   (->> (merge\n          (get-in @state [::ana/namespaces ns :macros])\n          (get-in @state [::ana/namespaces ns :defs]))\n        (remove (fn [[k v]] (:private v)))\n        (into {}))))\n\n(defn ns-resolve\n  \"Given a namespace and a symbol return the corresponding var analysis map.\n  Analagous to clojure.core/ns-resolve but returns var analysis map not Var.\"\n  ([ns sym]\n   (ns-resolve env/*compiler* ns sym))\n  ([state ns sym]\n   {:pre [(symbol? ns) (symbol? sym)]}\n   (get-in @state [::ana/namespaces ns :defs sym])))\n\n(defn remove-ns\n  \"Removes the namespace named by the symbol.\"\n  ([ns]\n   (remove-ns env/*compiler* ns))\n  ([state ns]\n   {:pre [(symbol? ns)]}\n   (swap! state update-in [::ana/namespaces] dissoc ns)))\n\n(defmacro in-cljs-user\n  \"Binds cljs.analyzer/*cljs-ns* to 'cljs.user and uses the given compilation\n  environment atom and runs body.\"\n  [env & body]\n  `(binding [cljs.analyzer/*cljs-ns* 'cljs.user]\n     (cljs.env/with-compiler-env ~env\n       ~@body)))\n","~:reader-features",["^Q",["~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings","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","names",["var_args","G__75459","cljs.analyzer.api/empty-state","js/Error","cljs.env/*compiler*","cljs.env.default_compiler_env","opts","cljs.analyzer.api/current-state","cljs.analyzer.api/current-file","cljs.analyzer/*cljs-file*","cljs.analyzer.api/current-ns","cljs.analyzer/*cljs-ns*","cljs.analyzer.api/empty-env","cljs.analyzer/empty-env","cljs.analyzer.api/warning-enabled?","warning-type","cljs.analyzer/*cljs-warnings*","cljs.analyzer.api/default-warning-handler","env","extra","cljs.analyzer/default-warning-handler","cljs.analyzer.api/warning-message","warn-type","warn-info","cljs.analyzer/error-message","cljs.analyzer.api/enabled-warnings","G__75461","cljs.analyzer.api/get-options","cljs.analyzer.api.get_options","state","cljs.core/deref","cljs.core.get","G__75463","cljs.analyzer.api/get-js-index","cljs.analyzer.api.get_js_index","cljs.analyzer.api/default-passes","cljs.analyzer/default-passes","cljs.analyzer.api/resolve","sym","cljs.core/map?","cljs.core/Symbol","e75464","*private-var-access-nowarn*-orig-val__75466","*private-var-access-nowarn*-temp-val__75467","cljs.analyzer/*private-var-access-nowarn*","cljs.analyzer.resolve_var","cljs.analyzer/confirm-var-exists-throw","e","cljs.analyzer/resolve-macro-var","G__75469","cljs.analyzer.api/all-ns","cljs.analyzer.api.all_ns","cljs.core/keys","G__75472","cljs.analyzer.api/find-ns","cljs.analyzer.api.find_ns","cljs.core.get_in","G__75480","cljs.analyzer.api/ns-interns","ns","cljs.analyzer.api.ns_interns","cljs.core.merge","G__75516","cljs.analyzer.api/ns-publics","cljs.analyzer.api.ns_publics","cljs.core.remove","p__75524","vec__75525","cljs.core.nth","k","v","cljs.core.into","G__75532","cljs.analyzer.api/ns-resolve","cljs.analyzer.api.ns_resolve","G__75534","cljs.analyzer.api/remove-ns","cljs.analyzer.api.remove_ns","cljs.core.swap_BANG_","cljs.core/update-in","cljs.core/dissoc"]],"~:used-vars",["^Q",["~$cljs.analyzer.api/empty-state","~$cljs.analyzer/resolve-var","~$cljs.analyzer.api/default-passes","~$cljs.analyzer.api/default-warning-handler","~$cljs.core/keys","~$cljs.env/default-compiler-env","~$cljs.core/deref","~$cljs.analyzer.api/current-file","~$cljs.analyzer.api/empty-env","~$cljs.analyzer.api/current-ns","~$cljs.core/dissoc","~$cljs.analyzer.api/ns-interns","~$cljs.analyzer.api/all-ns","~$cljs.env/*compiler*","~$cljs.analyzer.api/get-js-index","~$cljs.core/into","~$cljs.core/map?","~$cljs.analyzer/*cljs-warnings*","~$cljs.analyzer/error-message","~$cljs.analyzer/default-warning-handler","~$cljs.core/get-in","~$cljs.core/swap!","~$cljs.core/get","~$cljs.analyzer.api/find-ns","~$cljs.core/remove","~$cljs.analyzer.api/resolve","~$cljs.analyzer/empty-env","~$cljs.analyzer.api/warning-message","~$cljs.analyzer/default-passes","~$cljs.analyzer.api/current-state","~$cljs.analyzer.api/remove-ns","~$cljs.analyzer.api/get-options","~$cljs.analyzer.api/ns-publics","~$cljs.analyzer/resolve-macro-var","~$cljs.analyzer/confirm-var-exists-throw","~$cljs.core/not","~$cljs.core/Symbol","~$cljs.analyzer.api/warning-enabled?","~$cljs.analyzer/*private-var-access-nowarn*","~$cljs.analyzer/*cljs-file*","~$cljs.analyzer.api/enabled-warnings","~$cljs.core/merge","~$cljs.analyzer/*cljs-ns*","~$cljs.core/update-in","~$cljs.analyzer.api/ns-resolve","~$js/Error"]]],"~:cache-keys",["~#cmap",[["^1G","goog/dom/tagname.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^Q",[]],"~:deps-syms",["^18","~$goog.dom.HtmlElement"]]],["^1G","cljs/tools/reader/impl/utils.cljs"],["b2f6b36cef8b996bd0d23135abede05af16d76be","^2W",["^ ","^2X",null,"^2Y",["^Q",[]],"^2Z",["^18","^17","~$clojure.string","~$goog.string"]]],["^1G","goog/math/math.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2W",["^ ","^2X",null,"^2Y",["^Q",[]],"^2Z",["^18","~$goog.array","~$goog.asserts"]]],["^1G","goog/html/trustedtypes.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2W",["^ ","^2X",null,"^2Y",["^Q",[]],"^2Z",["^18"]]],["^1G","cljs/env.cljc"],["86bedf67c795c72bde3feb0415b41be8b95f2cbb","^2W",["^ ","^2X",null,"^2Y",["^Q",[]],"^2Z",["^18","^17"]]],["^1G","goog/labs/useragent/browser.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2W",["^ ","^2X",null,"^2Y",["^Q",[]],"^2Z",["^18","^32","~$goog.labs.userAgent.util","~$goog.object","~$goog.string.internal"]]],["^1G","goog/html/safeurl.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2W",["^ ","^2X",null,"^2Y",["^Q",[]],"^2Z",["^18","^33","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.i18n.bidi.Dir","~$goog.i18n.bidi.DirectionalString","~$goog.string.Const","~$goog.string.TypedString","^36"]]],["^1G","goog/array/array.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2W",["^ ","^2X",null,"^2Y",["^Q",[]],"^2Z",["^18","^33"]]],["^1G","goog/debug/error.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2W",["^ ","^2X",null,"^2Y",["^Q",[]],"^2Z",["^18"]]],["^1G","cljs/tools/reader/edn.cljs"],["b2f6b36cef8b996bd0d23135abede05af16d76be","^2W",["^ ","^2X",null,"^2Y",["^Q",[]],"^2Z",["^18","^17","~$cljs.tools.reader.impl.errors","^F","~$cljs.tools.reader.impl.utils","~$cljs.tools.reader.impl.commons","~$cljs.tools.reader","^31","~$goog.string.StringBuffer"]]],["^1G","goog/dom/nodetype.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2W",["^ ","^2X",null,"^2Y",["^Q",[]],"^2Z",["^18"]]],["^1G","cljs/tools/reader/impl/inspect.cljs"],["b2f6b36cef8b996bd0d23135abede05af16d76be","^2W",["^ ","^2X",null,"^2Y",["^Q",[]],"^2Z",["^18","^17"]]],["^1G","cljs/tools/reader.cljs"],["b2f6b36cef8b996bd0d23135abede05af16d76be","^2W",["^ ","^2X",null,"^2Y",["^Q",[]],"^2Z",["^18","^17","^F","^3>","^3?","^3=","^32","^31","^3A"]]],["^1G","goog/string/typedstring.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2W",["^ ","^2X",null,"^2Y",["^Q",[]],"^2Z",["^18"]]],["^1G","goog/object/object.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2W",["^ ","^2X",null,"^2Y",["^Q",[]],"^2Z",["^18"]]],["^1G","goog/dom/asserts.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2W",["^ ","^2X",null,"^2Y",["^Q",[]],"^2Z",["^18","^33"]]],"~:SHADOW-TIMESTAMP",[1618720883000,1618720883000,1618720422000],["^1G","goog/math/long.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2W",["^ ","^2X",null,"^2Y",["^Q",[]],"^2Z",["^18","^33","~$goog.reflect"]]],["^1G","goog/html/trustedresourceurl.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2W",["^ ","^2X",null,"^2Y",["^Q",[]],"^2Z",["^18","^33","~$goog.fs.blob","^37","~$goog.html.SafeScript","~$goog.html.trustedtypes","^39","^3:","^3;","^3<"]]],["^1G","goog/string/internal.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2W",["^ ","^2X",null,"^2Y",["^Q",[]],"^2Z",["^18"]]],["^1G","goog/functions/functions.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2W",["^ ","^2X",null,"^2Y",["^Q",[]],"^2Z",["^18"]]],["^1G","goog/html/safestyle.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2W",["^ ","^2X",null,"^2Y",["^Q",[]],"^2Z",["^18","^32","^33","~$goog.html.SafeUrl","^3;","^3<","^36"]]],["^1G","goog/dom/safe.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2W",["^ ","^2X",null,"^2Y",["^Q",[]],"^2Z",["^18","^33","~$goog.dom.asserts","~$goog.functions","~$goog.html.SafeHtml","^3E","~$goog.html.SafeStyle","^3G","^38","~$goog.html.uncheckedconversions","^3;","^36"]]],["^1G","goog/structs/map.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2W",["^ ","^2X",null,"^2Y",["^Q",[]],"^2Z",["^18","~$goog.iter.Iterator","~$goog.iter.StopIteration"]]],["^1G","goog/html/safehtml.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2W",["^ ","^2X",null,"^2Y",["^Q",[]],"^2Z",["^18","^32","^33","~$goog.dom.TagName","~$goog.dom.tags","^3E","^3K","~$goog.html.SafeStyleSheet","^3G","^38","^3F","^39","^3:","~$goog.labs.userAgent.browser","^35","^3;","^3<","^36"]]],["^1G","goog/dom/tags.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2W",["^ ","^2X",null,"^2Y",["^Q",[]],"^2Z",["^18","^35"]]],["^1G","goog/fs/blob.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2W",["^ ","^2X",null,"^2Y",["^Q",[]],"^2Z",["^18","^32"]]],["^1G","cljs/reader.cljs"],["86bedf67c795c72bde3feb0415b41be8b95f2cbb","^2W",["^ ","^2X",null,"^2Y",["^Q",[]],"^2Z",["^18","^17","^35","^3@","~$cljs.tools.reader.edn","^3A"]]],["^1G","goog/asserts/asserts.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2W",["^ ","^2X",null,"^2Y",["^Q",[]],"^2Z",["^18","~$goog.debug.Error","~$goog.dom.NodeType"]]],["^1G","cljs/tagged_literals.cljc"],["86bedf67c795c72bde3feb0415b41be8b95f2cbb","^2W",["^ ","^2X",null,"^2Y",["^Q",[]],"^2Z",["^18","^17","~$cljs.reader"]]],["^1G","goog/uri/uri.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2W",["^ ","^2X",null,"^2Y",["^Q",[]],"^2Z",["^18","^32","^33","^31","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^1G","goog/i18n/bidi.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2W",["^ ","^2X",null,"^2Y",["^Q",[]],"^2Z",["^18"]]],["^1G","goog/fs/url.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2W",["^ ","^2X",null,"^2Y",["^Q",[]],"^2Z",["^18"]]],["^1G","goog/base.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2W",["^ ","^2X",null,"^2Y",["^Q",[]],"^2Z",[]]],["^1G","goog/structs/structs.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2W",["^ ","^2X",null,"^2Y",["^Q",[]],"^2Z",["^18","^32","^35"]]],["^1G","cljs/tools/reader/impl/errors.cljs"],["b2f6b36cef8b996bd0d23135abede05af16d76be","^2W",["^ ","^2X",null,"^2Y",["^Q",[]],"^2Z",["^18","^17","^F","^30","~$cljs.tools.reader.impl.inspect"]]],["^1G","clojure/string.cljs"],["86bedf67c795c72bde3feb0415b41be8b95f2cbb","^2W",["^ ","^2X",null,"^2Y",["^Q",[]],"^2Z",["^18","^17","^31","^3A"]]],["^1G","goog/string/string.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2W",["^ ","^2X",null,"^2Y",["^Q",[]],"^2Z",["^18","~$goog.dom.safe","^3L","^3;","^36"]]],["^1G","goog/reflect/reflect.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2W",["^ ","^2X",null,"^2Y",["^Q",[]],"^2Z",["^18"]]],["^1G","goog/labs/useragent/util.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2W",["^ ","^2X",null,"^2Y",["^Q",[]],"^2Z",["^18","^36"]]],["^1G","goog/string/stringbuffer.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2W",["^ ","^2X",null,"^2Y",["^Q",[]],"^2Z",["^18"]]],["^1G","cljs/tools/reader/reader_types.cljs"],["b2f6b36cef8b996bd0d23135abede05af16d76be","^2W",["^ ","^2X",null,"^2Y",["^Q",[]],"^2Z",["^18","^17","^3>","^31","^3A"]]],["^1G","goog/iter/iter.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2W",["^ ","^2X",null,"^2Y",["^Q",[]],"^2Z",["^18","^32","^33","^3I","~$goog.math"]]],["^1G","goog/html/uncheckedconversions.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2W",["^ ","^2X",null,"^2Y",["^Q",[]],"^2Z",["^18","^33","^3J","^3E","^3K","^3Q","^3G","^38","^3;","^36","^39"]]],["^1G","cljs/tools/reader/impl/commons.cljs"],["b2f6b36cef8b996bd0d23135abede05af16d76be","^2W",["^ ","^2X",null,"^2Y",["^Q",[]],"^2Z",["^18","^17","^3=","^F","^3>"]]],["^1G","goog/dom/htmlelement.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2W",["^ ","^2X",null,"^2Y",["^Q",[]],"^2Z",["^18"]]],["^1G","cljs/core.cljs"],["86bedf67c795c72bde3feb0415b41be8b95f2cbb","^2W",["^ ","^2X",null,"^2Y",["^Q",[]],"^2Z",["^18","~$goog.math.Long","~$goog.math.Integer","^31","^35","^32","~$goog.Uri","^3A"]]],["^1G","goog/html/safescript.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2W",["^ ","^2X",null,"^2Y",["^Q",[]],"^2Z",["^18","^3;","^3<","^3F","^33"]]],["^1G","goog/html/safestylesheet.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2W",["^ ","^2X",null,"^2Y",["^Q",[]],"^2Z",["^18","^3;","^3K","^3<","^32","^35","^33","^36"]]],["^1G","cljs/analyzer/api.cljc"],["86bedf67c795c72bde3feb0415b41be8b95f2cbb","^2W",["^ ","^2X",null,"^2Y",["^Q",[]],"^2Z",["^18","^17","^13","^15"]]],["^1G","goog/math/integer.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2W",["^ ","^2X",null,"^2Y",["^Q",[]],"^2Z",["^18","^3C"]]],["^1G","clojure/set.cljs"],["86bedf67c795c72bde3feb0415b41be8b95f2cbb","^2W",["^ ","^2X",null,"^2Y",["^Q",[]],"^2Z",["^18","^17"]]],["^1G","goog/uri/utils.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2W",["^ ","^2X",null,"^2Y",["^Q",[]],"^2Z",["^18","^33","^31"]]],["^1G","goog/string/const.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2W",["^ ","^2X",null,"^2Y",["^Q",[]],"^2Z",["^18","^33","^3<"]]],["^1G","cljs/analyzer.cljc"],["86bedf67c795c72bde3feb0415b41be8b95f2cbb","^2W",["^ ","^2X",null,"^2Y",["^Q",[]],"^2Z",["^18","^17","~$cljs.analyzer.impl","^15","^3V","~$cljs.tagged-literals","^3@","^F","~$clojure.set","^30","^31"]]],["^1G","cljs/analyzer/impl.cljc"],["86bedf67c795c72bde3feb0415b41be8b95f2cbb","^2W",["^ ","^2X",null,"^2Y",["^Q",[]],"^2Z",["^18","^17"]]]]],"~:clj-info",["^ ","jar:file:/home/andreas/.m2/repository/org/clojure/clojurescript/1.10.844/clojurescript-1.10.844.jar!/cljs/env.cljc",1618720422000,"jar:file:/home/andreas/.m2/repository/org/clojure/clojurescript/1.10.844/clojurescript-1.10.844.jar!/cljs/externs.clj",1618720422000,"jar:file:/home/andreas/.m2/repository/org/clojure/clojurescript/1.10.844/clojurescript-1.10.844.jar!/cljs/tagged_literals.cljc",1618720422000,"jar:file:/home/andreas/.m2/repository/org/clojure/data.json/2.1.0/data.json-2.1.0.jar!/clojure/data/json.clj",1618502954000,"jar:file:/home/andreas/.m2/repository/org/clojure/clojurescript/1.10.844/clojurescript-1.10.844.jar!/cljs/reader.clj",1618720422000,"jar:file:/home/andreas/.m2/repository/org/clojure/clojurescript/1.10.844/clojurescript-1.10.844.jar!/cljs/compiler.cljc",1618720422000,"jar:file:/home/andreas/.m2/repository/org/clojure/clojurescript/1.10.844/clojurescript-1.10.844.jar!/cljs/instant.clj",1618720422000,"jar:file:/home/andreas/.m2/repository/org/clojure/clojurescript/1.10.844/clojurescript-1.10.844.jar!/cljs/source_map/base64_vlq.clj",1618720422000,"jar:file:/home/andreas/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/edn.clj",1618716228000,"jar:file:/home/andreas/.m2/repository/org/clojure/tools.reader/1.3.5/tools.reader-1.3.5.jar!/clojure/tools/reader/default_data_readers.clj",1618501370000,"jar:file:/home/andreas/.m2/repository/org/clojure/clojurescript/1.10.844/clojurescript-1.10.844.jar!/cljs/analyzer.cljc",1618720422000,"jar:file:/home/andreas/.m2/repository/org/clojure/clojurescript/1.10.844/clojurescript-1.10.844.jar!/cljs/source_map.clj",1618720422000,"jar:file:/home/andreas/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/core.clj",1618716228000,"jar:file:/home/andreas/.m2/repository/org/clojure/tools.reader/1.3.5/tools.reader-1.3.5.jar!/clojure/tools/reader.clj",1618501370000,"jar:file:/home/andreas/.m2/repository/org/clojure/clojurescript/1.10.844/clojurescript-1.10.844.jar!/cljs/js_deps.cljc",1618720422000,"jar:file:/home/andreas/.m2/repository/org/clojure/clojurescript/1.10.844/clojurescript-1.10.844.jar!/cljs/analyzer/macros.clj",1618720422000,"jar:file:/home/andreas/.m2/repository/org/clojure/clojurescript/1.10.844/clojurescript-1.10.844.jar!/cljs/core.cljc",1618720422000,"jar:file:/home/andreas/.m2/repository/org/clojure/tools.reader/1.3.5/tools.reader-1.3.5.jar!/clojure/tools/reader/impl/inspect.clj",1618501370000,"jar:file:/home/andreas/.m2/repository/org/clojure/tools.reader/1.3.5/tools.reader-1.3.5.jar!/clojure/tools/reader/reader_types.clj",1618501370000,"jar:file:/home/andreas/.m2/repository/binaryage/devtools/1.0.2/devtools-1.0.2.jar!/devtools/defaults.clj",1618720434000,"jar:file:/home/andreas/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/java/io.clj",1618716228000,"jar:file:/home/andreas/.m2/repository/org/clojure/clojurescript/1.10.844/clojurescript-1.10.844.jar!/cljs/env/macros.clj",1618720422000,"jar:file:/home/andreas/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/pprint.clj",1618716228000,"jar:file:/home/andreas/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/set.clj",1618716228000,"jar:file:/home/andreas/.m2/repository/org/clojure/tools.reader/1.3.5/tools.reader-1.3.5.jar!/cljs/tools/reader/reader_types.clj",1618501370000,"jar:file:/home/andreas/.m2/repository/org/clojure/clojurescript/1.10.844/clojurescript-1.10.844.jar!/cljs/analyzer/impl.cljc",1618720422000,"jar:file:/home/andreas/.m2/repository/org/clojure/tools.reader/1.3.5/tools.reader-1.3.5.jar!/clojure/tools/reader/impl/errors.clj",1618501370000,"jar:file:/home/andreas/.m2/repository/org/clojure/clojurescript/1.10.844/clojurescript-1.10.844.jar!/cljs/util.cljc",1618720422000,"jar:file:/home/andreas/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/string.clj",1618716228000,"jar:file:/home/andreas/.m2/repository/org/clojure/clojurescript/1.10.844/clojurescript-1.10.844.jar!/cljs/source_map/base64.clj",1618720422000,"jar:file:/home/andreas/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/instant.clj",1618716228000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","This is intended to be a stable api for those who need programmatic access\n  to the analyzer.","^7","cljs/analyzer/api.cljc","^8",9,"^9",5,"^:",9,"^;",22],"^<",["^ ","^=","^>","^?","^@","^A","^B","^C","^D","^E","^F","^G","^H","^I","^J","^K","^L","^M","^N"],"^O",null,"^P",["^Q",["^R","^S","^T","^U","^V","^W","^X"]],"^Y","^Z","^11",null,"^12",["^ ","^13","^13","^14","^13","^15","^15","^16","^15","^17","^17","^18","^18"],"^19",["^Q",["^1:"]],"~:shadow/js-access-global",["^Q",["Error"]],"^1;",null,"~:defs",["^ ","^R",["^ ","~:protocol-inline",null,"^5",["^ ","^7","cljs/analyzer/api.cljc","^8",220,"^9",7,"^:",220,"^;",14,"~:arglists",["^1>",["~$quote",["^1>",[["~$sym"],["~$state","^53"]]]]],"^6","Given a namespace return the corresponding namespace analysis map. Analagous\n  to clojure.core/find-ns.","~:top-fn",["^ ","~:variadic?",false,"~:fixed-arity",2,"~:max-fixed-arity",2,"~:method-params",[["^53"],["^54","^53"]],"^51",["^1>",[["^53"],["^54","^53"]]],"~:arglists-meta",["^1>",[null,null]]]],"^Y","^2>","^7","cljs/analyzer/api.cljc","^;",14,"^55",["^ ","^56",false,"^57",2,"^58",2,"^59",[["^53"],["^54","^53"]],"^51",["^1>",[["^53"],["^54","^53"]]],"^5:",["^1>",[null,null]]],"^59",[["^53"],["^54","^53"]],"~:protocol-impl",null,"^57",2,"^5:",["^1>",[null,null]],"^9",1,"^56",false,"~:methods",[["^ ","^57",1,"^56",false,"~:tag","~$any"],["^ ","^57",2,"^56",false,"^5=",["^Q",[null,"^5>"]]]],"^8",220,"^:",220,"^58",2,"~:fn-var",true,"^51",["^1>",[["^53"],["^54","^53"]]],"^6","Given a namespace return the corresponding namespace analysis map. Analagous\n  to clojure.core/find-ns."],"^S",["^ ","^50",null,"^5",["^ ","^7","cljs/analyzer/api.cljc","^8",262,"^9",7,"^:",262,"^;",16,"^51",["^1>",["^52",["^1>",[["^1?"],["^54","^1?"]]]]],"^6","Removes the namespace named by the symbol.","^55",["^ ","^56",false,"^57",2,"^58",2,"^59",[["^1?"],["^54","^1?"]],"^51",["^1>",[["^1?"],["^54","^1?"]]],"^5:",["^1>",[null,null]]]],"^Y","^2E","^7","cljs/analyzer/api.cljc","^;",16,"^55",["^ ","^56",false,"^57",2,"^58",2,"^59",[["^1?"],["^54","^1?"]],"^51",["^1>",[["^1?"],["^54","^1?"]]],"^5:",["^1>",[null,null]]],"^59",[["^1?"],["^54","^1?"]],"^5;",null,"^57",2,"^5:",["^1>",[null,null]],"^9",1,"^56",false,"^5<",[["^ ","^57",1,"^56",false,"^5=","^5>"],["^ ","^57",2,"^56",false,"^5=",["^Q",[null,"^5>"]]]],"^8",262,"^:",262,"^58",2,"^5?",true,"^51",["^1>",[["^1?"],["^54","^1?"]]],"^6","Removes the namespace named by the symbol."],"^T",["^ ","^50",null,"^5",["^ ","^7","cljs/analyzer/api.cljc","^8",240,"^9",7,"^:",240,"^;",17,"^51",["^1>",["^52",["^1>",[["^1?"],["^54","^1?"]]]]],"^6","Given a namespace return all the public var analysis maps. Analagous to\n  clojure.core/ns-publics but returns var analysis maps not vars.","^55",["^ ","^56",false,"^57",2,"^58",2,"^59",[["^1?"],["^54","^1?"]],"^51",["^1>",[["^1?"],["^54","^1?"]]],"^5:",["^1>",[null,null]]]],"^Y","^2G","^7","cljs/analyzer/api.cljc","^;",17,"^55",["^ ","^56",false,"^57",2,"^58",2,"^59",[["^1?"],["^54","^1?"]],"^51",["^1>",[["^1?"],["^54","^1?"]]],"^5:",["^1>",[null,null]]],"^59",[["^1?"],["^54","^1?"]],"^5;",null,"^57",2,"^5:",["^1>",[null,null]],"^9",1,"^56",false,"^5<",[["^ ","^57",1,"^56",false,"^5=","^5>"],["^ ","^57",2,"^56",false,"^5=",["^Q",[null,"~$clj","^5>"]]]],"^8",240,"^:",240,"^58",2,"^5?",true,"^51",["^1>",[["^1?"],["^54","^1?"]]],"^6","Given a namespace return all the public var analysis maps. Analagous to\n  clojure.core/ns-publics but returns var analysis maps not vars."],"~$get-options",["^ ","^50",null,"^5",["^ ","^7","cljs/analyzer/api.cljc","^8",102,"^9",7,"^:",102,"^;",18,"^51",["^1>",["^52",["^1>",[[],["^54"]]]]],"^6","Return the compiler options from compiler state.","^55",["^ ","^56",false,"^57",1,"^58",1,"^59",[[],["^54"]],"^51",["^1>",[[],["^54"]]],"^5:",["^1>",[null,null]]]],"^Y","^2F","^7","cljs/analyzer/api.cljc","^;",18,"^55",["^ ","^56",false,"^57",1,"^58",1,"^59",[[],["^54"]],"^51",["^1>",[[],["^54"]]],"^5:",["^1>",[null,null]]],"^59",[[],["^54"]],"^5;",null,"^57",1,"^5:",["^1>",[null,null]],"^9",1,"^56",false,"^5<",[["^ ","^57",0,"^56",false,"^5=","^5>"],["^ ","^57",1,"^56",false,"^5=",["^Q",["^5>","~$clj-nil"]]]],"^8",102,"^:",102,"^58",1,"^5?",true,"^51",["^1>",[[],["^54"]]],"^6","Return the compiler options from compiler state."],"~$warning-message",["^ ","^50",null,"^5",["^ ","^7","cljs/analyzer/api.cljc","^8",91,"^9",7,"^:",91,"^;",22,"^51",["^1>",["^52",["^1>",[["~$warn-type","~$warn-info"]]]]],"^6","Helper for generating the standard analyzer messages for warnings. Should be\n  passed warn-type and warn-info. See with-warning-handlers."],"^Y","^2B","^7","cljs/analyzer/api.cljc","^;",22,"^59",["^1>",[["^5D","^5E"]]],"^5;",null,"^5:",["^1>",[null,null]],"^9",1,"^56",false,"^8",91,"~:ret-tag","^5>","^:",91,"^58",2,"^5?",true,"^51",["^1>",["^52",["^1>",[["^5D","^5E"]]]]],"^6","Helper for generating the standard analyzer messages for warnings. Should be\n  passed warn-type and warn-info. See with-warning-handlers."],"~$warning-enabled?",["^ ","^50",null,"^5",["^ ","^7","cljs/analyzer/api.cljc","^8",69,"^9",7,"^:",69,"^;",23,"^51",["^1>",["^52",["^1>",[["~$warning-type"]]]]],"^6","Test if the given warning-type is enabled."],"^Y","^2L","^7","cljs/analyzer/api.cljc","^;",23,"^59",["^1>",[["^5H"]]],"^5;",null,"^5:",["^1>",[null,null]],"^9",1,"^56",false,"^8",69,"^5F","^5>","^:",69,"^58",1,"^5?",true,"^51",["^1>",["^52",["^1>",[["^5H"]]]]],"^6","Test if the given warning-type is enabled."],"~$current-state",["^ ","^50",null,"^5",["^ ","^7","cljs/analyzer/api.cljc","^8",36,"^9",7,"^:",36,"^;",20,"^51",["^1>",["^52",["^1>",[[]]]]],"^6","Return the current compiler state atom."],"^Y","^2D","^7","cljs/analyzer/api.cljc","^;",20,"^59",["^1>",[[]]],"^5;",null,"^5:",["^1>",[null,null]],"^9",1,"^56",false,"^8",36,"^5F","^5>","^:",36,"^58",0,"^5?",true,"^51",["^1>",["^52",["^1>",[[]]]]],"^6","Return the current compiler state atom."],"^U",["^ ","^50",null,"^5",["^ ","^7","cljs/analyzer/api.cljc","^8",253,"^9",7,"^:",253,"^;",17,"^51",["^1>",["^52",["^1>",[["^1?","^53"],["^54","^1?","^53"]]]]],"^6","Given a namespace and a symbol return the corresponding var analysis map.\n  Analagous to clojure.core/ns-resolve but returns var analysis map not Var.","^55",["^ ","^56",false,"^57",3,"^58",3,"^59",[["^1?","^53"],["^54","^1?","^53"]],"^51",["^1>",[["^1?","^53"],["^54","^1?","^53"]]],"^5:",["^1>",[null,null]]]],"^Y","^2S","^7","cljs/analyzer/api.cljc","^;",17,"^55",["^ ","^56",false,"^57",3,"^58",3,"^59",[["^1?","^53"],["^54","^1?","^53"]],"^51",["^1>",[["^1?","^53"],["^54","^1?","^53"]]],"^5:",["^1>",[null,null]]],"^59",[["^1?","^53"],["^54","^1?","^53"]],"^5;",null,"^57",3,"^5:",["^1>",[null,null]],"^9",1,"^56",false,"^5<",[["^ ","^57",2,"^56",false,"^5=","^5>"],["^ ","^57",3,"^56",false,"^5=",["^Q",[null,"^5>"]]]],"^8",253,"^:",253,"^58",3,"^5?",true,"^51",["^1>",[["^1?","^53"],["^54","^1?","^53"]]],"^6","Given a namespace and a symbol return the corresponding var analysis map.\n  Analagous to clojure.core/ns-resolve but returns var analysis map not Var."],"~$enabled-warnings",["^ ","^50",null,"^5",["^ ","^7","cljs/analyzer/api.cljc","^8",97,"^9",7,"^:",97,"^;",23,"^51",["^1>",["^52",["^1>",[[]]]]],"^6","Get the enabled warning types."],"^Y","^2O","^7","cljs/analyzer/api.cljc","^;",23,"^59",["^1>",[[]]],"^5;",null,"^5:",["^1>",[null,null]],"^9",1,"^56",false,"^8",97,"^5F","^5>","^:",97,"^58",0,"^5?",true,"^51",["^1>",["^52",["^1>",[[]]]]],"^6","Get the enabled warning types."],"~$empty-state",["^ ","^50",null,"^5",["^ ","^7","cljs/analyzer/api.cljc","^8",25,"^9",7,"^:",25,"^;",18,"^51",["^1>",["^52",["^1>",[[],["~$opts"]]]]],"^6","Creates an empty compilation state Atom<Map>. The optional opts arg is a map\n   representing the compiler configuration. See the documentation\n   for details: https://clojurescript.org/reference/compiler-options","^55",["^ ","^56",false,"^57",1,"^58",1,"^59",[[],["^5L"]],"^51",["^1>",[[],["^5L"]]],"^5:",["^1>",[null,null]]]],"^Y","^1S","^7","cljs/analyzer/api.cljc","^;",18,"^55",["^ ","^56",false,"^57",1,"^58",1,"^59",[[],["^5L"]],"^51",["^1>",[[],["^5L"]]],"^5:",["^1>",[null,null]]],"^59",[[],["^5L"]],"^5;",null,"^57",1,"^5:",["^1>",[null,null]],"^9",1,"^56",false,"^5<",[["^ ","^57",0,"^56",false,"^5=","^5>"],["^ ","^57",1,"^56",false,"^5=","~$cljs.core/Atom"]],"^8",25,"^:",25,"^58",1,"^5?",true,"^51",["^1>",[[],["^5L"]]],"^6","Creates an empty compilation state Atom<Map>. The optional opts arg is a map\n   representing the compiler configuration. See the documentation\n   for details: https://clojurescript.org/reference/compiler-options"],"~$default-passes",["^ ","^5",["^ ","^7","cljs/analyzer/api.cljc","^8",117,"^9",3,"^:",117,"^;",17,"^6","ClojureScript's default analysis passes."],"^Y","^1U","^7","cljs/analyzer/api.cljc","^;",17,"^9",1,"^8",115,"^:",117,"^5=","~$cljs.core/IVector","^6","ClojureScript's default analysis passes."],"~$empty-env",["^ ","^50",null,"^5",["^ ","^7","cljs/analyzer/api.cljc","^8",57,"^9",7,"^:",57,"^;",16,"^51",["^1>",["^52",["^1>",[[]]]]],"^6","Creates an empty analysis environment."],"^Y","^1[","^7","cljs/analyzer/api.cljc","^;",16,"^59",["^1>",[[]]],"^5;",null,"^5:",["^1>",[null,null]],"^9",1,"^56",false,"^8",57,"^5F","^5>","^:",57,"^58",0,"^5?",true,"^51",["^1>",["^52",["^1>",[[]]]]],"^6","Creates an empty analysis environment."],"~$default-warning-handler",["^ ","^50",null,"^5",["^ ","^7","cljs/analyzer/api.cljc","^8",74,"^9",7,"^:",74,"^;",30,"^51",["^1>",["^52",["^1>",[["^5H","^16","~$extra"]]]]],"^6","The default warning handler.\n\n   Outputs the warning messages to *err*."],"^Y","^1V","^7","cljs/analyzer/api.cljc","^;",30,"^59",["^1>",[["^5H","^16","^5R"]]],"^5;",null,"^5:",["^1>",[null,null]],"^9",1,"^56",false,"^8",74,"^5F",["^Q",[null,"^5B"]],"^:",74,"^58",3,"^5?",true,"^51",["^1>",["^52",["^1>",[["^5H","^16","^5R"]]]]],"^6","The default warning handler.\n\n   Outputs the warning messages to *err*."],"^V",["^ ","^50",null,"^5",["^ ","^7","cljs/analyzer/api.cljc","^8",229,"^9",7,"^:",229,"^;",17,"^51",["^1>",["^52",["^1>",[["^1?"],["^54","^1?"]]]]],"^6","Given a namespace return all the var analysis maps. Analagous to\n  clojure.core/ns-interns but returns var analysis maps not vars.","^55",["^ ","^56",false,"^57",2,"^58",2,"^59",[["^1?"],["^54","^1?"]],"^51",["^1>",[["^1?"],["^54","^1?"]]],"^5:",["^1>",[null,null]]]],"^Y","^22","^7","cljs/analyzer/api.cljc","^;",17,"^55",["^ ","^56",false,"^57",2,"^58",2,"^59",[["^1?"],["^54","^1?"]],"^51",["^1>",[["^1?"],["^54","^1?"]]],"^5:",["^1>",[null,null]]],"^59",[["^1?"],["^54","^1?"]],"^5;",null,"^57",2,"^5:",["^1>",[null,null]],"^9",1,"^56",false,"^5<",[["^ ","^57",1,"^56",false,"^5=","^5>"],["^ ","^57",2,"^56",false,"^5=",["^Q",["^5>","^5B"]]]],"^8",229,"^:",229,"^58",2,"^5?",true,"^51",["^1>",[["^1?"],["^54","^1?"]]],"^6","Given a namespace return all the var analysis maps. Analagous to\n  clojure.core/ns-interns but returns var analysis maps not vars."],"^W",["^ ","^50",null,"^5",["^ ","^7","cljs/analyzer/api.cljc","^8",212,"^9",7,"^:",212,"^;",13,"^51",["^1>",["^52",["^1>",[[],["^54"]]]]],"^6","Return all namespaces. Analagous to clojure.core/all-ns but\n  returns symbols identifying namespaces not Namespace instances.","^55",["^ ","^56",false,"^57",1,"^58",1,"^59",[[],["^54"]],"^51",["^1>",[[],["^54"]]],"^5:",["^1>",[null,null]]]],"^Y","^23","^7","cljs/analyzer/api.cljc","^;",13,"^55",["^ ","^56",false,"^57",1,"^58",1,"^59",[[],["^54"]],"^51",["^1>",[[],["^54"]]],"^5:",["^1>",[null,null]]],"^59",[[],["^54"]],"^5;",null,"^57",1,"^5:",["^1>",[null,null]],"^9",1,"^56",false,"^5<",[["^ ","^57",0,"^56",false,"^5=","^5>"],["^ ","^57",1,"^56",false,"^5=",["^Q",["~$cljs.core/KeySeq","^5B"]]]],"^8",212,"^:",212,"^58",1,"^5?",true,"^51",["^1>",[[],["^54"]]],"^6","Return all namespaces. Analagous to clojure.core/all-ns but\n  returns symbols identifying namespaces not Namespace instances."],"~$current-file",["^ ","^50",null,"^5",["^ ","^7","cljs/analyzer/api.cljc","^8",41,"^9",7,"^:",41,"^;",19,"^51",["^1>",["^52",["^1>",[[]]]]],"^6","Return the current file under analysis or compilation."],"^Y","^1Z","^7","cljs/analyzer/api.cljc","^;",19,"^59",["^1>",[[]]],"^5;",null,"^5:",["^1>",[null,null]],"^9",1,"^56",false,"^8",41,"^5F","^5>","^:",41,"^58",0,"^5?",true,"^51",["^1>",["^52",["^1>",[[]]]]],"^6","Return the current file under analysis or compilation."],"~$current-ns",["^ ","^50",null,"^5",["^ ","^7","cljs/analyzer/api.cljc","^8",46,"^9",7,"^:",46,"^;",17,"^51",["^1>",["^52",["^1>",[[]]]]],"^6","Return the current ns under analysis or compilation."],"^Y","^20","^7","cljs/analyzer/api.cljc","^;",17,"^59",["^1>",[[]]],"^5;",null,"^5:",["^1>",[null,null]],"^9",1,"^56",false,"^8",46,"^5F","^5>","^:",46,"^58",0,"^5?",true,"^51",["^1>",["^52",["^1>",[[]]]]],"^6","Return the current ns under analysis or compilation."],"^X",["^ ","^50",null,"^5",["^ ","^7","cljs/analyzer/api.cljc","^8",200,"^9",7,"^:",200,"^;",14,"^51",["^1>",["^52",["^1>",[["^16","^53"]]]]],"^6","Given an analysis environment resolve a var. Analogous to\n   clojure.core/resolve"],"^Y","^2@","^7","cljs/analyzer/api.cljc","^;",14,"^59",["^1>",[["^16","^53"]]],"^5;",null,"^5:",["^1>",[null,null]],"^9",1,"^56",false,"^8",200,"^:",200,"^58",2,"^5?",true,"^51",["^1>",["^52",["^1>",[["^16","^53"]]]]],"^6","Given an analysis environment resolve a var. Analogous to\n   clojure.core/resolve"],"~$get-js-index",["^ ","^50",null,"^5",["^ ","^7","cljs/analyzer/api.cljc","^8",108,"^9",7,"^:",108,"^;",19,"^51",["^1>",["^52",["^1>",[[],["^54"]]]]],"^6","Return the currently computed Google Closure js dependency index from the\n  compiler state.","^55",["^ ","^56",false,"^57",1,"^58",1,"^59",[[],["^54"]],"^51",["^1>",[[],["^54"]]],"^5:",["^1>",[null,null]]]],"^Y","^25","^7","cljs/analyzer/api.cljc","^;",19,"^55",["^ ","^56",false,"^57",1,"^58",1,"^59",[[],["^54"]],"^51",["^1>",[[],["^54"]]],"^5:",["^1>",[null,null]]],"^59",[[],["^54"]],"^5;",null,"^57",1,"^5:",["^1>",[null,null]],"^9",1,"^56",false,"^5<",[["^ ","^57",0,"^56",false,"^5=","^5>"],["^ ","^57",1,"^56",false,"^5=",["^Q",["^5>","^5B"]]]],"^8",108,"^:",108,"^58",1,"^5?",true,"^51",["^1>",[[],["^54"]]],"^6","Return the currently computed Google Closure js dependency index from the\n  compiler state."]],"^1<",["^ ","^17","^17"],"~:cljs.analyzer/constants",["^ ","^19",["^Q",["~:cljs.analyzer/namespaces","~:private","~:macros","~:js-dependency-index","^4[","~:options"]],"~:order",["^60","^5[","^5X","^5Z","^4[","^5Y"]],"^1C",["^ ","^1:",["^Q",[]]],"^1D",["^ "],"^1E",["^18","^17","^13","^15"]],"^10","^Z","~:ns-specs",["^ "],"~:ns-spec-vars",["^Q",[]],"~:compiler-options",["^2V",[["^64","~:static-fns"],true,["^64","~:shadow-tweaks"],null,["^64","~:source-map-inline"],null,["^64","~:elide-asserts"],false,["^64","~:optimize-constants"],null,["^64","^1J"],null,["^64","~:external-config"],null,["^64","~:tooling-config"],null,["^64","~:emit-constants"],null,["^64","~:load-tests"],null,["^64","~:form-size-threshold"],null,["^64","~:data-readers"],null,["^64","~:infer-externs"],"~:auto",["^64","^1L"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^64","~:fn-invoke-direct"],null,["^64","~:source-map"],"/dev/null"]]]