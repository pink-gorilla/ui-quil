["^ ","~:output",["^ ","~:js","goog.provide('cljs_uuid_utils.core');\n/**\n * (uuid-string a-uuid)  =>  uuid-str\n *   Arguments and Values:\n *   a-uuid --- a cljs.core/UUID instance.\n *   uuid-str --- returns a string representation of the UUID instance\n *   Description:\n *   Returns the string representation of the UUID instance in the format of,\n *   \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\" similarly to java.util.UUID/toString.\n *   Note that this is different from cljs.core/UUID's EDN string-format.\n *   Examples:\n *   (def u (make-random-uuid))  =>  #uuid \"305e764d-b451-47ae-a90d-5db782ac1f2e\"\n *   (uuid-string u) => \"305e764d-b451-47ae-a90d-5db782ac1f2e\"\n */\ncljs_uuid_utils.core.uuid_string = (function cljs_uuid_utils$core$uuid_string(a_uuid){\nreturn cljs.core.str.cljs$core$IFn$_invoke$arity$1(a_uuid.uuid);\n});\n/**\n * (make-random-squuid)  =>  new-uuid\n *   Arguments and Values:\n *   new-squuid --- new type 4 (pseudo randomly generated) cljs.core/UUID instance.\n *   Description:\n *   Returns pseudo randomly generated, semi-sequential SQUUID. \n *   See http://docs.datomic.com/clojure/#datomic.api/squuid\n *   Returns a UUID where the most significant 32 bits are the current time since epoch in seconds.\n *   like: xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx as per http://www.ietf.org/rfc/rfc4122.txt.\n *   Examples:\n *   (make-random-squuid)  =>  #uuid \"305e764d-b451-47ae-a90d-5db782ac1f2e\"\n *   (type (make-random-squuid)) => cljs.core/UUID\n */\ncljs_uuid_utils.core.make_random_squuid = (function cljs_uuid_utils$core$make_random_squuid(){\nvar top_32_bits = (function cljs_uuid_utils$core$make_random_squuid_$_top_32_bits(){\nreturn (((new Date()).getTime() / (1000)) | (0)).toString((16));\n});\nvar f = (function cljs_uuid_utils$core$make_random_squuid_$_f(){\nreturn cljs.core.rand_int((16)).toString((16));\n});\nvar g = (function cljs_uuid_utils$core$make_random_squuid_$_g(){\nreturn ((8) | ((3) & cljs.core.rand_int((15)))).toString((16));\n});\nreturn (new cljs.core.UUID(clojure.string.join.cljs$core$IFn$_invoke$arity$1(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic(top_32_bits(),\"-\",cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.repeatedly.cljs$core$IFn$_invoke$arity$2((4),f),\"-4\",cljs.core.repeatedly.cljs$core$IFn$_invoke$arity$2((3),f),\"-\",g(),cljs.core.repeatedly.cljs$core$IFn$_invoke$arity$2((3),f),\"-\",cljs.core.repeatedly.cljs$core$IFn$_invoke$arity$2((12),f)], 0))),null));\n});\n/**\n * (make-random-uuid)  =>  new-uuid\n *   Arguments and Values:\n *   new-uuid --- new type 4 (pseudo randomly generated) cljs.core/UUID instance.\n *   Description:\n *   Returns pseudo randomly generated UUID,\n *   like: xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx as per http://www.ietf.org/rfc/rfc4122.txt.\n *   Examples:\n *   (make-random-uuid)  =>  #uuid \"305e764d-b451-47ae-a90d-5db782ac1f2e\"\n *   (type (make-random-uuid)) => cljs.core/UUID\n */\ncljs_uuid_utils.core.make_random_uuid = (function cljs_uuid_utils$core$make_random_uuid(){\nvar f = (function cljs_uuid_utils$core$make_random_uuid_$_f(){\nreturn cljs.core.rand_int((16)).toString((16));\n});\nvar g = (function cljs_uuid_utils$core$make_random_uuid_$_g(){\nreturn ((8) | ((3) & cljs.core.rand_int((15)))).toString((16));\n});\nreturn (new cljs.core.UUID(clojure.string.join.cljs$core$IFn$_invoke$arity$1(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic(cljs.core.repeatedly.cljs$core$IFn$_invoke$arity$2((8),f),\"-\",cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.repeatedly.cljs$core$IFn$_invoke$arity$2((4),f),\"-4\",cljs.core.repeatedly.cljs$core$IFn$_invoke$arity$2((3),f),\"-\",g(),cljs.core.repeatedly.cljs$core$IFn$_invoke$arity$2((3),f),\"-\",cljs.core.repeatedly.cljs$core$IFn$_invoke$arity$2((12),f)], 0))),null));\n});\ncljs_uuid_utils.core.uuid_regex = (function (){var x = \"[0-9a-fA-F]\";\nreturn cljs.core.re_pattern([\"^\",x,x,x,x,x,x,x,x,\"-\",x,x,x,x,\"-\",x,x,x,x,\"-\",x,x,x,x,\"-\",x,x,x,x,x,x,x,x,x,x,x,x,\"$\"].join(''));\n})();\n/**\n * (valid-uuid? maybe-uuid)  =>  truthy-falsy\n *   Arguments and Values:\n *   maybe-uuid --- string or UUID-instance that may represent a conformant UUID.\n *   truthy-falsy --- Returns either the conforming UUID-string (truthy) or nil (falsy).\n *   Description:\n *   Predicate to test whether a string representation conforms to a\n *   \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\" format where each x is a hexadecimal character.\n *   Input can be a maybe-uuid string or a cljs.core/UUID instance.\n *   Note that the current \"cljs.core/UUID.\" constructor does not check for any conformance.\n *   Examples:\n *   (valid-uuid? \"NO-WAY\")  =>  nil\n *   (valid-uuid? \"4d7332e7-e4c6-4ca5-af91-86336c825e25\")  => \"4d7332e7-e4c6-4ca5-af91-86336c825e25\"\n *   (valid-uuid? (UUID. \"4d7332e7-e4c6-4ca5-af91-86336c825e25\"))  => \"4d7332e7-e4c6-4ca5-af91-86336c825e25\"\n *   (valid-uuid? (UUID. \"YES-WAY\"))  => nil\n */\ncljs_uuid_utils.core.valid_uuid_QMARK_ = (function cljs_uuid_utils$core$valid_uuid_QMARK_(maybe_uuid){\nvar maybe_uuid_str = ((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.type(maybe_uuid),cljs.core.UUID))?cljs_uuid_utils.core.uuid_string(maybe_uuid):((typeof maybe_uuid === 'string')?maybe_uuid:false\n));\nif(cljs.core.truth_(maybe_uuid_str)){\nreturn cljs.core.re_find(cljs_uuid_utils.core.uuid_regex,maybe_uuid_str);\n} else {\nreturn null;\n}\n});\n/**\n * (make-uuid-from maybe-uuid maybe-uuid)  =>  uuid-or-nil\n *   Arguments and Values:\n *   maybe-uuid --- string or UUID-instance that may represent a conformant UUID.\n *   uuid-or-nil --- Returns either a cljs.core/UUID instance or nil.\n *   Description:\n *   Returns a cljs.core/UUID instance for a conformant UUID-string representation, or nil.\n *   Input can be a string or a cljs.core/UUID instance.\n *   Note that if the input UUID-instance is not valid, nil is returned.\n *   Examples:\n *   (make-uuid-from \"NO-WAY\")  =>  nil\n *   (make-uuid-from \"4d7332e7-e4c6-4ca5-af91-86336c825e25\")  => #uuid \"4d7332e7-e4c6-4ca5-af91-86336c825e25\"\n *   (make-uuid-from (UUID. \"4d7332e7-e4c6-4ca5-af91-86336c825e25\"))  => #uuid \"4d7332e7-e4c6-4ca5-af91-86336c825e25\"\n *   (make-uuid-from (UUID. \"YES-WAY\"))  => nil\n */\ncljs_uuid_utils.core.make_uuid_from = (function cljs_uuid_utils$core$make_uuid_from(maybe_uuid){\nvar temp__5753__auto__ = cljs_uuid_utils.core.valid_uuid_QMARK_(maybe_uuid);\nif(cljs.core.truth_(temp__5753__auto__)){\nvar uuid = temp__5753__auto__;\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.type(maybe_uuid),cljs.core.UUID)){\nreturn maybe_uuid;\n} else {\nreturn (new cljs.core.UUID(uuid,null));\n}\n} else {\nreturn null;\n}\n});\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:doc","ClojureScript micro-library with an implementation of a type 4, random UUID generator compatible with RFC-4122 and cljs.core/UUID (make-random-uuid), a getter function to obtain the uuid string representation from a UUID-instance (uuid-string), a uuid-string conformance validating predicate (valid-uuid?), and a UUID factory from uuid-string with conformance validation (make-uuid-from).","~:file","cljs_uuid_utils/core.cljs","~:line",9,"~:column",5,"~:end-line",9,"~:end-column",25],"~:ns-aliases",["^ ","~$clojure.spec.alpha","~$cljs.spec.alpha","~$cljs.loader","~$shadow.loader","~$highlight.js","~$module$node_modules$highlight_DOT_js$lib$index","~$react","~$module$node_modules$react$index","~$clojure.tools.reader.reader-types","~$cljs.tools.reader.reader-types","~$clojure.pprint","~$cljs.pprint","~$react-dom","~$module$node_modules$react_dom$index","~$clojure.repl","~$cljs.repl","~$webly.user.tenx.events","~$webly.user.tenx.events-on"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$cljs-uuid-utils.core","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$clojure.string","^X","~$string","^X","~$cljs.core","^Z","~$goog","^["],"~:seen",["^Q",["~:require"]],"~:uses",null,"~:require-macros",["^ ","^Z","^Z"],"~:form",["~#list",["~$ns","^S","ClojureScript micro-library with an implementation of a type 4, random UUID generator compatible with RFC-4122 and cljs.core/UUID (make-random-uuid), a getter function to obtain the uuid string representation from a UUID-instance (uuid-string), a uuid-string conformance validating predicate (valid-uuid?), and a UUID factory from uuid-string with conformance validation (make-uuid-from).",["^15",["^11",["^X","~:as","^Y"]]]]],"~:flags",["^ ","^11",["^Q",[]]],"~:js-deps",["^ "],"~:deps",["^[","^Z","^X"]],"^U","^S","~:resource-id",["~:shadow.build.classpath/resource","cljs_uuid_utils/core.cljs"],"~:compiled-at",1621210462073,"~:resource-name","cljs_uuid_utils/core.cljs","~:warnings",[],"~:source",";; Copyright (c) Frank Siebenlist. All rights reserved.\n;; The use and distribution terms for this software are covered by the\n;; Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)\n;; which can be found in the file COPYING at the root of this distribution.\n;; By using this software in any fashion, you are agreeing to be bound by\n;; the terms of this license.\n;; You must not remove this notice, or any other, from this software.\n\n(ns cljs-uuid-utils.core\n  \"ClojureScript micro-library with an implementation of a type 4, random UUID generator compatible with RFC-4122 and cljs.core/UUID (make-random-uuid), a getter function to obtain the uuid string representation from a UUID-instance (uuid-string), a uuid-string conformance validating predicate (valid-uuid?), and a UUID factory from uuid-string with conformance validation (make-uuid-from).\"\n  (:require [clojure.string :as string]))\n\n;; see https://gist.github.com/4159427 for some background\n\n\n;; Future UUID-implementations may chose a different internal representation of the UUID-instance\n;; The trivial uuid-string function hides those UUID-internals.\n;; Further motivation for uuid-string are related to interop thru json or with existing databases.\n\n(defn uuid-string\n  \"(uuid-string a-uuid)  =>  uuid-str\n  Arguments and Values:\n  a-uuid --- a cljs.core/UUID instance.\n  uuid-str --- returns a string representation of the UUID instance\n  Description:\n  Returns the string representation of the UUID instance in the format of,\n  \\\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\\\" similarly to java.util.UUID/toString.\n  Note that this is different from cljs.core/UUID's EDN string-format.\n  Examples:\n  (def u (make-random-uuid))  =>  #uuid \\\"305e764d-b451-47ae-a90d-5db782ac1f2e\\\"\n  (uuid-string u) => \\\"305e764d-b451-47ae-a90d-5db782ac1f2e\\\"\"\n  [a-uuid]\n  (str (.-uuid a-uuid)))\n\n\n(defn make-random-squuid\n  \"(make-random-squuid)  =>  new-uuid\n  Arguments and Values:\n  new-squuid --- new type 4 (pseudo randomly generated) cljs.core/UUID instance.\n  Description:\n  Returns pseudo randomly generated, semi-sequential SQUUID. \n  See http://docs.datomic.com/clojure/#datomic.api/squuid\n  Returns a UUID where the most significant 32 bits are the current time since epoch in seconds.\n  like: xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx as per http://www.ietf.org/rfc/rfc4122.txt.\n  Examples:\n  (make-random-squuid)  =>  #uuid \\\"305e764d-b451-47ae-a90d-5db782ac1f2e\\\"\n  (type (make-random-squuid)) => cljs.core/UUID\"\n  []\n  (letfn [(top-32-bits [] (.toString (int (/ (.getTime (js/Date.)) 1000)) 16))\n          (f [] (.toString (rand-int 16) 16))\n          (g [] (.toString  (bit-or 0x8 (bit-and 0x3 (rand-int 15))) 16))]\n    (UUID.(string/join (concat \n                        (top-32-bits) \"-\"\n                        (repeatedly 4 f) \"-4\"\n                        (repeatedly 3 f) \"-\"\n                        (g) (repeatedly 3 f) \"-\"\n                        (repeatedly 12 f))) nil)))\n\n\n(defn make-random-uuid\n  \"(make-random-uuid)  =>  new-uuid\n  Arguments and Values:\n  new-uuid --- new type 4 (pseudo randomly generated) cljs.core/UUID instance.\n  Description:\n  Returns pseudo randomly generated UUID,\n  like: xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx as per http://www.ietf.org/rfc/rfc4122.txt.\n  Examples:\n  (make-random-uuid)  =>  #uuid \\\"305e764d-b451-47ae-a90d-5db782ac1f2e\\\"\n  (type (make-random-uuid)) => cljs.core/UUID\"\n  []\n  (letfn [(f [] (.toString (rand-int 16) 16))\n          (g [] (.toString  (bit-or 0x8 (bit-and 0x3 (rand-int 15))) 16))]\n    (UUID.(string/join (concat \n                        (repeatedly 8 f) \"-\"\n                        (repeatedly 4 f) \"-4\"\n                        (repeatedly 3 f) \"-\"\n                        (g) (repeatedly 3 f) \"-\"\n                        (repeatedly 12 f))) nil)))\n\n\n(def ^:private uuid-regex \n  (let [x \"[0-9a-fA-F]\"] (re-pattern (str \n    \"^\" x x x x x x x x \"-\" x x x x \"-\" x x x x \"-\" x x x x \"-\" x x x x x x x x x x x x \"$\"))))\n\n\n(defn valid-uuid?\n  \"(valid-uuid? maybe-uuid)  =>  truthy-falsy\n  Arguments and Values:\n  maybe-uuid --- string or UUID-instance that may represent a conformant UUID.\n  truthy-falsy --- Returns either the conforming UUID-string (truthy) or nil (falsy).\n  Description:\n  Predicate to test whether a string representation conforms to a\n  \\\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\\\" format where each x is a hexadecimal character.\n  Input can be a maybe-uuid string or a cljs.core/UUID instance.\n  Note that the current \\\"cljs.core/UUID.\\\" constructor does not check for any conformance.\n  Examples:\n  (valid-uuid? \\\"NO-WAY\\\")  =>  nil\n  (valid-uuid? \\\"4d7332e7-e4c6-4ca5-af91-86336c825e25\\\")  => \\\"4d7332e7-e4c6-4ca5-af91-86336c825e25\\\"\n  (valid-uuid? (UUID. \\\"4d7332e7-e4c6-4ca5-af91-86336c825e25\\\"))  => \\\"4d7332e7-e4c6-4ca5-af91-86336c825e25\\\"\n  (valid-uuid? (UUID. \\\"YES-WAY\\\"))  => nil\"\n  [maybe-uuid]\n  (let [maybe-uuid-str (cond \n                         (= (type maybe-uuid) cljs.core/UUID) (uuid-string maybe-uuid)\n                         (string? maybe-uuid) maybe-uuid\n                         :true false)]\n    (when maybe-uuid-str (re-find uuid-regex maybe-uuid-str))))\n\n\n;; java equivalent \"java.util.UUID/fromString\" throws: IllegalArgumentException Invalid UUID string: ffa2a001-9eec-4224-a64d  java.util.UUID.fromString\n;; make-uuid-from should probably throw an exception also instead of silently returning nil...\n\n(defn make-uuid-from\n  \"(make-uuid-from maybe-uuid maybe-uuid)  =>  uuid-or-nil\n  Arguments and Values:\n  maybe-uuid --- string or UUID-instance that may represent a conformant UUID.\n  uuid-or-nil --- Returns either a cljs.core/UUID instance or nil.\n  Description:\n  Returns a cljs.core/UUID instance for a conformant UUID-string representation, or nil.\n  Input can be a string or a cljs.core/UUID instance.\n  Note that if the input UUID-instance is not valid, nil is returned.\n  Examples:\n  (make-uuid-from \\\"NO-WAY\\\")  =>  nil\n  (make-uuid-from \\\"4d7332e7-e4c6-4ca5-af91-86336c825e25\\\")  => #uuid \\\"4d7332e7-e4c6-4ca5-af91-86336c825e25\\\"\n  (make-uuid-from (UUID. \\\"4d7332e7-e4c6-4ca5-af91-86336c825e25\\\"))  => #uuid \\\"4d7332e7-e4c6-4ca5-af91-86336c825e25\\\"\n  (make-uuid-from (UUID. \\\"YES-WAY\\\"))  => nil\"\n  [maybe-uuid]\n  (when-let [uuid (valid-uuid? maybe-uuid)]\n    (if (= (type maybe-uuid) cljs.core/UUID)\n      maybe-uuid\n      (UUID. uuid nil))))\n","~:reader-features",["^Q",["~:cljs"]],"~:cljc",false,"~:source-map-compact",["^ ","mappings",";AAmBA;;;;;;;;;;;;;AAAA,AAAMA,AAYHC;AAZH,AAaE,AAAK,AAAQA;;AAGf;;;;;;;;;;;;;AAAA,AAAMC;AAAN,AAaE,AAAA;AAAA,AAAwB,AAAA,AAAW,AAAA,AAAK,AAAA,AAAG,AAAU,AAAAC;;AAArD;AAAA,AACc,AAAA,AAAW,AAAA,AAACC;;AAD1B;AAAA,AAEc,AAAA,AAAY,AAAA,AAAY,AAAA,AAAa,AAAA,AAACA;;AAFpD,AAGE,AAAAC,AAAA,AAAM,AAACC,AAAY,AAAA,AAAA,AAAA,AAAA,AAACC,AACA,AAACC,AACD,AAAA,AAACC,AAAaC,AACd,AAAA,AAACD,AAAaC,AACd,AAACC,AAAG,AAAA,AAACF,AAAaC,AAClB,AAAA,AAACD,AAAcC;;AAGvC;;;;;;;;;;;AAAA,AAAME;AAAN,AAWE,AAAA;AAAA,AAAc,AAAA,AAAW,AAAA,AAACR;;AAA1B;AAAA,AACc,AAAA,AAAY,AAAA,AAAY,AAAA,AAAa,AAAA,AAACA;;AADpD,AAEE,AAAAC,AAAA,AAAM,AAACC,AAAY,AAAA,AAAA,AAAA,AAAA,AAACC,AACA,AAAA,AAACE,AAAaC,AACd,AAAA,AAACD,AAAaC,AACd,AAAA,AAACD,AAAaC,AACd,AAACC,AAAG,AAAA,AAACF,AAAaC,AAClB,AAAA,AAACD,AAAcC;;AAGvC,AAAeG,AACb,AAAA,AAAMC;AAAN,AAAuB,AAACC,AAAW,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAC7BD,AAAEA,AAAEA,AAAEA,AAAEA,AAAEA,AAAEA,AAAEA,AAAMA,AAAEA,AAAEA,AAAEA,AAAMA,AAAEA,AAAEA,AAAEA,AAAMA,AAAEA,AAAEA,AAAEA,AAAMA,AAAEA,AAAEA,AAAEA,AAAEA,AAAEA,AAAEA,AAAEA,AAAEA,AAAEA,AAAEA,AAAEA;;AAGtF;;;;;;;;;;;;;;;;AAAA,AAAME,AAeHC;AAfH,AAgBE,AAAMC,AAAe,AAAA,AAAA,AAAA,AACE,AAACC,AAAE,AAACC,AAAKH,AAAYZ,AAAgB,AAACL,AAAYiB,AAClD,AAASA,AAAYA;;AAF5C,AAIE,AAAMC;AAAN,AAAqB,AAACG,AAAQR,AAAWK;;AAAzC;;;AAMJ;;;;;;;;;;;;;;;AAAA,AAAMI,AAcHL;AAdH,AAeE,AAAAM,AAAgB,AAACP,AAAYC;AAA7B,AAAA,AAAAM;AAAA,AAAA,AAAAA,AAAWC;AAAX,AACE,AAAI,AAACL,AAAE,AAACC,AAAKH,AAAYZ;AACvBY;;AACA,AAAAZ,AAAA,AAAOmB;;;AAHX","names",["cljs-uuid-utils.core/uuid-string","a-uuid","cljs-uuid-utils.core/make-random-squuid","js/Date","cljs.core/rand-int","cljs.core/UUID","clojure.string.join","cljs.core.concat","top-32-bits","cljs.core.repeatedly","f","g","cljs-uuid-utils.core/make-random-uuid","cljs-uuid-utils.core/uuid-regex","x","cljs.core/re-pattern","cljs-uuid-utils.core/valid-uuid?","maybe-uuid","maybe-uuid-str","cljs.core._EQ_","cljs.core/type","cljs.core/re-find","cljs-uuid-utils.core/make-uuid-from","temp__5753__auto__","uuid"]],"~:used-vars",["^Q",["~$clojure.string/join","~$cljs.core/repeatedly","~$cljs.core/=","~$cljs.core/concat","~$cljs.core/re-pattern","~$cljs-uuid-utils.core/valid-uuid?","~$cljs-uuid-utils.core/make-random-squuid","~$cljs.core/re-find","~$cljs-uuid-utils.core/uuid-regex","~$cljs-uuid-utils.core/make-uuid-from","~$cljs-uuid-utils.core/make-random-uuid","~$cljs-uuid-utils.core/uuid-string","~$cljs.core/UUID","~$cljs.core/type"]]],"~:cache-keys",["~#cmap",[["^1<","goog/dom/tagname.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^Q",[]],"~:deps-syms",["^[","~$goog.dom.HtmlElement"]]],["^1<","goog/math/math.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^1X",["^ ","^1Y",null,"^1Z",["^Q",[]],"^1[",["^[","~$goog.array","~$goog.asserts"]]],["^1<","goog/html/trustedtypes.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^1X",["^ ","^1Y",null,"^1Z",["^Q",[]],"^1[",["^["]]],["^1<","goog/labs/useragent/browser.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^1X",["^ ","^1Y",null,"^1Z",["^Q",[]],"^1[",["^[","^21","~$goog.labs.userAgent.util","~$goog.object","~$goog.string.internal"]]],["^1<","goog/html/safeurl.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^1X",["^ ","^1Y",null,"^1Z",["^Q",[]],"^1[",["^[","^22","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.i18n.bidi.Dir","~$goog.i18n.bidi.DirectionalString","~$goog.string.Const","~$goog.string.TypedString","^25"]]],["^1<","cljs_uuid_utils/core.cljs"],["7afda15f1a7cefdfb65f633937bd53ed5e367bd5","^1X",["^ ","^1Y",null,"^1Z",["^Q",[]],"^1[",["^[","^Z","^X"]]],["^1<","goog/array/array.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^1X",["^ ","^1Y",null,"^1Z",["^Q",[]],"^1[",["^[","^22"]]],["^1<","goog/debug/error.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^1X",["^ ","^1Y",null,"^1Z",["^Q",[]],"^1[",["^["]]],["^1<","goog/dom/nodetype.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^1X",["^ ","^1Y",null,"^1Z",["^Q",[]],"^1[",["^["]]],["^1<","goog/string/typedstring.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^1X",["^ ","^1Y",null,"^1Z",["^Q",[]],"^1[",["^["]]],["^1<","goog/object/object.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^1X",["^ ","^1Y",null,"^1Z",["^Q",[]],"^1[",["^["]]],["^1<","goog/dom/asserts.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^1X",["^ ","^1Y",null,"^1Z",["^Q",[]],"^1[",["^[","^22"]]],"~:SHADOW-TIMESTAMP",[1618720883000,1618720883000,1618720422000],["^1<","goog/math/long.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^1X",["^ ","^1Y",null,"^1Z",["^Q",[]],"^1[",["^[","^22","~$goog.reflect"]]],["^1<","goog/html/trustedresourceurl.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^1X",["^ ","^1Y",null,"^1Z",["^Q",[]],"^1[",["^[","^22","~$goog.fs.blob","^26","~$goog.html.SafeScript","~$goog.html.trustedtypes","^28","^29","^2:","^2;"]]],["^1<","goog/string/internal.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^1X",["^ ","^1Y",null,"^1Z",["^Q",[]],"^1[",["^["]]],["^1<","goog/functions/functions.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^1X",["^ ","^1Y",null,"^1Z",["^Q",[]],"^1[",["^["]]],["^1<","goog/html/safestyle.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^1X",["^ ","^1Y",null,"^1Z",["^Q",[]],"^1[",["^[","^21","^22","~$goog.html.SafeUrl","^2:","^2;","^25"]]],["^1<","goog/dom/safe.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^1X",["^ ","^1Y",null,"^1Z",["^Q",[]],"^1[",["^[","^22","~$goog.dom.asserts","~$goog.functions","~$goog.html.SafeHtml","^2?","~$goog.html.SafeStyle","^2A","^27","~$goog.html.uncheckedconversions","^2:","^25"]]],["^1<","goog/structs/map.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^1X",["^ ","^1Y",null,"^1Z",["^Q",[]],"^1[",["^[","~$goog.iter.Iterator","~$goog.iter.StopIteration"]]],["^1<","goog/html/safehtml.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^1X",["^ ","^1Y",null,"^1Z",["^Q",[]],"^1[",["^[","^21","^22","~$goog.dom.TagName","~$goog.dom.tags","^2?","^2E","~$goog.html.SafeStyleSheet","^2A","^27","^2@","^28","^29","~$goog.labs.userAgent.browser","^24","^2:","^2;","^25"]]],["^1<","goog/dom/tags.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^1X",["^ ","^1Y",null,"^1Z",["^Q",[]],"^1[",["^[","^24"]]],["^1<","goog/fs/blob.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^1X",["^ ","^1Y",null,"^1Z",["^Q",[]],"^1[",["^[","^21"]]],["^1<","goog/asserts/asserts.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^1X",["^ ","^1Y",null,"^1Z",["^Q",[]],"^1[",["^[","~$goog.debug.Error","~$goog.dom.NodeType"]]],["^1<","goog/uri/uri.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^1X",["^ ","^1Y",null,"^1Z",["^Q",[]],"^1[",["^[","^21","^22","~$goog.string","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^1<","goog/i18n/bidi.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^1X",["^ ","^1Y",null,"^1Z",["^Q",[]],"^1[",["^["]]],["^1<","goog/fs/url.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^1X",["^ ","^1Y",null,"^1Z",["^Q",[]],"^1[",["^["]]],["^1<","goog/base.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^1X",["^ ","^1Y",null,"^1Z",["^Q",[]],"^1[",[]]],["^1<","goog/structs/structs.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^1X",["^ ","^1Y",null,"^1Z",["^Q",[]],"^1[",["^[","^21","^24"]]],["^1<","clojure/string.cljs"],["86bedf67c795c72bde3feb0415b41be8b95f2cbb","^1X",["^ ","^1Y",null,"^1Z",["^Q",[]],"^1[",["^[","^Z","^2O","~$goog.string.StringBuffer"]]],["^1<","goog/string/string.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^1X",["^ ","^1Y",null,"^1Z",["^Q",[]],"^1[",["^[","~$goog.dom.safe","^2F","^2:","^25"]]],["^1<","goog/reflect/reflect.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^1X",["^ ","^1Y",null,"^1Z",["^Q",[]],"^1[",["^["]]],["^1<","goog/labs/useragent/util.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^1X",["^ ","^1Y",null,"^1Z",["^Q",[]],"^1[",["^[","^25"]]],["^1<","goog/string/stringbuffer.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^1X",["^ ","^1Y",null,"^1Z",["^Q",[]],"^1[",["^["]]],["^1<","goog/iter/iter.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^1X",["^ ","^1Y",null,"^1Z",["^Q",[]],"^1[",["^[","^21","^22","^2C","~$goog.math"]]],["^1<","goog/html/uncheckedconversions.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^1X",["^ ","^1Y",null,"^1Z",["^Q",[]],"^1[",["^[","^22","^2D","^2?","^2E","^2K","^2A","^27","^2:","^25","^28"]]],["^1<","goog/dom/htmlelement.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^1X",["^ ","^1Y",null,"^1Z",["^Q",[]],"^1[",["^["]]],["^1<","cljs/core.cljs"],["86bedf67c795c72bde3feb0415b41be8b95f2cbb","^1X",["^ ","^1Y",null,"^1Z",["^Q",[]],"^1[",["^[","~$goog.math.Long","~$goog.math.Integer","^2O","^24","^21","~$goog.Uri","^2U"]]],["^1<","goog/html/safescript.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^1X",["^ ","^1Y",null,"^1Z",["^Q",[]],"^1[",["^[","^2:","^2;","^2@","^22"]]],["^1<","goog/html/safestylesheet.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^1X",["^ ","^1Y",null,"^1Z",["^Q",[]],"^1[",["^[","^2:","^2E","^2;","^21","^24","^22","^25"]]],["^1<","goog/math/integer.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^1X",["^ ","^1Y",null,"^1Z",["^Q",[]],"^1[",["^[","^2="]]],["^1<","goog/uri/utils.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^1X",["^ ","^1Y",null,"^1Z",["^Q",[]],"^1[",["^[","^22","^2O"]]],["^1<","goog/string/const.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^1X",["^ ","^1Y",null,"^1Z",["^Q",[]],"^1[",["^[","^22","^2;"]]]]],"~:clj-info",["^ ","jar:file:/home/andreas/.m2/repository/org/clojure/clojurescript/1.10.844/clojurescript-1.10.844.jar!/cljs/env.cljc",1618720422000,"jar:file:/home/andreas/.m2/repository/org/clojure/clojurescript/1.10.844/clojurescript-1.10.844.jar!/cljs/externs.clj",1618720422000,"jar:file:/home/andreas/.m2/repository/org/clojure/clojurescript/1.10.844/clojurescript-1.10.844.jar!/cljs/tagged_literals.cljc",1618720422000,"jar:file:/home/andreas/.m2/repository/org/clojure/data.json/2.1.0/data.json-2.1.0.jar!/clojure/data/json.clj",1618502954000,"jar:file:/home/andreas/.m2/repository/org/clojure/clojurescript/1.10.844/clojurescript-1.10.844.jar!/cljs/compiler.cljc",1618720422000,"jar:file:/home/andreas/.m2/repository/org/clojure/clojurescript/1.10.844/clojurescript-1.10.844.jar!/cljs/instant.clj",1618720422000,"jar:file:/home/andreas/.m2/repository/org/clojure/clojurescript/1.10.844/clojurescript-1.10.844.jar!/cljs/source_map/base64_vlq.clj",1618720422000,"jar:file:/home/andreas/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/edn.clj",1618716228000,"jar:file:/home/andreas/.m2/repository/org/clojure/tools.reader/1.3.5/tools.reader-1.3.5.jar!/clojure/tools/reader/default_data_readers.clj",1618501370000,"jar:file:/home/andreas/.m2/repository/org/clojure/clojurescript/1.10.844/clojurescript-1.10.844.jar!/cljs/analyzer.cljc",1618720422000,"jar:file:/home/andreas/.m2/repository/org/clojure/clojurescript/1.10.844/clojurescript-1.10.844.jar!/cljs/source_map.clj",1618720422000,"jar:file:/home/andreas/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/core.clj",1618716228000,"jar:file:/home/andreas/.m2/repository/org/clojure/tools.reader/1.3.5/tools.reader-1.3.5.jar!/clojure/tools/reader.clj",1618501370000,"jar:file:/home/andreas/.m2/repository/org/clojure/clojurescript/1.10.844/clojurescript-1.10.844.jar!/cljs/js_deps.cljc",1618720422000,"jar:file:/home/andreas/.m2/repository/org/clojure/clojurescript/1.10.844/clojurescript-1.10.844.jar!/cljs/core.cljc",1618720422000,"jar:file:/home/andreas/.m2/repository/org/clojure/tools.reader/1.3.5/tools.reader-1.3.5.jar!/clojure/tools/reader/impl/inspect.clj",1618501370000,"jar:file:/home/andreas/.m2/repository/org/clojure/tools.reader/1.3.5/tools.reader-1.3.5.jar!/clojure/tools/reader/reader_types.clj",1618501370000,"jar:file:/home/andreas/.m2/repository/binaryage/devtools/1.0.2/devtools-1.0.2.jar!/devtools/defaults.clj",1618720434000,"jar:file:/home/andreas/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/java/io.clj",1618716228000,"jar:file:/home/andreas/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/pprint.clj",1618716228000,"jar:file:/home/andreas/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/set.clj",1618716228000,"jar:file:/home/andreas/.m2/repository/org/clojure/clojurescript/1.10.844/clojurescript-1.10.844.jar!/cljs/analyzer/impl.cljc",1618720422000,"jar:file:/home/andreas/.m2/repository/org/clojure/tools.reader/1.3.5/tools.reader-1.3.5.jar!/clojure/tools/reader/impl/errors.clj",1618501370000,"jar:file:/home/andreas/.m2/repository/org/clojure/clojurescript/1.10.844/clojurescript-1.10.844.jar!/cljs/util.cljc",1618720422000,"jar:file:/home/andreas/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/string.clj",1618716228000,"jar:file:/home/andreas/.m2/repository/org/clojure/clojurescript/1.10.844/clojurescript-1.10.844.jar!/cljs/source_map/base64.clj",1618720422000,"jar:file:/home/andreas/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/instant.clj",1618716228000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","ClojureScript micro-library with an implementation of a type 4, random UUID generator compatible with RFC-4122 and cljs.core/UUID (make-random-uuid), a getter function to obtain the uuid string representation from a UUID-instance (uuid-string), a uuid-string conformance validating predicate (valid-uuid?), and a UUID factory from uuid-string with conformance validation (make-uuid-from).","^7","cljs_uuid_utils/core.cljs","^8",9,"^9",5,"^:",9,"^;",25],"^<",["^ ","^=","^>","^?","^@","^A","^B","^C","^D","^E","^F","^G","^H","^I","^J","^K","^L","^M","^N"],"^O",null,"^P",["^Q",[]],"^R","^S","^V",null,"^W",["^ ","^X","^X","^Y","^X","^Z","^Z","^[","^["],"^10",["^Q",["^11"]],"~:shadow/js-access-global",["^Q",["Date"]],"^12",null,"~:defs",["^ ","~$uuid-string",["^ ","~:protocol-inline",null,"^5",["^ ","^7","cljs_uuid_utils/core.cljs","^8",20,"^9",7,"^:",20,"^;",18,"~:arglists",["^15",["~$quote",["^15",[["~$a-uuid"]]]]],"^6","(uuid-string a-uuid)  =>  uuid-str\n  Arguments and Values:\n  a-uuid --- a cljs.core/UUID instance.\n  uuid-str --- returns a string representation of the UUID instance\n  Description:\n  Returns the string representation of the UUID instance in the format of,\n  \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\" similarly to java.util.UUID/toString.\n  Note that this is different from cljs.core/UUID's EDN string-format.\n  Examples:\n  (def u (make-random-uuid))  =>  #uuid \"305e764d-b451-47ae-a90d-5db782ac1f2e\"\n  (uuid-string u) => \"305e764d-b451-47ae-a90d-5db782ac1f2e\""],"^R","^1S","^7","cljs_uuid_utils/core.cljs","^;",18,"~:method-params",["^15",[["^3R"]]],"~:protocol-impl",null,"~:arglists-meta",["^15",[null,null]],"^9",1,"~:variadic?",false,"^8",20,"~:ret-tag","^Y","^:",20,"~:max-fixed-arity",1,"~:fn-var",true,"^3P",["^15",["^3Q",["^15",[["^3R"]]]]],"^6","(uuid-string a-uuid)  =>  uuid-str\n  Arguments and Values:\n  a-uuid --- a cljs.core/UUID instance.\n  uuid-str --- returns a string representation of the UUID instance\n  Description:\n  Returns the string representation of the UUID instance in the format of,\n  \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\" similarly to java.util.UUID/toString.\n  Note that this is different from cljs.core/UUID's EDN string-format.\n  Examples:\n  (def u (make-random-uuid))  =>  #uuid \"305e764d-b451-47ae-a90d-5db782ac1f2e\"\n  (uuid-string u) => \"305e764d-b451-47ae-a90d-5db782ac1f2e\""],"~$make-random-squuid",["^ ","^3O",null,"^5",["^ ","^7","cljs_uuid_utils/core.cljs","^8",36,"^9",7,"^:",36,"^;",25,"^3P",["^15",["^3Q",["^15",[[]]]]],"^6","(make-random-squuid)  =>  new-uuid\n  Arguments and Values:\n  new-squuid --- new type 4 (pseudo randomly generated) cljs.core/UUID instance.\n  Description:\n  Returns pseudo randomly generated, semi-sequential SQUUID. \n  See http://docs.datomic.com/clojure/#datomic.api/squuid\n  Returns a UUID where the most significant 32 bits are the current time since epoch in seconds.\n  like: xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx as per http://www.ietf.org/rfc/rfc4122.txt.\n  Examples:\n  (make-random-squuid)  =>  #uuid \"305e764d-b451-47ae-a90d-5db782ac1f2e\"\n  (type (make-random-squuid)) => cljs.core/UUID"],"^R","^1N","^7","cljs_uuid_utils/core.cljs","^;",25,"^3S",["^15",[[]]],"^3T",null,"^3U",["^15",[null,null]],"^9",1,"^3V",false,"^8",36,"^:",36,"^3X",0,"^3Y",true,"^3P",["^15",["^3Q",["^15",[[]]]]],"^6","(make-random-squuid)  =>  new-uuid\n  Arguments and Values:\n  new-squuid --- new type 4 (pseudo randomly generated) cljs.core/UUID instance.\n  Description:\n  Returns pseudo randomly generated, semi-sequential SQUUID. \n  See http://docs.datomic.com/clojure/#datomic.api/squuid\n  Returns a UUID where the most significant 32 bits are the current time since epoch in seconds.\n  like: xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx as per http://www.ietf.org/rfc/rfc4122.txt.\n  Examples:\n  (make-random-squuid)  =>  #uuid \"305e764d-b451-47ae-a90d-5db782ac1f2e\"\n  (type (make-random-squuid)) => cljs.core/UUID"],"~$make-random-uuid",["^ ","^3O",null,"^5",["^ ","^7","cljs_uuid_utils/core.cljs","^8",60,"^9",7,"^:",60,"^;",23,"^3P",["^15",["^3Q",["^15",[[]]]]],"^6","(make-random-uuid)  =>  new-uuid\n  Arguments and Values:\n  new-uuid --- new type 4 (pseudo randomly generated) cljs.core/UUID instance.\n  Description:\n  Returns pseudo randomly generated UUID,\n  like: xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx as per http://www.ietf.org/rfc/rfc4122.txt.\n  Examples:\n  (make-random-uuid)  =>  #uuid \"305e764d-b451-47ae-a90d-5db782ac1f2e\"\n  (type (make-random-uuid)) => cljs.core/UUID"],"^R","^1R","^7","cljs_uuid_utils/core.cljs","^;",23,"^3S",["^15",[[]]],"^3T",null,"^3U",["^15",[null,null]],"^9",1,"^3V",false,"^8",60,"^:",60,"^3X",0,"^3Y",true,"^3P",["^15",["^3Q",["^15",[[]]]]],"^6","(make-random-uuid)  =>  new-uuid\n  Arguments and Values:\n  new-uuid --- new type 4 (pseudo randomly generated) cljs.core/UUID instance.\n  Description:\n  Returns pseudo randomly generated UUID,\n  like: xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx as per http://www.ietf.org/rfc/rfc4122.txt.\n  Examples:\n  (make-random-uuid)  =>  #uuid \"305e764d-b451-47ae-a90d-5db782ac1f2e\"\n  (type (make-random-uuid)) => cljs.core/UUID"],"~$uuid-regex",["^ ","^5",["^ ","^7","cljs_uuid_utils/core.cljs","^8",81,"^9",16,"^:",81,"^;",26,"~:private",true],"^41",true,"^R","^1P","^7","cljs_uuid_utils/core.cljs","^;",26,"^9",1,"^8",81,"^:",81,"~:tag",["^Q",[null,"~$js/RegExp"]]],"~$valid-uuid?",["^ ","^3O",null,"^5",["^ ","^7","cljs_uuid_utils/core.cljs","^8",86,"^9",7,"^:",86,"^;",18,"^3P",["^15",["^3Q",["^15",[["~$maybe-uuid"]]]]],"^6","(valid-uuid? maybe-uuid)  =>  truthy-falsy\n  Arguments and Values:\n  maybe-uuid --- string or UUID-instance that may represent a conformant UUID.\n  truthy-falsy --- Returns either the conforming UUID-string (truthy) or nil (falsy).\n  Description:\n  Predicate to test whether a string representation conforms to a\n  \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\" format where each x is a hexadecimal character.\n  Input can be a maybe-uuid string or a cljs.core/UUID instance.\n  Note that the current \"cljs.core/UUID.\" constructor does not check for any conformance.\n  Examples:\n  (valid-uuid? \"NO-WAY\")  =>  nil\n  (valid-uuid? \"4d7332e7-e4c6-4ca5-af91-86336c825e25\")  => \"4d7332e7-e4c6-4ca5-af91-86336c825e25\"\n  (valid-uuid? (UUID. \"4d7332e7-e4c6-4ca5-af91-86336c825e25\"))  => \"4d7332e7-e4c6-4ca5-af91-86336c825e25\"\n  (valid-uuid? (UUID. \"YES-WAY\"))  => nil"],"^R","^1M","^7","cljs_uuid_utils/core.cljs","^;",18,"^3S",["^15",[["^45"]]],"^3T",null,"^3U",["^15",[null,null]],"^9",1,"^3V",false,"^8",86,"^3W",["^Q",["~$clj","~$cljs.core/IVector","~$any","~$cljs.core/MetaFn","~$clj-nil"]],"^:",86,"^3X",1,"^3Y",true,"^3P",["^15",["^3Q",["^15",[["^45"]]]]],"^6","(valid-uuid? maybe-uuid)  =>  truthy-falsy\n  Arguments and Values:\n  maybe-uuid --- string or UUID-instance that may represent a conformant UUID.\n  truthy-falsy --- Returns either the conforming UUID-string (truthy) or nil (falsy).\n  Description:\n  Predicate to test whether a string representation conforms to a\n  \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\" format where each x is a hexadecimal character.\n  Input can be a maybe-uuid string or a cljs.core/UUID instance.\n  Note that the current \"cljs.core/UUID.\" constructor does not check for any conformance.\n  Examples:\n  (valid-uuid? \"NO-WAY\")  =>  nil\n  (valid-uuid? \"4d7332e7-e4c6-4ca5-af91-86336c825e25\")  => \"4d7332e7-e4c6-4ca5-af91-86336c825e25\"\n  (valid-uuid? (UUID. \"4d7332e7-e4c6-4ca5-af91-86336c825e25\"))  => \"4d7332e7-e4c6-4ca5-af91-86336c825e25\"\n  (valid-uuid? (UUID. \"YES-WAY\"))  => nil"],"~$make-uuid-from",["^ ","^3O",null,"^5",["^ ","^7","cljs_uuid_utils/core.cljs","^8",112,"^9",7,"^:",112,"^;",21,"^3P",["^15",["^3Q",["^15",[["^45"]]]]],"^6","(make-uuid-from maybe-uuid maybe-uuid)  =>  uuid-or-nil\n  Arguments and Values:\n  maybe-uuid --- string or UUID-instance that may represent a conformant UUID.\n  uuid-or-nil --- Returns either a cljs.core/UUID instance or nil.\n  Description:\n  Returns a cljs.core/UUID instance for a conformant UUID-string representation, or nil.\n  Input can be a string or a cljs.core/UUID instance.\n  Note that if the input UUID-instance is not valid, nil is returned.\n  Examples:\n  (make-uuid-from \"NO-WAY\")  =>  nil\n  (make-uuid-from \"4d7332e7-e4c6-4ca5-af91-86336c825e25\")  => #uuid \"4d7332e7-e4c6-4ca5-af91-86336c825e25\"\n  (make-uuid-from (UUID. \"4d7332e7-e4c6-4ca5-af91-86336c825e25\"))  => #uuid \"4d7332e7-e4c6-4ca5-af91-86336c825e25\"\n  (make-uuid-from (UUID. \"YES-WAY\"))  => nil"],"^R","^1Q","^7","cljs_uuid_utils/core.cljs","^;",21,"^3S",["^15",[["^45"]]],"^3T",null,"^3U",["^15",[null,null]],"^9",1,"^3V",false,"^8",112,"^3W",["^Q",[null,"^1T","^4:"]],"^:",112,"^3X",1,"^3Y",true,"^3P",["^15",["^3Q",["^15",[["^45"]]]]],"^6","(make-uuid-from maybe-uuid maybe-uuid)  =>  uuid-or-nil\n  Arguments and Values:\n  maybe-uuid --- string or UUID-instance that may represent a conformant UUID.\n  uuid-or-nil --- Returns either a cljs.core/UUID instance or nil.\n  Description:\n  Returns a cljs.core/UUID instance for a conformant UUID-string representation, or nil.\n  Input can be a string or a cljs.core/UUID instance.\n  Note that if the input UUID-instance is not valid, nil is returned.\n  Examples:\n  (make-uuid-from \"NO-WAY\")  =>  nil\n  (make-uuid-from \"4d7332e7-e4c6-4ca5-af91-86336c825e25\")  => #uuid \"4d7332e7-e4c6-4ca5-af91-86336c825e25\"\n  (make-uuid-from (UUID. \"4d7332e7-e4c6-4ca5-af91-86336c825e25\"))  => #uuid \"4d7332e7-e4c6-4ca5-af91-86336c825e25\"\n  (make-uuid-from (UUID. \"YES-WAY\"))  => nil"]],"^13",["^ ","^Z","^Z"],"~:cljs.analyzer/constants",["^ ","^10",["^Q",["~:true"]],"~:order",["^4="]],"^18",["^ ","^11",["^Q",[]]],"^19",["^ "],"^1:",["^[","^Z","^X"]],"^U","^S","~:ns-specs",["^ "],"~:ns-spec-vars",["^Q",[]],"~:compiler-options",["^1W",[["^4A","~:static-fns"],true,["^4A","~:shadow-tweaks"],null,["^4A","~:source-map-inline"],null,["^4A","~:elide-asserts"],false,["^4A","~:optimize-constants"],null,["^4A","^1?"],null,["^4A","~:external-config"],null,["^4A","~:tooling-config"],null,["^4A","~:emit-constants"],null,["^4A","~:load-tests"],null,["^4A","~:form-size-threshold"],null,["^4A","~:data-readers"],null,["^4A","~:infer-externs"],"~:auto",["^4A","^1A"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^4A","~:fn-invoke-direct"],null,["^4A","~:source-map"],"/dev/null"]]]