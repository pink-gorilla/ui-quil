["^ ","~:output",["^ ","~:js","goog.provide('lambdaisland.ansi');\n/**\n * ASCII escape character (codepoint 27, hex 1b, octal 33).\n */\nlambdaisland.ansi.ESC = \"\\u001B[\";\nlambdaisland.ansi._EQ_i = cljs.core.identical_QMARK_;\n/**\n * Fast string length\n */\nlambdaisland.ansi.str_length = (function lambdaisland$ansi$str_length(s){\nreturn s.length;\n});\n/**\n * Color schemes used in popular applications.\n */\nlambdaisland.ansi.color_schemes = cljs.core.into.cljs$core$IFn$_invoke$arity$3(cljs.core.PersistentArrayMap.EMPTY,cljs.core.map.cljs$core$IFn$_invoke$arity$1((function (p__102444){\nvar vec__102445 = p__102444;\nvar seq__102446 = cljs.core.seq(vec__102445);\nvar first__102447 = cljs.core.first(seq__102446);\nvar seq__102446__$1 = cljs.core.next(seq__102446);\nvar x = first__102447;\nvar xs = seq__102446__$1;\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [x,cljs.core.vec(xs)], null);\n})),cljs.core.apply.cljs$core$IFn$_invoke$arity$3(cljs.core.mapv,cljs.core.vector,new cljs.core.PersistentVector(null, 17, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"vga\",\"vga\",-1367544518),new cljs.core.Keyword(null,\"cmd\",\"cmd\",-302931143),new cljs.core.Keyword(null,\"osx\",\"osx\",-1758754360),new cljs.core.Keyword(null,\"putty\",\"putty\",1014121302),new cljs.core.Keyword(null,\"mirc\",\"mirc\",-2122433283),new cljs.core.Keyword(null,\"xterm\",\"xterm\",1729060616),new cljs.core.Keyword(null,\"ubuntu\",\"ubuntu\",-431145217)], null),new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(0),(0),(0)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(1),(1),(1)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(0),(0),(0)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(0),(0),(0)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(0),(0),(0)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(0),(0),(0)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(0),(0),(0)], null)], null),new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(170),(0),(0)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(128),(0),(0)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(194),(54),(33)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(187),(0),(0)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(127),(0),(0)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(205),(0),(0)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(222),(56),(43)], null)], null),new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(0),(170),(0)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(0),(128),(0)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(37),(188),(36)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(0),(187),(0)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(0),(147),(0)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(0),(205),(0)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(57),(181),(74)], null)], null),new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(170),(85),(0)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(128),(128),(0)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(173),(173),(39)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(187),(187),(0)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(252),(127),(0)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(205),(205),(0)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(255),(199),(6)], null)], null),new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(0),(0),(170)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(0),(0),(128)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(73),(46),(225)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(0),(0),(187)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(0),(0),(127)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(0),(0),(238)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(0),(111),(184)], null)], null),new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(170),(0),(170)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(128),(0),(128)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(211),(56),(211)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(187),(0),(187)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(156),(0),(156)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(205),(0),(205)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(118),(38),(113)], null)], null),new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(0),(170),(170)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(0),(128),(128)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(51),(187),(200)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(0),(187),(187)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(0),(147),(147)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(0),(205),(205)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(44),(181),(233)], null)], null),new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(170),(170),(170)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(192),(192),(192)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(203),(204),(205)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(187),(187),(187)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(210),(210),(210)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(229),(229),(229)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(204),(204),(204)], null)], null),new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(85),(85),(85)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(128),(128),(128)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(129),(131),(131)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(85),(85),(85)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(127),(127),(127)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(127),(127),(127)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(128),(128),(128)], null)], null),new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(255),(85),(85)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(255),(0),(0)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(252),(57),(31)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(255),(85),(85)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(255),(0),(0)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(255),(0),(0)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(255),(0),(0)], null)], null),new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(85),(255),(85)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(0),(255),(0)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(49),(231),(34)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(85),(255),(85)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(0),(252),(0)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(0),(255),(0)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(0),(255),(0)], null)], null),new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(255),(255),(85)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(255),(255),(0)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(234),(236),(35)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(255),(255),(85)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(255),(255),(0)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(255),(255),(0)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(255),(255),(0)], null)], null),new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(85),(85),(255)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(0),(0),(255)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(88),(51),(255)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(85),(85),(255)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(0),(0),(252)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(92),(92),(255)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(0),(0),(255)], null)], null),new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(255),(85),(255)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(255),(0),(255)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(249),(53),(248)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(255),(85),(255)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(255),(0),(255)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(255),(0),(255)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(255),(0),(255)], null)], null),new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(85),(255),(255)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(0),(255),(255)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(20),(240),(240)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(85),(255),(255)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(0),(255),(255)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(0),(255),(255)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(0),(255),(255)], null)], null),new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(255),(255),(255)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(255),(255),(255)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(233),(235),(235)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(255),(255),(255)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(255),(255),(255)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(255),(255),(255)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(255),(255),(255)], null)], null)], null)));\n/**\n * Color scheme currently in use during parsing.\n */\nlambdaisland.ansi._STAR_color_scheme_STAR_ = new cljs.core.Keyword(null,\"xterm\",\"xterm\",1729060616).cljs$core$IFn$_invoke$arity$1(lambdaisland.ansi.color_schemes);\nlambdaisland.ansi.get_color = (function lambdaisland$ansi$get_color(n){\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"rgb\",\"rgb\",1432123467)], null),cljs.core.get.cljs$core$IFn$_invoke$arity$2(lambdaisland.ansi._STAR_color_scheme_STAR_,n));\n});\nlambdaisland.ansi.parse_int = (function lambdaisland$ansi$parse_int(s){\nreturn parseInt(s,(10));\n});\nlambdaisland.ansi.reset_attrs = new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"foreground\",\"foreground\",499022036),null,new cljs.core.Keyword(null,\"background\",\"background\",-863952629),null,new cljs.core.Keyword(null,\"bold\",\"bold\",-116809535),null], null);\n/**\n * Given a CSI code, return a map of properties it sets. A value of `nil` means\n *   the property gets unset.\n */\nlambdaisland.ansi.code__GT_attrs = (function lambdaisland$ansi$code__GT_attrs(code){\nif(cljs.core.truth_((lambdaisland.ansi._EQ_i.cljs$core$IFn$_invoke$arity$2 ? lambdaisland.ansi._EQ_i.cljs$core$IFn$_invoke$arity$2((0),code) : lambdaisland.ansi._EQ_i.call(null,(0),code)))){\nreturn lambdaisland.ansi.reset_attrs;\n} else {\nif(cljs.core.truth_((lambdaisland.ansi._EQ_i.cljs$core$IFn$_invoke$arity$2 ? lambdaisland.ansi._EQ_i.cljs$core$IFn$_invoke$arity$2((1),code) : lambdaisland.ansi._EQ_i.call(null,(1),code)))){\nreturn new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"bold\",\"bold\",-116809535),true], null);\n} else {\nif(((((30) <= code)) && ((code <= (37))))){\nreturn new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"foreground\",\"foreground\",499022036),lambdaisland.ansi.get_color((code - (30)))], null);\n} else {\nif(cljs.core.truth_((lambdaisland.ansi._EQ_i.cljs$core$IFn$_invoke$arity$2 ? lambdaisland.ansi._EQ_i.cljs$core$IFn$_invoke$arity$2((39),code) : lambdaisland.ansi._EQ_i.call(null,(39),code)))){\nreturn new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"foreground\",\"foreground\",499022036),null], null);\n} else {\nif(((((40) <= code)) && ((code <= (47))))){\nreturn new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"background\",\"background\",-863952629),lambdaisland.ansi.get_color((code - (40)))], null);\n} else {\nif(cljs.core.truth_((lambdaisland.ansi._EQ_i.cljs$core$IFn$_invoke$arity$2 ? lambdaisland.ansi._EQ_i.cljs$core$IFn$_invoke$arity$2((49),code) : lambdaisland.ansi._EQ_i.call(null,(49),code)))){\nreturn new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"background\",\"background\",-863952629),null], null);\n} else {\nif(((((90) <= code)) && ((code <= (99))))){\nreturn new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"foreground\",\"foreground\",499022036),lambdaisland.ansi.get_color(((8) + (code - (90))))], null);\n} else {\nif(((((100) <= code)) && ((code <= (109))))){\nreturn new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"background\",\"background\",-863952629),lambdaisland.ansi.get_color(((8) + (code - (40))))], null);\n} else {\nreturn null;\n}\n}\n}\n}\n}\n}\n}\n}\n});\n/**\n * Parse a \"8-bit\" color, given the code that follows on ESC[38;5;<code>m.\n */\nlambdaisland.ansi.color_8_bit = (function lambdaisland$ansi$color_8_bit(code){\nif(((((0) <= code)) && ((code <= (7))))){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [lambdaisland.ansi.get_color(code),false], null);\n} else {\nif(((((8) <= code)) && ((code <= (15))))){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [lambdaisland.ansi.get_color((code - (8))),true], null);\n} else {\nif(((((16) <= code)) && ((code <= (231))))){\nvar code__$1 = (code - (16));\nvar blue = cljs.core.mod(code__$1,(6));\nvar green = cljs.core.mod(((code__$1 - blue) / (6)),(6));\nvar red = (((code__$1 - blue) - ((6) * green)) / (36));\nvar color_values = new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [(0),(95),(135),(175),(215),(255)], null);\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.into.cljs$core$IFn$_invoke$arity$3(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"rgb\",\"rgb\",1432123467)], null),cljs.core.map.cljs$core$IFn$_invoke$arity$1(color_values),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [red,green,blue], null)),false], null);\n} else {\nif(((((232) <= code)) && ((code <= (255))))){\nvar x = ((8) + ((10) * (code - (232))));\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"rgb\",\"rgb\",1432123467),x,x,x], null),false], null);\n} else {\nreturn null;\n}\n}\n}\n}\n});\nlambdaisland.ansi.color_24_bit = (function lambdaisland$ansi$color_24_bit(p__102448){\nvar vec__102449 = p__102448;\nvar r = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__102449,(0),null);\nvar g = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__102449,(1),null);\nvar b = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__102449,(2),null);\nreturn new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"rgb\",\"rgb\",1432123467),r,g,b], null);\n});\n/**\n * Handle CSI code 38 and 48, used to specify 8 or 24 bit colors. This may consume\n *   up to 5 codes in total (ESC [38;2;r;g;bm). Returns the map of properties that\n *   get set, and the remaining, unconsumed codes.\n */\nlambdaisland.ansi.parse_color = (function lambdaisland$ansi$parse_color(fg_or_bg,p__102452){\nvar vec__102453 = p__102452;\nvar seq__102454 = cljs.core.seq(vec__102453);\nvar first__102455 = cljs.core.first(seq__102454);\nvar seq__102454__$1 = cljs.core.next(seq__102454);\nvar colorspace = first__102455;\nvar more = seq__102454__$1;\nvar type = (function (){var G__102457 = fg_or_bg;\nswitch (G__102457) {\ncase (38):\nreturn new cljs.core.Keyword(null,\"foreground\",\"foreground\",499022036);\n\nbreak;\ncase (48):\nreturn new cljs.core.Keyword(null,\"background\",\"background\",-863952629);\n\nbreak;\ndefault:\nthrow (new Error([\"No matching clause: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(G__102457)].join('')));\n\n}\n})();\nvar G__102458 = colorspace;\nswitch (G__102458) {\ncase (5):\nvar vec__102461 = lambdaisland.ansi.color_8_bit(cljs.core.first(more));\nvar color = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__102461,(0),null);\nvar bold_QMARK_ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__102461,(1),null);\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.PersistentArrayMap.createAsIfByAssoc([type,color]),(cljs.core.truth_(bold_QMARK_)?new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"bold\",\"bold\",-116809535),true], null):null)], 0)),cljs.core.next(more)], null);\n\nbreak;\ncase (2):\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"foreground\",\"foreground\",499022036),lambdaisland.ansi.color_24_bit(cljs.core.take.cljs$core$IFn$_invoke$arity$2((3),more))], null),cljs.core.nthnext(more,(3))], null);\n\nbreak;\ndefault:\nthrow (new Error([\"No matching clause: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(G__102458)].join('')));\n\n}\n});\n/**\n * Like clojure.string/split, but uses a single character instead of a regex,\n *   allowing for faster operation.\n */\nlambdaisland.ansi.str_split = (function lambdaisland$ansi$str_split(s,sep){\nvar res = cljs.core.PersistentVector.EMPTY;\nvar start = (0);\nvar end = s.indexOf(sep);\nwhile(true){\nif(cljs.core.truth_((lambdaisland.ansi._EQ_i.cljs$core$IFn$_invoke$arity$2 ? lambdaisland.ansi._EQ_i.cljs$core$IFn$_invoke$arity$2(end,(-1)) : lambdaisland.ansi._EQ_i.call(null,end,(-1))))){\nreturn cljs.core.conj.cljs$core$IFn$_invoke$arity$2(res,s.substring(start));\n} else {\nvar G__102579 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(res,s.substring(start,end));\nvar G__102580 = (end + (1));\nvar G__102581 = s.indexOf(sep,(end + (1)));\nres = G__102579;\nstart = G__102580;\nend = G__102581;\ncontinue;\n}\nbreak;\n}\n});\n/**\n * Given a CSI specifier, excluding ESC[ but including the final \"m\", convert it\n *   to a map of properties that it sets or unsets. Property values of nil indicate\n *   a reset/unset. \n */\nlambdaisland.ansi.csi__GT_attrs = (function lambdaisland$ansi$csi__GT_attrs(csi){\nif(cljs.core.truth_(csi.endsWith(\"m\"))){\nif(((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(csi,\"m\")) || (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(csi,\"0m\")))){\nreturn lambdaisland.ansi.reset_attrs;\n} else {\nvar csi_len = lambdaisland.ansi.str_length(csi);\nvar G__102477 = cljs.core.map.cljs$core$IFn$_invoke$arity$2(lambdaisland.ansi.parse_int,lambdaisland.ansi.str_split(csi.substring((0),(lambdaisland.ansi.str_length(csi) - (1))),\";\"));\nvar vec__102478 = G__102477;\nvar seq__102479 = cljs.core.seq(vec__102478);\nvar first__102480 = cljs.core.first(seq__102479);\nvar seq__102479__$1 = cljs.core.next(seq__102479);\nvar code = first__102480;\nvar codes = seq__102479__$1;\nvar result = cljs.core.PersistentArrayMap.EMPTY;\nvar G__102477__$1 = G__102477;\nvar result__$1 = result;\nwhile(true){\nvar vec__102487 = G__102477__$1;\nvar seq__102488 = cljs.core.seq(vec__102487);\nvar first__102489 = cljs.core.first(seq__102488);\nvar seq__102488__$1 = cljs.core.next(seq__102488);\nvar code__$1 = first__102489;\nvar codes__$1 = seq__102488__$1;\nvar result__$2 = result__$1;\nif(cljs.core.truth_(code__$1)){\nif(cljs.core.truth_((function (){var or__4160__auto__ = (lambdaisland.ansi._EQ_i.cljs$core$IFn$_invoke$arity$2 ? lambdaisland.ansi._EQ_i.cljs$core$IFn$_invoke$arity$2((38),code__$1) : lambdaisland.ansi._EQ_i.call(null,(38),code__$1));\nif(cljs.core.truth_(or__4160__auto__)){\nreturn or__4160__auto__;\n} else {\nreturn (lambdaisland.ansi._EQ_i.cljs$core$IFn$_invoke$arity$2 ? lambdaisland.ansi._EQ_i.cljs$core$IFn$_invoke$arity$2((48),code__$1) : lambdaisland.ansi._EQ_i.call(null,(48),code__$1));\n}\n})())){\nvar vec__102490 = lambdaisland.ansi.parse_color(code__$1,codes__$1);\nvar res = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__102490,(0),null);\nvar codes__$2 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__102490,(1),null);\nvar G__102585 = codes__$2;\nvar G__102586 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([result__$2,res], 0));\nG__102477__$1 = G__102585;\nresult__$1 = G__102586;\ncontinue;\n} else {\nvar G__102587 = codes__$1;\nvar G__102588 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([result__$2,lambdaisland.ansi.code__GT_attrs(code__$1)], 0));\nG__102477__$1 = G__102587;\nresult__$1 = G__102588;\ncontinue;\n}\n} else {\nreturn result__$2;\n}\nbreak;\n}\n}\n} else {\nreturn null;\n}\n});\n/**\n * Efficient check to see if a string contains an escape character.\n */\nlambdaisland.ansi.has_escape_char_QMARK_ = (function lambdaisland$ansi$has_escape_char_QMARK_(s){\nreturn s.includes(lambdaisland.ansi.ESC);\n});\n/**\n * Starting at position pos, move forward as long as the characters at the current\n *   position are within the given range. Returns the new position.\n */\nlambdaisland.ansi.str_scan = (function lambdaisland$ansi$str_scan(pos,s,min,max){\nvar len = lambdaisland.ansi.str_length(s);\nvar pos__$1 = pos;\nwhile(true){\nif((pos__$1 >= len)){\nreturn pos__$1;\n} else {\nvar ch = s.codePointAt(pos__$1);\nif((((min <= ch)) && ((ch <= max)))){\nvar G__102589 = (pos__$1 + (1));\npos__$1 = G__102589;\ncontinue;\n} else {\nreturn pos__$1;\n}\n}\nbreak;\n}\n});\n/**\n * Split a string on the next escape sequence, returning a [head CSI tail]\n *   triplet. The returned CSI is excluding ESC[.\n */\nlambdaisland.ansi.next_csi = (function lambdaisland$ansi$next_csi(var_args){\nvar G__102497 = arguments.length;\nswitch (G__102497) {\ncase 1:\nreturn lambdaisland.ansi.next_csi.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn lambdaisland.ansi.next_csi.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(lambdaisland.ansi.next_csi.cljs$core$IFn$_invoke$arity$1 = (function (s){\nreturn lambdaisland.ansi.next_csi.cljs$core$IFn$_invoke$arity$2(s,(0));\n}));\n\n(lambdaisland.ansi.next_csi.cljs$core$IFn$_invoke$arity$2 = (function (s,start){\nwhile(true){\nvar esc_pos = s.indexOf(lambdaisland.ansi.ESC,start);\nif((esc_pos === (-1))){\nreturn null;\n} else {\nvar pos = lambdaisland.ansi.str_scan(lambdaisland.ansi.str_scan((esc_pos + (2)),s,(48),(63)),s,(32),(47));\nif(((((1) < pos)) && ((pos < lambdaisland.ansi.str_length(s))))){\nif(((((64) <= s.codePointAt(pos))) && ((s.codePointAt(pos) <= (126))))){\nreturn new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [s.substring((0),esc_pos),s.substring(((2) + esc_pos),(pos + (1))),s.substring((pos + (1)))], null);\n} else {\nvar G__102591 = s;\nvar G__102592 = pos;\ns = G__102591;\nstart = G__102592;\ncontinue;\n}\n} else {\nreturn null;\n}\n}\nbreak;\n}\n}));\n\n(lambdaisland.ansi.next_csi.cljs$lang$maxFixedArity = 2);\n\n/**\n * Tokenize a string, whereby each CSI sequence gets transformed into a map of\n *   properties. The result is a vector of strings and maps.\n */\nlambdaisland.ansi.token_stream = (function lambdaisland$ansi$token_stream(string){\nvar input = string;\nvar result = cljs.core.PersistentVector.EMPTY;\nwhile(true){\nif(cljs.core.truth_(lambdaisland.ansi.has_escape_char_QMARK_(input))){\nvar temp__5751__auto__ = lambdaisland.ansi.next_csi.cljs$core$IFn$_invoke$arity$1(input);\nif(cljs.core.truth_(temp__5751__auto__)){\nvar match = temp__5751__auto__;\nvar vec__102507 = match;\nvar start = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__102507,(0),null);\nvar csi = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__102507,(1),null);\nvar tail = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__102507,(2),null);\nvar G__102593 = tail;\nvar G__102594 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2((function (){var G__102510 = result;\nif(cljs.core.seq(start)){\nreturn cljs.core.conj.cljs$core$IFn$_invoke$arity$2(G__102510,start);\n} else {\nreturn G__102510;\n}\n})(),lambdaisland.ansi.csi__GT_attrs(csi));\ninput = G__102593;\nresult = G__102594;\ncontinue;\n} else {\nvar G__102511 = result;\nif(cljs.core.seq(input)){\nreturn cljs.core.conj.cljs$core$IFn$_invoke$arity$2(G__102511,input);\n} else {\nreturn G__102511;\n}\n}\n} else {\nvar G__102512 = result;\nif(cljs.core.seq(input)){\nreturn cljs.core.conj.cljs$core$IFn$_invoke$arity$2(G__102512,input);\n} else {\nreturn G__102512;\n}\n}\nbreak;\n}\n});\n/**\n * Stateful transducer, apply it over the output of token-stream to know which\n *   styling should be applied over each piece of text.\n * \n *   The results are pairs consisting of a property map and a string.\n */\nlambdaisland.ansi.apply_props = (function lambdaisland$ansi$apply_props(rf){\nvar state = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\nreturn (function() {\nvar G__102599 = null;\nvar G__102599__0 = (function (){\nreturn (rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null));\n});\nvar G__102599__1 = (function (res){\nreturn (rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(res) : rf.call(null,res));\n});\nvar G__102599__2 = (function (res,val){\nif(cljs.core.map_QMARK_(val)){\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(state,(function (p1__102513_SHARP_){\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$3(cljs.core.PersistentArrayMap.EMPTY,cljs.core.remove.cljs$core$IFn$_invoke$arity$1(cljs.core.comp.cljs$core$IFn$_invoke$arity$2(cljs.core.nil_QMARK_,cljs.core.second)),cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([p1__102513_SHARP_,val], 0)));\n}));\n} else {\n}\n\nif(typeof val === 'string'){\nvar G__102514 = res;\nvar G__102515 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.deref(state),val], null);\nreturn (rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__102514,G__102515) : rf.call(null,G__102514,G__102515));\n} else {\nreturn res;\n}\n});\nG__102599 = function(res,val){\nswitch(arguments.length){\ncase 0:\nreturn G__102599__0.call(this);\ncase 1:\nreturn G__102599__1.call(this,res);\ncase 2:\nreturn G__102599__2.call(this,res,val);\n}\nthrow(new Error('Invalid arity: ' + arguments.length));\n};\nG__102599.cljs$core$IFn$_invoke$arity$0 = G__102599__0;\nG__102599.cljs$core$IFn$_invoke$arity$1 = G__102599__1;\nG__102599.cljs$core$IFn$_invoke$arity$2 = G__102599__2;\nreturn G__102599;\n})()\n});\nlambdaisland.ansi.rgb__GT_css = (function lambdaisland$ansi$rgb__GT_css(p__102516){\nvar vec__102517 = p__102516;\nvar _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__102517,(0),null);\nvar r = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__102517,(1),null);\nvar g = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__102517,(2),null);\nvar b = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__102517,(3),null);\nreturn [\"rgb(\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(r),\",\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(g),\",\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(b),\")\"].join('');\n});\nlambdaisland.ansi.chunk__GT_hiccup = (function lambdaisland$ansi$chunk__GT_hiccup(p__102523){\nvar vec__102524 = p__102523;\nvar map__102527 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__102524,(0),null);\nvar map__102527__$1 = cljs.core.__destructure_map(map__102527);\nvar props = map__102527__$1;\nvar foreground = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__102527__$1,new cljs.core.Keyword(null,\"foreground\",\"foreground\",499022036));\nvar background = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__102527__$1,new cljs.core.Keyword(null,\"background\",\"background\",-863952629));\nvar bold = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__102527__$1,new cljs.core.Keyword(null,\"bold\",\"bold\",-116809535));\nvar text = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__102524,(1),null);\nreturn new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"span\",\"span\",1394872991),((cljs.core.seq(props))?new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"style\",\"style\",-496642736),(function (){var G__102528 = cljs.core.PersistentArrayMap.EMPTY;\nvar G__102528__$1 = (cljs.core.truth_(foreground)?cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__102528,new cljs.core.Keyword(null,\"color\",\"color\",1011675173),lambdaisland.ansi.rgb__GT_css(foreground)):G__102528);\nvar G__102528__$2 = (cljs.core.truth_(background)?cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__102528__$1,new cljs.core.Keyword(null,\"background-color\",\"background-color\",570434026),lambdaisland.ansi.rgb__GT_css(background)):G__102528__$1);\nif(cljs.core.truth_(bold)){\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__102528__$2,new cljs.core.Keyword(null,\"font-weight\",\"font-weight\",2085804583),\"bold\");\n} else {\nreturn G__102528__$2;\n}\n})()], null):cljs.core.PersistentArrayMap.EMPTY),text], null);\n});\n/**\n * Transducer that consumes strings of input, and produces hiccup elements. Useful\n *   when dealing with streaming input, since it will carry over the 'terminal\n *   state'.\n */\nlambdaisland.ansi.hiccup_xform = cljs.core.comp.cljs$core$IFn$_invoke$arity$3(cljs.core.map.cljs$core$IFn$_invoke$arity$1(lambdaisland.ansi.token_stream),lambdaisland.ansi.apply_props,cljs.core.map.cljs$core$IFn$_invoke$arity$1(lambdaisland.ansi.chunk__GT_hiccup));\n/**\n * Convenience function for the basic case where you have a string of terminal\n *   output and want to turn it into hiccup. Returns a seq of [:span] elements.\n */\nlambdaisland.ansi.text__GT_hiccup = (function lambdaisland$ansi$text__GT_hiccup(text){\nreturn cljs.core.sequence.cljs$core$IFn$_invoke$arity$2(cljs.core.comp.cljs$core$IFn$_invoke$arity$2(lambdaisland.ansi.apply_props,cljs.core.map.cljs$core$IFn$_invoke$arity$1(lambdaisland.ansi.chunk__GT_hiccup)),lambdaisland.ansi.token_stream(text));\n});\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","lambdaisland/ansi.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",22],"~:ns-aliases",["^ ","~$clojure.spec.alpha","~$cljs.spec.alpha","~$cljs.loader","~$shadow.loader","~$highlight.js","~$module$node_modules$highlight_DOT_js$lib$index","~$react","~$module$node_modules$react$index","~$clojure.tools.reader.reader-types","~$cljs.tools.reader.reader-types","~$clojure.pprint","~$cljs.pprint","~$react-dom","~$module$node_modules$react_dom$index","~$clojure.repl","~$cljs.repl","~$webly.user.tenx.events","~$webly.user.tenx.events-on"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$lambdaisland.ansi","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$clojure.string","^W","~$str","^W","~$cljs.core","^Y","~$goog","^Z"],"~:seen",["^P",["~:require"]],"~:uses",null,"~:require-macros",["^ ","^Y","^Y"],"~:form",["~#list",["~$ns","^R",["^14",["^10",["^W","~:as","^X"]]]]],"~:flags",["^ ","^10",["^P",[]]],"~:js-deps",["^ "],"~:deps",["^Z","^Y","^W"]],"^T","^R","~:resource-id",["~:shadow.build.classpath/resource","lambdaisland/ansi.cljc"],"~:compiled-at",1621210466567,"~:resource-name","lambdaisland/ansi.cljc","~:warnings",[],"~:source","(ns lambdaisland.ansi\n  (:require [clojure.string :as str]))\n\n\n(def ESC\n  \"ASCII escape character (codepoint 27, hex 1b, octal 33).\"\n  #?(:clj \"\\u001b[\"\n     :cljs \"\\033[\"))\n\n(def =i #?(:clj =\n           :cljs identical?))\n\n(defn str-length\n  \"Fast string length\"\n  [s]\n  #?(:clj (.length s)\n     :cljs (.-length s)))\n\n\n;; | Name           | FG |  BG | VGA         | CMD         | Terminal.app | PuTTY       | mIRC        | xterm       | Ubuntu      |\n;; |----------------+----+-----+-------------+-------------+--------------+-------------+-------------+-------------+-------------|\n;; | Black          | 30 |  40 | 0,0,0       | 1,1,1       | 0,0,0        | 0,0,0       | 0,0,0       | 0,0,0       | 0,0,0       |\n;; | Red            | 31 |  41 | 170,0,0     | 128,0,0     | 194,54,33    | 187,0,0     | 127,0,0     | 205,0,0     | 222,56,43   |\n;; | Green          | 32 |  42 | 0,170,0     | 0,128,0     | 37,188,36    | 0,187,0     | 0,147,0     | 0,205,0     | 57,181,74   |\n;; | Yellow         | 33 |  43 | 170,85,0    | 128,128,0   | 173,173,39   | 187,187,0   | 252,127,0   | 205,205,0   | 255,199,6   |\n;; | Blue           | 34 |  44 | 0,0,170     | 0,0,128     | 73,46,225    | 0,0,187     | 0,0,127     | 0,0,238     | 0,111,184   |\n;; | Magenta        | 35 |  45 | 170,0,170   | 128,0,128   | 211,56,211   | 187,0,187   | 156,0,156   | 205,0,205   | 118,38,113  |\n;; | Cyan           | 36 |  46 | 0,170,170   | 0,128,128   | 51,187,200   | 0,187,187   | 0,147,147   | 0,205,205   | 44,181,233  |\n;; | White          | 37 |  47 | 170,170,170 | 192,192,192 | 203,204,205  | 187,187,187 | 210,210,210 | 229,229,229 | 204,204,204 |\n;; | Bright Black   | 90 | 100 | 85,85,85    | 128,128,128 | 129,131,131  | 85,85,85    | 127,127,127 | 127,127,127 | 128,128,128 |\n;; | Bright Red     | 91 | 101 | 255,85,85   | 255,0,0     | 252,57,31    | 255,85,85   | 255,0,0     | 255,0,0     | 255,0,0     |\n;; | Bright Green   | 92 | 102 | 85,255,85   | 0,255,0     | 49,231,34    | 85,255,85   | 0,252,0     | 0,255,0     | 0,255,0     |\n;; | Bright Yellow  | 93 | 103 | 255,255,85  | 255,255,0   | 234,236,35   | 255,255,85  | 255,255,0   | 255,255,0   | 255,255,0   |\n;; | Bright Blue    | 94 | 104 | 85,85,255   | 0,0,255     | 88,51,255    | 85,85,255   | 0,0,252     | 92,92,255   | 0,0,255     |\n;; | Bright Magenta | 95 | 105 | 255,85,255  | 255,0,255   | 249,53,248   | 255,85,255  | 255,0,255   | 255,0,255   | 255,0,255   |\n;; | Bright Cyan    | 96 | 106 | 85,255,255  | 0,255,255   | 20,240,240   | 85,255,255  | 0,255,255   | 0,255,255   | 0,255,255   |\n;; | Bright White   | 97 | 107 | 255,255,255 | 255,255,255 | 233,235,235  | 255,255,255 | 255,255,255 | 255,255,255 | 255,255,255 |\n(def color-schemes\n  \"Color schemes used in popular applications.\"\n  (->> [[:vga           :cmd           :osx           :putty         :mirc          :xterm         :ubuntu        ]\n        [[   0   0   0 ][   1   1   1 ][   0   0   0 ][   0   0   0 ][   0   0   0 ][   0   0   0 ][   0   0   0 ]]\n        [[ 170   0   0 ][ 128   0   0 ][ 194  54  33 ][ 187   0   0 ][ 127   0   0 ][ 205   0   0 ][ 222  56  43 ]]\n        [[   0 170   0 ][   0 128   0 ][  37 188  36 ][   0 187   0 ][   0 147   0 ][   0 205   0 ][  57 181  74 ]]\n        [[ 170  85   0 ][ 128 128   0 ][ 173 173  39 ][ 187 187   0 ][ 252 127   0 ][ 205 205   0 ][ 255 199   6 ]]\n        [[   0   0 170 ][   0   0 128 ][  73  46 225 ][   0   0 187 ][   0   0 127 ][   0   0 238 ][   0 111 184 ]]\n        [[ 170   0 170 ][ 128   0 128 ][ 211  56 211 ][ 187   0 187 ][ 156   0 156 ][ 205   0 205 ][ 118  38 113 ]]\n        [[   0 170 170 ][   0 128 128 ][  51 187 200 ][   0 187 187 ][   0 147 147 ][   0 205 205 ][  44 181 233 ]]\n        [[ 170 170 170 ][ 192 192 192 ][ 203 204 205 ][ 187 187 187 ][ 210 210 210 ][ 229 229 229 ][ 204 204 204 ]]\n\n        [[ 85   85  85 ][ 128 128 128 ][ 129 131 131 ][  85  85  85 ][ 127 127 127 ][ 127 127 127 ][ 128 128 128 ]]\n        [[ 255  85  85 ][ 255   0   0 ][ 252  57  31 ][ 255  85  85 ][ 255   0   0 ][ 255   0   0 ][ 255   0   0 ]]\n        [[ 85  255  85 ][   0 255   0 ][  49 231  34 ][  85 255  85 ][   0 252   0 ][   0 255   0 ][   0 255   0 ]]\n        [[ 255 255  85 ][ 255 255   0 ][ 234 236  35 ][ 255 255  85 ][ 255 255   0 ][ 255 255   0 ][ 255 255   0 ]]\n        [[  85  85 255 ][   0   0 255 ][  88  51 255 ][  85  85 255 ][   0   0 252 ][  92  92 255 ][   0   0 255 ]]\n        [[ 255  85 255 ][ 255   0 255 ][ 249  53 248 ][ 255  85 255 ][ 255   0 255 ][ 255   0 255 ][ 255   0 255 ]]\n        [[  85 255 255 ][   0 255 255 ][  20 240 240 ][  85 255 255 ][   0 255 255 ][   0 255 255 ][   0 255 255 ]]\n        [[ 255 255 255 ][ 255 255 255 ][ 233 235 235 ][ 255 255 255 ][ 255 255 255 ][ 255 255 255 ][ 255 255 255 ]]]\n       (apply mapv vector)\n       (into {} (map (fn [[x & xs]] [x (vec xs)])))))\n\n(def ^:dynamic *color-scheme*\n  \"Color scheme currently in use during parsing.\"\n  (:xterm color-schemes))\n\n(defmacro with-color-scheme\n  \"Execute code with the given color scheme active, name must be one\n  of :vga :cmd :osx :putty :mirc :xterm :ubuntu. For finer control bind to\n  *color-scheme* directly.\"\n  [name & body]\n  `(binding [*color-scheme* (get color-schemes name)]\n     ~@body))\n\n(defn get-color [n]\n  (into [:rgb] (get *color-scheme* n)))\n\n(defn parse-int [s]\n  #?(:clj (Integer/parseInt s)\n     :cljs (js/parseInt s 10)))\n\n(def reset-attrs {:foreground nil\n                  :background nil\n                  :bold       nil})\n\n(defn code->attrs\n  \"Given a CSI code, return a map of properties it sets. A value of `nil` means\n  the property gets unset.\"\n  [code]\n  (cond\n    (=i 0 code)       reset-attrs\n    (=i 1 code)       {:bold true}\n    (<= 30 code 37)   {:foreground (get-color (- code 30))}\n    (=i 39 code)      {:foreground nil}\n    (<= 40 code 47)   {:background (get-color (- code 40))}\n    (=i 49 code)      {:background nil}\n    (<= 90 code 99)   {:foreground (get-color (+ 8 (- code 90)))}\n    (<= 100 code 109) {:background (get-color (+ 8 (- code 40)))}))\n\n;; 0-  7:  standard colors (as in ESC [ 30–37 m)\n;; 8- 15:  high intensity colors (as in ESC [ 90–97 m)\n;; 16-231:  6 × 6 × 6 cube (216 colors): 16 + 36 × r + 6 × g + b (0 ≤ r, g, b ≤ 5)\n;; 232-255:  grayscale from black to white in 24 steps\n(defn color-8-bit\n  \"Parse a \\\"8-bit\\\" color, given the code that follows on ESC[38;5;<code>m.\"\n  [code]\n  (cond\n    (<= 0 code 7)     [(get-color code) false]\n    (<= 8 code 15)    [(get-color (- code 8)) true]\n    (<= 16 code 231)  (let [code         (- code 16)\n                            blue         (mod code 6)\n                            green        (mod (/ (- code blue) 6) 6)\n                            red          (/ (- code blue (* 6 green)) 36)\n                            color-values [0x00 0x5f 0x87 0xaf 0xd7 0xff]]\n                        [(into [:rgb] (map color-values) [red green blue])\n                         false])\n    (<= 232 code 255) (let [x (+ 8 (* 10 (- code 232)))]\n                        [[:rgb x x x] false])))\n\n(defn color-24-bit [[r g b]]\n  [:rgb r g b])\n\n(defn parse-color\n  \"Handle CSI code 38 and 48, used to specify 8 or 24 bit colors. This may consume\n  up to 5 codes in total (ESC [38;2;r;g;bm). Returns the map of properties that\n  get set, and the remaining, unconsumed codes.\"\n  [fg-or-bg [colorspace & more]]\n  (let [type (case fg-or-bg 38 :foreground 48 :background)]\n    (case colorspace\n      5 (let [[color bold?] (color-8-bit (first more))]\n          [(merge {type color} (if bold? {:bold true}))\n           (next more)])\n      2 [{:foreground (color-24-bit (take 3 more))}\n         (nthnext more 3)])))\n\n(defn str-split\n  \"Like clojure.string/split, but uses a single character instead of a regex,\n  allowing for faster operation.\"\n  [s sep]\n  (loop [res   []\n         start 0\n         end   (.indexOf s sep)]\n    (if (=i end -1)\n      (conj res (.substring s start))\n      (recur (conj res (.substring s start end))\n             (inc end)\n             (.indexOf s sep (inc end))))))\n\n(defn csi->attrs\n  \"Given a CSI specifier, excluding ESC[ but including the final \\\"m\\\", convert it\n  to a map of properties that it sets or unsets. Property values of nil indicate\n  a reset/unset. \"\n  [csi]\n  (if (.endsWith csi \"m\") ;; m: SGR - Select Graphic Rendition\n    (if (or (= csi \"m\") (= csi \"0m\"))\n      reset-attrs\n      (let [csi-len (str-length csi)]\n        (loop [[code & codes] (map parse-int (str-split (.substring csi 0 (dec (str-length csi))) \";\"))\n               result         {}]\n          (if code\n            (if (or (=i 38 code) (=i 48 code))\n              (let [[res codes] (parse-color code codes)]\n                (recur codes (merge result res)))\n              (recur codes (merge result (code->attrs code))))\n            result))))))\n\n\n(defn has-escape-char?\n  \"Efficient check to see if a string contains an escape character.\"\n  [s]\n  #?(:clj (.contains s ESC)\n     :cljs (.includes s ESC)))\n\n(defn str-scan\n  \"Starting at position pos, move forward as long as the characters at the current\n  position are within the given range. Returns the new position.\"\n  [pos s min max]\n  (let [len (str-length s)]\n    (loop [pos pos]\n      (if (>= pos len)\n        pos\n        (let [ch (.codePointAt s pos)]\n          (if (<= min ch max)\n            (recur (inc pos))\n            pos))))))\n\n;; https://en.wikipedia.org/wiki/ANSI_escape_code#CSI_sequences\n;;\n\n;; The ESC [ is followed by any number (including none) of \"parameter bytes\" in\n;; the range 0x30–0x3F (ASCII 0–9:;<=>?), then by any number of \"intermediate\n;; bytes\" in the range 0x20–0x2F (ASCII space and !\"#$%&'()*+,-./), then finally\n;; by a single \"final byte\" in the range 0x40–0x7E (ASCII @A–Z[\\]^_`a–z{|}~).\n(defn next-csi\n  \"Split a string on the next escape sequence, returning a [head CSI tail]\n  triplet. The returned CSI is excluding ESC[.\"\n  ([s]\n   (next-csi s 0))\n  ([s start]\n   (let [esc-pos (.indexOf s ESC start)]\n     (when-not (identical? esc-pos -1)\n       (let [pos (-> esc-pos\n                     (+ 2)\n                     (str-scan s 0x30 0x3F)\n                     (str-scan s 0x20 0x2F))]\n         (when (< 1 pos (str-length s))\n           (if (<= 0x40 (.codePointAt s pos) 0x7E)\n             [(.substring s 0 esc-pos) (.substring s (+ 2 esc-pos) (inc pos)) (.substring s (inc pos))]\n             (recur s pos))))))))\n\n(defn token-stream\n  \"Tokenize a string, whereby each CSI sequence gets transformed into a map of\n  properties. The result is a vector of strings and maps.\"\n  [string]\n  (loop [input string\n         result []]\n    (if (has-escape-char? input)\n      (if-let [match (next-csi input)]\n        (let [[start csi tail] match]\n          (recur tail\n                 (-> result\n                     (cond-> #_result (seq start) (conj start))\n                     (conj (csi->attrs csi)))))\n        (cond-> result (seq input) (conj input)))\n      (cond-> result (seq input) (conj input)))))\n\n(defn apply-props\n  \"Stateful transducer, apply it over the output of token-stream to know which\n  styling should be applied over each piece of text.\n\n  The results are pairs consisting of a property map and a string.\"\n  [rf]\n  (let [state (atom {})]\n    (fn\n      ([] (rf))\n      ([res] (rf res))\n      ([res val]\n       (when (map? val)\n         (swap! state #(into {} (remove (comp nil? second)) (merge % val))))\n       (if (string? val)\n         (rf res [@state val])\n         res)))))\n\n(defn rgb->css [[_ r g b]]\n  (str \"rgb(\" r \",\" g \",\" b \")\"))\n\n(defn chunk->hiccup [[{:keys [foreground background bold] :as props} text]]\n  [:span (if (seq props)\n           {:style (cond-> {}\n                     foreground (assoc :color (rgb->css foreground))\n                     background (assoc :background-color (rgb->css background))\n                     bold       (assoc :font-weight \"bold\"))}\n           {})\n   text])\n\n(def hiccup-xform\n  \"Transducer that consumes strings of input, and produces hiccup elements. Useful\n  when dealing with streaming input, since it will carry over the 'terminal\n  state'.\"\n  (comp (map token-stream)\n        apply-props\n        (map chunk->hiccup)))\n\n(defn text->hiccup\n  \"Convenience function for the basic case where you have a string of terminal\n  output and want to turn it into hiccup. Returns a seq of [:span] elements.\"\n  [text]\n  (sequence (comp apply-props\n                  (map chunk->hiccup))\n            (token-stream text)))\n","~:reader-features",["^P",["~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings","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","names",["lambdaisland.ansi/ESC","lambdaisland.ansi/=i","cljs.core/identical?","lambdaisland.ansi/str-length","s","lambdaisland.ansi/color-schemes","cljs.core.apply","cljs.core/mapv","cljs.core/vector","cljs.core.into","cljs.core.map","p__102444","vec__102445","seq__102446","cljs.core/seq","first__102447","cljs.core/first","cljs.core/next","x","xs","cljs.core/vec","lambdaisland.ansi/*color-scheme*","lambdaisland.ansi/get-color","n","cljs.core.get","lambdaisland.ansi/parse-int","js/parseInt","lambdaisland.ansi/reset-attrs","lambdaisland.ansi/code->attrs","code","lambdaisland.ansi/color-8-bit","blue","cljs.core/mod","green","red","color-values","p__102448","vec__102449","cljs.core.nth","lambdaisland.ansi/color-24-bit","r","g","b","p__102452","vec__102453","seq__102454","first__102455","lambdaisland.ansi/parse-color","fg-or-bg","colorspace","more","type","G__102457","js/Error","G__102458","vec__102461","color","bold?","cljs.core.merge","cljs.core.take","cljs.core/nthnext","lambdaisland.ansi/str-split","sep","res","start","end","cljs.core.conj","lambdaisland.ansi/csi->attrs","csi","cljs.core._EQ_","csi-len","G__102477","vec__102478","seq__102479","first__102480","vec__102487","seq__102488","first__102489","codes","result","or__4160__auto__","vec__102490","lambdaisland.ansi/has-escape-char?","lambdaisland.ansi/str-scan","pos","min","max","len","ch","var_args","G__102497","lambdaisland.ansi/next-csi","lambdaisland.ansi.next_csi","esc-pos","lambdaisland.ansi/token-stream","string","input","temp__5751__auto__","match","vec__102507","tail","G__102510","G__102511","G__102512","lambdaisland.ansi/apply-props","rf","state","cljs.core.atom","val","cljs.core/map?","p1__102513#","cljs.core.swap_BANG_","cljs.core.remove","cljs.core.comp","cljs.core/nil?","cljs.core/second","G__102514","G__102515","cljs.core/deref","p__102516","vec__102517","lambdaisland.ansi/rgb->css","_","p__102523","vec__102524","map__102527","cljs.core/--destructure-map","lambdaisland.ansi/chunk->hiccup","foreground","background","bold","props","text","G__102528","cljs.core.assoc","lambdaisland.ansi/hiccup-xform","lambdaisland.ansi/text->hiccup","cljs.core.sequence"]],"~:used-vars",["^P",["~$lambdaisland.ansi/str-length","~$cljs.core/comp","~$lambdaisland.ansi/*color-scheme*","~$lambdaisland.ansi/hiccup-xform","~$lambdaisland.ansi/color-24-bit","~$cljs.core/=","~$lambdaisland.ansi/rgb->css","~$lambdaisland.ansi/parse-int","~$lambdaisland.ansi/next-csi","~$cljs.core/seq","~$cljs.core/apply","~$cljs.core/take","~$cljs.core/mapv","~$lambdaisland.ansi/str-split","~$cljs.core/into","~$cljs.core/map?","~$cljs.core/conj","~$cljs.core/identical?","~$lambdaisland.ansi/csi->attrs","~$cljs.core/map","~$lambdaisland.ansi/color-8-bit","~$lambdaisland.ansi/ESC","~$cljs.core/swap!","~$js/parseInt","~$cljs.core/nthnext","~$lambdaisland.ansi/get-color","~$cljs.core/get","~$cljs.core/remove","~$lambdaisland.ansi/color-schemes","~$cljs.core/nil?","~$lambdaisland.ansi/reset-attrs","~$cljs.core/second","~$lambdaisland.ansi/has-escape-char?","~$lambdaisland.ansi/parse-color","~$lambdaisland.ansi/str-scan","~$cljs.core/next","~$cljs.core/vec","~$lambdaisland.ansi/token-stream","~$cljs.core/sequence","~$lambdaisland.ansi/=i","~$cljs.core/assoc","~$lambdaisland.ansi/code->attrs","~$lambdaisland.ansi/apply-props","~$lambdaisland.ansi/text->hiccup","~$cljs.core/merge","~$lambdaisland.ansi/chunk->hiccup","~$js/Error","~$cljs.core/vector"]]],"~:cache-keys",["~#cmap",[["^1;","goog/dom/tagname.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^P",[]],"~:deps-syms",["^Z","~$goog.dom.HtmlElement"]]],["^1;","goog/math/math.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2M",["^ ","^2N",null,"^2O",["^P",[]],"^2P",["^Z","~$goog.array","~$goog.asserts"]]],["^1;","goog/html/trustedtypes.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2M",["^ ","^2N",null,"^2O",["^P",[]],"^2P",["^Z"]]],["^1;","goog/labs/useragent/browser.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2M",["^ ","^2N",null,"^2O",["^P",[]],"^2P",["^Z","^2R","~$goog.labs.userAgent.util","~$goog.object","~$goog.string.internal"]]],["^1;","goog/html/safeurl.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2M",["^ ","^2N",null,"^2O",["^P",[]],"^2P",["^Z","^2S","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.i18n.bidi.Dir","~$goog.i18n.bidi.DirectionalString","~$goog.string.Const","~$goog.string.TypedString","^2V"]]],["^1;","goog/array/array.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2M",["^ ","^2N",null,"^2O",["^P",[]],"^2P",["^Z","^2S"]]],["^1;","goog/debug/error.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2M",["^ ","^2N",null,"^2O",["^P",[]],"^2P",["^Z"]]],["^1;","goog/dom/nodetype.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2M",["^ ","^2N",null,"^2O",["^P",[]],"^2P",["^Z"]]],["^1;","goog/string/typedstring.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2M",["^ ","^2N",null,"^2O",["^P",[]],"^2P",["^Z"]]],["^1;","goog/object/object.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2M",["^ ","^2N",null,"^2O",["^P",[]],"^2P",["^Z"]]],["^1;","goog/dom/asserts.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2M",["^ ","^2N",null,"^2O",["^P",[]],"^2P",["^Z","^2S"]]],"~:SHADOW-TIMESTAMP",[1618720883000,1618720883000,1618720422000],["^1;","goog/math/long.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2M",["^ ","^2N",null,"^2O",["^P",[]],"^2P",["^Z","^2S","~$goog.reflect"]]],["^1;","goog/html/trustedresourceurl.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2M",["^ ","^2N",null,"^2O",["^P",[]],"^2P",["^Z","^2S","~$goog.fs.blob","^2W","~$goog.html.SafeScript","~$goog.html.trustedtypes","^2Y","^2Z","^2[","^30"]]],["^1;","goog/string/internal.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2M",["^ ","^2N",null,"^2O",["^P",[]],"^2P",["^Z"]]],["^1;","goog/functions/functions.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2M",["^ ","^2N",null,"^2O",["^P",[]],"^2P",["^Z"]]],["^1;","goog/html/safestyle.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2M",["^ ","^2N",null,"^2O",["^P",[]],"^2P",["^Z","^2R","^2S","~$goog.html.SafeUrl","^2[","^30","^2V"]]],["^1;","goog/dom/safe.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2M",["^ ","^2N",null,"^2O",["^P",[]],"^2P",["^Z","^2S","~$goog.dom.asserts","~$goog.functions","~$goog.html.SafeHtml","^34","~$goog.html.SafeStyle","^36","^2X","~$goog.html.uncheckedconversions","^2[","^2V"]]],["^1;","goog/structs/map.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2M",["^ ","^2N",null,"^2O",["^P",[]],"^2P",["^Z","~$goog.iter.Iterator","~$goog.iter.StopIteration"]]],["^1;","goog/html/safehtml.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2M",["^ ","^2N",null,"^2O",["^P",[]],"^2P",["^Z","^2R","^2S","~$goog.dom.TagName","~$goog.dom.tags","^34","^3:","~$goog.html.SafeStyleSheet","^36","^2X","^35","^2Y","^2Z","~$goog.labs.userAgent.browser","^2U","^2[","^30","^2V"]]],["^1;","goog/dom/tags.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2M",["^ ","^2N",null,"^2O",["^P",[]],"^2P",["^Z","^2U"]]],["^1;","goog/fs/blob.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2M",["^ ","^2N",null,"^2O",["^P",[]],"^2P",["^Z","^2R"]]],["^1;","goog/asserts/asserts.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2M",["^ ","^2N",null,"^2O",["^P",[]],"^2P",["^Z","~$goog.debug.Error","~$goog.dom.NodeType"]]],["^1;","goog/uri/uri.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2M",["^ ","^2N",null,"^2O",["^P",[]],"^2P",["^Z","^2R","^2S","~$goog.string","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^1;","goog/i18n/bidi.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2M",["^ ","^2N",null,"^2O",["^P",[]],"^2P",["^Z"]]],["^1;","goog/fs/url.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2M",["^ ","^2N",null,"^2O",["^P",[]],"^2P",["^Z"]]],["^1;","goog/base.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2M",["^ ","^2N",null,"^2O",["^P",[]],"^2P",[]]],["^1;","goog/structs/structs.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2M",["^ ","^2N",null,"^2O",["^P",[]],"^2P",["^Z","^2R","^2U"]]],["^1;","clojure/string.cljs"],["86bedf67c795c72bde3feb0415b41be8b95f2cbb","^2M",["^ ","^2N",null,"^2O",["^P",[]],"^2P",["^Z","^Y","^3D","~$goog.string.StringBuffer"]]],["^1;","goog/string/string.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2M",["^ ","^2N",null,"^2O",["^P",[]],"^2P",["^Z","~$goog.dom.safe","^3;","^2[","^2V"]]],["^1;","goog/reflect/reflect.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2M",["^ ","^2N",null,"^2O",["^P",[]],"^2P",["^Z"]]],["^1;","goog/labs/useragent/util.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2M",["^ ","^2N",null,"^2O",["^P",[]],"^2P",["^Z","^2V"]]],["^1;","goog/string/stringbuffer.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2M",["^ ","^2N",null,"^2O",["^P",[]],"^2P",["^Z"]]],["^1;","goog/iter/iter.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2M",["^ ","^2N",null,"^2O",["^P",[]],"^2P",["^Z","^2R","^2S","^38","~$goog.math"]]],["^1;","goog/html/uncheckedconversions.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2M",["^ ","^2N",null,"^2O",["^P",[]],"^2P",["^Z","^2S","^39","^34","^3:","^3@","^36","^2X","^2[","^2V","^2Y"]]],["^1;","goog/dom/htmlelement.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2M",["^ ","^2N",null,"^2O",["^P",[]],"^2P",["^Z"]]],["^1;","cljs/core.cljs"],["86bedf67c795c72bde3feb0415b41be8b95f2cbb","^2M",["^ ","^2N",null,"^2O",["^P",[]],"^2P",["^Z","~$goog.math.Long","~$goog.math.Integer","^3D","^2U","^2R","~$goog.Uri","^3J"]]],["^1;","goog/html/safescript.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2M",["^ ","^2N",null,"^2O",["^P",[]],"^2P",["^Z","^2[","^30","^35","^2S"]]],["^1;","goog/html/safestylesheet.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2M",["^ ","^2N",null,"^2O",["^P",[]],"^2P",["^Z","^2[","^3:","^30","^2R","^2U","^2S","^2V"]]],["^1;","goog/math/integer.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2M",["^ ","^2N",null,"^2O",["^P",[]],"^2P",["^Z","^32"]]],["^1;","goog/uri/utils.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2M",["^ ","^2N",null,"^2O",["^P",[]],"^2P",["^Z","^2S","^3D"]]],["^1;","goog/string/const.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2M",["^ ","^2N",null,"^2O",["^P",[]],"^2P",["^Z","^2S","^30"]]],["^1;","lambdaisland/ansi.cljc"],["230cee9904906c19fa4d46acf3fc0cd53f517966","^2M",["^ ","^2N",null,"^2O",["^P",[]],"^2P",["^Z","^Y","^W"]]]]],"~:clj-info",["^ ","jar:file:/home/andreas/.m2/repository/org/clojure/clojurescript/1.10.844/clojurescript-1.10.844.jar!/cljs/env.cljc",1618720422000,"jar:file:/home/andreas/.m2/repository/org/clojure/clojurescript/1.10.844/clojurescript-1.10.844.jar!/cljs/externs.clj",1618720422000,"jar:file:/home/andreas/.m2/repository/org/clojure/clojurescript/1.10.844/clojurescript-1.10.844.jar!/cljs/tagged_literals.cljc",1618720422000,"jar:file:/home/andreas/.m2/repository/org/clojure/data.json/2.1.0/data.json-2.1.0.jar!/clojure/data/json.clj",1618502954000,"jar:file:/home/andreas/.m2/repository/org/clojure/clojurescript/1.10.844/clojurescript-1.10.844.jar!/cljs/compiler.cljc",1618720422000,"jar:file:/home/andreas/.m2/repository/org/clojure/clojurescript/1.10.844/clojurescript-1.10.844.jar!/cljs/instant.clj",1618720422000,"jar:file:/home/andreas/.m2/repository/org/clojure/clojurescript/1.10.844/clojurescript-1.10.844.jar!/cljs/source_map/base64_vlq.clj",1618720422000,"jar:file:/home/andreas/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/edn.clj",1618716228000,"jar:file:/home/andreas/.m2/repository/org/clojure/tools.reader/1.3.5/tools.reader-1.3.5.jar!/clojure/tools/reader/default_data_readers.clj",1618501370000,"jar:file:/home/andreas/.m2/repository/org/clojure/clojurescript/1.10.844/clojurescript-1.10.844.jar!/cljs/analyzer.cljc",1618720422000,"jar:file:/home/andreas/.m2/repository/org/clojure/clojurescript/1.10.844/clojurescript-1.10.844.jar!/cljs/source_map.clj",1618720422000,"jar:file:/home/andreas/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/core.clj",1618716228000,"jar:file:/home/andreas/.m2/repository/org/clojure/tools.reader/1.3.5/tools.reader-1.3.5.jar!/clojure/tools/reader.clj",1618501370000,"jar:file:/home/andreas/.m2/repository/org/clojure/clojurescript/1.10.844/clojurescript-1.10.844.jar!/cljs/js_deps.cljc",1618720422000,"jar:file:/home/andreas/.m2/repository/org/clojure/clojurescript/1.10.844/clojurescript-1.10.844.jar!/cljs/core.cljc",1618720422000,"jar:file:/home/andreas/.m2/repository/org/clojure/tools.reader/1.3.5/tools.reader-1.3.5.jar!/clojure/tools/reader/impl/inspect.clj",1618501370000,"jar:file:/home/andreas/.m2/repository/org/clojure/tools.reader/1.3.5/tools.reader-1.3.5.jar!/clojure/tools/reader/reader_types.clj",1618501370000,"jar:file:/home/andreas/.m2/repository/binaryage/devtools/1.0.2/devtools-1.0.2.jar!/devtools/defaults.clj",1618720434000,"jar:file:/home/andreas/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/java/io.clj",1618716228000,"jar:file:/home/andreas/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/pprint.clj",1618716228000,"jar:file:/home/andreas/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/set.clj",1618716228000,"jar:file:/home/andreas/.m2/repository/org/clojure/clojurescript/1.10.844/clojurescript-1.10.844.jar!/cljs/analyzer/impl.cljc",1618720422000,"jar:file:/home/andreas/.m2/repository/org/clojure/tools.reader/1.3.5/tools.reader-1.3.5.jar!/clojure/tools/reader/impl/errors.clj",1618501370000,"jar:file:/home/andreas/.m2/repository/org/clojure/clojurescript/1.10.844/clojurescript-1.10.844.jar!/cljs/util.cljc",1618720422000,"jar:file:/home/andreas/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/string.clj",1618716228000,"jar:file:/home/andreas/.m2/repository/org/clojure/clojurescript/1.10.844/clojurescript-1.10.844.jar!/cljs/source_map/base64.clj",1618720422000,"jar:file:/home/andreas/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/instant.clj",1618716228000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","lambdaisland/ansi.cljc","^7",1,"^8",5,"^9",1,"^:",22],"^;",["^ ","^<","^=","^>","^?","^@","^A","^B","^C","^D","^E","^F","^G","^H","^I","^J","^K","^L","^M"],"^N",null,"^O",["^P",[]],"^Q","^R","^U",null,"^V",["^ ","^W","^W","^X","^W","^Y","^Y","^Z","^Z"],"^[",["^P",["^10"]],"~:shadow/js-access-global",["^P",["Error","parseInt"]],"^11",null,"~:defs",["^ ","~$has-escape-char?",["^ ","~:protocol-inline",null,"^5",["^ ","^6","lambdaisland/ansi.cljc","^7",166,"^8",7,"^9",166,"^:",23,"~:arglists",["^14",["~$quote",["^14",[["~$s"]]]]],"~:doc","Efficient check to see if a string contains an escape character."],"^Q","^2;","^6","lambdaisland/ansi.cljc","^:",23,"~:method-params",["^14",[["~$s"]]],"~:protocol-impl",null,"~:arglists-meta",["^14",[null,null]],"^8",1,"~:variadic?",false,"^7",166,"~:ret-tag","~$any","^9",166,"~:max-fixed-arity",1,"~:fn-var",true,"^4E",["^14",["^4F",["^14",[["~$s"]]]]],"^4G","Efficient check to see if a string contains an escape character."],"~$parse-color",["^ ","^4D",null,"^5",["^ ","^6","lambdaisland/ansi.cljc","^7",121,"^8",7,"^9",121,"^:",18,"^4E",["^14",["^4F",["^14",[["~$fg-or-bg",["~$colorspace","~$&","~$more"]]]]]],"^4G","Handle CSI code 38 and 48, used to specify 8 or 24 bit colors. This may consume\n  up to 5 codes in total (ESC [38;2;r;g;bm). Returns the map of properties that\n  get set, and the remaining, unconsumed codes."],"^Q","^2<","^6","lambdaisland/ansi.cljc","^:",18,"^4H",["^14",[["^4Q","~$p__102452"]]],"^4I",null,"^4J",["^14",[null,null]],"^8",1,"^4K",false,"^7",121,"^9",121,"^4N",2,"^4O",true,"^4E",["^14",["^4F",["^14",[["^4Q",["^4R","~$&","^4S"]]]]]],"^4G","Handle CSI code 38 and 48, used to specify 8 or 24 bit colors. This may consume\n  up to 5 codes in total (ESC [38;2;r;g;bm). Returns the map of properties that\n  get set, and the remaining, unconsumed codes."],"~$code->attrs",["^ ","^4D",null,"^5",["^ ","^6","lambdaisland/ansi.cljc","^7",84,"^8",7,"^9",84,"^:",18,"^4E",["^14",["^4F",["^14",[["~$code"]]]]],"^4G","Given a CSI code, return a map of properties it sets. A value of `nil` means\n  the property gets unset."],"^Q","^2D","^6","lambdaisland/ansi.cljc","^:",18,"^4H",["^14",[["^4V"]]],"^4I",null,"^4J",["^14",[null,null]],"^8",1,"^4K",false,"^7",84,"^4L",["^P",["~$cljs.core/IMap","~$clj-nil"]],"^9",84,"^4N",1,"^4O",true,"^4E",["^14",["^4F",["^14",[["^4V"]]]]],"^4G","Given a CSI code, return a map of properties it sets. A value of `nil` means\n  the property gets unset."],"~$color-schemes",["^ ","^5",["^ ","^6","lambdaisland/ansi.cljc","^7",38,"^8",6,"^9",38,"^:",19],"^Q","^27","^6","lambdaisland/ansi.cljc","^:",19,"^8",1,"^7",38,"^9",38,"~:tag",["^P",["~$clj","^4M"]],"^4G","Color schemes used in popular applications."],"~$next-csi",["^ ","^4D",null,"^5",["^ ","^6","lambdaisland/ansi.cljc","^7",192,"^8",7,"^9",192,"^:",15,"^4E",["^14",["^4F",["^14",[["~$s"],["~$s","~$start"]]]]],"^4G","Split a string on the next escape sequence, returning a [head CSI tail]\n  triplet. The returned CSI is excluding ESC[.","~:top-fn",["^ ","^4K",false,"~:fixed-arity",2,"^4N",2,"^4H",[["~$s"],["~$s","^51"]],"^4E",["^14",[["~$s"],["~$s","^51"]]],"^4J",["^14",[null,null]]]],"^Q","^1O","^6","lambdaisland/ansi.cljc","^:",15,"^52",["^ ","^4K",false,"^53",2,"^4N",2,"^4H",[["~$s"],["~$s","^51"]],"^4E",["^14",[["~$s"],["~$s","^51"]]],"^4J",["^14",[null,null]]],"^4H",[["~$s"],["~$s","^51"]],"^4I",null,"^53",2,"^4J",["^14",[null,null]],"^8",1,"^4K",false,"~:methods",[["^ ","^53",1,"^4K",false,"^4Z","^4M"],["^ ","^53",2,"^4K",false,"^4Z",["^P",["~$cljs.core/IVector","^4X"]]]],"^7",192,"^9",192,"^4N",2,"^4O",true,"^4E",["^14",[["~$s"],["~$s","^51"]]],"^4G","Split a string on the next escape sequence, returning a [head CSI tail]\n  triplet. The returned CSI is excluding ESC[."],"~$text->hiccup",["^ ","^4D",null,"^5",["^ ","^6","lambdaisland/ansi.cljc","^7",262,"^8",7,"^9",262,"^:",19,"^4E",["^14",["^4F",["^14",[["~$text"]]]]],"^4G","Convenience function for the basic case where you have a string of terminal\n  output and want to turn it into hiccup. Returns a seq of [:span] elements."],"^Q","^2F","^6","lambdaisland/ansi.cljc","^:",19,"^4H",["^14",[["^57"]]],"^4I",null,"^4J",["^14",[null,null]],"^8",1,"^4K",false,"^7",262,"^4L","^4[","^9",262,"^4N",1,"^4O",true,"^4E",["^14",["^4F",["^14",[["^57"]]]]],"^4G","Convenience function for the basic case where you have a string of terminal\n  output and want to turn it into hiccup. Returns a seq of [:span] elements."],"~$apply-props",["^ ","^4D",null,"^5",["^ ","^6","lambdaisland/ansi.cljc","^7",225,"^8",7,"^9",225,"^:",18,"^4E",["^14",["^4F",["^14",[["~$rf"]]]]],"^4G","Stateful transducer, apply it over the output of token-stream to know which\n  styling should be applied over each piece of text.\n\n  The results are pairs consisting of a property map and a string."],"^Q","^2E","^6","lambdaisland/ansi.cljc","^:",18,"^4H",["^14",[["^59"]]],"^4I",null,"^4J",["^14",[null,null]],"^8",1,"^4K",false,"^7",225,"^4L","~$function","^9",225,"^4N",1,"^4O",true,"^4E",["^14",["^4F",["^14",[["^59"]]]]],"^4G","Stateful transducer, apply it over the output of token-stream to know which\n  styling should be applied over each piece of text.\n\n  The results are pairs consisting of a property map and a string."],"~$ESC",["^ ","^5",["^ ","^6","lambdaisland/ansi.cljc","^7",5,"^8",6,"^9",5,"^:",9],"^Q","^20","^6","lambdaisland/ansi.cljc","^:",9,"^8",1,"^7",5,"^9",5,"^4Z","~$string","^4G","ASCII escape character (codepoint 27, hex 1b, octal 33)."],"~$rgb->css",["^ ","^4D",null,"^5",["^ ","^6","lambdaisland/ansi.cljc","^7",242,"^8",7,"^9",242,"^:",15,"^4E",["^14",["^4F",["^14",[[["~$_","~$r","~$g","~$b"]]]]]]],"^Q","^1M","^6","lambdaisland/ansi.cljc","^:",15,"^4H",["^14",[["~$p__102516"]]],"^4I",null,"^4J",["^14",[null,null]],"^8",1,"^4K",false,"^7",242,"^4L","^5<","^9",242,"^4N",1,"^4O",true,"^4E",["^14",["^4F",["^14",[[["~$_","~$r","~$g","~$b"]]]]]]],"~$token-stream",["^ ","^4D",null,"^5",["^ ","^6","lambdaisland/ansi.cljc","^7",209,"^8",7,"^9",209,"^:",19,"^4E",["^14",["^4F",["^14",[["^5<"]]]]],"^4G","Tokenize a string, whereby each CSI sequence gets transformed into a map of\n  properties. The result is a vector of strings and maps."],"^Q","^2@","^6","lambdaisland/ansi.cljc","^:",19,"^4H",["^14",[["^5<"]]],"^4I",null,"^4J",["^14",[null,null]],"^8",1,"^4K",false,"^7",209,"^4L",["^P",["^4[","^55"]],"^9",209,"^4N",1,"^4O",true,"^4E",["^14",["^4F",["^14",[["^5<"]]]]],"^4G","Tokenize a string, whereby each CSI sequence gets transformed into a map of\n  properties. The result is a vector of strings and maps."],"~$=i",["^ ","^Q","^2B","^6","lambdaisland/ansi.cljc","^7",10,"^8",1,"^9",10,"^:",8,"^5",["^ ","^6","lambdaisland/ansi.cljc","^7",10,"^8",6,"^9",10,"^:",8],"^4Z","~$boolean"],"~$reset-attrs",["^ ","^Q","^29","^6","lambdaisland/ansi.cljc","^7",80,"^8",1,"^9",80,"^:",17,"^5",["^ ","^6","lambdaisland/ansi.cljc","^7",80,"^8",6,"^9",80,"^:",17],"^4Z","^4W"],"~$*color-scheme*",["^ ","^5",["^ ","^6","lambdaisland/ansi.cljc","^7",61,"^8",16,"^9",61,"^:",30,"~:dynamic",true],"^Q","^1I","^6","lambdaisland/ansi.cljc","^:",30,"^8",1,"^5D",true,"^7",61,"^9",61,"^4Z","^4M","^4G","Color scheme currently in use during parsing."],"~$str-split",["^ ","^4D",null,"^5",["^ ","^6","lambdaisland/ansi.cljc","^7",134,"^8",7,"^9",134,"^:",16,"^4E",["^14",["^4F",["^14",[["~$s","~$sep"]]]]],"^4G","Like clojure.string/split, but uses a single character instead of a regex,\n  allowing for faster operation."],"^Q","^1T","^6","lambdaisland/ansi.cljc","^:",16,"^4H",["^14",[["~$s","^5F"]]],"^4I",null,"^4J",["^14",[null,null]],"^8",1,"^4K",false,"^7",134,"^4L","^4[","^9",134,"^4N",2,"^4O",true,"^4E",["^14",["^4F",["^14",[["~$s","^5F"]]]]],"^4G","Like clojure.string/split, but uses a single character instead of a regex,\n  allowing for faster operation."],"~$csi->attrs",["^ ","^4D",null,"^5",["^ ","^6","lambdaisland/ansi.cljc","^7",147,"^8",7,"^9",147,"^:",17,"^4E",["^14",["^4F",["^14",[["~$csi"]]]]],"^4G","Given a CSI specifier, excluding ESC[ but including the final \"m\", convert it\n  to a map of properties that it sets or unsets. Property values of nil indicate\n  a reset/unset. "],"^Q","^1Y","^6","lambdaisland/ansi.cljc","^:",17,"^4H",["^14",[["^5H"]]],"^4I",null,"^4J",["^14",[null,null]],"^8",1,"^4K",false,"^7",147,"^4L",["^P",["^4M","^4W","^4X"]],"^9",147,"^4N",1,"^4O",true,"^4E",["^14",["^4F",["^14",[["^5H"]]]]],"^4G","Given a CSI specifier, excluding ESC[ but including the final \"m\", convert it\n  to a map of properties that it sets or unsets. Property values of nil indicate\n  a reset/unset. "],"~$hiccup-xform",["^ ","^5",["^ ","^6","lambdaisland/ansi.cljc","^7",254,"^8",6,"^9",254,"^:",18],"^Q","^1J","^6","lambdaisland/ansi.cljc","^:",18,"^8",1,"^7",254,"^9",254,"^4Z","^5:","^4G","Transducer that consumes strings of input, and produces hiccup elements. Useful\n  when dealing with streaming input, since it will carry over the 'terminal\n  state'."],"~$chunk->hiccup",["^ ","^4D",null,"^5",["^ ","^6","lambdaisland/ansi.cljc","^7",245,"^8",7,"^9",245,"^:",20,"^4E",["^14",["^4F",["^14",[[[["^ ","~:keys",["~$foreground","~$background","~$bold"],"^16","~$props"],"^57"]]]]]]],"^Q","^2H","^6","lambdaisland/ansi.cljc","^:",20,"^4H",["^14",[["~$p__102523"]]],"^4I",null,"^4J",["^14",[null,null]],"^8",1,"^4K",false,"^7",245,"^4L","^55","^9",245,"^4N",1,"^4O",true,"^4E",["^14",["^4F",["^14",[[[["^ ","^5K",["^5L","^5M","^5N"],"^16","^5O"],"^57"]]]]]]],"~$color-24-bit",["^ ","^4D",null,"^5",["^ ","^6","lambdaisland/ansi.cljc","^7",118,"^8",7,"^9",118,"^:",19,"^4E",["^14",["^4F",["^14",[[["~$r","~$g","~$b"]]]]]]],"^Q","^1K","^6","lambdaisland/ansi.cljc","^:",19,"^4H",["^14",[["~$p__102448"]]],"^4I",null,"^4J",["^14",[null,null]],"^8",1,"^4K",false,"^7",118,"^4L","^55","^9",118,"^4N",1,"^4O",true,"^4E",["^14",["^4F",["^14",[[["~$r","~$g","~$b"]]]]]]],"~$color-8-bit",["^ ","^4D",null,"^5",["^ ","^6","lambdaisland/ansi.cljc","^7",102,"^8",7,"^9",102,"^:",18,"^4E",["^14",["^4F",["^14",[["^4V"]]]]],"^4G","Parse a \"8-bit\" color, given the code that follows on ESC[38;5;<code>m."],"^Q","^1[","^6","lambdaisland/ansi.cljc","^:",18,"^4H",["^14",[["^4V"]]],"^4I",null,"^4J",["^14",[null,null]],"^8",1,"^4K",false,"^7",102,"^4L",["^P",["^55","^4X"]],"^9",102,"^4N",1,"^4O",true,"^4E",["^14",["^4F",["^14",[["^4V"]]]]],"^4G","Parse a \"8-bit\" color, given the code that follows on ESC[38;5;<code>m."],"~$str-length",["^ ","^4D",null,"^5",["^ ","^6","lambdaisland/ansi.cljc","^7",13,"^8",7,"^9",13,"^:",17,"^4E",["^14",["^4F",["^14",[["~$s"]]]]],"^4G","Fast string length"],"^Q","^1G","^6","lambdaisland/ansi.cljc","^:",17,"^4H",["^14",[["~$s"]]],"^4I",null,"^4J",["^14",[null,null]],"^8",1,"^4K",false,"^7",13,"^4L","^4M","^9",13,"^4N",1,"^4O",true,"^4E",["^14",["^4F",["^14",[["~$s"]]]]],"^4G","Fast string length"],"~$str-scan",["^ ","^4D",null,"^5",["^ ","^6","lambdaisland/ansi.cljc","^7",172,"^8",7,"^9",172,"^:",15,"^4E",["^14",["^4F",["^14",[["~$pos","~$s","~$min","~$max"]]]]],"^4G","Starting at position pos, move forward as long as the characters at the current\n  position are within the given range. Returns the new position."],"^Q","^2=","^6","lambdaisland/ansi.cljc","^:",15,"^4H",["^14",[["^5V","~$s","^5W","^5X"]]],"^4I",null,"^4J",["^14",[null,null]],"^8",1,"^4K",false,"^7",172,"^9",172,"^4N",4,"^4O",true,"^4E",["^14",["^4F",["^14",[["^5V","~$s","^5W","^5X"]]]]],"^4G","Starting at position pos, move forward as long as the characters at the current\n  position are within the given range. Returns the new position."],"~$parse-int",["^ ","^4D",null,"^5",["^ ","^6","lambdaisland/ansi.cljc","^7",76,"^8",7,"^9",76,"^:",16,"^4E",["^14",["^4F",["^14",[["~$s"]]]]]],"^Q","^1N","^6","lambdaisland/ansi.cljc","^:",16,"^4H",["^14",[["~$s"]]],"^4I",null,"^4J",["^14",[null,null]],"^8",1,"^4K",false,"^7",76,"^4L","~$js","^9",76,"^4N",1,"^4O",true,"^4E",["^14",["^4F",["^14",[["~$s"]]]]]],"~$get-color",["^ ","^4D",null,"^5",["^ ","^6","lambdaisland/ansi.cljc","^7",73,"^8",7,"^9",73,"^:",16,"^4E",["^14",["^4F",["^14",[["~$n"]]]]]],"^Q","^24","^6","lambdaisland/ansi.cljc","^:",16,"^4H",["^14",[["~$n"]]],"^4I",null,"^4J",["^14",[null,null]],"^8",1,"^4K",false,"^7",73,"^4L",["^P",[null,"^4[","^4M"]],"^9",73,"^4N",1,"^4O",true,"^4E",["^14",["^4F",["^14",[["~$n"]]]]]]],"^12",["^ ","^Y","^Y"],"~:cljs.analyzer/constants",["^ ","^[",["^P",["~:bold","~:color","~:font-weight","~:osx","~:xterm","~:background-color","~:rgb","~:background","~:style","~:foreground","~:putty","~:cmd","~:vga","~:mirc","~:span","~:ubuntu"]],"~:order",["^6=","^6<","^64","^6;","^6>","^65","^6@","^67","^6:","^68","^61","^6?","^69","^62","^66","^63"]],"^17",["^ ","^10",["^P",[]]],"^18",["^ "],"^19",["^Z","^Y","^W"]],"^T","^R","~:ns-specs",["^ "],"~:ns-spec-vars",["^P",[]],"~:compiler-options",["^2L",[["^6D","~:static-fns"],true,["^6D","~:shadow-tweaks"],null,["^6D","~:source-map-inline"],null,["^6D","~:elide-asserts"],false,["^6D","~:optimize-constants"],null,["^6D","^1>"],null,["^6D","~:external-config"],null,["^6D","~:tooling-config"],null,["^6D","~:emit-constants"],null,["^6D","~:load-tests"],null,["^6D","~:form-size-threshold"],null,["^6D","~:data-readers"],null,["^6D","~:infer-externs"],"~:auto",["^6D","^1@"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^6D","~:fn-invoke-direct"],null,["^6D","~:source-map"],"/dev/null"]]]