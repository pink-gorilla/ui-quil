["^ ","~:output",["^ ","~:js","goog.provide('re_frame.std_interceptors');\nre_frame.std_interceptors.debug = re_frame.interceptor.__GT_interceptor.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"id\",\"id\",-1388402092),new cljs.core.Keyword(null,\"debug\",\"debug\",-1608172596),new cljs.core.Keyword(null,\"before\",\"before\",-1633692388),(function re_frame$std_interceptors$debug_before(context){\nre_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"log\",\"log\",-1595516004),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"Handling re-frame event:\",re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"event\",\"event\",301435442))], 0));\n\nreturn context;\n}),new cljs.core.Keyword(null,\"after\",\"after\",594996914),(function re_frame$std_interceptors$debug_after(context){\nvar event = re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"event\",\"event\",301435442));\nvar orig_db = re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"db\",\"db\",993250759));\nvar new_db = re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$3(context,new cljs.core.Keyword(null,\"db\",\"db\",993250759),new cljs.core.Keyword(\"re-frame.std-interceptors\",\"not-found\",\"re-frame.std-interceptors/not-found\",-1614827865));\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new_db,new cljs.core.Keyword(\"re-frame.std-interceptors\",\"not-found\",\"re-frame.std-interceptors/not-found\",-1614827865))){\nre_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"log\",\"log\",-1595516004),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"No app-db changes in:\",event], 0));\n} else {\nvar vec__72779_72858 = clojure.data.diff(orig_db,new_db);\nvar only_before_72859 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__72779_72858,(0),null);\nvar only_after_72860 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__72779_72858,(1),null);\nvar db_changed_QMARK__72861 = (((!((only_before_72859 == null)))) || ((!((only_after_72860 == null)))));\nif(db_changed_QMARK__72861){\nre_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"group\",\"group\",582596132),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"db clojure.data/diff for:\",event], 0));\n\nre_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"log\",\"log\",-1595516004),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"only before:\",only_before_72859], 0));\n\nre_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"log\",\"log\",-1595516004),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"only after :\",only_after_72860], 0));\n\nre_frame.loggers.console(new cljs.core.Keyword(null,\"groupEnd\",\"groupEnd\",-337721382));\n} else {\nre_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"log\",\"log\",-1595516004),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"No app-db changes resulted from:\",event], 0));\n}\n}\n\nreturn context;\n})], 0));\nre_frame.std_interceptors.unwrap = re_frame.interceptor.__GT_interceptor.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"id\",\"id\",-1388402092),new cljs.core.Keyword(null,\"unwrap\",\"unwrap\",-1399175462),new cljs.core.Keyword(null,\"before\",\"before\",-1633692388),(function re_frame$std_interceptors$unwrap_before(context){\nvar vec__72788 = re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"event\",\"event\",301435442));\nvar _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__72788,(0),null);\nvar payload = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__72788,(1),null);\nvar event = vec__72788;\nif((!(((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2((2),cljs.core.count(event))) && (cljs.core.map_QMARK_(payload)))))){\nre_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"warn\",\"warn\",-436710552),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"re-frame: \\\"unwrap\\\" interceptor requires event to be a 2-vector of [event-id payload-map]. Got \",event], 0));\n\nreturn context;\n} else {\nreturn re_frame.interceptor.assoc_coeffect(context,new cljs.core.Keyword(null,\"event\",\"event\",301435442),payload);\n}\n}),new cljs.core.Keyword(null,\"after\",\"after\",594996914),(function re_frame$std_interceptors$unwrap_after(context){\nreturn re_frame.interceptor.assoc_coeffect(context,new cljs.core.Keyword(null,\"event\",\"event\",301435442),re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"original-event\",\"original-event\",2121330403)));\n})], 0));\nre_frame.std_interceptors.trim_v = re_frame.interceptor.__GT_interceptor.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"id\",\"id\",-1388402092),new cljs.core.Keyword(null,\"trim-v\",\"trim-v\",-1274938640),new cljs.core.Keyword(null,\"before\",\"before\",-1633692388),(function re_frame$std_interceptors$trim_v_before(context){\nif((!(cljs.core.vector_QMARK_(re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"event\",\"event\",301435442)))))){\nre_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"warn\",\"warn\",-436710552),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"re-frame: \\\"trim-v\\\" interceptor expected event to be a vector. Got a \",cljs.core.type(re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"event\",\"event\",301435442)))], 0));\n\nreturn context;\n} else {\nreturn re_frame.interceptor.update_coeffect.cljs$core$IFn$_invoke$arity$variadic(context,new cljs.core.Keyword(null,\"event\",\"event\",301435442),cljs.core.subvec,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(1)], 0));\n}\n}),new cljs.core.Keyword(null,\"after\",\"after\",594996914),(function re_frame$std_interceptors$trim_v_after(context){\nreturn re_frame.interceptor.assoc_coeffect(context,new cljs.core.Keyword(null,\"event\",\"event\",301435442),re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"original-event\",\"original-event\",2121330403)));\n})], 0));\n/**\n * Returns an interceptor which wraps the kind of event handler given to `reg-event-db`.\n * \n *   These handlers take two arguments;  `db` and `event`, and they return `db`.\n * \n *    (fn [db event]\n *       ....)\n * \n *   So, the interceptor wraps the given handler:\n *   1. extracts two `:coeffects` keys: db and event\n *   2. calls handler-fn\n *   3. stores the db result back into context's `:effects`\n */\nre_frame.std_interceptors.db_handler__GT_interceptor = (function re_frame$std_interceptors$db_handler__GT_interceptor(handler_fn){\nreturn re_frame.interceptor.__GT_interceptor.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"id\",\"id\",-1388402092),new cljs.core.Keyword(null,\"db-handler\",\"db-handler\",579530098),new cljs.core.Keyword(null,\"before\",\"before\",-1633692388),(function re_frame$std_interceptors$db_handler__GT_interceptor_$_db_handler_before(context){\nvar new_context = ((re_frame.trace.is_trace_enabled_QMARK_())?(function (){var _STAR_current_trace_STAR__orig_val__72795 = re_frame.trace._STAR_current_trace_STAR_;\nvar _STAR_current_trace_STAR__temp_val__72796 = re_frame.trace.start_trace(new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"op-type\",\"op-type\",-1636141668),new cljs.core.Keyword(\"event\",\"handler\",\"event/handler\",-295903150),new cljs.core.Keyword(null,\"operation\",\"operation\",-1267664310),re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"original-event\",\"original-event\",2121330403))], null));\n(re_frame.trace._STAR_current_trace_STAR_ = _STAR_current_trace_STAR__temp_val__72796);\n\ntry{try{var map__72799 = re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$1(context);\nvar map__72799__$1 = cljs.core.__destructure_map(map__72799);\nvar db = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__72799__$1,new cljs.core.Keyword(null,\"db\",\"db\",993250759));\nvar event = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__72799__$1,new cljs.core.Keyword(null,\"event\",\"event\",301435442));\nreturn re_frame.interceptor.assoc_effect(context,new cljs.core.Keyword(null,\"db\",\"db\",993250759),(handler_fn.cljs$core$IFn$_invoke$arity$2 ? handler_fn.cljs$core$IFn$_invoke$arity$2(db,event) : handler_fn.call(null,db,event)));\n}finally {if(re_frame.trace.is_trace_enabled_QMARK_()){\nvar end__72489__auto___72886 = re_frame.interop.now();\nvar duration__72490__auto___72887 = (end__72489__auto___72886 - new cljs.core.Keyword(null,\"start\",\"start\",-355208981).cljs$core$IFn$_invoke$arity$1(re_frame.trace._STAR_current_trace_STAR_));\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(re_frame.trace.traces,cljs.core.conj,cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"duration\",\"duration\",1444101068),duration__72490__auto___72887,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"end\",\"end\",-268185958),re_frame.interop.now()], 0)));\n\nre_frame.trace.run_tracing_callbacks_BANG_(end__72489__auto___72886);\n} else {\n}\n}}finally {(re_frame.trace._STAR_current_trace_STAR_ = _STAR_current_trace_STAR__orig_val__72795);\n}})():(function (){var map__72801 = re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$1(context);\nvar map__72801__$1 = cljs.core.__destructure_map(map__72801);\nvar db = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__72801__$1,new cljs.core.Keyword(null,\"db\",\"db\",993250759));\nvar event = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__72801__$1,new cljs.core.Keyword(null,\"event\",\"event\",301435442));\nreturn re_frame.interceptor.assoc_effect(context,new cljs.core.Keyword(null,\"db\",\"db\",993250759),(handler_fn.cljs$core$IFn$_invoke$arity$2 ? handler_fn.cljs$core$IFn$_invoke$arity$2(db,event) : handler_fn.call(null,db,event)));\n})());\nif(re_frame.trace.is_trace_enabled_QMARK_()){\nvar new_trace__72491__auto___72890 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.update.cljs$core$IFn$_invoke$arity$4(re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),cljs.core.merge,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977).cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"effects\",\"effects\",-282369292),re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$1(new_context),new cljs.core.Keyword(null,\"coeffects\",\"coeffects\",497912985),re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$1(context)], null)], null))),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"effects\",\"effects\",-282369292),re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$1(new_context),new cljs.core.Keyword(null,\"coeffects\",\"coeffects\",497912985),re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$1(context)], null)], null),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977))], 0));\n(re_frame.trace._STAR_current_trace_STAR_ = new_trace__72491__auto___72890);\n\n} else {\n}\n\nreturn new_context;\n})], 0));\n});\n/**\n * Returns an interceptor which wraps the kind of event handler given to `reg-event-fx`.\n * \n *   These handlers take two arguments;  `coeffects` and `event`, and they return `effects`.\n * \n *    (fn [coeffects event]\n *       {:db ...\n *        :dispatch ...})\n * \n * Wrap handler in an interceptor so it can be added to (the RHS) of a chain:\n *   1. extracts `:coeffects`\n *   2. call handler-fn giving coeffects\n *   3. stores the result back into the `:effects`\n */\nre_frame.std_interceptors.fx_handler__GT_interceptor = (function re_frame$std_interceptors$fx_handler__GT_interceptor(handler_fn){\nreturn re_frame.interceptor.__GT_interceptor.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"id\",\"id\",-1388402092),new cljs.core.Keyword(null,\"fx-handler\",\"fx-handler\",-549783097),new cljs.core.Keyword(null,\"before\",\"before\",-1633692388),(function re_frame$std_interceptors$fx_handler__GT_interceptor_$_fx_handler_before(context){\nvar new_context = ((re_frame.trace.is_trace_enabled_QMARK_())?(function (){var _STAR_current_trace_STAR__orig_val__72807 = re_frame.trace._STAR_current_trace_STAR_;\nvar _STAR_current_trace_STAR__temp_val__72808 = re_frame.trace.start_trace(new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"op-type\",\"op-type\",-1636141668),new cljs.core.Keyword(\"event\",\"handler\",\"event/handler\",-295903150),new cljs.core.Keyword(null,\"operation\",\"operation\",-1267664310),re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"original-event\",\"original-event\",2121330403))], null));\n(re_frame.trace._STAR_current_trace_STAR_ = _STAR_current_trace_STAR__temp_val__72808);\n\ntry{try{var map__72810 = re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$1(context);\nvar map__72810__$1 = cljs.core.__destructure_map(map__72810);\nvar coeffects = map__72810__$1;\nvar event = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__72810__$1,new cljs.core.Keyword(null,\"event\",\"event\",301435442));\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(context,new cljs.core.Keyword(null,\"effects\",\"effects\",-282369292),(handler_fn.cljs$core$IFn$_invoke$arity$2 ? handler_fn.cljs$core$IFn$_invoke$arity$2(coeffects,event) : handler_fn.call(null,coeffects,event)));\n}finally {if(re_frame.trace.is_trace_enabled_QMARK_()){\nvar end__72489__auto___72900 = re_frame.interop.now();\nvar duration__72490__auto___72901 = (end__72489__auto___72900 - new cljs.core.Keyword(null,\"start\",\"start\",-355208981).cljs$core$IFn$_invoke$arity$1(re_frame.trace._STAR_current_trace_STAR_));\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(re_frame.trace.traces,cljs.core.conj,cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"duration\",\"duration\",1444101068),duration__72490__auto___72901,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"end\",\"end\",-268185958),re_frame.interop.now()], 0)));\n\nre_frame.trace.run_tracing_callbacks_BANG_(end__72489__auto___72900);\n} else {\n}\n}}finally {(re_frame.trace._STAR_current_trace_STAR_ = _STAR_current_trace_STAR__orig_val__72807);\n}})():(function (){var map__72811 = re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$1(context);\nvar map__72811__$1 = cljs.core.__destructure_map(map__72811);\nvar coeffects = map__72811__$1;\nvar event = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__72811__$1,new cljs.core.Keyword(null,\"event\",\"event\",301435442));\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(context,new cljs.core.Keyword(null,\"effects\",\"effects\",-282369292),(handler_fn.cljs$core$IFn$_invoke$arity$2 ? handler_fn.cljs$core$IFn$_invoke$arity$2(coeffects,event) : handler_fn.call(null,coeffects,event)));\n})());\nif(re_frame.trace.is_trace_enabled_QMARK_()){\nvar new_trace__72491__auto___72903 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.update.cljs$core$IFn$_invoke$arity$4(re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),cljs.core.merge,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977).cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"effects\",\"effects\",-282369292),re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$1(new_context),new cljs.core.Keyword(null,\"coeffects\",\"coeffects\",497912985),re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$1(context)], null)], null))),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"effects\",\"effects\",-282369292),re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$1(new_context),new cljs.core.Keyword(null,\"coeffects\",\"coeffects\",497912985),re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$1(context)], null)], null),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977))], 0));\n(re_frame.trace._STAR_current_trace_STAR_ = new_trace__72491__auto___72903);\n\n} else {\n}\n\nreturn new_context;\n})], 0));\n});\n/**\n * Returns an interceptor which wraps the kind of event handler given to `reg-event-ctx`.\n *   These advanced handlers take one argument: `context` and they return a modified `context`.\n *   Example:\n * \n *    (fn [context]\n *       (enqueue context [more interceptors]))\n */\nre_frame.std_interceptors.ctx_handler__GT_interceptor = (function re_frame$std_interceptors$ctx_handler__GT_interceptor(handler_fn){\nreturn re_frame.interceptor.__GT_interceptor.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"id\",\"id\",-1388402092),new cljs.core.Keyword(null,\"ctx-handler\",\"ctx-handler\",-1777672230),new cljs.core.Keyword(null,\"before\",\"before\",-1633692388),(function re_frame$std_interceptors$ctx_handler__GT_interceptor_$_ctx_handler_before(context){\nvar new_context = ((re_frame.trace.is_trace_enabled_QMARK_())?(function (){var _STAR_current_trace_STAR__orig_val__72814 = re_frame.trace._STAR_current_trace_STAR_;\nvar _STAR_current_trace_STAR__temp_val__72815 = re_frame.trace.start_trace(new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"op-type\",\"op-type\",-1636141668),new cljs.core.Keyword(\"event\",\"handler\",\"event/handler\",-295903150),new cljs.core.Keyword(null,\"operation\",\"operation\",-1267664310),re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"original-event\",\"original-event\",2121330403))], null));\n(re_frame.trace._STAR_current_trace_STAR_ = _STAR_current_trace_STAR__temp_val__72815);\n\ntry{try{return (handler_fn.cljs$core$IFn$_invoke$arity$1 ? handler_fn.cljs$core$IFn$_invoke$arity$1(context) : handler_fn.call(null,context));\n}finally {if(re_frame.trace.is_trace_enabled_QMARK_()){\nvar end__72489__auto___72917 = re_frame.interop.now();\nvar duration__72490__auto___72918 = (end__72489__auto___72917 - new cljs.core.Keyword(null,\"start\",\"start\",-355208981).cljs$core$IFn$_invoke$arity$1(re_frame.trace._STAR_current_trace_STAR_));\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(re_frame.trace.traces,cljs.core.conj,cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"duration\",\"duration\",1444101068),duration__72490__auto___72918,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"end\",\"end\",-268185958),re_frame.interop.now()], 0)));\n\nre_frame.trace.run_tracing_callbacks_BANG_(end__72489__auto___72917);\n} else {\n}\n}}finally {(re_frame.trace._STAR_current_trace_STAR_ = _STAR_current_trace_STAR__orig_val__72814);\n}})():(handler_fn.cljs$core$IFn$_invoke$arity$1 ? handler_fn.cljs$core$IFn$_invoke$arity$1(context) : handler_fn.call(null,context)));\nif(re_frame.trace.is_trace_enabled_QMARK_()){\nvar new_trace__72491__auto___72920 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.update.cljs$core$IFn$_invoke$arity$4(re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),cljs.core.merge,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977).cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"effects\",\"effects\",-282369292),re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$1(new_context),new cljs.core.Keyword(null,\"coeffects\",\"coeffects\",497912985),re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$1(context)], null)], null))),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"effects\",\"effects\",-282369292),re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$1(new_context),new cljs.core.Keyword(null,\"coeffects\",\"coeffects\",497912985),re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$1(context)], null)], null),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977))], 0));\n(re_frame.trace._STAR_current_trace_STAR_ = new_trace__72491__auto___72920);\n\n} else {\n}\n\nreturn new_context;\n})], 0));\n});\nre_frame.std_interceptors.path = (function re_frame$std_interceptors$path(var_args){\nvar args__4777__auto__ = [];\nvar len__4771__auto___72927 = arguments.length;\nvar i__4772__auto___72928 = (0);\nwhile(true){\nif((i__4772__auto___72928 < len__4771__auto___72927)){\nargs__4777__auto__.push((arguments[i__4772__auto___72928]));\n\nvar G__72929 = (i__4772__auto___72928 + (1));\ni__4772__auto___72928 = G__72929;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4778__auto__ = ((((0) < args__4777__auto__.length))?(new cljs.core.IndexedSeq(args__4777__auto__.slice((0)),(0),null)):null);\nreturn re_frame.std_interceptors.path.cljs$core$IFn$_invoke$arity$variadic(argseq__4778__auto__);\n});\n\n(re_frame.std_interceptors.path.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar path = cljs.core.flatten(args);\nvar db_store_key = new cljs.core.Keyword(\"re-frame-path\",\"db-store\",\"re-frame-path/db-store\",655758490);\nif(cljs.core.empty_QMARK_(path)){\nre_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"error\",\"error\",-978969032),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"re-frame: \\\"path\\\" interceptor given no params\"], 0));\n} else {\n}\n\nreturn re_frame.interceptor.__GT_interceptor.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"id\",\"id\",-1388402092),new cljs.core.Keyword(null,\"path\",\"path\",-188191168),new cljs.core.Keyword(null,\"before\",\"before\",-1633692388),(function (context){\nvar original_db = re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"db\",\"db\",993250759));\nreturn re_frame.interceptor.assoc_coeffect(cljs.core.update.cljs$core$IFn$_invoke$arity$4(context,db_store_key,cljs.core.conj,original_db),new cljs.core.Keyword(null,\"db\",\"db\",993250759),cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(original_db,path));\n}),new cljs.core.Keyword(null,\"after\",\"after\",594996914),(function (context){\nvar db_store = db_store_key.cljs$core$IFn$_invoke$arity$1(context);\nvar original_db = cljs.core.peek(db_store);\nvar new_db_store = cljs.core.pop(db_store);\nvar context_SINGLEQUOTE_ = re_frame.interceptor.assoc_coeffect(cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(context,db_store_key,new_db_store),new cljs.core.Keyword(null,\"db\",\"db\",993250759),original_db);\nvar db = re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$3(context,new cljs.core.Keyword(null,\"db\",\"db\",993250759),new cljs.core.Keyword(\"re-frame.std-interceptors\",\"not-found\",\"re-frame.std-interceptors/not-found\",-1614827865));\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(db,new cljs.core.Keyword(\"re-frame.std-interceptors\",\"not-found\",\"re-frame.std-interceptors/not-found\",-1614827865))){\nreturn context_SINGLEQUOTE_;\n} else {\nreturn re_frame.interceptor.assoc_effect(context_SINGLEQUOTE_,new cljs.core.Keyword(null,\"db\",\"db\",993250759),cljs.core.assoc_in(original_db,path,db));\n}\n})], 0));\n}));\n\n(re_frame.std_interceptors.path.cljs$lang$maxFixedArity = (0));\n\n/** @this {Function} */\n(re_frame.std_interceptors.path.cljs$lang$applyTo = (function (seq72816){\nvar self__4759__auto__ = this;\nreturn self__4759__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq72816));\n}));\n\nre_frame.std_interceptors.enrich = (function re_frame$std_interceptors$enrich(f){\nreturn re_frame.interceptor.__GT_interceptor.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"id\",\"id\",-1388402092),new cljs.core.Keyword(null,\"enrich\",\"enrich\",-2108921925),new cljs.core.Keyword(null,\"after\",\"after\",594996914),(function re_frame$std_interceptors$enrich_$_enrich_after(context){\nvar event = re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"event\",\"event\",301435442));\nvar db = ((cljs.core.contains_QMARK_(re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$1(context),new cljs.core.Keyword(null,\"db\",\"db\",993250759)))?re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"db\",\"db\",993250759)):re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"db\",\"db\",993250759)));\nreturn re_frame.interceptor.assoc_effect(context,new cljs.core.Keyword(null,\"db\",\"db\",993250759),(f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(db,event) : f.call(null,db,event)));\n})], 0));\n});\nre_frame.std_interceptors.after = (function re_frame$std_interceptors$after(f){\nreturn re_frame.interceptor.__GT_interceptor.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"id\",\"id\",-1388402092),new cljs.core.Keyword(null,\"after\",\"after\",594996914),new cljs.core.Keyword(null,\"after\",\"after\",594996914),(function re_frame$std_interceptors$after_$_after_after(context){\nvar db = ((cljs.core.contains_QMARK_(re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$1(context),new cljs.core.Keyword(null,\"db\",\"db\",993250759)))?re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"db\",\"db\",993250759)):re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"db\",\"db\",993250759)));\nvar event = re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"event\",\"event\",301435442));\n(f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(db,event) : f.call(null,db,event));\n\nreturn context;\n})], 0));\n});\nre_frame.std_interceptors.on_changes = (function re_frame$std_interceptors$on_changes(var_args){\nvar args__4777__auto__ = [];\nvar len__4771__auto___72944 = arguments.length;\nvar i__4772__auto___72945 = (0);\nwhile(true){\nif((i__4772__auto___72945 < len__4771__auto___72944)){\nargs__4777__auto__.push((arguments[i__4772__auto___72945]));\n\nvar G__72946 = (i__4772__auto___72945 + (1));\ni__4772__auto___72945 = G__72946;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4778__auto__ = ((((2) < args__4777__auto__.length))?(new cljs.core.IndexedSeq(args__4777__auto__.slice((2)),(0),null)):null);\nreturn re_frame.std_interceptors.on_changes.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),argseq__4778__auto__);\n});\n\n(re_frame.std_interceptors.on_changes.cljs$core$IFn$_invoke$arity$variadic = (function (f,out_path,in_paths){\nreturn re_frame.interceptor.__GT_interceptor.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"id\",\"id\",-1388402092),new cljs.core.Keyword(null,\"on-changes\",\"on-changes\",1345912602),new cljs.core.Keyword(null,\"after\",\"after\",594996914),(function re_frame$std_interceptors$on_change_after(context){\nvar new_db = re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"db\",\"db\",993250759));\nvar old_db = re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"db\",\"db\",993250759));\nvar new_ins = cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (p1__72844_SHARP_){\nreturn cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(new_db,p1__72844_SHARP_);\n}),in_paths);\nvar old_ins = cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (p1__72845_SHARP_){\nreturn cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(old_db,p1__72845_SHARP_);\n}),in_paths);\nvar changed_ins_QMARK_ = ((cljs.core.contains_QMARK_(re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$1(context),new cljs.core.Keyword(null,\"db\",\"db\",993250759)))?cljs.core.some(cljs.core.false_QMARK_,cljs.core.map.cljs$core$IFn$_invoke$arity$3(cljs.core.identical_QMARK_,new_ins,old_ins)):false);\nif(cljs.core.truth_(changed_ins_QMARK_)){\nreturn re_frame.interceptor.assoc_effect(context,new cljs.core.Keyword(null,\"db\",\"db\",993250759),cljs.core.assoc_in(new_db,out_path,cljs.core.apply.cljs$core$IFn$_invoke$arity$2(f,new_ins)));\n} else {\nreturn context;\n}\n})], 0));\n}));\n\n(re_frame.std_interceptors.on_changes.cljs$lang$maxFixedArity = (2));\n\n/** @this {Function} */\n(re_frame.std_interceptors.on_changes.cljs$lang$applyTo = (function (seq72846){\nvar G__72847 = cljs.core.first(seq72846);\nvar seq72846__$1 = cljs.core.next(seq72846);\nvar G__72848 = cljs.core.first(seq72846__$1);\nvar seq72846__$2 = cljs.core.next(seq72846__$1);\nvar self__4758__auto__ = this;\nreturn self__4758__auto__.cljs$core$IFn$_invoke$arity$variadic(G__72847,G__72848,seq72846__$2);\n}));\n\n/**\n * An interceptor which adds registered global interceptors to the context's queue.\n * \n * NOTE: :queue is a Clojure.lang.PersistentQueue and not a vector.\n */\nre_frame.std_interceptors.inject_global_interceptors = re_frame.interceptor.__GT_interceptor.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"id\",\"id\",-1388402092),new cljs.core.Keyword(null,\"inject-global-interceptors\",\"inject-global-interceptors\",-2144129737),new cljs.core.Keyword(null,\"before\",\"before\",-1633692388),(function re_frame$std_interceptors$inject_global_interceptors_before(context){\nreturn cljs.core.update.cljs$core$IFn$_invoke$arity$3(context,new cljs.core.Keyword(null,\"queue\",\"queue\",1455835879),(function (p1__72854_SHARP_){\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$2(re_frame.settings.get_global_interceptors(),p1__72854_SHARP_);\n}));\n})], 0));\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:doc","contains re-frame supplied, standard interceptors","~:file","re_frame/std_interceptors.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",30],"~:ns-aliases",["^ ","~$clojure.spec.alpha","~$cljs.spec.alpha","~$cljs.loader","~$shadow.loader","~$highlight.js","~$module$node_modules$highlight_DOT_js$lib$index","~$react","~$module$node_modules$react$index","~$clojure.tools.reader.reader-types","~$cljs.tools.reader.reader-types","~$clojure.pprint","~$cljs.pprint","~$react-dom","~$module$node_modules$react_dom$index","~$clojure.repl","~$cljs.repl","~$webly.user.tenx.events","~$webly.user.tenx.events-on"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$re-frame.std-interceptors","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$cofx","~$re-frame.cofx","~$re-frame.interceptor","^Z","~$data","~$clojure.data","~$re-frame.trace","^11","~$re-frame.settings","^12","~$cljs.core","^13","~$interceptor","^Z","~$goog","^15","~$trace","^11","~$re-frame.utils","^17","~$settings","^12","~$re-frame.loggers","^19","~$utils","^17","^Y","^Y","^10","^10","~$re-frame.db","^1;"],"~:seen",["^Q",["~:require"]],"~:uses",["^ ","~$->interceptor","^Z","~$get-effect","^Z","~$get-coeffect","^Z","~$assoc-coeffect","^Z","~$assoc-effect","^Z","~$update-coeffect","^Z","~$console","^19","~$app-db","^1;"],"~:require-macros",["^ ","^11","^11","^16","^11","^13","^13"],"~:form",["~#list",["~$ns","^S","contains re-frame supplied, standard interceptors",["^1I",["^1=",["^Z","~:refer",["^1?","^1@","^1A","^1B","^1C","^1D"]],["^19","^1K",["^1E"]],["^12","~:as","^18"],["^1;","^1K",["^1F"]],["^10","^1L","^["],["^Y","^1L","^X"],["^17","^1L","^1:"],["^11","^1L","^16","~:include-macros",true],["^Z","^1L","^14"]]]]],"~:flags",["^ ","^1=",["^Q",[]]],"~:js-deps",["^ "],"~:deps",["^15","^13","^Z","^19","^12","^1;","^10","^Y","^17","^11"]],"^U","^S","~:resource-id",["~:shadow.build.classpath/resource","re_frame/std_interceptors.cljc"],"~:compiled-at",1621210453994,"~:resource-name","re_frame/std_interceptors.cljc","~:warnings",[],"~:source","(ns re-frame.std-interceptors\n  \"contains re-frame supplied, standard interceptors\"\n  (:require\n    [re-frame.interceptor :refer [->interceptor get-effect get-coeffect assoc-coeffect assoc-effect update-coeffect]]\n    [re-frame.loggers :refer [console]]\n    [re-frame.settings :as settings]\n    [re-frame.db :refer [app-db]]\n    [clojure.data :as data]\n    [re-frame.cofx :as cofx]\n    [re-frame.utils :as utils]\n    [re-frame.trace :as trace :include-macros true]\n    [re-frame.interceptor :as interceptor]))\n\n\n(def debug\n  (->interceptor\n    :id     :debug\n    :before (fn debug-before\n              [context]\n              (console :log \"Handling re-frame event:\" (get-coeffect context :event))\n              context)\n    :after  (fn debug-after\n              [context]\n              (let [event   (get-coeffect context :event)\n                    orig-db (get-coeffect context :db)\n                    new-db  (get-effect   context :db ::not-found)]\n                (if (= new-db ::not-found)\n                  (console :log \"No app-db changes in:\" event)\n                  (let [[only-before only-after] (data/diff orig-db new-db)\n                        db-changed?    (or (some? only-before) (some? only-after))]\n                    (if db-changed?\n                      (do (console :group \"db clojure.data/diff for:\" event)\n                          (console :log \"only before:\" only-before)\n                          (console :log \"only after :\" only-after)\n                          (console :groupEnd))\n                      (console :log \"No app-db changes resulted from:\" event))))\n                context))))\n\n\n(def unwrap\n  (->interceptor\n    :id      :unwrap\n    :before  (fn unwrap-before\n               [context]\n               (let [[_ payload :as event] (get-coeffect context :event)]\n                 (if-not (and (= 2 (count event))\n                              (map? payload))\n                   (do\n                     (console :warn \"re-frame: \\\"unwrap\\\" interceptor requires event to be a 2-vector of [event-id payload-map]. Got \" event)\n                     context)\n                   (assoc-coeffect context :event payload))))\n    :after   (fn unwrap-after\n               [context]\n               (assoc-coeffect context :event (get-coeffect context :original-event)))))\n\n\n(def trim-v\n  (->interceptor\n    :id      :trim-v\n    :before  (fn trim-v-before\n               [context]\n               (if-not (vector? (get-coeffect context :event))\n                 (do\n                   (console :warn \"re-frame: \\\"trim-v\\\" interceptor expected event to be a vector. Got a \" (type (get-coeffect context :event)))\n                   context)\n                 (update-coeffect context :event subvec 1)))\n    :after   (fn trim-v-after\n               [context]\n               (assoc-coeffect context :event (get-coeffect context :original-event)))))\n\n\n;; -- Interceptor Factories - PART 1 ---------------------------------------------------------------\n;;\n;; These 3 factories wrap the 3 kinds of event handlers.\n;;\n\n(defn db-handler->interceptor\n  \"Returns an interceptor which wraps the kind of event handler given to `reg-event-db`.\n\n  These handlers take two arguments;  `db` and `event`, and they return `db`.\n\n      (fn [db event]\n         ....)\n\n  So, the interceptor wraps the given handler:\n     1. extracts two `:coeffects` keys: db and event\n     2. calls handler-fn\n     3. stores the db result back into context's `:effects`\"\n  [handler-fn]\n  (->interceptor\n    :id     :db-handler\n    :before (fn db-handler-before\n              [context]\n              (let [new-context\n                    (trace/with-trace\n                      {:op-type   :event/handler\n                       :operation (get-coeffect context :original-event)}\n                      (let [{:keys [db event]} (get-coeffect context)]\n                        (->> (handler-fn db event)\n                             (assoc-effect context :db))))]\n                ;; We merge these tags outside of the :event/handler trace because we want them to be assigned to the parent\n                ;; wrapping trace.\n                (trace/merge-trace!\n                  {:tags {:effects   (get-effect new-context)\n                          :coeffects (get-coeffect context)}})\n                new-context))))\n\n\n(defn fx-handler->interceptor\n  \"Returns an interceptor which wraps the kind of event handler given to `reg-event-fx`.\n\n  These handlers take two arguments;  `coeffects` and `event`, and they return `effects`.\n\n      (fn [coeffects event]\n         {:db ...\n          :dispatch ...})\n\n   Wrap handler in an interceptor so it can be added to (the RHS) of a chain:\n     1. extracts `:coeffects`\n     2. call handler-fn giving coeffects\n     3. stores the result back into the `:effects`\"\n  [handler-fn]\n(->interceptor\n  :id     :fx-handler\n  :before (fn fx-handler-before\n            [context]\n            (let [new-context\n                  (trace/with-trace\n                    {:op-type   :event/handler\n                     :operation (get-coeffect context :original-event)}\n                    (let [{:keys [event] :as coeffects} (get-coeffect context)]\n                      (->> (handler-fn coeffects event)\n                           (assoc context :effects))))]\n              (trace/merge-trace!\n                {:tags {:effects   (get-effect new-context)\n                        :coeffects (get-coeffect context)}})\n              new-context))))\n\n\n(defn ctx-handler->interceptor\n  \"Returns an interceptor which wraps the kind of event handler given to `reg-event-ctx`.\n  These advanced handlers take one argument: `context` and they return a modified `context`.\n  Example:\n\n      (fn [context]\n         (enqueue context [more interceptors]))\"\n  [handler-fn]\n  (->interceptor\n    :id     :ctx-handler\n    :before (fn ctx-handler-before\n              [context]\n              (let [new-context\n                    (trace/with-trace\n                      {:op-type   :event/handler\n                       :operation (get-coeffect context :original-event)}\n                      (handler-fn context))]\n                (trace/merge-trace!\n                  {:tags {:effects   (get-effect new-context)\n                          :coeffects (get-coeffect context)}})\n                new-context))))\n\n\n;; -- Interceptors Factories -  PART 2 ------------------------------------------------------------\n\n\n(defn path\n  [& args]\n  (let [path (flatten args)\n        db-store-key :re-frame-path/db-store]    ;; this is where, within `context`, we store the original dbs\n    (when (empty? path)\n      (console :error \"re-frame: \\\"path\\\" interceptor given no params\"))\n    (->interceptor\n      :id      :path\n      :before  (fn\n                 [context]\n                 (let [original-db (get-coeffect context :db)]\n                   (-> context\n                       (update db-store-key conj original-db)\n                       (assoc-coeffect :db (get-in original-db path)))))\n      :after   (fn [context]\n                 (let [db-store     (db-store-key context)\n                       original-db  (peek db-store)\n                       new-db-store (pop db-store)\n                       context'     (-> (assoc context db-store-key new-db-store)\n                                        (assoc-coeffect :db original-db))     ;; put the original db back so that things like debug work later on\n                       db           (get-effect context :db ::not-found)]\n                   (if (= db ::not-found)\n                     context'\n                     (->> (assoc-in original-db path db)\n                          (assoc-effect context' :db))))))))\n\n\n\n\n(defn enrich\n  [f]\n  (->interceptor\n    :id :enrich\n    :after (fn enrich-after\n             [context]\n             (let [event (get-coeffect context :event)\n                   db    (if (contains? (get-effect context) :db)\n                           (get-effect context :db) ;; If no db effect is returned, we provide the original coeffect.\n                           (get-coeffect context :db))]\n               (->> (f db event)\n                    (assoc-effect context :db))))))\n\n\n\n(defn after\n  [f]\n  (->interceptor\n    :id :after\n    :after (fn after-after\n             [context]\n             (let [db    (if (contains? (get-effect context) :db)\n                           (get-effect context :db)\n                           (get-coeffect context :db))\n                   event (get-coeffect context :event)]\n               (f db event) ;; call f for side effects\n               context)))) ;; context is unchanged\n\n(defn  on-changes\n  [f out-path & in-paths]\n  (->interceptor\n    :id    :on-changes\n    :after (fn on-change-after\n             [context]\n             (let [new-db   (get-effect context :db)\n                   old-db   (get-coeffect context :db)\n\n                   ;; work out if any \"inputs\" have changed\n                   new-ins      (map #(get-in new-db %) in-paths)\n                   old-ins      (map #(get-in old-db %) in-paths)\n                   ;; make sure the db is actually set in the effect\n                   changed-ins? (and (contains? (get-effect context) :db)\n                                     (some false? (map identical? new-ins old-ins)))]\n\n               ;; if one of the inputs has changed, then run 'f'\n               (if changed-ins?\n                 (->> (apply f new-ins)\n                      (assoc-in new-db out-path)\n                      (assoc-effect context :db))\n                 context)))))\n\n\n(def inject-global-interceptors\n  \"An interceptor which adds registered global interceptors to the context's queue.\n\n   NOTE: :queue is a Clojure.lang.PersistentQueue and not a vector.\"\n  (->interceptor\n    :id     :inject-global-interceptors\n    :before (fn inject-global-interceptors-before\n              [context]\n              (update context :queue #(into (settings/get-global-interceptors) %)))))\n","~:reader-features",["^Q",["~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings","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","names",["re-frame.std-interceptors/debug","re_frame.interceptor.__GT_interceptor","context","re_frame.loggers.console","re_frame.interceptor.get_coeffect","event","orig-db","new-db","re_frame.interceptor.get_effect","cljs.core._EQ_","vec__72779","cljs.core.nth","only-before","only-after","clojure.data/diff","db-changed?","re-frame.loggers/console","re-frame.std-interceptors/unwrap","vec__72788","_","payload","cljs.core/count","cljs.core/map?","re-frame.interceptor/assoc-coeffect","re-frame.std-interceptors/trim-v","cljs.core/vector?","cljs.core/type","re_frame.interceptor.update_coeffect","cljs.core/subvec","re-frame.std-interceptors/db-handler->interceptor","handler-fn","new-context","re-frame.trace/is-trace-enabled?","*current-trace*-orig-val__72795","re-frame.trace/*current-trace*","*current-trace*-temp-val__72796","re-frame.trace/start-trace","end__72489__auto__","re-frame.interop/now","duration__72490__auto__","cljs.core.swap_BANG_","re-frame.trace/traces","cljs.core/conj","cljs.core.assoc","re-frame.trace/run-tracing-callbacks!","map__72799","cljs.core/--destructure-map","cljs.core.get","map__72801","db","re-frame.interceptor/assoc-effect","new-trace__72491__auto__","cljs.core.merge","cljs.core.update","cljs.core/merge","cljs.core.dissoc","re-frame.std-interceptors/fx-handler->interceptor","*current-trace*-orig-val__72807","*current-trace*-temp-val__72808","map__72810","map__72811","coeffects","re-frame.std-interceptors/ctx-handler->interceptor","*current-trace*-orig-val__72814","*current-trace*-temp-val__72815","var_args","args__4777__auto__","len__4771__auto__","i__4772__auto__","argseq__4778__auto__","cljs.core/IndexedSeq","re-frame.std-interceptors/path","seq72816","self__4759__auto__","cljs.core/seq","args","path","cljs.core/flatten","db-store-key","cljs.core/empty?","original-db","cljs.core.get_in","db-store","cljs.core/peek","new-db-store","cljs.core/pop","context'","cljs.core/assoc-in","re-frame.std-interceptors/enrich","f","cljs.core/contains?","re-frame.std-interceptors/after","re-frame.std-interceptors/on-changes","seq72846","G__72847","cljs.core/first","cljs.core/next","G__72848","self__4758__auto__","out-path","in-paths","old-db","new-ins","p1__72844#","cljs.core.map","old-ins","p1__72845#","changed-ins?","cljs.core/some","cljs.core/false?","cljs.core/identical?","cljs.core.apply","re-frame.std-interceptors/inject-global-interceptors","p1__72854#","cljs.core.into","re-frame.settings/get-global-interceptors"]],"~:used-vars",["^Q",["~$cljs.core/vector?","~$cljs.core/=","~$re-frame.std-interceptors/debug","~$re-frame.interceptor/->interceptor","~$cljs.core/count","~$cljs.core/seq","~$cljs.core/apply","~$re-frame.loggers/console","~$re-frame.std-interceptors/inject-global-interceptors","~$re-frame.std-interceptors/trim-v","~$cljs.core/empty?","~$re-frame.std-interceptors/db-handler->interceptor","~$cljs.core/into","~$cljs.core/map?","~$cljs.core/conj","~$cljs.core/update","~$cljs.core/get-in","~$re-frame.interceptor/update-coeffect","~$re-frame.trace/is-trace-enabled?","~$re-frame.std-interceptors/enrich","~$re-frame.std-interceptors/ctx-handler->interceptor","~$re-frame.interceptor/assoc-coeffect","~$re-frame.std-interceptors/fx-handler->interceptor","~$cljs.core/subvec","~$re-frame.trace/*current-trace*","~$re-frame.std-interceptors/after","~$re-frame.settings/get-global-interceptors","~$re-frame.interceptor/get-coeffect","~$cljs.core/not","~$re-frame.interceptor/assoc-effect","~$cljs.core/assoc-in","~$re-frame.std-interceptors/path","~$re-frame.std-interceptors/unwrap","~$re-frame.std-interceptors/on-changes","~$cljs.core/type"]]],"~:cache-keys",["~#cmap",[["^1R","reagent/impl/batching.cljs"],["a1dd4d40425bb2e1afad0fe72780b43ff394ccfa","~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^Q",[]],"~:deps-syms",["^15","^13","~$reagent.debug","~$reagent.impl.util"]]],["^1R","goog/dom/tagname.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2W",["^ ","^2X",null,"^2Y",["^Q",[]],"^2Z",["^15","~$goog.dom.HtmlElement"]]],["^1R","goog/labs/useragent/platform.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2W",["^ ","^2X",null,"^2Y",["^Q",[]],"^2Z",["^15","~$goog.labs.userAgent.util","~$goog.string"]]],["^1R","goog/math/math.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2W",["^ ","^2X",null,"^2Y",["^Q",[]],"^2Z",["^15","~$goog.array","~$goog.asserts"]]],["^1R","goog/html/trustedtypes.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2W",["^ ","^2X",null,"^2Y",["^Q",[]],"^2Z",["^15"]]],["^1R","goog/events/eventtype.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2W",["^ ","^2X",null,"^2Y",["^Q",[]],"^2Z",["^15","~$goog.events.BrowserFeature","~$goog.userAgent"]]],["^1R","goog/labs/useragent/browser.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2W",["^ ","^2X",null,"^2Y",["^Q",[]],"^2Z",["^15","^34","^32","~$goog.object","~$goog.string.internal"]]],["^1R","goog/html/safeurl.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2W",["^ ","^2X",null,"^2Y",["^Q",[]],"^2Z",["^15","^35","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.i18n.bidi.Dir","~$goog.i18n.bidi.DirectionalString","~$goog.string.Const","~$goog.string.TypedString","^39"]]],["^1R","re_frame/loggers.cljc"],["b153aa5637718f7ef415049480b003bb00fd359b","^2W",["^ ","^2X",null,"^2Y",["^Q",[]],"^2Z",["^15","^13","~$clojure.set"]]],["^1R","goog/array/array.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2W",["^ ","^2X",null,"^2Y",["^Q",[]],"^2Z",["^15","^35"]]],["^1R","reagent/impl/util.cljs"],["a1dd4d40425bb2e1afad0fe72780b43ff394ccfa","^2W",["^ ","^2X",null,"^2Y",["^Q",[]],"^2Z",["^15","^13","~$clojure.string","~$clojure.walk","^38","^2["]]],["^1R","goog/useragent/useragent.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2W",["^ ","^2X",null,"^2Y",["^Q",[]],"^2Z",["^15","~$goog.labs.userAgent.browser","~$goog.labs.userAgent.engine","~$goog.labs.userAgent.platform","^32","~$goog.reflect","^33"]]],["^1R","goog/debug/error.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2W",["^ ","^2X",null,"^2Y",["^Q",[]],"^2Z",["^15"]]],["^1R","goog/events/events.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2W",["^ ","^2X",null,"^2Y",["^Q",[]],"^2Z",["^15","^35","~$goog.debug.entryPointRegistry","~$goog.events.BrowserEvent","^36","~$goog.events.Listenable","~$goog.events.ListenerMap","~$goog.debug.ErrorHandler","~$goog.events.EventId","~$goog.events.EventLike","~$goog.events.EventWrapper","~$goog.events.ListenableKey","~$goog.events.Listener"]]],["^1R","re_frame/registrar.cljc"],["b153aa5637718f7ef415049480b003bb00fd359b","^2W",["^ ","^2X",null,"^2Y",["^Q",[]],"^2Z",["^15","^13","~$re-frame.interop","^19","^12"]]],["^1R","goog/events/browserfeature.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2W",["^ ","^2X",null,"^2Y",["^Q",[]],"^2Z",["^15","^37"]]],["^1R","goog/dom/nodetype.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2W",["^ ","^2X",null,"^2Y",["^Q",[]],"^2Z",["^15"]]],["^1R","reagent/ratom.cljs"],["a1dd4d40425bb2e1afad0fe72780b43ff394ccfa","^2W",["^ ","^2X",null,"^2Y",["^Q",[]],"^2Z",["^15","^13","^30","^2[","~$reagent.impl.batching","^3@","^38"]]],["^1R","re_frame/interop.cljs"],["b153aa5637718f7ef415049480b003bb00fd359b","^2W",["^ ","^2X",null,"^2Y",["^Q",[]],"^2Z",["^15","^13","~$goog.async.nextTick","~$goog.events","~$reagent.core","~$reagent.ratom"]]],["^1R","goog/events/eventtarget.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2W",["^ ","^2X",null,"^2Y",["^Q",[]],"^2Z",["^15","~$goog.Disposable","^35","^3T","~$goog.events.Event","^3I","^3J","^38","^3L","^3M","^3O"]]],["^1R","goog/disposable/disposable.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2W",["^ ","^2X",null,"^2Y",["^Q",[]],"^2Z",["^15","~$goog.disposable.IDisposable"]]],["^1R","goog/string/typedstring.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2W",["^ ","^2X",null,"^2Y",["^Q",[]],"^2Z",["^15"]]],["~:shadow.build.npm/resource","node_modules/react/index.js"],["d2b3d9e8fa8186b8aeddfc91d01d70689433d1f4","39149bb2f5bbdb878453e592f8d1e15a126e08f5","a69a7f3d4a4636bf9035bc53c05b2d99a7b8af7f","^2W",["^ ","^2X",null,"^2Y",["^Q",[]],"^2Z",["~$shadow.js","~$module$node_modules$react$cjs$react_production_min","~$module$node_modules$react$cjs$react_development"]]],["^1R","shadow/js.js"],["e789e354d6afe7fd62e5f7505a5a195575db182b","^2W",["^ ","^2X",null,"^2Y",["^Q",[]],"^2Z",["^15"]]],["^1R","goog/object/object.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2W",["^ ","^2X",null,"^2Y",["^Q",[]],"^2Z",["^15"]]],["^1R","reagent/impl/template.cljs"],["a1dd4d40425bb2e1afad0fe72780b43ff394ccfa","^2W",["^ ","^2X",null,"^2Y",["^Q",[]],"^2Z",["^15","^13","^D","^3A","^30","~$reagent.impl.component","^3R","~$reagent.impl.input","~$reagent.impl.protocols","^3V","^2[","^38"]]],["^1R","goog/dom/asserts.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2W",["^ ","^2X",null,"^2Y",["^Q",[]],"^2Z",["^15","^35"]]],"~:SHADOW-TIMESTAMP",[1618720883000,1618720883000,1618720422000],["^3Z","node_modules/react/cjs/react.development.js"],["d2b3d9e8fa8186b8aeddfc91d01d70689433d1f4","39149bb2f5bbdb878453e592f8d1e15a126e08f5","2d5bc5b3fb2e19279e31e634b0695b1fd96a54f3","^2W",["^ ","^2X",null,"^2Y",["^Q",[]],"^2Z",["^3[","~$module$node_modules$object_assign$index"]]],["^1R","goog/math/long.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2W",["^ ","^2X",null,"^2Y",["^Q",[]],"^2Z",["^15","^35","^3F"]]],["^1R","goog/events/listener.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2W",["^ ","^2X",null,"^2Y",["^Q",[]],"^2Z",["^15","^3O","^3I"]]],["^1R","goog/html/trustedresourceurl.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2W",["^ ","^2X",null,"^2Y",["^Q",[]],"^2Z",["^15","^35","~$goog.fs.blob","^3:","~$goog.html.SafeScript","~$goog.html.trustedtypes","^3<","^3=","^3>","^3?"]]],["^1R","goog/debug/tracer.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2W",["^ ","^2X",null,"^2Y",["^Q",[]],"^2Z",["^15","^34","^35","~$goog.debug","~$goog.debug.Logger","~$goog.iter","~$goog.log","~$goog.structs.Map","~$goog.structs.SimplePool"]]],["^1R","goog/events/listenermap.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2W",["^ ","^2X",null,"^2Y",["^Q",[]],"^2Z",["^15","^34","^3P","^38","^3L","^3I","^3O"]]],["^1R","goog/events/eventid.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2W",["^ ","^2X",null,"^2Y",["^Q",[]],"^2Z",["^15"]]],["^1R","goog/string/internal.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2W",["^ ","^2X",null,"^2Y",["^Q",[]],"^2Z",["^15"]]],["^1R","goog/events/eventwrapper.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2W",["^ ","^2X",null,"^2Y",["^Q",[]],"^2Z",["^15","~$goog.events.EventHandler","~$goog.events.ListenableType"]]],["^1R","goog/functions/functions.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2W",["^ ","^2X",null,"^2Y",["^Q",[]],"^2Z",["^15"]]],["^1R","goog/html/safestyle.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2W",["^ ","^2X",null,"^2Y",["^Q",[]],"^2Z",["^15","^34","^35","~$goog.html.SafeUrl","^3>","^3?","^39"]]],["^1R","goog/dom/safe.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2W",["^ ","^2X",null,"^2Y",["^Q",[]],"^2Z",["^15","^35","~$goog.dom.asserts","~$goog.functions","~$goog.html.SafeHtml","^48","~$goog.html.SafeStyle","^4B","^3;","~$goog.html.uncheckedconversions","^3>","^39"]]],["^1R","reagent/impl/component.cljs"],["a1dd4d40425bb2e1afad0fe72780b43ff394ccfa","^2W",["^ ","^2X",null,"^2Y",["^Q",[]],"^2Z",["^15","^13","^38","^D","^30","^3R","^44","^3V","^2["]]],["^1R","clojure/walk.cljs"],["86bedf67c795c72bde3feb0415b41be8b95f2cbb","^2W",["^ ","^2X",null,"^2Y",["^Q",[]],"^2Z",["^15","^13"]]],["^1R","goog/structs/map.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2W",["^ ","^2X",null,"^2Y",["^Q",[]],"^2Z",["^15","~$goog.iter.Iterator","~$goog.iter.StopIteration"]]],["^1R","goog/html/safehtml.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2W",["^ ","^2X",null,"^2Y",["^Q",[]],"^2Z",["^15","^34","^35","~$goog.dom.TagName","~$goog.dom.tags","^48","^4F","~$goog.html.SafeStyleSheet","^4B","^3;","^49","^3<","^3=","^3C","^38","^3>","^3?","^39"]]],["^1R","goog/dom/tags.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2W",["^ ","^2X",null,"^2Y",["^Q",[]],"^2Z",["^15","^38"]]],["^1R","goog/math/size.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2W",["^ ","^2X",null,"^2Y",["^Q",[]],"^2Z",["^15"]]],["^1R","goog/labs/useragent/engine.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2W",["^ ","^2X",null,"^2Y",["^Q",[]],"^2Z",["^15","^34","^32","^33"]]],["^1R","goog/fs/blob.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2W",["^ ","^2X",null,"^2Y",["^Q",[]],"^2Z",["^15","^34"]]],["^1R","re_frame/settings.cljc"],["b153aa5637718f7ef415049480b003bb00fd359b","^2W",["^ ","^2X",null,"^2Y",["^Q",[]],"^2Z",["^15","^13","^3Q","^19"]]],["^1R","goog/dom/dom.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2W",["^ ","^2X",null,"^2Y",["^Q",[]],"^2Z",["^15","^34","^35","~$goog.dom.BrowserFeature","~$goog.dom.NodeType","^4J","~$goog.dom.safe","^4E","^4G","~$goog.math.Coordinate","~$goog.math.Size","^38","^33","^3>","~$goog.string.Unicode","^37"]]],["^1R","goog/asserts/asserts.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2W",["^ ","^2X",null,"^2Y",["^Q",[]],"^2Z",["^15","~$goog.debug.Error","^4N"]]],["^1R","reagent/impl/protocols.cljs"],["a1dd4d40425bb2e1afad0fe72780b43ff394ccfa","^2W",["^ ","^2X",null,"^2Y",["^Q",[]],"^2Z",["^15","^13"]]],["^1R","goog/uri/uri.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2W",["^ ","^2X",null,"^2Y",["^Q",[]],"^2Z",["^15","^34","^35","^33","~$goog.structs","^4>","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^1R","goog/i18n/bidi.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2W",["^ ","^2X",null,"^2Y",["^Q",[]],"^2Z",["^15"]]],["^3Z","node_modules/object-assign/index.js"],["d2b3d9e8fa8186b8aeddfc91d01d70689433d1f4","39149bb2f5bbdb878453e592f8d1e15a126e08f5","519ffd5a4c91b67302cc9947b794966d629860cd","^2W",["^ ","^2X",null,"^2Y",["^Q",[]],"^2Z",["^3["]]],["^1R","re_frame/db.cljc"],["b153aa5637718f7ef415049480b003bb00fd359b","^2W",["^ ","^2X",null,"^2Y",["^Q",[]],"^2Z",["^15","^13","^3Q"]]],["^1R","goog/debug/errorhandler.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2W",["^ ","^2X",null,"^2Y",["^Q",[]],"^2Z",["^15","^3W","^35","^4:","~$goog.debug.EntryPointMonitor","^4S","~$goog.debug.Trace"]]],["^1R","goog/disposable/idisposable.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2W",["^ ","^2X",null,"^2Y",["^Q",[]],"^2Z",["^15"]]],["^1R","goog/fs/url.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2W",["^ ","^2X",null,"^2Y",["^Q",[]],"^2Z",["^15"]]],["^1R","goog/base.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2W",["^ ","^2X",null,"^2Y",["^Q",[]],"^2Z",[]]],["^1R","goog/structs/structs.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2W",["^ ","^2X",null,"^2Y",["^Q",[]],"^2Z",["^15","^34","^38"]]],["^1R","clojure/string.cljs"],["86bedf67c795c72bde3feb0415b41be8b95f2cbb","^2W",["^ ","^2X",null,"^2Y",["^Q",[]],"^2Z",["^15","^13","^33","~$goog.string.StringBuffer"]]],["^1R","re_frame/cofx.cljc"],["b153aa5637718f7ef415049480b003bb00fd359b","^2W",["^ ","^2X",null,"^2Y",["^Q",[]],"^2Z",["^15","^13","^1;","^Z","~$re-frame.registrar","^19"]]],["^3Z","node_modules/react/cjs/react.production.min.js"],["d2b3d9e8fa8186b8aeddfc91d01d70689433d1f4","39149bb2f5bbdb878453e592f8d1e15a126e08f5","6093d43b27c84de58b9ce55e3a930469339c9e54","^2W",["^ ","^2X",null,"^2Y",["^Q",[]],"^2Z",["^3[","^46"]]],["^1R","goog/debug/entrypointregistry.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2W",["^ ","^2X",null,"^2Y",["^Q",[]],"^2Z",["^15","^35"]]],["^1R","goog/string/string.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2W",["^ ","^2X",null,"^2Y",["^Q",[]],"^2Z",["^15","^4O","^4G","^3>","^39"]]],["^1R","re_frame/interceptor.cljc"],["b153aa5637718f7ef415049480b003bb00fd359b","^2W",["^ ","^2X",null,"^2Y",["^Q",[]],"^2Z",["^15","^13","^19","^3Q","^11","^3@"]]],["^1R","clojure/data.cljs"],["86bedf67c795c72bde3feb0415b41be8b95f2cbb","^2W",["^ ","^2X",null,"^2Y",["^Q",[]],"^2Z",["^15","^13","^3@"]]],["^1R","goog/reflect/reflect.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2W",["^ ","^2X",null,"^2Y",["^Q",[]],"^2Z",["^15"]]],["^1R","goog/labs/useragent/util.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2W",["^ ","^2X",null,"^2Y",["^Q",[]],"^2Z",["^15","^39"]]],["^1R","reagent/core.cljs"],["a1dd4d40425bb2e1afad0fe72780b43ff394ccfa","^2W",["^ ","^2X",null,"^2Y",["^Q",[]],"^2Z",["^15","^13","^D","~$reagent.impl.template","^42","^30","^3R","^44","^3V","^2["]]],["^1R","goog/debug/debug.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2W",["^ ","^2X",null,"^2Y",["^Q",[]],"^2Z",["^15","^34","~$goog.debug.errorcontext","^37"]]],["^1R","goog/string/stringbuffer.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2W",["^ ","^2X",null,"^2Y",["^Q",[]],"^2Z",["^15"]]],["^1R","goog/math/coordinate.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2W",["^ ","^2X",null,"^2Y",["^Q",[]],"^2Z",["^15","~$goog.math"]]],["^1R","re_frame/std_interceptors.cljc"],["b153aa5637718f7ef415049480b003bb00fd359b","^2W",["^ ","^2X",null,"^2Y",["^Q",[]],"^2Z",["^15","^13","^Z","^19","^12","^1;","^10","^Y","^17","^11"]]],["^1R","goog/debug/errorcontext.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2W",["^ ","^2X",null,"^2Y",["^Q",[]],"^2Z",["^15"]]],["^1R","goog/iter/iter.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2W",["^ ","^2X",null,"^2Y",["^Q",[]],"^2Z",["^15","^34","^35","^4D","^52"]]],["^1R","goog/async/nexttick.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2W",["^ ","^2X",null,"^2Y",["^Q",[]],"^2Z",["^15","^3G","~$goog.dom","^4J","^4D","^3C","^3D"]]],["^1R","goog/html/uncheckedconversions.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2W",["^ ","^2X",null,"^2Y",["^Q",[]],"^2Z",["^15","^35","^4E","^48","^4F","^4L","^4B","^3;","^3>","^39","^3<"]]],["^1R","re_frame/utils.cljc"],["b153aa5637718f7ef415049480b003bb00fd359b","^2W",["^ ","^2X",null,"^2Y",["^Q",[]],"^2Z",["^15","^13","^19"]]],["^1R","goog/debug/logger.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2W",["^ ","^2X",null,"^2Y",["^Q",[]],"^2Z",["^15","^4:","^4=","~$goog.log.Level","~$goog.log.LogRecord","~$goog.log.Logger"]]],["^1R","reagent/impl/input.cljs"],["a1dd4d40425bb2e1afad0fe72780b43ff394ccfa","^2W",["^ ","^2X",null,"^2Y",["^Q",[]],"^2Z",["^15","^13","^42","^3R","^44"]]],["^1R","goog/events/event.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2W",["^ ","^2X",null,"^2Y",["^Q",[]],"^2Z",["^15","^3W","^3L"]]],["^1R","goog/events/eventhandler.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2W",["^ ","^2X",null,"^2Y",["^Q",[]],"^2Z",["^15","^3W","^3T","^38","^3X","^3L","~$goog.events.EventTarget","^3N"]]],["^1R","goog/dom/htmlelement.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2W",["^ ","^2X",null,"^2Y",["^Q",[]],"^2Z",["^15"]]],["^1R","cljs/core.cljs"],["86bedf67c795c72bde3feb0415b41be8b95f2cbb","^2W",["^ ","^2X",null,"^2Y",["^Q",[]],"^2Z",["^15","~$goog.math.Long","~$goog.math.Integer","^33","^38","^34","~$goog.Uri","^4Z"]]],["^1R","goog/html/safescript.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2W",["^ ","^2X",null,"^2Y",["^Q",[]],"^2Z",["^15","^3>","^3?","^49","^35"]]],["^1R","goog/log/log.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2W",["^ ","^2X",null,"^2Y",["^Q",[]],"^2Z",["^15","^35","^4:"]]],["^1R","reagent/debug.cljs"],["a1dd4d40425bb2e1afad0fe72780b43ff394ccfa","^2W",["^ ","^2X",null,"^2Y",["^Q",[]],"^2Z",["^15","^13"]]],["^1R","goog/html/safestylesheet.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2W",["^ ","^2X",null,"^2Y",["^Q",[]],"^2Z",["^15","^3>","^4F","^3?","^34","^38","^35","^39"]]],["^1R","goog/events/browserevent.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2W",["^ ","^2X",null,"^2Y",["^Q",[]],"^2Z",["^15","^4:","^36","^3X","~$goog.events.EventType","^3F","^37"]]],["^1R","goog/math/integer.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2W",["^ ","^2X",null,"^2Y",["^Q",[]],"^2Z",["^15","^3F"]]],["^1R","goog/structs/simplepool.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2W",["^ ","^2X",null,"^2Y",["^Q",[]],"^2Z",["^15","^3W"]]],["^1R","goog/dom/browserfeature.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2W",["^ ","^2X",null,"^2Y",["^Q",[]],"^2Z",["^15","^37"]]],["^1R","clojure/set.cljs"],["86bedf67c795c72bde3feb0415b41be8b95f2cbb","^2W",["^ ","^2X",null,"^2Y",["^Q",[]],"^2Z",["^15","^13"]]],["^1R","goog/uri/utils.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2W",["^ ","^2X",null,"^2Y",["^Q",[]],"^2Z",["^15","^35","^33"]]],["^1R","goog/string/const.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2W",["^ ","^2X",null,"^2Y",["^Q",[]],"^2Z",["^15","^35","^3?"]]],["^1R","goog/events/listenable.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2W",["^ ","^2X",null,"^2Y",["^Q",[]],"^2Z",["^15","^3L","^3M"]]],["^1R","re_frame/trace.cljc"],["b153aa5637718f7ef415049480b003bb00fd359b","^2W",["^ ","^2X",null,"^2Y",["^Q",[]],"^2Z",["^15","^13","^3Q","^19","^4D"]]]]],"~:clj-info",["^ ","jar:file:/home/andreas/.m2/repository/org/clojure/clojurescript/1.10.844/clojurescript-1.10.844.jar!/cljs/env.cljc",1618720422000,"jar:file:/home/andreas/.m2/repository/org/clojure/clojurescript/1.10.844/clojurescript-1.10.844.jar!/cljs/externs.clj",1618720422000,"jar:file:/home/andreas/.m2/repository/org/clojure/clojurescript/1.10.844/clojurescript-1.10.844.jar!/cljs/tagged_literals.cljc",1618720422000,"jar:file:/home/andreas/.m2/repository/org/clojure/data.json/2.1.0/data.json-2.1.0.jar!/clojure/data/json.clj",1618502954000,"jar:file:/home/andreas/.m2/repository/org/clojure/clojurescript/1.10.844/clojurescript-1.10.844.jar!/cljs/compiler.cljc",1618720422000,"jar:file:/home/andreas/.m2/repository/net/cgrand/macrovich/0.2.1/macrovich-0.2.1.jar!/net/cgrand/macrovich.cljc",1617405365000,"jar:file:/home/andreas/.m2/repository/org/clojure/clojurescript/1.10.844/clojurescript-1.10.844.jar!/cljs/instant.clj",1618720422000,"jar:file:/home/andreas/.m2/repository/org/clojure/clojurescript/1.10.844/clojurescript-1.10.844.jar!/cljs/source_map/base64_vlq.clj",1618720422000,"jar:file:/home/andreas/.m2/repository/re-frame/re-frame/1.2.0/re-frame-1.2.0.jar!/re_frame/trace.cljc",1618720871000,"jar:file:/home/andreas/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/edn.clj",1618716228000,"jar:file:/home/andreas/.m2/repository/org/clojure/tools.reader/1.3.5/tools.reader-1.3.5.jar!/clojure/tools/reader/default_data_readers.clj",1618501370000,"jar:file:/home/andreas/.m2/repository/org/clojure/clojurescript/1.10.844/clojurescript-1.10.844.jar!/cljs/analyzer.cljc",1618720422000,"jar:file:/home/andreas/.m2/repository/org/clojure/clojurescript/1.10.844/clojurescript-1.10.844.jar!/cljs/source_map.clj",1618720422000,"jar:file:/home/andreas/.m2/repository/re-frame/re-frame/1.2.0/re-frame-1.2.0.jar!/re_frame/interop.clj",1618720871000,"jar:file:/home/andreas/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/core.clj",1618716228000,"jar:file:/home/andreas/.m2/repository/org/clojure/tools.reader/1.3.5/tools.reader-1.3.5.jar!/clojure/tools/reader.clj",1618501370000,"jar:file:/home/andreas/.m2/repository/org/clojure/clojurescript/1.10.844/clojurescript-1.10.844.jar!/cljs/js_deps.cljc",1618720422000,"jar:file:/home/andreas/.m2/repository/org/clojure/clojurescript/1.10.844/clojurescript-1.10.844.jar!/cljs/core.cljc",1618720422000,"jar:file:/home/andreas/.m2/repository/org/clojure/tools.reader/1.3.5/tools.reader-1.3.5.jar!/clojure/tools/reader/impl/inspect.clj",1618501370000,"jar:file:/home/andreas/.m2/repository/org/clojure/tools.reader/1.3.5/tools.reader-1.3.5.jar!/clojure/tools/reader/reader_types.clj",1618501370000,"jar:file:/home/andreas/.m2/repository/reagent/reagent/1.0.0/reagent-1.0.0.jar!/reagent/ratom.clj",1618720871000,"jar:file:/home/andreas/.m2/repository/binaryage/devtools/1.0.2/devtools-1.0.2.jar!/devtools/defaults.clj",1618720434000,"jar:file:/home/andreas/.m2/repository/reagent/reagent/1.0.0/reagent-1.0.0.jar!/reagent/debug.clj",1618720871000,"jar:file:/home/andreas/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/java/io.clj",1618716228000,"jar:file:/home/andreas/.m2/repository/reagent/reagent/1.0.0/reagent-1.0.0.jar!/reagent/core.clj",1618720871000,"jar:file:/home/andreas/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/pprint.clj",1618716228000,"jar:file:/home/andreas/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/set.clj",1618716228000,"jar:file:/home/andreas/.m2/repository/org/clojure/clojurescript/1.10.844/clojurescript-1.10.844.jar!/cljs/analyzer/impl.cljc",1618720422000,"jar:file:/home/andreas/.m2/repository/org/clojure/tools.reader/1.3.5/tools.reader-1.3.5.jar!/clojure/tools/reader/impl/errors.clj",1618501370000,"jar:file:/home/andreas/.m2/repository/org/clojure/clojurescript/1.10.844/clojurescript-1.10.844.jar!/cljs/util.cljc",1618720422000,"jar:file:/home/andreas/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/string.clj",1618716228000,"jar:file:/home/andreas/.m2/repository/org/clojure/clojurescript/1.10.844/clojurescript-1.10.844.jar!/cljs/source_map/base64.clj",1618720422000,"jar:file:/home/andreas/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/instant.clj",1618716228000,"jar:file:/home/andreas/.m2/repository/reagent/reagent/1.0.0/reagent-1.0.0.jar!/reagent/interop.clj",1618720871000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","contains re-frame supplied, standard interceptors","^7","re_frame/std_interceptors.cljc","^8",1,"^9",5,"^:",1,"^;",30],"^<",["^ ","^=","^>","^?","^@","^A","^B","^C","^D","^E","^F","^G","^H","^I","^J","^K","^L","^M","^N"],"^O",null,"^P",["^Q",[]],"^R","^S","^V",null,"^W",["^ ","^X","^Y","^Z","^Z","^[","^10","^11","^11","^12","^12","^13","^13","^14","^Z","^15","^15","^16","^11","^17","^17","^18","^12","^19","^19","^1:","^17","^Y","^Y","^10","^10","^1;","^1;"],"^1<",["^Q",["^1="]],"^1>",["^ ","^1?","^Z","^1@","^Z","^1A","^Z","^1B","^Z","^1C","^Z","^1D","^Z","^1E","^19","^1F","^1;"],"~:defs",["^ ","~$unwrap",["^ ","^R","^2R","^7","re_frame/std_interceptors.cljc","^8",40,"^9",1,"^:",40,"^;",12,"^5",["^ ","^7","re_frame/std_interceptors.cljc","^8",40,"^9",6,"^:",40,"^;",12],"~:tag","~$cljs.core/IMap"],"~$on-changes",["^ ","~:protocol-inline",null,"^5",["^ ","^7","re_frame/std_interceptors.cljc","^8",223,"^9",8,"^:",223,"^;",18,"~:arglists",["^1I",["~$quote",["^1I",[["~$f","~$out-path","~$&","~$in-paths"]]]]],"~:top-fn",["^ ","~:variadic?",true,"~:fixed-arity",2,"~:max-fixed-arity",2,"~:method-params",[["^1I",["~$f","^6<","^6="]]],"^6:",["^1I",[["~$f","^6<","~$&","^6="]]],"~:arglists-meta",["^1I",[null]]]],"^R","^2S","^7","re_frame/std_interceptors.cljc","^;",18,"^6>",["^ ","^6?",true,"^6@",2,"^6A",2,"^6B",[["^1I",["~$f","^6<","^6="]]],"^6:",["^1I",[["~$f","^6<","~$&","^6="]]],"^6C",["^1I",[null]]],"^6B",[["^1I",["~$f","^6<","^6="]]],"~:protocol-impl",null,"^6@",2,"^6C",["^1I",[null]],"^9",1,"^6?",true,"~:methods",[["^ ","^6@",2,"^6?",true,"^66","^67"]],"^8",223,"~:ret-tag","~$any","^:",223,"^6A",2,"~:fn-var",true,"^6:",["^1I",[["~$f","^6<","~$&","^6="]]]],"~$enrich",["^ ","^69",null,"^5",["^ ","^7","re_frame/std_interceptors.cljc","^8",195,"^9",7,"^:",195,"^;",13,"^6:",["^1I",["^6;",["^1I",[["~$f"]]]]]],"^R","^2E","^7","re_frame/std_interceptors.cljc","^;",13,"^6B",["^1I",[["~$f"]]],"^6D",null,"^6C",["^1I",[null,null]],"^9",1,"^6?",false,"^8",195,"^6F","^67","^:",195,"^6A",1,"^6H",true,"^6:",["^1I",["^6;",["^1I",[["~$f"]]]]]],"~$path",["^ ","^69",null,"^5",["^ ","^7","re_frame/std_interceptors.cljc","^8",166,"^9",7,"^:",166,"^;",11,"^6:",["^1I",["^6;",["^1I",[["~$&","~$args"]]]]],"^6>",["^ ","^6?",true,"^6@",0,"^6A",0,"^6B",[["^1I",["^6K"]]],"^6:",["^1I",[["~$&","^6K"]]],"^6C",["^1I",[null]]]],"^R","^2Q","^7","re_frame/std_interceptors.cljc","^;",11,"^6>",["^ ","^6?",true,"^6@",0,"^6A",0,"^6B",[["^1I",["^6K"]]],"^6:",["^1I",[["~$&","^6K"]]],"^6C",["^1I",[null]]],"^6B",[["^1I",["^6K"]]],"^6D",null,"^6@",0,"^6C",["^1I",[null]],"^9",1,"^6?",true,"^6E",[["^ ","^6@",0,"^6?",true,"^66","^67"]],"^8",166,"^6F","^6G","^:",166,"^6A",0,"^6H",true,"^6:",["^1I",[["~$&","^6K"]]]],"~$ctx-handler->interceptor",["^ ","^69",null,"^5",["^ ","^7","re_frame/std_interceptors.cljc","^8",140,"^9",7,"^:",140,"^;",31,"^6:",["^1I",["^6;",["^1I",[["~$handler-fn"]]]]],"^6","Returns an interceptor which wraps the kind of event handler given to `reg-event-ctx`.\n  These advanced handlers take one argument: `context` and they return a modified `context`.\n  Example:\n\n      (fn [context]\n         (enqueue context [more interceptors]))"],"^R","^2F","^7","re_frame/std_interceptors.cljc","^;",31,"^6B",["^1I",[["^6M"]]],"^6D",null,"^6C",["^1I",[null,null]],"^9",1,"^6?",false,"^8",140,"^6F","^67","^:",140,"^6A",1,"^6H",true,"^6:",["^1I",["^6;",["^1I",[["^6M"]]]]],"^6","Returns an interceptor which wraps the kind of event handler given to `reg-event-ctx`.\n  These advanced handlers take one argument: `context` and they return a modified `context`.\n  Example:\n\n      (fn [context]\n         (enqueue context [more interceptors]))"],"~$debug",["^ ","^R","^24","^7","re_frame/std_interceptors.cljc","^8",15,"^9",1,"^:",15,"^;",11,"^5",["^ ","^7","re_frame/std_interceptors.cljc","^8",15,"^9",6,"^:",15,"^;",11],"^66","^67"],"~$trim-v",["^ ","^R","^2;","^7","re_frame/std_interceptors.cljc","^8",57,"^9",1,"^:",57,"^;",12,"^5",["^ ","^7","re_frame/std_interceptors.cljc","^8",57,"^9",6,"^:",57,"^;",12],"^66","^67"],"~$after",["^ ","^69",null,"^5",["^ ","^7","re_frame/std_interceptors.cljc","^8",210,"^9",7,"^:",210,"^;",12,"^6:",["^1I",["^6;",["^1I",[["~$f"]]]]]],"^R","^2K","^7","re_frame/std_interceptors.cljc","^;",12,"^6B",["^1I",[["~$f"]]],"^6D",null,"^6C",["^1I",[null,null]],"^9",1,"^6?",false,"^8",210,"^6F","^67","^:",210,"^6A",1,"^6H",true,"^6:",["^1I",["^6;",["^1I",[["~$f"]]]]]],"~$fx-handler->interceptor",["^ ","^69",null,"^5",["^ ","^7","re_frame/std_interceptors.cljc","^8",109,"^9",7,"^:",109,"^;",30,"^6:",["^1I",["^6;",["^1I",[["^6M"]]]]],"^6","Returns an interceptor which wraps the kind of event handler given to `reg-event-fx`.\n\n  These handlers take two arguments;  `coeffects` and `event`, and they return `effects`.\n\n      (fn [coeffects event]\n         {:db ...\n          :dispatch ...})\n\n   Wrap handler in an interceptor so it can be added to (the RHS) of a chain:\n     1. extracts `:coeffects`\n     2. call handler-fn giving coeffects\n     3. stores the result back into the `:effects`"],"^R","^2H","^7","re_frame/std_interceptors.cljc","^;",30,"^6B",["^1I",[["^6M"]]],"^6D",null,"^6C",["^1I",[null,null]],"^9",1,"^6?",false,"^8",109,"^6F","^67","^:",109,"^6A",1,"^6H",true,"^6:",["^1I",["^6;",["^1I",[["^6M"]]]]],"^6","Returns an interceptor which wraps the kind of event handler given to `reg-event-fx`.\n\n  These handlers take two arguments;  `coeffects` and `event`, and they return `effects`.\n\n      (fn [coeffects event]\n         {:db ...\n          :dispatch ...})\n\n   Wrap handler in an interceptor so it can be added to (the RHS) of a chain:\n     1. extracts `:coeffects`\n     2. call handler-fn giving coeffects\n     3. stores the result back into the `:effects`"],"~$db-handler->interceptor",["^ ","^69",null,"^5",["^ ","^7","re_frame/std_interceptors.cljc","^8",77,"^9",7,"^:",77,"^;",30,"^6:",["^1I",["^6;",["^1I",[["^6M"]]]]],"^6","Returns an interceptor which wraps the kind of event handler given to `reg-event-db`.\n\n  These handlers take two arguments;  `db` and `event`, and they return `db`.\n\n      (fn [db event]\n         ....)\n\n  So, the interceptor wraps the given handler:\n     1. extracts two `:coeffects` keys: db and event\n     2. calls handler-fn\n     3. stores the db result back into context's `:effects`"],"^R","^2=","^7","re_frame/std_interceptors.cljc","^;",30,"^6B",["^1I",[["^6M"]]],"^6D",null,"^6C",["^1I",[null,null]],"^9",1,"^6?",false,"^8",77,"^6F","^67","^:",77,"^6A",1,"^6H",true,"^6:",["^1I",["^6;",["^1I",[["^6M"]]]]],"^6","Returns an interceptor which wraps the kind of event handler given to `reg-event-db`.\n\n  These handlers take two arguments;  `db` and `event`, and they return `db`.\n\n      (fn [db event]\n         ....)\n\n  So, the interceptor wraps the given handler:\n     1. extracts two `:coeffects` keys: db and event\n     2. calls handler-fn\n     3. stores the db result back into context's `:effects`"],"~$inject-global-interceptors",["^ ","^5",["^ ","^7","re_frame/std_interceptors.cljc","^8",247,"^9",6,"^:",247,"^;",32],"^R","^2:","^7","re_frame/std_interceptors.cljc","^;",32,"^9",1,"^8",247,"^:",247,"^66","^67","^6","An interceptor which adds registered global interceptors to the context's queue.\n\n   NOTE: :queue is a Clojure.lang.PersistentQueue and not a vector."]],"^1G",["^ ","^11","^11","^16","^11","^13","^13"],"~:cljs.analyzer/constants",["^ ","^1<",["^Q",["~:path","~:tags","~:original-event","~:group","~:db","~:fx-handler","~:re-frame.std-interceptors/not-found","~:queue","~:warn","~:operation","~:start","~:duration","~:debug","~:trim-v","~:event/handler","~:db-handler","~:event","~:after","~:id","~:effects","~:inject-global-interceptors","~:error","~:coeffects","~:re-frame-path/db-store","~:end","~:unwrap","~:on-changes","~:groupEnd","~:ctx-handler","~:enrich","~:before","~:op-type","~:log"]],"~:order",["^7;","^75","^7G","^7I","^79","^7:","^6Y","^6[","^6X","^7D","^7B","^71","^6W","^76","^78","^7H","^72","^77","^73","^74","^7A","^6V","^7<","^7?","^6Z","^7E","^7@","^7>","^6U","^7F","^7C","^7=","^70"]],"^1N",["^ ","^1=",["^Q",[]]],"^1O",["^ "],"^1P",["^15","^13","^Z","^19","^12","^1;","^10","^Y","^17","^11"]],"^U","^S","~:ns-specs",["^ "],"~:ns-spec-vars",["^Q",[]],"~:compiler-options",["^2V",[["^7M","~:static-fns"],true,["^7M","~:shadow-tweaks"],null,["^7M","~:source-map-inline"],null,["^7M","~:elide-asserts"],false,["^7M","~:optimize-constants"],null,["^7M","^1U"],null,["^7M","~:external-config"],null,["^7M","~:tooling-config"],null,["^7M","~:emit-constants"],null,["^7M","~:load-tests"],null,["^7M","~:form-size-threshold"],null,["^7M","~:data-readers"],null,["^7M","~:infer-externs"],"~:auto",["^7M","^1W"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^7M","~:fn-invoke-direct"],null,["^7M","~:source-map"],"/dev/null"]]]