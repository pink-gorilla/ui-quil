["^ ","~:output",["^ ","~:js","goog.provide('quil.util');\n/**\n * Function that does nothing.\n */\nquil.util.no_fn = (function quil$util$no_fn(){\nreturn null;\n});\n/**\n * Internal state map used to initiate all sketches.\n */\nquil.util.initial_internal_state = new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"frame-rate\",\"frame-rate\",-994918942),(60),new cljs.core.Keyword(null,\"looping?\",\"looping?\",78344245),true], null);\n/**\n * Returns the val associated with `key` in `mappings` or `key` directly if it\n *   is one of the vals in `mappings`. Otherwise throws an exception.\n */\nquil.util.resolve_constant_key = (function quil$util$resolve_constant_key(key,mappings){\nif(cljs.core.truth_(cljs.core.get.cljs$core$IFn$_invoke$arity$2(mappings,key))){\nreturn cljs.core.get.cljs$core$IFn$_invoke$arity$2(mappings,key);\n} else {\nif(cljs.core.truth_(cljs.core.some(cljs.core.PersistentHashSet.createAsIfByAssoc([key]),cljs.core.vals(mappings)))){\nreturn key;\n} else {\nthrow (new Error([\"Expecting a keyword, got: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(key),\". Expected one of: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.vec(cljs.core.sort.cljs$core$IFn$_invoke$arity$1(cljs.core.keys(mappings))))].join('')));\n\n}\n}\n});\n/**\n * Returns the length of the longest key of map `m`. Assumes `m`'s keys are strings\n * and returns 0 if map is empty:\n * \n * Examples:\n * ```\n * (length-of-longest-key {\"foo\" 1 \"barr\" 2 \"bazzz\" 3}) ;=> 5\n * (length-of-longest-key {}) ;=> 0\n * ```\n */\nquil.util.length_of_longest_key = (function quil$util$length_of_longest_key(m){\nvar or__4160__auto__ = cljs.core.last(cljs.core.sort.cljs$core$IFn$_invoke$arity$1(cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (p1__74530_SHARP_){\nreturn p1__74530_SHARP_.length();\n}),cljs.core.keys(m))));\nif(cljs.core.truth_(or__4160__auto__)){\nreturn or__4160__auto__;\n} else {\nreturn (0);\n}\n});\n/**\n * Generates a padding string with `s` concatenated with `len` times `pad`.\n * May be called without starting string `s` in which case it defaults to the\n * empty string and also without `pad` in which case it defaults to a single\n * space.\n * \n * Examples:\n * ```\n * (gen-padding \"asdf\" 5 \"b\") ;=> \"asdfbbbbb\"\n * (gen-padding 3 \"b\")          ;=> \"bbb\"\n * (gen-padding 3)                ;=> \"   \"\n * ```\n * \n */\nquil.util.gen_padding = (function quil$util$gen_padding(var_args){\nvar G__74588 = arguments.length;\nswitch (G__74588) {\ncase 1:\nreturn quil.util.gen_padding.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn quil.util.gen_padding.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 3:\nreturn quil.util.gen_padding.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(quil.util.gen_padding.cljs$core$IFn$_invoke$arity$1 = (function (len){\nreturn quil.util.gen_padding.cljs$core$IFn$_invoke$arity$3(\"\",len,\" \");\n}));\n\n(quil.util.gen_padding.cljs$core$IFn$_invoke$arity$2 = (function (len,pad){\nreturn quil.util.gen_padding.cljs$core$IFn$_invoke$arity$3(\"\",len,pad);\n}));\n\n(quil.util.gen_padding.cljs$core$IFn$_invoke$arity$3 = (function (s,len,pad){\nif((len > (0))){\nreturn quil.util.gen_padding.cljs$core$IFn$_invoke$arity$3([cljs.core.str.cljs$core$IFn$_invoke$arity$1(s),cljs.core.str.cljs$core$IFn$_invoke$arity$1(pad)].join(''),(len - (1)),pad);\n} else {\nreturn s;\n}\n}));\n\n(quil.util.gen_padding.cljs$lang$maxFixedArity = 3);\n\nquil.util.print_definition_list = (function quil$util$print_definition_list(definitions){\nvar longest_key = quil.util.length_of_longest_key(definitions);\nreturn cljs.core.dorun.cljs$core$IFn$_invoke$arity$1(cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (p__74625){\nvar vec__74626 = p__74625;\nvar k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__74626,(0),null);\nvar v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__74626,(1),null);\nvar len = k.length();\nvar diff = (longest_key - len);\nvar pad = quil.util.gen_padding.cljs$core$IFn$_invoke$arity$1(diff);\nreturn cljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([k,pad,\"- \",v], 0));\n}),definitions));\n});\nquil.util.clj_compilation_QMARK_ = (function quil$util$clj_compilation_QMARK_(){\nreturn false;\n});\nquil.util.prepare_quil_name = (function quil$util$prepare_quil_name(const_keyword){\nreturn clojure.string.replace(clojure.string.upper_case(cljs.core.name(const_keyword)),/-/,\"_\");\n});\nquil.util.prepare_quil_clj_constants = (function quil$util$prepare_quil_clj_constants(constants){\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentArrayMap.EMPTY,cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (p1__74636_SHARP_){\nreturn (new cljs.core.PersistentVector(null,2,(5),cljs.core.PersistentVector.EMPTY_NODE,[p1__74636_SHARP_,cljs.core.symbol.cljs$core$IFn$_invoke$arity$1([\"PConstants/\",quil.util.prepare_quil_name(p1__74636_SHARP_)].join(''))],null));\n}),constants));\n});\nquil.util.prepare_quil_cljs_constants = (function quil$util$prepare_quil_cljs_constants(constants){\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentArrayMap.EMPTY,cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (p1__74644_SHARP_){\nreturn (new cljs.core.PersistentVector(null,2,(5),cljs.core.PersistentVector.EMPTY_NODE,[p1__74644_SHARP_,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,new cljs.core.Symbol(\"cljs.core\",\"aget\",\"cljs.core/aget\",6345791,null),null,(1),null)),(new cljs.core.List(null,new cljs.core.Symbol(\"js\",\"p5.prototype\",\"js/p5.prototype\",-1153964427,null),null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(new cljs.core.List(null,quil.util.prepare_quil_name(p1__74644_SHARP_),null,(1),null))], 0))))],null));\n}),constants));\n});\nquil.util.make_quil_constant_map = (function quil$util$make_quil_constant_map(target,const_map_name,const_map){\nreturn cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,new cljs.core.Symbol(null,\"def\",\"def\",597100991,null),null,(1),null)),(new cljs.core.List(null,const_map_name,null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(new cljs.core.List(null,((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(target,new cljs.core.Keyword(null,\"clj\",\"clj\",-660495428)))?quil.util.prepare_quil_clj_constants(const_map):quil.util.prepare_quil_cljs_constants(const_map)),null,(1),null))], 0))));\n});\n/**\n * In clojure it does `unchecked-int` and does nothing in cljs.\n *   Needed to handle colors in hex form in clojure.\n */\nquil.util.clj_unchecked_int = (function quil$util$clj_unchecked_int(v){\nreturn v;\n});\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","quil/util.cljc","~:line",2,"~:column",2,"~:end-line",2,"~:end-column",11,"~:doc","Utility fns"],"~:ns-aliases",["^ ","~$clojure.spec.alpha","~$cljs.spec.alpha","~$cljs.loader","~$shadow.loader","~$highlight.js","~$module$node_modules$highlight_DOT_js$lib$index","~$react","~$module$node_modules$react$index","~$clojure.tools.reader.reader-types","~$cljs.tools.reader.reader-types","~$clojure.pprint","~$cljs.pprint","~$react-dom","~$module$node_modules$react_dom$index","~$clojure.repl","~$cljs.repl","~$webly.user.tenx.events","~$webly.user.tenx.events-on"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$quil.util","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$clojure.string","^X","~$cstr","^X","~$cljs.core","^Z","~$goog","^["],"~:seen",["^Q",["~:require"]],"~:uses",null,"~:require-macros",["^ ","^Z","^Z"],"~:form",["~#list",["~$ns","^S",["^15",["^11",["^X","~:as","^Y"]]]]],"~:flags",["^ ","^11",["^Q",[]]],"~:js-deps",["^ "],"~:deps",["^[","^Z","^X"]],"^U","^S","~:resource-id",["~:shadow.build.classpath/resource","quil/util.cljc"],"~:compiled-at",1621213688407,"~:resource-name","quil/util.cljc","~:warnings",[],"~:source","(ns ^{:doc \"Utility fns\"}\n quil.util\n  (:require [clojure.string :as cstr]))\n\n(defn no-fn\n  \"Function that does nothing.\"\n  [])\n\n(def initial-internal-state\n  \"Internal state map used to initiate all sketches.\"\n  {:frame-rate 60\n   :looping? true})\n\n#?(:clj\n   (defn callable? [value]\n     (or (fn? value)\n         (var? value))))\n\n#?(:clj\n   (defn absolute-path [path]\n     (-> (str path)\n         (java.io.File.)\n         (.getAbsolutePath))))\n\n#?(:clj\n   (defn int-like?\n     [val]\n     (let [t (type val)]\n       (or (= java.lang.Long t)\n           (= java.lang.Integer t)))))\n\n(defn resolve-constant-key\n  \"Returns the val associated with `key` in `mappings` or `key` directly if it\n  is one of the vals in `mappings`. Otherwise throws an exception.\"\n  [key mappings]\n  (cond\n    (get mappings key)            (get mappings key)\n    (some #{key} (vals mappings)) key\n\n    :else                         (throw (#?(:clj Exception.\n                                             :cljs js/Error.)\n                                          (str \"Expecting a keyword, got: \" key \". Expected one of: \" (vec (sort (keys mappings))))))))\n\n(defn- length-of-longest-key\n  \"Returns the length of the longest key of map `m`. Assumes `m`'s keys are strings\n   and returns 0 if map is empty:\n\n   Examples:\n   ```\n   (length-of-longest-key {\\\"foo\\\" 1 \\\"barr\\\" 2 \\\"bazzz\\\" 3}) ;=> 5\n   (length-of-longest-key {}) ;=> 0\n   ```\"\n  [m]\n  (or (last (sort (map #(.length %) (keys m))))\n      0))\n\n(defn- gen-padding\n  \"Generates a padding string with `s` concatenated with `len` times `pad`.\n   May be called without starting string `s` in which case it defaults to the\n   empty string and also without `pad` in which case it defaults to a single\n   space.\n\n   Examples:\n   ```\n   (gen-padding \\\"asdf\\\" 5 \\\"b\\\") ;=> \\\"asdfbbbbb\\\"\n   (gen-padding 3 \\\"b\\\")          ;=> \\\"bbb\\\"\n   (gen-padding 3)                ;=> \\\"   \\\"\n   ```\n   \"\n  ([len] (gen-padding \"\" len \" \"))\n  ([len pad] (gen-padding \"\" len pad))\n  ([s len pad]\n   (if (> len 0)\n     (gen-padding (str s pad) (dec len) pad)\n     s)))\n\n(defn print-definition-list\n  [definitions]\n  (let [longest-key (length-of-longest-key definitions)]\n    (dorun\n     (map (fn [[k v]]\n            (let [len (.length k)\n                  diff (- longest-key len)\n                  pad (gen-padding diff)]\n              (println k pad \"- \" v)))\n          definitions))))\n\n(defn clj-compilation? []\n  #?(:clj\n     (not\n      (boolean\n       (when-let [n (find-ns 'cljs.analyzer)]\n         (when-let [v (ns-resolve n '*cljs-file*)]\n           @v))))\n     :cljs false))\n\n(defn prepare-quil-name [const-keyword]\n  (cstr/replace\n   (cstr/upper-case (name const-keyword))\n   #\"-\" \"_\"))\n\n(defn prepare-quil-clj-constants [constants]\n  (into {}\n        (map\n         #(vector % (symbol (str \"PConstants/\" (prepare-quil-name %))))\n         constants)))\n\n(defn prepare-quil-cljs-constants [constants]\n  (into {}\n        (map\n         #(vector % `(aget js/p5.prototype ~(prepare-quil-name %)))\n         constants)))\n\n(defn make-quil-constant-map [target const-map-name const-map]\n  `(def ^{:private true}\n     ~const-map-name\n     ~(if (= target :clj)\n        (prepare-quil-clj-constants const-map)\n        (prepare-quil-cljs-constants const-map))))\n\n(defmacro generate-quil-constants [target & opts]\n  `(do\n     ~@(map\n        #(make-quil-constant-map target (first %) (second %))\n        (partition 2 opts))))\n\n(defn clj-unchecked-int\n  \"In clojure it does `unchecked-int` and does nothing in cljs.\n  Needed to handle colors in hex form in clojure.\"\n  [v]\n  #?(:clj (unchecked-int v) :cljs v))\n","~:reader-features",["^Q",["~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings","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","names",["quil.util/no-fn","quil.util/initial-internal-state","quil.util/resolve-constant-key","key","mappings","cljs.core.get","cljs.core/some","cljs.core/vals","js/Error","cljs.core/vec","cljs.core.sort","cljs.core/keys","quil.util/length-of-longest-key","m","or__4160__auto__","cljs.core/last","p1__74530#","cljs.core.map","var_args","G__74588","quil.util/gen-padding","len","quil.util.gen_padding","pad","s","quil.util/print-definition-list","definitions","longest-key","cljs.core.dorun","p__74625","vec__74626","cljs.core.nth","k","v","diff","cljs.core.println","quil.util/clj-compilation?","quil.util/prepare-quil-name","const-keyword","clojure.string/replace","clojure.string/upper-case","cljs.core/name","quil.util/prepare-quil-clj-constants","constants","cljs.core.into","p1__74636#","cljs.core/PersistentVector","cljs.core.symbol","quil.util/prepare-quil-cljs-constants","p1__74644#","cljs.core.sequence","cljs.core/seq","cljs.core.concat","cljs.core/List","quil.util/make-quil-constant-map","target","const-map-name","const-map","cljs.core._EQ_","quil.util/clj-unchecked-int"]],"~:used-vars",["^Q",["~$quil.util/gen-padding","~$quil.util/prepare-quil-name","~$clojure.string/upper-case","~$cljs.core/dorun","~$cljs.core/=","~$cljs.core/keys","~$cljs.core/seq","~$quil.util/clj-compilation?","~$cljs.core/concat","~$quil.util/prepare-quil-clj-constants","~$cljs.core/into","~$cljs.core/sort","~$cljs.core/map","~$quil.util/no-fn","~$cljs.core/PersistentVector","~$quil.util/print-definition-list","~$cljs.core/List","~$cljs.core/vals","~$cljs.core/get","~$cljs.core/symbol","~$quil.util/resolve-constant-key","~$cljs.core/println","~$clojure.string/replace","~$cljs.core/vec","~$quil.util/prepare-quil-cljs-constants","~$cljs.core/sequence","~$quil.util/clj-unchecked-int","~$cljs.core/name","~$js/Error","~$quil.util/length-of-longest-key","~$quil.util/initial-internal-state","~$cljs.core/some","~$quil.util/make-quil-constant-map"]]],"~:cache-keys",["~#cmap",[["^1<","goog/dom/tagname.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^Q",[]],"~:deps-syms",["^[","~$goog.dom.HtmlElement"]]],["^1<","goog/math/math.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2?",["^ ","^2@",null,"^2A",["^Q",[]],"^2B",["^[","~$goog.array","~$goog.asserts"]]],["^1<","goog/html/trustedtypes.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2?",["^ ","^2@",null,"^2A",["^Q",[]],"^2B",["^["]]],["^1<","goog/labs/useragent/browser.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2?",["^ ","^2@",null,"^2A",["^Q",[]],"^2B",["^[","^2D","~$goog.labs.userAgent.util","~$goog.object","~$goog.string.internal"]]],["^1<","goog/html/safeurl.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2?",["^ ","^2@",null,"^2A",["^Q",[]],"^2B",["^[","^2E","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.i18n.bidi.Dir","~$goog.i18n.bidi.DirectionalString","~$goog.string.Const","~$goog.string.TypedString","^2H"]]],["^1<","goog/array/array.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2?",["^ ","^2@",null,"^2A",["^Q",[]],"^2B",["^[","^2E"]]],["^1<","goog/debug/error.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2?",["^ ","^2@",null,"^2A",["^Q",[]],"^2B",["^["]]],["^1<","goog/dom/nodetype.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2?",["^ ","^2@",null,"^2A",["^Q",[]],"^2B",["^["]]],["^1<","goog/string/typedstring.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2?",["^ ","^2@",null,"^2A",["^Q",[]],"^2B",["^["]]],["^1<","goog/object/object.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2?",["^ ","^2@",null,"^2A",["^Q",[]],"^2B",["^["]]],["^1<","goog/dom/asserts.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2?",["^ ","^2@",null,"^2A",["^Q",[]],"^2B",["^[","^2E"]]],"~:SHADOW-TIMESTAMP",[1618720883000,1618720883000,1618720422000],["^1<","goog/math/long.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2?",["^ ","^2@",null,"^2A",["^Q",[]],"^2B",["^[","^2E","~$goog.reflect"]]],["^1<","goog/html/trustedresourceurl.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2?",["^ ","^2@",null,"^2A",["^Q",[]],"^2B",["^[","^2E","~$goog.fs.blob","^2I","~$goog.html.SafeScript","~$goog.html.trustedtypes","^2K","^2L","^2M","^2N"]]],["^1<","goog/string/internal.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2?",["^ ","^2@",null,"^2A",["^Q",[]],"^2B",["^["]]],["^1<","goog/functions/functions.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2?",["^ ","^2@",null,"^2A",["^Q",[]],"^2B",["^["]]],["^1<","goog/html/safestyle.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2?",["^ ","^2@",null,"^2A",["^Q",[]],"^2B",["^[","^2D","^2E","~$goog.html.SafeUrl","^2M","^2N","^2H"]]],["^1<","goog/dom/safe.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2?",["^ ","^2@",null,"^2A",["^Q",[]],"^2B",["^[","^2E","~$goog.dom.asserts","~$goog.functions","~$goog.html.SafeHtml","^2R","~$goog.html.SafeStyle","^2T","^2J","~$goog.html.uncheckedconversions","^2M","^2H"]]],["^1<","goog/structs/map.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2?",["^ ","^2@",null,"^2A",["^Q",[]],"^2B",["^[","~$goog.iter.Iterator","~$goog.iter.StopIteration"]]],["^1<","goog/html/safehtml.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2?",["^ ","^2@",null,"^2A",["^Q",[]],"^2B",["^[","^2D","^2E","~$goog.dom.TagName","~$goog.dom.tags","^2R","^2X","~$goog.html.SafeStyleSheet","^2T","^2J","^2S","^2K","^2L","~$goog.labs.userAgent.browser","^2G","^2M","^2N","^2H"]]],["^1<","goog/dom/tags.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2?",["^ ","^2@",null,"^2A",["^Q",[]],"^2B",["^[","^2G"]]],["^1<","goog/fs/blob.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2?",["^ ","^2@",null,"^2A",["^Q",[]],"^2B",["^[","^2D"]]],["^1<","goog/asserts/asserts.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2?",["^ ","^2@",null,"^2A",["^Q",[]],"^2B",["^[","~$goog.debug.Error","~$goog.dom.NodeType"]]],["^1<","goog/uri/uri.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2?",["^ ","^2@",null,"^2A",["^Q",[]],"^2B",["^[","^2D","^2E","~$goog.string","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^1<","goog/i18n/bidi.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2?",["^ ","^2@",null,"^2A",["^Q",[]],"^2B",["^["]]],["^1<","goog/fs/url.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2?",["^ ","^2@",null,"^2A",["^Q",[]],"^2B",["^["]]],["^1<","goog/base.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2?",["^ ","^2@",null,"^2A",["^Q",[]],"^2B",[]]],["^1<","goog/structs/structs.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2?",["^ ","^2@",null,"^2A",["^Q",[]],"^2B",["^[","^2D","^2G"]]],["^1<","clojure/string.cljs"],["86bedf67c795c72bde3feb0415b41be8b95f2cbb","^2?",["^ ","^2@",null,"^2A",["^Q",[]],"^2B",["^[","^Z","^36","~$goog.string.StringBuffer"]]],["^1<","goog/string/string.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2?",["^ ","^2@",null,"^2A",["^Q",[]],"^2B",["^[","~$goog.dom.safe","^2Y","^2M","^2H"]]],["^1<","goog/reflect/reflect.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2?",["^ ","^2@",null,"^2A",["^Q",[]],"^2B",["^["]]],["^1<","goog/labs/useragent/util.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2?",["^ ","^2@",null,"^2A",["^Q",[]],"^2B",["^[","^2H"]]],["^1<","goog/string/stringbuffer.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2?",["^ ","^2@",null,"^2A",["^Q",[]],"^2B",["^["]]],["^1<","goog/iter/iter.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2?",["^ ","^2@",null,"^2A",["^Q",[]],"^2B",["^[","^2D","^2E","^2V","~$goog.math"]]],["^1<","goog/html/uncheckedconversions.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2?",["^ ","^2@",null,"^2A",["^Q",[]],"^2B",["^[","^2E","^2W","^2R","^2X","^32","^2T","^2J","^2M","^2H","^2K"]]],["^1<","goog/dom/htmlelement.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2?",["^ ","^2@",null,"^2A",["^Q",[]],"^2B",["^["]]],["^1<","cljs/core.cljs"],["86bedf67c795c72bde3feb0415b41be8b95f2cbb","^2?",["^ ","^2@",null,"^2A",["^Q",[]],"^2B",["^[","~$goog.math.Long","~$goog.math.Integer","^36","^2G","^2D","~$goog.Uri","^3<"]]],["^1<","goog/html/safescript.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2?",["^ ","^2@",null,"^2A",["^Q",[]],"^2B",["^[","^2M","^2N","^2S","^2E"]]],["^1<","goog/html/safestylesheet.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2?",["^ ","^2@",null,"^2A",["^Q",[]],"^2B",["^[","^2M","^2X","^2N","^2D","^2G","^2E","^2H"]]],["^1<","goog/math/integer.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2?",["^ ","^2@",null,"^2A",["^Q",[]],"^2B",["^[","^2P"]]],["^1<","goog/uri/utils.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2?",["^ ","^2@",null,"^2A",["^Q",[]],"^2B",["^[","^2E","^36"]]],["^1<","goog/string/const.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2?",["^ ","^2@",null,"^2A",["^Q",[]],"^2B",["^[","^2E","^2N"]]],["^1<","quil/util.cljc"],["0380a383758dc81ae78fb9431bcc62872da24244","^2?",["^ ","^2@",null,"^2A",["^Q",[]],"^2B",["^[","^Z","^X"]]]]],"~:clj-info",["^ ","jar:file:/home/andreas/.m2/repository/org/clojure/clojurescript/1.10.844/clojurescript-1.10.844.jar!/cljs/env.cljc",1618720422000,"jar:file:/home/andreas/.m2/repository/org/clojure/clojurescript/1.10.844/clojurescript-1.10.844.jar!/cljs/externs.clj",1618720422000,"jar:file:/home/andreas/.m2/repository/org/clojure/clojurescript/1.10.844/clojurescript-1.10.844.jar!/cljs/tagged_literals.cljc",1618720422000,"jar:file:/home/andreas/.m2/repository/org/clojure/data.json/2.1.0/data.json-2.1.0.jar!/clojure/data/json.clj",1618502954000,"jar:file:/home/andreas/.m2/repository/org/clojure/clojurescript/1.10.844/clojurescript-1.10.844.jar!/cljs/compiler.cljc",1618720422000,"jar:file:/home/andreas/.m2/repository/org/clojure/clojurescript/1.10.844/clojurescript-1.10.844.jar!/cljs/instant.clj",1618720422000,"jar:file:/home/andreas/.m2/repository/org/clojure/clojurescript/1.10.844/clojurescript-1.10.844.jar!/cljs/source_map/base64_vlq.clj",1618720422000,"jar:file:/home/andreas/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/edn.clj",1618716228000,"jar:file:/home/andreas/.m2/repository/org/clojure/tools.reader/1.3.5/tools.reader-1.3.5.jar!/clojure/tools/reader/default_data_readers.clj",1618501370000,"jar:file:/home/andreas/.m2/repository/org/clojure/clojurescript/1.10.844/clojurescript-1.10.844.jar!/cljs/analyzer.cljc",1618720422000,"jar:file:/home/andreas/.m2/repository/org/clojure/clojurescript/1.10.844/clojurescript-1.10.844.jar!/cljs/source_map.clj",1618720422000,"jar:file:/home/andreas/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/core.clj",1618716228000,"jar:file:/home/andreas/.m2/repository/org/clojure/tools.reader/1.3.5/tools.reader-1.3.5.jar!/clojure/tools/reader.clj",1618501370000,"jar:file:/home/andreas/.m2/repository/org/clojure/clojurescript/1.10.844/clojurescript-1.10.844.jar!/cljs/js_deps.cljc",1618720422000,"jar:file:/home/andreas/.m2/repository/org/clojure/clojurescript/1.10.844/clojurescript-1.10.844.jar!/cljs/core.cljc",1618720422000,"jar:file:/home/andreas/.m2/repository/org/clojure/tools.reader/1.3.5/tools.reader-1.3.5.jar!/clojure/tools/reader/impl/inspect.clj",1618501370000,"jar:file:/home/andreas/.m2/repository/org/clojure/tools.reader/1.3.5/tools.reader-1.3.5.jar!/clojure/tools/reader/reader_types.clj",1618501370000,"jar:file:/home/andreas/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/java/io.clj",1618716228000,"jar:file:/home/andreas/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/pprint.clj",1618716228000,"jar:file:/home/andreas/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/set.clj",1618716228000,"jar:file:/home/andreas/.m2/repository/org/clojure/clojurescript/1.10.844/clojurescript-1.10.844.jar!/cljs/analyzer/impl.cljc",1618720422000,"jar:file:/home/andreas/.m2/repository/org/clojure/tools.reader/1.3.5/tools.reader-1.3.5.jar!/clojure/tools/reader/impl/errors.clj",1618501370000,"jar:file:/home/andreas/.m2/repository/org/clojure/clojurescript/1.10.844/clojurescript-1.10.844.jar!/cljs/util.cljc",1618720422000,"jar:file:/home/andreas/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/string.clj",1618716228000,"jar:file:/home/andreas/.m2/repository/org/clojure/clojurescript/1.10.844/clojurescript-1.10.844.jar!/cljs/source_map/base64.clj",1618720422000,"jar:file:/home/andreas/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/instant.clj",1618716228000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","quil/util.cljc","^7",2,"^8",2,"^9",2,"^:",11,"^;","Utility fns"],"^<",["^ ","^=","^>","^?","^@","^A","^B","^C","^D","^E","^F","^G","^H","^I","^J","^K","^L","^M","^N"],"^O",null,"^P",["^Q",[]],"^R","^S","^V",null,"^W",["^ ","^X","^X","^Y","^X","^Z","^Z","^[","^["],"^10",["^Q",["^11"]],"~:shadow/js-access-global",["^Q",["Error","p5"]],"^12",null,"~:defs",["^ ","~$clj-compilation?",["^ ","~:protocol-inline",null,"^5",["^ ","^6","quil/util.cljc","^7",88,"^8",7,"^9",88,"^:",23,"~:arglists",["^15",["~$quote",["^15",[[]]]]]],"^R","^1O","^6","quil/util.cljc","^:",23,"~:method-params",["^15",[[]]],"~:protocol-impl",null,"~:arglists-meta",["^15",[null,null]],"^8",1,"~:variadic?",false,"^7",88,"~:ret-tag","~$boolean","^9",88,"~:max-fixed-arity",0,"~:fn-var",true,"^46",["^15",["^47",["^15",[[]]]]]],"~$make-quil-constant-map",["^ ","^45",null,"^5",["^ ","^6","quil/util.cljc","^7",114,"^8",7,"^9",114,"^:",29,"^46",["^15",["^47",["^15",[["~$target","~$const-map-name","~$const-map"]]]]]],"^R","^2<","^6","quil/util.cljc","^:",29,"^48",["^15",[["^4A","^4B","^4C"]]],"^49",null,"^4:",["^15",[null,null]],"^8",1,"^4;",false,"^7",114,"^4<",["^Q",["~$seq","~$cljs.core/IList"]],"^9",114,"^4>",3,"^4?",true,"^46",["^15",["^47",["^15",[["^4A","^4B","^4C"]]]]]],"~$clj-unchecked-int",["^ ","^45",null,"^5",["^ ","^6","quil/util.cljc","^7",127,"^8",7,"^9",127,"^:",24,"^46",["^15",["^47",["^15",[["~$v"]]]]],"^;","In clojure it does `unchecked-int` and does nothing in cljs.\n  Needed to handle colors in hex form in clojure."],"^R","^26","^6","quil/util.cljc","^:",24,"^48",["^15",[["~$v"]]],"^49",null,"^4:",["^15",[null,null]],"^8",1,"^4;",false,"^7",127,"^9",127,"^4>",1,"^4?",true,"^46",["^15",["^47",["^15",[["~$v"]]]]],"^;","In clojure it does `unchecked-int` and does nothing in cljs.\n  Needed to handle colors in hex form in clojure."],"~$initial-internal-state",["^ ","^5",["^ ","^6","quil/util.cljc","^7",9,"^8",6,"^9",9,"^:",28],"^R","^2:","^6","quil/util.cljc","^:",28,"^8",1,"^7",9,"^9",9,"~:tag","~$cljs.core/IMap","^;","Internal state map used to initiate all sketches."],"~$print-definition-list",["^ ","^45",null,"^5",["^ ","^6","quil/util.cljc","^7",77,"^8",7,"^9",77,"^:",28,"^46",["^15",["^47",["^15",[["~$definitions"]]]]]],"^R","^1W","^6","quil/util.cljc","^:",28,"^48",["^15",[["^4K"]]],"^49",null,"^4:",["^15",[null,null]],"^8",1,"^4;",false,"^7",77,"^4<","~$clj-nil","^9",77,"^4>",1,"^4?",true,"^46",["^15",["^47",["^15",[["^4K"]]]]]],"~$resolve-constant-key",["^ ","^45",null,"^5",["^ ","^6","quil/util.cljc","^7",32,"^8",7,"^9",32,"^:",27,"^46",["^15",["^47",["^15",[["~$key","~$mappings"]]]]],"^;","Returns the val associated with `key` in `mappings` or `key` directly if it\n  is one of the vals in `mappings`. Otherwise throws an exception."],"^R","^20","^6","quil/util.cljc","^:",27,"^48",["^15",[["^4N","^4O"]]],"^49",null,"^4:",["^15",[null,null]],"^8",1,"^4;",false,"^7",32,"^4<",["^Q",[null,"~$any","^4L"]],"^9",32,"^4>",2,"^4?",true,"^46",["^15",["^47",["^15",[["^4N","^4O"]]]]],"^;","Returns the val associated with `key` in `mappings` or `key` directly if it\n  is one of the vals in `mappings`. Otherwise throws an exception."],"~$no-fn",["^ ","^45",null,"^5",["^ ","^6","quil/util.cljc","^7",5,"^8",7,"^9",5,"^:",12,"^46",["^15",["^47",["^15",[[]]]]],"^;","Function that does nothing."],"^R","^1U","^6","quil/util.cljc","^:",12,"^48",["^15",[[]]],"^49",null,"^4:",["^15",[null,null]],"^8",1,"^4;",false,"^7",5,"^4<","^4L","^9",5,"^4>",0,"^4?",true,"^46",["^15",["^47",["^15",[[]]]]],"^;","Function that does nothing."],"~$prepare-quil-clj-constants",["^ ","^45",null,"^5",["^ ","^6","quil/util.cljc","^7",102,"^8",7,"^9",102,"^:",33,"^46",["^15",["^47",["^15",[["~$constants"]]]]]],"^R","^1Q","^6","quil/util.cljc","^:",33,"^48",["^15",[["^4S"]]],"^49",null,"^4:",["^15",[null,null]],"^8",1,"^4;",false,"^7",102,"^4<",["^Q",[null,"~$clj","^4P"]],"^9",102,"^4>",1,"^4?",true,"^46",["^15",["^47",["^15",[["^4S"]]]]]],"~$prepare-quil-cljs-constants",["^ ","^45",null,"^5",["^ ","^6","quil/util.cljc","^7",108,"^8",7,"^9",108,"^:",34,"^46",["^15",["^47",["^15",[["^4S"]]]]]],"^R","^24","^6","quil/util.cljc","^:",34,"^48",["^15",[["^4S"]]],"^49",null,"^4:",["^15",[null,null]],"^8",1,"^4;",false,"^7",108,"^4<",["^Q",[null,"^4T","^4P"]],"^9",108,"^4>",1,"^4?",true,"^46",["^15",["^47",["^15",[["^4S"]]]]]],"~$length-of-longest-key",["^ ","^45",null,"^5",["^ ","^6","quil/util.cljc","^7",44,"^8",8,"^9",44,"^:",29,"~:private",true,"^46",["^15",["^47",["^15",[["~$m"]]]]],"^;","Returns the length of the longest key of map `m`. Assumes `m`'s keys are strings\n   and returns 0 if map is empty:\n\n   Examples:\n   ```\n   (length-of-longest-key {\"foo\" 1 \"barr\" 2 \"bazzz\" 3}) ;=> 5\n   (length-of-longest-key {}) ;=> 0\n   ```"],"^4W",true,"^R","^29","^6","quil/util.cljc","^:",29,"^48",["^15",[["~$m"]]],"^49",null,"^4:",["^15",[null,null]],"^8",1,"^4;",false,"^7",44,"^4<",["^Q",["^4P","~$number"]],"^9",44,"^4>",1,"^4?",true,"^46",["^15",["^47",["^15",[["~$m"]]]]],"^;","Returns the length of the longest key of map `m`. Assumes `m`'s keys are strings\n   and returns 0 if map is empty:\n\n   Examples:\n   ```\n   (length-of-longest-key {\"foo\" 1 \"barr\" 2 \"bazzz\" 3}) ;=> 5\n   (length-of-longest-key {}) ;=> 0\n   ```"],"~$gen-padding",["^ ","^45",null,"^5",["^ ","^4W",true,"^6","quil/util.cljc","^:",19,"~:top-fn",["^ ","^4;",false,"~:fixed-arity",3,"^4>",3,"^48",[["~$len"],["^50","~$pad"],["~$s","^50","^51"]],"^46",["^15",[["^50"],["^50","^51"],["~$s","^50","^51"]]],"^4:",["^15",[null,null,null]]],"^8",8,"^7",57,"^9",57,"^46",["^15",["^47",["^15",[["^50"],["^50","^51"],["~$s","^50","^51"]]]]],"^;","Generates a padding string with `s` concatenated with `len` times `pad`.\n   May be called without starting string `s` in which case it defaults to the\n   empty string and also without `pad` in which case it defaults to a single\n   space.\n\n   Examples:\n   ```\n   (gen-padding \"asdf\" 5 \"b\") ;=> \"asdfbbbbb\"\n   (gen-padding 3 \"b\")          ;=> \"bbb\"\n   (gen-padding 3)                ;=> \"   \"\n   ```\n   "],"^4W",true,"^R","^1H","^6","quil/util.cljc","^:",19,"^4Z",["^ ","^4;",false,"^4[",3,"^4>",3,"^48",[["^50"],["^50","^51"],["~$s","^50","^51"]],"^46",["^15",[["^50"],["^50","^51"],["~$s","^50","^51"]]],"^4:",["^15",[null,null,null]]],"^48",[["^50"],["^50","^51"],["~$s","^50","^51"]],"^49",null,"^4[",3,"^4:",["^15",[null,null,null]],"^8",1,"^4;",false,"~:methods",[["^ ","^4[",1,"^4;",false,"^4H","^4P"],["^ ","^4[",2,"^4;",false,"^4H","^4P"],["^ ","^4[",3,"^4;",false,"^4H",["^Q",[null,"^4P"]]]],"^7",57,"^9",57,"^4>",3,"^4?",true,"^46",["^15",[["^50"],["^50","^51"],["~$s","^50","^51"]]],"^;","Generates a padding string with `s` concatenated with `len` times `pad`.\n   May be called without starting string `s` in which case it defaults to the\n   empty string and also without `pad` in which case it defaults to a single\n   space.\n\n   Examples:\n   ```\n   (gen-padding \"asdf\" 5 \"b\") ;=> \"asdfbbbbb\"\n   (gen-padding 3 \"b\")          ;=> \"bbb\"\n   (gen-padding 3)                ;=> \"   \"\n   ```\n   "],"~$prepare-quil-name",["^ ","^45",null,"^5",["^ ","^6","quil/util.cljc","^7",97,"^8",7,"^9",97,"^:",24,"^46",["^15",["^47",["^15",[["~$const-keyword"]]]]]],"^R","^1I","^6","quil/util.cljc","^:",24,"^48",["^15",[["^54"]]],"^49",null,"^4:",["^15",[null,null]],"^8",1,"^4;",false,"^7",97,"^4<","~$string","^9",97,"^4>",1,"^4?",true,"^46",["^15",["^47",["^15",[["^54"]]]]]]],"^13",["^ ","^Z","^Z"],"~:cljs.analyzer/constants",["^ ","^10",["^Q",["~:frame-rate","~:else","~:looping?","~$js/p5.prototype","~:clj","~$cljs.core/aget","~$def"]],"~:order",["^57","^59","^58","^5<","^5:","^5=","^5;"]],"^18",["^ ","^11",["^Q",[]]],"^19",["^ "],"^1:",["^[","^Z","^X"]],"^U","^S","~:ns-specs",["^ "],"~:ns-spec-vars",["^Q",[]],"~:compiler-options",["^2>",[["^5A","~:static-fns"],true,["^5A","~:shadow-tweaks"],null,["^5A","~:source-map-inline"],null,["^5A","~:elide-asserts"],false,["^5A","~:optimize-constants"],null,["^5A","^1?"],null,["^5A","~:external-config"],null,["^5A","~:tooling-config"],null,["^5A","~:emit-constants"],null,["^5A","~:load-tests"],null,["^5A","~:form-size-threshold"],null,["^5A","~:data-readers"],null,["^5A","~:infer-externs"],"~:auto",["^5A","^1A"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^5A","~:fn-invoke-direct"],null,["^5A","~:source-map"],"/dev/null"]]]