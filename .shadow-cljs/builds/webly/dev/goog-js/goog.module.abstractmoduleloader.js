["^ ","~:resource-id",["~:shadow.build.classpath/resource","goog/module/abstractmoduleloader.js"],"~:js","goog.loadModule(function(exports) {\n  \"use strict\";\n  goog.module(\"goog.module.AbstractModuleLoader\");\n  goog.module.declareLegacyNamespace();\n  const ModuleInfo = goog.requireType(\"goog.module.ModuleInfo\");\n  class LoadOptions {\n    constructor() {\n      this.extraEdges;\n      this.forceReload;\n      this.onError;\n      this.onSuccess;\n      this.onTimeout;\n    }\n  }\n  class AbstractModuleLoader {\n    constructor() {\n      this.supportsExtraEdges;\n    }\n    loadModules(ids, moduleInfoMap, loadOptions) {\n    }\n    prefetchModule(id, moduleInfo) {\n    }\n  }\n  AbstractModuleLoader.ExtraEdgesMap;\n  exports = AbstractModuleLoader;\n  return exports;\n});\n","~:source","/**\n * @license\n * Copyright The Closure Library Authors.\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview An interface for module loading.\n */\n\ngoog.module('goog.module.AbstractModuleLoader');\ngoog.module.declareLegacyNamespace();\n\nconst ModuleInfo = goog.requireType('goog.module.ModuleInfo');\n\n/**\n * Optional parameters for the loadModules method.\n * @record\n */\nclass LoadOptions {\n  constructor() {\n    /**\n     * A map of extra runtime module dependencies.\n     * @type {!AbstractModuleLoader.ExtraEdgesMap|undefined}\n     */\n    this.extraEdges;\n\n    /**\n     * Whether to bypass cache while loading the module.\n     * @const {boolean|undefined}\n     */\n    this.forceReload;\n\n    /**\n     * The callback if module loading is an error.\n     * @const {(function(?number): void)|undefined}\n     */\n    this.onError;\n\n    /**\n     * The callback if module loading is a success.\n     * @const {(function(): void)|undefined}\n     */\n    this.onSuccess;\n\n    /**\n     * The callback if module loading times out.\n     * @const {(function(): void)|undefined}\n     */\n    this.onTimeout;\n  }\n}\n\n/**\n * An interface that loads JavaScript modules.\n * @interface\n */\nclass AbstractModuleLoader {\n  constructor() {\n    /**\n     * Whether or not the implementation supports extra edges.\n     * @type {boolean|undefined}\n     */\n    this.supportsExtraEdges;\n  }\n\n  /**\n   * Loads a list of JavaScript modules.\n   *\n   * @param {!Array<string>} ids The module ids in dependency order.\n   * @param {!Object<string, !ModuleInfo>} moduleInfoMap A mapping\n   *     from module id to ModuleInfo object.\n   * @param {!LoadOptions=} loadOptions\n   */\n  loadModules(ids, moduleInfoMap, loadOptions) {};\n\n\n  /**\n   * Pre-fetches a JavaScript module.\n   *\n   * @param {string} id The module id.\n   * @param {!ModuleInfo} moduleInfo The module info.\n   */\n  prefetchModule(id, moduleInfo) {};\n}\n\n/**\n * A map of extra runtime module dependencies.\n * Since the polyfills for the ES6 Map/Set classes would cause a performance\n * regression, we are using plain Javascript objects to mimic their\n * functionality. The outer object will map a moduleId to another object, the\n * keys of which are the moduleIds of the modules it depends on: that is, if\n * `map['a']['b']` is true then module 'a' depends on module 'b'.\n * @typedef {!Object<!Object<boolean>>}\n */\nAbstractModuleLoader.ExtraEdgesMap;\n\nexports = AbstractModuleLoader;\n","~:compiled-at",1621210407300,"~:source-map-json","{\n\"version\":3,\n\"file\":\"goog.module.abstractmoduleloader.js\",\n\"lineCount\":28,\n\"mappings\":\"AAUA,IAAA,CAAA,UAAA,CAAA,QAAA,CAAA,OAAA,CAAA;AAAA,cAAA;AAAAA,MAAKC,CAAAA,MAAL,CAAY,kCAAZ,CAAA;AACAD,MAAKC,CAAAA,MAAOC,CAAAA,sBAAZ,EAAA;AAEA,QAAMC,aAAaH,IAAKI,CAAAA,WAAL,CAAiB,wBAAjB,CAAnB;AAMA,OAAMC,YAAN;AACEC,eAAW,EAAG;AAKZ,UAAKC,CAAAA,UAAL;AAMA,UAAKC,CAAAA,WAAL;AAMA,UAAKC,CAAAA,OAAL;AAMA,UAAKC,CAAAA,SAAL;AAMA,UAAKC,CAAAA,SAAL;AA7BY;AADhB;AAsCA,OAAMC,qBAAN;AACEN,eAAW,EAAG;AAKZ,UAAKO,CAAAA,kBAAL;AALY;AAgBdC,eAAW,CAACC,GAAD,EAAMC,aAAN,EAAqBC,WAArB,CAAkC;;AAS7CC,kBAAc,CAACC,EAAD,EAAKC,UAAL,CAAiB;;AA1BjC;AAsCAR,sBAAqBS,CAAAA,aAArB;AAEAC,SAAA,GAAUV,oBAAV;AAvFA,SAAA,OAAA;AAAA,CAAA,CAAA;;\",\n\"sources\":[\"goog/module/abstractmoduleloader.js\"],\n\"sourcesContent\":[\"/**\\n * @license\\n * Copyright The Closure Library Authors.\\n * SPDX-License-Identifier: Apache-2.0\\n */\\n\\n/**\\n * @fileoverview An interface for module loading.\\n */\\n\\ngoog.module('goog.module.AbstractModuleLoader');\\ngoog.module.declareLegacyNamespace();\\n\\nconst ModuleInfo = goog.requireType('goog.module.ModuleInfo');\\n\\n/**\\n * Optional parameters for the loadModules method.\\n * @record\\n */\\nclass LoadOptions {\\n  constructor() {\\n    /**\\n     * A map of extra runtime module dependencies.\\n     * @type {!AbstractModuleLoader.ExtraEdgesMap|undefined}\\n     */\\n    this.extraEdges;\\n\\n    /**\\n     * Whether to bypass cache while loading the module.\\n     * @const {boolean|undefined}\\n     */\\n    this.forceReload;\\n\\n    /**\\n     * The callback if module loading is an error.\\n     * @const {(function(?number): void)|undefined}\\n     */\\n    this.onError;\\n\\n    /**\\n     * The callback if module loading is a success.\\n     * @const {(function(): void)|undefined}\\n     */\\n    this.onSuccess;\\n\\n    /**\\n     * The callback if module loading times out.\\n     * @const {(function(): void)|undefined}\\n     */\\n    this.onTimeout;\\n  }\\n}\\n\\n/**\\n * An interface that loads JavaScript modules.\\n * @interface\\n */\\nclass AbstractModuleLoader {\\n  constructor() {\\n    /**\\n     * Whether or not the implementation supports extra edges.\\n     * @type {boolean|undefined}\\n     */\\n    this.supportsExtraEdges;\\n  }\\n\\n  /**\\n   * Loads a list of JavaScript modules.\\n   *\\n   * @param {!Array<string>} ids The module ids in dependency order.\\n   * @param {!Object<string, !ModuleInfo>} moduleInfoMap A mapping\\n   *     from module id to ModuleInfo object.\\n   * @param {!LoadOptions=} loadOptions\\n   */\\n  loadModules(ids, moduleInfoMap, loadOptions) {};\\n\\n\\n  /**\\n   * Pre-fetches a JavaScript module.\\n   *\\n   * @param {string} id The module id.\\n   * @param {!ModuleInfo} moduleInfo The module info.\\n   */\\n  prefetchModule(id, moduleInfo) {};\\n}\\n\\n/**\\n * A map of extra runtime module dependencies.\\n * Since the polyfills for the ES6 Map/Set classes would cause a performance\\n * regression, we are using plain Javascript objects to mimic their\\n * functionality. The outer object will map a moduleId to another object, the\\n * keys of which are the moduleIds of the modules it depends on: that is, if\\n * `map['a']['b']` is true then module 'a' depends on module 'b'.\\n * @typedef {!Object<!Object<boolean>>}\\n */\\nAbstractModuleLoader.ExtraEdgesMap;\\n\\nexports = AbstractModuleLoader;\\n\"],\n\"names\":[\"goog\",\"module\",\"declareLegacyNamespace\",\"ModuleInfo\",\"requireType\",\"LoadOptions\",\"constructor\",\"extraEdges\",\"forceReload\",\"onError\",\"onSuccess\",\"onTimeout\",\"AbstractModuleLoader\",\"supportsExtraEdges\",\"loadModules\",\"ids\",\"moduleInfoMap\",\"loadOptions\",\"prefetchModule\",\"id\",\"moduleInfo\",\"ExtraEdgesMap\",\"exports\"]\n}\n"]